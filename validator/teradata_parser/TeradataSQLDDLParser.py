# Generated from sql/teradata/TeradataSQLDDLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1233,14459,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,
        2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
        7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,
        2,373,7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,
        7,378,2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,
        2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,
        7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,
        2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,
        7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
        2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,
        7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
        2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
        7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,
        2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
        7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,
        2,439,7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,
        7,444,2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,
        2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,
        7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,
        2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,
        7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
        2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,
        7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
        2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
        7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,
        2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
        7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,
        2,505,7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,
        7,510,2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,
        2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,
        7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,
        2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,
        7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
        2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,
        7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
        2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
        7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,
        2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
        7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,
        2,571,7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,
        7,576,2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,
        2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,
        7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,
        2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,
        7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
        2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,
        7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
        2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,
        7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,
        2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
        7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,
        2,637,7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,
        7,642,2,643,7,643,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,1379,
        8,0,1,1,1,1,1,1,1,1,3,1,1385,8,1,1,1,1,1,3,1,1389,8,1,1,1,1,1,3,
        1,1393,8,1,1,1,1,1,1,1,5,1,1398,8,1,10,1,12,1,1401,9,1,1,2,1,2,1,
        2,1,2,1,2,3,2,1408,8,2,3,2,1410,8,2,1,3,1,3,1,3,1,3,1,3,4,3,1417,
        8,3,11,3,12,3,1418,3,3,1421,8,3,3,3,1423,8,3,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,5,4,1435,8,4,10,4,12,4,1438,9,4,3,4,1440,8,4,
        1,4,3,4,1443,8,4,3,4,1445,8,4,1,4,1,4,3,4,1449,8,4,1,4,1,4,1,4,3,
        4,1454,8,4,3,4,1456,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1477,8,7,1,8,1,8,1,8,1,8,
        1,8,1,8,5,8,1485,8,8,10,8,12,8,1488,9,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,1499,8,8,1,8,3,8,1502,8,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,3,8,1511,8,8,1,8,1,8,1,8,1,8,1,8,3,8,1518,8,8,1,8,1,8,1,8,
        1,8,3,8,1524,8,8,1,8,1,8,3,8,1528,8,8,1,9,1,9,1,9,1,9,1,9,1,9,5,
        9,1536,8,9,10,9,12,9,1539,9,9,1,10,3,10,1542,8,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,3,10,1551,8,10,1,10,1,10,3,10,1555,8,10,3,10,
        1557,8,10,1,11,1,11,1,11,1,11,1,11,3,11,1564,8,11,1,11,1,11,1,11,
        1,11,1,11,3,11,1571,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,5,13,1585,8,13,10,13,12,13,1588,9,13,1,13,1,
        13,3,13,1592,8,13,1,13,1,13,1,13,5,13,1597,8,13,10,13,12,13,1600,
        9,13,3,13,1602,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,1611,
        8,13,10,13,12,13,1614,9,13,3,13,1616,8,13,1,13,1,13,3,13,1620,8,
        13,1,13,1,13,1,13,5,13,1625,8,13,10,13,12,13,1628,9,13,3,13,1630,
        8,13,1,14,1,14,1,14,1,14,1,14,3,14,1637,8,14,1,14,1,14,1,14,1,14,
        1,14,3,14,1644,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
        1654,8,15,1,15,1,15,3,15,1658,8,15,3,15,1660,8,15,1,16,1,16,1,16,
        1,16,3,16,1666,8,16,1,16,3,16,1669,8,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1683,8,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1697,8,17,1,17,
        1,17,1,17,1,17,1,17,1,17,3,17,1705,8,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,3,17,1716,8,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,1724,8,17,1,18,1,18,1,18,1,18,1,18,5,18,1731,8,18,10,18,12,
        18,1734,9,18,1,18,1,18,3,18,1738,8,18,1,18,1,18,3,18,1742,8,18,1,
        18,3,18,1745,8,18,1,18,1,18,1,18,3,18,1750,8,18,1,18,1,18,1,18,3,
        18,1755,8,18,5,18,1757,8,18,10,18,12,18,1760,9,18,1,18,1,18,3,18,
        1764,8,18,1,18,1,18,3,18,1768,8,18,1,18,1,18,1,18,1,18,3,18,1774,
        8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,5,18,1792,8,18,10,18,12,18,1795,9,18,1,18,1,
        18,3,18,1799,8,18,1,19,1,19,1,19,1,19,1,19,3,19,1806,8,19,1,19,1,
        19,1,19,1,19,3,19,1812,8,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,1820,
        8,19,10,19,12,19,1823,9,19,1,19,1,19,1,19,1,19,3,19,1829,8,19,1,
        19,3,19,1832,8,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,1840,8,19,10,
        19,12,19,1843,9,19,1,19,1,19,3,19,1847,8,19,1,20,1,20,3,20,1851,
        8,20,1,20,3,20,1854,8,20,1,20,1,20,3,20,1858,8,20,1,20,3,20,1861,
        8,20,1,20,1,20,1,20,3,20,1866,8,20,1,20,1,20,1,20,1,20,5,20,1872,
        8,20,10,20,12,20,1875,9,20,1,20,1,20,3,20,1879,8,20,1,20,3,20,1882,
        8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,1891,8,21,10,21,12,
        21,1894,9,21,1,21,1,21,3,21,1898,8,21,1,21,1,21,1,21,5,21,1903,8,
        21,10,21,12,21,1906,9,21,3,21,1908,8,21,1,21,1,21,1,21,3,21,1913,
        8,21,1,21,1,21,3,21,1917,8,21,3,21,1919,8,21,1,21,1,21,3,21,1923,
        8,21,1,22,1,22,1,22,1,22,3,22,1929,8,22,1,22,1,22,3,22,1933,8,22,
        1,23,1,23,1,23,1,23,4,23,1939,8,23,11,23,12,23,1940,1,23,4,23,1944,
        8,23,11,23,12,23,1945,1,23,1,23,5,23,1950,8,23,10,23,12,23,1953,
        9,23,1,23,4,23,1956,8,23,11,23,12,23,1957,3,23,1960,8,23,1,24,1,
        24,1,24,1,24,1,24,5,24,1967,8,24,10,24,12,24,1970,9,24,1,24,1,24,
        1,24,1,24,1,24,3,24,1977,8,24,1,24,1,24,3,24,1981,8,24,1,24,1,24,
        1,24,1,24,3,24,1987,8,24,1,24,1,24,1,24,3,24,1992,8,24,1,25,1,25,
        1,25,3,25,1997,8,25,1,25,1,25,1,25,1,25,3,25,2003,8,25,1,26,1,26,
        1,26,1,26,1,26,1,26,3,26,2011,8,26,1,26,1,26,3,26,2015,8,26,1,26,
        1,26,1,26,1,26,3,26,2021,8,26,1,26,1,26,1,26,3,26,2026,8,26,1,27,
        1,27,1,27,3,27,2031,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,3,27,2042,8,27,3,27,2044,8,27,1,28,1,28,1,28,1,28,1,28,5,28,
        2051,8,28,10,28,12,28,2054,9,28,1,29,1,29,3,29,2058,8,29,1,29,1,
        29,1,29,1,29,5,29,2064,8,29,10,29,12,29,2067,9,29,1,30,1,30,1,30,
        1,30,1,30,1,30,5,30,2075,8,30,10,30,12,30,2078,9,30,1,31,1,31,1,
        31,1,31,1,31,5,31,2085,8,31,10,31,12,31,2088,9,31,1,32,1,32,3,32,
        2092,8,32,1,32,1,32,3,32,2096,8,32,1,32,1,32,1,32,3,32,2101,8,32,
        1,32,5,32,2104,8,32,10,32,12,32,2107,9,32,1,33,1,33,1,33,1,33,3,
        33,2113,8,33,1,33,1,33,1,33,3,33,2118,8,33,1,33,5,33,2121,8,33,10,
        33,12,33,2124,9,33,1,34,3,34,2127,8,34,1,34,1,34,1,34,1,34,1,34,
        5,34,2134,8,34,10,34,12,34,2137,9,34,3,34,2139,8,34,1,34,1,34,1,
        34,1,34,1,34,1,34,3,34,2147,8,34,1,34,1,34,3,34,2151,8,34,1,34,3,
        34,2154,8,34,1,34,5,34,2157,8,34,10,34,12,34,2160,9,34,1,34,1,34,
        4,34,2164,8,34,11,34,12,34,2165,1,34,4,34,2169,8,34,11,34,12,34,
        2170,1,34,1,34,5,34,2175,8,34,10,34,12,34,2178,9,34,3,34,2180,8,
        34,1,35,3,35,2183,8,35,1,35,1,35,1,35,1,35,1,35,5,35,2190,8,35,10,
        35,12,35,2193,9,35,1,35,1,35,3,35,2197,8,35,1,35,1,35,3,35,2201,
        8,35,1,35,1,35,1,36,1,36,3,36,2207,8,36,1,36,1,36,1,36,1,36,1,36,
        1,36,5,36,2215,8,36,10,36,12,36,2218,9,36,1,36,1,36,1,36,1,36,3,
        36,2224,8,36,1,36,1,36,3,36,2228,8,36,1,37,1,37,1,37,3,37,2233,8,
        37,1,37,1,37,3,37,2237,8,37,1,37,1,37,1,37,1,37,1,37,3,37,2244,8,
        37,1,37,1,37,1,37,1,37,5,37,2250,8,37,10,37,12,37,2253,9,37,3,37,
        2255,8,37,1,37,1,37,1,37,3,37,2260,8,37,1,37,1,37,1,37,1,37,5,37,
        2266,8,37,10,37,12,37,2269,9,37,3,37,2271,8,37,1,37,1,37,1,37,1,
        37,5,37,2277,8,37,10,37,12,37,2280,9,37,3,37,2282,8,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,2386,8,38,1,39,
        1,39,1,39,1,39,1,39,1,39,3,39,2394,8,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,3,40,2417,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
        2425,8,41,1,41,1,41,1,41,3,41,2430,8,41,1,41,3,41,2433,8,41,1,41,
        1,41,1,41,3,41,2438,8,41,1,41,3,41,2441,8,41,3,41,2443,8,41,3,41,
        2445,8,41,1,41,1,41,3,41,2449,8,41,1,41,1,41,1,41,1,41,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,5,42,2462,8,42,10,42,12,42,2465,9,42,3,
        42,2467,8,42,1,42,1,42,1,42,3,42,2472,8,42,1,42,1,42,1,42,1,42,3,
        42,2478,8,42,3,42,2480,8,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,3,43,2493,8,43,1,43,1,43,1,43,1,43,1,43,3,43,2500,
        8,43,1,43,1,43,1,43,1,43,1,43,3,43,2507,8,43,1,43,3,43,2510,8,43,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,3,44,2526,8,44,1,44,3,44,2529,8,44,3,44,2531,8,44,1,45,1,45,
        1,45,3,45,2536,8,45,1,46,1,46,3,46,2540,8,46,1,47,1,47,1,47,5,47,
        2545,8,47,10,47,12,47,2548,9,47,1,47,3,47,2551,8,47,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,5,48,2560,8,48,10,48,12,48,2563,9,48,1,48,
        1,48,3,48,2567,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,2576,
        8,49,10,49,12,49,2579,9,49,1,49,1,49,3,49,2583,8,49,1,50,1,50,3,
        50,2587,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,3,51,2597,8,
        51,1,51,1,51,1,51,1,51,1,51,5,51,2604,8,51,10,51,12,51,2607,9,51,
        3,51,2609,8,51,1,51,3,51,2612,8,51,1,51,1,51,1,51,1,51,5,51,2618,
        8,51,10,51,12,51,2621,9,51,3,51,2623,8,51,1,51,1,51,1,51,5,51,2628,
        8,51,10,51,12,51,2631,9,51,3,51,2633,8,51,1,51,1,51,3,51,2637,8,
        51,1,51,1,51,3,51,2641,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,2658,8,52,1,52,3,52,2661,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,2671,8,52,1,52,
        1,52,3,52,2675,8,52,1,53,3,53,2678,8,53,1,53,3,53,2681,8,53,1,53,
        1,53,1,53,1,53,3,53,2687,8,53,1,54,1,54,3,54,2691,8,54,1,54,3,54,
        2694,8,54,1,54,1,54,1,54,1,54,5,54,2700,8,54,10,54,12,54,2703,9,
        54,1,54,1,54,3,54,2707,8,54,3,54,2709,8,54,1,55,1,55,3,55,2713,8,
        55,1,55,3,55,2716,8,55,1,55,1,55,1,55,3,55,2721,8,55,1,55,1,55,1,
        55,3,55,2726,8,55,5,55,2728,8,55,10,55,12,55,2731,9,55,1,55,1,55,
        3,55,2735,8,55,1,55,3,55,2738,8,55,1,55,1,55,3,55,2742,8,55,1,56,
        3,56,2745,8,56,1,56,1,56,1,57,1,57,1,57,3,57,2752,8,57,1,57,1,57,
        1,57,3,57,2757,8,57,1,57,1,57,1,57,1,57,3,57,2763,8,57,1,57,1,57,
        1,57,3,57,2768,8,57,5,57,2770,8,57,10,57,12,57,2773,9,57,1,57,3,
        57,2776,8,57,3,57,2778,8,57,1,58,1,58,3,58,2782,8,58,1,58,3,58,2785,
        8,58,1,58,1,58,1,58,1,58,3,58,2791,8,58,1,58,3,58,2794,8,58,1,58,
        1,58,1,58,3,58,2799,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2807,
        8,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,2817,8,60,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,5,61,2826,8,61,10,61,12,61,2829,9,
        61,3,61,2831,8,61,1,61,1,61,1,61,1,61,1,61,5,61,2838,8,61,10,61,
        12,61,2841,9,61,1,61,5,61,2844,8,61,10,61,12,61,2847,9,61,1,61,1,
        61,5,61,2851,8,61,10,61,12,61,2854,9,61,1,61,5,61,2857,8,61,10,61,
        12,61,2860,9,61,1,61,1,61,1,61,3,61,2865,8,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,2882,
        8,62,10,62,12,62,2885,9,62,3,62,2887,8,62,1,62,1,62,1,62,1,62,1,
        62,1,62,5,62,2895,8,62,10,62,12,62,2898,9,62,1,62,5,62,2901,8,62,
        10,62,12,62,2904,9,62,1,62,1,62,5,62,2908,8,62,10,62,12,62,2911,
        9,62,1,62,5,62,2914,8,62,10,62,12,62,2917,9,62,1,62,1,62,1,62,3,
        62,2922,8,62,1,62,3,62,2925,8,62,1,62,1,62,1,62,1,62,3,62,2931,8,
        62,3,62,2933,8,62,1,62,3,62,2936,8,62,1,62,1,62,1,62,1,62,3,62,2942,
        8,62,1,62,3,62,2945,8,62,3,62,2947,8,62,1,62,1,62,3,62,2951,8,62,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,2960,8,63,10,63,12,63,2963,
        9,63,3,63,2965,8,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2973,8,63,
        1,63,1,63,5,63,2977,8,63,10,63,12,63,2980,9,63,1,63,5,63,2983,8,
        63,10,63,12,63,2986,9,63,1,63,1,63,5,63,2990,8,63,10,63,12,63,2993,
        9,63,1,63,5,63,2996,8,63,10,63,12,63,2999,9,63,1,63,1,63,1,63,1,
        63,3,63,3005,8,63,1,63,1,63,1,63,1,63,3,63,3011,8,63,3,63,3013,8,
        63,1,63,3,63,3016,8,63,1,63,1,63,1,63,1,63,3,63,3022,8,63,1,63,3,
        63,3025,8,63,3,63,3027,8,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,
        66,1,66,1,67,1,67,1,67,3,67,3041,8,67,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,3,67,3053,8,67,1,68,1,68,1,68,1,68,5,68,3059,
        8,68,10,68,12,68,3062,9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,3,68,3074,8,68,3,68,3076,8,68,3,68,3078,8,68,1,69,3,
        69,3081,8,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,3,71,3091,8,
        71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,3099,8,71,1,72,1,72,1,72,1,
        72,1,73,3,73,3106,8,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,3,75,3120,8,75,1,75,1,75,3,75,3124,8,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,3138,8,
        75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,3,
        78,3152,8,78,1,78,1,78,1,78,1,78,1,78,5,78,3159,8,78,10,78,12,78,
        3162,9,78,1,78,1,78,3,78,3166,8,78,1,78,1,78,1,78,3,78,3171,8,78,
        1,78,3,78,3174,8,78,1,78,1,78,1,78,3,78,3179,8,78,1,78,1,78,4,78,
        3183,8,78,11,78,12,78,3184,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,
        79,5,79,3195,8,79,10,79,12,79,3198,9,79,1,79,1,79,3,79,3202,8,79,
        1,79,5,79,3205,8,79,10,79,12,79,3208,9,79,1,80,1,80,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,5,81,3219,8,81,10,81,12,81,3222,9,81,3,81,
        3224,8,81,1,81,1,81,1,81,1,81,5,81,3230,8,81,10,81,12,81,3233,9,
        81,1,81,1,81,1,82,3,82,3238,8,82,1,82,1,82,1,82,5,82,3243,8,82,10,
        82,12,82,3246,9,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
        3256,8,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,
        3,86,3269,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,3279,
        8,87,1,87,1,87,3,87,3283,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,4,87,3294,8,87,11,87,12,87,3295,1,87,1,87,1,87,3,87,3301,
        8,87,1,87,1,87,1,88,1,88,1,88,3,88,3308,8,88,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,3325,
        8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,3374,8,90,1,91,
        1,91,1,91,3,91,3379,8,91,1,92,1,92,1,92,3,92,3384,8,92,1,92,1,92,
        5,92,3388,8,92,10,92,12,92,3391,9,92,1,92,5,92,3394,8,92,10,92,12,
        92,3397,9,92,1,92,5,92,3400,8,92,10,92,12,92,3403,9,92,1,92,5,92,
        3406,8,92,10,92,12,92,3409,9,92,1,92,1,92,3,92,3413,8,92,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,3425,8,93,1,94,1,
        94,1,94,1,94,1,94,1,95,1,95,3,95,3434,8,95,1,96,1,96,1,96,1,96,3,
        96,3440,8,96,1,97,1,97,1,97,1,97,3,97,3446,8,97,3,97,3448,8,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,5,97,3459,8,97,10,97,
        12,97,3462,9,97,3,97,3464,8,97,1,97,1,97,1,97,1,97,1,97,5,97,3471,
        8,97,10,97,12,97,3474,9,97,1,97,1,97,1,97,1,97,1,97,3,97,3481,8,
        97,1,97,1,97,1,97,5,97,3486,8,97,10,97,12,97,3489,9,97,3,97,3491,
        8,97,1,98,1,98,1,98,1,98,5,98,3497,8,98,10,98,12,98,3500,9,98,1,
        99,1,99,1,99,1,99,5,99,3506,8,99,10,99,12,99,3509,9,99,1,99,1,99,
        5,99,3513,8,99,10,99,12,99,3516,9,99,1,99,1,99,1,99,1,99,3,99,3522,
        8,99,3,99,3524,8,99,1,99,1,99,1,100,1,100,1,100,3,100,3531,8,100,
        1,100,3,100,3534,8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,
        3542,8,100,1,100,1,100,3,100,3546,8,100,3,100,3548,8,100,1,100,1,
        100,3,100,3552,8,100,1,100,3,100,3555,8,100,1,100,1,100,1,100,1,
        100,1,100,3,100,3562,8,100,3,100,3564,8,100,1,100,3,100,3567,8,100,
        1,100,1,100,1,100,1,100,1,100,3,100,3574,8,100,3,100,3576,8,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,3586,8,101,
        1,101,1,101,1,101,1,101,5,101,3592,8,101,10,101,12,101,3595,9,101,
        1,101,1,101,1,101,1,101,1,101,3,101,3602,8,101,1,101,1,101,1,101,
        1,101,1,101,1,101,3,101,3610,8,101,5,101,3612,8,101,10,101,12,101,
        3615,9,101,3,101,3617,8,101,1,101,1,101,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,3,106,
        3646,8,106,1,106,3,106,3649,8,106,1,106,1,106,1,106,1,106,5,106,
        3655,8,106,10,106,12,106,3658,9,106,1,106,1,106,1,106,1,106,1,106,
        1,107,1,107,1,107,1,107,1,107,1,107,5,107,3671,8,107,10,107,12,107,
        3674,9,107,3,107,3676,8,107,1,108,1,108,1,108,1,108,1,109,1,109,
        3,109,3684,8,109,1,109,3,109,3687,8,109,1,109,1,109,1,109,1,109,
        1,109,5,109,3694,8,109,10,109,12,109,3697,9,109,1,110,1,110,1,110,
        1,110,1,110,1,110,5,110,3705,8,110,10,110,12,110,3708,9,110,3,110,
        3710,8,110,1,111,1,111,1,111,1,111,1,111,3,111,3717,8,111,1,112,
        1,112,1,112,4,112,3722,8,112,11,112,12,112,3723,1,112,4,112,3727,
        8,112,11,112,12,112,3728,3,112,3731,8,112,1,112,1,112,4,112,3735,
        8,112,11,112,12,112,3736,3,112,3739,8,112,1,112,1,112,1,112,1,113,
        1,113,1,113,1,113,4,113,3748,8,113,11,113,12,113,3749,1,114,1,114,
        1,114,1,114,4,114,3756,8,114,11,114,12,114,3757,1,115,1,115,1,115,
        1,115,4,115,3764,8,115,11,115,12,115,3765,1,115,1,115,1,115,1,115,
        4,115,3772,8,115,11,115,12,115,3773,5,115,3776,8,115,10,115,12,115,
        3779,9,115,1,115,1,115,4,115,3783,8,115,11,115,12,115,3784,3,115,
        3787,8,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,4,116,3796,
        8,116,11,116,12,116,3797,1,116,1,116,1,116,1,117,1,117,4,117,3805,
        8,117,11,117,12,117,3806,1,117,1,117,1,117,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,3,118,3819,8,118,1,118,3,118,3822,8,118,1,118,
        3,118,3825,8,118,1,118,1,118,1,118,4,118,3830,8,118,11,118,12,118,
        3831,1,118,1,118,1,118,1,119,1,119,4,119,3839,8,119,11,119,12,119,
        3840,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,121,
        1,121,1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,3,124,3862,
        8,124,1,125,1,125,3,125,3866,8,125,1,125,1,125,1,126,1,126,3,126,
        3872,8,126,1,126,1,126,1,126,1,126,3,126,3878,8,126,1,126,3,126,
        3881,8,126,1,126,1,126,3,126,3885,8,126,1,126,1,126,3,126,3889,8,
        126,1,126,3,126,3892,8,126,1,126,3,126,3895,8,126,1,126,1,126,1,
        127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,3907,8,127,1,
        127,1,127,3,127,3911,8,127,3,127,3913,8,127,1,127,1,127,1,127,3,
        127,3918,8,127,1,127,1,127,1,128,1,128,1,128,3,128,3925,8,128,1,
        128,1,128,1,128,3,128,3930,8,128,1,128,1,128,1,128,1,128,5,128,3936,
        8,128,10,128,12,128,3939,9,128,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,3,129,3950,8,129,1,130,1,130,1,130,1,130,5,130,
        3956,8,130,10,130,12,130,3959,9,130,1,130,1,130,3,130,3963,8,130,
        1,130,1,130,1,131,3,131,3968,8,131,1,131,1,131,3,131,3972,8,131,
        1,131,3,131,3975,8,131,1,131,1,131,1,131,1,131,5,131,3981,8,131,
        10,131,12,131,3984,9,131,1,131,1,131,3,131,3988,8,131,1,131,3,131,
        3991,8,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,5,132,4000,
        8,132,10,132,12,132,4003,9,132,1,132,1,132,1,132,1,132,3,132,4009,
        8,132,1,132,5,132,4012,8,132,10,132,12,132,4015,9,132,3,132,4017,
        8,132,1,133,1,133,1,133,1,133,5,133,4023,8,133,10,133,12,133,4026,
        9,133,1,133,1,133,1,133,1,133,5,133,4032,8,133,10,133,12,133,4035,
        9,133,1,133,1,133,1,133,1,133,1,133,1,133,5,133,4043,8,133,10,133,
        12,133,4046,9,133,1,133,1,133,1,133,3,133,4051,8,133,1,133,1,133,
        1,133,1,133,5,133,4057,8,133,10,133,12,133,4060,9,133,1,133,1,133,
        3,133,4064,8,133,1,133,1,133,3,133,4068,8,133,3,133,4070,8,133,1,
        133,1,133,1,133,1,133,5,133,4076,8,133,10,133,12,133,4079,9,133,
        1,133,3,133,4082,8,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
        1,133,1,134,1,134,3,134,4094,8,134,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,3,135,4114,8,135,1,135,3,135,4117,8,135,1,135,3,135,
        4120,8,135,1,136,1,136,3,136,4124,8,136,1,136,3,136,4127,8,136,1,
        136,3,136,4130,8,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,
        137,4139,8,137,1,137,3,137,4142,8,137,3,137,4144,8,137,1,137,1,137,
        1,137,1,137,3,137,4150,8,137,3,137,4152,8,137,1,137,1,137,1,137,
        1,137,1,137,5,137,4159,8,137,10,137,12,137,4162,9,137,1,138,1,138,
        1,138,5,138,4167,8,138,10,138,12,138,4170,9,138,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,5,139,4179,8,139,10,139,12,139,4182,9,139,
        3,139,4184,8,139,1,140,1,140,1,140,1,140,1,140,5,140,4191,8,140,
        10,140,12,140,4194,9,140,1,140,3,140,4197,8,140,1,140,1,140,1,140,
        1,140,1,140,1,140,1,140,1,140,1,140,3,140,4208,8,140,1,140,3,140,
        4211,8,140,1,140,1,140,3,140,4215,8,140,1,140,1,140,1,140,1,140,
        1,140,5,140,4222,8,140,10,140,12,140,4225,9,140,1,140,1,140,1,140,
        3,140,4230,8,140,1,140,1,140,1,140,1,140,1,140,3,140,4237,8,140,
        1,140,1,140,3,140,4241,8,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,1,140,1,140,5,140,4253,8,140,10,140,12,140,4256,9,140,
        3,140,4258,8,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,4266,
        8,140,1,140,1,140,1,140,1,140,1,140,5,140,4273,8,140,10,140,12,140,
        4276,9,140,3,140,4278,8,140,1,141,1,141,1,141,1,141,3,141,4284,8,
        141,1,141,1,141,1,141,1,141,3,141,4290,8,141,1,141,1,141,1,141,1,
        141,3,141,4296,8,141,1,141,1,141,1,141,1,141,3,141,4302,8,141,1,
        141,1,141,1,141,1,141,3,141,4308,8,141,1,141,1,141,1,141,1,141,3,
        141,4314,8,141,1,141,1,141,1,141,1,141,3,141,4320,8,141,1,141,1,
        141,1,141,1,141,3,141,4326,8,141,1,141,1,141,1,141,1,141,3,141,4332,
        8,141,3,141,4334,8,141,1,142,1,142,1,142,1,142,3,142,4340,8,142,
        1,142,1,142,3,142,4344,8,142,1,142,3,142,4347,8,142,1,142,1,142,
        1,142,3,142,4352,8,142,1,142,1,142,1,142,3,142,4357,8,142,3,142,
        4359,8,142,1,143,1,143,1,143,3,143,4364,8,143,1,143,1,143,1,143,
        1,144,1,144,4,144,4371,8,144,11,144,12,144,4372,1,145,1,145,1,145,
        1,145,1,145,1,146,1,146,3,146,4382,8,146,1,147,1,147,1,147,1,147,
        1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,150,1,150,1,151,1,151,
        1,151,1,151,1,151,1,151,5,151,4403,8,151,10,151,12,151,4406,9,151,
        1,151,1,151,1,151,1,151,5,151,4412,8,151,10,151,12,151,4415,9,151,
        1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,5,151,4425,8,151,
        10,151,12,151,4428,9,151,3,151,4430,8,151,1,151,1,151,1,151,1,151,
        3,151,4436,8,151,1,151,1,151,1,151,1,151,5,151,4442,8,151,10,151,
        12,151,4445,9,151,1,151,1,151,3,151,4449,8,151,3,151,4451,8,151,
        1,152,1,152,3,152,4455,8,152,1,152,1,152,1,152,1,153,1,153,1,153,
        1,153,1,153,1,153,3,153,4466,8,153,1,154,1,154,3,154,4470,8,154,
        1,154,1,154,3,154,4474,8,154,1,154,1,154,1,154,5,154,4479,8,154,
        10,154,12,154,4482,9,154,1,154,1,154,1,154,1,154,5,154,4488,8,154,
        10,154,12,154,4491,9,154,1,154,1,154,1,154,3,154,4496,8,154,1,154,
        5,154,4499,8,154,10,154,12,154,4502,9,154,3,154,4504,8,154,1,154,
        3,154,4507,8,154,1,155,1,155,3,155,4511,8,155,1,155,1,155,3,155,
        4515,8,155,1,155,1,155,1,155,5,155,4520,8,155,10,155,12,155,4523,
        9,155,1,155,1,155,1,155,1,155,5,155,4529,8,155,10,155,12,155,4532,
        9,155,1,155,1,155,3,155,4536,8,155,1,155,1,155,1,155,1,155,3,155,
        4542,8,155,1,155,1,155,1,155,3,155,4547,8,155,1,155,1,155,3,155,
        4551,8,155,1,155,1,155,1,155,3,155,4556,8,155,1,155,3,155,4559,8,
        155,1,155,1,155,3,155,4563,8,155,1,155,5,155,4566,8,155,10,155,12,
        155,4569,9,155,3,155,4571,8,155,1,155,3,155,4574,8,155,1,156,1,156,
        3,156,4578,8,156,1,156,1,156,3,156,4582,8,156,1,156,1,156,1,156,
        1,156,1,156,5,156,4589,8,156,10,156,12,156,4592,9,156,1,156,1,156,
        1,156,1,156,5,156,4598,8,156,10,156,12,156,4601,9,156,1,156,1,156,
        5,156,4605,8,156,10,156,12,156,4608,9,156,1,156,1,156,1,156,3,156,
        4613,8,156,1,156,5,156,4616,8,156,10,156,12,156,4619,9,156,3,156,
        4621,8,156,1,157,1,157,3,157,4625,8,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,5,157,4634,8,157,10,157,12,157,4637,9,157,1,157,
        1,157,1,157,1,157,3,157,4643,8,157,1,157,1,157,1,157,1,157,1,157,
        5,157,4650,8,157,10,157,12,157,4653,9,157,1,157,1,157,3,157,4657,
        8,157,1,158,1,158,3,158,4661,8,158,1,158,1,158,1,158,1,158,1,158,
        5,158,4668,8,158,10,158,12,158,4671,9,158,1,158,1,158,3,158,4675,
        8,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,5,158,4684,8,158,
        10,158,12,158,4687,9,158,3,158,4689,8,158,1,158,1,158,3,158,4693,
        8,158,1,158,1,158,1,158,1,158,5,158,4699,8,158,10,158,12,158,4702,
        9,158,1,158,1,158,3,158,4706,8,158,1,158,1,158,1,158,3,158,4711,
        8,158,1,158,3,158,4714,8,158,1,158,1,158,1,158,3,158,4719,8,158,
        1,159,1,159,1,159,1,159,3,159,4725,8,159,1,159,1,159,1,159,1,159,
        3,159,4731,8,159,1,160,1,160,1,160,1,160,3,160,4737,8,160,1,160,
        1,160,1,160,3,160,4742,8,160,1,160,1,160,1,160,1,160,1,160,3,160,
        4749,8,160,3,160,4751,8,160,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,3,161,4761,8,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,3,161,4773,8,161,1,161,1,161,1,161,1,161,
        3,161,4779,8,161,1,162,1,162,5,162,4783,8,162,10,162,12,162,4786,
        9,162,1,162,1,162,5,162,4790,8,162,10,162,12,162,4793,9,162,1,162,
        1,162,1,162,1,162,5,162,4799,8,162,10,162,12,162,4802,9,162,1,162,
        1,162,5,162,4806,8,162,10,162,12,162,4809,9,162,1,162,1,162,3,162,
        4813,8,162,1,162,1,162,3,162,4817,8,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,4830,8,162,1,163,
        1,163,5,163,4834,8,163,10,163,12,163,4837,9,163,1,163,1,163,1,163,
        1,163,5,163,4843,8,163,10,163,12,163,4846,9,163,1,163,1,163,3,163,
        4850,8,163,1,163,1,163,3,163,4854,8,163,1,163,3,163,4857,8,163,1,
        164,3,164,4860,8,164,1,164,3,164,4863,8,164,1,164,1,164,3,164,4867,
        8,164,1,164,1,164,1,164,1,164,5,164,4873,8,164,10,164,12,164,4876,
        9,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,4886,
        8,164,1,164,3,164,4889,8,164,1,164,1,164,1,164,1,164,5,164,4895,
        8,164,10,164,12,164,4898,9,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,5,164,4909,8,164,10,164,12,164,4912,9,164,1,164,
        1,164,3,164,4916,8,164,1,164,1,164,1,164,3,164,4921,8,164,1,164,
        1,164,1,164,1,164,5,164,4927,8,164,10,164,12,164,4930,9,164,1,164,
        1,164,3,164,4934,8,164,1,164,3,164,4937,8,164,1,164,1,164,3,164,
        4941,8,164,1,164,1,164,1,164,1,164,1,164,5,164,4948,8,164,10,164,
        12,164,4951,9,164,1,164,1,164,3,164,4955,8,164,1,164,3,164,4958,
        8,164,3,164,4960,8,164,1,165,1,165,1,165,3,165,4965,8,165,1,165,
        3,165,4968,8,165,1,165,1,165,1,165,1,165,1,165,3,165,4975,8,165,
        1,166,1,166,1,166,1,166,3,166,4981,8,166,1,166,1,166,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,3,168,5011,8,168,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        3,169,5041,8,169,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,
        1,171,1,171,1,171,3,171,5054,8,171,1,171,1,171,3,171,5058,8,171,
        1,172,1,172,1,172,1,172,3,172,5064,8,172,1,172,1,172,3,172,5068,
        8,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,5077,8,173,
        1,173,1,173,1,173,1,173,1,173,3,173,5084,8,173,3,173,5086,8,173,
        1,174,1,174,1,174,3,174,5091,8,174,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,3,175,5103,8,175,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,5,176,5115,8,176,10,176,
        12,176,5118,9,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,3,176,5129,8,176,1,177,1,177,1,177,1,177,1,177,1,177,3,177,
        5137,8,177,1,178,1,178,3,178,5141,8,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,5,178,5155,8,178,
        10,178,12,178,5158,9,178,1,178,1,178,3,178,5162,8,178,1,179,3,179,
        5165,8,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,3,180,5174,
        8,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
        1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,3,180,5194,8,180,
        1,180,4,180,5197,8,180,11,180,12,180,5198,1,180,1,180,1,181,3,181,
        5204,8,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        5,182,5215,8,182,10,182,12,182,5218,9,182,1,182,1,182,3,182,5222,
        8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,
        5233,8,182,3,182,5235,8,182,3,182,5237,8,182,1,183,1,183,3,183,5241,
        8,183,1,183,1,183,1,183,3,183,5246,8,183,1,183,1,183,1,183,1,183,
        5,183,5252,8,183,10,183,12,183,5255,9,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,5,183,5270,
        8,183,10,183,12,183,5273,9,183,1,183,1,183,1,183,3,183,5278,8,183,
        1,184,1,184,1,184,3,184,5283,8,184,1,184,1,184,3,184,5287,8,184,
        1,184,1,184,1,184,1,184,1,184,5,184,5294,8,184,10,184,12,184,5297,
        9,184,1,184,1,184,3,184,5301,8,184,1,185,1,185,1,185,3,185,5306,
        8,185,1,185,1,185,3,185,5310,8,185,1,185,1,185,3,185,5314,8,185,
        1,185,1,185,3,185,5318,8,185,1,185,1,185,3,185,5322,8,185,1,185,
        1,185,1,185,5,185,5327,8,185,10,185,12,185,5330,9,185,3,185,5332,
        8,185,1,185,1,185,3,185,5336,8,185,1,186,1,186,3,186,5340,8,186,
        1,186,1,186,1,186,1,186,1,186,5,186,5347,8,186,10,186,12,186,5350,
        9,186,1,186,1,186,3,186,5354,8,186,1,186,3,186,5357,8,186,1,186,
        1,186,3,186,5361,8,186,1,186,1,186,1,187,1,187,1,187,3,187,5368,
        8,187,1,188,1,188,1,188,3,188,5373,8,188,1,188,1,188,1,188,1,188,
        1,188,1,188,5,188,5381,8,188,10,188,12,188,5384,9,188,1,188,1,188,
        3,188,5388,8,188,1,188,1,188,1,188,1,188,1,188,5,188,5395,8,188,
        10,188,12,188,5398,9,188,3,188,5400,8,188,1,189,1,189,1,189,3,189,
        5405,8,189,1,189,1,189,1,189,1,189,1,189,3,189,5412,8,189,1,190,
        1,190,1,190,1,190,3,190,5418,8,190,1,191,1,191,1,191,3,191,5423,
        8,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,
        5434,8,191,1,192,1,192,1,192,3,192,5439,8,192,1,192,1,192,1,192,
        1,192,1,192,3,192,5446,8,192,1,192,1,192,1,192,1,192,1,192,1,192,
        1,192,3,192,5455,8,192,1,193,1,193,1,193,3,193,5460,8,193,1,193,
        1,193,1,193,1,193,1,193,1,193,4,193,5468,8,193,11,193,12,193,5469,
        1,193,1,193,3,193,5474,8,193,1,194,1,194,1,194,3,194,5479,8,194,
        1,194,1,194,1,194,1,194,1,194,3,194,5486,8,194,1,194,1,194,4,194,
        5490,8,194,11,194,12,194,5491,1,194,1,194,1,194,1,194,3,194,5498,
        8,194,1,195,1,195,1,195,1,196,3,196,5504,8,196,1,196,1,196,3,196,
        5508,8,196,1,196,1,196,1,196,1,196,1,196,5,196,5515,8,196,10,196,
        12,196,5518,9,196,3,196,5520,8,196,1,196,1,196,1,196,1,196,1,196,
        1,196,1,196,1,196,3,196,5530,8,196,3,196,5532,8,196,1,196,1,196,
        3,196,5536,8,196,1,196,3,196,5539,8,196,1,196,1,196,1,196,3,196,
        5544,8,196,1,196,5,196,5547,8,196,10,196,12,196,5550,9,196,1,196,
        1,196,4,196,5554,8,196,11,196,12,196,5555,1,196,4,196,5559,8,196,
        11,196,12,196,5560,1,196,1,196,5,196,5565,8,196,10,196,12,196,5568,
        9,196,3,196,5570,8,196,1,197,3,197,5573,8,197,1,197,1,197,3,197,
        5577,8,197,1,197,1,197,1,197,1,197,1,197,5,197,5584,8,197,10,197,
        12,197,5587,9,197,3,197,5589,8,197,1,197,1,197,1,197,1,197,1,197,
        1,197,1,197,1,197,3,197,5599,8,197,3,197,5601,8,197,1,197,1,197,
        3,197,5605,8,197,1,197,3,197,5608,8,197,1,197,1,197,1,197,3,197,
        5613,8,197,1,197,5,197,5616,8,197,10,197,12,197,5619,9,197,1,197,
        1,197,4,197,5623,8,197,11,197,12,197,5624,1,197,4,197,5628,8,197,
        11,197,12,197,5629,1,197,1,197,5,197,5634,8,197,10,197,12,197,5637,
        9,197,3,197,5639,8,197,1,198,3,198,5642,8,198,1,198,1,198,1,198,
        3,198,5647,8,198,1,199,1,199,1,199,3,199,5652,8,199,1,200,1,200,
        1,200,1,201,1,201,3,201,5659,8,201,1,201,1,201,1,201,1,201,1,201,
        3,201,5666,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,3,201,5680,8,201,1,202,1,202,1,202,3,202,
        5685,8,202,1,202,1,202,1,203,1,203,1,203,3,203,5692,8,203,1,203,
        1,203,1,204,1,204,1,204,1,204,1,205,3,205,5701,8,205,1,205,1,205,
        1,206,1,206,1,206,1,206,1,206,3,206,5710,8,206,1,206,1,206,1,206,
        1,206,5,206,5716,8,206,10,206,12,206,5719,9,206,3,206,5721,8,206,
        1,206,3,206,5724,8,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,
        1,206,1,206,3,206,5735,8,206,1,206,3,206,5738,8,206,1,206,1,206,
        1,206,5,206,5743,8,206,10,206,12,206,5746,9,206,3,206,5748,8,206,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,5,207,5766,8,207,10,207,12,207,5769,
        9,207,1,207,3,207,5772,8,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,3,207,5784,8,207,1,207,1,207,3,207,5788,
        8,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,3,207,5804,8,207,1,207,1,207,1,207,1,207,
        3,207,5810,8,207,1,207,1,207,1,207,1,207,1,207,5,207,5817,8,207,
        10,207,12,207,5820,9,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,5,207,5830,8,207,10,207,12,207,5833,9,207,1,207,1,207,1,207,
        1,207,3,207,5839,8,207,3,207,5841,8,207,1,208,1,208,1,208,1,208,
        1,209,1,209,1,209,1,209,3,209,5851,8,209,1,209,3,209,5854,8,209,
        1,209,1,209,1,209,3,209,5859,8,209,1,209,3,209,5862,8,209,5,209,
        5864,8,209,10,209,12,209,5867,9,209,1,209,1,209,1,209,1,209,1,209,
        3,209,5874,8,209,1,210,1,210,1,210,1,211,1,211,1,211,1,211,3,211,
        5883,8,211,1,212,1,212,1,212,1,212,3,212,5889,8,212,1,213,1,213,
        1,213,1,213,1,214,1,214,1,214,1,214,1,214,3,214,5900,8,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,216,1,216,
        1,216,1,216,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5922,8,217,
        1,218,1,218,1,218,1,218,3,218,5928,8,218,1,218,1,218,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,5,219,5943,
        8,219,10,219,12,219,5946,9,219,1,219,1,219,3,219,5950,8,219,3,219,
        5952,8,219,1,220,1,220,1,220,1,220,1,220,1,221,1,221,1,221,1,221,
        1,221,1,221,5,221,5965,8,221,10,221,12,221,5968,9,221,1,221,1,221,
        1,221,3,221,5973,8,221,1,221,3,221,5976,8,221,1,221,1,221,3,221,
        5980,8,221,1,221,1,221,1,222,1,222,1,222,1,222,1,222,1,223,1,223,
        1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,225,1,225,1,225,
        1,225,1,226,1,226,1,226,1,226,1,227,1,227,1,227,3,227,6010,8,227,
        1,227,1,227,1,228,1,228,1,228,1,228,1,228,1,229,1,229,1,229,1,229,
        1,230,1,230,1,230,1,230,1,231,1,231,1,231,1,231,1,231,1,232,1,232,
        1,232,1,232,1,232,1,232,1,232,1,233,1,233,1,233,1,233,1,234,1,234,
        1,234,1,234,3,234,6047,8,234,1,234,1,234,1,235,1,235,1,235,3,235,
        6054,8,235,1,235,1,235,1,235,1,235,5,235,6060,8,235,10,235,12,235,
        6063,9,235,3,235,6065,8,235,1,235,1,235,1,235,5,235,6070,8,235,10,
        235,12,235,6073,9,235,3,235,6075,8,235,1,235,1,235,3,235,6079,8,
        235,1,236,1,236,3,236,6083,8,236,1,236,3,236,6086,8,236,1,236,1,
        236,1,236,3,236,6091,8,236,1,237,1,237,1,237,1,237,1,237,3,237,6098,
        8,237,1,237,1,237,3,237,6102,8,237,1,237,1,237,1,237,1,238,1,238,
        1,238,1,238,1,239,1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,241,
        1,241,1,241,1,241,1,242,1,242,1,242,1,242,1,243,1,243,3,243,6129,
        8,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,3,243,6138,8,243,
        1,244,1,244,1,244,3,244,6143,8,244,1,244,1,244,3,244,6147,8,244,
        1,244,1,244,1,244,1,244,1,244,5,244,6154,8,244,10,244,12,244,6157,
        9,244,3,244,6159,8,244,1,244,1,244,1,244,3,244,6164,8,244,1,244,
        1,244,1,244,3,244,6169,8,244,1,244,1,244,1,244,1,244,5,244,6175,
        8,244,10,244,12,244,6178,9,244,3,244,6180,8,244,1,244,1,244,1,244,
        1,244,5,244,6186,8,244,10,244,12,244,6189,9,244,3,244,6191,8,244,
        1,245,1,245,1,245,1,245,1,246,1,246,1,246,1,246,1,246,1,246,1,247,
        1,247,1,247,1,247,3,247,6207,8,247,1,248,1,248,1,248,1,249,1,249,
        1,249,1,249,1,249,1,249,1,250,1,250,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,3,251,6229,8,251,1,251,1,251,1,251,1,251,
        1,251,1,251,3,251,6237,8,251,5,251,6239,8,251,10,251,12,251,6242,
        9,251,1,251,1,251,1,251,1,251,1,251,5,251,6249,8,251,10,251,12,251,
        6252,9,251,1,251,1,251,1,251,1,251,5,251,6258,8,251,10,251,12,251,
        6261,9,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,5,251,6270,
        8,251,10,251,12,251,6273,9,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,3,251,6305,8,251,1,251,1,251,1,251,1,251,1,251,5,251,
        6312,8,251,10,251,12,251,6315,9,251,1,251,1,251,3,251,6319,8,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,3,251,6333,8,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        5,251,6342,8,251,10,251,12,251,6345,9,251,3,251,6347,8,251,1,251,
        3,251,6350,8,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,3,251,6362,8,251,1,251,1,251,1,251,1,251,1,251,3,251,
        6369,8,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        3,251,6380,8,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,6398,8,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,6419,8,251,
        1,252,1,252,3,252,6423,8,252,1,252,1,252,3,252,6427,8,252,1,252,
        3,252,6430,8,252,1,252,1,252,1,253,1,253,3,253,6436,8,253,1,253,
        1,253,3,253,6440,8,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,
        6448,8,253,1,253,1,253,3,253,6452,8,253,1,253,1,253,3,253,6456,8,
        253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,5,254,6466,8,
        254,10,254,12,254,6469,9,254,1,255,1,255,1,255,1,255,1,255,1,255,
        1,255,1,255,5,255,6479,8,255,10,255,12,255,6482,9,255,1,256,1,256,
        1,256,1,256,1,256,1,256,1,256,1,256,5,256,6492,8,256,10,256,12,256,
        6495,9,256,1,256,1,256,1,256,3,256,6500,8,256,1,257,1,257,1,257,
        1,257,1,257,1,257,1,257,5,257,6509,8,257,10,257,12,257,6512,9,257,
        1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,3,258,
        6524,8,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,5,259,6533,
        8,259,10,259,12,259,6536,9,259,1,260,1,260,1,260,1,260,1,260,1,260,
        1,260,5,260,6545,8,260,10,260,12,260,6548,9,260,1,261,1,261,1,261,
        1,261,1,261,3,261,6555,8,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,3,261,6566,8,261,1,261,1,261,3,261,6570,8,261,
        1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,5,261,6580,8,261,
        10,261,12,261,6583,9,261,1,261,3,261,6586,8,261,1,261,1,261,1,261,
        1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,1,261,3,261,6606,8,261,1,261,1,261,3,261,6610,
        8,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,1,261,3,261,6626,8,261,1,261,1,261,1,261,1,261,
        3,261,6632,8,261,1,261,1,261,1,261,1,261,1,261,5,261,6639,8,261,
        10,261,12,261,6642,9,261,3,261,6644,8,261,1,261,1,261,3,261,6648,
        8,261,1,261,1,261,1,261,1,261,1,261,3,261,6655,8,261,1,261,1,261,
        1,261,1,261,1,261,5,261,6662,8,261,10,261,12,261,6665,9,261,3,261,
        6667,8,261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        1,262,1,262,1,262,1,262,5,262,6682,8,262,10,262,12,262,6685,9,262,
        1,262,1,262,3,262,6689,8,262,1,262,1,262,1,262,3,262,6694,8,262,
        1,263,1,263,1,263,1,263,1,263,1,263,1,264,1,264,1,264,1,264,1,264,
        1,264,1,265,1,265,1,265,1,265,1,265,1,265,1,266,1,266,1,266,1,266,
        1,266,1,266,1,267,1,267,1,267,1,267,1,267,1,267,1,268,1,268,1,268,
        1,268,1,268,1,268,1,268,5,268,6733,8,268,10,268,12,268,6736,9,268,
        3,268,6738,8,268,1,268,1,268,1,268,3,268,6743,8,268,1,268,1,268,
        1,268,1,268,3,268,6749,8,268,3,268,6751,8,268,1,268,1,268,1,268,
        1,269,1,269,1,269,3,269,6759,8,269,1,269,1,269,1,269,1,269,1,269,
        1,269,1,269,1,269,1,269,3,269,6770,8,269,1,269,1,269,1,269,1,269,
        1,269,1,269,3,269,6778,8,269,1,269,1,269,1,269,1,269,1,269,1,269,
        1,269,1,269,1,269,3,269,6789,8,269,1,269,1,269,1,269,1,269,1,269,
        3,269,6796,8,269,1,269,1,269,1,269,5,269,6801,8,269,10,269,12,269,
        6804,9,269,1,269,1,269,1,269,3,269,6809,8,269,1,269,1,269,1,269,
        1,269,1,269,3,269,6816,8,269,1,269,1,269,1,269,1,269,1,269,1,269,
        3,269,6824,8,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,
        6833,8,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,
        6843,8,269,1,269,1,269,3,269,6847,8,269,1,269,3,269,6850,8,269,1,
        269,1,269,1,269,1,269,1,269,3,269,6857,8,269,1,269,1,269,1,269,1,
        269,3,269,6863,8,269,1,269,1,269,1,269,3,269,6868,8,269,1,269,1,
        269,1,269,1,269,1,269,1,269,1,269,3,269,6877,8,269,1,269,1,269,1,
        269,1,269,1,269,5,269,6884,8,269,10,269,12,269,6887,9,269,1,269,
        1,269,1,269,3,269,6892,8,269,1,269,1,269,1,269,1,269,1,269,1,269,
        1,269,1,269,1,269,1,269,1,269,1,269,3,269,6906,8,269,1,269,1,269,
        1,269,3,269,6911,8,269,1,269,1,269,1,269,1,269,1,269,5,269,6918,
        8,269,10,269,12,269,6921,9,269,1,269,1,269,1,269,1,269,1,269,1,269,
        5,269,6929,8,269,10,269,12,269,6932,9,269,3,269,6934,8,269,1,270,
        1,270,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,5,271,6946,
        8,271,10,271,12,271,6949,9,271,1,271,3,271,6952,8,271,1,271,1,271,
        1,272,1,272,1,272,1,272,1,272,3,272,6961,8,272,1,273,1,273,1,273,
        1,273,1,273,1,273,3,273,6969,8,273,1,273,3,273,6972,8,273,1,274,
        1,274,1,274,1,274,3,274,6978,8,274,1,274,1,274,1,274,1,275,1,275,
        1,275,1,275,1,275,1,275,1,275,3,275,6990,8,275,1,276,1,276,1,276,
        1,276,1,276,3,276,6997,8,276,1,276,3,276,7000,8,276,1,276,1,276,
        1,276,3,276,7005,8,276,1,276,3,276,7008,8,276,1,277,1,277,1,277,
        3,277,7013,8,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,7021,
        8,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,
        7032,8,277,1,277,3,277,7035,8,277,1,277,1,277,1,277,1,277,1,277,
        1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,7050,8,277,
        1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
        1,277,1,277,1,277,1,277,1,277,5,277,7068,8,277,10,277,12,277,7071,
        9,277,1,277,1,277,3,277,7075,8,277,1,277,1,277,1,277,1,277,3,277,
        7081,8,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
        1,277,1,277,1,277,3,277,7095,8,277,1,277,1,277,1,277,1,277,1,277,
        1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
        1,277,1,277,1,277,3,277,7116,8,277,1,277,1,277,1,277,3,277,7121,
        8,277,1,277,3,277,7124,8,277,1,278,1,278,1,278,1,278,1,278,1,278,
        1,279,1,279,1,279,3,279,7135,8,279,1,279,3,279,7138,8,279,1,279,
        1,279,1,280,1,280,1,280,3,280,7145,8,280,1,280,3,280,7148,8,280,
        1,280,3,280,7151,8,280,1,280,1,280,1,280,3,280,7156,8,280,3,280,
        7158,8,280,1,280,1,280,1,280,5,280,7163,8,280,10,280,12,280,7166,
        9,280,3,280,7168,8,280,1,280,1,280,1,280,1,280,3,280,7174,8,280,
        1,281,1,281,1,281,3,281,7179,8,281,1,281,1,281,1,281,3,281,7184,
        8,281,3,281,7186,8,281,1,281,1,281,1,281,5,281,7191,8,281,10,281,
        12,281,7194,9,281,3,281,7196,8,281,1,281,1,281,1,281,1,281,1,281,
        1,281,1,281,3,281,7205,8,281,1,281,1,281,3,281,7209,8,281,1,281,
        1,281,3,281,7213,8,281,1,282,3,282,7216,8,282,1,282,1,282,1,282,
        1,282,3,282,7222,8,282,1,283,3,283,7225,8,283,1,283,1,283,1,283,
        1,283,1,283,1,283,5,283,7233,8,283,10,283,12,283,7236,9,283,3,283,
        7238,8,283,1,283,3,283,7241,8,283,1,283,1,283,1,283,1,284,1,284,
        3,284,7248,8,284,1,284,1,284,1,284,1,285,1,285,1,285,1,285,1,285,
        1,285,1,285,3,285,7260,8,285,1,286,1,286,1,286,1,286,1,286,1,286,
        3,286,7268,8,286,1,287,1,287,1,287,1,287,1,287,1,287,3,287,7276,
        8,287,1,288,1,288,1,288,1,288,3,288,7282,8,288,1,288,3,288,7285,
        8,288,1,289,1,289,1,289,1,289,3,289,7291,8,289,1,289,3,289,7294,
        8,289,1,290,1,290,1,290,1,290,1,290,3,290,7301,8,290,1,290,1,290,
        3,290,7305,8,290,1,290,1,290,3,290,7309,8,290,1,291,3,291,7312,8,
        291,1,291,1,291,3,291,7316,8,291,1,292,3,292,7319,8,292,1,292,3,
        292,7322,8,292,1,292,1,292,1,293,1,293,1,293,3,293,7329,8,293,1,
        293,3,293,7332,8,293,1,293,1,293,1,293,1,294,1,294,1,294,1,294,1,
        294,1,294,1,295,1,295,1,295,1,295,1,295,1,295,3,295,7349,8,295,1,
        296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,
        1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,1,297,
        1,297,1,297,1,297,1,297,1,297,1,297,3,297,7379,8,297,1,298,3,298,
        7382,8,298,1,298,1,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        3,299,7393,8,299,1,299,1,299,1,299,1,300,3,300,7399,8,300,1,300,
        1,300,3,300,7403,8,300,1,300,1,300,1,300,1,300,1,300,5,300,7410,
        8,300,10,300,12,300,7413,9,300,1,300,1,300,1,300,1,300,1,300,5,300,
        7420,8,300,10,300,12,300,7423,9,300,3,300,7425,8,300,1,300,1,300,
        3,300,7429,8,300,1,301,1,301,3,301,7433,8,301,1,301,3,301,7436,8,
        301,1,301,1,301,3,301,7440,8,301,1,301,1,301,3,301,7444,8,301,1,
        302,3,302,7447,8,302,1,302,1,302,3,302,7451,8,302,1,302,3,302,7454,
        8,302,1,302,1,302,3,302,7458,8,302,1,302,3,302,7461,8,302,1,302,
        1,302,3,302,7465,8,302,1,302,1,302,3,302,7469,8,302,5,302,7471,8,
        302,10,302,12,302,7474,9,302,1,302,1,302,1,302,1,302,1,302,1,302,
        3,302,7482,8,302,1,302,3,302,7485,8,302,1,302,1,302,3,302,7489,8,
        302,1,302,3,302,7492,8,302,1,302,3,302,7495,8,302,1,302,1,302,1,
        302,3,302,7500,8,302,1,302,1,302,3,302,7504,8,302,1,303,1,303,1,
        303,1,303,1,303,5,303,7511,8,303,10,303,12,303,7514,9,303,1,303,
        3,303,7517,8,303,1,304,1,304,1,304,1,304,1,304,1,304,5,304,7525,
        8,304,10,304,12,304,7528,9,304,1,305,1,305,1,305,3,305,7533,8,305,
        1,306,3,306,7536,8,306,1,306,1,306,3,306,7540,8,306,1,306,1,306,
        3,306,7544,8,306,1,306,3,306,7547,8,306,1,306,1,306,1,306,1,306,
        5,306,7553,8,306,10,306,12,306,7556,9,306,1,306,1,306,3,306,7560,
        8,306,1,307,3,307,7563,8,307,1,307,1,307,3,307,7567,8,307,1,307,
        1,307,1,307,1,307,1,307,5,307,7574,8,307,10,307,12,307,7577,9,307,
        1,307,1,307,1,307,1,307,5,307,7583,8,307,10,307,12,307,7586,9,307,
        1,307,1,307,3,307,7590,8,307,1,308,3,308,7593,8,308,1,308,1,308,
        3,308,7597,8,308,1,308,1,308,3,308,7601,8,308,1,308,1,308,1,308,
        1,308,1,308,1,308,5,308,7609,8,308,10,308,12,308,7612,9,308,1,308,
        1,308,1,308,1,308,1,308,3,308,7619,8,308,1,308,1,308,3,308,7623,
        8,308,1,308,1,308,1,308,3,308,7628,8,308,1,308,1,308,1,308,1,308,
        3,308,7634,8,308,1,309,1,309,3,309,7638,8,309,1,309,3,309,7641,8,
        309,1,309,1,309,3,309,7645,8,309,1,309,1,309,3,309,7649,8,309,1,
        310,3,310,7652,8,310,1,310,1,310,3,310,7656,8,310,1,310,3,310,7659,
        8,310,1,310,1,310,3,310,7663,8,310,1,310,3,310,7666,8,310,1,310,
        1,310,1,310,1,310,1,310,3,310,7673,8,310,1,310,3,310,7676,8,310,
        1,310,1,310,3,310,7680,8,310,1,310,1,310,1,310,1,310,3,310,7686,
        8,310,1,310,1,310,3,310,7690,8,310,3,310,7692,8,310,1,310,3,310,
        7695,8,310,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,5,311,
        7705,8,311,10,311,12,311,7708,9,311,1,311,3,311,7711,8,311,1,312,
        1,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,3,312,7722,8,312,
        1,312,1,312,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,5,313,
        7734,8,313,10,313,12,313,7737,9,313,1,313,1,313,3,313,7741,8,313,
        1,313,1,313,1,313,1,313,1,313,1,313,3,313,7749,8,313,1,314,1,314,
        1,314,1,314,1,314,1,314,3,314,7757,8,314,1,314,1,314,1,314,1,314,
        1,314,3,314,7764,8,314,1,314,1,314,3,314,7768,8,314,1,314,1,314,
        3,314,7772,8,314,1,314,3,314,7775,8,314,1,314,1,314,1,314,1,315,
        1,315,1,315,1,315,1,315,1,315,3,315,7786,8,315,1,315,1,315,1,315,
        3,315,7791,8,315,5,315,7793,8,315,10,315,12,315,7796,9,315,1,315,
        3,315,7799,8,315,1,315,1,315,1,315,1,315,1,315,1,315,5,315,7807,
        8,315,10,315,12,315,7810,9,315,1,315,1,315,3,315,7814,8,315,3,315,
        7816,8,315,1,316,1,316,1,316,1,316,1,316,3,316,7823,8,316,1,316,
        1,316,3,316,7827,8,316,1,317,1,317,1,317,1,317,1,317,1,317,3,317,
        7835,8,317,1,317,3,317,7838,8,317,1,317,1,317,3,317,7842,8,317,1,
        317,1,317,1,318,1,318,1,318,1,318,1,318,1,318,1,318,5,318,7853,8,
        318,10,318,12,318,7856,9,318,3,318,7858,8,318,1,318,1,318,1,318,
        1,318,1,318,1,318,1,318,1,318,1,318,1,318,5,318,7870,8,318,10,318,
        12,318,7873,9,318,3,318,7875,8,318,1,318,1,318,3,318,7879,8,318,
        1,318,1,318,1,318,3,318,7884,8,318,1,318,1,318,3,318,7888,8,318,
        1,318,1,318,1,318,1,318,1,318,5,318,7895,8,318,10,318,12,318,7898,
        9,318,3,318,7900,8,318,1,318,1,318,3,318,7904,8,318,1,318,3,318,
        7907,8,318,1,319,1,319,1,319,1,319,1,320,1,320,1,321,1,321,1,321,
        1,321,1,321,1,321,1,321,5,321,7922,8,321,10,321,12,321,7925,9,321,
        3,321,7927,8,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,3,321,
        7936,8,321,1,322,1,322,1,322,1,322,3,322,7942,8,322,1,322,1,322,
        1,322,1,322,1,322,3,322,7949,8,322,3,322,7951,8,322,3,322,7953,8,
        322,1,322,1,322,3,322,7957,8,322,1,322,1,322,1,322,1,322,5,322,7963,
        8,322,10,322,12,322,7966,9,322,3,322,7968,8,322,1,322,1,322,1,322,
        1,322,3,322,7974,8,322,1,322,3,322,7977,8,322,1,322,1,322,3,322,
        7981,8,322,1,322,1,322,3,322,7985,8,322,1,322,1,322,1,322,3,322,
        7990,8,322,3,322,7992,8,322,1,322,1,322,1,323,1,323,1,323,1,323,
        1,323,1,323,1,323,1,323,1,323,1,323,1,323,3,323,8007,8,323,1,323,
        3,323,8010,8,323,1,324,1,324,1,324,1,324,1,324,1,324,5,324,8018,
        8,324,10,324,12,324,8021,9,324,3,324,8023,8,324,1,324,1,324,1,325,
        1,325,3,325,8029,8,325,1,325,3,325,8032,8,325,1,326,1,326,1,326,
        1,326,1,326,1,326,5,326,8040,8,326,10,326,12,326,8043,9,326,1,326,
        1,326,1,326,1,326,1,326,1,326,1,326,1,326,5,326,8053,8,326,10,326,
        12,326,8056,9,326,3,326,8058,8,326,1,326,1,326,3,326,8062,8,326,
        1,327,1,327,1,327,3,327,8067,8,327,3,327,8069,8,327,1,328,1,328,
        3,328,8073,8,328,1,328,3,328,8076,8,328,1,328,3,328,8079,8,328,1,
        328,3,328,8082,8,328,1,329,1,329,3,329,8086,8,329,1,329,3,329,8089,
        8,329,1,329,3,329,8092,8,329,1,330,1,330,1,330,3,330,8097,8,330,
        1,331,1,331,1,331,3,331,8102,8,331,1,332,1,332,1,333,1,333,3,333,
        8108,8,333,1,333,3,333,8111,8,333,1,333,1,333,1,333,1,333,3,333,
        8117,8,333,1,334,1,334,1,334,1,334,1,334,3,334,8124,8,334,1,335,
        1,335,3,335,8128,8,335,1,336,1,336,1,337,1,337,1,337,1,337,1,338,
        1,338,3,338,8138,8,338,1,338,3,338,8141,8,338,1,338,1,338,1,338,
        1,339,1,339,3,339,8148,8,339,1,339,1,339,1,339,1,339,1,339,1,339,
        1,339,3,339,8157,8,339,3,339,8159,8,339,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,3,340,8177,8,340,1,341,1,341,1,341,1,341,1,341,1,341,3,341,
        8185,8,341,1,342,1,342,1,342,1,342,3,342,8191,8,342,3,342,8193,8,
        342,1,343,1,343,1,343,1,343,1,343,1,344,1,344,1,344,1,344,1,344,
        1,344,3,344,8206,8,344,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        3,345,8215,8,345,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
        1,346,1,346,3,346,8227,8,346,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,3,347,8237,8,347,1,347,1,347,3,347,8241,8,347,1,347,
        3,347,8244,8,347,1,347,1,347,1,347,1,347,1,347,3,347,8251,8,347,
        1,347,1,347,1,347,3,347,8256,8,347,1,347,1,347,1,347,1,347,3,347,
        8262,8,347,1,347,1,347,3,347,8266,8,347,1,347,3,347,8269,8,347,3,
        347,8271,8,347,1,348,1,348,3,348,8275,8,348,1,348,3,348,8278,8,348,
        1,348,1,348,3,348,8282,8,348,1,348,1,348,1,348,1,348,1,348,3,348,
        8289,8,348,1,348,1,348,3,348,8293,8,348,1,348,1,348,1,348,1,348,
        1,348,1,348,1,348,1,348,1,348,1,348,3,348,8305,8,348,1,348,3,348,
        8308,8,348,1,348,3,348,8311,8,348,3,348,8313,8,348,1,349,1,349,3,
        349,8317,8,349,1,349,1,349,3,349,8321,8,349,3,349,8323,8,349,1,350,
        1,350,1,350,1,350,3,350,8329,8,350,1,350,1,350,1,350,1,350,1,350,
        1,350,3,350,8337,8,350,1,350,1,350,3,350,8341,8,350,1,351,1,351,
        3,351,8345,8,351,1,351,1,351,1,351,1,351,1,351,1,351,3,351,8353,
        8,351,1,351,3,351,8356,8,351,3,351,8358,8,351,1,352,1,352,1,352,
        3,352,8363,8,352,1,352,3,352,8366,8,352,1,352,1,352,3,352,8370,8,
        352,1,352,3,352,8373,8,352,1,352,1,352,3,352,8377,8,352,1,353,1,
        353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,8387,8,353,1,353,3,
        353,8390,8,353,1,353,1,353,1,353,1,353,1,353,3,353,8397,8,353,1,
        353,3,353,8400,8,353,1,353,3,353,8403,8,353,1,354,3,354,8406,8,354,
        1,354,1,354,3,354,8410,8,354,1,354,3,354,8413,8,354,1,354,3,354,
        8416,8,354,1,354,1,354,3,354,8420,8,354,1,354,3,354,8423,8,354,1,
        354,1,354,3,354,8427,8,354,1,354,3,354,8430,8,354,1,354,1,354,3,
        354,8434,8,354,1,354,3,354,8437,8,354,1,354,3,354,8440,8,354,1,354,
        1,354,3,354,8444,8,354,1,354,3,354,8447,8,354,1,354,1,354,3,354,
        8451,8,354,1,354,3,354,8454,8,354,1,355,1,355,1,355,1,355,1,355,
        1,355,1,355,1,355,3,355,8464,8,355,1,356,3,356,8467,8,356,1,356,
        1,356,1,356,1,356,1,356,3,356,8474,8,356,1,357,1,357,1,357,1,357,
        1,357,1,357,3,357,8482,8,357,1,358,1,358,3,358,8486,8,358,1,359,
        1,359,1,359,1,360,1,360,3,360,8493,8,360,1,360,1,360,3,360,8497,
        8,360,1,360,1,360,3,360,8501,8,360,1,360,1,360,3,360,8505,8,360,
        1,360,1,360,1,360,1,360,1,360,1,360,1,360,3,360,8514,8,360,3,360,
        8516,8,360,1,360,1,360,3,360,8520,8,360,1,360,1,360,1,360,1,360,
        1,360,3,360,8527,8,360,3,360,8529,8,360,1,360,1,360,3,360,8533,8,
        360,1,360,1,360,1,360,3,360,8538,8,360,3,360,8540,8,360,1,360,1,
        360,1,360,1,360,1,360,3,360,8547,8,360,1,360,1,360,3,360,8551,8,
        360,3,360,8553,8,360,1,361,1,361,1,361,1,361,1,362,1,362,1,362,3,
        362,8562,8,362,1,362,1,362,1,363,1,363,1,363,3,363,8569,8,363,1,
        363,1,363,1,364,1,364,1,364,1,364,1,365,1,365,1,366,3,366,8580,8,
        366,1,366,1,366,1,367,1,367,1,367,1,367,3,367,8588,8,367,1,368,1,
        368,1,368,1,369,1,369,1,369,1,370,1,370,1,370,1,370,1,371,1,371,
        1,371,1,371,1,372,1,372,1,372,1,372,1,373,1,373,1,373,1,373,3,373,
        8612,8,373,1,374,1,374,1,374,3,374,8617,8,374,3,374,8619,8,374,1,
        375,1,375,1,375,1,375,1,376,1,376,1,376,1,376,1,377,1,377,1,377,
        1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,3,377,
        8642,8,377,1,378,1,378,1,379,3,379,8647,8,379,1,379,4,379,8650,8,
        379,11,379,12,379,8651,1,380,3,380,8655,8,380,1,380,1,380,5,380,
        8659,8,380,10,380,12,380,8662,9,380,1,380,1,380,1,380,1,381,3,381,
        8668,8,381,1,381,1,381,1,382,1,382,1,383,1,383,1,384,1,384,1,385,
        1,385,1,386,3,386,8681,8,386,1,386,1,386,1,387,3,387,8686,8,387,
        1,387,1,387,1,388,3,388,8691,8,388,1,388,1,388,1,389,1,389,3,389,
        8697,8,389,1,389,1,389,1,389,1,390,1,390,1,390,1,390,1,390,1,390,
        1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,
        1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,3,390,
        8729,8,390,1,391,1,391,1,391,1,392,1,392,1,392,1,392,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,3,392,8745,8,392,1,393,1,393,1,393,
        1,393,3,393,8751,8,393,1,394,1,394,3,394,8755,8,394,1,395,1,395,
        1,395,3,395,8760,8,395,1,395,1,395,3,395,8764,8,395,1,396,1,396,
        1,396,3,396,8769,8,396,1,396,1,396,3,396,8773,8,396,1,397,1,397,
        1,397,3,397,8778,8,397,1,397,1,397,3,397,8782,8,397,1,398,1,398,
        1,398,3,398,8787,8,398,1,398,1,398,3,398,8791,8,398,1,399,1,399,
        1,399,3,399,8796,8,399,1,399,1,399,3,399,8800,8,399,1,400,1,400,
        3,400,8804,8,400,1,401,1,401,3,401,8808,8,401,1,402,1,402,1,402,
        3,402,8813,8,402,1,403,1,403,3,403,8817,8,403,1,404,1,404,3,404,
        8821,8,404,1,405,1,405,3,405,8825,8,405,1,406,1,406,3,406,8829,8,
        406,1,407,1,407,3,407,8833,8,407,1,408,1,408,3,408,8837,8,408,1,
        409,1,409,3,409,8841,8,409,1,410,1,410,3,410,8845,8,410,1,411,1,
        411,3,411,8849,8,411,1,412,1,412,3,412,8853,8,412,1,413,1,413,3,
        413,8857,8,413,1,414,1,414,3,414,8861,8,414,1,415,1,415,1,416,1,
        416,1,417,1,417,1,417,1,417,1,417,1,417,3,417,8873,8,417,1,417,1,
        417,1,417,3,417,8878,8,417,1,417,5,417,8881,8,417,10,417,12,417,
        8884,9,417,1,418,1,418,3,418,8888,8,418,1,418,3,418,8891,8,418,1,
        418,1,418,1,418,5,418,8896,8,418,10,418,12,418,8899,9,418,1,418,
        1,418,1,418,1,418,1,418,3,418,8906,8,418,1,418,1,418,5,418,8910,
        8,418,10,418,12,418,8913,9,418,1,418,1,418,5,418,8917,8,418,10,418,
        12,418,8920,9,418,1,418,5,418,8923,8,418,10,418,12,418,8926,9,418,
        1,418,3,418,8929,8,418,1,419,1,419,1,419,1,419,1,420,1,420,1,420,
        1,421,1,421,1,421,1,421,3,421,8942,8,421,1,421,3,421,8945,8,421,
        1,421,1,421,3,421,8949,8,421,1,422,1,422,1,422,1,422,3,422,8955,
        8,422,1,422,3,422,8958,8,422,1,422,1,422,3,422,8962,8,422,1,423,
        1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,3,423,8973,8,423,
        3,423,8975,8,423,1,424,1,424,1,424,1,424,1,424,1,424,3,424,8983,
        8,424,1,424,1,424,1,424,1,425,1,425,1,425,1,425,5,425,8992,8,425,
        10,425,12,425,8995,9,425,3,425,8997,8,425,1,426,1,426,3,426,9001,
        8,426,1,426,3,426,9004,8,426,1,426,1,426,1,426,1,426,3,426,9010,
        8,426,1,427,1,427,1,427,3,427,9015,8,427,1,427,1,427,1,427,3,427,
        9020,8,427,5,427,9022,8,427,10,427,12,427,9025,9,427,1,428,1,428,
        1,428,1,429,1,429,5,429,9032,8,429,10,429,12,429,9035,9,429,1,429,
        1,429,5,429,9039,8,429,10,429,12,429,9042,9,429,1,429,1,429,5,429,
        9046,8,429,10,429,12,429,9049,9,429,1,429,1,429,1,429,1,429,5,429,
        9055,8,429,10,429,12,429,9058,9,429,3,429,9060,8,429,1,430,1,430,
        1,430,1,430,1,430,1,430,3,430,9068,8,430,1,431,1,431,1,431,1,431,
        1,431,1,431,1,431,1,431,1,431,3,431,9079,8,431,1,432,1,432,3,432,
        9083,8,432,1,432,1,432,1,433,1,433,3,433,9089,8,433,1,433,1,433,
        1,434,1,434,1,434,3,434,9096,8,434,3,434,9098,8,434,1,434,3,434,
        9101,8,434,1,434,3,434,9104,8,434,1,435,1,435,1,435,3,435,9109,8,
        435,3,435,9111,8,435,1,435,1,435,1,435,5,435,9116,8,435,10,435,12,
        435,9119,9,435,1,435,1,435,1,435,3,435,9124,8,435,3,435,9126,8,435,
        1,435,1,435,1,435,1,435,1,435,5,435,9133,8,435,10,435,12,435,9136,
        9,435,1,435,1,435,1,435,1,435,5,435,9142,8,435,10,435,12,435,9145,
        9,435,1,435,1,435,1,435,1,435,1,435,1,435,5,435,9153,8,435,10,435,
        12,435,9156,9,435,3,435,9158,8,435,1,436,1,436,1,436,1,437,1,437,
        1,437,1,437,1,437,4,437,9168,8,437,11,437,12,437,9169,3,437,9172,
        8,437,1,437,1,437,1,437,1,437,1,437,1,437,1,437,5,437,9181,8,437,
        10,437,12,437,9184,9,437,1,437,1,437,3,437,9188,8,437,1,437,3,437,
        9191,8,437,1,437,1,437,1,438,1,438,1,438,1,438,4,438,9199,8,438,
        11,438,12,438,9200,1,438,1,438,3,438,9205,8,438,1,438,1,438,1,439,
        1,439,1,439,1,439,1,439,5,439,9214,8,439,10,439,12,439,9217,9,439,
        1,439,1,439,5,439,9221,8,439,10,439,12,439,9224,9,439,1,439,3,439,
        9227,8,439,1,439,3,439,9230,8,439,1,439,1,439,1,440,1,440,1,440,
        3,440,9237,8,440,1,440,1,440,3,440,9241,8,440,1,441,1,441,4,441,
        9245,8,441,11,441,12,441,9246,1,442,1,442,1,442,1,442,1,442,1,443,
        1,443,1,443,1,443,1,443,5,443,9259,8,443,10,443,12,443,9262,9,443,
        1,443,1,443,1,444,1,444,1,444,1,445,1,445,1,445,1,445,3,445,9273,
        8,445,1,445,1,445,3,445,9277,8,445,1,445,1,445,3,445,9281,8,445,
        1,446,1,446,1,446,1,446,3,446,9287,8,446,1,446,3,446,9290,8,446,
        1,446,1,446,5,446,9294,8,446,10,446,12,446,9297,9,446,1,447,3,447,
        9300,8,447,1,447,1,447,1,447,1,447,1,447,3,447,9307,8,447,1,447,
        1,447,1,447,1,447,3,447,9313,8,447,1,448,1,448,1,448,1,448,1,448,
        1,448,5,448,9321,8,448,10,448,12,448,9324,9,448,1,448,1,448,3,448,
        9328,8,448,1,449,1,449,1,449,1,449,1,449,1,449,5,449,9336,8,449,
        10,449,12,449,9339,9,449,1,450,1,450,1,450,1,450,1,450,5,450,9346,
        8,450,10,450,12,450,9349,9,450,1,451,1,451,1,451,1,451,1,451,1,451,
        1,451,1,451,1,451,1,451,3,451,9361,8,451,1,451,3,451,9364,8,451,
        1,451,1,451,3,451,9368,8,451,1,452,1,452,1,452,3,452,9373,8,452,
        1,452,1,452,3,452,9377,8,452,1,452,3,452,9380,8,452,1,452,1,452,
        1,453,3,453,9385,8,453,1,453,1,453,1,453,1,453,1,453,3,453,9392,
        8,453,1,453,1,453,1,453,1,453,1,453,5,453,9399,8,453,10,453,12,453,
        9402,9,453,3,453,9404,8,453,1,453,1,453,1,453,1,453,1,453,1,453,
        5,453,9412,8,453,10,453,12,453,9415,9,453,3,453,9417,8,453,1,453,
        1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,9429,
        8,453,1,453,1,453,1,453,1,453,1,453,3,453,9436,8,453,1,453,1,453,
        1,453,1,453,1,453,3,453,9443,8,453,1,454,1,454,1,454,1,454,1,454,
        3,454,9450,8,454,1,454,1,454,1,454,1,454,5,454,9456,8,454,10,454,
        12,454,9459,9,454,1,454,1,454,1,454,1,455,1,455,1,455,1,455,1,455,
        1,455,1,455,1,455,1,455,5,455,9473,8,455,10,455,12,455,9476,9,455,
        3,455,9478,8,455,1,455,3,455,9481,8,455,1,455,1,455,1,455,1,455,
        1,455,3,455,9488,8,455,1,455,1,455,1,455,1,455,1,455,3,455,9495,
        8,455,1,455,1,455,1,455,1,455,1,455,3,455,9502,8,455,1,455,1,455,
        1,455,1,455,1,455,3,455,9509,8,455,1,455,1,455,1,456,3,456,9514,
        8,456,1,456,1,456,1,456,1,456,1,456,3,456,9521,8,456,1,456,1,456,
        1,456,1,456,1,456,1,456,5,456,9529,8,456,10,456,12,456,9532,9,456,
        1,456,1,456,1,456,1,456,1,456,1,456,1,456,1,456,1,456,1,456,5,456,
        9544,8,456,10,456,12,456,9547,9,456,1,456,1,456,1,456,1,456,1,456,
        1,456,5,456,9555,8,456,10,456,12,456,9558,9,456,1,456,1,456,1,456,
        1,456,1,456,1,456,3,456,9566,8,456,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,5,457,9575,8,457,10,457,12,457,9578,9,457,1,457,1,457,
        1,457,1,458,3,458,9584,8,458,1,458,1,458,1,458,1,458,1,458,1,458,
        1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,459,3,459,
        9602,8,459,1,459,1,459,1,459,1,459,1,459,1,459,4,459,9610,8,459,
        11,459,12,459,9611,3,459,9614,8,459,1,459,1,459,1,460,3,460,9619,
        8,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
        1,460,1,460,1,460,1,460,5,460,9635,8,460,10,460,12,460,9638,9,460,
        1,460,1,460,1,460,1,460,1,460,1,460,5,460,9646,8,460,10,460,12,460,
        9649,9,460,1,460,1,460,1,460,1,460,1,460,1,460,3,460,9657,8,460,
        1,460,1,460,1,460,1,460,1,460,3,460,9664,8,460,1,460,1,460,1,461,
        1,461,1,461,5,461,9671,8,461,10,461,12,461,9674,9,461,1,461,3,461,
        9677,8,461,1,461,5,461,9680,8,461,10,461,12,461,9683,9,461,1,461,
        3,461,9686,8,461,1,461,1,461,1,462,1,462,1,462,3,462,9693,8,462,
        1,462,1,462,3,462,9697,8,462,1,462,1,462,3,462,9701,8,462,1,462,
        3,462,9704,8,462,1,462,1,462,1,462,1,462,1,462,5,462,9711,8,462,
        10,462,12,462,9714,9,462,3,462,9716,8,462,1,463,1,463,1,463,1,463,
        1,463,1,463,1,463,1,463,3,463,9726,8,463,1,464,1,464,1,464,1,464,
        1,464,1,464,1,464,1,465,1,465,4,465,9737,8,465,11,465,12,465,9738,
        1,466,1,466,1,466,3,466,9744,8,466,1,467,1,467,1,467,1,467,1,467,
        1,468,1,468,1,468,1,468,1,468,5,468,9756,8,468,10,468,12,468,9759,
        9,468,1,468,1,468,1,468,3,468,9764,8,468,1,469,1,469,3,469,9768,
        8,469,1,469,1,469,3,469,9772,8,469,1,470,1,470,1,470,1,470,1,470,
        1,471,1,471,1,471,1,471,3,471,9783,8,471,1,471,1,471,1,471,1,471,
        1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,
        1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,
        1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,
        1,471,1,471,1,471,1,471,1,471,3,471,9827,8,471,1,472,1,472,1,472,
        1,472,3,472,9833,8,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,
        1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,
        1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,
        1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,
        1,472,1,472,1,472,1,472,1,472,1,472,1,472,3,472,9882,8,472,1,473,
        1,473,1,473,3,473,9887,8,473,1,473,1,473,1,473,3,473,9892,8,473,
        5,473,9894,8,473,10,473,12,473,9897,9,473,1,473,3,473,9900,8,473,
        1,474,1,474,1,474,1,474,5,474,9906,8,474,10,474,12,474,9909,9,474,
        1,475,1,475,1,475,1,475,1,475,1,476,1,476,1,476,1,477,1,477,1,477,
        1,477,1,477,1,477,1,477,1,477,4,477,9927,8,477,11,477,12,477,9928,
        3,477,9931,8,477,1,478,1,478,1,478,1,478,3,478,9937,8,478,1,479,
        1,479,3,479,9941,8,479,1,479,1,479,1,479,3,479,9946,8,479,5,479,
        9948,8,479,10,479,12,479,9951,9,479,1,480,1,480,1,480,1,480,4,480,
        9957,8,480,11,480,12,480,9958,1,480,1,480,1,481,1,481,1,481,1,482,
        1,482,1,482,1,482,1,482,1,483,1,483,1,483,1,483,1,483,1,484,1,484,
        1,484,1,484,1,484,1,484,5,484,9982,8,484,10,484,12,484,9985,9,484,
        1,484,1,484,1,485,1,485,1,485,1,485,1,485,3,485,9994,8,485,1,486,
        1,486,1,486,1,487,1,487,1,487,1,488,1,488,1,488,3,488,10005,8,488,
        1,488,1,488,3,488,10009,8,488,1,488,1,488,1,488,3,488,10014,8,488,
        1,489,1,489,1,489,5,489,10019,8,489,10,489,12,489,10022,9,489,1,
        490,1,490,1,490,5,490,10027,8,490,10,490,12,490,10030,9,490,1,491,
        1,491,1,491,1,491,1,491,3,491,10037,8,491,4,491,10039,8,491,11,491,
        12,491,10040,1,491,1,491,1,491,3,491,10046,8,491,3,491,10048,8,491,
        1,491,1,491,1,492,1,492,1,492,1,492,3,492,10056,8,492,1,492,1,492,
        1,492,1,492,1,492,3,492,10063,8,492,1,492,1,492,1,492,3,492,10068,
        8,492,3,492,10070,8,492,3,492,10072,8,492,1,492,1,492,3,492,10076,
        8,492,1,493,1,493,1,493,1,493,1,493,5,493,10083,8,493,10,493,12,
        493,10086,9,493,1,494,1,494,3,494,10090,8,494,1,494,1,494,3,494,
        10094,8,494,1,495,1,495,3,495,10098,8,495,1,496,1,496,1,496,1,496,
        1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,5,497,
        10114,8,497,10,497,12,497,10117,9,497,1,497,1,497,1,497,1,497,1,
        497,5,497,10124,8,497,10,497,12,497,10127,9,497,1,497,1,497,3,497,
        10131,8,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,3,497,10140,
        8,497,1,497,3,497,10143,8,497,1,497,1,497,3,497,10147,8,497,1,497,
        1,497,5,497,10151,8,497,10,497,12,497,10154,9,497,1,497,1,497,3,
        497,10158,8,497,1,497,3,497,10161,8,497,1,497,1,497,3,497,10165,
        8,497,1,497,1,497,5,497,10169,8,497,10,497,12,497,10172,9,497,1,
        497,1,497,3,497,10176,8,497,1,497,3,497,10179,8,497,1,497,1,497,
        3,497,10183,8,497,1,497,1,497,5,497,10187,8,497,10,497,12,497,10190,
        9,497,1,497,1,497,3,497,10194,8,497,1,497,3,497,10197,8,497,1,497,
        1,497,3,497,10201,8,497,1,497,1,497,5,497,10205,8,497,10,497,12,
        497,10208,9,497,1,497,1,497,3,497,10212,8,497,1,497,1,497,1,497,
        1,497,3,497,10218,8,497,1,497,1,497,3,497,10222,8,497,1,497,1,497,
        1,497,1,497,5,497,10228,8,497,10,497,12,497,10231,9,497,1,497,1,
        497,3,497,10235,8,497,1,497,5,497,10238,8,497,10,497,12,497,10241,
        9,497,1,497,1,497,3,497,10245,8,497,1,497,1,497,1,497,1,497,5,497,
        10251,8,497,10,497,12,497,10254,9,497,1,497,1,497,3,497,10258,8,
        497,1,497,5,497,10261,8,497,10,497,12,497,10264,9,497,1,497,3,497,
        10267,8,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,3,497,10276,
        8,497,1,497,1,497,1,497,1,497,3,497,10282,8,497,1,497,1,497,1,497,
        1,497,1,497,3,497,10289,8,497,1,497,1,497,1,497,1,497,1,497,3,497,
        10296,8,497,1,497,1,497,1,497,1,497,1,497,3,497,10303,8,497,1,497,
        1,497,1,497,1,497,1,497,3,497,10310,8,497,1,497,1,497,1,497,1,497,
        1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,1,497,
        1,497,1,497,1,497,1,497,1,497,1,497,3,497,10333,8,497,1,497,1,497,
        1,497,1,497,1,497,1,497,1,497,1,497,1,497,3,497,10344,8,497,1,497,
        1,497,1,497,1,497,3,497,10350,8,497,1,497,1,497,1,497,1,497,1,497,
        1,497,5,497,10358,8,497,10,497,12,497,10361,9,497,1,498,1,498,1,
        498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        3,498,10376,8,498,1,498,1,498,1,498,1,498,1,498,5,498,10383,8,498,
        10,498,12,498,10386,9,498,3,498,10388,8,498,1,498,1,498,1,498,1,
        498,1,498,1,498,1,498,1,498,3,498,10398,8,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,3,498,10407,8,498,1,498,3,498,10410,8,498,
        1,498,1,498,1,498,3,498,10415,8,498,1,498,3,498,10418,8,498,5,498,
        10420,8,498,10,498,12,498,10423,9,498,1,498,1,498,1,498,1,498,1,
        498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,3,498,
        10439,8,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,4,498,
        10471,8,498,11,498,12,498,10472,1,498,1,498,1,498,1,498,1,498,1,
        498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,3,498,10492,8,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,3,498,10526,8,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,3,498,10535,8,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,3,498,10550,8,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,3,498,10620,8,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,3,498,10660,
        8,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,5,498,10681,
        8,498,10,498,12,498,10684,9,498,1,498,1,498,1,498,1,498,1,498,1,
        498,1,498,3,498,10693,8,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,3,498,10703,8,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,3,498,10714,8,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,3,498,10725,8,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,3,498,10734,8,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,3,498,10744,8,498,3,498,10746,8,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,3,498,10765,8,498,3,498,10767,8,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,3,498,10779,
        8,498,3,498,10781,8,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,3,498,10795,8,498,3,498,10797,8,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,3,498,10823,8,498,1,498,1,498,1,498,1,498,1,498,1,498,
        1,498,1,498,5,498,10833,8,498,10,498,12,498,10836,9,498,3,498,10838,
        8,498,1,498,1,498,1,498,1,498,5,498,10844,8,498,10,498,12,498,10847,
        9,498,1,499,1,499,1,499,1,499,4,499,10853,8,499,11,499,12,499,10854,
        1,499,1,499,1,500,1,500,3,500,10861,8,500,1,500,3,500,10864,8,500,
        1,500,1,500,1,500,3,500,10869,8,500,1,500,1,500,1,500,3,500,10874,
        8,500,1,501,1,501,1,501,1,501,3,501,10880,8,501,1,502,1,502,1,502,
        1,502,1,502,1,502,1,502,4,502,10889,8,502,11,502,12,502,10890,1,
        502,1,502,3,502,10895,8,502,1,502,1,502,1,503,1,503,1,503,1,503,
        1,503,1,503,4,503,10905,8,503,11,503,12,503,10906,1,503,1,503,3,
        503,10911,8,503,1,503,1,503,1,504,1,504,1,504,1,505,1,505,1,505,
        1,505,1,505,1,505,1,505,1,506,1,506,1,506,1,506,1,506,1,506,1,506,
        1,506,1,506,1,506,3,506,10935,8,506,1,507,1,507,1,507,1,507,1,507,
        1,508,1,508,1,508,1,508,1,508,3,508,10947,8,508,1,508,1,508,3,508,
        10951,8,508,1,508,1,508,1,508,1,508,1,508,1,508,3,508,10959,8,508,
        3,508,10961,8,508,1,509,1,509,1,509,1,509,1,509,1,509,1,509,1,509,
        1,509,1,509,1,509,1,509,1,509,1,509,1,509,1,509,1,509,1,509,1,509,
        1,509,1,509,1,509,3,509,10985,8,509,1,510,1,510,1,510,3,510,10990,
        8,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,
        1,510,1,510,1,510,1,510,3,510,11006,8,510,1,510,3,510,11009,8,510,
        1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,1,510,
        3,510,11022,8,510,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
        1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,3,511,
        11042,8,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,4,511,11051,
        8,511,11,511,12,511,11052,1,511,1,511,1,511,1,511,1,511,1,511,1,
        511,1,511,1,511,1,511,3,511,11065,8,511,1,511,1,511,1,511,1,511,
        1,511,1,511,1,511,3,511,11074,8,511,1,511,1,511,1,511,1,511,3,511,
        11080,8,511,3,511,11082,8,511,1,511,1,511,3,511,11086,8,511,1,511,
        1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,4,511,11097,8,511,
        11,511,12,511,11098,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,
        511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
        1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,5,511,
        11129,8,511,10,511,12,511,11132,9,511,1,511,1,511,1,511,1,511,1,
        511,1,511,1,511,4,511,11141,8,511,11,511,12,511,11142,1,511,1,511,
        1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,5,511,11156,
        8,511,10,511,12,511,11159,9,511,1,511,1,511,1,511,1,511,1,511,1,
        511,1,511,1,511,1,511,1,511,1,511,1,511,3,511,11173,8,511,1,512,
        1,512,1,512,1,512,1,512,1,512,3,512,11181,8,512,1,512,1,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,3,512,
        11196,8,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,3,512,
        11206,8,512,1,512,1,512,1,512,1,512,1,512,3,512,11213,8,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,
        1,512,1,512,3,512,11229,8,512,1,513,3,513,11232,8,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,3,513,11241,8,513,3,513,11243,8,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,5,513,11254,
        8,513,10,513,12,513,11257,9,513,1,513,1,513,1,513,1,513,1,513,1,
        513,1,513,1,513,1,513,5,513,11268,8,513,10,513,12,513,11271,9,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,5,513,11282,
        8,513,10,513,12,513,11285,9,513,1,513,1,513,1,513,1,513,1,513,1,
        513,1,513,1,513,1,513,5,513,11296,8,513,10,513,12,513,11299,9,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,5,513,11308,8,513,10,513,
        12,513,11311,9,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,5,513,
        11320,8,513,10,513,12,513,11323,9,513,1,513,1,513,1,513,1,513,4,
        513,11329,8,513,11,513,12,513,11330,3,513,11333,8,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,4,513,11351,8,513,11,513,12,513,11352,1,513,1,
        513,1,513,3,513,11358,8,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,4,513,11369,8,513,11,513,12,513,11370,1,513,1,
        513,3,513,11375,8,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,4,513,11388,8,513,11,513,12,513,11389,1,
        513,1,513,3,513,11394,8,513,1,513,1,513,1,513,3,513,11399,8,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,3,513,11409,8,513,
        1,513,1,513,1,513,1,513,1,513,1,513,3,513,11417,8,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,3,513,11426,8,513,3,513,11428,8,513,
        1,513,1,513,1,513,3,513,11433,8,513,1,513,1,513,1,513,1,513,1,513,
        3,513,11440,8,513,1,513,1,513,3,513,11444,8,513,1,514,1,514,1,514,
        1,514,1,514,3,514,11451,8,514,1,514,1,514,1,514,1,514,1,514,1,514,
        1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,
        3,514,11470,8,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,
        1,514,1,514,3,514,11482,8,514,1,514,1,514,3,514,11486,8,514,1,515,
        3,515,11489,8,515,1,515,1,515,1,515,1,515,1,515,1,515,3,515,11497,
        8,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,3,515,11507,
        8,515,1,515,1,515,1,515,1,515,1,515,3,515,11514,8,515,1,515,1,515,
        1,515,3,515,11519,8,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
        3,515,11528,8,515,1,515,1,515,1,515,3,515,11533,8,515,1,515,1,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,3,515,11545,8,515,
        1,515,1,515,1,515,1,515,1,515,3,515,11552,8,515,1,516,1,516,1,516,
        1,516,3,516,11558,8,516,1,516,1,516,1,516,3,516,11563,8,516,1,516,
        3,516,11566,8,516,1,516,1,516,1,516,3,516,11571,8,516,1,516,1,516,
        1,516,3,516,11576,8,516,1,516,3,516,11579,8,516,1,516,1,516,3,516,
        11583,8,516,1,516,3,516,11586,8,516,1,516,1,516,1,516,1,516,3,516,
        11592,8,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,
        3,516,11603,8,516,1,516,1,516,3,516,11607,8,516,1,516,3,516,11610,
        8,516,1,517,3,517,11613,8,517,1,517,1,517,1,517,1,517,1,517,1,517,
        3,517,11621,8,517,1,517,1,517,1,517,1,517,3,517,11627,8,517,1,517,
        1,517,3,517,11631,8,517,1,517,1,517,3,517,11635,8,517,1,518,3,518,
        11638,8,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,
        1,518,1,518,1,518,3,518,11652,8,518,1,518,1,518,1,518,1,518,1,518,
        4,518,11659,8,518,11,518,12,518,11660,1,518,1,518,3,518,11665,8,
        518,1,519,3,519,11668,8,519,1,519,1,519,1,519,1,519,1,519,1,520,
        1,520,1,520,1,520,1,520,1,520,5,520,11681,8,520,10,520,12,520,11684,
        9,520,1,520,4,520,11687,8,520,11,520,12,520,11688,3,520,11691,8,
        520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        3,520,11703,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        3,520,11713,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        3,520,11723,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        3,520,11733,8,520,3,520,11735,8,520,3,520,11737,8,520,1,520,1,520,
        1,520,3,520,11742,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        1,520,3,520,11752,8,520,3,520,11754,8,520,3,520,11756,8,520,1,520,
        1,520,1,520,3,520,11761,8,520,1,520,1,520,1,520,1,520,1,520,1,520,
        3,520,11769,8,520,1,520,1,520,1,520,3,520,11774,8,520,1,520,1,520,
        1,520,1,520,1,520,1,520,3,520,11782,8,520,3,520,11784,8,520,1,520,
        1,520,1,520,3,520,11789,8,520,1,520,1,520,1,520,1,520,1,520,1,520,
        3,520,11797,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,3,520,
        11806,8,520,1,521,1,521,1,521,1,521,1,521,1,521,3,521,11814,8,521,
        1,521,1,521,1,521,1,521,1,521,1,521,3,521,11822,8,521,1,521,1,521,
        1,521,1,521,1,521,1,521,1,521,1,521,3,521,11832,8,521,1,521,1,521,
        1,521,1,521,1,521,1,521,1,521,1,521,3,521,11842,8,521,1,521,1,521,
        1,521,1,521,1,521,1,521,1,521,1,521,1,521,1,521,1,521,1,521,1,521,
        1,521,3,521,11858,8,521,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        1,522,1,522,1,522,5,522,11881,8,522,10,522,12,522,11884,9,522,1,
        522,1,522,3,522,11888,8,522,1,523,3,523,11891,8,523,1,523,1,523,
        1,523,1,523,1,524,3,524,11898,8,524,1,524,1,524,1,524,1,524,1,524,
        1,524,3,524,11906,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,11924,
        8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,11933,8,524,
        1,525,3,525,11936,8,525,1,525,1,525,1,525,1,525,1,525,1,525,1,525,
        1,525,3,525,11946,8,525,1,525,1,525,1,525,1,525,1,525,1,525,1,525,
        1,525,1,525,3,525,11957,8,525,1,526,1,526,1,526,1,526,1,526,1,526,
        1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,3,526,
        11975,8,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,
        1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,
        1,526,1,526,1,526,3,526,12000,8,526,1,527,3,527,12003,8,527,1,527,
        1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
        3,527,12017,8,527,1,527,1,527,1,527,3,527,12022,8,527,1,527,1,527,
        1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
        1,527,3,527,12038,8,527,1,527,1,527,1,527,3,527,12043,8,527,1,527,
        1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
        1,527,1,527,3,527,12059,8,527,1,527,1,527,1,527,3,527,12064,8,527,
        1,527,1,527,1,527,1,527,1,527,1,527,1,527,3,527,12073,8,527,1,527,
        1,527,1,527,3,527,12078,8,527,1,527,1,527,1,527,1,527,1,527,1,527,
        1,527,1,527,1,527,1,527,1,527,3,527,12091,8,527,1,528,3,528,12094,
        8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,5,528,12113,8,528,10,528,
        12,528,12116,9,528,1,528,1,528,1,528,3,528,12121,8,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,5,528,12132,8,528,10,528,
        12,528,12135,9,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        3,528,12145,8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,3,528,12157,8,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,3,528,12173,8,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,3,528,
        12185,8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        3,528,12196,8,528,3,528,12198,8,528,1,528,1,528,1,528,3,528,12203,
        8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,3,528,12219,8,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,3,528,12229,8,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,3,528,12238,8,528,1,528,1,528,1,528,3,528,12243,
        8,528,1,528,1,528,1,528,1,528,1,528,3,528,12250,8,528,1,528,1,528,
        1,528,3,528,12255,8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,3,528,12266,8,528,1,528,1,528,1,528,3,528,12271,8,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        3,528,12284,8,528,3,528,12286,8,528,3,528,12288,8,528,1,528,1,528,
        1,528,3,528,12293,8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        3,528,12302,8,528,1,528,1,528,1,528,3,528,12307,8,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,3,528,12326,8,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,3,528,12335,8,528,3,528,12337,8,528,1,528,1,528,
        1,528,3,528,12342,8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,3,528,12368,8,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,3,528,12379,8,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,3,528,12390,8,528,
        1,528,1,528,1,528,1,528,1,528,1,528,3,528,12398,8,528,1,528,3,528,
        12401,8,528,1,528,1,528,1,528,3,528,12406,8,528,1,529,3,529,12409,
        8,529,1,529,1,529,1,529,1,529,1,529,3,529,12416,8,529,1,529,3,529,
        12419,8,529,1,529,1,529,1,529,1,529,1,529,3,529,12426,8,529,1,529,
        1,529,1,529,3,529,12431,8,529,1,529,1,529,1,529,1,529,1,529,1,529,
        3,529,12439,8,529,1,529,1,529,1,529,1,529,1,529,3,529,12446,8,529,
        1,529,1,529,3,529,12450,8,529,1,529,3,529,12453,8,529,1,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,3,529,12463,8,529,1,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,3,529,12485,8,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,3,529,12496,8,529,
        3,529,12498,8,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,5,529,
        12507,8,529,10,529,12,529,12510,9,529,1,529,1,529,3,529,12514,8,
        529,1,529,1,529,1,529,1,529,1,529,5,529,12521,8,529,10,529,12,529,
        12524,9,529,1,529,1,529,3,529,12528,8,529,3,529,12530,8,529,1,530,
        1,530,1,530,1,530,1,530,1,530,3,530,12538,8,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,3,530,12549,8,530,1,530,3,530,
        12552,8,530,1,530,3,530,12555,8,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,3,530,12565,8,530,1,530,3,530,12568,8,530,1,530,
        1,530,3,530,12572,8,530,1,530,3,530,12575,8,530,1,530,1,530,3,530,
        12579,8,530,1,530,1,530,3,530,12583,8,530,1,530,1,530,1,530,1,530,
        1,530,1,530,3,530,12591,8,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12599,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12609,8,530,1,530,1,530,3,530,12613,8,530,1,530,1,530,3,530,
        12617,8,530,1,530,3,530,12620,8,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12627,8,530,1,530,1,530,1,530,5,530,12632,8,530,10,530,12,
        530,12635,9,530,3,530,12637,8,530,1,530,3,530,12640,8,530,1,530,
        3,530,12643,8,530,1,530,1,530,1,530,1,530,1,530,1,530,5,530,12651,
        8,530,10,530,12,530,12654,9,530,1,530,3,530,12657,8,530,1,530,1,
        530,1,530,1,530,1,530,1,530,3,530,12665,8,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,3,530,12675,8,530,1,530,3,530,12678,
        8,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,12686,8,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12711,8,530,1,530,1,530,3,530,12715,8,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,5,530,12727,8,530,10,530,
        12,530,12730,9,530,3,530,12732,8,530,1,530,3,530,12735,8,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,5,530,12750,8,530,10,530,12,530,12753,9,530,1,530,1,530,1,
        530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12779,8,530,1,531,1,531,1,531,1,531,1,531,5,531,12786,8,531,
        10,531,12,531,12789,9,531,1,531,1,531,1,531,3,531,12794,8,531,1,
        531,1,531,1,531,1,531,1,531,3,531,12801,8,531,3,531,12803,8,531,
        1,532,1,532,1,532,1,532,1,532,5,532,12810,8,532,10,532,12,532,12813,
        9,532,1,532,1,532,3,532,12817,8,532,1,532,1,532,1,532,1,532,1,532,
        1,532,1,532,1,532,1,532,3,532,12828,8,532,1,532,1,532,3,532,12832,
        8,532,1,533,1,533,1,533,1,534,1,534,1,534,1,535,1,535,1,535,1,536,
        1,536,1,536,1,537,1,537,1,538,1,538,1,538,1,538,5,538,12852,8,538,
        10,538,12,538,12855,9,538,1,538,1,538,1,539,1,539,1,539,1,539,1,
        539,3,539,12864,8,539,1,540,1,540,1,540,1,540,3,540,12870,8,540,
        1,541,1,541,1,541,1,541,5,541,12876,8,541,10,541,12,541,12879,9,
        541,1,541,1,541,1,541,1,541,3,541,12885,8,541,5,541,12887,8,541,
        10,541,12,541,12890,9,541,1,541,1,541,1,542,1,542,1,542,3,542,12897,
        8,542,1,543,1,543,1,543,1,543,3,543,12903,8,543,1,543,3,543,12906,
        8,543,1,544,1,544,1,544,3,544,12911,8,544,1,545,1,545,1,545,1,545,
        3,545,12917,8,545,3,545,12919,8,545,1,545,1,545,5,545,12923,8,545,
        10,545,12,545,12926,9,545,1,545,1,545,1,545,1,546,1,546,1,546,1,
        546,3,546,12935,8,546,1,546,1,546,3,546,12939,8,546,1,547,1,547,
        1,547,1,547,3,547,12945,8,547,1,548,1,548,1,548,1,548,1,548,1,548,
        3,548,12953,8,548,1,549,1,549,1,549,1,549,3,549,12959,8,549,1,549,
        3,549,12962,8,549,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,
        1,550,3,550,12973,8,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,
        1,550,3,550,12983,8,550,1,551,1,551,1,551,3,551,12988,8,551,1,551,
        3,551,12991,8,551,1,551,3,551,12994,8,551,1,551,1,551,1,552,1,552,
        1,552,3,552,13001,8,552,1,552,1,552,1,552,1,553,1,553,1,553,3,553,
        13009,8,553,1,553,1,553,3,553,13013,8,553,1,553,1,553,1,554,1,554,
        1,554,1,554,1,554,5,554,13022,8,554,10,554,12,554,13025,9,554,1,
        555,1,555,1,555,1,555,1,555,5,555,13032,8,555,10,555,12,555,13035,
        9,555,1,555,1,555,1,555,3,555,13040,8,555,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,
        1,556,1,556,3,556,13125,8,556,3,556,13127,8,556,1,557,1,557,1,557,
        1,557,1,557,3,557,13134,8,557,1,557,1,557,3,557,13138,8,557,1,558,
        1,558,1,558,3,558,13143,8,558,1,558,1,558,1,558,1,558,5,558,13149,
        8,558,10,558,12,558,13152,9,558,3,558,13154,8,558,1,559,1,559,1,
        559,1,559,1,560,1,560,1,560,1,560,1,560,5,560,13165,8,560,10,560,
        12,560,13168,9,560,1,560,1,560,1,561,1,561,1,561,3,561,13175,8,561,
        1,562,1,562,1,562,3,562,13180,8,562,1,563,1,563,3,563,13184,8,563,
        1,564,1,564,1,564,1,564,1,564,5,564,13191,8,564,10,564,12,564,13194,
        9,564,1,564,1,564,1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,
        3,565,13206,8,565,1,566,1,566,1,566,1,566,1,566,1,566,3,566,13214,
        8,566,1,566,1,566,1,566,1,566,1,566,1,566,3,566,13222,8,566,5,566,
        13224,8,566,10,566,12,566,13227,9,566,1,567,1,567,1,567,1,567,3,
        567,13233,8,567,1,567,1,567,3,567,13237,8,567,1,568,1,568,1,568,
        1,569,1,569,1,569,1,569,1,570,1,570,1,570,1,571,1,571,1,571,1,571,
        1,571,1,571,1,571,1,571,3,571,13257,8,571,1,572,1,572,1,572,1,573,
        1,573,1,574,1,574,1,574,1,574,1,575,1,575,1,575,1,575,1,575,3,575,
        13273,8,575,1,575,3,575,13276,8,575,1,575,1,575,3,575,13280,8,575,
        1,576,1,576,1,576,5,576,13285,8,576,10,576,12,576,13288,9,576,1,
        576,1,576,1,576,1,577,1,577,1,577,1,577,5,577,13297,8,577,10,577,
        12,577,13300,9,577,1,578,1,578,3,578,13304,8,578,1,578,3,578,13307,
        8,578,1,579,1,579,1,579,1,579,1,579,1,579,5,579,13315,8,579,10,579,
        12,579,13318,9,579,1,579,1,579,1,579,1,579,1,579,1,579,1,579,1,579,
        5,579,13328,8,579,10,579,12,579,13331,9,579,1,579,1,579,1,579,1,
        579,1,579,1,579,1,579,1,579,5,579,13341,8,579,10,579,12,579,13344,
        9,579,1,579,1,579,1,579,1,579,1,579,1,579,3,579,13352,8,579,1,580,
        1,580,3,580,13356,8,580,1,580,1,580,1,581,1,581,3,581,13362,8,581,
        1,581,3,581,13365,8,581,1,582,1,582,3,582,13369,8,582,1,582,1,582,
        1,583,1,583,1,583,3,583,13376,8,583,1,583,1,583,1,583,1,583,3,583,
        13382,8,583,1,583,1,583,3,583,13386,8,583,1,584,1,584,1,584,1,584,
        1,584,1,584,1,584,1,584,5,584,13396,8,584,10,584,12,584,13399,9,
        584,1,584,1,584,1,584,1,584,1,584,1,584,1,584,1,584,1,584,1,584,
        5,584,13411,8,584,10,584,12,584,13414,9,584,1,584,1,584,3,584,13418,
        8,584,1,585,1,585,3,585,13422,8,585,1,585,3,585,13425,8,585,1,586,
        1,586,3,586,13429,8,586,1,586,3,586,13432,8,586,1,587,1,587,1,587,
        1,587,3,587,13438,8,587,1,587,3,587,13441,8,587,1,588,1,588,3,588,
        13445,8,588,1,589,1,589,1,589,1,589,5,589,13451,8,589,10,589,12,
        589,13454,9,589,1,589,1,589,1,590,1,590,1,590,1,590,5,590,13462,
        8,590,10,590,12,590,13465,9,590,1,590,1,590,1,591,1,591,1,591,1,
        591,5,591,13473,8,591,10,591,12,591,13476,9,591,1,591,1,591,1,592,
        1,592,3,592,13482,8,592,1,592,1,592,1,592,1,593,1,593,1,593,1,594,
        1,594,1,594,1,595,1,595,1,595,1,595,1,596,1,596,1,596,1,597,1,597,
        1,597,1,597,1,598,1,598,1,598,1,598,1,598,1,598,1,598,1,598,1,598,
        1,598,1,598,1,598,1,598,1,598,1,598,1,598,1,598,3,598,13521,8,598,
        1,599,1,599,1,600,1,600,1,600,1,600,3,600,13529,8,600,1,601,4,601,
        13532,8,601,11,601,12,601,13533,1,602,1,602,3,602,13538,8,602,1,
        602,1,602,3,602,13542,8,602,1,602,1,602,3,602,13546,8,602,1,602,
        1,602,3,602,13550,8,602,1,602,3,602,13553,8,602,1,602,1,602,3,602,
        13557,8,602,1,602,3,602,13560,8,602,1,603,1,603,1,603,1,603,1,603,
        3,603,13567,8,603,1,603,1,603,1,603,1,603,3,603,13573,8,603,1,604,
        1,604,1,604,1,604,5,604,13579,8,604,10,604,12,604,13582,9,604,1,
        605,1,605,3,605,13586,8,605,1,606,1,606,3,606,13590,8,606,1,606,
        1,606,1,606,1,607,1,607,1,607,3,607,13598,8,607,1,607,1,607,1,607,
        1,607,1,607,1,607,4,607,13606,8,607,11,607,12,607,13607,1,607,1,
        607,1,608,1,608,1,608,1,608,1,608,5,608,13617,8,608,10,608,12,608,
        13620,9,608,1,608,1,608,1,609,1,609,1,609,5,609,13627,8,609,10,609,
        12,609,13630,9,609,1,609,1,609,1,609,1,609,3,609,13636,8,609,1,609,
        3,609,13639,8,609,3,609,13641,8,609,1,610,3,610,13644,8,610,1,610,
        1,610,1,610,1,610,3,610,13650,8,610,3,610,13652,8,610,1,611,1,611,
        1,611,3,611,13657,8,611,1,612,1,612,1,612,1,612,1,612,1,613,1,613,
        1,613,1,613,1,613,1,613,1,613,1,613,3,613,13672,8,613,1,614,1,614,
        1,614,1,614,1,614,1,614,1,614,1,614,5,614,13682,8,614,10,614,12,
        614,13685,9,614,3,614,13687,8,614,1,614,1,614,1,614,5,614,13692,
        8,614,10,614,12,614,13695,9,614,3,614,13697,8,614,1,614,1,614,1,
        614,1,614,5,614,13703,8,614,10,614,12,614,13706,9,614,1,614,3,614,
        13709,8,614,1,614,3,614,13712,8,614,1,614,1,614,1,614,5,614,13717,
        8,614,10,614,12,614,13720,9,614,3,614,13722,8,614,1,615,1,615,1,
        615,1,615,1,615,1,615,1,615,1,615,1,615,5,615,13733,8,615,10,615,
        12,615,13736,9,615,1,615,3,615,13739,8,615,1,616,1,616,1,616,3,616,
        13744,8,616,1,616,1,616,3,616,13748,8,616,1,616,1,616,1,616,5,616,
        13753,8,616,10,616,12,616,13756,9,616,1,616,3,616,13759,8,616,1,
        616,1,616,1,616,1,616,1,616,5,616,13766,8,616,10,616,12,616,13769,
        9,616,1,616,1,616,1,616,5,616,13774,8,616,10,616,12,616,13777,9,
        616,1,616,1,616,1,616,5,616,13782,8,616,10,616,12,616,13785,9,616,
        1,616,1,616,1,616,5,616,13790,8,616,10,616,12,616,13793,9,616,1,
        616,1,616,1,616,1,616,3,616,13799,8,616,1,616,1,616,1,616,1,616,
        5,616,13805,8,616,10,616,12,616,13808,9,616,1,616,3,616,13811,8,
        616,1,616,1,616,3,616,13815,8,616,1,616,1,616,1,616,5,616,13820,
        8,616,10,616,12,616,13823,9,616,3,616,13825,8,616,1,617,1,617,1,
        617,1,617,1,617,1,617,3,617,13833,8,617,1,617,1,617,1,617,1,617,
        5,617,13839,8,617,10,617,12,617,13842,9,617,1,617,1,617,1,617,1,
        617,1,617,5,617,13849,8,617,10,617,12,617,13852,9,617,1,617,1,617,
        1,617,3,617,13857,8,617,1,617,1,617,1,617,3,617,13862,8,617,1,617,
        1,617,1,617,1,617,5,617,13868,8,617,10,617,12,617,13871,9,617,1,
        617,1,617,1,617,1,617,1,617,5,617,13878,8,617,10,617,12,617,13881,
        9,617,1,617,1,617,3,617,13885,8,617,3,617,13887,8,617,1,618,1,618,
        1,618,1,618,1,618,1,618,5,618,13895,8,618,10,618,12,618,13898,9,
        618,1,618,3,618,13901,8,618,1,618,1,618,1,618,1,618,1,618,1,618,
        5,618,13909,8,618,10,618,12,618,13912,9,618,3,618,13914,8,618,1,
        618,1,618,1,618,3,618,13919,8,618,1,619,1,619,1,619,1,619,1,619,
        1,619,1,619,5,619,13928,8,619,10,619,12,619,13931,9,619,1,619,3,
        619,13934,8,619,1,619,3,619,13937,8,619,1,620,1,620,1,620,1,620,
        1,620,1,620,1,620,5,620,13946,8,620,10,620,12,620,13949,9,620,1,
        621,1,621,1,621,1,621,1,621,1,621,1,621,5,621,13958,8,621,10,621,
        12,621,13961,9,621,1,622,1,622,1,622,1,622,1,622,1,622,1,622,1,622,
        3,622,13971,8,622,1,623,1,623,3,623,13975,8,623,1,623,1,623,1,623,
        1,623,1,623,1,623,1,623,5,623,13984,8,623,10,623,12,623,13987,9,
        623,3,623,13989,8,623,1,623,1,623,1,623,5,623,13994,8,623,10,623,
        12,623,13997,9,623,3,623,13999,8,623,1,623,1,623,1,623,1,623,5,623,
        14005,8,623,10,623,12,623,14008,9,623,1,623,3,623,14011,8,623,1,
        624,1,624,1,624,1,624,3,624,14017,8,624,1,624,1,624,1,624,5,624,
        14022,8,624,10,624,12,624,14025,9,624,1,624,1,624,1,624,1,624,5,
        624,14031,8,624,10,624,12,624,14034,9,624,1,625,1,625,3,625,14038,
        8,625,1,625,1,625,3,625,14042,8,625,1,625,1,625,3,625,14046,8,625,
        1,625,1,625,1,625,5,625,14051,8,625,10,625,12,625,14054,9,625,3,
        625,14056,8,625,1,625,1,625,1,625,1,625,1,625,5,625,14063,8,625,
        10,625,12,625,14066,9,625,1,625,1,625,1,625,5,625,14071,8,625,10,
        625,12,625,14074,9,625,1,625,1,625,1,625,5,625,14079,8,625,10,625,
        12,625,14082,9,625,1,625,1,625,1,625,5,625,14087,8,625,10,625,12,
        625,14090,9,625,3,625,14092,8,625,1,625,1,625,1,625,1,625,5,625,
        14098,8,625,10,625,12,625,14101,9,625,1,625,1,625,1,625,1,625,5,
        625,14107,8,625,10,625,12,625,14110,9,625,3,625,14112,8,625,1,626,
        1,626,1,626,1,626,1,626,1,626,1,626,1,626,5,626,14122,8,626,10,626,
        12,626,14125,9,626,1,626,1,626,1,626,1,626,1,626,5,626,14132,8,626,
        10,626,12,626,14135,9,626,1,626,1,626,1,626,3,626,14140,8,626,1,
        626,1,626,1,626,3,626,14145,8,626,1,626,1,626,1,626,1,626,5,626,
        14151,8,626,10,626,12,626,14154,9,626,1,626,1,626,1,626,1,626,1,
        626,5,626,14161,8,626,10,626,12,626,14164,9,626,3,626,14166,8,626,
        3,626,14168,8,626,1,626,1,626,1,626,3,626,14173,8,626,1,627,1,627,
        1,627,1,627,1,627,1,627,5,627,14181,8,627,10,627,12,627,14184,9,
        627,1,627,3,627,14187,8,627,1,627,1,627,1,627,1,627,1,627,1,627,
        5,627,14195,8,627,10,627,12,627,14198,9,627,3,627,14200,8,627,1,
        628,1,628,3,628,14204,8,628,1,628,1,628,1,628,1,628,1,628,1,628,
        5,628,14212,8,628,10,628,12,628,14215,9,628,1,628,3,628,14218,8,
        628,1,629,1,629,1,629,1,629,1,629,1,629,1,629,5,629,14227,8,629,
        10,629,12,629,14230,9,629,1,630,1,630,1,630,1,630,1,630,1,630,1,
        630,5,630,14239,8,630,10,630,12,630,14242,9,630,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,1,631,
        1,631,1,631,3,631,14370,8,631,1,632,1,632,1,632,1,632,1,632,1,632,
        1,632,3,632,14379,8,632,1,632,1,632,1,632,1,632,1,632,5,632,14386,
        8,632,10,632,12,632,14389,9,632,3,632,14391,8,632,1,632,1,632,1,
        632,1,632,3,632,14397,8,632,1,632,3,632,14400,8,632,1,633,1,633,
        1,633,1,633,1,633,3,633,14407,8,633,1,634,1,634,1,634,1,634,1,634,
        3,634,14414,8,634,1,635,1,635,1,635,1,635,1,635,3,635,14421,8,635,
        1,636,1,636,1,636,1,636,1,636,3,636,14428,8,636,1,637,1,637,1,638,
        3,638,14433,8,638,1,638,1,638,1,639,3,639,14438,8,639,1,639,1,639,
        1,640,3,640,14443,8,640,1,640,1,640,1,641,1,641,1,641,1,641,1,642,
        1,642,1,642,1,642,1,643,1,643,1,643,1,643,1,643,1,9169,4,274,834,
        994,996,644,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
        408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
        440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
        472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
        504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
        536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
        568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,
        600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
        632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
        664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
        696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,
        728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
        760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,
        792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,
        824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,
        856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,
        888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
        920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
        952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,
        984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,
        1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,
        1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
        1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,
        1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,
        1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,
        1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,
        1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,
        1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,
        1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,
        1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,
        1274,1276,1278,1280,1282,1284,1286,0,157,2,0,664,664,699,699,1,0,
        1221,1222,2,0,372,372,884,884,2,0,20,20,426,426,2,0,115,115,307,
        307,3,0,111,111,283,283,286,286,3,0,69,69,361,361,951,951,1,0,873,
        874,2,0,290,290,1208,1208,3,0,13,13,198,198,269,269,2,0,283,283,
        286,286,2,0,75,75,199,199,1,0,1139,1140,3,0,599,600,644,645,714,
        714,3,0,395,395,937,937,939,939,2,0,300,300,1077,1077,2,0,20,20,
        207,207,2,0,86,86,340,340,2,0,624,624,713,713,4,0,557,557,598,598,
        718,718,1085,1085,3,0,386,386,718,718,1086,1086,3,0,557,557,598,
        598,718,718,2,0,12,12,493,493,2,0,72,72,623,623,3,0,386,386,718,
        718,961,961,3,0,190,190,195,195,293,293,4,0,602,602,624,624,713,
        713,834,834,2,0,560,560,575,575,2,0,78,78,146,146,1,0,114,115,1,
        0,452,453,2,0,156,156,267,267,5,0,573,573,589,590,768,769,888,888,
        946,946,5,0,277,277,582,583,787,787,895,895,1002,1002,1,0,369,370,
        2,0,69,69,361,361,3,0,83,83,238,238,244,244,2,0,258,258,478,478,
        2,0,219,219,355,355,2,0,385,385,417,417,2,0,1023,1023,1192,1192,
        2,0,178,178,460,460,2,0,261,261,372,372,2,0,735,735,1015,1015,3,
        0,45,45,727,727,729,729,3,0,111,111,239,239,246,246,4,0,502,502,
        544,544,754,754,791,791,3,0,111,111,647,647,1065,1065,2,0,557,557,
        598,598,2,0,386,386,961,961,3,0,17,17,203,203,274,274,3,0,725,725,
        735,735,1015,1015,15,0,13,13,111,111,150,150,226,226,280,280,386,
        386,398,398,404,404,477,477,496,496,501,501,838,838,940,940,977,
        979,1019,1019,3,0,537,537,539,539,541,541,2,0,243,243,538,538,2,
        0,930,930,954,954,2,0,343,343,371,371,2,0,17,17,203,203,4,0,111,
        111,137,137,274,274,741,741,6,0,535,535,570,570,642,642,691,691,
        719,719,788,788,3,0,302,303,385,385,417,417,2,0,126,126,268,268,
        2,0,1193,1193,1205,1205,1,0,197,198,4,0,567,567,580,581,705,706,
        908,908,1,0,143,144,2,0,108,109,278,278,2,0,52,52,55,55,2,0,1042,
        1042,1059,1059,3,0,681,681,723,723,752,752,2,0,723,723,752,752,4,
        0,173,173,725,725,735,735,1015,1015,2,0,438,438,455,455,2,0,272,
        272,1211,1211,2,0,49,49,88,88,2,0,556,556,1010,1010,1,0,1069,1072,
        2,0,1198,1200,1203,1203,12,0,106,106,506,509,678,678,774,774,778,
        779,863,864,904,904,949,949,985,985,1009,1009,1026,1028,1061,1062,
        1,0,488,1192,4,0,142,142,204,204,247,247,447,447,3,0,165,165,219,
        219,355,355,1,0,1185,1186,2,0,178,178,840,840,2,0,21,21,116,116,
        2,0,156,156,731,731,4,0,556,556,735,735,1010,1010,1015,1015,1,0,
        1219,1220,1,0,1217,1218,2,0,736,736,876,876,3,0,520,521,523,525,
        530,530,4,0,513,513,519,519,528,529,531,531,3,0,515,515,526,527,
        532,532,3,0,817,817,823,823,825,825,3,0,815,816,819,820,822,822,
        6,0,106,106,185,185,248,248,258,258,368,368,478,478,4,0,185,185,
        248,248,258,258,368,368,9,0,30,32,213,213,238,239,244,244,246,246,
        380,380,396,397,403,403,461,462,2,0,13,13,121,121,3,0,80,80,84,85,
        327,335,3,0,13,13,121,121,448,448,7,0,30,32,238,239,244,244,246,
        246,396,397,403,403,461,462,3,0,301,301,603,603,630,630,2,0,673,
        673,734,734,2,0,730,730,737,737,3,0,237,237,241,241,260,260,1,0,
        851,852,16,0,3,3,6,7,22,23,25,25,27,27,81,82,113,113,147,147,222,
        222,228,228,276,276,318,318,378,379,390,390,407,408,479,479,3,0,
        565,566,674,674,926,926,3,0,26,26,251,251,319,319,2,0,894,894,1006,
        1006,2,0,815,816,819,820,2,0,43,43,45,45,3,0,52,53,55,58,240,240,
        3,0,161,161,425,425,437,437,5,0,547,547,549,550,682,682,892,893,
        924,925,3,0,957,960,966,970,972,976,5,0,612,616,783,785,867,868,
        1033,1036,1064,1064,2,0,689,689,738,738,6,0,561,562,620,621,748,
        751,964,965,1003,1004,1141,1144,1,0,997,998,2,0,995,995,999,999,
        1,0,808,809,7,0,185,185,248,248,258,258,368,368,478,478,1076,1076,
        1099,1099,2,0,9,9,814,814,7,0,106,106,185,185,248,248,258,258,368,
        368,423,424,478,478,1,0,179,180,1,0,650,651,1,0,450,451,5,0,535,
        535,572,572,708,708,739,739,1084,1084,4,0,54,54,383,383,399,399,
        465,465,3,0,233,233,454,454,1011,1011,2,0,746,746,898,898,2,0,747,
        747,899,899,2,0,159,159,1208,1208,1,0,401,402,1,0,433,434,3,0,39,
        39,217,217,429,429,2,0,593,593,636,636,2,0,661,661,701,701,2,0,307,
        307,942,942,3,0,593,593,636,636,914,914,1,0,1104,1107,2,0,274,274,
        649,649,2,0,593,593,914,914,4,0,274,274,489,489,649,649,794,794,
        2,0,697,697,885,885,4,0,32,32,629,629,690,690,745,745,2,0,660,660,
        700,700,2,0,1207,1207,1210,1210,3,0,13,13,18,18,382,382,1,0,226,
        227,2,0,159,159,190,190,2,0,659,659,662,662,2,0,128,128,938,938,
        2,0,164,164,426,426,4,0,2,2,256,257,373,373,375,375,16791,0,1378,
        1,0,0,0,2,1380,1,0,0,0,4,1402,1,0,0,0,6,1411,1,0,0,0,8,1424,1,0,
        0,0,10,1457,1,0,0,0,12,1463,1,0,0,0,14,1476,1,0,0,0,16,1478,1,0,
        0,0,18,1529,1,0,0,0,20,1541,1,0,0,0,22,1558,1,0,0,0,24,1572,1,0,
        0,0,26,1578,1,0,0,0,28,1643,1,0,0,0,30,1645,1,0,0,0,32,1682,1,0,
        0,0,34,1723,1,0,0,0,36,1798,1,0,0,0,38,1846,1,0,0,0,40,1848,1,0,
        0,0,42,1922,1,0,0,0,44,1932,1,0,0,0,46,1934,1,0,0,0,48,1961,1,0,
        0,0,50,1993,1,0,0,0,52,2004,1,0,0,0,54,2027,1,0,0,0,56,2045,1,0,
        0,0,58,2055,1,0,0,0,60,2068,1,0,0,0,62,2079,1,0,0,0,64,2089,1,0,
        0,0,66,2108,1,0,0,0,68,2126,1,0,0,0,70,2182,1,0,0,0,72,2204,1,0,
        0,0,74,2229,1,0,0,0,76,2385,1,0,0,0,78,2393,1,0,0,0,80,2416,1,0,
        0,0,82,2418,1,0,0,0,84,2454,1,0,0,0,86,2509,1,0,0,0,88,2530,1,0,
        0,0,90,2535,1,0,0,0,92,2537,1,0,0,0,94,2541,1,0,0,0,96,2552,1,0,
        0,0,98,2568,1,0,0,0,100,2584,1,0,0,0,102,2594,1,0,0,0,104,2670,1,
        0,0,0,106,2686,1,0,0,0,108,2708,1,0,0,0,110,2741,1,0,0,0,112,2744,
        1,0,0,0,114,2751,1,0,0,0,116,2779,1,0,0,0,118,2800,1,0,0,0,120,2816,
        1,0,0,0,122,2818,1,0,0,0,124,2874,1,0,0,0,126,2952,1,0,0,0,128,3028,
        1,0,0,0,130,3031,1,0,0,0,132,3034,1,0,0,0,134,3052,1,0,0,0,136,3077,
        1,0,0,0,138,3080,1,0,0,0,140,3084,1,0,0,0,142,3098,1,0,0,0,144,3100,
        1,0,0,0,146,3105,1,0,0,0,148,3109,1,0,0,0,150,3137,1,0,0,0,152,3139,
        1,0,0,0,154,3143,1,0,0,0,156,3151,1,0,0,0,158,3188,1,0,0,0,160,3209,
        1,0,0,0,162,3211,1,0,0,0,164,3237,1,0,0,0,166,3255,1,0,0,0,168,3257,
        1,0,0,0,170,3262,1,0,0,0,172,3268,1,0,0,0,174,3300,1,0,0,0,176,3307,
        1,0,0,0,178,3324,1,0,0,0,180,3373,1,0,0,0,182,3378,1,0,0,0,184,3383,
        1,0,0,0,186,3424,1,0,0,0,188,3426,1,0,0,0,190,3433,1,0,0,0,192,3439,
        1,0,0,0,194,3490,1,0,0,0,196,3492,1,0,0,0,198,3501,1,0,0,0,200,3527,
        1,0,0,0,202,3579,1,0,0,0,204,3620,1,0,0,0,206,3627,1,0,0,0,208,3630,
        1,0,0,0,210,3634,1,0,0,0,212,3642,1,0,0,0,214,3664,1,0,0,0,216,3677,
        1,0,0,0,218,3681,1,0,0,0,220,3698,1,0,0,0,222,3711,1,0,0,0,224,3718,
        1,0,0,0,226,3743,1,0,0,0,228,3751,1,0,0,0,230,3759,1,0,0,0,232,3791,
        1,0,0,0,234,3802,1,0,0,0,236,3811,1,0,0,0,238,3836,1,0,0,0,240,3847,
        1,0,0,0,242,3851,1,0,0,0,244,3855,1,0,0,0,246,3857,1,0,0,0,248,3861,
        1,0,0,0,250,3863,1,0,0,0,252,3880,1,0,0,0,254,3898,1,0,0,0,256,3924,
        1,0,0,0,258,3949,1,0,0,0,260,3951,1,0,0,0,262,3967,1,0,0,0,264,3992,
        1,0,0,0,266,4018,1,0,0,0,268,4093,1,0,0,0,270,4113,1,0,0,0,272,4129,
        1,0,0,0,274,4143,1,0,0,0,276,4163,1,0,0,0,278,4171,1,0,0,0,280,4277,
        1,0,0,0,282,4333,1,0,0,0,284,4335,1,0,0,0,286,4360,1,0,0,0,288,4368,
        1,0,0,0,290,4374,1,0,0,0,292,4379,1,0,0,0,294,4383,1,0,0,0,296,4387,
        1,0,0,0,298,4391,1,0,0,0,300,4394,1,0,0,0,302,4396,1,0,0,0,304,4452,
        1,0,0,0,306,4465,1,0,0,0,308,4473,1,0,0,0,310,4514,1,0,0,0,312,4581,
        1,0,0,0,314,4622,1,0,0,0,316,4658,1,0,0,0,318,4720,1,0,0,0,320,4750,
        1,0,0,0,322,4778,1,0,0,0,324,4829,1,0,0,0,326,4856,1,0,0,0,328,4959,
        1,0,0,0,330,4961,1,0,0,0,332,4976,1,0,0,0,334,4984,1,0,0,0,336,4992,
        1,0,0,0,338,5040,1,0,0,0,340,5042,1,0,0,0,342,5057,1,0,0,0,344,5059,
        1,0,0,0,346,5069,1,0,0,0,348,5087,1,0,0,0,350,5102,1,0,0,0,352,5128,
        1,0,0,0,354,5136,1,0,0,0,356,5140,1,0,0,0,358,5164,1,0,0,0,360,5169,
        1,0,0,0,362,5203,1,0,0,0,364,5207,1,0,0,0,366,5240,1,0,0,0,368,5279,
        1,0,0,0,370,5331,1,0,0,0,372,5337,1,0,0,0,374,5367,1,0,0,0,376,5369,
        1,0,0,0,378,5401,1,0,0,0,380,5417,1,0,0,0,382,5419,1,0,0,0,384,5435,
        1,0,0,0,386,5456,1,0,0,0,388,5475,1,0,0,0,390,5499,1,0,0,0,392,5503,
        1,0,0,0,394,5572,1,0,0,0,396,5641,1,0,0,0,398,5648,1,0,0,0,400,5653,
        1,0,0,0,402,5679,1,0,0,0,404,5681,1,0,0,0,406,5688,1,0,0,0,408,5695,
        1,0,0,0,410,5700,1,0,0,0,412,5704,1,0,0,0,414,5840,1,0,0,0,416,5842,
        1,0,0,0,418,5846,1,0,0,0,420,5875,1,0,0,0,422,5878,1,0,0,0,424,5884,
        1,0,0,0,426,5890,1,0,0,0,428,5894,1,0,0,0,430,5907,1,0,0,0,432,5911,
        1,0,0,0,434,5915,1,0,0,0,436,5923,1,0,0,0,438,5951,1,0,0,0,440,5953,
        1,0,0,0,442,5958,1,0,0,0,444,5983,1,0,0,0,446,5988,1,0,0,0,448,5993,
        1,0,0,0,450,5998,1,0,0,0,452,6002,1,0,0,0,454,6006,1,0,0,0,456,6013,
        1,0,0,0,458,6018,1,0,0,0,460,6022,1,0,0,0,462,6026,1,0,0,0,464,6031,
        1,0,0,0,466,6038,1,0,0,0,468,6042,1,0,0,0,470,6050,1,0,0,0,472,6080,
        1,0,0,0,474,6092,1,0,0,0,476,6106,1,0,0,0,478,6110,1,0,0,0,480,6114,
        1,0,0,0,482,6118,1,0,0,0,484,6122,1,0,0,0,486,6126,1,0,0,0,488,6139,
        1,0,0,0,490,6192,1,0,0,0,492,6196,1,0,0,0,494,6206,1,0,0,0,496,6208,
        1,0,0,0,498,6211,1,0,0,0,500,6217,1,0,0,0,502,6418,1,0,0,0,504,6420,
        1,0,0,0,506,6433,1,0,0,0,508,6457,1,0,0,0,510,6470,1,0,0,0,512,6483,
        1,0,0,0,514,6501,1,0,0,0,516,6523,1,0,0,0,518,6525,1,0,0,0,520,6537,
        1,0,0,0,522,6666,1,0,0,0,524,6668,1,0,0,0,526,6695,1,0,0,0,528,6701,
        1,0,0,0,530,6707,1,0,0,0,532,6713,1,0,0,0,534,6719,1,0,0,0,536,6725,
        1,0,0,0,538,6933,1,0,0,0,540,6935,1,0,0,0,542,6937,1,0,0,0,544,6960,
        1,0,0,0,546,6971,1,0,0,0,548,6973,1,0,0,0,550,6982,1,0,0,0,552,6991,
        1,0,0,0,554,7123,1,0,0,0,556,7125,1,0,0,0,558,7131,1,0,0,0,560,7141,
        1,0,0,0,562,7175,1,0,0,0,564,7221,1,0,0,0,566,7224,1,0,0,0,568,7245,
        1,0,0,0,570,7252,1,0,0,0,572,7267,1,0,0,0,574,7269,1,0,0,0,576,7277,
        1,0,0,0,578,7286,1,0,0,0,580,7295,1,0,0,0,582,7311,1,0,0,0,584,7318,
        1,0,0,0,586,7331,1,0,0,0,588,7336,1,0,0,0,590,7342,1,0,0,0,592,7350,
        1,0,0,0,594,7378,1,0,0,0,596,7381,1,0,0,0,598,7385,1,0,0,0,600,7398,
        1,0,0,0,602,7443,1,0,0,0,604,7446,1,0,0,0,606,7505,1,0,0,0,608,7518,
        1,0,0,0,610,7532,1,0,0,0,612,7535,1,0,0,0,614,7562,1,0,0,0,616,7592,
        1,0,0,0,618,7648,1,0,0,0,620,7651,1,0,0,0,622,7696,1,0,0,0,624,7712,
        1,0,0,0,626,7725,1,0,0,0,628,7750,1,0,0,0,630,7815,1,0,0,0,632,7817,
        1,0,0,0,634,7828,1,0,0,0,636,7845,1,0,0,0,638,7908,1,0,0,0,640,7912,
        1,0,0,0,642,7914,1,0,0,0,644,7937,1,0,0,0,646,7995,1,0,0,0,648,8011,
        1,0,0,0,650,8031,1,0,0,0,652,8033,1,0,0,0,654,8063,1,0,0,0,656,8070,
        1,0,0,0,658,8083,1,0,0,0,660,8096,1,0,0,0,662,8101,1,0,0,0,664,8103,
        1,0,0,0,666,8105,1,0,0,0,668,8118,1,0,0,0,670,8125,1,0,0,0,672,8129,
        1,0,0,0,674,8131,1,0,0,0,676,8135,1,0,0,0,678,8145,1,0,0,0,680,8176,
        1,0,0,0,682,8184,1,0,0,0,684,8186,1,0,0,0,686,8194,1,0,0,0,688,8205,
        1,0,0,0,690,8214,1,0,0,0,692,8226,1,0,0,0,694,8270,1,0,0,0,696,8312,
        1,0,0,0,698,8322,1,0,0,0,700,8340,1,0,0,0,702,8357,1,0,0,0,704,8376,
        1,0,0,0,706,8402,1,0,0,0,708,8453,1,0,0,0,710,8463,1,0,0,0,712,8473,
        1,0,0,0,714,8481,1,0,0,0,716,8485,1,0,0,0,718,8487,1,0,0,0,720,8552,
        1,0,0,0,722,8554,1,0,0,0,724,8558,1,0,0,0,726,8565,1,0,0,0,728,8572,
        1,0,0,0,730,8576,1,0,0,0,732,8579,1,0,0,0,734,8583,1,0,0,0,736,8589,
        1,0,0,0,738,8592,1,0,0,0,740,8595,1,0,0,0,742,8599,1,0,0,0,744,8603,
        1,0,0,0,746,8607,1,0,0,0,748,8618,1,0,0,0,750,8620,1,0,0,0,752,8624,
        1,0,0,0,754,8641,1,0,0,0,756,8643,1,0,0,0,758,8646,1,0,0,0,760,8654,
        1,0,0,0,762,8667,1,0,0,0,764,8671,1,0,0,0,766,8673,1,0,0,0,768,8675,
        1,0,0,0,770,8677,1,0,0,0,772,8680,1,0,0,0,774,8685,1,0,0,0,776,8690,
        1,0,0,0,778,8694,1,0,0,0,780,8728,1,0,0,0,782,8730,1,0,0,0,784,8744,
        1,0,0,0,786,8750,1,0,0,0,788,8754,1,0,0,0,790,8759,1,0,0,0,792,8768,
        1,0,0,0,794,8777,1,0,0,0,796,8786,1,0,0,0,798,8795,1,0,0,0,800,8803,
        1,0,0,0,802,8807,1,0,0,0,804,8812,1,0,0,0,806,8816,1,0,0,0,808,8820,
        1,0,0,0,810,8824,1,0,0,0,812,8828,1,0,0,0,814,8832,1,0,0,0,816,8836,
        1,0,0,0,818,8840,1,0,0,0,820,8844,1,0,0,0,822,8848,1,0,0,0,824,8852,
        1,0,0,0,826,8856,1,0,0,0,828,8860,1,0,0,0,830,8862,1,0,0,0,832,8864,
        1,0,0,0,834,8872,1,0,0,0,836,8885,1,0,0,0,838,8930,1,0,0,0,840,8934,
        1,0,0,0,842,8948,1,0,0,0,844,8950,1,0,0,0,846,8963,1,0,0,0,848,8982,
        1,0,0,0,850,8996,1,0,0,0,852,9009,1,0,0,0,854,9011,1,0,0,0,856,9026,
        1,0,0,0,858,9059,1,0,0,0,860,9067,1,0,0,0,862,9078,1,0,0,0,864,9082,
        1,0,0,0,866,9088,1,0,0,0,868,9092,1,0,0,0,870,9157,1,0,0,0,872,9159,
        1,0,0,0,874,9162,1,0,0,0,876,9194,1,0,0,0,878,9208,1,0,0,0,880,9240,
        1,0,0,0,882,9242,1,0,0,0,884,9248,1,0,0,0,886,9253,1,0,0,0,888,9265,
        1,0,0,0,890,9268,1,0,0,0,892,9282,1,0,0,0,894,9299,1,0,0,0,896,9314,
        1,0,0,0,898,9329,1,0,0,0,900,9340,1,0,0,0,902,9360,1,0,0,0,904,9369,
        1,0,0,0,906,9384,1,0,0,0,908,9444,1,0,0,0,910,9463,1,0,0,0,912,9513,
        1,0,0,0,914,9567,1,0,0,0,916,9583,1,0,0,0,918,9601,1,0,0,0,920,9618,
        1,0,0,0,922,9667,1,0,0,0,924,9689,1,0,0,0,926,9717,1,0,0,0,928,9727,
        1,0,0,0,930,9734,1,0,0,0,932,9740,1,0,0,0,934,9745,1,0,0,0,936,9763,
        1,0,0,0,938,9765,1,0,0,0,940,9773,1,0,0,0,942,9826,1,0,0,0,944,9881,
        1,0,0,0,946,9883,1,0,0,0,948,9901,1,0,0,0,950,9910,1,0,0,0,952,9915,
        1,0,0,0,954,9930,1,0,0,0,956,9936,1,0,0,0,958,9940,1,0,0,0,960,9952,
        1,0,0,0,962,9962,1,0,0,0,964,9965,1,0,0,0,966,9970,1,0,0,0,968,9975,
        1,0,0,0,970,9993,1,0,0,0,972,9995,1,0,0,0,974,9998,1,0,0,0,976,10001,
        1,0,0,0,978,10015,1,0,0,0,980,10023,1,0,0,0,982,10038,1,0,0,0,984,
        10051,1,0,0,0,986,10077,1,0,0,0,988,10087,1,0,0,0,990,10095,1,0,
        0,0,992,10099,1,0,0,0,994,10349,1,0,0,0,996,10438,1,0,0,0,998,10848,
        1,0,0,0,1000,10873,1,0,0,0,1002,10879,1,0,0,0,1004,10881,1,0,0,0,
        1006,10898,1,0,0,0,1008,10914,1,0,0,0,1010,10917,1,0,0,0,1012,10934,
        1,0,0,0,1014,10936,1,0,0,0,1016,10941,1,0,0,0,1018,10984,1,0,0,0,
        1020,11021,1,0,0,0,1022,11172,1,0,0,0,1024,11228,1,0,0,0,1026,11443,
        1,0,0,0,1028,11485,1,0,0,0,1030,11551,1,0,0,0,1032,11609,1,0,0,0,
        1034,11634,1,0,0,0,1036,11664,1,0,0,0,1038,11667,1,0,0,0,1040,11805,
        1,0,0,0,1042,11857,1,0,0,0,1044,11887,1,0,0,0,1046,11890,1,0,0,0,
        1048,11932,1,0,0,0,1050,11956,1,0,0,0,1052,11999,1,0,0,0,1054,12090,
        1,0,0,0,1056,12405,1,0,0,0,1058,12529,1,0,0,0,1060,12778,1,0,0,0,
        1062,12802,1,0,0,0,1064,12831,1,0,0,0,1066,12833,1,0,0,0,1068,12836,
        1,0,0,0,1070,12839,1,0,0,0,1072,12842,1,0,0,0,1074,12845,1,0,0,0,
        1076,12847,1,0,0,0,1078,12863,1,0,0,0,1080,12869,1,0,0,0,1082,12871,
        1,0,0,0,1084,12896,1,0,0,0,1086,12905,1,0,0,0,1088,12910,1,0,0,0,
        1090,12918,1,0,0,0,1092,12930,1,0,0,0,1094,12940,1,0,0,0,1096,12946,
        1,0,0,0,1098,12961,1,0,0,0,1100,12982,1,0,0,0,1102,12984,1,0,0,0,
        1104,12997,1,0,0,0,1106,13005,1,0,0,0,1108,13016,1,0,0,0,1110,13026,
        1,0,0,0,1112,13041,1,0,0,0,1114,13128,1,0,0,0,1116,13139,1,0,0,0,
        1118,13155,1,0,0,0,1120,13159,1,0,0,0,1122,13171,1,0,0,0,1124,13176,
        1,0,0,0,1126,13181,1,0,0,0,1128,13185,1,0,0,0,1130,13205,1,0,0,0,
        1132,13207,1,0,0,0,1134,13228,1,0,0,0,1136,13238,1,0,0,0,1138,13241,
        1,0,0,0,1140,13245,1,0,0,0,1142,13248,1,0,0,0,1144,13258,1,0,0,0,
        1146,13261,1,0,0,0,1148,13263,1,0,0,0,1150,13267,1,0,0,0,1152,13281,
        1,0,0,0,1154,13292,1,0,0,0,1156,13301,1,0,0,0,1158,13351,1,0,0,0,
        1160,13353,1,0,0,0,1162,13359,1,0,0,0,1164,13366,1,0,0,0,1166,13372,
        1,0,0,0,1168,13417,1,0,0,0,1170,13419,1,0,0,0,1172,13426,1,0,0,0,
        1174,13433,1,0,0,0,1176,13444,1,0,0,0,1178,13446,1,0,0,0,1180,13457,
        1,0,0,0,1182,13468,1,0,0,0,1184,13479,1,0,0,0,1186,13486,1,0,0,0,
        1188,13489,1,0,0,0,1190,13492,1,0,0,0,1192,13496,1,0,0,0,1194,13499,
        1,0,0,0,1196,13520,1,0,0,0,1198,13522,1,0,0,0,1200,13528,1,0,0,0,
        1202,13531,1,0,0,0,1204,13535,1,0,0,0,1206,13572,1,0,0,0,1208,13574,
        1,0,0,0,1210,13585,1,0,0,0,1212,13587,1,0,0,0,1214,13594,1,0,0,0,
        1216,13611,1,0,0,0,1218,13623,1,0,0,0,1220,13643,1,0,0,0,1222,13656,
        1,0,0,0,1224,13658,1,0,0,0,1226,13671,1,0,0,0,1228,13673,1,0,0,0,
        1230,13723,1,0,0,0,1232,13740,1,0,0,0,1234,13826,1,0,0,0,1236,13888,
        1,0,0,0,1238,13920,1,0,0,0,1240,13938,1,0,0,0,1242,13950,1,0,0,0,
        1244,13970,1,0,0,0,1246,13972,1,0,0,0,1248,14012,1,0,0,0,1250,14035,
        1,0,0,0,1252,14113,1,0,0,0,1254,14174,1,0,0,0,1256,14201,1,0,0,0,
        1258,14219,1,0,0,0,1260,14231,1,0,0,0,1262,14369,1,0,0,0,1264,14399,
        1,0,0,0,1266,14406,1,0,0,0,1268,14413,1,0,0,0,1270,14420,1,0,0,0,
        1272,14427,1,0,0,0,1274,14429,1,0,0,0,1276,14432,1,0,0,0,1278,14437,
        1,0,0,0,1280,14442,1,0,0,0,1282,14446,1,0,0,0,1284,14450,1,0,0,0,
        1286,14454,1,0,0,0,1288,1379,3,2,1,0,1289,1379,3,8,4,0,1290,1379,
        3,10,5,0,1291,1379,3,12,6,0,1292,1379,3,14,7,0,1293,1379,3,54,27,
        0,1294,1379,3,72,36,0,1295,1379,3,74,37,0,1296,1379,3,82,41,0,1297,
        1379,3,84,42,0,1298,1379,3,100,50,0,1299,1379,3,102,51,0,1300,1379,
        3,116,58,0,1301,1379,3,118,59,0,1302,1379,3,120,60,0,1303,1379,3,
        156,78,0,1304,1379,3,160,80,0,1305,1379,3,252,126,0,1306,1379,3,
        256,128,0,1307,1379,3,284,142,0,1308,1379,3,302,151,0,1309,1379,
        3,260,130,0,1310,1379,3,264,132,0,1311,1379,3,278,139,0,1312,1379,
        3,304,152,0,1313,1379,3,306,153,0,1314,1379,3,374,187,0,1315,1379,
        3,412,206,0,1316,1379,3,420,210,0,1317,1379,3,422,211,0,1318,1379,
        3,424,212,0,1319,1379,3,426,213,0,1320,1379,3,428,214,0,1321,1379,
        3,430,215,0,1322,1379,3,432,216,0,1323,1379,3,434,217,0,1324,1379,
        3,436,218,0,1325,1379,3,438,219,0,1326,1379,3,440,220,0,1327,1379,
        3,444,222,0,1328,1379,3,448,224,0,1329,1379,3,442,221,0,1330,1379,
        3,446,223,0,1331,1379,3,450,225,0,1332,1379,3,452,226,0,1333,1379,
        3,454,227,0,1334,1379,3,456,228,0,1335,1379,3,458,229,0,1336,1379,
        3,460,230,0,1337,1379,3,462,231,0,1338,1379,3,464,232,0,1339,1379,
        3,466,233,0,1340,1379,3,468,234,0,1341,1379,3,470,235,0,1342,1379,
        3,472,236,0,1343,1379,3,474,237,0,1344,1379,3,476,238,0,1345,1379,
        3,478,239,0,1346,1379,3,480,240,0,1347,1379,3,482,241,0,1348,1379,
        3,484,242,0,1349,1379,3,486,243,0,1350,1379,3,488,244,0,1351,1379,
        3,490,245,0,1352,1379,3,492,246,0,1353,1379,3,498,249,0,1354,1379,
        3,502,251,0,1355,1379,3,504,252,0,1356,1379,3,506,253,0,1357,1379,
        3,508,254,0,1358,1379,3,510,255,0,1359,1379,3,512,256,0,1360,1379,
        3,514,257,0,1361,1379,3,518,259,0,1362,1379,3,520,260,0,1363,1379,
        3,524,262,0,1364,1379,3,526,263,0,1365,1379,3,528,264,0,1366,1379,
        3,530,265,0,1367,1379,3,532,266,0,1368,1379,3,534,267,0,1369,1379,
        3,536,268,0,1370,1379,3,538,269,0,1371,1379,3,550,275,0,1372,1379,
        3,552,276,0,1373,1379,3,554,277,0,1374,1379,3,556,278,0,1375,1379,
        3,558,279,0,1376,1379,3,560,280,0,1377,1379,3,562,281,0,1378,1288,
        1,0,0,0,1378,1289,1,0,0,0,1378,1290,1,0,0,0,1378,1291,1,0,0,0,1378,
        1292,1,0,0,0,1378,1293,1,0,0,0,1378,1294,1,0,0,0,1378,1295,1,0,0,
        0,1378,1296,1,0,0,0,1378,1297,1,0,0,0,1378,1298,1,0,0,0,1378,1299,
        1,0,0,0,1378,1300,1,0,0,0,1378,1301,1,0,0,0,1378,1302,1,0,0,0,1378,
        1303,1,0,0,0,1378,1304,1,0,0,0,1378,1305,1,0,0,0,1378,1306,1,0,0,
        0,1378,1307,1,0,0,0,1378,1308,1,0,0,0,1378,1309,1,0,0,0,1378,1310,
        1,0,0,0,1378,1311,1,0,0,0,1378,1312,1,0,0,0,1378,1313,1,0,0,0,1378,
        1314,1,0,0,0,1378,1315,1,0,0,0,1378,1316,1,0,0,0,1378,1317,1,0,0,
        0,1378,1318,1,0,0,0,1378,1319,1,0,0,0,1378,1320,1,0,0,0,1378,1321,
        1,0,0,0,1378,1322,1,0,0,0,1378,1323,1,0,0,0,1378,1324,1,0,0,0,1378,
        1325,1,0,0,0,1378,1326,1,0,0,0,1378,1327,1,0,0,0,1378,1328,1,0,0,
        0,1378,1329,1,0,0,0,1378,1330,1,0,0,0,1378,1331,1,0,0,0,1378,1332,
        1,0,0,0,1378,1333,1,0,0,0,1378,1334,1,0,0,0,1378,1335,1,0,0,0,1378,
        1336,1,0,0,0,1378,1337,1,0,0,0,1378,1338,1,0,0,0,1378,1339,1,0,0,
        0,1378,1340,1,0,0,0,1378,1341,1,0,0,0,1378,1342,1,0,0,0,1378,1343,
        1,0,0,0,1378,1344,1,0,0,0,1378,1345,1,0,0,0,1378,1346,1,0,0,0,1378,
        1347,1,0,0,0,1378,1348,1,0,0,0,1378,1349,1,0,0,0,1378,1350,1,0,0,
        0,1378,1351,1,0,0,0,1378,1352,1,0,0,0,1378,1353,1,0,0,0,1378,1354,
        1,0,0,0,1378,1355,1,0,0,0,1378,1356,1,0,0,0,1378,1357,1,0,0,0,1378,
        1358,1,0,0,0,1378,1359,1,0,0,0,1378,1360,1,0,0,0,1378,1361,1,0,0,
        0,1378,1362,1,0,0,0,1378,1363,1,0,0,0,1378,1364,1,0,0,0,1378,1365,
        1,0,0,0,1378,1366,1,0,0,0,1378,1367,1,0,0,0,1378,1368,1,0,0,0,1378,
        1369,1,0,0,0,1378,1370,1,0,0,0,1378,1371,1,0,0,0,1378,1372,1,0,0,
        0,1378,1373,1,0,0,0,1378,1374,1,0,0,0,1378,1375,1,0,0,0,1378,1376,
        1,0,0,0,1378,1377,1,0,0,0,1379,1,1,0,0,0,1380,1381,5,14,0,0,1381,
        1382,5,160,0,0,1382,1384,5,917,0,0,1383,1385,3,1072,536,0,1384,1383,
        1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1388,3,788,394,
        0,1387,1389,3,286,143,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,
        1392,1,0,0,0,1390,1393,3,4,2,0,1391,1393,3,6,3,0,1392,1390,1,0,0,
        0,1392,1391,1,0,0,0,1393,1399,1,0,0,0,1394,1395,5,1208,0,0,1395,
        1398,3,4,2,0,1396,1398,3,6,3,0,1397,1394,1,0,0,0,1397,1396,1,0,0,
        0,1398,1401,1,0,0,0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,3,1,
        0,0,0,1401,1399,1,0,0,0,1402,1409,5,8,0,0,1403,1410,3,290,145,0,
        1404,1407,7,0,0,0,1405,1408,3,288,144,0,1406,1408,3,298,149,0,1407,
        1405,1,0,0,0,1407,1406,1,0,0,0,1408,1410,1,0,0,0,1409,1403,1,0,0,
        0,1409,1404,1,0,0,0,1410,5,1,0,0,0,1411,1422,5,125,0,0,1412,1423,
        3,300,150,0,1413,1420,7,0,0,0,1414,1416,5,457,0,0,1415,1417,3,300,
        150,0,1416,1415,1,0,0,0,1417,1418,1,0,0,0,1418,1416,1,0,0,0,1418,
        1419,1,0,0,0,1419,1421,1,0,0,0,1420,1414,1,0,0,0,1420,1421,1,0,0,
        0,1421,1423,1,0,0,0,1422,1412,1,0,0,0,1422,1413,1,0,0,0,1423,7,1,
        0,0,0,1424,1444,5,14,0,0,1425,1426,5,384,0,0,1426,1427,5,166,0,0,
        1427,1445,3,796,398,0,1428,1429,5,166,0,0,1429,1442,3,796,398,0,
        1430,1439,5,1213,0,0,1431,1436,3,690,345,0,1432,1433,5,1208,0,0,
        1433,1435,3,690,345,0,1434,1432,1,0,0,0,1435,1438,1,0,0,0,1436,1434,
        1,0,0,0,1436,1437,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1439,
        1431,1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,1443,5,1214,
        0,0,1442,1430,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,1425,
        1,0,0,0,1444,1428,1,0,0,0,1445,1455,1,0,0,0,1446,1448,5,144,0,0,
        1447,1449,5,272,0,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1450,
        1,0,0,0,1450,1456,5,862,0,0,1451,1453,5,585,0,0,1452,1454,5,287,
        0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,1456,1,0,0,0,1455,1446,
        1,0,0,0,1455,1451,1,0,0,0,1456,9,1,0,0,0,1457,1458,5,14,0,0,1458,
        1459,5,210,0,0,1459,1460,5,192,0,0,1460,1461,3,792,396,0,1461,1462,
        3,574,287,0,1462,11,1,0,0,0,1463,1464,5,14,0,0,1464,1465,5,178,0,
        0,1465,1466,5,192,0,0,1466,1467,3,792,396,0,1467,1468,3,574,287,
        0,1468,13,1,0,0,0,1469,1477,3,16,8,0,1470,1477,3,18,9,0,1471,1477,
        3,20,10,0,1472,1477,3,22,11,0,1473,1477,3,24,12,0,1474,1477,3,26,
        13,0,1475,1477,3,30,15,0,1476,1469,1,0,0,0,1476,1470,1,0,0,0,1476,
        1471,1,0,0,0,1476,1472,1,0,0,0,1476,1473,1,0,0,0,1476,1474,1,0,0,
        0,1476,1475,1,0,0,0,1477,15,1,0,0,0,1478,1479,5,14,0,0,1479,1480,
        5,406,0,0,1480,1527,3,792,396,0,1481,1486,3,32,16,0,1482,1483,5,
        1208,0,0,1483,1485,3,32,16,0,1484,1482,1,0,0,0,1485,1488,1,0,0,0,
        1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,1528,1,0,0,0,1488,1486,
        1,0,0,0,1489,1528,3,34,17,0,1490,1528,3,364,182,0,1491,1492,5,125,
        0,0,1492,1528,5,271,0,0,1493,1528,3,40,20,0,1494,1495,5,254,0,0,
        1495,1496,5,268,0,0,1496,1498,5,308,0,0,1497,1499,5,192,0,0,1498,
        1497,1,0,0,0,1498,1499,1,0,0,0,1499,1501,1,0,0,0,1500,1502,3,42,
        21,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1528,1,0,0,0,1503,
        1504,5,254,0,0,1504,1528,3,42,21,0,1505,1506,5,164,0,0,1506,1507,
        5,421,0,0,1507,1508,5,480,0,0,1508,1510,5,1224,0,0,1509,1511,7,1,
        0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,1512,1517,
        3,758,379,0,1513,1514,5,1208,0,0,1514,1515,5,1093,0,0,1515,1516,
        5,1224,0,0,1516,1518,3,764,382,0,1517,1513,1,0,0,0,1517,1518,1,0,
        0,0,1518,1523,1,0,0,0,1519,1520,5,1208,0,0,1520,1521,5,474,0,0,1521,
        1522,5,421,0,0,1522,1524,5,480,0,0,1523,1519,1,0,0,0,1523,1524,1,
        0,0,0,1524,1528,1,0,0,0,1525,1526,7,2,0,0,1526,1528,5,638,0,0,1527,
        1481,1,0,0,0,1527,1489,1,0,0,0,1527,1490,1,0,0,0,1527,1491,1,0,0,
        0,1527,1493,1,0,0,0,1527,1494,1,0,0,0,1527,1503,1,0,0,0,1527,1505,
        1,0,0,0,1527,1525,1,0,0,0,1528,17,1,0,0,0,1529,1530,5,14,0,0,1530,
        1531,5,406,0,0,1531,1532,3,792,396,0,1532,1537,3,52,26,0,1533,1534,
        5,1208,0,0,1534,1536,3,52,26,0,1535,1533,1,0,0,0,1536,1539,1,0,0,
        0,1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,19,1,0,0,0,1539,1537,
        1,0,0,0,1540,1542,5,270,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,
        1542,1543,1,0,0,0,1543,1544,5,14,0,0,1544,1545,5,406,0,0,1545,1546,
        3,792,396,0,1546,1556,5,353,0,0,1547,1554,5,474,0,0,1548,1550,5,
        198,0,0,1549,1551,5,206,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,
        1551,1552,1,0,0,0,1552,1555,3,792,396,0,1553,1555,5,115,0,0,1554,
        1548,1,0,0,0,1554,1553,1,0,0,0,1555,1557,1,0,0,0,1556,1547,1,0,0,
        0,1556,1557,1,0,0,0,1557,21,1,0,0,0,1558,1559,5,14,0,0,1559,1560,
        5,406,0,0,1560,1561,3,792,396,0,1561,1563,5,337,0,0,1562,1564,5,
        1079,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,1565,
        1570,5,364,0,0,1566,1567,5,16,0,0,1567,1568,5,884,0,0,1568,1569,
        5,742,0,0,1569,1571,5,187,0,0,1570,1566,1,0,0,0,1570,1571,1,0,0,
        0,1571,23,1,0,0,0,1572,1573,5,14,0,0,1573,1574,5,406,0,0,1574,1575,
        3,792,396,0,1575,1576,5,1208,0,0,1576,1577,3,574,287,0,1577,25,1,
        0,0,0,1578,1579,5,14,0,0,1579,1580,5,160,0,0,1580,1581,5,406,0,0,
        1581,1586,3,792,396,0,1582,1583,5,1208,0,0,1583,1585,3,322,161,0,
        1584,1582,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,
        1,0,0,0,1587,1591,1,0,0,0,1588,1586,1,0,0,0,1589,1590,5,1208,0,0,
        1590,1592,3,332,166,0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,1601,
        1,0,0,0,1593,1598,3,28,14,0,1594,1595,5,1208,0,0,1595,1597,3,28,
        14,0,1596,1594,1,0,0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,
        1599,1,0,0,0,1599,1602,1,0,0,0,1600,1598,1,0,0,0,1601,1593,1,0,0,
        0,1601,1602,1,0,0,0,1602,1619,1,0,0,0,1603,1604,5,1213,0,0,1604,
        1605,3,334,167,0,1605,1615,5,1208,0,0,1606,1616,3,336,168,0,1607,
        1612,3,324,162,0,1608,1609,5,1208,0,0,1609,1611,3,324,162,0,1610,
        1608,1,0,0,0,1611,1614,1,0,0,0,1612,1610,1,0,0,0,1612,1613,1,0,0,
        0,1613,1616,1,0,0,0,1614,1612,1,0,0,0,1615,1606,1,0,0,0,1615,1607,
        1,0,0,0,1616,1617,1,0,0,0,1617,1618,5,1214,0,0,1618,1620,1,0,0,0,
        1619,1603,1,0,0,0,1619,1620,1,0,0,0,1620,1629,1,0,0,0,1621,1626,
        5,453,0,0,1622,1625,3,940,470,0,1623,1625,3,338,169,0,1624,1622,
        1,0,0,0,1624,1623,1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,0,0,1626,
        1627,1,0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,0,0,1629,1621,1,0,0,
        0,1629,1630,1,0,0,0,1630,27,1,0,0,0,1631,1632,5,8,0,0,1632,1644,
        3,36,18,0,1633,1634,5,125,0,0,1634,1636,3,788,394,0,1635,1637,5,
        187,0,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1644,1,0,0,0,1638,
        1639,5,338,0,0,1639,1640,3,788,394,0,1640,1641,7,3,0,0,1641,1642,
        3,788,394,0,1642,1644,1,0,0,0,1643,1631,1,0,0,0,1643,1633,1,0,0,
        0,1643,1638,1,0,0,0,1644,29,1,0,0,0,1645,1646,5,14,0,0,1646,1647,
        5,406,0,0,1647,1648,3,792,396,0,1648,1649,5,426,0,0,1649,1659,5,
        93,0,0,1650,1657,5,474,0,0,1651,1653,5,198,0,0,1652,1654,5,206,0,
        0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1658,
        3,792,396,0,1656,1658,5,115,0,0,1657,1651,1,0,0,0,1657,1656,1,0,
        0,0,1658,1660,1,0,0,0,1659,1650,1,0,0,0,1659,1660,1,0,0,0,1660,31,
        1,0,0,0,1661,1662,5,8,0,0,1662,1683,3,36,18,0,1663,1668,5,254,0,
        0,1664,1666,5,74,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,
        1,0,0,0,1667,1669,3,788,394,0,1668,1665,1,0,0,0,1668,1669,1,0,0,
        0,1669,1670,1,0,0,0,1670,1671,5,59,0,0,1671,1672,5,1213,0,0,1672,
        1673,3,994,497,0,1673,1674,5,1214,0,0,1674,1683,1,0,0,0,1675,1676,
        5,338,0,0,1676,1677,3,788,394,0,1677,1678,7,3,0,0,1678,1679,3,788,
        394,0,1679,1683,1,0,0,0,1680,1681,5,125,0,0,1681,1683,3,38,19,0,
        1682,1661,1,0,0,0,1682,1663,1,0,0,0,1682,1675,1,0,0,0,1682,1680,
        1,0,0,0,1683,33,1,0,0,0,1684,1724,3,582,291,0,1685,1686,5,474,0,
        0,1686,1687,5,211,0,0,1687,1688,5,406,0,0,1688,1689,5,1224,0,0,1689,
        1724,3,792,396,0,1690,1724,3,584,292,0,1691,1692,5,286,0,0,1692,
        1693,5,71,0,0,1693,1694,7,4,0,0,1694,1724,5,364,0,0,1695,1697,5,
        268,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,
        1724,5,228,0,0,1699,1705,5,268,0,0,1700,1705,5,126,0,0,1701,1705,
        5,224,0,0,1702,1703,5,272,0,0,1703,1705,5,224,0,0,1704,1699,1,0,
        0,0,1704,1700,1,0,0,0,1704,1701,1,0,0,0,1704,1702,1,0,0,0,1704,1705,
        1,0,0,0,1705,1706,1,0,0,0,1706,1707,5,11,0,0,1707,1724,5,211,0,0,
        1708,1709,5,571,0,0,1709,1710,5,1224,0,0,1710,1724,7,5,0,0,1711,
        1712,5,163,0,0,1712,1713,5,1224,0,0,1713,1715,3,764,382,0,1714,1716,
        5,300,0,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,1724,1,0,0,0,
        1717,1718,3,344,172,0,1718,1719,5,189,0,0,1719,1724,1,0,0,0,1720,
        1724,3,342,171,0,1721,1724,3,346,173,0,1722,1724,3,50,25,0,1723,
        1684,1,0,0,0,1723,1685,1,0,0,0,1723,1690,1,0,0,0,1723,1691,1,0,0,
        0,1723,1696,1,0,0,0,1723,1704,1,0,0,0,1723,1708,1,0,0,0,1723,1711,
        1,0,0,0,1723,1717,1,0,0,0,1723,1720,1,0,0,0,1723,1721,1,0,0,0,1723,
        1722,1,0,0,0,1724,35,1,0,0,0,1725,1738,3,46,23,0,1726,1727,5,1213,
        0,0,1727,1732,3,46,23,0,1728,1729,5,1208,0,0,1729,1731,3,46,23,0,
        1730,1728,1,0,0,0,1731,1734,1,0,0,0,1732,1730,1,0,0,0,1732,1733,
        1,0,0,0,1733,1735,1,0,0,0,1734,1732,1,0,0,0,1735,1736,5,1214,0,0,
        1736,1738,1,0,0,0,1737,1725,1,0,0,0,1737,1726,1,0,0,0,1738,1741,
        1,0,0,0,1739,1740,5,206,0,0,1740,1742,3,788,394,0,1741,1739,1,0,
        0,0,1741,1742,1,0,0,0,1742,1799,1,0,0,0,1743,1745,7,6,0,0,1744,1743,
        1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1749,5,1213,0,0,
        1747,1750,3,788,394,0,1748,1750,3,46,23,0,1749,1747,1,0,0,0,1749,
        1748,1,0,0,0,1750,1758,1,0,0,0,1751,1754,5,1208,0,0,1752,1755,3,
        788,394,0,1753,1755,3,46,23,0,1754,1752,1,0,0,0,1754,1753,1,0,0,
        0,1755,1757,1,0,0,0,1756,1751,1,0,0,0,1757,1760,1,0,0,0,1758,1756,
        1,0,0,0,1758,1759,1,0,0,0,1759,1761,1,0,0,0,1760,1758,1,0,0,0,1761,
        1767,5,1214,0,0,1762,1764,5,268,0,0,1763,1762,1,0,0,0,1763,1764,
        1,0,0,0,1764,1765,1,0,0,0,1765,1766,5,543,0,0,1766,1768,5,72,0,0,
        1767,1763,1,0,0,0,1767,1768,1,0,0,0,1768,1799,1,0,0,0,1769,1770,
        5,1213,0,0,1770,1771,3,788,394,0,1771,1773,5,1214,0,0,1772,1774,
        5,268,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,
        1775,1776,5,543,0,0,1776,1777,5,72,0,0,1777,1799,1,0,0,0,1778,1779,
        5,853,0,0,1779,1780,5,159,0,0,1780,1781,3,788,394,0,1781,1782,5,
        1213,0,0,1782,1783,3,788,394,0,1783,1784,5,1208,0,0,1784,1785,3,
        788,394,0,1785,1786,5,1214,0,0,1786,1799,1,0,0,0,1787,1799,3,366,
        183,0,1788,1793,3,788,394,0,1789,1790,5,1208,0,0,1790,1792,3,788,
        394,0,1791,1789,1,0,0,0,1792,1795,1,0,0,0,1793,1791,1,0,0,0,1793,
        1794,1,0,0,0,1794,1796,1,0,0,0,1795,1793,1,0,0,0,1796,1797,5,74,
        0,0,1797,1799,1,0,0,0,1798,1737,1,0,0,0,1798,1744,1,0,0,0,1798,1769,
        1,0,0,0,1798,1778,1,0,0,0,1798,1787,1,0,0,0,1798,1788,1,0,0,0,1799,
        37,1,0,0,0,1800,1801,5,853,0,0,1801,1802,5,159,0,0,1802,1847,3,788,
        394,0,1803,1805,3,788,394,0,1804,1806,5,187,0,0,1805,1804,1,0,0,
        0,1805,1806,1,0,0,0,1806,1847,1,0,0,0,1807,1808,5,74,0,0,1808,1847,
        3,788,394,0,1809,1810,5,74,0,0,1810,1812,3,788,394,0,1811,1809,1,
        0,0,0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,1814,5,160,0,0,1814,
        1815,5,212,0,0,1815,1816,5,1213,0,0,1816,1821,3,788,394,0,1817,1818,
        5,1208,0,0,1818,1820,3,788,394,0,1819,1817,1,0,0,0,1820,1823,1,0,
        0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,1824,1,0,0,0,1823,1821,
        1,0,0,0,1824,1825,5,1214,0,0,1825,1826,3,368,184,0,1826,1847,1,0,
        0,0,1827,1829,5,74,0,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,
        1830,1,0,0,0,1830,1832,3,788,394,0,1831,1828,1,0,0,0,1831,1832,1,
        0,0,0,1832,1833,1,0,0,0,1833,1847,5,59,0,0,1834,1835,5,191,0,0,1835,
        1847,5,325,0,0,1836,1841,3,788,394,0,1837,1838,5,1208,0,0,1838,1840,
        3,788,394,0,1839,1837,1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,0,0,
        0,1841,1842,1,0,0,0,1842,1844,1,0,0,0,1843,1841,1,0,0,0,1844,1845,
        5,74,0,0,1845,1847,1,0,0,0,1846,1800,1,0,0,0,1846,1803,1,0,0,0,1846,
        1807,1,0,0,0,1846,1811,1,0,0,0,1846,1831,1,0,0,0,1846,1834,1,0,0,
        0,1846,1836,1,0,0,0,1847,39,1,0,0,0,1848,1853,5,254,0,0,1849,1851,
        5,272,0,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1852,1,0,0,0,
        1852,1854,5,448,0,0,1853,1850,1,0,0,0,1853,1854,1,0,0,0,1854,1855,
        1,0,0,0,1855,1857,5,308,0,0,1856,1858,5,15,0,0,1857,1856,1,0,0,0,
        1857,1858,1,0,0,0,1858,1860,1,0,0,0,1859,1861,5,192,0,0,1860,1859,
        1,0,0,0,1860,1861,1,0,0,0,1861,1865,1,0,0,0,1862,1866,3,788,394,
        0,1863,1864,5,272,0,0,1864,1866,5,262,0,0,1865,1862,1,0,0,0,1865,
        1863,1,0,0,0,1865,1866,1,0,0,0,1866,1878,1,0,0,0,1867,1868,5,1213,
        0,0,1868,1873,3,788,394,0,1869,1870,5,1208,0,0,1870,1872,3,788,394,
        0,1871,1869,1,0,0,0,1872,1875,1,0,0,0,1873,1871,1,0,0,0,1873,1874,
        1,0,0,0,1874,1876,1,0,0,0,1875,1873,1,0,0,0,1876,1877,5,1214,0,0,
        1877,1879,1,0,0,0,1878,1867,1,0,0,0,1878,1879,1,0,0,0,1879,1881,
        1,0,0,0,1880,1882,3,42,21,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,
        1882,41,1,0,0,0,1883,1884,5,840,0,0,1884,1897,5,42,0,0,1885,1898,
        3,370,185,0,1886,1887,5,1213,0,0,1887,1892,3,370,185,0,1888,1889,
        5,1208,0,0,1889,1891,3,370,185,0,1890,1888,1,0,0,0,1891,1894,1,0,
        0,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,1895,1,0,0,0,1894,1892,
        1,0,0,0,1895,1896,5,1214,0,0,1896,1898,1,0,0,0,1897,1885,1,0,0,0,
        1897,1886,1,0,0,0,1898,1908,1,0,0,0,1899,1904,3,44,22,0,1900,1901,
        5,1208,0,0,1901,1903,3,44,22,0,1902,1900,1,0,0,0,1903,1906,1,0,0,
        0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1908,1,0,0,0,1906,1904,
        1,0,0,0,1907,1883,1,0,0,0,1907,1899,1,0,0,0,1908,1918,1,0,0,0,1909,
        1916,5,474,0,0,1910,1912,5,198,0,0,1911,1913,5,206,0,0,1912,1911,
        1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1917,3,792,396,
        0,1915,1917,5,115,0,0,1916,1910,1,0,0,0,1916,1915,1,0,0,0,1917,1919,
        1,0,0,0,1918,1909,1,0,0,0,1918,1919,1,0,0,0,1919,1923,1,0,0,0,1920,
        1921,5,272,0,0,1921,1923,5,842,0,0,1922,1907,1,0,0,0,1922,1920,1,
        0,0,0,1923,43,1,0,0,0,1924,1925,5,125,0,0,1925,1928,3,48,24,0,1926,
        1927,5,8,0,0,1927,1929,3,48,24,0,1928,1926,1,0,0,0,1928,1929,1,0,
        0,0,1929,1933,1,0,0,0,1930,1931,5,8,0,0,1931,1933,3,48,24,0,1932,
        1924,1,0,0,0,1932,1930,1,0,0,0,1933,45,1,0,0,0,1934,1959,3,788,394,
        0,1935,1960,3,688,344,0,1936,1938,3,688,344,0,1937,1939,3,350,175,
        0,1938,1937,1,0,0,0,1939,1940,1,0,0,0,1940,1938,1,0,0,0,1940,1941,
        1,0,0,0,1941,1960,1,0,0,0,1942,1944,3,350,175,0,1943,1942,1,0,0,
        0,1944,1945,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,1947,
        1,0,0,0,1947,1951,3,688,344,0,1948,1950,3,350,175,0,1949,1948,1,
        0,0,0,1950,1953,1,0,0,0,1951,1949,1,0,0,0,1951,1952,1,0,0,0,1952,
        1960,1,0,0,0,1953,1951,1,0,0,0,1954,1956,3,350,175,0,1955,1954,1,
        0,0,0,1956,1957,1,0,0,0,1957,1955,1,0,0,0,1957,1958,1,0,0,0,1958,
        1960,1,0,0,0,1959,1935,1,0,0,0,1959,1936,1,0,0,0,1959,1943,1,0,0,
        0,1959,1955,1,0,0,0,1960,47,1,0,0,0,1961,1991,7,7,0,0,1962,1963,
        5,35,0,0,1963,1968,3,1096,548,0,1964,1965,5,1208,0,0,1965,1967,3,
        1096,548,0,1966,1964,1,0,0,0,1967,1970,1,0,0,0,1968,1966,1,0,0,0,
        1968,1969,1,0,0,0,1969,1980,1,0,0,0,1970,1968,1,0,0,0,1971,1972,
        5,1208,0,0,1972,1973,5,268,0,0,1973,1976,5,873,0,0,1974,1975,7,8,
        0,0,1975,1977,5,1016,0,0,1976,1974,1,0,0,0,1976,1977,1,0,0,0,1977,
        1981,1,0,0,0,1978,1979,5,1208,0,0,1979,1981,5,1016,0,0,1980,1971,
        1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,1992,1,0,0,0,1982,
        1983,5,268,0,0,1983,1986,5,873,0,0,1984,1985,7,8,0,0,1985,1987,5,
        1016,0,0,1986,1984,1,0,0,0,1986,1987,1,0,0,0,1987,1992,1,0,0,0,1988,
        1992,5,1016,0,0,1989,1990,5,471,0,0,1990,1992,3,994,497,0,1991,1962,
        1,0,0,0,1991,1982,1,0,0,0,1991,1988,1,0,0,0,1991,1989,1,0,0,0,1992,
        49,1,0,0,0,1993,1996,3,676,338,0,1994,1995,5,159,0,0,1995,1997,7,
        9,0,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,2002,1,0,0,0,1998,
        1999,5,457,0,0,1999,2000,5,1080,0,0,2000,2001,5,252,0,0,2001,2003,
        7,10,0,0,2002,1998,1,0,0,0,2002,2003,1,0,0,0,2003,51,1,0,0,0,2004,
        2025,5,8,0,0,2005,2006,7,6,0,0,2006,2007,5,1213,0,0,2007,2008,3,
        788,394,0,2008,2014,5,1214,0,0,2009,2011,5,268,0,0,2010,2009,1,0,
        0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2013,5,543,0,0,2013,
        2015,5,72,0,0,2014,2010,1,0,0,0,2014,2015,1,0,0,0,2015,2026,1,0,
        0,0,2016,2017,5,1213,0,0,2017,2018,3,788,394,0,2018,2020,5,1214,
        0,0,2019,2021,5,268,0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,
        2022,1,0,0,0,2022,2023,5,543,0,0,2023,2024,5,72,0,0,2024,2026,1,
        0,0,0,2025,2005,1,0,0,0,2025,2016,1,0,0,0,2026,53,1,0,0,0,2027,2028,
        5,14,0,0,2028,2030,5,437,0,0,2029,2031,3,718,359,0,2030,2029,1,0,
        0,0,2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2043,3,824,412,0,2033,
        2044,3,56,28,0,2034,2044,3,58,29,0,2035,2044,3,60,30,0,2036,2044,
        3,62,31,0,2037,2044,3,64,32,0,2038,2044,3,66,33,0,2039,2041,5,585,
        0,0,2040,2042,5,287,0,0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,
        2044,1,0,0,0,2043,2033,1,0,0,0,2043,2034,1,0,0,0,2043,2035,1,0,0,
        0,2043,2036,1,0,0,0,2043,2037,1,0,0,0,2043,2038,1,0,0,0,2043,2039,
        1,0,0,0,2044,55,1,0,0,0,2045,2046,5,8,0,0,2046,2047,5,538,0,0,2047,
        2052,3,390,195,0,2048,2049,5,1208,0,0,2049,2051,3,390,195,0,2050,
        2048,1,0,0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,
        0,2053,57,1,0,0,0,2054,2052,1,0,0,0,2055,2057,5,8,0,0,2056,2058,
        7,11,0,0,2057,2056,1,0,0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,2059,
        2060,5,243,0,0,2060,2065,3,68,34,0,2061,2062,5,1208,0,0,2062,2064,
        3,68,34,0,2063,2061,1,0,0,0,2064,2067,1,0,0,0,2065,2063,1,0,0,0,
        2065,2066,1,0,0,0,2066,59,1,0,0,0,2067,2065,1,0,0,0,2068,2069,5,
        8,0,0,2069,2070,5,384,0,0,2070,2071,5,243,0,0,2071,2076,3,70,35,
        0,2072,2073,5,1208,0,0,2073,2075,3,70,35,0,2074,2072,1,0,0,0,2075,
        2078,1,0,0,0,2076,2074,1,0,0,0,2076,2077,1,0,0,0,2077,61,1,0,0,0,
        2078,2076,1,0,0,0,2079,2080,5,125,0,0,2080,2081,5,538,0,0,2081,2086,
        3,826,413,0,2082,2083,5,1208,0,0,2083,2085,3,826,413,0,2084,2082,
        1,0,0,0,2085,2088,1,0,0,0,2086,2084,1,0,0,0,2086,2087,1,0,0,0,2087,
        63,1,0,0,0,2088,2086,1,0,0,0,2089,2091,5,125,0,0,2090,2092,7,11,
        0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,1,0,0,0,2093,2095,
        5,243,0,0,2094,2096,3,718,359,0,2095,2094,1,0,0,0,2095,2096,1,0,
        0,0,2096,2097,1,0,0,0,2097,2105,3,828,414,0,2098,2100,5,1208,0,0,
        2099,2101,3,718,359,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,2102,
        1,0,0,0,2102,2104,3,828,414,0,2103,2098,1,0,0,0,2104,2107,1,0,0,
        0,2105,2103,1,0,0,0,2105,2106,1,0,0,0,2106,65,1,0,0,0,2107,2105,
        1,0,0,0,2108,2109,5,125,0,0,2109,2110,5,384,0,0,2110,2112,5,243,
        0,0,2111,2113,3,718,359,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,
        2114,1,0,0,0,2114,2122,3,828,414,0,2115,2117,5,1208,0,0,2116,2118,
        3,718,359,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,0,
        0,2119,2121,3,828,414,0,2120,2115,1,0,0,0,2121,2124,1,0,0,0,2122,
        2120,1,0,0,0,2122,2123,1,0,0,0,2123,67,1,0,0,0,2124,2122,1,0,0,0,
        2125,2127,3,718,359,0,2126,2125,1,0,0,0,2126,2127,1,0,0,0,2127,2128,
        1,0,0,0,2128,2129,3,828,414,0,2129,2138,5,1213,0,0,2130,2135,3,688,
        344,0,2131,2132,5,1208,0,0,2132,2134,3,688,344,0,2133,2131,1,0,0,
        0,2134,2137,1,0,0,0,2135,2133,1,0,0,0,2135,2136,1,0,0,0,2136,2139,
        1,0,0,0,2137,2135,1,0,0,0,2138,2130,1,0,0,0,2138,2139,1,0,0,0,2139,
        2140,1,0,0,0,2140,2141,5,1214,0,0,2141,2142,5,352,0,0,2142,2146,
        3,398,199,0,2143,2144,5,50,0,0,2144,2145,5,164,0,0,2145,2147,3,688,
        344,0,2146,2143,1,0,0,0,2146,2147,1,0,0,0,2147,2153,1,0,0,0,2148,
        2150,5,384,0,0,2149,2151,3,718,359,0,2150,2149,1,0,0,0,2150,2151,
        1,0,0,0,2151,2152,1,0,0,0,2152,2154,3,828,414,0,2153,2148,1,0,0,
        0,2153,2154,1,0,0,0,2154,2179,1,0,0,0,2155,2157,3,402,201,0,2156,
        2155,1,0,0,0,2157,2160,1,0,0,0,2158,2156,1,0,0,0,2158,2159,1,0,0,
        0,2159,2161,1,0,0,0,2160,2158,1,0,0,0,2161,2163,3,400,200,0,2162,
        2164,3,402,201,0,2163,2162,1,0,0,0,2164,2165,1,0,0,0,2165,2163,1,
        0,0,0,2165,2166,1,0,0,0,2166,2180,1,0,0,0,2167,2169,3,402,201,0,
        2168,2167,1,0,0,0,2169,2170,1,0,0,0,2170,2168,1,0,0,0,2170,2171,
        1,0,0,0,2171,2172,1,0,0,0,2172,2176,3,400,200,0,2173,2175,3,402,
        201,0,2174,2173,1,0,0,0,2175,2178,1,0,0,0,2176,2174,1,0,0,0,2176,
        2177,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2179,2158,1,0,0,
        0,2179,2168,1,0,0,0,2180,69,1,0,0,0,2181,2183,3,718,359,0,2182,2181,
        1,0,0,0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,2196,3,828,414,
        0,2185,2186,5,1213,0,0,2186,2191,3,688,344,0,2187,2188,5,1208,0,
        0,2188,2190,3,688,344,0,2189,2187,1,0,0,0,2190,2193,1,0,0,0,2191,
        2189,1,0,0,0,2191,2192,1,0,0,0,2192,2194,1,0,0,0,2193,2191,1,0,0,
        0,2194,2195,5,1214,0,0,2195,2197,1,0,0,0,2196,2185,1,0,0,0,2196,
        2197,1,0,0,0,2197,2198,1,0,0,0,2198,2200,5,159,0,0,2199,2201,3,718,
        359,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,
        2203,3,824,412,0,2203,71,1,0,0,0,2204,2206,5,34,0,0,2205,2207,5,
        587,0,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,
        2209,5,716,0,0,2209,2210,5,223,0,0,2210,2211,5,286,0,0,2211,2216,
        3,792,396,0,2212,2213,5,1208,0,0,2213,2215,3,792,396,0,2214,2212,
        1,0,0,0,2215,2218,1,0,0,0,2216,2214,1,0,0,0,2216,2217,1,0,0,0,2217,
        2219,1,0,0,0,2218,2216,1,0,0,0,2219,2220,5,457,0,0,2220,2221,5,870,
        0,0,2221,2227,3,758,379,0,2222,2224,5,190,0,0,2223,2222,1,0,0,0,
        2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2226,7,12,0,0,2226,2228,
        5,371,0,0,2227,2223,1,0,0,0,2227,2228,1,0,0,0,2228,73,1,0,0,0,2229,
        2230,5,34,0,0,2230,2232,5,229,0,0,2231,2233,5,628,0,0,2232,2231,
        1,0,0,0,2232,2233,1,0,0,0,2233,2236,1,0,0,0,2234,2235,5,474,0,0,
        2235,2237,5,982,0,0,2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,2238,
        1,0,0,0,2238,2239,5,286,0,0,2239,2243,3,78,39,0,2240,2241,5,159,
        0,0,2241,2242,5,74,0,0,2242,2244,3,790,395,0,2243,2240,1,0,0,0,2243,
        2244,1,0,0,0,2244,2254,1,0,0,0,2245,2255,5,13,0,0,2246,2251,3,76,
        38,0,2247,2248,5,1208,0,0,2248,2250,3,76,38,0,2249,2247,1,0,0,0,
        2250,2253,1,0,0,0,2251,2249,1,0,0,0,2251,2252,1,0,0,0,2252,2255,
        1,0,0,0,2253,2251,1,0,0,0,2254,2245,1,0,0,0,2254,2246,1,0,0,0,2255,
        2259,1,0,0,0,2256,2257,5,159,0,0,2257,2258,5,74,0,0,2258,2260,3,
        790,395,0,2259,2256,1,0,0,0,2259,2260,1,0,0,0,2260,2270,1,0,0,0,
        2261,2262,5,42,0,0,2262,2267,3,802,401,0,2263,2264,5,1208,0,0,2264,
        2266,3,802,401,0,2265,2263,1,0,0,0,2266,2269,1,0,0,0,2267,2265,1,
        0,0,0,2267,2268,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2270,
        2261,1,0,0,0,2270,2271,1,0,0,0,2271,2281,1,0,0,0,2272,2273,5,286,
        0,0,2273,2278,3,80,40,0,2274,2275,5,1208,0,0,2275,2277,3,80,40,0,
        2276,2274,1,0,0,0,2277,2280,1,0,0,0,2278,2276,1,0,0,0,2278,2279,
        1,0,0,0,2279,2282,1,0,0,0,2280,2278,1,0,0,0,2281,2272,1,0,0,0,2281,
        2282,1,0,0,0,2282,75,1,0,0,0,2283,2284,5,14,0,0,2284,2285,5,151,
        0,0,2285,2386,5,310,0,0,2286,2287,5,14,0,0,2287,2386,5,166,0,0,2288,
        2289,5,14,0,0,2289,2386,5,310,0,0,2290,2386,5,60,0,0,2291,2292,5,
        86,0,0,2292,2386,5,29,0,0,2293,2294,5,86,0,0,2294,2386,5,102,0,0,
        2295,2296,5,86,0,0,2296,2297,5,151,0,0,2297,2386,5,310,0,0,2298,
        2299,5,86,0,0,2299,2386,5,166,0,0,2300,2301,5,86,0,0,2301,2302,5,
        688,0,0,2302,2386,5,372,0,0,2303,2304,5,86,0,0,2304,2386,5,235,0,
        0,2305,2306,5,86,0,0,2306,2386,5,310,0,0,2307,2308,5,86,0,0,2308,
        2386,5,311,0,0,2309,2310,5,86,0,0,2310,2386,5,357,0,0,2311,2312,
        5,86,0,0,2312,2386,5,406,0,0,2313,2314,5,86,0,0,2314,2386,5,435,
        0,0,2315,2316,5,86,0,0,2316,2386,5,456,0,0,2317,2318,5,86,0,0,2318,
        2386,5,468,0,0,2319,2386,5,102,0,0,2320,2386,5,125,0,0,2321,2322,
        5,125,0,0,2322,2386,5,29,0,0,2323,2324,5,125,0,0,2324,2386,5,102,
        0,0,2325,2326,5,125,0,0,2326,2386,5,166,0,0,2327,2328,5,125,0,0,
        2328,2329,5,688,0,0,2329,2386,5,372,0,0,2330,2331,5,125,0,0,2331,
        2386,5,235,0,0,2332,2333,5,125,0,0,2333,2386,5,310,0,0,2334,2335,
        5,125,0,0,2335,2386,5,311,0,0,2336,2337,5,125,0,0,2337,2386,5,357,
        0,0,2338,2339,5,125,0,0,2339,2386,5,406,0,0,2340,2341,5,125,0,0,
        2341,2386,5,435,0,0,2342,2343,5,125,0,0,2343,2386,5,456,0,0,2344,
        2345,5,125,0,0,2345,2386,5,468,0,0,2346,2386,5,127,0,0,2347,2386,
        5,144,0,0,2348,2349,5,144,0,0,2349,2386,5,166,0,0,2350,2351,5,144,
        0,0,2351,2386,5,310,0,0,2352,2386,5,172,0,0,2353,2386,5,192,0,0,
        2354,2386,5,235,0,0,2355,2386,5,310,0,0,2356,2386,5,325,0,0,2357,
        2386,5,346,0,0,2358,2359,5,358,0,0,2359,2386,5,102,0,0,2360,2361,
        5,359,0,0,2361,2386,5,102,0,0,2362,2386,5,406,0,0,2363,2386,5,435,
        0,0,2364,2386,5,441,0,0,2365,2386,5,442,0,0,2366,2386,5,443,0,0,
        2367,2386,5,456,0,0,2368,2386,5,468,0,0,2369,2386,5,115,0,0,2370,
        2386,5,198,0,0,2371,2372,5,297,0,0,2372,2386,5,115,0,0,2373,2374,
        5,297,0,0,2374,2386,5,127,0,0,2375,2376,5,297,0,0,2376,2386,5,198,
        0,0,2377,2378,5,297,0,0,2378,2386,5,346,0,0,2379,2380,5,297,0,0,
        2380,2386,5,370,0,0,2381,2382,5,297,0,0,2382,2386,5,453,0,0,2383,
        2386,5,370,0,0,2384,2386,5,453,0,0,2385,2283,1,0,0,0,2385,2286,1,
        0,0,0,2385,2288,1,0,0,0,2385,2290,1,0,0,0,2385,2291,1,0,0,0,2385,
        2293,1,0,0,0,2385,2295,1,0,0,0,2385,2298,1,0,0,0,2385,2300,1,0,0,
        0,2385,2303,1,0,0,0,2385,2305,1,0,0,0,2385,2307,1,0,0,0,2385,2309,
        1,0,0,0,2385,2311,1,0,0,0,2385,2313,1,0,0,0,2385,2315,1,0,0,0,2385,
        2317,1,0,0,0,2385,2319,1,0,0,0,2385,2320,1,0,0,0,2385,2321,1,0,0,
        0,2385,2323,1,0,0,0,2385,2325,1,0,0,0,2385,2327,1,0,0,0,2385,2330,
        1,0,0,0,2385,2332,1,0,0,0,2385,2334,1,0,0,0,2385,2336,1,0,0,0,2385,
        2338,1,0,0,0,2385,2340,1,0,0,0,2385,2342,1,0,0,0,2385,2344,1,0,0,
        0,2385,2346,1,0,0,0,2385,2347,1,0,0,0,2385,2348,1,0,0,0,2385,2350,
        1,0,0,0,2385,2352,1,0,0,0,2385,2353,1,0,0,0,2385,2354,1,0,0,0,2385,
        2355,1,0,0,0,2385,2356,1,0,0,0,2385,2357,1,0,0,0,2385,2358,1,0,0,
        0,2385,2360,1,0,0,0,2385,2362,1,0,0,0,2385,2363,1,0,0,0,2385,2364,
        1,0,0,0,2385,2365,1,0,0,0,2385,2366,1,0,0,0,2385,2367,1,0,0,0,2385,
        2368,1,0,0,0,2385,2369,1,0,0,0,2385,2370,1,0,0,0,2385,2371,1,0,0,
        0,2385,2373,1,0,0,0,2385,2375,1,0,0,0,2385,2377,1,0,0,0,2385,2379,
        1,0,0,0,2385,2381,1,0,0,0,2385,2383,1,0,0,0,2385,2384,1,0,0,0,2386,
        77,1,0,0,0,2387,2394,5,156,0,0,2388,2394,5,731,0,0,2389,2390,5,156,
        0,0,2390,2391,5,16,0,0,2391,2394,5,731,0,0,2392,2394,5,129,0,0,2393,
        2387,1,0,0,0,2393,2388,1,0,0,0,2393,2389,1,0,0,0,2393,2392,1,0,0,
        0,2394,79,1,0,0,0,2395,2396,5,29,0,0,2396,2417,3,790,395,0,2397,
        2398,5,102,0,0,2398,2417,3,800,400,0,2399,2400,5,456,0,0,2400,2417,
        3,802,401,0,2401,2402,5,406,0,0,2402,2417,3,792,396,0,2403,2404,
        5,468,0,0,2404,2417,3,792,396,0,2405,2406,5,235,0,0,2406,2417,3,
        798,399,0,2407,2408,5,310,0,0,2408,2417,3,794,397,0,2409,2410,5,
        166,0,0,2410,2417,3,796,398,0,2411,2412,5,166,0,0,2412,2413,5,755,
        0,0,2413,2417,3,790,395,0,2414,2415,5,437,0,0,2415,2417,3,708,354,
        0,2416,2395,1,0,0,0,2416,2397,1,0,0,0,2416,2399,1,0,0,0,2416,2401,
        1,0,0,0,2416,2403,1,0,0,0,2416,2405,1,0,0,0,2416,2407,1,0,0,0,2416,
        2409,1,0,0,0,2416,2411,1,0,0,0,2416,2414,1,0,0,0,2417,81,1,0,0,0,
        2418,2419,5,34,0,0,2419,2420,5,869,0,0,2420,2424,5,563,0,0,2421,
        2422,5,159,0,0,2422,2423,5,192,0,0,2423,2425,5,504,0,0,2424,2421,
        1,0,0,0,2424,2425,1,0,0,0,2425,2444,1,0,0,0,2426,2432,5,474,0,0,
        2427,2433,5,1022,0,0,2428,2430,5,632,0,0,2429,2428,1,0,0,0,2429,
        2430,1,0,0,0,2430,2431,1,0,0,0,2431,2433,5,940,0,0,2432,2427,1,0,
        0,0,2432,2429,1,0,0,0,2433,2442,1,0,0,0,2434,2440,5,1208,0,0,2435,
        2441,5,1022,0,0,2436,2438,5,632,0,0,2437,2436,1,0,0,0,2437,2438,
        1,0,0,0,2438,2439,1,0,0,0,2439,2441,5,940,0,0,2440,2435,1,0,0,0,
        2440,2437,1,0,0,0,2441,2443,1,0,0,0,2442,2434,1,0,0,0,2442,2443,
        1,0,0,0,2443,2445,1,0,0,0,2444,2426,1,0,0,0,2444,2445,1,0,0,0,2445,
        2448,1,0,0,0,2446,2447,5,206,0,0,2447,2449,3,800,400,0,2448,2446,
        1,0,0,0,2448,2449,1,0,0,0,2449,2450,1,0,0,0,2450,2451,5,20,0,0,2451,
        2452,5,1040,0,0,2452,2453,3,788,394,0,2453,83,1,0,0,0,2454,2455,
        5,34,0,0,2455,2456,5,869,0,0,2456,2466,5,229,0,0,2457,2458,5,474,
        0,0,2458,2463,3,86,43,0,2459,2460,5,1208,0,0,2460,2462,3,86,43,0,
        2461,2459,1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,
        1,0,0,0,2464,2467,1,0,0,0,2465,2463,1,0,0,0,2466,2457,1,0,0,0,2466,
        2467,1,0,0,0,2467,2471,1,0,0,0,2468,2469,5,252,0,0,2469,2470,5,1224,
        0,0,2470,2472,3,764,382,0,2471,2468,1,0,0,0,2471,2472,1,0,0,0,2472,
        2479,1,0,0,0,2473,2474,5,221,0,0,2474,2477,3,88,44,0,2475,2476,5,
        16,0,0,2476,2478,3,88,44,0,2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,
        2480,1,0,0,0,2479,2473,1,0,0,0,2479,2480,1,0,0,0,2480,2481,1,0,0,
        0,2481,2482,5,286,0,0,2482,2483,3,90,45,0,2483,85,1,0,0,0,2484,2510,
        5,13,0,0,2485,2510,5,150,0,0,2486,2487,5,226,0,0,2487,2488,5,1224,
        0,0,2488,2510,3,764,382,0,2489,2510,5,269,0,0,2490,2491,5,268,0,
        0,2491,2493,5,579,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,0,2493,2494,
        1,0,0,0,2494,2510,5,280,0,0,2495,2510,5,838,0,0,2496,2510,5,667,
        0,0,2497,2510,5,386,0,0,2498,2500,5,632,0,0,2499,2498,1,0,0,0,2499,
        2500,1,0,0,0,2500,2501,1,0,0,0,2501,2510,5,940,0,0,2502,2510,5,398,
        0,0,2503,2510,5,1019,0,0,2504,2510,5,1020,0,0,2505,2507,5,1022,0,
        0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2508,1,0,0,0,2508,2510,
        5,477,0,0,2509,2484,1,0,0,0,2509,2485,1,0,0,0,2509,2486,1,0,0,0,
        2509,2489,1,0,0,0,2509,2492,1,0,0,0,2509,2495,1,0,0,0,2509,2496,
        1,0,0,0,2509,2497,1,0,0,0,2509,2499,1,0,0,0,2509,2502,1,0,0,0,2509,
        2503,1,0,0,0,2509,2504,1,0,0,0,2509,2506,1,0,0,0,2510,87,1,0,0,0,
        2511,2512,5,388,0,0,2512,2513,5,1224,0,0,2513,2531,3,764,382,0,2514,
        2515,5,404,0,0,2515,2516,5,1224,0,0,2516,2517,3,764,382,0,2517,2518,
        5,1208,0,0,2518,2519,3,764,382,0,2519,2520,5,1208,0,0,2520,2521,
        3,764,382,0,2521,2526,1,0,0,0,2522,2523,5,420,0,0,2523,2524,5,1224,
        0,0,2524,2526,3,764,382,0,2525,2514,1,0,0,0,2525,2522,1,0,0,0,2526,
        2528,1,0,0,0,2527,2529,7,13,0,0,2528,2527,1,0,0,0,2528,2529,1,0,
        0,0,2529,2531,1,0,0,0,2530,2511,1,0,0,0,2530,2525,1,0,0,0,2531,89,
        1,0,0,0,2532,2536,3,92,46,0,2533,2536,3,94,47,0,2534,2536,3,96,48,
        0,2535,2532,1,0,0,0,2535,2533,1,0,0,0,2535,2534,1,0,0,0,2536,91,
        1,0,0,0,2537,2539,5,13,0,0,2538,2540,3,98,49,0,2539,2538,1,0,0,0,
        2539,2540,1,0,0,0,2540,93,1,0,0,0,2541,2546,3,802,401,0,2542,2543,
        5,1208,0,0,2543,2545,3,802,401,0,2544,2542,1,0,0,0,2545,2548,1,0,
        0,0,2546,2544,1,0,0,0,2546,2547,1,0,0,0,2547,2550,1,0,0,0,2548,2546,
        1,0,0,0,2549,2551,3,98,49,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,
        2551,95,1,0,0,0,2552,2553,5,510,0,0,2553,2566,5,1224,0,0,2554,2567,
        3,758,379,0,2555,2556,5,1213,0,0,2556,2561,3,758,379,0,2557,2558,
        5,1208,0,0,2558,2560,3,758,379,0,2559,2557,1,0,0,0,2560,2563,1,0,
        0,0,2561,2559,1,0,0,0,2561,2562,1,0,0,0,2562,2564,1,0,0,0,2563,2561,
        1,0,0,0,2564,2565,5,1214,0,0,2565,2567,1,0,0,0,2566,2554,1,0,0,0,
        2566,2555,1,0,0,0,2567,97,1,0,0,0,2568,2569,5,5,0,0,2569,2582,5,
        1224,0,0,2570,2583,3,758,379,0,2571,2572,5,1213,0,0,2572,2577,3,
        758,379,0,2573,2574,5,1208,0,0,2574,2576,3,758,379,0,2575,2573,1,
        0,0,0,2576,2579,1,0,0,0,2577,2575,1,0,0,0,2577,2578,1,0,0,0,2578,
        2580,1,0,0,0,2579,2577,1,0,0,0,2580,2581,5,1214,0,0,2581,2583,1,
        0,0,0,2582,2570,1,0,0,0,2582,2571,1,0,0,0,2583,99,1,0,0,0,2584,2586,
        5,60,0,0,2585,2587,5,587,0,0,2586,2585,1,0,0,0,2586,2587,1,0,0,0,
        2587,2588,1,0,0,0,2588,2589,5,716,0,0,2589,2590,5,223,0,0,2590,2591,
        5,159,0,0,2591,2592,5,870,0,0,2592,2593,3,758,379,0,2593,101,1,0,
        0,0,2594,2596,5,68,0,0,2595,2597,5,404,0,0,2596,2595,1,0,0,0,2596,
        2597,1,0,0,0,2597,2598,1,0,0,0,2598,2608,7,14,0,0,2599,2600,5,457,
        0,0,2600,2605,3,104,52,0,2601,2602,5,16,0,0,2602,2604,3,104,52,0,
        2603,2601,1,0,0,0,2604,2607,1,0,0,0,2605,2603,1,0,0,0,2605,2606,
        1,0,0,0,2606,2609,1,0,0,0,2607,2605,1,0,0,0,2608,2599,1,0,0,0,2608,
        2609,1,0,0,0,2609,2636,1,0,0,0,2610,2612,5,286,0,0,2611,2610,1,0,
        0,0,2611,2612,1,0,0,0,2612,2613,1,0,0,0,2613,2622,3,112,56,0,2614,
        2619,3,106,53,0,2615,2616,5,1208,0,0,2616,2618,3,106,53,0,2617,2615,
        1,0,0,0,2618,2621,1,0,0,0,2619,2617,1,0,0,0,2619,2620,1,0,0,0,2620,
        2623,1,0,0,0,2621,2619,1,0,0,0,2622,2614,1,0,0,0,2622,2623,1,0,0,
        0,2623,2637,1,0,0,0,2624,2629,3,106,53,0,2625,2626,5,1208,0,0,2626,
        2628,3,106,53,0,2627,2625,1,0,0,0,2628,2631,1,0,0,0,2629,2627,1,
        0,0,0,2629,2630,1,0,0,0,2630,2633,1,0,0,0,2631,2629,1,0,0,0,2632,
        2624,1,0,0,0,2632,2633,1,0,0,0,2633,2634,1,0,0,0,2634,2635,5,286,
        0,0,2635,2637,3,112,56,0,2636,2611,1,0,0,0,2636,2632,1,0,0,0,2637,
        2640,1,0,0,0,2638,2639,5,164,0,0,2639,2641,3,114,57,0,2640,2638,
        1,0,0,0,2640,2641,1,0,0,0,2641,103,1,0,0,0,2642,2671,5,365,0,0,2643,
        2644,5,951,0,0,2644,2671,5,365,0,0,2645,2646,5,365,0,0,2646,2647,
        3,764,382,0,2647,2648,5,300,0,0,2648,2671,1,0,0,0,2649,2650,5,268,
        0,0,2650,2671,5,365,0,0,2651,2652,5,951,0,0,2652,2658,5,420,0,0,
        2653,2654,5,420,0,0,2654,2658,3,764,382,0,2655,2656,5,268,0,0,2656,
        2658,5,420,0,0,2657,2651,1,0,0,0,2657,2653,1,0,0,0,2657,2655,1,0,
        0,0,2658,2660,1,0,0,0,2659,2661,7,15,0,0,2660,2659,1,0,0,0,2660,
        2661,1,0,0,0,2661,2671,1,0,0,0,2662,2663,5,759,0,0,2663,2671,3,764,
        382,0,2664,2665,5,951,0,0,2665,2671,5,759,0,0,2666,2667,5,762,0,
        0,2667,2671,3,764,382,0,2668,2669,5,951,0,0,2669,2671,5,762,0,0,
        2670,2642,1,0,0,0,2670,2643,1,0,0,0,2670,2645,1,0,0,0,2670,2649,
        1,0,0,0,2670,2657,1,0,0,0,2670,2662,1,0,0,0,2670,2664,1,0,0,0,2670,
        2666,1,0,0,0,2670,2668,1,0,0,0,2671,2674,1,0,0,0,2672,2673,5,159,
        0,0,2673,2675,5,93,0,0,2674,2672,1,0,0,0,2674,2675,1,0,0,0,2675,
        105,1,0,0,0,2676,2678,5,448,0,0,2677,2676,1,0,0,0,2677,2678,1,0,
        0,0,2678,2680,1,0,0,0,2679,2681,5,308,0,0,2680,2679,1,0,0,0,2680,
        2681,1,0,0,0,2681,2682,1,0,0,0,2682,2683,5,192,0,0,2683,2687,3,108,
        54,0,2684,2685,5,69,0,0,2685,2687,3,110,55,0,2686,2677,1,0,0,0,2686,
        2684,1,0,0,0,2687,107,1,0,0,0,2688,2709,3,792,396,0,2689,2691,3,
        792,396,0,2690,2689,1,0,0,0,2690,2691,1,0,0,0,2691,2693,1,0,0,0,
        2692,2694,5,13,0,0,2693,2692,1,0,0,0,2693,2694,1,0,0,0,2694,2695,
        1,0,0,0,2695,2696,5,1213,0,0,2696,2701,3,788,394,0,2697,2698,5,1208,
        0,0,2698,2700,3,788,394,0,2699,2697,1,0,0,0,2700,2703,1,0,0,0,2701,
        2699,1,0,0,0,2701,2702,1,0,0,0,2702,2704,1,0,0,0,2703,2701,1,0,0,
        0,2704,2706,5,1214,0,0,2705,2707,3,570,285,0,2706,2705,1,0,0,0,2706,
        2707,1,0,0,0,2707,2709,1,0,0,0,2708,2688,1,0,0,0,2708,2690,1,0,0,
        0,2709,109,1,0,0,0,2710,2715,3,996,498,0,2711,2713,5,20,0,0,2712,
        2711,1,0,0,0,2712,2713,1,0,0,0,2713,2714,1,0,0,0,2714,2716,3,822,
        411,0,2715,2712,1,0,0,0,2715,2716,1,0,0,0,2716,2742,1,0,0,0,2717,
        2720,5,1213,0,0,2718,2721,3,996,498,0,2719,2721,5,840,0,0,2720,2718,
        1,0,0,0,2720,2719,1,0,0,0,2721,2729,1,0,0,0,2722,2725,5,1208,0,0,
        2723,2726,3,996,498,0,2724,2726,5,840,0,0,2725,2723,1,0,0,0,2725,
        2724,1,0,0,0,2726,2728,1,0,0,0,2727,2722,1,0,0,0,2728,2731,1,0,0,
        0,2729,2727,1,0,0,0,2729,2730,1,0,0,0,2730,2732,1,0,0,0,2731,2729,
        1,0,0,0,2732,2737,5,1214,0,0,2733,2735,5,20,0,0,2734,2733,1,0,0,
        0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,2738,3,822,411,0,2737,
        2734,1,0,0,0,2737,2738,1,0,0,0,2738,2742,1,0,0,0,2739,2742,5,840,
        0,0,2740,2742,3,822,411,0,2741,2710,1,0,0,0,2741,2717,1,0,0,0,2741,
        2739,1,0,0,0,2741,2740,1,0,0,0,2742,111,1,0,0,0,2743,2745,5,417,
        0,0,2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,2746,1,0,0,0,2746,2747,
        3,792,396,0,2747,113,1,0,0,0,2748,2749,5,417,0,0,2749,2752,3,792,
        396,0,2750,2752,3,792,396,0,2751,2748,1,0,0,0,2751,2750,1,0,0,0,
        2752,2777,1,0,0,0,2753,2775,5,69,0,0,2754,2757,3,788,394,0,2755,
        2757,5,840,0,0,2756,2754,1,0,0,0,2756,2755,1,0,0,0,2757,2776,1,0,
        0,0,2758,2776,3,822,411,0,2759,2762,5,1213,0,0,2760,2763,3,788,394,
        0,2761,2763,5,840,0,0,2762,2760,1,0,0,0,2762,2761,1,0,0,0,2763,2771,
        1,0,0,0,2764,2767,5,1208,0,0,2765,2768,3,788,394,0,2766,2768,5,840,
        0,0,2767,2765,1,0,0,0,2767,2766,1,0,0,0,2768,2770,1,0,0,0,2769,2764,
        1,0,0,0,2770,2773,1,0,0,0,2771,2769,1,0,0,0,2771,2772,1,0,0,0,2772,
        2774,1,0,0,0,2773,2771,1,0,0,0,2774,2776,5,1214,0,0,2775,2756,1,
        0,0,0,2775,2758,1,0,0,0,2775,2759,1,0,0,0,2776,2778,1,0,0,0,2777,
        2753,1,0,0,0,2777,2778,1,0,0,0,2778,115,1,0,0,0,2779,2781,5,70,0,
        0,2780,2782,5,286,0,0,2781,2780,1,0,0,0,2781,2782,1,0,0,0,2782,2790,
        1,0,0,0,2783,2785,3,680,340,0,2784,2783,1,0,0,0,2784,2785,1,0,0,
        0,2785,2786,1,0,0,0,2786,2791,3,790,395,0,2787,2788,5,69,0,0,2788,
        2791,3,784,392,0,2789,2791,3,784,392,0,2790,2784,1,0,0,0,2790,2787,
        1,0,0,0,2790,2789,1,0,0,0,2791,2793,1,0,0,0,2792,2794,7,16,0,0,2793,
        2792,1,0,0,0,2793,2794,1,0,0,0,2794,2798,1,0,0,0,2795,2799,3,758,
        379,0,2796,2799,3,760,380,0,2797,2799,3,762,381,0,2798,2795,1,0,
        0,0,2798,2796,1,0,0,0,2798,2797,1,0,0,0,2799,117,1,0,0,0,2800,2801,
        7,17,0,0,2801,2802,5,29,0,0,2802,2806,3,790,395,0,2803,2804,5,20,
        0,0,2804,2805,7,18,0,0,2805,2807,5,1130,0,0,2806,2803,1,0,0,0,2806,
        2807,1,0,0,0,2807,2808,1,0,0,0,2808,2809,5,456,0,0,2809,2810,3,758,
        379,0,2810,2811,5,299,0,0,2811,2812,3,758,379,0,2812,119,1,0,0,0,
        2813,2817,3,122,61,0,2814,2817,3,124,62,0,2815,2817,3,126,63,0,2816,
        2813,1,0,0,0,2816,2814,1,0,0,0,2816,2815,1,0,0,0,2817,121,1,0,0,
        0,2818,2819,7,17,0,0,2819,2820,5,166,0,0,2820,2821,3,796,398,0,2821,
        2830,5,1213,0,0,2822,2827,3,128,64,0,2823,2824,5,1208,0,0,2824,2826,
        3,128,64,0,2825,2823,1,0,0,0,2826,2829,1,0,0,0,2827,2825,1,0,0,0,
        2827,2828,1,0,0,0,2828,2831,1,0,0,0,2829,2827,1,0,0,0,2830,2822,
        1,0,0,0,2830,2831,1,0,0,0,2831,2832,1,0,0,0,2832,2833,5,1214,0,0,
        2833,2834,5,352,0,0,2834,2839,3,688,344,0,2835,2838,3,130,65,0,2836,
        2838,3,132,66,0,2837,2835,1,0,0,0,2837,2836,1,0,0,0,2838,2841,1,
        0,0,0,2839,2837,1,0,0,0,2839,2840,1,0,0,0,2840,2845,1,0,0,0,2841,
        2839,1,0,0,0,2842,2844,3,134,67,0,2843,2842,1,0,0,0,2844,2847,1,
        0,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2852,1,0,0,0,2847,
        2845,1,0,0,0,2848,2851,3,130,65,0,2849,2851,3,132,66,0,2850,2848,
        1,0,0,0,2850,2849,1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,
        2853,1,0,0,0,2853,2858,1,0,0,0,2854,2852,1,0,0,0,2855,2857,3,134,
        67,0,2856,2855,1,0,0,0,2857,2860,1,0,0,0,2858,2856,1,0,0,0,2858,
        2859,1,0,0,0,2859,2864,1,0,0,0,2860,2858,1,0,0,0,2861,2862,5,386,
        0,0,2862,2863,5,910,0,0,2863,2865,5,624,0,0,2864,2861,1,0,0,0,2864,
        2865,1,0,0,0,2865,2866,1,0,0,0,2866,2867,5,67,0,0,2867,2868,5,713,
        0,0,2868,2869,5,709,0,0,2869,2870,5,437,0,0,2870,2871,5,1194,0,0,
        2871,2872,5,351,0,0,2872,2873,3,996,498,0,2873,123,1,0,0,0,2874,
        2875,7,17,0,0,2875,2876,5,166,0,0,2876,2877,3,796,398,0,2877,2886,
        5,1213,0,0,2878,2883,3,138,69,0,2879,2880,5,1208,0,0,2880,2882,3,
        138,69,0,2881,2879,1,0,0,0,2882,2885,1,0,0,0,2883,2881,1,0,0,0,2883,
        2884,1,0,0,0,2884,2887,1,0,0,0,2885,2883,1,0,0,0,2886,2878,1,0,0,
        0,2886,2887,1,0,0,0,2887,2888,1,0,0,0,2888,2889,5,1214,0,0,2889,
        2890,5,352,0,0,2890,2891,5,406,0,0,2891,2896,3,136,68,0,2892,2895,
        3,140,70,0,2893,2895,3,154,77,0,2894,2892,1,0,0,0,2894,2893,1,0,
        0,0,2895,2898,1,0,0,0,2896,2894,1,0,0,0,2896,2897,1,0,0,0,2897,2902,
        1,0,0,0,2898,2896,1,0,0,0,2899,2901,3,142,71,0,2900,2899,1,0,0,0,
        2901,2904,1,0,0,0,2902,2900,1,0,0,0,2902,2903,1,0,0,0,2903,2909,
        1,0,0,0,2904,2902,1,0,0,0,2905,2908,3,140,70,0,2906,2908,3,154,77,
        0,2907,2905,1,0,0,0,2907,2906,1,0,0,0,2908,2911,1,0,0,0,2909,2907,
        1,0,0,0,2909,2910,1,0,0,0,2910,2915,1,0,0,0,2911,2909,1,0,0,0,2912,
        2914,3,142,71,0,2913,2912,1,0,0,0,2914,2917,1,0,0,0,2915,2913,1,
        0,0,0,2915,2916,1,0,0,0,2916,2924,1,0,0,0,2917,2915,1,0,0,0,2918,
        2921,5,457,0,0,2919,2920,5,688,0,0,2920,2922,5,372,0,0,2921,2919,
        1,0,0,0,2921,2922,1,0,0,0,2922,2923,1,0,0,0,2923,2925,3,790,395,
        0,2924,2918,1,0,0,0,2924,2925,1,0,0,0,2925,2926,1,0,0,0,2926,2932,
        5,151,0,0,2927,2930,5,789,0,0,2928,2931,3,796,398,0,2929,2931,3,
        758,379,0,2930,2928,1,0,0,0,2930,2929,1,0,0,0,2931,2933,1,0,0,0,
        2932,2927,1,0,0,0,2932,2933,1,0,0,0,2933,2935,1,0,0,0,2934,2936,
        3,144,72,0,2935,2934,1,0,0,0,2935,2936,1,0,0,0,2936,2946,1,0,0,0,
        2937,2938,5,151,0,0,2938,2944,5,910,0,0,2939,2941,5,624,0,0,2940,
        2942,3,790,395,0,2941,2940,1,0,0,0,2941,2942,1,0,0,0,2942,2945,1,
        0,0,0,2943,2945,5,713,0,0,2944,2939,1,0,0,0,2944,2943,1,0,0,0,2945,
        2947,1,0,0,0,2946,2937,1,0,0,0,2946,2947,1,0,0,0,2947,2950,1,0,0,
        0,2948,2949,5,144,0,0,2949,2951,3,574,287,0,2950,2948,1,0,0,0,2950,
        2951,1,0,0,0,2951,125,1,0,0,0,2952,2953,7,17,0,0,2953,2954,5,166,
        0,0,2954,2955,3,796,398,0,2955,2964,5,1213,0,0,2956,2961,3,146,73,
        0,2957,2958,5,1208,0,0,2958,2960,3,146,73,0,2959,2957,1,0,0,0,2960,
        2963,1,0,0,0,2961,2959,1,0,0,0,2961,2962,1,0,0,0,2962,2965,1,0,0,
        0,2963,2961,1,0,0,0,2964,2956,1,0,0,0,2964,2965,1,0,0,0,2965,2966,
        1,0,0,0,2966,2967,5,1214,0,0,2967,2968,5,352,0,0,2968,2972,3,692,
        346,0,2969,2970,5,50,0,0,2970,2971,5,164,0,0,2971,2973,3,692,346,
        0,2972,2969,1,0,0,0,2972,2973,1,0,0,0,2973,2978,1,0,0,0,2974,2977,
        3,148,74,0,2975,2977,3,154,77,0,2976,2974,1,0,0,0,2976,2975,1,0,
        0,0,2977,2980,1,0,0,0,2978,2976,1,0,0,0,2978,2979,1,0,0,0,2979,2984,
        1,0,0,0,2980,2978,1,0,0,0,2981,2983,3,150,75,0,2982,2981,1,0,0,0,
        2983,2986,1,0,0,0,2984,2982,1,0,0,0,2984,2985,1,0,0,0,2985,2991,
        1,0,0,0,2986,2984,1,0,0,0,2987,2990,3,148,74,0,2988,2990,3,154,77,
        0,2989,2987,1,0,0,0,2989,2988,1,0,0,0,2990,2993,1,0,0,0,2991,2989,
        1,0,0,0,2991,2992,1,0,0,0,2992,2997,1,0,0,0,2993,2991,1,0,0,0,2994,
        2996,3,150,75,0,2995,2994,1,0,0,0,2996,2999,1,0,0,0,2997,2995,1,
        0,0,0,2997,2998,1,0,0,0,2998,3004,1,0,0,0,2999,2997,1,0,0,0,3000,
        3001,5,457,0,0,3001,3002,5,688,0,0,3002,3003,5,372,0,0,3003,3005,
        3,790,395,0,3004,3000,1,0,0,0,3004,3005,1,0,0,0,3005,3006,1,0,0,
        0,3006,3012,5,151,0,0,3007,3010,5,789,0,0,3008,3011,3,796,398,0,
        3009,3011,3,758,379,0,3010,3008,1,0,0,0,3010,3009,1,0,0,0,3011,3013,
        1,0,0,0,3012,3007,1,0,0,0,3012,3013,1,0,0,0,3013,3015,1,0,0,0,3014,
        3016,3,152,76,0,3015,3014,1,0,0,0,3015,3016,1,0,0,0,3016,3026,1,
        0,0,0,3017,3018,5,151,0,0,3018,3024,5,910,0,0,3019,3021,5,624,0,
        0,3020,3022,3,790,395,0,3021,3020,1,0,0,0,3021,3022,1,0,0,0,3022,
        3025,1,0,0,0,3023,3025,5,713,0,0,3024,3019,1,0,0,0,3024,3023,1,0,
        0,0,3025,3027,1,0,0,0,3026,3017,1,0,0,0,3026,3027,1,0,0,0,3027,127,
        1,0,0,0,3028,3029,3,812,406,0,3029,3030,3,690,345,0,3030,129,1,0,
        0,0,3031,3032,5,214,0,0,3032,3033,5,386,0,0,3033,131,1,0,0,0,3034,
        3035,5,77,0,0,3035,3036,5,386,0,0,3036,133,1,0,0,0,3037,3038,5,384,
        0,0,3038,3053,3,796,398,0,3039,3041,5,272,0,0,3040,3039,1,0,0,0,
        3040,3041,1,0,0,0,3041,3042,1,0,0,0,3042,3053,5,117,0,0,3043,3044,
        5,559,0,0,3044,3045,5,286,0,0,3045,3046,5,274,0,0,3046,3053,5,196,
        0,0,3047,3048,5,352,0,0,3048,3049,5,274,0,0,3049,3050,5,286,0,0,
        3050,3051,5,274,0,0,3051,3053,5,196,0,0,3052,3037,1,0,0,0,3052,3040,
        1,0,0,0,3052,3043,1,0,0,0,3052,3047,1,0,0,0,3053,135,1,0,0,0,3054,
        3055,5,1213,0,0,3055,3060,3,1186,593,0,3056,3057,5,1208,0,0,3057,
        3059,3,1186,593,0,3058,3056,1,0,0,0,3059,3062,1,0,0,0,3060,3058,
        1,0,0,0,3060,3061,1,0,0,0,3061,3063,1,0,0,0,3062,3060,1,0,0,0,3063,
        3064,5,1214,0,0,3064,3078,1,0,0,0,3065,3075,5,467,0,0,3066,3067,
        5,579,0,0,3067,3068,5,1213,0,0,3068,3069,5,1194,0,0,3069,3076,5,
        1214,0,0,3070,3071,5,457,0,0,3071,3073,5,166,0,0,3072,3074,3,796,
        398,0,3073,3072,1,0,0,0,3073,3074,1,0,0,0,3074,3076,1,0,0,0,3075,
        3066,1,0,0,0,3075,3070,1,0,0,0,3076,3078,1,0,0,0,3077,3054,1,0,0,
        0,3077,3065,1,0,0,0,3078,137,1,0,0,0,3079,3081,3,812,406,0,3080,
        3079,1,0,0,0,3080,3081,1,0,0,0,3081,3082,1,0,0,0,3082,3083,3,692,
        346,0,3083,139,1,0,0,0,3084,3085,5,214,0,0,3085,3086,7,19,0,0,3086,
        141,1,0,0,0,3087,3088,5,384,0,0,3088,3099,3,796,398,0,3089,3091,
        5,272,0,0,3090,3089,1,0,0,0,3090,3091,1,0,0,0,3091,3092,1,0,0,0,
        3092,3099,5,117,0,0,3093,3094,5,559,0,0,3094,3095,5,286,0,0,3095,
        3096,5,274,0,0,3096,3099,5,196,0,0,3097,3099,3,144,72,0,3098,3087,
        1,0,0,0,3098,3090,1,0,0,0,3098,3093,1,0,0,0,3098,3097,1,0,0,0,3099,
        143,1,0,0,0,3100,3101,5,298,0,0,3101,3102,5,944,0,0,3102,3103,7,
        20,0,0,3103,145,1,0,0,0,3104,3106,3,812,406,0,3105,3104,1,0,0,0,
        3105,3106,1,0,0,0,3106,3107,1,0,0,0,3107,3108,3,692,346,0,3108,147,
        1,0,0,0,3109,3110,5,214,0,0,3110,3111,7,21,0,0,3111,149,1,0,0,0,
        3112,3113,5,384,0,0,3113,3138,3,796,398,0,3114,3115,5,61,0,0,3115,
        3119,7,22,0,0,3116,3117,5,1213,0,0,3117,3118,5,1194,0,0,3118,3120,
        5,1214,0,0,3119,3116,1,0,0,0,3119,3120,1,0,0,0,3120,3138,1,0,0,0,
        3121,3138,3,152,76,0,3122,3124,5,272,0,0,3123,3122,1,0,0,0,3123,
        3124,1,0,0,0,3124,3125,1,0,0,0,3125,3138,5,117,0,0,3126,3127,5,559,
        0,0,3127,3128,5,286,0,0,3128,3129,5,274,0,0,3129,3138,5,196,0,0,
        3130,3131,5,352,0,0,3131,3132,5,274,0,0,3132,3133,5,286,0,0,3133,
        3134,5,274,0,0,3134,3138,5,196,0,0,3135,3136,5,159,0,0,3136,3138,
        7,23,0,0,3137,3112,1,0,0,0,3137,3114,1,0,0,0,3137,3121,1,0,0,0,3137,
        3123,1,0,0,0,3137,3126,1,0,0,0,3137,3130,1,0,0,0,3137,3135,1,0,0,
        0,3138,151,1,0,0,0,3139,3140,5,298,0,0,3140,3141,5,944,0,0,3141,
        3142,7,24,0,0,3142,153,1,0,0,0,3143,3144,5,268,0,0,3144,3145,5,386,
        0,0,3145,155,1,0,0,0,3146,3147,5,86,0,0,3147,3152,5,235,0,0,3148,
        3152,5,65,0,0,3149,3150,5,340,0,0,3150,3152,5,235,0,0,3151,3146,
        1,0,0,0,3151,3148,1,0,0,0,3151,3149,1,0,0,0,3152,3153,1,0,0,0,3153,
        3165,3,798,399,0,3154,3155,5,1213,0,0,3155,3160,3,158,79,0,3156,
        3157,5,1208,0,0,3157,3159,3,158,79,0,3158,3156,1,0,0,0,3159,3162,
        1,0,0,0,3160,3158,1,0,0,0,3160,3161,1,0,0,0,3161,3163,1,0,0,0,3162,
        3160,1,0,0,0,3163,3164,5,1214,0,0,3164,3166,1,0,0,0,3165,3154,1,
        0,0,0,3165,3166,1,0,0,0,3166,3167,1,0,0,0,3167,3168,5,20,0,0,3168,
        3182,5,1213,0,0,3169,3171,3,1216,608,0,3170,3169,1,0,0,0,3170,3171,
        1,0,0,0,3171,3173,1,0,0,0,3172,3174,3,1202,601,0,3173,3172,1,0,0,
        0,3173,3174,1,0,0,0,3174,3178,1,0,0,0,3175,3179,3,594,297,0,3176,
        3179,3,0,0,0,3177,3179,3,1222,611,0,3178,3175,1,0,0,0,3178,3176,
        1,0,0,0,3178,3177,1,0,0,0,3179,3180,1,0,0,0,3180,3181,5,1206,0,0,
        3181,3183,1,0,0,0,3182,3170,1,0,0,0,3183,3184,1,0,0,0,3184,3182,
        1,0,0,0,3184,3185,1,0,0,0,3185,3186,1,0,0,0,3186,3187,5,1214,0,0,
        3187,157,1,0,0,0,3188,3201,3,812,406,0,3189,3202,3,688,344,0,3190,
        3191,5,1213,0,0,3191,3196,3,688,344,0,3192,3193,5,1208,0,0,3193,
        3195,3,710,355,0,3194,3192,1,0,0,0,3195,3198,1,0,0,0,3196,3194,1,
        0,0,0,3196,3197,1,0,0,0,3197,3199,1,0,0,0,3198,3196,1,0,0,0,3199,
        3200,5,1214,0,0,3200,3202,1,0,0,0,3201,3189,1,0,0,0,3201,3190,1,
        0,0,0,3202,3206,1,0,0,0,3203,3205,3,710,355,0,3204,3203,1,0,0,0,
        3205,3208,1,0,0,0,3206,3204,1,0,0,0,3206,3207,1,0,0,0,3207,159,1,
        0,0,0,3208,3206,1,0,0,0,3209,3210,3,162,81,0,3210,161,1,0,0,0,3211,
        3212,7,17,0,0,3212,3213,5,310,0,0,3213,3214,3,794,397,0,3214,3223,
        5,1213,0,0,3215,3220,3,164,82,0,3216,3217,5,1208,0,0,3217,3219,3,
        164,82,0,3218,3216,1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,0,0,0,3220,
        3221,1,0,0,0,3221,3224,1,0,0,0,3222,3220,1,0,0,0,3223,3215,1,0,0,
        0,3223,3224,1,0,0,0,3224,3225,1,0,0,0,3225,3231,5,1214,0,0,3226,
        3230,3,166,83,0,3227,3230,3,168,84,0,3228,3230,3,170,85,0,3229,3226,
        1,0,0,0,3229,3227,1,0,0,0,3229,3228,1,0,0,0,3230,3233,1,0,0,0,3231,
        3229,1,0,0,0,3231,3232,1,0,0,0,3232,3234,1,0,0,0,3233,3231,1,0,0,
        0,3234,3235,3,172,86,0,3235,163,1,0,0,0,3236,3238,7,25,0,0,3237,
        3236,1,0,0,0,3237,3238,1,0,0,0,3238,3239,1,0,0,0,3239,3240,3,812,
        406,0,3240,3244,3,690,345,0,3241,3243,3,710,355,0,3242,3241,1,0,
        0,0,3243,3246,1,0,0,0,3244,3242,1,0,0,0,3244,3245,1,0,0,0,3245,165,
        1,0,0,0,3246,3244,1,0,0,0,3247,3248,5,77,0,0,3248,3256,5,386,0,0,
        3249,3250,5,253,0,0,3250,3251,5,386,0,0,3251,3256,5,606,0,0,3252,
        3253,5,322,0,0,3253,3254,5,386,0,0,3254,3256,5,606,0,0,3255,3247,
        1,0,0,0,3255,3249,1,0,0,0,3255,3252,1,0,0,0,3256,167,1,0,0,0,3257,
        3258,5,128,0,0,3258,3259,5,347,0,0,3259,3260,5,374,0,0,3260,3261,
        3,764,382,0,3261,169,1,0,0,0,3262,3263,5,386,0,0,3263,3264,5,910,
        0,0,3264,3265,7,26,0,0,3265,171,1,0,0,0,3266,3269,3,176,88,0,3267,
        3269,3,184,92,0,3268,3266,1,0,0,0,3268,3267,1,0,0,0,3269,173,1,0,
        0,0,3270,3301,3,176,88,0,3271,3301,3,184,92,0,3272,3301,3,186,93,
        0,3273,3301,3,188,94,0,3274,3301,3,190,95,0,3275,3276,3,814,407,
        0,3276,3277,5,1207,0,0,3277,3279,1,0,0,0,3278,3275,1,0,0,0,3278,
        3279,1,0,0,0,3279,3280,1,0,0,0,3280,3282,3,192,96,0,3281,3283,3,
        814,407,0,3282,3281,1,0,0,0,3282,3283,1,0,0,0,3283,3301,1,0,0,0,
        3284,3301,3,194,97,0,3285,3301,3,196,98,0,3286,3287,5,208,0,0,3287,
        3301,3,814,407,0,3288,3289,5,218,0,0,3289,3301,3,814,407,0,3290,
        3291,5,34,0,0,3291,3293,5,343,0,0,3292,3294,3,174,87,0,3293,3292,
        1,0,0,0,3294,3295,1,0,0,0,3295,3293,1,0,0,0,3295,3296,1,0,0,0,3296,
        3297,1,0,0,0,3297,3298,5,134,0,0,3298,3299,5,343,0,0,3299,3301,1,
        0,0,0,3300,3270,1,0,0,0,3300,3271,1,0,0,0,3300,3272,1,0,0,0,3300,
        3273,1,0,0,0,3300,3274,1,0,0,0,3300,3278,1,0,0,0,3300,3284,1,0,0,
        0,3300,3285,1,0,0,0,3300,3286,1,0,0,0,3300,3288,1,0,0,0,3300,3290,
        1,0,0,0,3301,3302,1,0,0,0,3302,3303,5,1206,0,0,3303,175,1,0,0,0,
        3304,3308,3,178,89,0,3305,3308,3,180,90,0,3306,3308,3,182,91,0,3307,
        3304,1,0,0,0,3307,3305,1,0,0,0,3307,3306,1,0,0,0,3308,177,1,0,0,
        0,3309,3325,3,658,329,0,3310,3325,3,660,330,0,3311,3325,3,662,331,
        0,3312,3325,3,648,324,0,3313,3325,3,628,314,0,3314,3325,3,654,327,
        0,3315,3325,3,600,300,0,3316,3325,3,632,316,0,3317,3325,3,604,302,
        0,3318,3325,3,620,310,0,3319,3325,3,656,328,0,3320,3325,3,596,298,
        0,3321,3325,3,598,299,0,3322,3325,3,610,305,0,3323,3325,3,664,332,
        0,3324,3309,1,0,0,0,3324,3310,1,0,0,0,3324,3311,1,0,0,0,3324,3312,
        1,0,0,0,3324,3313,1,0,0,0,3324,3314,1,0,0,0,3324,3315,1,0,0,0,3324,
        3316,1,0,0,0,3324,3317,1,0,0,0,3324,3318,1,0,0,0,3324,3319,1,0,0,
        0,3324,3320,1,0,0,0,3324,3321,1,0,0,0,3324,3322,1,0,0,0,3324,3323,
        1,0,0,0,3325,179,1,0,0,0,3326,3374,3,8,4,0,3327,3374,3,14,7,0,3328,
        3374,3,74,37,0,3329,3374,3,102,51,0,3330,3374,3,116,58,0,3331,3374,
        3,256,128,0,3332,3374,3,318,159,0,3333,3374,3,260,130,0,3334,3374,
        3,316,158,0,3335,3374,3,264,132,0,3336,3374,3,302,151,0,3337,3374,
        3,156,78,0,3338,3374,3,278,139,0,3339,3374,3,304,152,0,3340,3374,
        3,310,155,0,3341,3374,3,308,154,0,3342,3374,3,412,206,0,3343,3374,
        3,252,126,0,3344,3374,3,422,211,0,3345,3374,3,424,212,0,3346,3374,
        3,428,214,0,3347,3374,3,432,216,0,3348,3374,3,434,217,0,3349,3374,
        3,442,221,0,3350,3374,3,446,223,0,3351,3374,3,448,224,0,3352,3374,
        3,450,225,0,3353,3374,3,456,228,0,3354,3374,3,458,229,0,3355,3374,
        3,460,230,0,3356,3374,3,466,233,0,3357,3374,3,470,235,0,3358,3374,
        3,472,236,0,3359,3374,3,474,237,0,3360,3374,3,476,238,0,3361,3374,
        3,480,240,0,3362,3374,3,482,241,0,3363,3374,3,488,244,0,3364,3374,
        3,514,257,0,3365,3374,3,518,259,0,3366,3374,3,520,260,0,3367,3374,
        3,528,264,0,3368,3374,3,526,263,0,3369,3374,3,530,265,0,3370,3374,
        3,532,266,0,3371,3374,3,534,267,0,3372,3374,3,552,276,0,3373,3326,
        1,0,0,0,3373,3327,1,0,0,0,3373,3328,1,0,0,0,3373,3329,1,0,0,0,3373,
        3330,1,0,0,0,3373,3331,1,0,0,0,3373,3332,1,0,0,0,3373,3333,1,0,0,
        0,3373,3334,1,0,0,0,3373,3335,1,0,0,0,3373,3336,1,0,0,0,3373,3337,
        1,0,0,0,3373,3338,1,0,0,0,3373,3339,1,0,0,0,3373,3340,1,0,0,0,3373,
        3341,1,0,0,0,3373,3342,1,0,0,0,3373,3343,1,0,0,0,3373,3344,1,0,0,
        0,3373,3345,1,0,0,0,3373,3346,1,0,0,0,3373,3347,1,0,0,0,3373,3348,
        1,0,0,0,3373,3349,1,0,0,0,3373,3350,1,0,0,0,3373,3351,1,0,0,0,3373,
        3352,1,0,0,0,3373,3353,1,0,0,0,3373,3354,1,0,0,0,3373,3355,1,0,0,
        0,3373,3356,1,0,0,0,3373,3357,1,0,0,0,3373,3358,1,0,0,0,3373,3359,
        1,0,0,0,3373,3360,1,0,0,0,3373,3361,1,0,0,0,3373,3362,1,0,0,0,3373,
        3363,1,0,0,0,3373,3364,1,0,0,0,3373,3365,1,0,0,0,3373,3366,1,0,0,
        0,3373,3367,1,0,0,0,3373,3368,1,0,0,0,3373,3369,1,0,0,0,3373,3370,
        1,0,0,0,3373,3371,1,0,0,0,3373,3372,1,0,0,0,3374,181,1,0,0,0,3375,
        3379,3,1224,612,0,3376,3379,3,1226,613,0,3377,3379,3,1244,622,0,
        3378,3375,1,0,0,0,3378,3376,1,0,0,0,3378,3377,1,0,0,0,3379,183,1,
        0,0,0,3380,3381,3,814,407,0,3381,3382,5,1207,0,0,3382,3384,1,0,0,
        0,3383,3380,1,0,0,0,3383,3384,1,0,0,0,3384,3385,1,0,0,0,3385,3389,
        5,34,0,0,3386,3388,3,198,99,0,3387,3386,1,0,0,0,3388,3391,1,0,0,
        0,3389,3387,1,0,0,0,3389,3390,1,0,0,0,3390,3395,1,0,0,0,3391,3389,
        1,0,0,0,3392,3394,3,200,100,0,3393,3392,1,0,0,0,3394,3397,1,0,0,
        0,3395,3393,1,0,0,0,3395,3396,1,0,0,0,3396,3401,1,0,0,0,3397,3395,
        1,0,0,0,3398,3400,3,202,101,0,3399,3398,1,0,0,0,3400,3403,1,0,0,
        0,3401,3399,1,0,0,0,3401,3402,1,0,0,0,3402,3407,1,0,0,0,3403,3401,
        1,0,0,0,3404,3406,3,174,87,0,3405,3404,1,0,0,0,3406,3409,1,0,0,0,
        3407,3405,1,0,0,0,3407,3408,1,0,0,0,3408,3410,1,0,0,0,3409,3407,
        1,0,0,0,3410,3412,5,134,0,0,3411,3413,3,814,407,0,3412,3411,1,0,
        0,0,3412,3413,1,0,0,0,3413,185,1,0,0,0,3414,3425,3,204,102,0,3415,
        3425,3,206,103,0,3416,3425,3,208,104,0,3417,3425,3,210,105,0,3418,
        3425,3,212,106,0,3419,3425,3,214,107,0,3420,3425,3,216,108,0,3421,
        3425,3,218,109,0,3422,3425,3,220,110,0,3423,3425,3,222,111,0,3424,
        3414,1,0,0,0,3424,3415,1,0,0,0,3424,3416,1,0,0,0,3424,3417,1,0,0,
        0,3424,3418,1,0,0,0,3424,3419,1,0,0,0,3424,3420,1,0,0,0,3424,3421,
        1,0,0,0,3424,3422,1,0,0,0,3424,3423,1,0,0,0,3425,187,1,0,0,0,3426,
        3427,5,372,0,0,3427,3428,3,810,405,0,3428,3429,5,1224,0,0,3429,3430,
        3,996,498,0,3430,189,1,0,0,0,3431,3434,3,224,112,0,3432,3434,3,230,
        115,0,3433,3431,1,0,0,0,3433,3432,1,0,0,0,3434,191,1,0,0,0,3435,
        3440,3,232,116,0,3436,3440,3,234,117,0,3437,3440,3,236,118,0,3438,
        3440,3,238,119,0,3439,3435,1,0,0,0,3439,3436,1,0,0,0,3439,3437,1,
        0,0,0,3439,3438,1,0,0,0,3440,193,1,0,0,0,3441,3442,5,377,0,0,3442,
        3448,3,248,124,0,3443,3445,5,344,0,0,3444,3446,3,248,124,0,3445,
        3444,1,0,0,0,3445,3446,1,0,0,0,3446,3448,1,0,0,0,3447,3441,1,0,0,
        0,3447,3443,1,0,0,0,3448,3463,1,0,0,0,3449,3450,5,372,0,0,3450,3451,
        3,244,122,0,3451,3452,5,1224,0,0,3452,3460,3,996,498,0,3453,3454,
        5,1208,0,0,3454,3455,3,244,122,0,3455,3456,5,1224,0,0,3456,3457,
        3,996,498,0,3457,3459,1,0,0,0,3458,3453,1,0,0,0,3459,3462,1,0,0,
        0,3460,3458,1,0,0,0,3460,3461,1,0,0,0,3461,3464,1,0,0,0,3462,3460,
        1,0,0,0,3463,3449,1,0,0,0,3463,3464,1,0,0,0,3464,3491,1,0,0,0,3465,
        3466,5,170,0,0,3466,3467,5,633,0,0,3467,3472,3,240,120,0,3468,3469,
        5,1208,0,0,3469,3471,3,240,120,0,3470,3468,1,0,0,0,3471,3474,1,0,
        0,0,3472,3470,1,0,0,0,3472,3473,1,0,0,0,3473,3491,1,0,0,0,3474,3472,
        1,0,0,0,3475,3476,5,170,0,0,3476,3477,5,633,0,0,3477,3480,5,658,
        0,0,3478,3481,3,764,382,0,3479,3481,3,810,405,0,3480,3478,1,0,0,
        0,3480,3479,1,0,0,0,3481,3482,1,0,0,0,3482,3487,3,242,121,0,3483,
        3484,5,1208,0,0,3484,3486,3,242,121,0,3485,3483,1,0,0,0,3486,3489,
        1,0,0,0,3487,3485,1,0,0,0,3487,3488,1,0,0,0,3488,3491,1,0,0,0,3489,
        3487,1,0,0,0,3490,3447,1,0,0,0,3490,3465,1,0,0,0,3490,3475,1,0,0,
        0,3491,195,1,0,0,0,3492,3493,5,860,0,0,3493,3498,3,996,498,0,3494,
        3495,5,1208,0,0,3495,3497,3,996,498,0,3496,3494,1,0,0,0,3497,3500,
        1,0,0,0,3498,3496,1,0,0,0,3498,3499,1,0,0,0,3499,197,1,0,0,0,3500,
        3498,1,0,0,0,3501,3523,5,110,0,0,3502,3507,3,810,405,0,3503,3504,
        5,1208,0,0,3504,3506,3,810,405,0,3505,3503,1,0,0,0,3506,3509,1,0,
        0,0,3507,3505,1,0,0,0,3507,3508,1,0,0,0,3508,3510,1,0,0,0,3509,3507,
        1,0,0,0,3510,3514,3,690,345,0,3511,3513,3,710,355,0,3512,3511,1,
        0,0,0,3513,3516,1,0,0,0,3514,3512,1,0,0,0,3514,3515,1,0,0,0,3515,
        3524,1,0,0,0,3516,3514,1,0,0,0,3517,3518,3,816,408,0,3518,3521,5,
        588,0,0,3519,3520,5,159,0,0,3520,3522,3,250,125,0,3521,3519,1,0,
        0,0,3521,3522,1,0,0,0,3522,3524,1,0,0,0,3523,3502,1,0,0,0,3523,3517,
        1,0,0,0,3524,3525,1,0,0,0,3525,3526,5,1206,0,0,3526,199,1,0,0,0,
        3527,3528,5,110,0,0,3528,3533,3,818,409,0,3529,3531,5,268,0,0,3530,
        3529,1,0,0,0,3530,3531,1,0,0,0,3531,3532,1,0,0,0,3532,3534,5,367,
        0,0,3533,3530,1,0,0,0,3533,3534,1,0,0,0,3534,3535,1,0,0,0,3535,3547,
        5,99,0,0,3536,3537,5,475,0,0,3537,3548,5,351,0,0,3538,3539,5,474,
        0,0,3539,3541,5,351,0,0,3540,3542,5,287,0,0,3541,3540,1,0,0,0,3541,
        3542,1,0,0,0,3542,3545,1,0,0,0,3543,3544,5,426,0,0,3544,3546,7,27,
        0,0,3545,3543,1,0,0,0,3545,3546,1,0,0,0,3546,3548,1,0,0,0,3547,3536,
        1,0,0,0,3547,3538,1,0,0,0,3547,3548,1,0,0,0,3548,3549,1,0,0,0,3549,
        3566,5,159,0,0,3550,3552,3,1202,601,0,3551,3550,1,0,0,0,3551,3552,
        1,0,0,0,3552,3554,1,0,0,0,3553,3555,3,1208,604,0,3554,3553,1,0,0,
        0,3554,3555,1,0,0,0,3555,3556,1,0,0,0,3556,3563,3,834,417,0,3557,
        3561,5,159,0,0,3558,3559,5,877,0,0,3559,3562,5,287,0,0,3560,3562,
        5,453,0,0,3561,3558,1,0,0,0,3561,3560,1,0,0,0,3562,3564,1,0,0,0,
        3563,3557,1,0,0,0,3563,3564,1,0,0,0,3564,3567,1,0,0,0,3565,3567,
        3,820,410,0,3566,3551,1,0,0,0,3566,3565,1,0,0,0,3567,3575,1,0,0,
        0,3568,3569,5,306,0,0,3569,3570,3,820,410,0,3570,3573,5,164,0,0,
        3571,3574,3,758,379,0,3572,3574,3,810,405,0,3573,3571,1,0,0,0,3573,
        3572,1,0,0,0,3574,3576,1,0,0,0,3575,3568,1,0,0,0,3575,3576,1,0,0,
        0,3576,3577,1,0,0,0,3577,3578,5,1206,0,0,3578,201,1,0,0,0,3579,3585,
        5,110,0,0,3580,3581,7,28,0,0,3581,3586,5,177,0,0,3582,3583,3,816,
        408,0,3583,3584,5,588,0,0,3584,3586,1,0,0,0,3585,3580,1,0,0,0,3585,
        3582,1,0,0,0,3586,3587,1,0,0,0,3587,3616,5,159,0,0,3588,3593,3,250,
        125,0,3589,3590,5,1208,0,0,3590,3592,3,250,125,0,3591,3589,1,0,0,
        0,3592,3595,1,0,0,0,3593,3591,1,0,0,0,3593,3594,1,0,0,0,3594,3617,
        1,0,0,0,3595,3593,1,0,0,0,3596,3602,5,387,0,0,3597,3602,5,389,0,
        0,3598,3599,5,272,0,0,3599,3602,5,162,0,0,3600,3602,3,816,408,0,
        3601,3596,1,0,0,0,3601,3597,1,0,0,0,3601,3598,1,0,0,0,3601,3600,
        1,0,0,0,3602,3613,1,0,0,0,3603,3609,5,1208,0,0,3604,3610,5,387,0,
        0,3605,3610,5,389,0,0,3606,3607,5,272,0,0,3607,3610,5,162,0,0,3608,
        3610,3,816,408,0,3609,3604,1,0,0,0,3609,3605,1,0,0,0,3609,3606,1,
        0,0,0,3609,3608,1,0,0,0,3610,3612,1,0,0,0,3611,3603,1,0,0,0,3612,
        3615,1,0,0,0,3613,3611,1,0,0,0,3613,3614,1,0,0,0,3614,3617,1,0,0,
        0,3615,3613,1,0,0,0,3616,3588,1,0,0,0,3616,3601,1,0,0,0,3617,3618,
        1,0,0,0,3618,3619,3,174,87,0,3619,203,1,0,0,0,3620,3621,5,497,0,
        0,3621,3622,3,818,409,0,3622,3623,5,99,0,0,3623,3624,5,159,0,0,3624,
        3625,5,310,0,0,3625,3626,3,794,397,0,3626,205,1,0,0,0,3627,3628,
        5,63,0,0,3628,3629,3,818,409,0,3629,207,1,0,0,0,3630,3631,5,107,
        0,0,3631,3632,5,306,0,0,3632,3633,3,820,410,0,3633,209,1,0,0,0,3634,
        3635,7,29,0,0,3635,3636,5,164,0,0,3636,3637,3,792,396,0,3637,3638,
        5,471,0,0,3638,3639,5,93,0,0,3639,3640,5,282,0,0,3640,3641,3,818,
        409,0,3641,211,1,0,0,0,3642,3643,7,30,0,0,3643,3648,3,792,396,0,
        3644,3646,5,20,0,0,3645,3644,1,0,0,0,3645,3646,1,0,0,0,3646,3647,
        1,0,0,0,3647,3649,3,808,404,0,3648,3645,1,0,0,0,3648,3649,1,0,0,
        0,3649,3650,1,0,0,0,3650,3651,5,372,0,0,3651,3656,3,674,337,0,3652,
        3653,5,1208,0,0,3653,3655,3,674,337,0,3654,3652,1,0,0,0,3655,3658,
        1,0,0,0,3656,3654,1,0,0,0,3656,3657,1,0,0,0,3657,3659,1,0,0,0,3658,
        3656,1,0,0,0,3659,3660,5,471,0,0,3660,3661,5,93,0,0,3661,3662,5,
        282,0,0,3662,3663,3,818,409,0,3663,213,1,0,0,0,3664,3665,5,144,0,
        0,3665,3675,3,820,410,0,3666,3667,5,457,0,0,3667,3672,3,810,405,
        0,3668,3669,5,1208,0,0,3669,3671,3,810,405,0,3670,3668,1,0,0,0,3671,
        3674,1,0,0,0,3672,3670,1,0,0,0,3672,3673,1,0,0,0,3673,3676,1,0,0,
        0,3674,3672,1,0,0,0,3675,3666,1,0,0,0,3675,3676,1,0,0,0,3676,215,
        1,0,0,0,3677,3678,5,144,0,0,3678,3679,5,189,0,0,3679,3680,3,820,
        410,0,3680,217,1,0,0,0,3681,3686,5,155,0,0,3682,3684,7,31,0,0,3683,
        3682,1,0,0,0,3683,3684,1,0,0,0,3684,3685,1,0,0,0,3685,3687,5,164,
        0,0,3686,3683,1,0,0,0,3686,3687,1,0,0,0,3687,3688,1,0,0,0,3688,3689,
        3,818,409,0,3689,3690,5,206,0,0,3690,3695,3,810,405,0,3691,3692,
        5,1208,0,0,3692,3694,3,810,405,0,3693,3691,1,0,0,0,3694,3697,1,0,
        0,0,3695,3693,1,0,0,0,3695,3696,1,0,0,0,3696,219,1,0,0,0,3697,3695,
        1,0,0,0,3698,3699,5,288,0,0,3699,3709,3,818,409,0,3700,3701,5,457,
        0,0,3701,3706,3,810,405,0,3702,3703,5,1208,0,0,3703,3705,3,810,405,
        0,3704,3702,1,0,0,0,3705,3708,1,0,0,0,3706,3704,1,0,0,0,3706,3707,
        1,0,0,0,3707,3710,1,0,0,0,3708,3706,1,0,0,0,3709,3700,1,0,0,0,3709,
        3710,1,0,0,0,3710,221,1,0,0,0,3711,3712,5,306,0,0,3712,3713,3,820,
        410,0,3713,3716,5,164,0,0,3714,3717,3,758,379,0,3715,3717,3,810,
        405,0,3716,3714,1,0,0,0,3716,3715,1,0,0,0,3717,223,1,0,0,0,3718,
        3730,5,47,0,0,3719,3721,3,996,498,0,3720,3722,3,226,113,0,3721,3720,
        1,0,0,0,3722,3723,1,0,0,0,3723,3721,1,0,0,0,3723,3724,1,0,0,0,3724,
        3731,1,0,0,0,3725,3727,3,228,114,0,3726,3725,1,0,0,0,3727,3728,1,
        0,0,0,3728,3726,1,0,0,0,3728,3729,1,0,0,0,3729,3731,1,0,0,0,3730,
        3719,1,0,0,0,3730,3726,1,0,0,0,3731,3738,1,0,0,0,3732,3734,5,131,
        0,0,3733,3735,3,174,87,0,3734,3733,1,0,0,0,3735,3736,1,0,0,0,3736,
        3734,1,0,0,0,3736,3737,1,0,0,0,3737,3739,1,0,0,0,3738,3732,1,0,0,
        0,3738,3739,1,0,0,0,3739,3740,1,0,0,0,3740,3741,5,134,0,0,3741,3742,
        5,47,0,0,3742,225,1,0,0,0,3743,3744,5,470,0,0,3744,3745,3,996,498,
        0,3745,3747,5,419,0,0,3746,3748,3,174,87,0,3747,3746,1,0,0,0,3748,
        3749,1,0,0,0,3749,3747,1,0,0,0,3749,3750,1,0,0,0,3750,227,1,0,0,
        0,3751,3752,5,470,0,0,3752,3753,3,994,497,0,3753,3755,5,419,0,0,
        3754,3756,3,174,87,0,3755,3754,1,0,0,0,3756,3757,1,0,0,0,3757,3755,
        1,0,0,0,3757,3758,1,0,0,0,3758,229,1,0,0,0,3759,3760,5,188,0,0,3760,
        3761,3,994,497,0,3761,3763,5,419,0,0,3762,3764,3,174,87,0,3763,3762,
        1,0,0,0,3764,3765,1,0,0,0,3765,3763,1,0,0,0,3765,3766,1,0,0,0,3766,
        3777,1,0,0,0,3767,3768,5,132,0,0,3768,3769,3,994,497,0,3769,3771,
        5,419,0,0,3770,3772,3,174,87,0,3771,3770,1,0,0,0,3772,3773,1,0,0,
        0,3773,3771,1,0,0,0,3773,3774,1,0,0,0,3774,3776,1,0,0,0,3775,3767,
        1,0,0,0,3776,3779,1,0,0,0,3777,3775,1,0,0,0,3777,3778,1,0,0,0,3778,
        3786,1,0,0,0,3779,3777,1,0,0,0,3780,3782,5,131,0,0,3781,3783,3,174,
        87,0,3782,3781,1,0,0,0,3783,3784,1,0,0,0,3784,3782,1,0,0,0,3784,
        3785,1,0,0,0,3785,3787,1,0,0,0,3786,3780,1,0,0,0,3786,3787,1,0,0,
        0,3787,3788,1,0,0,0,3788,3789,5,134,0,0,3789,3790,5,188,0,0,3790,
        231,1,0,0,0,3791,3792,5,472,0,0,3792,3793,3,994,497,0,3793,3795,
        5,122,0,0,3794,3796,3,174,87,0,3795,3794,1,0,0,0,3796,3797,1,0,0,
        0,3797,3795,1,0,0,0,3797,3798,1,0,0,0,3798,3799,1,0,0,0,3799,3800,
        5,134,0,0,3800,3801,5,472,0,0,3801,233,1,0,0,0,3802,3804,5,232,0,
        0,3803,3805,3,174,87,0,3804,3803,1,0,0,0,3805,3806,1,0,0,0,3806,
        3804,1,0,0,0,3806,3807,1,0,0,0,3807,3808,1,0,0,0,3808,3809,5,134,
        0,0,3809,3810,5,232,0,0,3810,235,1,0,0,0,3811,3812,5,159,0,0,3812,
        3813,3,810,405,0,3813,3818,5,20,0,0,3814,3815,3,818,409,0,3815,3816,
        5,99,0,0,3816,3817,5,159,0,0,3817,3819,1,0,0,0,3818,3814,1,0,0,0,
        3818,3819,1,0,0,0,3819,3821,1,0,0,0,3820,3822,3,1202,601,0,3821,
        3820,1,0,0,0,3821,3822,1,0,0,0,3822,3824,1,0,0,0,3823,3825,3,1208,
        604,0,3824,3823,1,0,0,0,3824,3825,1,0,0,0,3825,3826,1,0,0,0,3826,
        3827,3,834,417,0,3827,3829,5,122,0,0,3828,3830,3,174,87,0,3829,3828,
        1,0,0,0,3830,3831,1,0,0,0,3831,3829,1,0,0,0,3831,3832,1,0,0,0,3832,
        3833,1,0,0,0,3833,3834,5,134,0,0,3834,3835,5,159,0,0,3835,237,1,
        0,0,0,3836,3838,5,339,0,0,3837,3839,3,174,87,0,3838,3837,1,0,0,0,
        3839,3840,1,0,0,0,3840,3838,1,0,0,0,3840,3841,1,0,0,0,3841,3842,
        1,0,0,0,3842,3843,5,449,0,0,3843,3844,3,994,497,0,3844,3845,5,134,
        0,0,3845,3846,5,339,0,0,3846,239,1,0,0,0,3847,3848,3,810,405,0,3848,
        3849,5,1224,0,0,3849,3850,3,246,123,0,3850,241,1,0,0,0,3851,3852,
        3,810,405,0,3852,3853,5,1224,0,0,3853,3854,3,244,122,0,3854,243,
        1,0,0,0,3855,3856,7,32,0,0,3856,245,1,0,0,0,3857,3858,7,33,0,0,3858,
        247,1,0,0,0,3859,3862,3,816,408,0,3860,3862,3,250,125,0,3861,3859,
        1,0,0,0,3861,3860,1,0,0,0,3862,249,1,0,0,0,3863,3865,5,934,0,0,3864,
        3866,5,459,0,0,3865,3864,1,0,0,0,3865,3866,1,0,0,0,3866,3867,1,0,
        0,0,3867,3868,3,758,379,0,3868,251,1,0,0,0,3869,3871,5,86,0,0,3870,
        3872,5,324,0,0,3871,3870,1,0,0,0,3871,3872,1,0,0,0,3872,3873,1,0,
        0,0,3873,3881,5,468,0,0,3874,3881,5,100,0,0,3875,3877,5,340,0,0,
        3876,3878,5,324,0,0,3877,3876,1,0,0,0,3877,3878,1,0,0,0,3878,3879,
        1,0,0,0,3879,3881,5,468,0,0,3880,3869,1,0,0,0,3880,3874,1,0,0,0,
        3880,3875,1,0,0,0,3881,3882,1,0,0,0,3882,3884,3,792,396,0,3883,3885,
        3,1182,591,0,3884,3883,1,0,0,0,3884,3885,1,0,0,0,3885,3886,1,0,0,
        0,3886,3888,5,20,0,0,3887,3889,3,1202,601,0,3888,3887,1,0,0,0,3888,
        3889,1,0,0,0,3889,3891,1,0,0,0,3890,3892,3,254,127,0,3891,3890,1,
        0,0,0,3891,3892,1,0,0,0,3892,3894,1,0,0,0,3893,3895,3,1208,604,0,
        3894,3893,1,0,0,0,3894,3895,1,0,0,0,3895,3896,1,0,0,0,3896,3897,
        3,834,417,0,3897,253,1,0,0,0,3898,3899,5,20,0,0,3899,3900,5,282,
        0,0,3900,3901,3,1034,517,0,3901,3912,5,1213,0,0,3902,3906,5,104,
        0,0,3903,3904,5,24,0,0,3904,3905,5,421,0,0,3905,3907,5,480,0,0,3906,
        3903,1,0,0,0,3906,3907,1,0,0,0,3907,3913,1,0,0,0,3908,3910,5,422,
        0,0,3909,3911,3,752,376,0,3910,3909,1,0,0,0,3910,3911,1,0,0,0,3911,
        3913,1,0,0,0,3912,3902,1,0,0,0,3912,3908,1,0,0,0,3913,3914,1,0,0,
        0,3914,3917,3,996,498,0,3915,3916,5,1208,0,0,3916,3918,3,790,395,
        0,3917,3915,1,0,0,0,3917,3918,1,0,0,0,3918,3919,1,0,0,0,3919,3920,
        5,1214,0,0,3920,255,1,0,0,0,3921,3922,5,86,0,0,3922,3925,5,102,0,
        0,3923,3925,5,51,0,0,3924,3921,1,0,0,0,3924,3923,1,0,0,0,3925,3926,
        1,0,0,0,3926,3929,3,800,400,0,3927,3928,5,164,0,0,3928,3930,3,800,
        400,0,3929,3927,1,0,0,0,3929,3930,1,0,0,0,3930,3931,1,0,0,0,3931,
        3932,5,20,0,0,3932,3937,3,258,129,0,3933,3934,5,1208,0,0,3934,3936,
        3,258,129,0,3935,3933,1,0,0,0,3936,3939,1,0,0,0,3937,3935,1,0,0,
        0,3937,3938,1,0,0,0,3938,257,1,0,0,0,3939,3937,1,0,0,0,3940,3950,
        3,576,288,0,3941,3942,5,5,0,0,3942,3943,5,1224,0,0,3943,3950,3,758,
        379,0,3944,3950,3,580,290,0,3945,3950,3,582,291,0,3946,3950,3,584,
        292,0,3947,3950,3,586,293,0,3948,3950,3,588,294,0,3949,3940,1,0,
        0,0,3949,3941,1,0,0,0,3949,3944,1,0,0,0,3949,3945,1,0,0,0,3949,3946,
        1,0,0,0,3949,3947,1,0,0,0,3949,3948,1,0,0,0,3950,259,1,0,0,0,3951,
        3952,5,86,0,0,3952,3957,3,262,131,0,3953,3954,5,1208,0,0,3954,3956,
        3,262,131,0,3955,3953,1,0,0,0,3956,3959,1,0,0,0,3957,3955,1,0,0,
        0,3957,3958,1,0,0,0,3958,3960,1,0,0,0,3959,3957,1,0,0,0,3960,3962,
        5,286,0,0,3961,3963,5,417,0,0,3962,3961,1,0,0,0,3962,3963,1,0,0,
        0,3963,3964,1,0,0,0,3964,3965,3,792,396,0,3965,261,1,0,0,0,3966,
        3968,5,448,0,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,
        0,0,3969,3971,5,192,0,0,3970,3972,3,788,394,0,3971,3970,1,0,0,0,
        3971,3972,1,0,0,0,3972,3974,1,0,0,0,3973,3975,5,13,0,0,3974,3973,
        1,0,0,0,3974,3975,1,0,0,0,3975,3976,1,0,0,0,3976,3977,5,1213,0,0,
        3977,3982,3,788,394,0,3978,3979,5,1208,0,0,3979,3981,3,788,394,0,
        3980,3978,1,0,0,0,3981,3984,1,0,0,0,3982,3980,1,0,0,0,3982,3983,
        1,0,0,0,3983,3985,1,0,0,0,3984,3982,1,0,0,0,3985,3987,5,1214,0,0,
        3986,3988,3,570,285,0,3987,3986,1,0,0,0,3987,3988,1,0,0,0,3988,3990,
        1,0,0,0,3989,3991,3,568,284,0,3990,3989,1,0,0,0,3990,3991,1,0,0,
        0,3991,263,1,0,0,0,3992,3993,5,86,0,0,3993,3994,5,210,0,0,3994,3995,
        5,192,0,0,3995,3996,3,792,396,0,3996,4001,3,572,286,0,3997,3998,
        5,1208,0,0,3998,4000,3,572,286,0,3999,3997,1,0,0,0,4000,4003,1,0,
        0,0,4001,3999,1,0,0,0,4001,4002,1,0,0,0,4002,4004,1,0,0,0,4003,4001,
        1,0,0,0,4004,4005,5,20,0,0,4005,4016,3,266,133,0,4006,4013,3,328,
        164,0,4007,4009,5,1208,0,0,4008,4007,1,0,0,0,4008,4009,1,0,0,0,4009,
        4010,1,0,0,0,4010,4012,3,328,164,0,4011,4008,1,0,0,0,4012,4015,1,
        0,0,0,4013,4011,1,0,0,0,4013,4014,1,0,0,0,4014,4017,1,0,0,0,4015,
        4013,1,0,0,0,4016,4006,1,0,0,0,4016,4017,1,0,0,0,4017,265,1,0,0,
        0,4018,4069,7,34,0,0,4019,4024,3,268,134,0,4020,4021,5,1208,0,0,
        4021,4023,3,268,134,0,4022,4020,1,0,0,0,4023,4026,1,0,0,0,4024,4022,
        1,0,0,0,4024,4025,1,0,0,0,4025,4070,1,0,0,0,4026,4024,1,0,0,0,4027,
        4028,5,1213,0,0,4028,4033,3,268,134,0,4029,4030,5,1208,0,0,4030,
        4032,3,268,134,0,4031,4029,1,0,0,0,4032,4035,1,0,0,0,4033,4031,1,
        0,0,0,4033,4034,1,0,0,0,4034,4036,1,0,0,0,4035,4033,1,0,0,0,4036,
        4037,5,1214,0,0,4037,4038,5,1208,0,0,4038,4039,5,1213,0,0,4039,4044,
        3,268,134,0,4040,4041,5,1208,0,0,4041,4043,3,268,134,0,4042,4040,
        1,0,0,0,4043,4046,1,0,0,0,4044,4042,1,0,0,0,4044,4045,1,0,0,0,4045,
        4047,1,0,0,0,4046,4044,1,0,0,0,4047,4048,5,1214,0,0,4048,4070,1,
        0,0,0,4049,4051,7,35,0,0,4050,4049,1,0,0,0,4050,4051,1,0,0,0,4051,
        4052,1,0,0,0,4052,4053,5,1213,0,0,4053,4058,3,268,134,0,4054,4055,
        5,1208,0,0,4055,4057,3,268,134,0,4056,4054,1,0,0,0,4057,4060,1,0,
        0,0,4058,4056,1,0,0,0,4058,4059,1,0,0,0,4059,4061,1,0,0,0,4060,4058,
        1,0,0,0,4061,4067,5,1214,0,0,4062,4064,5,268,0,0,4063,4062,1,0,0,
        0,4063,4064,1,0,0,0,4064,4065,1,0,0,0,4065,4066,5,543,0,0,4066,4068,
        5,72,0,0,4067,4063,1,0,0,0,4067,4068,1,0,0,0,4068,4070,1,0,0,0,4069,
        4019,1,0,0,0,4069,4027,1,0,0,0,4069,4050,1,0,0,0,4070,4071,1,0,0,
        0,4071,4072,5,164,0,0,4072,4077,3,272,136,0,4073,4074,5,1208,0,0,
        4074,4076,3,272,136,0,4075,4073,1,0,0,0,4076,4079,1,0,0,0,4077,4075,
        1,0,0,0,4077,4078,1,0,0,0,4078,4081,1,0,0,0,4079,4077,1,0,0,0,4080,
        4082,3,952,476,0,4081,4080,1,0,0,0,4081,4082,1,0,0,0,4082,4083,1,
        0,0,0,4083,4084,9,0,0,0,4084,4085,5,174,0,0,4085,4086,5,42,0,0,4086,
        4087,3,276,138,0,4087,4088,5,291,0,0,4088,4089,5,42,0,0,4089,4090,
        3,276,138,0,4090,267,1,0,0,0,4091,4094,3,784,392,0,4092,4094,3,270,
        135,0,4093,4091,1,0,0,0,4093,4092,1,0,0,0,4094,269,1,0,0,0,4095,
        4114,3,996,498,0,4096,4097,5,403,0,0,4097,4098,5,1213,0,0,4098,4099,
        3,996,498,0,4099,4100,5,1214,0,0,4100,4114,1,0,0,0,4101,4102,7,36,
        0,0,4102,4103,5,1213,0,0,4103,4104,3,996,498,0,4104,4105,5,1214,
        0,0,4105,4114,1,0,0,0,4106,4107,5,152,0,0,4107,4108,5,1213,0,0,4108,
        4109,7,37,0,0,4109,4110,5,164,0,0,4110,4111,3,996,498,0,4111,4112,
        5,1214,0,0,4112,4114,1,0,0,0,4113,4095,1,0,0,0,4113,4096,1,0,0,0,
        4113,4101,1,0,0,0,4113,4106,1,0,0,0,4114,4119,1,0,0,0,4115,4117,
        5,20,0,0,4116,4115,1,0,0,0,4116,4117,1,0,0,0,4117,4118,1,0,0,0,4118,
        4120,3,808,404,0,4119,4116,1,0,0,0,4119,4120,1,0,0,0,4120,271,1,
        0,0,0,4121,4126,3,792,396,0,4122,4124,5,20,0,0,4123,4122,1,0,0,0,
        4123,4124,1,0,0,0,4124,4125,1,0,0,0,4125,4127,3,808,404,0,4126,4123,
        1,0,0,0,4126,4127,1,0,0,0,4127,4130,1,0,0,0,4128,4130,3,274,137,
        0,4129,4121,1,0,0,0,4129,4128,1,0,0,0,4130,273,1,0,0,0,4131,4132,
        6,137,-1,0,4132,4133,5,1213,0,0,4133,4134,3,274,137,0,4134,4135,
        5,1214,0,0,4135,4144,1,0,0,0,4136,4141,3,792,396,0,4137,4139,5,20,
        0,0,4138,4137,1,0,0,0,4138,4139,1,0,0,0,4139,4140,1,0,0,0,4140,4142,
        3,808,404,0,4141,4138,1,0,0,0,4141,4142,1,0,0,0,4142,4144,1,0,0,
        0,4143,4131,1,0,0,0,4143,4136,1,0,0,0,4144,4160,1,0,0,0,4145,4151,
        10,2,0,0,4146,4152,5,194,0,0,4147,4149,7,38,0,0,4148,4150,5,294,
        0,0,4149,4148,1,0,0,0,4149,4150,1,0,0,0,4150,4152,1,0,0,0,4151,4146,
        1,0,0,0,4151,4147,1,0,0,0,4151,4152,1,0,0,0,4152,4153,1,0,0,0,4153,
        4154,5,210,0,0,4154,4155,3,274,137,0,4155,4156,5,286,0,0,4156,4157,
        3,994,497,0,4157,4159,1,0,0,0,4158,4145,1,0,0,0,4159,4162,1,0,0,
        0,4160,4158,1,0,0,0,4160,4161,1,0,0,0,4161,275,1,0,0,0,4162,4160,
        1,0,0,0,4163,4168,3,996,498,0,4164,4165,5,1208,0,0,4165,4167,3,996,
        498,0,4166,4164,1,0,0,0,4167,4170,1,0,0,0,4168,4166,1,0,0,0,4168,
        4169,1,0,0,0,4169,277,1,0,0,0,4170,4168,1,0,0,0,4171,4172,5,86,0,
        0,4172,4173,5,311,0,0,4173,4183,3,806,403,0,4174,4175,5,20,0,0,4175,
        4180,3,280,140,0,4176,4177,5,1208,0,0,4177,4179,3,280,140,0,4178,
        4176,1,0,0,0,4179,4182,1,0,0,0,4180,4178,1,0,0,0,4180,4181,1,0,0,
        0,4181,4184,1,0,0,0,4182,4180,1,0,0,0,4183,4174,1,0,0,0,4183,4184,
        1,0,0,0,4184,279,1,0,0,0,4185,4186,5,5,0,0,4186,4196,5,1224,0,0,
        4187,4192,3,758,379,0,4188,4189,5,1208,0,0,4189,4191,3,758,379,0,
        4190,4188,1,0,0,0,4191,4194,1,0,0,0,4192,4190,1,0,0,0,4192,4193,
        1,0,0,0,4193,4197,1,0,0,0,4194,4192,1,0,0,0,4195,4197,5,274,0,0,
        4196,4187,1,0,0,0,4196,4195,1,0,0,0,4197,4278,1,0,0,0,4198,4278,
        3,580,290,0,4199,4200,5,111,0,0,4200,4201,5,102,0,0,4201,4202,5,
        1224,0,0,4202,4278,3,800,400,0,4203,4204,7,39,0,0,4204,4210,5,1224,
        0,0,4205,4207,3,996,498,0,4206,4208,5,45,0,0,4207,4206,1,0,0,0,4207,
        4208,1,0,0,0,4208,4211,1,0,0,0,4209,4211,5,274,0,0,4210,4205,1,0,
        0,0,4210,4209,1,0,0,0,4211,4278,1,0,0,0,4212,4214,5,299,0,0,4213,
        4215,5,539,0,0,4214,4213,1,0,0,0,4214,4215,1,0,0,0,4215,4216,1,0,
        0,0,4216,4229,5,1224,0,0,4217,4218,5,1213,0,0,4218,4223,3,282,141,
        0,4219,4220,5,1208,0,0,4220,4222,3,282,141,0,4221,4219,1,0,0,0,4222,
        4225,1,0,0,0,4223,4221,1,0,0,0,4223,4224,1,0,0,0,4224,4226,1,0,0,
        0,4225,4223,1,0,0,0,4226,4227,5,1214,0,0,4227,4230,1,0,0,0,4228,
        4230,5,274,0,0,4229,4217,1,0,0,0,4229,4228,1,0,0,0,4230,4278,1,0,
        0,0,4231,4232,5,870,0,0,4232,4233,5,1224,0,0,4233,4240,3,758,379,
        0,4234,4236,5,1213,0,0,4235,4237,5,272,0,0,4236,4235,1,0,0,0,4236,
        4237,1,0,0,0,4237,4238,1,0,0,0,4238,4239,5,111,0,0,4239,4241,5,1214,
        0,0,4240,4234,1,0,0,0,4240,4241,1,0,0,0,4241,4278,1,0,0,0,4242,4243,
        5,697,0,0,4243,4244,5,870,0,0,4244,4245,5,460,0,0,4245,4246,5,1224,
        0,0,4246,4278,3,758,379,0,4247,4248,5,432,0,0,4248,4257,5,1213,0,
        0,4249,4254,3,416,208,0,4250,4251,5,1208,0,0,4251,4253,3,416,208,
        0,4252,4250,1,0,0,0,4253,4256,1,0,0,0,4254,4252,1,0,0,0,4254,4255,
        1,0,0,0,4255,4258,1,0,0,0,4256,4254,1,0,0,0,4257,4249,1,0,0,0,4257,
        4258,1,0,0,0,4258,4259,1,0,0,0,4259,4278,5,1214,0,0,4260,4261,5,
        595,0,0,4261,4262,5,311,0,0,4262,4265,5,1224,0,0,4263,4266,3,788,
        394,0,4264,4266,5,274,0,0,4265,4263,1,0,0,0,4265,4264,1,0,0,0,4266,
        4278,1,0,0,0,4267,4268,5,74,0,0,4268,4269,5,1224,0,0,4269,4274,3,
        418,209,0,4270,4271,5,1208,0,0,4271,4273,3,418,209,0,4272,4270,1,
        0,0,0,4273,4276,1,0,0,0,4274,4272,1,0,0,0,4274,4275,1,0,0,0,4275,
        4278,1,0,0,0,4276,4274,1,0,0,0,4277,4185,1,0,0,0,4277,4198,1,0,0,
        0,4277,4199,1,0,0,0,4277,4203,1,0,0,0,4277,4212,1,0,0,0,4277,4231,
        1,0,0,0,4277,4242,1,0,0,0,4277,4247,1,0,0,0,4277,4260,1,0,0,0,4277,
        4267,1,0,0,0,4278,281,1,0,0,0,4279,4280,5,663,0,0,4280,4283,5,1224,
        0,0,4281,4284,3,996,498,0,4282,4284,5,274,0,0,4283,4281,1,0,0,0,
        4283,4282,1,0,0,0,4284,4334,1,0,0,0,4285,4286,5,771,0,0,4286,4289,
        5,1224,0,0,4287,4290,3,996,498,0,4288,4290,5,274,0,0,4289,4287,1,
        0,0,0,4289,4288,1,0,0,0,4290,4334,1,0,0,0,4291,4292,5,758,0,0,4292,
        4295,5,1224,0,0,4293,4296,3,996,498,0,4294,4296,5,274,0,0,4295,4293,
        1,0,0,0,4295,4294,1,0,0,0,4296,4334,1,0,0,0,4297,4298,5,634,0,0,
        4298,4301,5,1224,0,0,4299,4302,3,788,394,0,4300,4302,5,274,0,0,4301,
        4299,1,0,0,0,4301,4300,1,0,0,0,4302,4334,1,0,0,0,4303,4304,5,932,
        0,0,4304,4307,5,1224,0,0,4305,4308,3,788,394,0,4306,4308,5,274,0,
        0,4307,4305,1,0,0,0,4307,4306,1,0,0,0,4308,4334,1,0,0,0,4309,4310,
        5,760,0,0,4310,4313,5,1224,0,0,4311,4314,3,996,498,0,4312,4314,5,
        274,0,0,4313,4311,1,0,0,0,4313,4312,1,0,0,0,4314,4334,1,0,0,0,4315,
        4316,5,744,0,0,4316,4319,5,1224,0,0,4317,4320,3,996,498,0,4318,4320,
        5,274,0,0,4319,4317,1,0,0,0,4319,4318,1,0,0,0,4320,4334,1,0,0,0,
        4321,4322,5,890,0,0,4322,4325,5,1224,0,0,4323,4326,3,996,498,0,4324,
        4326,5,274,0,0,4325,4323,1,0,0,0,4325,4324,1,0,0,0,4326,4334,1,0,
        0,0,4327,4328,5,886,0,0,4328,4331,5,1224,0,0,4329,4332,3,788,394,
        0,4330,4332,5,274,0,0,4331,4329,1,0,0,0,4331,4330,1,0,0,0,4332,4334,
        1,0,0,0,4333,4279,1,0,0,0,4333,4285,1,0,0,0,4333,4291,1,0,0,0,4333,
        4297,1,0,0,0,4333,4303,1,0,0,0,4333,4309,1,0,0,0,4333,4315,1,0,0,
        0,4333,4321,1,0,0,0,4333,4327,1,0,0,0,4334,283,1,0,0,0,4335,4336,
        5,86,0,0,4336,4337,5,160,0,0,4337,4339,5,917,0,0,4338,4340,3,1072,
        536,0,4339,4338,1,0,0,0,4339,4340,1,0,0,0,4340,4341,1,0,0,0,4341,
        4343,3,788,394,0,4342,4344,3,286,143,0,4343,4342,1,0,0,0,4343,4344,
        1,0,0,0,4344,4346,1,0,0,0,4345,4347,3,288,144,0,4346,4345,1,0,0,
        0,4346,4347,1,0,0,0,4347,4358,1,0,0,0,4348,4351,3,294,147,0,4349,
        4350,5,1208,0,0,4350,4352,3,296,148,0,4351,4349,1,0,0,0,4351,4352,
        1,0,0,0,4352,4359,1,0,0,0,4353,4356,3,296,148,0,4354,4355,5,1208,
        0,0,4355,4357,3,294,147,0,4356,4354,1,0,0,0,4356,4357,1,0,0,0,4357,
        4359,1,0,0,0,4358,4348,1,0,0,0,4358,4353,1,0,0,0,4358,4359,1,0,0,
        0,4359,285,1,0,0,0,4360,4361,5,151,0,0,4361,4363,5,910,0,0,4362,
        4364,7,18,0,0,4363,4362,1,0,0,0,4363,4364,1,0,0,0,4364,4365,1,0,
        0,0,4365,4366,5,1130,0,0,4366,4367,3,790,395,0,4367,287,1,0,0,0,
        4368,4370,5,457,0,0,4369,4371,3,290,145,0,4370,4369,1,0,0,0,4371,
        4372,1,0,0,0,4372,4370,1,0,0,0,4372,4373,1,0,0,0,4373,289,1,0,0,
        0,4374,4375,3,300,150,0,4375,4376,5,1213,0,0,4376,4377,3,996,498,
        0,4377,4378,5,1214,0,0,4378,291,1,0,0,0,4379,4381,3,796,398,0,4380,
        4382,3,288,144,0,4381,4380,1,0,0,0,4381,4382,1,0,0,0,4382,293,1,
        0,0,0,4383,4384,5,122,0,0,4384,4385,5,699,0,0,4385,4386,3,298,149,
        0,4386,295,1,0,0,0,4387,4388,5,122,0,0,4388,4389,5,664,0,0,4389,
        4390,3,298,149,0,4390,297,1,0,0,0,4391,4392,5,474,0,0,4392,4393,
        3,292,146,0,4393,299,1,0,0,0,4394,4395,7,40,0,0,4395,301,1,0,0,0,
        4396,4397,5,86,0,0,4397,4398,5,178,0,0,4398,4399,5,192,0,0,4399,
        4404,3,792,396,0,4400,4401,5,1208,0,0,4401,4403,3,572,286,0,4402,
        4400,1,0,0,0,4403,4406,1,0,0,0,4404,4402,1,0,0,0,4404,4405,1,0,0,
        0,4405,4407,1,0,0,0,4406,4404,1,0,0,0,4407,4408,5,1213,0,0,4408,
        4413,3,788,394,0,4409,4410,5,1208,0,0,4410,4412,3,788,394,0,4411,
        4409,1,0,0,0,4412,4415,1,0,0,0,4413,4411,1,0,0,0,4413,4414,1,0,0,
        0,4414,4416,1,0,0,0,4415,4413,1,0,0,0,4416,4417,5,1214,0,0,4417,
        4418,5,286,0,0,4418,4429,3,792,396,0,4419,4420,5,42,0,0,4420,4421,
        5,1213,0,0,4421,4426,3,788,394,0,4422,4423,5,1208,0,0,4423,4425,
        3,788,394,0,4424,4422,1,0,0,0,4425,4428,1,0,0,0,4426,4424,1,0,0,
        0,4426,4427,1,0,0,0,4427,4430,1,0,0,0,4428,4426,1,0,0,0,4429,4419,
        1,0,0,0,4429,4430,1,0,0,0,4430,4450,1,0,0,0,4431,4432,5,291,0,0,
        4432,4448,5,42,0,0,4433,4449,5,460,0,0,4434,4436,7,41,0,0,4435,4434,
        1,0,0,0,4435,4436,1,0,0,0,4436,4437,1,0,0,0,4437,4438,5,1213,0,0,
        4438,4443,3,788,394,0,4439,4440,5,1208,0,0,4440,4442,3,788,394,0,
        4441,4439,1,0,0,0,4442,4445,1,0,0,0,4443,4441,1,0,0,0,4443,4444,
        1,0,0,0,4444,4446,1,0,0,0,4445,4443,1,0,0,0,4446,4447,5,1214,0,0,
        4447,4449,1,0,0,0,4448,4433,1,0,0,0,4448,4435,1,0,0,0,4449,4451,
        1,0,0,0,4450,4431,1,0,0,0,4450,4451,1,0,0,0,4451,303,1,0,0,0,4452,
        4454,5,86,0,0,4453,4455,5,151,0,0,4454,4453,1,0,0,0,4454,4455,1,
        0,0,0,4455,4456,1,0,0,0,4456,4457,5,357,0,0,4457,4458,3,804,402,
        0,4458,305,1,0,0,0,4459,4466,3,308,154,0,4460,4466,3,310,155,0,4461,
        4466,3,312,156,0,4462,4466,3,314,157,0,4463,4466,3,316,158,0,4464,
        4466,3,318,159,0,4465,4459,1,0,0,0,4465,4460,1,0,0,0,4465,4461,1,
        0,0,0,4465,4462,1,0,0,0,4465,4463,1,0,0,0,4465,4464,1,0,0,0,4466,
        307,1,0,0,0,4467,4469,5,86,0,0,4468,4470,3,320,160,0,4469,4468,1,
        0,0,0,4469,4470,1,0,0,0,4470,4471,1,0,0,0,4471,4474,5,406,0,0,4472,
        4474,5,90,0,0,4473,4467,1,0,0,0,4473,4472,1,0,0,0,4474,4475,1,0,
        0,0,4475,4480,3,792,396,0,4476,4477,5,1208,0,0,4477,4479,3,322,161,
        0,4478,4476,1,0,0,0,4479,4482,1,0,0,0,4480,4478,1,0,0,0,4480,4481,
        1,0,0,0,4481,4483,1,0,0,0,4482,4480,1,0,0,0,4483,4484,5,1213,0,0,
        4484,4489,3,324,162,0,4485,4486,5,1208,0,0,4486,4488,3,324,162,0,
        4487,4485,1,0,0,0,4488,4491,1,0,0,0,4489,4487,1,0,0,0,4489,4490,
        1,0,0,0,4490,4492,1,0,0,0,4491,4489,1,0,0,0,4492,4503,5,1214,0,0,
        4493,4500,3,328,164,0,4494,4496,5,1208,0,0,4495,4494,1,0,0,0,4495,
        4496,1,0,0,0,4496,4497,1,0,0,0,4497,4499,3,328,164,0,4498,4495,1,
        0,0,0,4499,4502,1,0,0,0,4500,4498,1,0,0,0,4500,4501,1,0,0,0,4501,
        4504,1,0,0,0,4502,4500,1,0,0,0,4503,4493,1,0,0,0,4503,4504,1,0,0,
        0,4504,4506,1,0,0,0,4505,4507,3,340,170,0,4506,4505,1,0,0,0,4506,
        4507,1,0,0,0,4507,309,1,0,0,0,4508,4510,5,86,0,0,4509,4511,3,320,
        160,0,4510,4509,1,0,0,0,4510,4511,1,0,0,0,4511,4512,1,0,0,0,4512,
        4515,5,406,0,0,4513,4515,5,90,0,0,4514,4508,1,0,0,0,4514,4513,1,
        0,0,0,4515,4516,1,0,0,0,4516,4521,3,792,396,0,4517,4518,5,1208,0,
        0,4518,4520,3,322,161,0,4519,4517,1,0,0,0,4520,4523,1,0,0,0,4521,
        4519,1,0,0,0,4521,4522,1,0,0,0,4522,4535,1,0,0,0,4523,4521,1,0,0,
        0,4524,4525,5,1213,0,0,4525,4530,3,326,163,0,4526,4527,5,1208,0,
        0,4527,4529,3,326,163,0,4528,4526,1,0,0,0,4529,4532,1,0,0,0,4530,
        4528,1,0,0,0,4530,4531,1,0,0,0,4531,4533,1,0,0,0,4532,4530,1,0,0,
        0,4533,4534,5,1214,0,0,4534,4536,1,0,0,0,4535,4524,1,0,0,0,4535,
        4536,1,0,0,0,4536,4537,1,0,0,0,4537,4546,5,20,0,0,4538,4547,3,792,
        396,0,4539,4541,5,1213,0,0,4540,4542,3,1208,604,0,4541,4540,1,0,
        0,0,4541,4542,1,0,0,0,4542,4543,1,0,0,0,4543,4544,3,834,417,0,4544,
        4545,5,1214,0,0,4545,4547,1,0,0,0,4546,4538,1,0,0,0,4546,4539,1,
        0,0,0,4547,4548,1,0,0,0,4548,4550,5,474,0,0,4549,4551,5,268,0,0,
        4550,4549,1,0,0,0,4550,4551,1,0,0,0,4551,4552,1,0,0,0,4552,4558,
        5,606,0,0,4553,4555,5,16,0,0,4554,4556,5,268,0,0,4555,4554,1,0,0,
        0,4555,4556,1,0,0,0,4556,4557,1,0,0,0,4557,4559,7,14,0,0,4558,4553,
        1,0,0,0,4558,4559,1,0,0,0,4559,4570,1,0,0,0,4560,4567,3,328,164,
        0,4561,4563,5,1208,0,0,4562,4561,1,0,0,0,4562,4563,1,0,0,0,4563,
        4564,1,0,0,0,4564,4566,3,328,164,0,4565,4562,1,0,0,0,4566,4569,1,
        0,0,0,4567,4565,1,0,0,0,4567,4568,1,0,0,0,4568,4571,1,0,0,0,4569,
        4567,1,0,0,0,4570,4560,1,0,0,0,4570,4571,1,0,0,0,4571,4573,1,0,0,
        0,4572,4574,3,340,170,0,4573,4572,1,0,0,0,4573,4574,1,0,0,0,4574,
        311,1,0,0,0,4575,4577,5,86,0,0,4576,4578,3,320,160,0,4577,4576,1,
        0,0,0,4577,4578,1,0,0,0,4578,4579,1,0,0,0,4579,4582,5,406,0,0,4580,
        4582,5,90,0,0,4581,4575,1,0,0,0,4581,4580,1,0,0,0,4582,4583,1,0,
        0,0,4583,4584,3,792,396,0,4584,4585,5,1208,0,0,4585,4590,5,317,0,
        0,4586,4587,5,1208,0,0,4587,4589,3,322,161,0,4588,4586,1,0,0,0,4589,
        4592,1,0,0,0,4590,4588,1,0,0,0,4590,4591,1,0,0,0,4591,4593,1,0,0,
        0,4592,4590,1,0,0,0,4593,4594,5,1213,0,0,4594,4599,3,330,165,0,4595,
        4596,5,1208,0,0,4596,4598,3,324,162,0,4597,4595,1,0,0,0,4598,4601,
        1,0,0,0,4599,4597,1,0,0,0,4599,4600,1,0,0,0,4600,4606,1,0,0,0,4601,
        4599,1,0,0,0,4602,4603,5,1208,0,0,4603,4605,3,356,178,0,4604,4602,
        1,0,0,0,4605,4608,1,0,0,0,4606,4604,1,0,0,0,4606,4607,1,0,0,0,4607,
        4609,1,0,0,0,4608,4606,1,0,0,0,4609,4620,5,1214,0,0,4610,4617,3,
        328,164,0,4611,4613,5,1208,0,0,4612,4611,1,0,0,0,4612,4613,1,0,0,
        0,4613,4614,1,0,0,0,4614,4616,3,328,164,0,4615,4612,1,0,0,0,4616,
        4619,1,0,0,0,4617,4615,1,0,0,0,4617,4618,1,0,0,0,4618,4621,1,0,0,
        0,4619,4617,1,0,0,0,4620,4610,1,0,0,0,4620,4621,1,0,0,0,4621,313,
        1,0,0,0,4622,4624,5,86,0,0,4623,4625,7,42,0,0,4624,4623,1,0,0,0,
        4624,4625,1,0,0,0,4625,4626,1,0,0,0,4626,4627,5,687,0,0,4627,4628,
        5,417,0,0,4628,4629,5,428,0,0,4629,4630,5,406,0,0,4630,4635,3,792,
        396,0,4631,4632,5,1208,0,0,4632,4634,3,322,161,0,4633,4631,1,0,0,
        0,4634,4637,1,0,0,0,4635,4633,1,0,0,0,4635,4636,1,0,0,0,4636,4638,
        1,0,0,0,4637,4635,1,0,0,0,4638,4639,5,1213,0,0,4639,4640,5,1127,
        0,0,4640,4642,5,43,0,0,4641,4643,3,722,361,0,4642,4641,1,0,0,0,4642,
        4643,1,0,0,0,4643,4644,1,0,0,0,4644,4645,5,1208,0,0,4645,4646,5,
        914,0,0,4646,4651,5,202,0,0,4647,4648,5,1208,0,0,4648,4650,3,324,
        162,0,4649,4647,1,0,0,0,4650,4653,1,0,0,0,4651,4649,1,0,0,0,4651,
        4652,1,0,0,0,4652,4654,1,0,0,0,4653,4651,1,0,0,0,4654,4656,5,1214,
        0,0,4655,4657,3,340,170,0,4656,4655,1,0,0,0,4656,4657,1,0,0,0,4657,
        315,1,0,0,0,4658,4660,5,86,0,0,4659,4661,5,261,0,0,4660,4659,1,0,
        0,0,4660,4661,1,0,0,0,4661,4662,1,0,0,0,4662,4663,5,160,0,0,4663,
        4664,5,406,0,0,4664,4669,3,792,396,0,4665,4666,5,1208,0,0,4666,4668,
        3,322,161,0,4667,4665,1,0,0,0,4668,4671,1,0,0,0,4669,4667,1,0,0,
        0,4669,4670,1,0,0,0,4670,4674,1,0,0,0,4671,4669,1,0,0,0,4672,4673,
        5,1208,0,0,4673,4675,3,332,166,0,4674,4672,1,0,0,0,4674,4675,1,0,
        0,0,4675,4692,1,0,0,0,4676,4677,5,1213,0,0,4677,4678,3,334,167,0,
        4678,4688,5,1208,0,0,4679,4689,3,336,168,0,4680,4685,3,324,162,0,
        4681,4682,5,1208,0,0,4682,4684,3,324,162,0,4683,4681,1,0,0,0,4684,
        4687,1,0,0,0,4685,4683,1,0,0,0,4685,4686,1,0,0,0,4686,4689,1,0,0,
        0,4687,4685,1,0,0,0,4688,4679,1,0,0,0,4688,4680,1,0,0,0,4689,4690,
        1,0,0,0,4690,4691,5,1214,0,0,4691,4693,1,0,0,0,4692,4676,1,0,0,0,
        4692,4693,1,0,0,0,4693,4694,1,0,0,0,4694,4695,5,457,0,0,4695,4696,
        5,1213,0,0,4696,4700,3,940,470,0,4697,4699,3,338,169,0,4698,4697,
        1,0,0,0,4699,4702,1,0,0,0,4700,4698,1,0,0,0,4700,4701,1,0,0,0,4701,
        4703,1,0,0,0,4702,4700,1,0,0,0,4703,4710,5,1214,0,0,4704,4706,5,
        1208,0,0,4705,4704,1,0,0,0,4705,4706,1,0,0,0,4706,4707,1,0,0,0,4707,
        4708,5,268,0,0,4708,4709,5,308,0,0,4709,4711,5,192,0,0,4710,4705,
        1,0,0,0,4710,4711,1,0,0,0,4711,4718,1,0,0,0,4712,4714,5,1208,0,0,
        4713,4712,1,0,0,0,4713,4714,1,0,0,0,4714,4715,1,0,0,0,4715,4716,
        5,840,0,0,4716,4717,5,42,0,0,4717,4719,5,69,0,0,4718,4713,1,0,0,
        0,4718,4719,1,0,0,0,4719,317,1,0,0,0,4720,4721,5,86,0,0,4721,4722,
        5,137,0,0,4722,4724,5,406,0,0,4723,4725,3,792,396,0,4724,4723,1,
        0,0,0,4724,4725,1,0,0,0,4725,4726,1,0,0,0,4726,4727,5,159,0,0,4727,
        4730,3,792,396,0,4728,4729,5,268,0,0,4729,4731,5,1138,0,0,4730,4728,
        1,0,0,0,4730,4731,1,0,0,0,4731,319,1,0,0,0,4732,4736,7,42,0,0,4733,
        4734,5,687,0,0,4734,4737,5,417,0,0,4735,4737,5,469,0,0,4736,4733,
        1,0,0,0,4736,4735,1,0,0,0,4737,4751,1,0,0,0,4738,4739,5,687,0,0,
        4739,4742,5,417,0,0,4740,4742,5,469,0,0,4741,4738,1,0,0,0,4741,4740,
        1,0,0,0,4742,4743,1,0,0,0,4743,4751,7,42,0,0,4744,4751,7,42,0,0,
        4745,4746,5,687,0,0,4746,4749,5,417,0,0,4747,4749,5,469,0,0,4748,
        4745,1,0,0,0,4748,4747,1,0,0,0,4749,4751,1,0,0,0,4750,4732,1,0,0,
        0,4750,4741,1,0,0,0,4750,4744,1,0,0,0,4750,4748,1,0,0,0,4751,321,
        1,0,0,0,4752,4779,3,574,287,0,4753,4779,3,582,291,0,4754,4755,5,
        474,0,0,4755,4756,5,211,0,0,4756,4757,5,406,0,0,4757,4758,5,1224,
        0,0,4758,4779,3,792,396,0,4759,4761,5,268,0,0,4760,4759,1,0,0,0,
        4760,4761,1,0,0,0,4761,4762,1,0,0,0,4762,4779,5,228,0,0,4763,4779,
        3,584,292,0,4764,4779,3,586,293,0,4765,4766,5,571,0,0,4766,4767,
        5,1224,0,0,4767,4779,7,5,0,0,4768,4769,5,163,0,0,4769,4770,5,1224,
        0,0,4770,4772,3,764,382,0,4771,4773,5,300,0,0,4772,4771,1,0,0,0,
        4772,4773,1,0,0,0,4773,4779,1,0,0,0,4774,4779,3,342,171,0,4775,4779,
        3,344,172,0,4776,4779,3,346,173,0,4777,4779,3,348,174,0,4778,4752,
        1,0,0,0,4778,4753,1,0,0,0,4778,4754,1,0,0,0,4778,4760,1,0,0,0,4778,
        4763,1,0,0,0,4778,4764,1,0,0,0,4778,4765,1,0,0,0,4778,4768,1,0,0,
        0,4778,4774,1,0,0,0,4778,4775,1,0,0,0,4778,4776,1,0,0,0,4778,4777,
        1,0,0,0,4779,323,1,0,0,0,4780,4784,3,788,394,0,4781,4783,3,350,175,
        0,4782,4781,1,0,0,0,4783,4786,1,0,0,0,4784,4782,1,0,0,0,4784,4785,
        1,0,0,0,4785,4787,1,0,0,0,4786,4784,1,0,0,0,4787,4791,3,688,344,
        0,4788,4790,3,350,175,0,4789,4788,1,0,0,0,4790,4793,1,0,0,0,4791,
        4789,1,0,0,0,4791,4792,1,0,0,0,4792,4830,1,0,0,0,4793,4791,1,0,0,
        0,4794,4795,7,35,0,0,4795,4796,5,1213,0,0,4796,4800,3,788,394,0,
        4797,4799,3,350,175,0,4798,4797,1,0,0,0,4799,4802,1,0,0,0,4800,4798,
        1,0,0,0,4800,4801,1,0,0,0,4801,4803,1,0,0,0,4802,4800,1,0,0,0,4803,
        4807,3,688,344,0,4804,4806,3,350,175,0,4805,4804,1,0,0,0,4806,4809,
        1,0,0,0,4807,4805,1,0,0,0,4807,4808,1,0,0,0,4808,4810,1,0,0,0,4809,
        4807,1,0,0,0,4810,4816,5,1214,0,0,4811,4813,5,268,0,0,4812,4811,
        1,0,0,0,4812,4813,1,0,0,0,4813,4814,1,0,0,0,4814,4815,5,543,0,0,
        4815,4817,5,72,0,0,4816,4812,1,0,0,0,4816,4817,1,0,0,0,4817,4830,
        1,0,0,0,4818,4819,5,853,0,0,4819,4820,5,159,0,0,4820,4821,3,788,
        394,0,4821,4822,5,1213,0,0,4822,4823,3,788,394,0,4823,4824,5,1208,
        0,0,4824,4825,3,788,394,0,4825,4826,5,1214,0,0,4826,4830,1,0,0,0,
        4827,4830,3,364,182,0,4828,4830,3,366,183,0,4829,4780,1,0,0,0,4829,
        4794,1,0,0,0,4829,4818,1,0,0,0,4829,4827,1,0,0,0,4829,4828,1,0,0,
        0,4830,325,1,0,0,0,4831,4835,3,788,394,0,4832,4834,3,350,175,0,4833,
        4832,1,0,0,0,4834,4837,1,0,0,0,4835,4833,1,0,0,0,4835,4836,1,0,0,
        0,4836,4857,1,0,0,0,4837,4835,1,0,0,0,4838,4839,7,35,0,0,4839,4840,
        5,1213,0,0,4840,4844,3,788,394,0,4841,4843,3,350,175,0,4842,4841,
        1,0,0,0,4843,4846,1,0,0,0,4844,4842,1,0,0,0,4844,4845,1,0,0,0,4845,
        4847,1,0,0,0,4846,4844,1,0,0,0,4847,4853,5,1214,0,0,4848,4850,5,
        268,0,0,4849,4848,1,0,0,0,4849,4850,1,0,0,0,4850,4851,1,0,0,0,4851,
        4852,5,543,0,0,4852,4854,5,72,0,0,4853,4849,1,0,0,0,4853,4854,1,
        0,0,0,4854,4857,1,0,0,0,4855,4857,3,366,183,0,4856,4831,1,0,0,0,
        4856,4838,1,0,0,0,4856,4855,1,0,0,0,4857,327,1,0,0,0,4858,4860,5,
        448,0,0,4859,4858,1,0,0,0,4859,4860,1,0,0,0,4860,4862,1,0,0,0,4861,
        4863,5,308,0,0,4862,4861,1,0,0,0,4862,4863,1,0,0,0,4863,4864,1,0,
        0,0,4864,4866,5,192,0,0,4865,4867,3,788,394,0,4866,4865,1,0,0,0,
        4866,4867,1,0,0,0,4867,4868,1,0,0,0,4868,4869,5,1213,0,0,4869,4874,
        3,788,394,0,4870,4871,5,1208,0,0,4871,4873,3,788,394,0,4872,4870,
        1,0,0,0,4873,4876,1,0,0,0,4874,4872,1,0,0,0,4874,4875,1,0,0,0,4875,
        4877,1,0,0,0,4876,4874,1,0,0,0,4877,4878,5,1214,0,0,4878,4960,1,
        0,0,0,4879,4880,5,268,0,0,4880,4881,5,308,0,0,4881,4960,5,192,0,
        0,4882,4883,5,308,0,0,4883,4885,5,15,0,0,4884,4886,5,192,0,0,4885,
        4884,1,0,0,0,4885,4886,1,0,0,0,4886,4888,1,0,0,0,4887,4889,3,788,
        394,0,4888,4887,1,0,0,0,4888,4889,1,0,0,0,4889,4890,1,0,0,0,4890,
        4891,5,1213,0,0,4891,4896,3,788,394,0,4892,4893,5,1208,0,0,4893,
        4895,3,788,394,0,4894,4892,1,0,0,0,4895,4898,1,0,0,0,4896,4894,1,
        0,0,0,4896,4897,1,0,0,0,4897,4899,1,0,0,0,4898,4896,1,0,0,0,4899,
        4900,5,1214,0,0,4900,4960,1,0,0,0,4901,4902,5,840,0,0,4902,4915,
        5,42,0,0,4903,4916,3,370,185,0,4904,4905,5,1213,0,0,4905,4910,3,
        370,185,0,4906,4907,5,1208,0,0,4907,4909,3,370,185,0,4908,4906,1,
        0,0,0,4909,4912,1,0,0,0,4910,4908,1,0,0,0,4910,4911,1,0,0,0,4911,
        4913,1,0,0,0,4912,4910,1,0,0,0,4913,4914,5,1214,0,0,4914,4916,1,
        0,0,0,4915,4903,1,0,0,0,4915,4904,1,0,0,0,4916,4960,1,0,0,0,4917,
        4918,5,448,0,0,4918,4920,5,192,0,0,4919,4921,3,788,394,0,4920,4919,
        1,0,0,0,4920,4921,1,0,0,0,4921,4933,1,0,0,0,4922,4923,5,1213,0,0,
        4923,4928,3,788,394,0,4924,4925,5,1208,0,0,4925,4927,3,788,394,0,
        4926,4924,1,0,0,0,4927,4930,1,0,0,0,4928,4926,1,0,0,0,4928,4929,
        1,0,0,0,4929,4931,1,0,0,0,4930,4928,1,0,0,0,4931,4932,5,1214,0,0,
        4932,4934,1,0,0,0,4933,4922,1,0,0,0,4933,4934,1,0,0,0,4934,4936,
        1,0,0,0,4935,4937,3,568,284,0,4936,4935,1,0,0,0,4936,4937,1,0,0,
        0,4937,4960,1,0,0,0,4938,4940,5,192,0,0,4939,4941,3,788,394,0,4940,
        4939,1,0,0,0,4940,4941,1,0,0,0,4941,4942,1,0,0,0,4942,4943,5,13,
        0,0,4943,4944,5,1213,0,0,4944,4949,3,788,394,0,4945,4946,5,1208,
        0,0,4946,4948,3,788,394,0,4947,4945,1,0,0,0,4948,4951,1,0,0,0,4949,
        4947,1,0,0,0,4949,4950,1,0,0,0,4950,4952,1,0,0,0,4951,4949,1,0,0,
        0,4952,4954,5,1214,0,0,4953,4955,3,570,285,0,4954,4953,1,0,0,0,4954,
        4955,1,0,0,0,4955,4957,1,0,0,0,4956,4958,3,568,284,0,4957,4956,1,
        0,0,0,4957,4958,1,0,0,0,4958,4960,1,0,0,0,4959,4859,1,0,0,0,4959,
        4879,1,0,0,0,4959,4882,1,0,0,0,4959,4901,1,0,0,0,4959,4917,1,0,0,
        0,4959,4938,1,0,0,0,4960,329,1,0,0,0,4961,4962,3,784,392,0,4962,
        4964,5,422,0,0,4963,4965,3,722,361,0,4964,4963,1,0,0,0,4964,4965,
        1,0,0,0,4965,4967,1,0,0,0,4966,4968,3,752,376,0,4967,4966,1,0,0,
        0,4967,4968,1,0,0,0,4968,4969,1,0,0,0,4969,4970,5,272,0,0,4970,4971,
        5,274,0,0,4971,4972,5,111,0,0,4972,4974,5,97,0,0,4973,4975,3,722,
        361,0,4974,4973,1,0,0,0,4974,4975,1,0,0,0,4975,331,1,0,0,0,4976,
        4977,5,151,0,0,4977,4980,5,910,0,0,4978,4979,7,18,0,0,4979,4981,
        5,1130,0,0,4980,4978,1,0,0,0,4980,4981,1,0,0,0,4981,4982,1,0,0,0,
        4982,4983,3,790,395,0,4983,333,1,0,0,0,4984,4985,5,1128,0,0,4985,
        4986,5,464,0,0,4986,4987,3,722,361,0,4987,4988,5,55,0,0,4988,4989,
        5,372,0,0,4989,4990,5,1015,0,0,4990,4991,5,49,0,0,4991,335,1,0,0,
        0,4992,5010,5,1129,0,0,4993,4994,5,720,0,0,4994,4995,3,722,361,0,
        4995,4996,3,742,371,0,4996,4997,5,55,0,0,4997,4998,5,372,0,0,4998,
        4999,7,43,0,0,4999,5011,1,0,0,0,5000,5001,5,607,0,0,5001,5002,3,
        722,361,0,5002,5003,3,742,371,0,5003,5004,5,941,0,0,5004,5005,5,
        161,0,0,5005,5006,5,1073,0,0,5006,5007,5,55,0,0,5007,5008,5,372,
        0,0,5008,5009,7,43,0,0,5009,5011,1,0,0,0,5010,4993,1,0,0,0,5010,
        5000,1,0,0,0,5011,337,1,0,0,0,5012,5013,5,1131,0,0,5013,5014,5,1213,
        0,0,5014,5015,5,1203,0,0,5015,5041,5,1214,0,0,5016,5017,5,1132,0,
        0,5017,5018,5,1213,0,0,5018,5019,5,1203,0,0,5019,5041,5,1214,0,0,
        5020,5021,5,1133,0,0,5021,5022,5,1213,0,0,5022,5023,5,1203,0,0,5023,
        5041,5,1214,0,0,5024,5025,5,1134,0,0,5025,5026,5,1213,0,0,5026,5027,
        5,1203,0,0,5027,5041,5,1214,0,0,5028,5029,5,1135,0,0,5029,5030,5,
        1213,0,0,5030,5031,5,1203,0,0,5031,5041,5,1214,0,0,5032,5033,5,1136,
        0,0,5033,5034,5,1213,0,0,5034,5035,5,1203,0,0,5035,5041,5,1214,0,
        0,5036,5037,5,1137,0,0,5037,5038,5,1213,0,0,5038,5039,5,1203,0,0,
        5039,5041,5,1214,0,0,5040,5012,1,0,0,0,5040,5016,1,0,0,0,5040,5020,
        1,0,0,0,5040,5024,1,0,0,0,5040,5028,1,0,0,0,5040,5032,1,0,0,0,5040,
        5036,1,0,0,0,5041,339,1,0,0,0,5042,5043,5,286,0,0,5043,5044,5,71,
        0,0,5044,5045,7,4,0,0,5045,5046,5,364,0,0,5046,341,1,0,0,0,5047,
        5048,5,111,0,0,5048,5058,5,767,0,0,5049,5050,5,767,0,0,5050,5051,
        5,1224,0,0,5051,5053,3,764,382,0,5052,5054,5,300,0,0,5053,5052,1,
        0,0,0,5053,5054,1,0,0,0,5054,5058,1,0,0,0,5055,5056,5,268,0,0,5056,
        5058,5,767,0,0,5057,5047,1,0,0,0,5057,5049,1,0,0,0,5057,5055,1,0,
        0,0,5058,343,1,0,0,0,5059,5060,5,103,0,0,5060,5067,5,1224,0,0,5061,
        5063,3,764,382,0,5062,5064,7,44,0,0,5063,5062,1,0,0,0,5063,5064,
        1,0,0,0,5064,5068,1,0,0,0,5065,5066,7,45,0,0,5066,5068,5,103,0,0,
        5067,5061,1,0,0,0,5067,5065,1,0,0,0,5068,345,1,0,0,0,5069,5070,5,
        551,0,0,5070,5071,5,1224,0,0,5071,5076,7,46,0,0,5072,5073,5,1208,
        0,0,5073,5074,5,552,0,0,5074,5075,5,1224,0,0,5075,5077,7,47,0,0,
        5076,5072,1,0,0,0,5076,5077,1,0,0,0,5077,5085,1,0,0,0,5078,5079,
        5,1208,0,0,5079,5080,5,553,0,0,5080,5083,5,1224,0,0,5081,5084,3,
        764,382,0,5082,5084,5,111,0,0,5083,5081,1,0,0,0,5083,5082,1,0,0,
        0,5084,5086,1,0,0,0,5085,5078,1,0,0,0,5085,5086,1,0,0,0,5086,347,
        1,0,0,0,5087,5090,3,676,338,0,5088,5089,5,159,0,0,5089,5091,7,9,
        0,0,5090,5088,1,0,0,0,5090,5091,1,0,0,0,5091,349,1,0,0,0,5092,5103,
        3,730,365,0,5093,5103,3,732,366,0,5094,5103,3,734,367,0,5095,5103,
        3,736,368,0,5096,5103,3,712,356,0,5097,5103,3,728,364,0,5098,5103,
        3,352,176,0,5099,5103,3,356,178,0,5100,5103,3,358,179,0,5101,5103,
        3,360,180,0,5102,5092,1,0,0,0,5102,5093,1,0,0,0,5102,5094,1,0,0,
        0,5102,5095,1,0,0,0,5102,5096,1,0,0,0,5102,5097,1,0,0,0,5102,5098,
        1,0,0,0,5102,5099,1,0,0,0,5102,5100,1,0,0,0,5102,5101,1,0,0,0,5103,
        351,1,0,0,0,5104,5105,5,268,0,0,5105,5129,5,72,0,0,5106,5129,5,72,
        0,0,5107,5108,5,72,0,0,5108,5129,3,354,177,0,5109,5110,5,72,0,0,
        5110,5111,5,1213,0,0,5111,5116,3,354,177,0,5112,5113,5,1208,0,0,
        5113,5115,3,354,177,0,5114,5112,1,0,0,0,5115,5118,1,0,0,0,5116,5114,
        1,0,0,0,5116,5117,1,0,0,0,5117,5119,1,0,0,0,5118,5116,1,0,0,0,5119,
        5120,5,1214,0,0,5120,5129,1,0,0,0,5121,5122,5,72,0,0,5122,5123,5,
        457,0,0,5123,5124,3,792,396,0,5124,5125,5,623,0,0,5125,5126,5,457,
        0,0,5126,5127,3,792,396,0,5127,5129,1,0,0,0,5128,5104,1,0,0,0,5128,
        5106,1,0,0,0,5128,5107,1,0,0,0,5128,5109,1,0,0,0,5128,5121,1,0,0,
        0,5129,353,1,0,0,0,5130,5131,5,1222,0,0,5131,5137,3,764,382,0,5132,
        5133,5,1222,0,0,5133,5137,3,768,384,0,5134,5137,3,754,377,0,5135,
        5137,5,274,0,0,5136,5130,1,0,0,0,5136,5132,1,0,0,0,5136,5134,1,0,
        0,0,5136,5135,1,0,0,0,5137,355,1,0,0,0,5138,5139,5,74,0,0,5139,5141,
        3,788,394,0,5140,5138,1,0,0,0,5140,5141,1,0,0,0,5141,5161,1,0,0,
        0,5142,5162,5,448,0,0,5143,5144,5,308,0,0,5144,5162,5,212,0,0,5145,
        5146,5,59,0,0,5146,5147,5,1213,0,0,5147,5148,3,994,497,0,5148,5149,
        5,1214,0,0,5149,5162,1,0,0,0,5150,5162,3,368,184,0,5151,5156,3,788,
        394,0,5152,5153,5,1208,0,0,5153,5155,3,788,394,0,5154,5152,1,0,0,
        0,5155,5158,1,0,0,0,5156,5154,1,0,0,0,5156,5157,1,0,0,0,5157,5159,
        1,0,0,0,5158,5156,1,0,0,0,5159,5160,5,74,0,0,5160,5162,1,0,0,0,5161,
        5142,1,0,0,0,5161,5143,1,0,0,0,5161,5145,1,0,0,0,5161,5150,1,0,0,
        0,5161,5151,1,0,0,0,5162,357,1,0,0,0,5163,5165,5,272,0,0,5164,5163,
        1,0,0,0,5164,5165,1,0,0,0,5165,5166,1,0,0,0,5166,5167,5,543,0,0,
        5167,5168,5,69,0,0,5168,359,1,0,0,0,5169,5173,5,169,0,0,5170,5174,
        5,502,0,0,5171,5172,5,42,0,0,5172,5174,5,111,0,0,5173,5170,1,0,0,
        0,5173,5171,1,0,0,0,5174,5175,1,0,0,0,5175,5176,5,20,0,0,5176,5177,
        5,187,0,0,5177,5196,5,1213,0,0,5178,5179,5,392,0,0,5179,5180,5,474,
        0,0,5180,5197,3,362,181,0,5181,5182,5,702,0,0,5182,5183,5,42,0,0,
        5183,5197,3,362,181,0,5184,5185,5,772,0,0,5185,5197,3,362,181,0,
        5186,5187,5,268,0,0,5187,5197,5,772,0,0,5188,5189,5,761,0,0,5189,
        5197,3,362,181,0,5190,5191,5,268,0,0,5191,5197,5,761,0,0,5192,5194,
        5,268,0,0,5193,5192,1,0,0,0,5193,5194,1,0,0,0,5194,5195,1,0,0,0,
        5195,5197,5,101,0,0,5196,5178,1,0,0,0,5196,5181,1,0,0,0,5196,5184,
        1,0,0,0,5196,5186,1,0,0,0,5196,5188,1,0,0,0,5196,5190,1,0,0,0,5196,
        5193,1,0,0,0,5197,5198,1,0,0,0,5198,5196,1,0,0,0,5198,5199,1,0,0,
        0,5199,5200,1,0,0,0,5200,5201,5,1214,0,0,5201,361,1,0,0,0,5202,5204,
        7,1,0,0,5203,5202,1,0,0,0,5203,5204,1,0,0,0,5204,5205,1,0,0,0,5205,
        5206,3,764,382,0,5206,363,1,0,0,0,5207,5221,5,271,0,0,5208,5209,
        5,13,0,0,5209,5210,5,41,0,0,5210,5211,5,1213,0,0,5211,5216,3,788,
        394,0,5212,5213,5,1208,0,0,5213,5215,3,788,394,0,5214,5212,1,0,0,
        0,5215,5218,1,0,0,0,5216,5214,1,0,0,0,5216,5217,1,0,0,0,5217,5219,
        1,0,0,0,5218,5216,1,0,0,0,5219,5220,5,1214,0,0,5220,5222,1,0,0,0,
        5221,5208,1,0,0,0,5221,5222,1,0,0,0,5222,5223,1,0,0,0,5223,5224,
        5,286,0,0,5224,5236,3,788,394,0,5225,5234,5,286,0,0,5226,5227,5,
        765,0,0,5227,5228,5,290,0,0,5228,5235,5,296,0,0,5229,5232,5,296,
        0,0,5230,5231,5,290,0,0,5231,5233,5,765,0,0,5232,5230,1,0,0,0,5232,
        5233,1,0,0,0,5233,5235,1,0,0,0,5234,5226,1,0,0,0,5234,5229,1,0,0,
        0,5235,5237,1,0,0,0,5236,5225,1,0,0,0,5236,5237,1,0,0,0,5237,365,
        1,0,0,0,5238,5239,5,74,0,0,5239,5241,3,788,394,0,5240,5238,1,0,0,
        0,5240,5241,1,0,0,0,5241,5277,1,0,0,0,5242,5246,5,448,0,0,5243,5244,
        5,308,0,0,5244,5246,5,212,0,0,5245,5242,1,0,0,0,5245,5243,1,0,0,
        0,5246,5247,1,0,0,0,5247,5248,5,1213,0,0,5248,5253,3,788,394,0,5249,
        5250,5,1208,0,0,5250,5252,3,788,394,0,5251,5249,1,0,0,0,5252,5255,
        1,0,0,0,5253,5251,1,0,0,0,5253,5254,1,0,0,0,5254,5256,1,0,0,0,5255,
        5253,1,0,0,0,5256,5257,5,1214,0,0,5257,5278,1,0,0,0,5258,5259,5,
        59,0,0,5259,5260,5,1213,0,0,5260,5261,3,994,497,0,5261,5262,5,1214,
        0,0,5262,5278,1,0,0,0,5263,5264,5,160,0,0,5264,5265,5,212,0,0,5265,
        5266,5,1213,0,0,5266,5271,3,788,394,0,5267,5268,5,1208,0,0,5268,
        5270,3,788,394,0,5269,5267,1,0,0,0,5270,5273,1,0,0,0,5271,5269,1,
        0,0,0,5271,5272,1,0,0,0,5272,5274,1,0,0,0,5273,5271,1,0,0,0,5274,
        5275,5,1214,0,0,5275,5276,3,368,184,0,5276,5278,1,0,0,0,5277,5245,
        1,0,0,0,5277,5258,1,0,0,0,5277,5263,1,0,0,0,5278,367,1,0,0,0,5279,
        5286,5,325,0,0,5280,5282,5,474,0,0,5281,5283,5,268,0,0,5282,5281,
        1,0,0,0,5282,5283,1,0,0,0,5283,5284,1,0,0,0,5284,5285,5,59,0,0,5285,
        5287,5,289,0,0,5286,5280,1,0,0,0,5286,5287,1,0,0,0,5287,5288,1,0,
        0,0,5288,5300,3,792,396,0,5289,5290,5,1213,0,0,5290,5295,3,788,394,
        0,5291,5292,5,1208,0,0,5292,5294,3,788,394,0,5293,5291,1,0,0,0,5294,
        5297,1,0,0,0,5295,5293,1,0,0,0,5295,5296,1,0,0,0,5296,5298,1,0,0,
        0,5297,5295,1,0,0,0,5298,5299,5,1214,0,0,5299,5301,1,0,0,0,5300,
        5289,1,0,0,0,5300,5301,1,0,0,0,5301,369,1,0,0,0,5302,5332,3,1064,
        532,0,5303,5309,5,69,0,0,5304,5306,5,268,0,0,5305,5304,1,0,0,0,5305,
        5306,1,0,0,0,5306,5307,1,0,0,0,5307,5308,5,543,0,0,5308,5310,5,72,
        0,0,5309,5305,1,0,0,0,5309,5310,1,0,0,0,5310,5332,1,0,0,0,5311,5317,
        5,69,0,0,5312,5314,5,268,0,0,5313,5312,1,0,0,0,5313,5314,1,0,0,0,
        5314,5315,1,0,0,0,5315,5316,5,543,0,0,5316,5318,5,72,0,0,5317,5313,
        1,0,0,0,5317,5318,1,0,0,0,5318,5321,1,0,0,0,5319,5320,5,13,0,0,5320,
        5322,5,41,0,0,5321,5319,1,0,0,0,5321,5322,1,0,0,0,5322,5323,1,0,
        0,0,5323,5328,3,372,186,0,5324,5325,5,1208,0,0,5325,5327,3,372,186,
        0,5326,5324,1,0,0,0,5327,5330,1,0,0,0,5328,5326,1,0,0,0,5328,5329,
        1,0,0,0,5329,5332,1,0,0,0,5330,5328,1,0,0,0,5331,5302,1,0,0,0,5331,
        5303,1,0,0,0,5331,5311,1,0,0,0,5332,5335,1,0,0,0,5333,5334,5,8,0,
        0,5334,5336,3,754,377,0,5335,5333,1,0,0,0,5335,5336,1,0,0,0,5336,
        371,1,0,0,0,5337,5339,5,1213,0,0,5338,5340,7,35,0,0,5339,5338,1,
        0,0,0,5339,5340,1,0,0,0,5340,5353,1,0,0,0,5341,5354,3,788,394,0,
        5342,5343,5,1213,0,0,5343,5348,3,788,394,0,5344,5345,5,1208,0,0,
        5345,5347,3,788,394,0,5346,5344,1,0,0,0,5347,5350,1,0,0,0,5348,5346,
        1,0,0,0,5348,5349,1,0,0,0,5349,5351,1,0,0,0,5350,5348,1,0,0,0,5351,
        5352,5,1214,0,0,5352,5354,1,0,0,0,5353,5341,1,0,0,0,5353,5342,1,
        0,0,0,5354,5360,1,0,0,0,5355,5357,5,268,0,0,5356,5355,1,0,0,0,5356,
        5357,1,0,0,0,5357,5358,1,0,0,0,5358,5359,5,543,0,0,5359,5361,5,72,
        0,0,5360,5356,1,0,0,0,5360,5361,1,0,0,0,5361,5362,1,0,0,0,5362,5363,
        5,1214,0,0,5363,373,1,0,0,0,5364,5368,3,376,188,0,5365,5368,3,378,
        189,0,5366,5368,3,380,190,0,5367,5364,1,0,0,0,5367,5365,1,0,0,0,
        5367,5366,1,0,0,0,5368,375,1,0,0,0,5369,5370,5,86,0,0,5370,5372,
        5,437,0,0,5371,5373,3,718,359,0,5372,5371,1,0,0,0,5372,5373,1,0,
        0,0,5373,5374,1,0,0,0,5374,5375,3,824,412,0,5375,5376,5,20,0,0,5376,
        5377,5,1213,0,0,5377,5382,3,390,195,0,5378,5379,5,1208,0,0,5379,
        5381,3,390,195,0,5380,5378,1,0,0,0,5381,5384,1,0,0,0,5382,5380,1,
        0,0,0,5382,5383,1,0,0,0,5383,5385,1,0,0,0,5384,5382,1,0,0,0,5385,
        5387,5,1214,0,0,5386,5388,5,710,0,0,5387,5386,1,0,0,0,5387,5388,
        1,0,0,0,5388,5389,1,0,0,0,5389,5390,5,272,0,0,5390,5399,5,671,0,
        0,5391,5396,3,392,196,0,5392,5393,5,1208,0,0,5393,5395,3,392,196,
        0,5394,5392,1,0,0,0,5395,5398,1,0,0,0,5396,5394,1,0,0,0,5396,5397,
        1,0,0,0,5397,5400,1,0,0,0,5398,5396,1,0,0,0,5399,5391,1,0,0,0,5399,
        5400,1,0,0,0,5400,377,1,0,0,0,5401,5402,5,86,0,0,5402,5404,5,437,
        0,0,5403,5405,3,718,359,0,5404,5403,1,0,0,0,5404,5405,1,0,0,0,5405,
        5406,1,0,0,0,5406,5407,3,824,412,0,5407,5408,5,20,0,0,5408,5409,
        3,688,344,0,5409,5411,5,671,0,0,5410,5412,3,394,197,0,5411,5410,
        1,0,0,0,5411,5412,1,0,0,0,5412,379,1,0,0,0,5413,5418,3,382,191,0,
        5414,5418,3,384,192,0,5415,5418,3,386,193,0,5416,5418,3,388,194,
        0,5417,5413,1,0,0,0,5417,5414,1,0,0,0,5417,5415,1,0,0,0,5417,5416,
        1,0,0,0,5418,381,1,0,0,0,5419,5420,5,86,0,0,5420,5422,5,437,0,0,
        5421,5423,3,718,359,0,5422,5421,1,0,0,0,5422,5423,1,0,0,0,5423,5424,
        1,0,0,0,5424,5425,3,824,412,0,5425,5426,5,20,0,0,5426,5427,3,688,
        344,0,5427,5428,5,512,0,0,5428,5429,5,1215,0,0,5429,5430,3,764,382,
        0,5430,5433,5,1216,0,0,5431,5432,5,111,0,0,5432,5434,5,274,0,0,5433,
        5431,1,0,0,0,5433,5434,1,0,0,0,5434,383,1,0,0,0,5435,5436,5,86,0,
        0,5436,5438,5,437,0,0,5437,5439,3,718,359,0,5438,5437,1,0,0,0,5438,
        5439,1,0,0,0,5439,5440,1,0,0,0,5440,5441,3,824,412,0,5441,5445,5,
        20,0,0,5442,5443,5,467,0,0,5443,5446,5,512,0,0,5444,5446,5,1021,
        0,0,5445,5442,1,0,0,0,5445,5444,1,0,0,0,5446,5447,1,0,0,0,5447,5448,
        5,1213,0,0,5448,5449,3,764,382,0,5449,5450,5,1214,0,0,5450,5451,
        5,282,0,0,5451,5454,3,688,344,0,5452,5453,5,111,0,0,5453,5455,5,
        274,0,0,5454,5452,1,0,0,0,5454,5455,1,0,0,0,5455,385,1,0,0,0,5456,
        5457,5,86,0,0,5457,5459,5,437,0,0,5458,5460,3,718,359,0,5459,5458,
        1,0,0,0,5459,5460,1,0,0,0,5460,5461,1,0,0,0,5461,5462,3,824,412,
        0,5462,5463,5,20,0,0,5463,5464,3,688,344,0,5464,5465,5,512,0,0,5465,
        5467,3,404,202,0,5466,5468,3,404,202,0,5467,5466,1,0,0,0,5468,5469,
        1,0,0,0,5469,5467,1,0,0,0,5469,5470,1,0,0,0,5470,5473,1,0,0,0,5471,
        5472,5,111,0,0,5472,5474,5,274,0,0,5473,5471,1,0,0,0,5473,5474,1,
        0,0,0,5474,387,1,0,0,0,5475,5476,5,86,0,0,5476,5478,5,437,0,0,5477,
        5479,3,718,359,0,5478,5477,1,0,0,0,5478,5479,1,0,0,0,5479,5480,1,
        0,0,0,5480,5481,3,824,412,0,5481,5485,5,20,0,0,5482,5483,5,467,0,
        0,5483,5486,5,512,0,0,5484,5486,5,1021,0,0,5485,5482,1,0,0,0,5485,
        5484,1,0,0,0,5486,5487,1,0,0,0,5487,5489,3,406,203,0,5488,5490,3,
        406,203,0,5489,5488,1,0,0,0,5490,5491,1,0,0,0,5491,5489,1,0,0,0,
        5491,5492,1,0,0,0,5492,5493,1,0,0,0,5493,5494,5,282,0,0,5494,5497,
        3,688,344,0,5495,5496,5,111,0,0,5496,5498,5,274,0,0,5497,5495,1,
        0,0,0,5497,5498,1,0,0,0,5498,389,1,0,0,0,5499,5500,3,826,413,0,5500,
        5501,3,688,344,0,5501,391,1,0,0,0,5502,5504,7,11,0,0,5503,5502,1,
        0,0,0,5503,5504,1,0,0,0,5504,5505,1,0,0,0,5505,5507,5,243,0,0,5506,
        5508,3,718,359,0,5507,5506,1,0,0,0,5507,5508,1,0,0,0,5508,5509,1,
        0,0,0,5509,5510,3,828,414,0,5510,5519,5,1213,0,0,5511,5516,3,396,
        198,0,5512,5513,5,1208,0,0,5513,5515,3,396,198,0,5514,5512,1,0,0,
        0,5515,5518,1,0,0,0,5516,5514,1,0,0,0,5516,5517,1,0,0,0,5517,5520,
        1,0,0,0,5518,5516,1,0,0,0,5519,5511,1,0,0,0,5519,5520,1,0,0,0,5520,
        5521,1,0,0,0,5521,5522,5,1214,0,0,5522,5523,5,352,0,0,5523,5531,
        3,398,199,0,5524,5525,5,50,0,0,5525,5526,5,164,0,0,5526,5529,3,688,
        344,0,5527,5528,5,20,0,0,5528,5530,5,225,0,0,5529,5527,1,0,0,0,5529,
        5530,1,0,0,0,5530,5532,1,0,0,0,5531,5524,1,0,0,0,5531,5532,1,0,0,
        0,5532,5538,1,0,0,0,5533,5535,5,384,0,0,5534,5536,3,718,359,0,5535,
        5534,1,0,0,0,5535,5536,1,0,0,0,5536,5537,1,0,0,0,5537,5539,3,828,
        414,0,5538,5533,1,0,0,0,5538,5539,1,0,0,0,5539,5543,1,0,0,0,5540,
        5541,5,912,0,0,5541,5542,5,20,0,0,5542,5544,5,347,0,0,5543,5540,
        1,0,0,0,5543,5544,1,0,0,0,5544,5569,1,0,0,0,5545,5547,3,402,201,
        0,5546,5545,1,0,0,0,5547,5550,1,0,0,0,5548,5546,1,0,0,0,5548,5549,
        1,0,0,0,5549,5551,1,0,0,0,5550,5548,1,0,0,0,5551,5553,3,400,200,
        0,5552,5554,3,402,201,0,5553,5552,1,0,0,0,5554,5555,1,0,0,0,5555,
        5553,1,0,0,0,5555,5556,1,0,0,0,5556,5570,1,0,0,0,5557,5559,3,402,
        201,0,5558,5557,1,0,0,0,5559,5560,1,0,0,0,5560,5558,1,0,0,0,5560,
        5561,1,0,0,0,5561,5562,1,0,0,0,5562,5566,3,400,200,0,5563,5565,3,
        402,201,0,5564,5563,1,0,0,0,5565,5568,1,0,0,0,5566,5564,1,0,0,0,
        5566,5567,1,0,0,0,5567,5570,1,0,0,0,5568,5566,1,0,0,0,5569,5548,
        1,0,0,0,5569,5558,1,0,0,0,5570,393,1,0,0,0,5571,5573,5,199,0,0,5572,
        5571,1,0,0,0,5572,5573,1,0,0,0,5573,5574,1,0,0,0,5574,5576,5,243,
        0,0,5575,5577,3,718,359,0,5576,5575,1,0,0,0,5576,5577,1,0,0,0,5577,
        5578,1,0,0,0,5578,5579,3,828,414,0,5579,5588,5,1213,0,0,5580,5585,
        3,396,198,0,5581,5582,5,1208,0,0,5582,5584,3,396,198,0,5583,5581,
        1,0,0,0,5584,5587,1,0,0,0,5585,5583,1,0,0,0,5585,5586,1,0,0,0,5586,
        5589,1,0,0,0,5587,5585,1,0,0,0,5588,5580,1,0,0,0,5588,5589,1,0,0,
        0,5589,5590,1,0,0,0,5590,5591,5,1214,0,0,5591,5592,5,352,0,0,5592,
        5600,3,398,199,0,5593,5594,5,50,0,0,5594,5595,5,164,0,0,5595,5598,
        3,688,344,0,5596,5597,5,20,0,0,5597,5599,5,225,0,0,5598,5596,1,0,
        0,0,5598,5599,1,0,0,0,5599,5601,1,0,0,0,5600,5593,1,0,0,0,5600,5601,
        1,0,0,0,5601,5607,1,0,0,0,5602,5604,5,384,0,0,5603,5605,3,718,359,
        0,5604,5603,1,0,0,0,5604,5605,1,0,0,0,5605,5606,1,0,0,0,5606,5608,
        3,828,414,0,5607,5602,1,0,0,0,5607,5608,1,0,0,0,5608,5612,1,0,0,
        0,5609,5610,5,912,0,0,5610,5611,5,20,0,0,5611,5613,5,347,0,0,5612,
        5609,1,0,0,0,5612,5613,1,0,0,0,5613,5638,1,0,0,0,5614,5616,3,402,
        201,0,5615,5614,1,0,0,0,5616,5619,1,0,0,0,5617,5615,1,0,0,0,5617,
        5618,1,0,0,0,5618,5620,1,0,0,0,5619,5617,1,0,0,0,5620,5622,3,400,
        200,0,5621,5623,3,402,201,0,5622,5621,1,0,0,0,5623,5624,1,0,0,0,
        5624,5622,1,0,0,0,5624,5625,1,0,0,0,5625,5639,1,0,0,0,5626,5628,
        3,402,201,0,5627,5626,1,0,0,0,5628,5629,1,0,0,0,5629,5627,1,0,0,
        0,5629,5630,1,0,0,0,5630,5631,1,0,0,0,5631,5635,3,400,200,0,5632,
        5634,3,402,201,0,5633,5632,1,0,0,0,5634,5637,1,0,0,0,5635,5633,1,
        0,0,0,5635,5636,1,0,0,0,5636,5639,1,0,0,0,5637,5635,1,0,0,0,5638,
        5617,1,0,0,0,5638,5627,1,0,0,0,5639,395,1,0,0,0,5640,5642,3,812,
        406,0,5641,5640,1,0,0,0,5641,5642,1,0,0,0,5642,5643,1,0,0,0,5643,
        5646,3,688,344,0,5644,5645,5,20,0,0,5645,5647,5,225,0,0,5646,5644,
        1,0,0,0,5646,5647,1,0,0,0,5647,397,1,0,0,0,5648,5651,3,688,344,0,
        5649,5650,5,20,0,0,5650,5652,5,225,0,0,5651,5649,1,0,0,0,5651,5652,
        1,0,0,0,5652,399,1,0,0,0,5653,5654,5,214,0,0,5654,5655,7,48,0,0,
        5655,401,1,0,0,0,5656,5658,5,384,0,0,5657,5659,3,718,359,0,5658,
        5657,1,0,0,0,5658,5659,1,0,0,0,5659,5660,1,0,0,0,5660,5680,3,828,
        414,0,5661,5662,5,298,0,0,5662,5663,5,944,0,0,5663,5680,7,49,0,0,
        5664,5666,5,272,0,0,5665,5664,1,0,0,0,5665,5666,1,0,0,0,5666,5667,
        1,0,0,0,5667,5680,5,117,0,0,5668,5669,5,559,0,0,5669,5670,5,286,
        0,0,5670,5671,5,274,0,0,5671,5680,5,196,0,0,5672,5673,5,352,0,0,
        5673,5674,5,274,0,0,5674,5675,5,286,0,0,5675,5676,5,274,0,0,5676,
        5680,5,196,0,0,5677,5678,5,268,0,0,5678,5680,5,386,0,0,5679,5656,
        1,0,0,0,5679,5661,1,0,0,0,5679,5665,1,0,0,0,5679,5668,1,0,0,0,5679,
        5672,1,0,0,0,5679,5677,1,0,0,0,5680,403,1,0,0,0,5681,5684,5,1215,
        0,0,5682,5685,3,408,204,0,5683,5685,3,764,382,0,5684,5682,1,0,0,
        0,5684,5683,1,0,0,0,5685,5686,1,0,0,0,5686,5687,5,1216,0,0,5687,
        405,1,0,0,0,5688,5691,5,1213,0,0,5689,5692,3,408,204,0,5690,5692,
        3,764,382,0,5691,5689,1,0,0,0,5691,5690,1,0,0,0,5692,5693,1,0,0,
        0,5693,5694,5,1214,0,0,5694,407,1,0,0,0,5695,5696,3,410,205,0,5696,
        5697,5,1207,0,0,5697,5698,3,410,205,0,5698,409,1,0,0,0,5699,5701,
        5,1222,0,0,5700,5699,1,0,0,0,5700,5701,1,0,0,0,5701,5702,1,0,0,0,
        5702,5703,3,764,382,0,5703,411,1,0,0,0,5704,5705,5,86,0,0,5705,5706,
        5,456,0,0,5706,5709,3,802,401,0,5707,5708,5,164,0,0,5708,5710,3,
        800,400,0,5709,5707,1,0,0,0,5709,5710,1,0,0,0,5710,5711,1,0,0,0,
        5711,5720,5,20,0,0,5712,5717,3,414,207,0,5713,5714,5,1208,0,0,5714,
        5716,3,414,207,0,5715,5713,1,0,0,0,5716,5719,1,0,0,0,5717,5715,1,
        0,0,0,5717,5718,1,0,0,0,5718,5721,1,0,0,0,5719,5717,1,0,0,0,5720,
        5712,1,0,0,0,5720,5721,1,0,0,0,5721,5723,1,0,0,0,5722,5724,5,1208,
        0,0,5723,5722,1,0,0,0,5723,5724,1,0,0,0,5724,5725,1,0,0,0,5725,5726,
        5,299,0,0,5726,5734,5,1224,0,0,5727,5735,3,592,296,0,5728,5729,5,
        1213,0,0,5729,5730,5,663,0,0,5730,5731,5,1224,0,0,5731,5732,3,764,
        382,0,5732,5733,5,1214,0,0,5733,5735,1,0,0,0,5734,5727,1,0,0,0,5734,
        5728,1,0,0,0,5735,5737,1,0,0,0,5736,5738,5,1208,0,0,5737,5736,1,
        0,0,0,5737,5738,1,0,0,0,5738,5747,1,0,0,0,5739,5744,3,414,207,0,
        5740,5741,5,1208,0,0,5741,5743,3,414,207,0,5742,5740,1,0,0,0,5743,
        5746,1,0,0,0,5744,5742,1,0,0,0,5744,5745,1,0,0,0,5745,5748,1,0,0,
        0,5746,5744,1,0,0,0,5747,5739,1,0,0,0,5747,5748,1,0,0,0,5748,413,
        1,0,0,0,5749,5750,5,393,0,0,5750,5751,5,1224,0,0,5751,5841,3,758,
        379,0,5752,5841,3,576,288,0,5753,5754,5,111,0,0,5754,5755,5,102,
        0,0,5755,5756,5,1224,0,0,5756,5841,3,800,400,0,5757,5758,5,67,0,
        0,5758,5759,5,1224,0,0,5759,5841,3,540,270,0,5760,5761,5,5,0,0,5761,
        5771,5,1224,0,0,5762,5767,3,758,379,0,5763,5764,5,1208,0,0,5764,
        5766,3,758,379,0,5765,5763,1,0,0,0,5766,5769,1,0,0,0,5767,5765,1,
        0,0,0,5767,5768,1,0,0,0,5768,5772,1,0,0,0,5769,5767,1,0,0,0,5770,
        5772,5,274,0,0,5771,5762,1,0,0,0,5771,5770,1,0,0,0,5772,5841,1,0,
        0,0,5773,5841,3,580,290,0,5774,5841,3,582,291,0,5775,5841,3,584,
        292,0,5776,5841,3,586,293,0,5777,5841,3,588,294,0,5778,5779,5,421,
        0,0,5779,5780,5,480,0,0,5780,5787,5,1224,0,0,5781,5788,5,224,0,0,
        5782,5784,7,1,0,0,5783,5782,1,0,0,0,5783,5784,1,0,0,0,5784,5785,
        1,0,0,0,5785,5788,3,758,379,0,5786,5788,5,274,0,0,5787,5781,1,0,
        0,0,5787,5783,1,0,0,0,5787,5786,1,0,0,0,5788,5841,1,0,0,0,5789,5790,
        5,105,0,0,5790,5791,5,1224,0,0,5791,5841,7,50,0,0,5792,5793,5,111,
        0,0,5793,5794,5,55,0,0,5794,5795,5,372,0,0,5795,5841,7,51,0,0,5796,
        5797,5,111,0,0,5797,5798,5,357,0,0,5798,5803,5,1224,0,0,5799,5804,
        3,804,402,0,5800,5804,5,269,0,0,5801,5804,5,274,0,0,5802,5804,5,
        13,0,0,5803,5799,1,0,0,0,5803,5800,1,0,0,0,5803,5801,1,0,0,0,5803,
        5802,1,0,0,0,5804,5841,1,0,0,0,5805,5806,5,311,0,0,5806,5809,5,1224,
        0,0,5807,5810,3,806,403,0,5808,5810,5,274,0,0,5809,5807,1,0,0,0,
        5809,5808,1,0,0,0,5810,5841,1,0,0,0,5811,5812,5,432,0,0,5812,5813,
        5,1213,0,0,5813,5818,3,416,208,0,5814,5815,5,1208,0,0,5815,5817,
        3,416,208,0,5816,5814,1,0,0,0,5817,5820,1,0,0,0,5818,5816,1,0,0,
        0,5818,5819,1,0,0,0,5819,5821,1,0,0,0,5820,5818,1,0,0,0,5821,5822,
        5,1214,0,0,5822,5841,1,0,0,0,5823,5841,5,617,0,0,5824,5825,5,74,
        0,0,5825,5826,5,1224,0,0,5826,5831,3,418,209,0,5827,5828,5,1208,
        0,0,5828,5830,3,418,209,0,5829,5827,1,0,0,0,5830,5833,1,0,0,0,5831,
        5829,1,0,0,0,5831,5832,1,0,0,0,5832,5841,1,0,0,0,5833,5831,1,0,0,
        0,5834,5835,5,665,0,0,5835,5838,5,1224,0,0,5836,5839,3,758,379,0,
        5837,5839,5,111,0,0,5838,5836,1,0,0,0,5838,5837,1,0,0,0,5839,5841,
        1,0,0,0,5840,5749,1,0,0,0,5840,5752,1,0,0,0,5840,5753,1,0,0,0,5840,
        5757,1,0,0,0,5840,5760,1,0,0,0,5840,5773,1,0,0,0,5840,5774,1,0,0,
        0,5840,5775,1,0,0,0,5840,5776,1,0,0,0,5840,5777,1,0,0,0,5840,5778,
        1,0,0,0,5840,5789,1,0,0,0,5840,5792,1,0,0,0,5840,5796,1,0,0,0,5840,
        5805,1,0,0,0,5840,5811,1,0,0,0,5840,5823,1,0,0,0,5840,5824,1,0,0,
        0,5840,5834,1,0,0,0,5841,415,1,0,0,0,5842,5843,3,688,344,0,5843,
        5844,5,1224,0,0,5844,5845,3,788,394,0,5845,417,1,0,0,0,5846,5873,
        3,788,394,0,5847,5853,5,1213,0,0,5848,5850,3,788,394,0,5849,5851,
        5,111,0,0,5850,5849,1,0,0,0,5850,5851,1,0,0,0,5851,5854,1,0,0,0,
        5852,5854,3,788,394,0,5853,5848,1,0,0,0,5853,5852,1,0,0,0,5854,5865,
        1,0,0,0,5855,5861,5,1208,0,0,5856,5858,3,788,394,0,5857,5859,5,111,
        0,0,5858,5857,1,0,0,0,5858,5859,1,0,0,0,5859,5862,1,0,0,0,5860,5862,
        3,788,394,0,5861,5856,1,0,0,0,5861,5860,1,0,0,0,5862,5864,1,0,0,
        0,5863,5855,1,0,0,0,5864,5867,1,0,0,0,5865,5863,1,0,0,0,5865,5866,
        1,0,0,0,5866,5868,1,0,0,0,5867,5865,1,0,0,0,5868,5869,5,1214,0,0,
        5869,5874,1,0,0,0,5870,5871,5,1213,0,0,5871,5872,5,274,0,0,5872,
        5874,5,1214,0,0,5873,5847,1,0,0,0,5873,5870,1,0,0,0,5874,419,1,0,
        0,0,5875,5876,5,102,0,0,5876,5877,3,800,400,0,5877,421,1,0,0,0,5878,
        5879,7,29,0,0,5879,5880,5,102,0,0,5880,5882,3,800,400,0,5881,5883,
        5,13,0,0,5882,5881,1,0,0,0,5882,5883,1,0,0,0,5883,423,1,0,0,0,5884,
        5885,7,29,0,0,5885,5886,5,456,0,0,5886,5888,3,802,401,0,5887,5889,
        5,13,0,0,5888,5887,1,0,0,0,5888,5889,1,0,0,0,5889,425,1,0,0,0,5890,
        5891,5,125,0,0,5891,5892,5,29,0,0,5892,5893,3,790,395,0,5893,427,
        1,0,0,0,5894,5895,5,125,0,0,5895,5899,5,50,0,0,5896,5897,3,800,400,
        0,5897,5898,5,1209,0,0,5898,5900,1,0,0,0,5899,5896,1,0,0,0,5899,
        5900,1,0,0,0,5900,5901,1,0,0,0,5901,5902,5,1213,0,0,5902,5903,3,
        688,344,0,5903,5904,5,20,0,0,5904,5905,3,688,344,0,5905,5906,5,1214,
        0,0,5906,429,1,0,0,0,5907,5908,5,125,0,0,5908,5909,5,74,0,0,5909,
        5910,3,790,395,0,5910,431,1,0,0,0,5911,5912,5,125,0,0,5912,5913,
        5,102,0,0,5913,5914,3,800,400,0,5914,433,1,0,0,0,5915,5916,5,125,
        0,0,5916,5917,5,137,0,0,5917,5921,5,406,0,0,5918,5919,5,159,0,0,
        5919,5922,3,792,396,0,5920,5922,3,792,396,0,5921,5918,1,0,0,0,5921,
        5920,1,0,0,0,5922,435,1,0,0,0,5923,5924,5,125,0,0,5924,5925,5,160,
        0,0,5925,5927,5,917,0,0,5926,5928,3,1072,536,0,5927,5926,1,0,0,0,
        5927,5928,1,0,0,0,5928,5929,1,0,0,0,5929,5930,3,788,394,0,5930,437,
        1,0,0,0,5931,5932,5,125,0,0,5932,5933,5,384,0,0,5933,5934,5,166,
        0,0,5934,5952,3,796,398,0,5935,5936,5,125,0,0,5936,5937,5,166,0,
        0,5937,5949,3,796,398,0,5938,5939,5,1213,0,0,5939,5944,3,688,344,
        0,5940,5941,5,1208,0,0,5941,5943,3,688,344,0,5942,5940,1,0,0,0,5943,
        5946,1,0,0,0,5944,5942,1,0,0,0,5944,5945,1,0,0,0,5945,5947,1,0,0,
        0,5946,5944,1,0,0,0,5947,5948,5,1214,0,0,5948,5950,1,0,0,0,5949,
        5938,1,0,0,0,5949,5950,1,0,0,0,5950,5952,1,0,0,0,5951,5931,1,0,0,
        0,5951,5935,1,0,0,0,5952,439,1,0,0,0,5953,5954,5,125,0,0,5954,5955,
        5,166,0,0,5955,5956,5,755,0,0,5956,5957,3,790,395,0,5957,441,1,0,
        0,0,5958,5959,5,125,0,0,5959,5972,5,192,0,0,5960,5961,5,1213,0,0,
        5961,5966,3,788,394,0,5962,5963,5,1208,0,0,5963,5965,3,788,394,0,
        5964,5962,1,0,0,0,5965,5968,1,0,0,0,5966,5964,1,0,0,0,5966,5967,
        1,0,0,0,5967,5969,1,0,0,0,5968,5966,1,0,0,0,5969,5970,5,1214,0,0,
        5970,5973,1,0,0,0,5971,5973,3,792,396,0,5972,5960,1,0,0,0,5972,5971,
        1,0,0,0,5973,5975,1,0,0,0,5974,5976,3,570,285,0,5975,5974,1,0,0,
        0,5975,5976,1,0,0,0,5976,5977,1,0,0,0,5977,5979,5,286,0,0,5978,5980,
        5,417,0,0,5979,5978,1,0,0,0,5979,5980,1,0,0,0,5980,5981,1,0,0,0,
        5981,5982,3,792,396,0,5982,443,1,0,0,0,5983,5984,5,125,0,0,5984,
        5985,5,688,0,0,5985,5986,5,372,0,0,5986,5987,3,790,395,0,5987,445,
        1,0,0,0,5988,5989,5,125,0,0,5989,5990,5,210,0,0,5990,5991,5,192,
        0,0,5991,5992,3,792,396,0,5992,447,1,0,0,0,5993,5994,5,125,0,0,5994,
        5995,5,178,0,0,5995,5996,5,192,0,0,5996,5997,3,792,396,0,5997,449,
        1,0,0,0,5998,5999,5,125,0,0,5999,6000,5,235,0,0,6000,6001,3,798,
        399,0,6001,451,1,0,0,0,6002,6003,5,125,0,0,6003,6004,5,236,0,0,6004,
        6005,3,788,394,0,6005,453,1,0,0,0,6006,6007,5,125,0,0,6007,6009,
        5,243,0,0,6008,6010,3,718,359,0,6009,6008,1,0,0,0,6009,6010,1,0,
        0,0,6010,6011,1,0,0,0,6011,6012,3,828,414,0,6012,455,1,0,0,0,6013,
        6014,5,125,0,0,6014,6015,5,292,0,0,6015,6016,5,159,0,0,6016,6017,
        3,708,354,0,6017,457,1,0,0,0,6018,6019,5,125,0,0,6019,6020,5,310,
        0,0,6020,6021,3,794,397,0,6021,459,1,0,0,0,6022,6023,5,125,0,0,6023,
        6024,5,311,0,0,6024,6025,3,806,403,0,6025,461,1,0,0,0,6026,6027,
        5,125,0,0,6027,6028,5,342,0,0,6028,6029,5,174,0,0,6029,6030,3,788,
        394,0,6030,463,1,0,0,0,6031,6032,5,125,0,0,6032,6033,5,342,0,0,6033,
        6034,5,902,0,0,6034,6035,3,788,394,0,6035,6036,5,159,0,0,6036,6037,
        3,788,394,0,6037,465,1,0,0,0,6038,6039,5,125,0,0,6039,6040,5,357,
        0,0,6040,6041,3,804,402,0,6041,467,1,0,0,0,6042,6043,5,125,0,0,6043,
        6044,3,788,394,0,6044,6046,5,905,0,0,6045,6047,3,718,359,0,6046,
        6045,1,0,0,0,6046,6047,1,0,0,0,6047,6048,1,0,0,0,6048,6049,3,788,
        394,0,6049,469,1,0,0,0,6050,6051,5,125,0,0,6051,6078,7,14,0,0,6052,
        6054,5,286,0,0,6053,6052,1,0,0,0,6053,6054,1,0,0,0,6054,6055,1,0,
        0,0,6055,6064,3,112,56,0,6056,6061,3,106,53,0,6057,6058,5,1208,0,
        0,6058,6060,3,106,53,0,6059,6057,1,0,0,0,6060,6063,1,0,0,0,6061,
        6059,1,0,0,0,6061,6062,1,0,0,0,6062,6065,1,0,0,0,6063,6061,1,0,0,
        0,6064,6056,1,0,0,0,6064,6065,1,0,0,0,6065,6079,1,0,0,0,6066,6071,
        3,106,53,0,6067,6068,5,1208,0,0,6068,6070,3,106,53,0,6069,6067,1,
        0,0,0,6070,6073,1,0,0,0,6071,6069,1,0,0,0,6071,6072,1,0,0,0,6072,
        6075,1,0,0,0,6073,6071,1,0,0,0,6074,6066,1,0,0,0,6074,6075,1,0,0,
        0,6075,6076,1,0,0,0,6076,6077,5,286,0,0,6077,6079,3,112,56,0,6078,
        6053,1,0,0,0,6078,6074,1,0,0,0,6079,471,1,0,0,0,6080,6082,5,125,
        0,0,6081,6083,5,417,0,0,6082,6081,1,0,0,0,6082,6083,1,0,0,0,6083,
        6085,1,0,0,0,6084,6086,5,160,0,0,6085,6084,1,0,0,0,6085,6086,1,0,
        0,0,6086,6087,1,0,0,0,6087,6088,5,406,0,0,6088,6090,3,792,396,0,
        6089,6091,5,13,0,0,6090,6089,1,0,0,0,6090,6091,1,0,0,0,6091,473,
        1,0,0,0,6092,6093,5,125,0,0,6093,6097,5,432,0,0,6094,6095,3,800,
        400,0,6095,6096,5,1209,0,0,6096,6098,1,0,0,0,6097,6094,1,0,0,0,6097,
        6098,1,0,0,0,6098,6101,1,0,0,0,6099,6102,3,788,394,0,6100,6102,5,
        13,0,0,6101,6099,1,0,0,0,6101,6100,1,0,0,0,6102,6103,1,0,0,0,6103,
        6104,5,159,0,0,6104,6105,3,708,354,0,6105,475,1,0,0,0,6106,6107,
        5,125,0,0,6107,6108,5,435,0,0,6108,6109,3,790,395,0,6109,477,1,0,
        0,0,6110,6111,5,125,0,0,6111,6112,5,437,0,0,6112,6113,3,708,354,
        0,6113,479,1,0,0,0,6114,6115,5,125,0,0,6115,6116,5,456,0,0,6116,
        6117,3,802,401,0,6117,481,1,0,0,0,6118,6119,5,125,0,0,6119,6120,
        5,468,0,0,6120,6121,3,792,396,0,6121,483,1,0,0,0,6122,6123,5,125,
        0,0,6123,6124,5,480,0,0,6124,6125,3,788,394,0,6125,485,1,0,0,0,6126,
        6128,5,134,0,0,6127,6129,5,587,0,0,6128,6127,1,0,0,0,6128,6129,1,
        0,0,0,6129,6130,1,0,0,0,6130,6131,5,716,0,0,6131,6132,5,223,0,0,
        6132,6133,5,159,0,0,6133,6134,5,870,0,0,6134,6137,3,758,379,0,6135,
        6136,5,297,0,0,6136,6138,5,371,0,0,6137,6135,1,0,0,0,6137,6138,1,
        0,0,0,6138,487,1,0,0,0,6139,6140,5,134,0,0,6140,6142,5,229,0,0,6141,
        6143,5,628,0,0,6142,6141,1,0,0,0,6142,6143,1,0,0,0,6143,6146,1,0,
        0,0,6144,6145,5,474,0,0,6145,6147,5,982,0,0,6146,6144,1,0,0,0,6146,
        6147,1,0,0,0,6147,6148,1,0,0,0,6148,6158,5,286,0,0,6149,6159,5,13,
        0,0,6150,6155,3,76,38,0,6151,6152,5,1208,0,0,6152,6154,3,76,38,0,
        6153,6151,1,0,0,0,6154,6157,1,0,0,0,6155,6153,1,0,0,0,6155,6156,
        1,0,0,0,6156,6159,1,0,0,0,6157,6155,1,0,0,0,6158,6149,1,0,0,0,6158,
        6150,1,0,0,0,6159,6163,1,0,0,0,6160,6161,5,159,0,0,6161,6162,5,74,
        0,0,6162,6164,3,790,395,0,6163,6160,1,0,0,0,6163,6164,1,0,0,0,6164,
        6168,1,0,0,0,6165,6166,5,159,0,0,6166,6167,5,74,0,0,6167,6169,3,
        790,395,0,6168,6165,1,0,0,0,6168,6169,1,0,0,0,6169,6179,1,0,0,0,
        6170,6171,5,42,0,0,6171,6176,3,802,401,0,6172,6173,5,1208,0,0,6173,
        6175,3,802,401,0,6174,6172,1,0,0,0,6175,6178,1,0,0,0,6176,6174,1,
        0,0,0,6176,6177,1,0,0,0,6177,6180,1,0,0,0,6178,6176,1,0,0,0,6179,
        6170,1,0,0,0,6179,6180,1,0,0,0,6180,6190,1,0,0,0,6181,6182,5,286,
        0,0,6182,6187,3,80,40,0,6183,6184,5,1208,0,0,6184,6186,3,80,40,0,
        6185,6183,1,0,0,0,6186,6189,1,0,0,0,6187,6185,1,0,0,0,6187,6188,
        1,0,0,0,6188,6191,1,0,0,0,6189,6187,1,0,0,0,6190,6181,1,0,0,0,6190,
        6191,1,0,0,0,6191,489,1,0,0,0,6192,6193,5,134,0,0,6193,6194,5,869,
        0,0,6194,6195,5,563,0,0,6195,491,1,0,0,0,6196,6197,5,134,0,0,6197,
        6198,5,869,0,0,6198,6199,5,229,0,0,6199,6200,5,286,0,0,6200,6201,
        3,494,247,0,6201,493,1,0,0,0,6202,6207,3,496,248,0,6203,6207,3,92,
        46,0,6204,6207,3,94,47,0,6205,6207,3,96,48,0,6206,6202,1,0,0,0,6206,
        6203,1,0,0,0,6206,6204,1,0,0,0,6206,6205,1,0,0,0,6207,495,1,0,0,
        0,6208,6209,5,13,0,0,6209,6210,5,901,0,0,6210,497,1,0,0,0,6211,6212,
        5,158,0,0,6212,6213,5,869,0,0,6213,6214,5,229,0,0,6214,6215,5,474,
        0,0,6215,6216,3,500,250,0,6216,499,1,0,0,0,6217,6218,7,52,0,0,6218,
        501,1,0,0,0,6219,6220,5,184,0,0,6220,6419,5,1203,0,0,6221,6222,5,
        184,0,0,6222,6228,5,69,0,0,6223,6229,3,996,498,0,6224,6225,3,792,
        396,0,6225,6226,5,1209,0,0,6226,6227,5,1219,0,0,6227,6229,1,0,0,
        0,6228,6223,1,0,0,0,6228,6224,1,0,0,0,6229,6240,1,0,0,0,6230,6236,
        5,1208,0,0,6231,6237,3,996,498,0,6232,6233,3,792,396,0,6233,6234,
        5,1209,0,0,6234,6235,5,1219,0,0,6235,6237,1,0,0,0,6236,6231,1,0,
        0,0,6236,6232,1,0,0,0,6237,6239,1,0,0,0,6238,6230,1,0,0,0,6239,6242,
        1,0,0,0,6240,6238,1,0,0,0,6240,6241,1,0,0,0,6241,6419,1,0,0,0,6242,
        6240,1,0,0,0,6243,6244,5,184,0,0,6244,6245,5,69,0,0,6245,6250,3,
        784,392,0,6246,6247,5,1208,0,0,6247,6249,3,784,392,0,6248,6246,1,
        0,0,0,6249,6252,1,0,0,0,6250,6248,1,0,0,0,6250,6251,1,0,0,0,6251,
        6253,1,0,0,0,6252,6250,1,0,0,0,6253,6254,5,164,0,0,6254,6259,3,792,
        396,0,6255,6256,5,1208,0,0,6256,6258,3,792,396,0,6257,6255,1,0,0,
        0,6258,6261,1,0,0,0,6259,6257,1,0,0,0,6259,6260,1,0,0,0,6260,6419,
        1,0,0,0,6261,6259,1,0,0,0,6262,6263,5,184,0,0,6263,6264,5,69,0,0,
        6264,6265,5,1219,0,0,6265,6266,5,164,0,0,6266,6271,3,792,396,0,6267,
        6268,5,1208,0,0,6268,6270,3,792,396,0,6269,6267,1,0,0,0,6270,6273,
        1,0,0,0,6271,6269,1,0,0,0,6271,6272,1,0,0,0,6272,6419,1,0,0,0,6273,
        6271,1,0,0,0,6274,6275,5,184,0,0,6275,6276,5,69,0,0,6276,6277,3,
        784,392,0,6277,6278,5,164,0,0,6278,6279,5,137,0,0,6279,6280,5,406,
        0,0,6280,6281,5,159,0,0,6281,6282,3,792,396,0,6282,6419,1,0,0,0,
        6283,6284,5,184,0,0,6284,6285,5,74,0,0,6285,6419,3,790,395,0,6286,
        6287,5,184,0,0,6287,6288,5,406,0,0,6288,6419,3,792,396,0,6289,6290,
        5,184,0,0,6290,6291,5,137,0,0,6291,6292,5,406,0,0,6292,6293,5,159,
        0,0,6293,6419,3,792,396,0,6294,6295,5,184,0,0,6295,6296,5,469,0,
        0,6296,6297,5,406,0,0,6297,6419,3,792,396,0,6298,6299,5,184,0,0,
        6299,6300,5,468,0,0,6300,6419,3,792,396,0,6301,6302,5,184,0,0,6302,
        6304,5,192,0,0,6303,6305,5,417,0,0,6304,6303,1,0,0,0,6304,6305,1,
        0,0,0,6305,6306,1,0,0,0,6306,6318,3,790,395,0,6307,6308,5,1213,0,
        0,6308,6313,3,784,392,0,6309,6310,5,1208,0,0,6310,6312,3,784,392,
        0,6311,6309,1,0,0,0,6312,6315,1,0,0,0,6313,6311,1,0,0,0,6313,6314,
        1,0,0,0,6314,6316,1,0,0,0,6315,6313,1,0,0,0,6316,6317,5,1214,0,0,
        6317,6319,1,0,0,0,6318,6307,1,0,0,0,6318,6319,1,0,0,0,6319,6419,
        1,0,0,0,6320,6321,5,184,0,0,6321,6322,5,210,0,0,6322,6323,5,192,
        0,0,6323,6419,3,790,395,0,6324,6325,5,184,0,0,6325,6326,5,178,0,
        0,6326,6327,5,192,0,0,6327,6419,3,790,395,0,6328,6329,5,184,0,0,
        6329,6330,5,310,0,0,6330,6332,3,794,397,0,6331,6333,7,53,0,0,6332,
        6331,1,0,0,0,6332,6333,1,0,0,0,6333,6419,1,0,0,0,6334,6335,5,184,
        0,0,6335,6336,5,166,0,0,6336,6349,3,796,398,0,6337,6346,5,1213,0,
        0,6338,6343,3,690,345,0,6339,6340,5,1208,0,0,6340,6342,3,690,345,
        0,6341,6339,1,0,0,0,6342,6345,1,0,0,0,6343,6341,1,0,0,0,6343,6344,
        1,0,0,0,6344,6347,1,0,0,0,6345,6343,1,0,0,0,6346,6338,1,0,0,0,6346,
        6347,1,0,0,0,6347,6348,1,0,0,0,6348,6350,5,1214,0,0,6349,6337,1,
        0,0,0,6349,6350,1,0,0,0,6350,6419,1,0,0,0,6351,6352,5,184,0,0,6352,
        6353,5,384,0,0,6353,6354,5,166,0,0,6354,6419,3,796,398,0,6355,6356,
        5,184,0,0,6356,6419,3,566,283,0,6357,6358,5,184,0,0,6358,6359,5,
        384,0,0,6359,6361,5,243,0,0,6360,6362,3,718,359,0,6361,6360,1,0,
        0,0,6361,6362,1,0,0,0,6362,6363,1,0,0,0,6363,6419,3,828,414,0,6364,
        6365,5,184,0,0,6365,6366,5,437,0,0,6366,6368,3,708,354,0,6367,6369,
        7,54,0,0,6368,6367,1,0,0,0,6368,6369,1,0,0,0,6369,6419,1,0,0,0,6370,
        6371,5,184,0,0,6371,6372,3,748,374,0,6372,6373,5,905,0,0,6373,6374,
        3,708,354,0,6374,6419,1,0,0,0,6375,6376,5,184,0,0,6376,6377,5,50,
        0,0,6377,6379,3,708,354,0,6378,6380,7,55,0,0,6379,6378,1,0,0,0,6379,
        6380,1,0,0,0,6380,6419,1,0,0,0,6381,6382,5,184,0,0,6382,6383,5,432,
        0,0,6383,6419,3,708,354,0,6384,6385,5,184,0,0,6385,6386,5,102,0,
        0,6386,6419,3,800,400,0,6387,6388,5,184,0,0,6388,6389,5,456,0,0,
        6389,6419,3,802,401,0,6390,6391,5,184,0,0,6391,6392,5,435,0,0,6392,
        6419,3,790,395,0,6393,6394,5,184,0,0,6394,6395,5,160,0,0,6395,6397,
        5,917,0,0,6396,6398,3,1072,536,0,6397,6396,1,0,0,0,6397,6398,1,0,
        0,0,6398,6399,1,0,0,0,6399,6419,3,788,394,0,6400,6401,5,184,0,0,
        6401,6402,5,160,0,0,6402,6403,5,102,0,0,6403,6404,3,800,400,0,6404,
        6405,3,888,444,0,6405,6419,1,0,0,0,6406,6407,5,184,0,0,6407,6408,
        5,160,0,0,6408,6409,5,406,0,0,6409,6410,3,792,396,0,6410,6411,3,
        888,444,0,6411,6419,1,0,0,0,6412,6413,5,184,0,0,6413,6414,5,160,
        0,0,6414,6415,5,166,0,0,6415,6416,3,796,398,0,6416,6417,3,888,444,
        0,6417,6419,1,0,0,0,6418,6219,1,0,0,0,6418,6221,1,0,0,0,6418,6243,
        1,0,0,0,6418,6262,1,0,0,0,6418,6274,1,0,0,0,6418,6283,1,0,0,0,6418,
        6286,1,0,0,0,6418,6289,1,0,0,0,6418,6294,1,0,0,0,6418,6298,1,0,0,
        0,6418,6301,1,0,0,0,6418,6320,1,0,0,0,6418,6324,1,0,0,0,6418,6328,
        1,0,0,0,6418,6334,1,0,0,0,6418,6351,1,0,0,0,6418,6355,1,0,0,0,6418,
        6357,1,0,0,0,6418,6364,1,0,0,0,6418,6370,1,0,0,0,6418,6375,1,0,0,
        0,6418,6381,1,0,0,0,6418,6384,1,0,0,0,6418,6387,1,0,0,0,6418,6390,
        1,0,0,0,6418,6393,1,0,0,0,6418,6400,1,0,0,0,6418,6406,1,0,0,0,6418,
        6412,1,0,0,0,6419,503,1,0,0,0,6420,6422,5,184,0,0,6421,6423,5,93,
        0,0,6422,6421,1,0,0,0,6422,6423,1,0,0,0,6423,6424,1,0,0,0,6424,6426,
        5,395,0,0,6425,6427,5,286,0,0,6426,6425,1,0,0,0,6426,6427,1,0,0,
        0,6427,6429,1,0,0,0,6428,6430,5,417,0,0,6429,6428,1,0,0,0,6429,6430,
        1,0,0,0,6430,6431,1,0,0,0,6431,6432,3,790,395,0,6432,505,1,0,0,0,
        6433,6435,5,184,0,0,6434,6436,5,93,0,0,6435,6434,1,0,0,0,6435,6436,
        1,0,0,0,6436,6437,1,0,0,0,6437,6439,5,395,0,0,6438,6440,5,286,0,
        0,6439,6438,1,0,0,0,6439,6440,1,0,0,0,6440,6441,1,0,0,0,6441,6442,
        3,790,395,0,6442,6443,5,164,0,0,6443,6447,3,800,400,0,6444,6445,
        5,159,0,0,6445,6446,5,869,0,0,6446,6448,3,764,382,0,6447,6444,1,
        0,0,0,6447,6448,1,0,0,0,6448,6451,1,0,0,0,6449,6450,5,366,0,0,6450,
        6452,3,764,382,0,6451,6449,1,0,0,0,6451,6452,1,0,0,0,6452,6455,1,
        0,0,0,6453,6454,5,457,0,0,6454,6456,5,773,0,0,6455,6453,1,0,0,0,
        6455,6456,1,0,0,0,6456,507,1,0,0,0,6457,6458,5,703,0,0,6458,6459,
        5,346,0,0,6459,6460,5,499,0,0,6460,6461,5,1041,0,0,6461,6462,5,159,
        0,0,6462,6467,3,790,395,0,6463,6464,5,1208,0,0,6464,6466,3,790,395,
        0,6465,6463,1,0,0,0,6466,6469,1,0,0,0,6467,6465,1,0,0,0,6467,6468,
        1,0,0,0,6468,509,1,0,0,0,6469,6467,1,0,0,0,6470,6471,5,229,0,0,6471,
        6472,5,703,0,0,6472,6473,5,511,0,0,6473,6474,5,283,0,0,6474,6475,
        5,159,0,0,6475,6480,3,790,395,0,6476,6477,5,1208,0,0,6477,6479,3,
        790,395,0,6478,6476,1,0,0,0,6479,6482,1,0,0,0,6480,6478,1,0,0,0,
        6480,6481,1,0,0,0,6481,511,1,0,0,0,6482,6480,1,0,0,0,6483,6484,5,
        229,0,0,6484,6485,5,703,0,0,6485,6486,5,511,0,0,6486,6487,5,286,
        0,0,6487,6488,5,159,0,0,6488,6493,3,790,395,0,6489,6490,5,1208,0,
        0,6490,6492,3,790,395,0,6491,6489,1,0,0,0,6492,6495,1,0,0,0,6493,
        6491,1,0,0,0,6493,6494,1,0,0,0,6494,6499,1,0,0,0,6495,6493,1,0,0,
        0,6496,6497,5,115,0,0,6497,6498,5,228,0,0,6498,6500,5,364,0,0,6499,
        6496,1,0,0,0,6499,6500,1,0,0,0,6500,513,1,0,0,0,6501,6502,5,254,
        0,0,6502,6503,5,102,0,0,6503,6504,3,800,400,0,6504,6505,5,20,0,0,
        6505,6510,3,516,258,0,6506,6507,5,1208,0,0,6507,6509,3,516,258,0,
        6508,6506,1,0,0,0,6509,6512,1,0,0,0,6510,6508,1,0,0,0,6510,6511,
        1,0,0,0,6511,515,1,0,0,0,6512,6510,1,0,0,0,6513,6524,3,576,288,0,
        6514,6515,5,5,0,0,6515,6516,5,1224,0,0,6516,6524,3,758,379,0,6517,
        6524,3,580,290,0,6518,6524,3,582,291,0,6519,6524,3,584,292,0,6520,
        6524,3,586,293,0,6521,6524,3,588,294,0,6522,6524,3,590,295,0,6523,
        6513,1,0,0,0,6523,6514,1,0,0,0,6523,6517,1,0,0,0,6523,6518,1,0,0,
        0,6523,6519,1,0,0,0,6523,6520,1,0,0,0,6523,6521,1,0,0,0,6523,6522,
        1,0,0,0,6524,517,1,0,0,0,6525,6526,5,254,0,0,6526,6527,5,311,0,0,
        6527,6528,3,806,403,0,6528,6529,5,20,0,0,6529,6534,3,280,140,0,6530,
        6531,5,1208,0,0,6531,6533,3,280,140,0,6532,6530,1,0,0,0,6533,6536,
        1,0,0,0,6534,6532,1,0,0,0,6534,6535,1,0,0,0,6535,519,1,0,0,0,6536,
        6534,1,0,0,0,6537,6538,5,254,0,0,6538,6539,5,456,0,0,6539,6540,3,
        802,401,0,6540,6541,5,20,0,0,6541,6546,3,522,261,0,6542,6543,5,1208,
        0,0,6543,6545,3,522,261,0,6544,6542,1,0,0,0,6545,6548,1,0,0,0,6546,
        6544,1,0,0,0,6546,6547,1,0,0,0,6547,521,1,0,0,0,6548,6546,1,0,0,
        0,6549,6667,3,576,288,0,6550,6551,5,393,0,0,6551,6554,5,1224,0,0,
        6552,6555,3,758,379,0,6553,6555,5,274,0,0,6554,6552,1,0,0,0,6554,
        6553,1,0,0,0,6555,6667,1,0,0,0,6556,6557,5,299,0,0,6557,6565,5,1224,
        0,0,6558,6566,3,592,296,0,6559,6560,5,1213,0,0,6560,6561,5,663,0,
        0,6561,6562,5,1224,0,0,6562,6563,3,764,382,0,6563,6564,5,1214,0,
        0,6564,6566,1,0,0,0,6565,6558,1,0,0,0,6565,6559,1,0,0,0,6566,6569,
        1,0,0,0,6567,6568,5,159,0,0,6568,6570,5,456,0,0,6569,6567,1,0,0,
        0,6569,6570,1,0,0,0,6570,6667,1,0,0,0,6571,6572,5,337,0,0,6572,6573,
        5,299,0,0,6573,6667,5,226,0,0,6574,6575,5,5,0,0,6575,6585,5,1224,
        0,0,6576,6581,3,758,379,0,6577,6578,5,1208,0,0,6578,6580,3,758,379,
        0,6579,6577,1,0,0,0,6580,6583,1,0,0,0,6581,6579,1,0,0,0,6581,6582,
        1,0,0,0,6582,6586,1,0,0,0,6583,6581,1,0,0,0,6584,6586,5,274,0,0,
        6585,6576,1,0,0,0,6585,6584,1,0,0,0,6586,6667,1,0,0,0,6587,6667,
        3,580,290,0,6588,6589,5,111,0,0,6589,6590,5,102,0,0,6590,6591,5,
        1224,0,0,6591,6667,3,800,400,0,6592,6593,5,67,0,0,6593,6594,5,1224,
        0,0,6594,6667,3,540,270,0,6595,6667,3,582,291,0,6596,6667,3,584,
        292,0,6597,6667,3,586,293,0,6598,6667,3,588,294,0,6599,6667,3,590,
        295,0,6600,6601,5,421,0,0,6601,6602,5,480,0,0,6602,6609,5,1224,0,
        0,6603,6610,5,224,0,0,6604,6606,7,1,0,0,6605,6604,1,0,0,0,6605,6606,
        1,0,0,0,6606,6607,1,0,0,0,6607,6610,3,758,379,0,6608,6610,5,274,
        0,0,6609,6603,1,0,0,0,6609,6605,1,0,0,0,6609,6608,1,0,0,0,6610,6667,
        1,0,0,0,6611,6612,5,105,0,0,6612,6613,5,1224,0,0,6613,6667,7,50,
        0,0,6614,6615,5,111,0,0,6615,6616,5,55,0,0,6616,6617,5,372,0,0,6617,
        6667,7,51,0,0,6618,6619,5,111,0,0,6619,6620,5,357,0,0,6620,6625,
        5,1224,0,0,6621,6626,3,804,402,0,6622,6626,5,269,0,0,6623,6626,5,
        274,0,0,6624,6626,5,13,0,0,6625,6621,1,0,0,0,6625,6622,1,0,0,0,6625,
        6623,1,0,0,0,6625,6624,1,0,0,0,6626,6667,1,0,0,0,6627,6628,5,311,
        0,0,6628,6631,5,1224,0,0,6629,6632,3,806,403,0,6630,6632,5,274,0,
        0,6631,6629,1,0,0,0,6631,6630,1,0,0,0,6632,6667,1,0,0,0,6633,6634,
        5,432,0,0,6634,6643,5,1213,0,0,6635,6640,3,416,208,0,6636,6637,5,
        1208,0,0,6637,6639,3,416,208,0,6638,6636,1,0,0,0,6639,6642,1,0,0,
        0,6640,6638,1,0,0,0,6640,6641,1,0,0,0,6641,6644,1,0,0,0,6642,6640,
        1,0,0,0,6643,6635,1,0,0,0,6643,6644,1,0,0,0,6644,6645,1,0,0,0,6645,
        6667,5,1214,0,0,6646,6648,5,272,0,0,6647,6646,1,0,0,0,6647,6648,
        1,0,0,0,6648,6649,1,0,0,0,6649,6667,5,617,0,0,6650,6651,5,665,0,
        0,6651,6654,5,1224,0,0,6652,6655,3,758,379,0,6653,6655,5,111,0,0,
        6654,6652,1,0,0,0,6654,6653,1,0,0,0,6655,6667,1,0,0,0,6656,6657,
        5,74,0,0,6657,6658,5,1224,0,0,6658,6663,3,418,209,0,6659,6660,5,
        1208,0,0,6660,6662,3,418,209,0,6661,6659,1,0,0,0,6662,6665,1,0,0,
        0,6663,6661,1,0,0,0,6663,6664,1,0,0,0,6664,6667,1,0,0,0,6665,6663,
        1,0,0,0,6666,6549,1,0,0,0,6666,6550,1,0,0,0,6666,6556,1,0,0,0,6666,
        6571,1,0,0,0,6666,6574,1,0,0,0,6666,6587,1,0,0,0,6666,6588,1,0,0,
        0,6666,6592,1,0,0,0,6666,6595,1,0,0,0,6666,6596,1,0,0,0,6666,6597,
        1,0,0,0,6666,6598,1,0,0,0,6666,6599,1,0,0,0,6666,6600,1,0,0,0,6666,
        6611,1,0,0,0,6666,6614,1,0,0,0,6666,6618,1,0,0,0,6666,6627,1,0,0,
        0,6666,6633,1,0,0,0,6666,6647,1,0,0,0,6666,6650,1,0,0,0,6666,6656,
        1,0,0,0,6667,523,1,0,0,0,6668,6693,5,338,0,0,6669,6670,5,384,0,0,
        6670,6671,5,166,0,0,6671,6672,3,796,398,0,6672,6673,7,3,0,0,6673,
        6674,3,796,398,0,6674,6694,1,0,0,0,6675,6676,5,166,0,0,6676,6688,
        3,796,398,0,6677,6678,5,1213,0,0,6678,6683,3,688,344,0,6679,6680,
        5,1208,0,0,6680,6682,3,688,344,0,6681,6679,1,0,0,0,6682,6685,1,0,
        0,0,6683,6681,1,0,0,0,6683,6684,1,0,0,0,6684,6686,1,0,0,0,6685,6683,
        1,0,0,0,6686,6687,5,1214,0,0,6687,6689,1,0,0,0,6688,6677,1,0,0,0,
        6688,6689,1,0,0,0,6689,6690,1,0,0,0,6690,6691,7,3,0,0,6691,6692,
        3,796,398,0,6692,6694,1,0,0,0,6693,6669,1,0,0,0,6693,6675,1,0,0,
        0,6694,525,1,0,0,0,6695,6696,5,338,0,0,6696,6697,5,310,0,0,6697,
        6698,3,794,397,0,6698,6699,7,3,0,0,6699,6700,3,794,397,0,6700,527,
        1,0,0,0,6701,6702,5,338,0,0,6702,6703,5,235,0,0,6703,6704,3,798,
        399,0,6704,6705,7,3,0,0,6705,6706,3,798,399,0,6706,529,1,0,0,0,6707,
        6708,5,338,0,0,6708,6709,5,406,0,0,6709,6710,3,792,396,0,6710,6711,
        7,3,0,0,6711,6712,3,792,396,0,6712,531,1,0,0,0,6713,6714,5,338,0,
        0,6714,6715,5,435,0,0,6715,6716,3,790,395,0,6716,6717,7,3,0,0,6717,
        6718,3,790,395,0,6718,533,1,0,0,0,6719,6720,5,338,0,0,6720,6721,
        5,468,0,0,6721,6722,3,792,396,0,6722,6723,7,3,0,0,6723,6724,3,792,
        396,0,6724,535,1,0,0,0,6725,6726,5,340,0,0,6726,6727,5,869,0,0,6727,
        6737,5,229,0,0,6728,6729,5,474,0,0,6729,6734,3,86,43,0,6730,6731,
        5,1208,0,0,6731,6733,3,86,43,0,6732,6730,1,0,0,0,6733,6736,1,0,0,
        0,6734,6732,1,0,0,0,6734,6735,1,0,0,0,6735,6738,1,0,0,0,6736,6734,
        1,0,0,0,6737,6728,1,0,0,0,6737,6738,1,0,0,0,6738,6742,1,0,0,0,6739,
        6740,5,252,0,0,6740,6741,5,1224,0,0,6741,6743,3,764,382,0,6742,6739,
        1,0,0,0,6742,6743,1,0,0,0,6743,6750,1,0,0,0,6744,6745,5,221,0,0,
        6745,6748,3,88,44,0,6746,6747,5,16,0,0,6747,6749,3,88,44,0,6748,
        6746,1,0,0,0,6748,6749,1,0,0,0,6749,6751,1,0,0,0,6750,6744,1,0,0,
        0,6750,6751,1,0,0,0,6751,6752,1,0,0,0,6752,6753,5,286,0,0,6753,6754,
        3,90,45,0,6754,537,1,0,0,0,6755,6756,5,372,0,0,6756,6759,5,371,0,
        0,6757,6759,5,391,0,0,6758,6755,1,0,0,0,6758,6757,1,0,0,0,6759,6760,
        1,0,0,0,6760,6761,5,5,0,0,6761,6762,5,1224,0,0,6762,6763,3,758,379,
        0,6763,6764,5,159,0,0,6764,6765,7,56,0,0,6765,6934,1,0,0,0,6766,
        6767,5,372,0,0,6767,6770,5,371,0,0,6768,6770,5,391,0,0,6769,6766,
        1,0,0,0,6769,6768,1,0,0,0,6770,6771,1,0,0,0,6771,6772,5,558,0,0,
        6772,6773,5,1224,0,0,6773,6934,3,788,394,0,6774,6775,5,372,0,0,6775,
        6778,5,371,0,0,6776,6778,5,391,0,0,6777,6774,1,0,0,0,6777,6776,1,
        0,0,0,6778,6779,1,0,0,0,6779,6780,5,55,0,0,6780,6781,5,372,0,0,6781,
        6782,5,1015,0,0,6782,6783,5,844,0,0,6783,6784,5,984,0,0,6784,6934,
        7,10,0,0,6785,6786,5,372,0,0,6786,6789,5,371,0,0,6787,6789,5,391,
        0,0,6788,6785,1,0,0,0,6788,6787,1,0,0,0,6789,6790,1,0,0,0,6790,6791,
        5,67,0,0,6791,6934,3,540,270,0,6792,6793,5,372,0,0,6793,6796,5,371,
        0,0,6794,6796,5,391,0,0,6795,6792,1,0,0,0,6795,6794,1,0,0,0,6796,
        6797,1,0,0,0,6797,6802,3,542,271,0,6798,6799,5,1208,0,0,6799,6801,
        3,542,271,0,6800,6798,1,0,0,0,6801,6804,1,0,0,0,6802,6800,1,0,0,
        0,6802,6803,1,0,0,0,6803,6934,1,0,0,0,6804,6802,1,0,0,0,6805,6806,
        5,372,0,0,6806,6809,5,371,0,0,6807,6809,5,391,0,0,6808,6805,1,0,
        0,0,6808,6807,1,0,0,0,6809,6810,1,0,0,0,6810,6811,5,102,0,0,6811,
        6934,3,800,400,0,6812,6813,5,372,0,0,6813,6816,5,371,0,0,6814,6816,
        5,391,0,0,6815,6812,1,0,0,0,6815,6814,1,0,0,0,6816,6817,1,0,0,0,
        6817,6818,5,105,0,0,6818,6819,5,1224,0,0,6819,6934,7,57,0,0,6820,
        6821,5,372,0,0,6821,6824,5,371,0,0,6822,6824,5,391,0,0,6823,6820,
        1,0,0,0,6823,6822,1,0,0,0,6824,6825,1,0,0,0,6825,6826,5,619,0,0,
        6826,6827,3,546,273,0,6827,6828,7,10,0,0,6828,6934,1,0,0,0,6829,
        6830,5,372,0,0,6830,6833,5,371,0,0,6831,6833,5,391,0,0,6832,6829,
        1,0,0,0,6832,6831,1,0,0,0,6833,6834,1,0,0,0,6834,6835,5,637,0,0,
        6835,6836,5,802,0,0,6836,6837,7,58,0,0,6837,6838,5,286,0,0,6838,
        6934,5,137,0,0,6839,6840,5,372,0,0,6840,6843,5,371,0,0,6841,6843,
        5,391,0,0,6842,6839,1,0,0,0,6842,6841,1,0,0,0,6843,6844,1,0,0,0,
        6844,6846,5,159,0,0,6845,6847,5,268,0,0,6846,6845,1,0,0,0,6846,6847,
        1,0,0,0,6847,6849,1,0,0,0,6848,6850,5,587,0,0,6849,6848,1,0,0,0,
        6849,6850,1,0,0,0,6850,6851,1,0,0,0,6851,6852,5,716,0,0,6852,6934,
        5,223,0,0,6853,6854,5,372,0,0,6854,6857,5,371,0,0,6855,6857,5,391,
        0,0,6856,6853,1,0,0,0,6856,6855,1,0,0,0,6857,6858,1,0,0,0,6858,6859,
        5,166,0,0,6859,6862,5,428,0,0,6860,6863,3,548,274,0,6861,6863,5,
        283,0,0,6862,6860,1,0,0,0,6862,6861,1,0,0,0,6863,6934,1,0,0,0,6864,
        6865,5,372,0,0,6865,6868,5,371,0,0,6866,6868,5,391,0,0,6867,6864,
        1,0,0,0,6867,6866,1,0,0,0,6868,6869,1,0,0,0,6869,6870,5,720,0,0,
        6870,6871,5,697,0,0,6871,6872,5,655,0,0,6872,6934,7,10,0,0,6873,
        6874,5,372,0,0,6874,6877,5,371,0,0,6875,6877,5,391,0,0,6876,6873,
        1,0,0,0,6876,6875,1,0,0,0,6877,6878,1,0,0,0,6878,6879,5,909,0,0,
        6879,6880,5,1224,0,0,6880,6885,3,800,400,0,6881,6882,5,1208,0,0,
        6882,6884,3,800,400,0,6883,6881,1,0,0,0,6884,6887,1,0,0,0,6885,6883,
        1,0,0,0,6885,6886,1,0,0,0,6886,6934,1,0,0,0,6887,6885,1,0,0,0,6888,
        6889,5,372,0,0,6889,6892,5,371,0,0,6890,6892,5,391,0,0,6891,6888,
        1,0,0,0,6891,6890,1,0,0,0,6892,6893,1,0,0,0,6893,6894,5,568,0,0,
        6894,6895,5,20,0,0,6895,6896,5,430,0,0,6896,6897,5,717,0,0,6897,
        6898,5,740,0,0,6898,6934,3,544,272,0,6899,6900,5,372,0,0,6900,6901,
        5,421,0,0,6901,6905,5,480,0,0,6902,6906,5,224,0,0,6903,6906,5,456,
        0,0,6904,6906,3,996,498,0,6905,6902,1,0,0,0,6905,6903,1,0,0,0,6905,
        6904,1,0,0,0,6906,6934,1,0,0,0,6907,6908,5,372,0,0,6908,6911,5,371,
        0,0,6909,6911,5,391,0,0,6910,6907,1,0,0,0,6910,6909,1,0,0,0,6911,
        6912,1,0,0,0,6912,6913,5,1012,0,0,6913,6914,5,1224,0,0,6914,6919,
        3,800,400,0,6915,6916,5,1208,0,0,6916,6918,3,800,400,0,6917,6915,
        1,0,0,0,6918,6921,1,0,0,0,6919,6917,1,0,0,0,6919,6920,1,0,0,0,6920,
        6922,1,0,0,0,6921,6919,1,0,0,0,6922,6923,5,159,0,0,6923,6924,5,166,
        0,0,6924,6925,5,1224,0,0,6925,6930,3,792,396,0,6926,6927,5,1208,
        0,0,6927,6929,3,792,396,0,6928,6926,1,0,0,0,6929,6932,1,0,0,0,6930,
        6928,1,0,0,0,6930,6931,1,0,0,0,6931,6934,1,0,0,0,6932,6930,1,0,0,
        0,6933,6758,1,0,0,0,6933,6769,1,0,0,0,6933,6777,1,0,0,0,6933,6788,
        1,0,0,0,6933,6795,1,0,0,0,6933,6808,1,0,0,0,6933,6815,1,0,0,0,6933,
        6823,1,0,0,0,6933,6832,1,0,0,0,6933,6842,1,0,0,0,6933,6856,1,0,0,
        0,6933,6867,1,0,0,0,6933,6876,1,0,0,0,6933,6891,1,0,0,0,6933,6899,
        1,0,0,0,6933,6910,1,0,0,0,6934,539,1,0,0,0,6935,6936,7,59,0,0,6936,
        541,1,0,0,0,6937,6938,5,74,0,0,6938,6939,5,1224,0,0,6939,6940,3,
        788,394,0,6940,6951,5,1213,0,0,6941,6952,3,788,394,0,6942,6947,3,
        788,394,0,6943,6944,5,1208,0,0,6944,6946,3,788,394,0,6945,6943,1,
        0,0,0,6946,6949,1,0,0,0,6947,6945,1,0,0,0,6947,6948,1,0,0,0,6948,
        6952,1,0,0,0,6949,6947,1,0,0,0,6950,6952,5,274,0,0,6951,6941,1,0,
        0,0,6951,6942,1,0,0,0,6951,6950,1,0,0,0,6952,6953,1,0,0,0,6953,6954,
        5,1214,0,0,6954,543,1,0,0,0,6955,6956,5,877,0,0,6956,6961,5,1014,
        0,0,6957,6961,5,900,0,0,6958,6961,5,916,0,0,6959,6961,5,935,0,0,
        6960,6955,1,0,0,0,6960,6957,1,0,0,0,6960,6958,1,0,0,0,6960,6959,
        1,0,0,0,6961,545,1,0,0,0,6962,6963,5,166,0,0,6963,6972,3,796,398,
        0,6964,6965,5,310,0,0,6965,6972,3,794,397,0,6966,6968,5,243,0,0,
        6967,6969,3,718,359,0,6968,6967,1,0,0,0,6968,6969,1,0,0,0,6969,6970,
        1,0,0,0,6970,6972,3,828,414,0,6971,6962,1,0,0,0,6971,6964,1,0,0,
        0,6971,6966,1,0,0,0,6972,547,1,0,0,0,6973,6974,5,457,0,0,6974,6975,
        3,758,379,0,6975,6977,5,159,0,0,6976,6978,5,428,0,0,6977,6976,1,
        0,0,0,6977,6978,1,0,0,0,6978,6979,1,0,0,0,6979,6980,5,406,0,0,6980,
        6981,3,792,396,0,6981,549,1,0,0,0,6982,6983,5,372,0,0,6983,6989,
        5,357,0,0,6984,6990,3,804,402,0,6985,6990,5,151,0,0,6986,6990,5,
        269,0,0,6987,6990,5,274,0,0,6988,6990,5,13,0,0,6989,6984,1,0,0,0,
        6989,6985,1,0,0,0,6989,6986,1,0,0,0,6989,6987,1,0,0,0,6989,6988,
        1,0,0,0,6990,551,1,0,0,0,6991,6992,5,372,0,0,6992,6993,5,870,0,0,
        6993,6996,5,1224,0,0,6994,6997,3,758,379,0,6995,6997,5,269,0,0,6996,
        6994,1,0,0,0,6996,6995,1,0,0,0,6997,6999,1,0,0,0,6998,7000,5,453,
        0,0,6999,6998,1,0,0,0,6999,7000,1,0,0,0,7000,7001,1,0,0,0,7001,7007,
        5,159,0,0,7002,7004,5,371,0,0,7003,7005,5,469,0,0,7004,7003,1,0,
        0,0,7004,7005,1,0,0,0,7005,7008,1,0,0,0,7006,7008,5,430,0,0,7007,
        7002,1,0,0,0,7007,7006,1,0,0,0,7008,553,1,0,0,0,7009,7012,5,376,
        0,0,7010,7011,5,190,0,0,7011,7013,5,1042,0,0,7012,7010,1,0,0,0,7012,
        7013,1,0,0,0,7013,7014,1,0,0,0,7014,7015,5,178,0,0,7015,7016,5,192,
        0,0,7016,7124,3,790,395,0,7017,7020,5,376,0,0,7018,7019,5,190,0,
        0,7019,7021,5,1042,0,0,7020,7018,1,0,0,0,7020,7021,1,0,0,0,7021,
        7022,1,0,0,0,7022,7023,5,210,0,0,7023,7024,5,192,0,0,7024,7124,3,
        790,395,0,7025,7026,5,376,0,0,7026,7027,5,235,0,0,7027,7124,3,798,
        399,0,7028,7031,5,376,0,0,7029,7030,5,190,0,0,7030,7032,5,1042,0,
        0,7031,7029,1,0,0,0,7031,7032,1,0,0,0,7032,7034,1,0,0,0,7033,7035,
        5,417,0,0,7034,7033,1,0,0,0,7034,7035,1,0,0,0,7035,7036,1,0,0,0,
        7036,7037,5,406,0,0,7037,7124,3,792,396,0,7038,7039,5,376,0,0,7039,
        7040,5,137,0,0,7040,7041,5,406,0,0,7041,7042,5,159,0,0,7042,7124,
        3,792,396,0,7043,7044,5,376,0,0,7044,7045,5,435,0,0,7045,7124,3,
        790,395,0,7046,7049,5,376,0,0,7047,7048,5,190,0,0,7048,7050,5,1042,
        0,0,7049,7047,1,0,0,0,7049,7050,1,0,0,0,7050,7051,1,0,0,0,7051,7052,
        5,468,0,0,7052,7124,3,792,396,0,7053,7054,5,376,0,0,7054,7055,5,
        310,0,0,7055,7124,3,794,397,0,7056,7057,5,376,0,0,7057,7058,5,384,
        0,0,7058,7059,5,166,0,0,7059,7124,3,796,398,0,7060,7061,5,376,0,
        0,7061,7062,5,166,0,0,7062,7074,3,796,398,0,7063,7064,5,1213,0,0,
        7064,7069,3,690,345,0,7065,7066,5,1208,0,0,7066,7068,3,690,345,0,
        7067,7065,1,0,0,0,7068,7071,1,0,0,0,7069,7067,1,0,0,0,7069,7070,
        1,0,0,0,7070,7072,1,0,0,0,7071,7069,1,0,0,0,7072,7073,5,1214,0,0,
        7073,7075,1,0,0,0,7074,7063,1,0,0,0,7074,7075,1,0,0,0,7075,7124,
        1,0,0,0,7076,7077,5,376,0,0,7077,7078,5,384,0,0,7078,7080,5,243,
        0,0,7079,7081,3,718,359,0,7080,7079,1,0,0,0,7080,7081,1,0,0,0,7081,
        7082,1,0,0,0,7082,7124,3,828,414,0,7083,7084,5,376,0,0,7084,7124,
        3,566,283,0,7085,7086,5,376,0,0,7086,7087,5,50,0,0,7087,7124,3,708,
        354,0,7088,7089,5,376,0,0,7089,7090,5,437,0,0,7090,7124,3,708,354,
        0,7091,7092,5,376,0,0,7092,7094,3,748,374,0,7093,7095,3,750,375,
        0,7094,7093,1,0,0,0,7094,7095,1,0,0,0,7095,7096,1,0,0,0,7096,7097,
        5,905,0,0,7097,7098,3,708,354,0,7098,7124,1,0,0,0,7099,7100,5,376,
        0,0,7100,7101,5,668,0,0,7101,7124,3,790,395,0,7102,7103,5,376,0,
        0,7103,7104,5,74,0,0,7104,7124,3,790,395,0,7105,7106,5,376,0,0,7106,
        7107,5,29,0,0,7107,7124,3,790,395,0,7108,7109,5,376,0,0,7109,7110,
        5,688,0,0,7110,7111,5,372,0,0,7111,7124,3,790,395,0,7112,7115,5,
        376,0,0,7113,7114,5,190,0,0,7114,7116,5,1042,0,0,7115,7113,1,0,0,
        0,7115,7116,1,0,0,0,7116,7117,1,0,0,0,7117,7118,5,160,0,0,7118,7120,
        5,917,0,0,7119,7121,3,1072,536,0,7120,7119,1,0,0,0,7120,7121,1,0,
        0,0,7121,7122,1,0,0,0,7122,7124,3,788,394,0,7123,7009,1,0,0,0,7123,
        7017,1,0,0,0,7123,7025,1,0,0,0,7123,7028,1,0,0,0,7123,7038,1,0,0,
        0,7123,7043,1,0,0,0,7123,7046,1,0,0,0,7123,7053,1,0,0,0,7123,7056,
        1,0,0,0,7123,7060,1,0,0,0,7123,7076,1,0,0,0,7123,7083,1,0,0,0,7123,
        7085,1,0,0,0,7123,7088,1,0,0,0,7123,7091,1,0,0,0,7123,7099,1,0,0,
        0,7123,7102,1,0,0,0,7123,7105,1,0,0,0,7123,7108,1,0,0,0,7123,7112,
        1,0,0,0,7124,555,1,0,0,0,7125,7126,5,376,0,0,7126,7127,5,869,0,0,
        7127,7128,5,229,0,0,7128,7129,5,286,0,0,7129,7130,3,90,45,0,7130,
        557,1,0,0,0,7131,7134,5,376,0,0,7132,7133,5,190,0,0,7133,7135,5,
        1042,0,0,7134,7132,1,0,0,0,7134,7135,1,0,0,0,7135,7137,1,0,0,0,7136,
        7138,5,314,0,0,7137,7136,1,0,0,0,7137,7138,1,0,0,0,7138,7139,1,0,
        0,0,7139,7140,3,594,297,0,7140,559,1,0,0,0,7141,7144,5,376,0,0,7142,
        7143,5,190,0,0,7143,7145,5,1042,0,0,7144,7142,1,0,0,0,7144,7145,
        1,0,0,0,7145,7147,1,0,0,0,7146,7148,5,404,0,0,7147,7146,1,0,0,0,
        7147,7148,1,0,0,0,7148,7150,1,0,0,0,7149,7151,5,93,0,0,7150,7149,
        1,0,0,0,7150,7151,1,0,0,0,7151,7152,1,0,0,0,7152,7157,7,14,0,0,7153,
        7155,5,460,0,0,7154,7156,5,915,0,0,7155,7154,1,0,0,0,7155,7156,1,
        0,0,0,7156,7158,1,0,0,0,7157,7153,1,0,0,0,7157,7158,1,0,0,0,7158,
        7167,1,0,0,0,7159,7164,3,564,282,0,7160,7161,5,1208,0,0,7161,7163,
        3,564,282,0,7162,7160,1,0,0,0,7163,7166,1,0,0,0,7164,7162,1,0,0,
        0,7164,7165,1,0,0,0,7165,7168,1,0,0,0,7166,7164,1,0,0,0,7167,7159,
        1,0,0,0,7167,7168,1,0,0,0,7168,7169,1,0,0,0,7169,7173,5,286,0,0,
        7170,7171,5,417,0,0,7171,7174,3,792,396,0,7172,7174,3,792,396,0,
        7173,7170,1,0,0,0,7173,7172,1,0,0,0,7174,561,1,0,0,0,7175,7178,5,
        376,0,0,7176,7177,5,190,0,0,7177,7179,5,1042,0,0,7178,7176,1,0,0,
        0,7178,7179,1,0,0,0,7179,7180,1,0,0,0,7180,7185,7,14,0,0,7181,7183,
        5,460,0,0,7182,7184,5,915,0,0,7183,7182,1,0,0,0,7183,7184,1,0,0,
        0,7184,7186,1,0,0,0,7185,7181,1,0,0,0,7185,7186,1,0,0,0,7186,7195,
        1,0,0,0,7187,7192,3,564,282,0,7188,7189,5,1208,0,0,7189,7191,3,564,
        282,0,7190,7188,1,0,0,0,7191,7194,1,0,0,0,7192,7190,1,0,0,0,7192,
        7193,1,0,0,0,7193,7196,1,0,0,0,7194,7192,1,0,0,0,7195,7187,1,0,0,
        0,7195,7196,1,0,0,0,7196,7197,1,0,0,0,7197,7198,5,286,0,0,7198,7199,
        3,790,395,0,7199,7200,5,164,0,0,7200,7204,3,800,400,0,7201,7202,
        5,159,0,0,7202,7203,5,869,0,0,7203,7205,3,764,382,0,7204,7201,1,
        0,0,0,7204,7205,1,0,0,0,7205,7208,1,0,0,0,7206,7207,5,366,0,0,7207,
        7209,3,764,382,0,7208,7206,1,0,0,0,7208,7209,1,0,0,0,7209,7212,1,
        0,0,0,7210,7211,5,457,0,0,7211,7213,5,773,0,0,7212,7210,1,0,0,0,
        7212,7213,1,0,0,0,7213,563,1,0,0,0,7214,7216,5,448,0,0,7215,7214,
        1,0,0,0,7215,7216,1,0,0,0,7216,7217,1,0,0,0,7217,7218,5,192,0,0,
        7218,7222,3,108,54,0,7219,7220,5,69,0,0,7220,7222,3,110,55,0,7221,
        7215,1,0,0,0,7221,7219,1,0,0,0,7222,565,1,0,0,0,7223,7225,7,11,0,
        0,7224,7223,1,0,0,0,7224,7225,1,0,0,0,7225,7226,1,0,0,0,7226,7227,
        5,243,0,0,7227,7240,3,828,414,0,7228,7237,5,1213,0,0,7229,7234,3,
        824,412,0,7230,7231,5,1208,0,0,7231,7233,3,824,412,0,7232,7230,1,
        0,0,0,7233,7236,1,0,0,0,7234,7232,1,0,0,0,7234,7235,1,0,0,0,7235,
        7238,1,0,0,0,7236,7234,1,0,0,0,7237,7229,1,0,0,0,7237,7238,1,0,0,
        0,7238,7239,1,0,0,0,7239,7241,5,1214,0,0,7240,7228,1,0,0,0,7240,
        7241,1,0,0,0,7241,7242,1,0,0,0,7242,7243,5,159,0,0,7243,7244,3,824,
        412,0,7244,567,1,0,0,0,7245,7247,5,474,0,0,7246,7248,5,268,0,0,7247,
        7246,1,0,0,0,7247,7248,1,0,0,0,7248,7249,1,0,0,0,7249,7250,5,742,
        0,0,7250,7251,5,187,0,0,7251,569,1,0,0,0,7252,7253,5,291,0,0,7253,
        7254,5,42,0,0,7254,7259,7,41,0,0,7255,7256,5,1213,0,0,7256,7257,
        3,788,394,0,7257,7258,5,1214,0,0,7258,7260,1,0,0,0,7259,7255,1,0,
        0,0,7259,7260,1,0,0,0,7260,571,1,0,0,0,7261,7268,3,574,287,0,7262,
        7268,3,582,291,0,7263,7264,5,571,0,0,7264,7265,5,1224,0,0,7265,7268,
        7,5,0,0,7266,7268,3,346,173,0,7267,7261,1,0,0,0,7267,7262,1,0,0,
        0,7267,7263,1,0,0,0,7267,7266,1,0,0,0,7268,573,1,0,0,0,7269,7270,
        5,236,0,0,7270,7271,5,1224,0,0,7271,7275,3,788,394,0,7272,7273,5,
        577,0,0,7273,7274,5,457,0,0,7274,7276,3,788,394,0,7275,7272,1,0,
        0,0,7275,7276,1,0,0,0,7276,575,1,0,0,0,7277,7278,7,60,0,0,7278,7279,
        5,1224,0,0,7279,7281,3,996,498,0,7280,7282,5,45,0,0,7281,7280,1,
        0,0,0,7281,7282,1,0,0,0,7282,7284,1,0,0,0,7283,7285,3,578,289,0,
        7284,7283,1,0,0,0,7284,7285,1,0,0,0,7285,577,1,0,0,0,7286,7287,5,
        380,0,0,7287,7290,5,1224,0,0,7288,7291,3,764,382,0,7289,7291,5,111,
        0,0,7290,7288,1,0,0,0,7290,7289,1,0,0,0,7291,7293,1,0,0,0,7292,7294,
        5,300,0,0,7293,7292,1,0,0,0,7293,7294,1,0,0,0,7294,579,1,0,0,0,7295,
        7296,5,111,0,0,7296,7297,5,236,0,0,7297,7300,5,1224,0,0,7298,7301,
        3,788,394,0,7299,7301,5,274,0,0,7300,7298,1,0,0,0,7300,7299,1,0,
        0,0,7301,7308,1,0,0,0,7302,7304,5,297,0,0,7303,7305,5,272,0,0,7304,
        7303,1,0,0,0,7304,7305,1,0,0,0,7305,7306,1,0,0,0,7306,7307,5,286,
        0,0,7307,7309,5,137,0,0,7308,7302,1,0,0,0,7308,7309,1,0,0,0,7309,
        581,1,0,0,0,7310,7312,5,268,0,0,7311,7310,1,0,0,0,7311,7312,1,0,
        0,0,7312,7313,1,0,0,0,7313,7315,5,153,0,0,7314,7316,5,312,0,0,7315,
        7314,1,0,0,0,7315,7316,1,0,0,0,7316,583,1,0,0,0,7317,7319,7,61,0,
        0,7318,7317,1,0,0,0,7318,7319,1,0,0,0,7319,7321,1,0,0,0,7320,7322,
        5,33,0,0,7321,7320,1,0,0,0,7321,7322,1,0,0,0,7322,7323,1,0,0,0,7323,
        7324,5,211,0,0,7324,585,1,0,0,0,7325,7332,5,268,0,0,7326,7332,5,
        126,0,0,7327,7329,5,272,0,0,7328,7327,1,0,0,0,7328,7329,1,0,0,0,
        7329,7330,1,0,0,0,7330,7332,5,224,0,0,7331,7325,1,0,0,0,7331,7326,
        1,0,0,0,7331,7328,1,0,0,0,7331,7332,1,0,0,0,7332,7333,1,0,0,0,7333,
        7334,5,11,0,0,7334,7335,5,211,0,0,7335,587,1,0,0,0,7336,7337,5,111,
        0,0,7337,7338,5,211,0,0,7338,7339,5,406,0,0,7339,7340,5,1224,0,0,
        7340,7341,3,792,396,0,7341,589,1,0,0,0,7342,7343,5,125,0,0,7343,
        7344,5,111,0,0,7344,7345,5,211,0,0,7345,7348,5,406,0,0,7346,7347,
        5,1224,0,0,7347,7349,3,792,396,0,7348,7346,1,0,0,0,7348,7349,1,0,
        0,0,7349,591,1,0,0,0,7350,7351,7,62,0,0,7351,593,1,0,0,0,7352,7379,
        3,596,298,0,7353,7379,3,598,299,0,7354,7379,3,600,300,0,7355,7379,
        3,604,302,0,7356,7379,3,610,305,0,7357,7379,3,620,310,0,7358,7379,
        3,626,313,0,7359,7379,3,628,314,0,7360,7379,3,632,316,0,7361,7379,
        3,634,317,0,7362,7379,3,636,318,0,7363,7379,3,642,321,0,7364,7379,
        3,644,322,0,7365,7379,3,646,323,0,7366,7379,3,648,324,0,7367,7379,
        3,652,326,0,7368,7379,3,654,327,0,7369,7379,3,656,328,0,7370,7379,
        3,658,329,0,7371,7379,3,660,330,0,7372,7379,3,662,331,0,7373,7379,
        3,664,332,0,7374,7379,3,666,333,0,7375,7379,3,668,334,0,7376,7379,
        3,670,335,0,7377,7379,3,672,336,0,7378,7352,1,0,0,0,7378,7353,1,
        0,0,0,7378,7354,1,0,0,0,7378,7355,1,0,0,0,7378,7356,1,0,0,0,7378,
        7357,1,0,0,0,7378,7358,1,0,0,0,7378,7359,1,0,0,0,7378,7360,1,0,0,
        0,7378,7361,1,0,0,0,7378,7362,1,0,0,0,7378,7363,1,0,0,0,7378,7364,
        1,0,0,0,7378,7365,1,0,0,0,7378,7366,1,0,0,0,7378,7367,1,0,0,0,7378,
        7368,1,0,0,0,7378,7369,1,0,0,0,7378,7370,1,0,0,0,7378,7371,1,0,0,
        0,7378,7372,1,0,0,0,7378,7373,1,0,0,0,7378,7374,1,0,0,0,7378,7375,
        1,0,0,0,7378,7376,1,0,0,0,7378,7377,1,0,0,0,7379,595,1,0,0,0,7380,
        7382,3,1200,600,0,7381,7380,1,0,0,0,7381,7382,1,0,0,0,7382,7383,
        1,0,0,0,7383,7384,3,834,417,0,7384,597,1,0,0,0,7385,7386,5,370,0,
        0,7386,7387,5,16,0,0,7387,7388,5,76,0,0,7388,7389,5,427,0,0,7389,
        7390,5,1194,0,0,7390,7392,3,850,425,0,7391,7393,3,854,427,0,7392,
        7391,1,0,0,0,7392,7393,1,0,0,0,7393,7394,1,0,0,0,7394,7395,5,164,
        0,0,7395,7396,3,792,396,0,7396,599,1,0,0,0,7397,7399,3,1202,601,
        0,7398,7397,1,0,0,0,7398,7399,1,0,0,0,7399,7400,1,0,0,0,7400,7402,
        7,29,0,0,7401,7403,3,676,338,0,7402,7401,1,0,0,0,7402,7403,1,0,0,
        0,7403,7424,1,0,0,0,7404,7425,3,792,396,0,7405,7406,5,164,0,0,7406,
        7411,3,602,301,0,7407,7408,5,1208,0,0,7408,7410,3,602,301,0,7409,
        7407,1,0,0,0,7410,7413,1,0,0,0,7411,7409,1,0,0,0,7411,7412,1,0,0,
        0,7412,7425,1,0,0,0,7413,7411,1,0,0,0,7414,7415,3,792,396,0,7415,
        7416,5,164,0,0,7416,7421,3,602,301,0,7417,7418,5,1208,0,0,7418,7420,
        3,602,301,0,7419,7417,1,0,0,0,7420,7423,1,0,0,0,7421,7419,1,0,0,
        0,7421,7422,1,0,0,0,7422,7425,1,0,0,0,7423,7421,1,0,0,0,7424,7404,
        1,0,0,0,7424,7405,1,0,0,0,7424,7414,1,0,0,0,7425,7428,1,0,0,0,7426,
        7429,3,952,476,0,7427,7429,5,13,0,0,7428,7426,1,0,0,0,7428,7427,
        1,0,0,0,7428,7429,1,0,0,0,7429,601,1,0,0,0,7430,7435,3,792,396,0,
        7431,7433,5,20,0,0,7432,7431,1,0,0,0,7432,7433,1,0,0,0,7433,7434,
        1,0,0,0,7434,7436,3,808,404,0,7435,7432,1,0,0,0,7435,7436,1,0,0,
        0,7436,7444,1,0,0,0,7437,7439,3,1184,592,0,7438,7440,5,20,0,0,7439,
        7438,1,0,0,0,7439,7440,1,0,0,0,7440,7441,1,0,0,0,7441,7442,3,808,
        404,0,7442,7444,1,0,0,0,7443,7430,1,0,0,0,7443,7437,1,0,0,0,7444,
        603,1,0,0,0,7445,7447,3,1202,601,0,7446,7445,1,0,0,0,7446,7447,1,
        0,0,0,7447,7448,1,0,0,0,7448,7450,7,63,0,0,7449,7451,3,676,338,0,
        7450,7449,1,0,0,0,7450,7451,1,0,0,0,7451,7453,1,0,0,0,7452,7454,
        5,206,0,0,7453,7452,1,0,0,0,7453,7454,1,0,0,0,7454,7455,1,0,0,0,
        7455,7457,3,792,396,0,7456,7458,3,888,444,0,7457,7456,1,0,0,0,7457,
        7458,1,0,0,0,7458,7503,1,0,0,0,7459,7461,5,460,0,0,7460,7459,1,0,
        0,0,7460,7461,1,0,0,0,7461,7462,1,0,0,0,7462,7464,5,1213,0,0,7463,
        7465,3,996,498,0,7464,7463,1,0,0,0,7464,7465,1,0,0,0,7465,7472,1,
        0,0,0,7466,7468,5,1208,0,0,7467,7469,3,996,498,0,7468,7467,1,0,0,
        0,7468,7469,1,0,0,0,7469,7471,1,0,0,0,7470,7466,1,0,0,0,7471,7474,
        1,0,0,0,7472,7470,1,0,0,0,7472,7473,1,0,0,0,7473,7475,1,0,0,0,7474,
        7472,1,0,0,0,7475,7504,5,1214,0,0,7476,7477,3,1182,591,0,7477,7478,
        5,460,0,0,7478,7479,3,1180,590,0,7479,7504,1,0,0,0,7480,7482,3,1182,
        591,0,7481,7480,1,0,0,0,7481,7482,1,0,0,0,7482,7484,1,0,0,0,7483,
        7485,3,1208,604,0,7484,7483,1,0,0,0,7484,7485,1,0,0,0,7485,7486,
        1,0,0,0,7486,7488,3,834,417,0,7487,7489,3,606,303,0,7488,7487,1,
        0,0,0,7488,7489,1,0,0,0,7489,7491,1,0,0,0,7490,7492,3,608,304,0,
        7491,7490,1,0,0,0,7491,7492,1,0,0,0,7492,7494,1,0,0,0,7493,7495,
        3,678,339,0,7494,7493,1,0,0,0,7494,7495,1,0,0,0,7495,7504,1,0,0,
        0,7496,7499,5,720,0,0,7497,7500,3,758,379,0,7498,7500,5,1212,0,0,
        7499,7497,1,0,0,0,7499,7498,1,0,0,0,7500,7504,1,0,0,0,7501,7502,
        5,111,0,0,7502,7504,5,460,0,0,7503,7460,1,0,0,0,7503,7476,1,0,0,
        0,7503,7481,1,0,0,0,7503,7496,1,0,0,0,7503,7501,1,0,0,0,7504,605,
        1,0,0,0,7505,7506,5,178,0,0,7506,7516,5,42,0,0,7507,7512,3,996,498,
        0,7508,7509,5,1208,0,0,7509,7511,3,996,498,0,7510,7508,1,0,0,0,7511,
        7514,1,0,0,0,7512,7510,1,0,0,0,7512,7513,1,0,0,0,7513,7517,1,0,0,
        0,7514,7512,1,0,0,0,7515,7517,5,319,0,0,7516,7507,1,0,0,0,7516,7515,
        1,0,0,0,7517,607,1,0,0,0,7518,7519,5,224,0,0,7519,7520,5,291,0,0,
        7520,7521,5,42,0,0,7521,7526,3,988,494,0,7522,7523,5,1208,0,0,7523,
        7525,3,988,494,0,7524,7522,1,0,0,0,7525,7528,1,0,0,0,7526,7524,1,
        0,0,0,7526,7527,1,0,0,0,7527,609,1,0,0,0,7528,7526,1,0,0,0,7529,
        7533,3,612,306,0,7530,7533,3,614,307,0,7531,7533,3,616,308,0,7532,
        7529,1,0,0,0,7532,7530,1,0,0,0,7532,7531,1,0,0,0,7533,611,1,0,0,
        0,7534,7536,3,1202,601,0,7535,7534,1,0,0,0,7535,7536,1,0,0,0,7536,
        7537,1,0,0,0,7537,7539,7,30,0,0,7538,7540,3,676,338,0,7539,7538,
        1,0,0,0,7539,7540,1,0,0,0,7540,7541,1,0,0,0,7541,7546,3,792,396,
        0,7542,7544,5,20,0,0,7543,7542,1,0,0,0,7543,7544,1,0,0,0,7544,7545,
        1,0,0,0,7545,7547,3,808,404,0,7546,7543,1,0,0,0,7546,7547,1,0,0,
        0,7547,7548,1,0,0,0,7548,7549,5,372,0,0,7549,7554,3,674,337,0,7550,
        7551,5,1208,0,0,7551,7553,3,674,337,0,7552,7550,1,0,0,0,7553,7556,
        1,0,0,0,7554,7552,1,0,0,0,7554,7555,1,0,0,0,7555,7559,1,0,0,0,7556,
        7554,1,0,0,0,7557,7560,3,952,476,0,7558,7560,5,13,0,0,7559,7557,
        1,0,0,0,7559,7558,1,0,0,0,7559,7560,1,0,0,0,7560,613,1,0,0,0,7561,
        7563,3,1202,601,0,7562,7561,1,0,0,0,7562,7563,1,0,0,0,7563,7564,
        1,0,0,0,7564,7566,7,30,0,0,7565,7567,3,676,338,0,7566,7565,1,0,0,
        0,7566,7567,1,0,0,0,7567,7568,1,0,0,0,7568,7569,3,792,396,0,7569,
        7570,5,164,0,0,7570,7575,3,618,309,0,7571,7572,5,1208,0,0,7572,7574,
        3,618,309,0,7573,7571,1,0,0,0,7574,7577,1,0,0,0,7575,7573,1,0,0,
        0,7575,7576,1,0,0,0,7576,7578,1,0,0,0,7577,7575,1,0,0,0,7578,7579,
        5,372,0,0,7579,7584,3,674,337,0,7580,7581,5,1208,0,0,7581,7583,3,
        674,337,0,7582,7580,1,0,0,0,7583,7586,1,0,0,0,7584,7582,1,0,0,0,
        7584,7585,1,0,0,0,7585,7589,1,0,0,0,7586,7584,1,0,0,0,7587,7590,
        3,952,476,0,7588,7590,5,13,0,0,7589,7587,1,0,0,0,7589,7588,1,0,0,
        0,7589,7590,1,0,0,0,7590,615,1,0,0,0,7591,7593,3,1202,601,0,7592,
        7591,1,0,0,0,7592,7593,1,0,0,0,7593,7594,1,0,0,0,7594,7596,7,30,
        0,0,7595,7597,3,676,338,0,7596,7595,1,0,0,0,7596,7597,1,0,0,0,7597,
        7598,1,0,0,0,7598,7600,3,792,396,0,7599,7601,5,20,0,0,7600,7599,
        1,0,0,0,7600,7601,1,0,0,0,7601,7602,1,0,0,0,7602,7603,3,808,404,
        0,7603,7604,1,0,0,0,7604,7605,5,372,0,0,7605,7610,3,674,337,0,7606,
        7607,5,1208,0,0,7607,7609,3,674,337,0,7608,7606,1,0,0,0,7609,7612,
        1,0,0,0,7610,7608,1,0,0,0,7610,7611,1,0,0,0,7611,7613,1,0,0,0,7612,
        7610,1,0,0,0,7613,7614,5,471,0,0,7614,7615,3,994,497,0,7615,7616,
        5,131,0,0,7616,7618,7,63,0,0,7617,7619,5,206,0,0,7618,7617,1,0,0,
        0,7618,7619,1,0,0,0,7619,7620,1,0,0,0,7620,7633,3,792,396,0,7621,
        7623,5,460,0,0,7622,7621,1,0,0,0,7622,7623,1,0,0,0,7623,7624,1,0,
        0,0,7624,7634,3,1180,590,0,7625,7627,3,1182,591,0,7626,7628,5,460,
        0,0,7627,7626,1,0,0,0,7627,7628,1,0,0,0,7628,7629,1,0,0,0,7629,7630,
        3,1180,590,0,7630,7634,1,0,0,0,7631,7632,5,111,0,0,7632,7634,5,460,
        0,0,7633,7622,1,0,0,0,7633,7625,1,0,0,0,7633,7631,1,0,0,0,7634,617,
        1,0,0,0,7635,7640,3,792,396,0,7636,7638,5,20,0,0,7637,7636,1,0,0,
        0,7637,7638,1,0,0,0,7638,7639,1,0,0,0,7639,7641,3,808,404,0,7640,
        7637,1,0,0,0,7640,7641,1,0,0,0,7641,7649,1,0,0,0,7642,7644,3,1184,
        592,0,7643,7645,5,20,0,0,7644,7643,1,0,0,0,7644,7645,1,0,0,0,7645,
        7646,1,0,0,0,7646,7647,3,808,404,0,7647,7649,1,0,0,0,7648,7635,1,
        0,0,0,7648,7642,1,0,0,0,7649,619,1,0,0,0,7650,7652,3,1202,601,0,
        7651,7650,1,0,0,0,7651,7652,1,0,0,0,7652,7653,1,0,0,0,7653,7655,
        5,242,0,0,7654,7656,3,676,338,0,7655,7654,1,0,0,0,7655,7656,1,0,
        0,0,7656,7658,1,0,0,0,7657,7659,5,206,0,0,7658,7657,1,0,0,0,7658,
        7659,1,0,0,0,7659,7660,1,0,0,0,7660,7665,3,792,396,0,7661,7663,5,
        20,0,0,7662,7661,1,0,0,0,7662,7663,1,0,0,0,7663,7664,1,0,0,0,7664,
        7666,3,808,404,0,7665,7662,1,0,0,0,7665,7666,1,0,0,0,7666,7667,1,
        0,0,0,7667,7672,5,457,0,0,7668,7669,5,460,0,0,7669,7673,3,1180,590,
        0,7670,7673,3,1184,592,0,7671,7673,3,792,396,0,7672,7668,1,0,0,0,
        7672,7670,1,0,0,0,7672,7671,1,0,0,0,7673,7675,1,0,0,0,7674,7676,
        5,20,0,0,7675,7674,1,0,0,0,7675,7676,1,0,0,0,7676,7677,1,0,0,0,7677,
        7679,3,808,404,0,7678,7680,3,1182,591,0,7679,7678,1,0,0,0,7679,7680,
        1,0,0,0,7680,7681,1,0,0,0,7681,7682,5,286,0,0,7682,7691,3,994,497,
        0,7683,7685,3,622,311,0,7684,7686,3,624,312,0,7685,7684,1,0,0,0,
        7685,7686,1,0,0,0,7686,7692,1,0,0,0,7687,7689,3,624,312,0,7688,7690,
        3,622,311,0,7689,7688,1,0,0,0,7689,7690,1,0,0,0,7690,7692,1,0,0,
        0,7691,7683,1,0,0,0,7691,7687,1,0,0,0,7692,7694,1,0,0,0,7693,7695,
        3,678,339,0,7694,7693,1,0,0,0,7694,7695,1,0,0,0,7695,621,1,0,0,0,
        7696,7697,5,470,0,0,7697,7698,5,756,0,0,7698,7710,5,419,0,0,7699,
        7700,7,30,0,0,7700,7701,5,372,0,0,7701,7706,3,674,337,0,7702,7703,
        5,1208,0,0,7703,7705,3,674,337,0,7704,7702,1,0,0,0,7705,7708,1,0,
        0,0,7706,7704,1,0,0,0,7706,7707,1,0,0,0,7707,7711,1,0,0,0,7708,7706,
        1,0,0,0,7709,7711,5,115,0,0,7710,7699,1,0,0,0,7710,7709,1,0,0,0,
        7711,623,1,0,0,0,7712,7713,5,470,0,0,7713,7714,5,272,0,0,7714,7715,
        5,756,0,0,7715,7716,5,419,0,0,7716,7721,7,63,0,0,7717,7722,5,460,
        0,0,7718,7719,3,1182,591,0,7719,7720,5,460,0,0,7720,7722,1,0,0,0,
        7721,7717,1,0,0,0,7721,7718,1,0,0,0,7721,7722,1,0,0,0,7722,7723,
        1,0,0,0,7723,7724,3,1180,590,0,7724,625,1,0,0,0,7725,7726,5,68,0,
        0,7726,7727,5,627,0,0,7727,7740,5,159,0,0,7728,7741,3,792,396,0,
        7729,7730,5,1213,0,0,7730,7735,3,792,396,0,7731,7732,5,1208,0,0,
        7732,7734,3,792,396,0,7733,7731,1,0,0,0,7734,7737,1,0,0,0,7735,7733,
        1,0,0,0,7735,7736,1,0,0,0,7736,7738,1,0,0,0,7737,7735,1,0,0,0,7738,
        7739,5,1214,0,0,7739,7741,1,0,0,0,7740,7728,1,0,0,0,7740,7729,1,
        0,0,0,7741,7742,1,0,0,0,7742,7743,5,206,0,0,7743,7748,3,800,400,
        0,7744,7749,5,13,0,0,7745,7746,5,474,0,0,7746,7747,5,268,0,0,7747,
        7749,5,192,0,0,7748,7744,1,0,0,0,7748,7745,1,0,0,0,7748,7749,1,0,
        0,0,7749,627,1,0,0,0,7750,7751,5,68,0,0,7751,7752,7,14,0,0,7752,
        7753,5,159,0,0,7753,7754,5,365,0,0,7754,7756,3,764,382,0,7755,7757,
        5,300,0,0,7756,7755,1,0,0,0,7756,7757,1,0,0,0,7757,7758,1,0,0,0,
        7758,7759,5,206,0,0,7759,7763,3,800,400,0,7760,7761,5,372,0,0,7761,
        7762,5,869,0,0,7762,7764,3,764,382,0,7763,7760,1,0,0,0,7763,7764,
        1,0,0,0,7764,7767,1,0,0,0,7765,7766,5,366,0,0,7766,7768,3,764,382,
        0,7767,7765,1,0,0,0,7767,7768,1,0,0,0,7768,7771,1,0,0,0,7769,7770,
        5,453,0,0,7770,7772,5,773,0,0,7771,7769,1,0,0,0,7771,7772,1,0,0,
        0,7772,7774,1,0,0,0,7773,7775,5,286,0,0,7774,7773,1,0,0,0,7774,7775,
        1,0,0,0,7775,7776,1,0,0,0,7776,7777,3,792,396,0,7777,7778,3,630,
        315,0,7778,629,1,0,0,0,7779,7798,5,69,0,0,7780,7799,3,784,392,0,
        7781,7799,5,840,0,0,7782,7785,5,1213,0,0,7783,7786,3,784,392,0,7784,
        7786,5,840,0,0,7785,7783,1,0,0,0,7785,7784,1,0,0,0,7786,7794,1,0,
        0,0,7787,7790,5,1208,0,0,7788,7791,3,784,392,0,7789,7791,5,840,0,
        0,7790,7788,1,0,0,0,7790,7789,1,0,0,0,7791,7793,1,0,0,0,7792,7787,
        1,0,0,0,7793,7796,1,0,0,0,7794,7792,1,0,0,0,7794,7795,1,0,0,0,7795,
        7797,1,0,0,0,7796,7794,1,0,0,0,7797,7799,5,1214,0,0,7798,7780,1,
        0,0,0,7798,7781,1,0,0,0,7798,7782,1,0,0,0,7799,7816,1,0,0,0,7800,
        7813,5,192,0,0,7801,7814,3,788,394,0,7802,7803,5,1213,0,0,7803,7808,
        3,784,392,0,7804,7805,5,1208,0,0,7805,7807,3,784,392,0,7806,7804,
        1,0,0,0,7807,7810,1,0,0,0,7808,7806,1,0,0,0,7808,7809,1,0,0,0,7809,
        7811,1,0,0,0,7810,7808,1,0,0,0,7811,7812,5,1214,0,0,7812,7814,1,
        0,0,0,7813,7801,1,0,0,0,7813,7802,1,0,0,0,7814,7816,1,0,0,0,7815,
        7779,1,0,0,0,7815,7800,1,0,0,0,7816,631,1,0,0,0,7817,7818,5,125,
        0,0,7818,7819,7,14,0,0,7819,7820,5,164,0,0,7820,7822,3,800,400,0,
        7821,7823,5,286,0,0,7822,7821,1,0,0,0,7822,7823,1,0,0,0,7823,7824,
        1,0,0,0,7824,7826,3,792,396,0,7825,7827,3,630,315,0,7826,7825,1,
        0,0,0,7826,7827,1,0,0,0,7827,633,1,0,0,0,7828,7829,5,127,0,0,7829,
        7830,5,150,0,0,7830,7831,5,206,0,0,7831,7834,3,800,400,0,7832,7833,
        5,20,0,0,7833,7835,3,788,394,0,7834,7832,1,0,0,0,7834,7835,1,0,0,
        0,7835,7837,1,0,0,0,7836,7838,3,684,342,0,7837,7836,1,0,0,0,7837,
        7838,1,0,0,0,7838,7841,1,0,0,0,7839,7840,5,59,0,0,7840,7842,5,395,
        0,0,7841,7839,1,0,0,0,7841,7842,1,0,0,0,7842,7843,1,0,0,0,7843,7844,
        3,682,341,0,7844,635,1,0,0,0,7845,7846,5,193,0,0,7846,7847,5,192,
        0,0,7847,7857,5,504,0,0,7848,7849,5,286,0,0,7849,7854,3,792,396,
        0,7850,7851,5,1208,0,0,7851,7853,3,792,396,0,7852,7850,1,0,0,0,7853,
        7856,1,0,0,0,7854,7852,1,0,0,0,7854,7855,1,0,0,0,7855,7858,1,0,0,
        0,7856,7854,1,0,0,0,7857,7848,1,0,0,0,7857,7858,1,0,0,0,7858,7859,
        1,0,0,0,7859,7860,5,159,0,0,7860,7861,3,788,394,0,7861,7862,5,190,
        0,0,7862,7863,3,800,400,0,7863,7864,5,20,0,0,7864,7874,3,808,404,
        0,7865,7866,5,372,0,0,7866,7871,3,638,319,0,7867,7868,5,1208,0,0,
        7868,7870,3,638,319,0,7869,7867,1,0,0,0,7870,7873,1,0,0,0,7871,7869,
        1,0,0,0,7871,7872,1,0,0,0,7872,7875,1,0,0,0,7873,7871,1,0,0,0,7874,
        7865,1,0,0,0,7874,7875,1,0,0,0,7875,7878,1,0,0,0,7876,7877,5,728,
        0,0,7877,7879,5,192,0,0,7878,7876,1,0,0,0,7878,7879,1,0,0,0,7879,
        7883,1,0,0,0,7880,7881,5,1018,0,0,7881,7882,5,773,0,0,7882,7884,
        7,14,0,0,7883,7880,1,0,0,0,7883,7884,1,0,0,0,7884,7899,1,0,0,0,7885,
        7887,5,474,0,0,7886,7888,5,268,0,0,7887,7886,1,0,0,0,7887,7888,1,
        0,0,0,7888,7889,1,0,0,0,7889,7890,5,192,0,0,7890,7891,5,437,0,0,
        7891,7896,3,764,382,0,7892,7893,5,1208,0,0,7893,7895,3,764,382,0,
        7894,7892,1,0,0,0,7895,7898,1,0,0,0,7896,7894,1,0,0,0,7896,7897,
        1,0,0,0,7897,7900,1,0,0,0,7898,7896,1,0,0,0,7899,7885,1,0,0,0,7899,
        7900,1,0,0,0,7900,7903,1,0,0,0,7901,7902,5,60,0,0,7902,7904,3,764,
        382,0,7903,7901,1,0,0,0,7903,7904,1,0,0,0,7904,7906,1,0,0,0,7905,
        7907,3,686,343,0,7906,7905,1,0,0,0,7906,7907,1,0,0,0,7907,637,1,
        0,0,0,7908,7909,3,640,320,0,7909,7910,5,1224,0,0,7910,7911,3,764,
        382,0,7911,639,1,0,0,0,7912,7913,7,64,0,0,7913,641,1,0,0,0,7914,
        7915,5,193,0,0,7915,7916,5,840,0,0,7916,7926,5,504,0,0,7917,7918,
        5,286,0,0,7918,7923,3,792,396,0,7919,7920,5,1208,0,0,7920,7922,3,
        792,396,0,7921,7919,1,0,0,0,7922,7925,1,0,0,0,7923,7921,1,0,0,0,
        7923,7924,1,0,0,0,7924,7927,1,0,0,0,7925,7923,1,0,0,0,7926,7917,
        1,0,0,0,7926,7927,1,0,0,0,7927,7928,1,0,0,0,7928,7929,5,159,0,0,
        7929,7930,3,788,394,0,7930,7931,5,190,0,0,7931,7932,3,800,400,0,
        7932,7933,5,20,0,0,7933,7935,3,808,404,0,7934,7936,3,686,343,0,7935,
        7934,1,0,0,0,7935,7936,1,0,0,0,7936,643,1,0,0,0,7937,7938,5,198,
        0,0,7938,7952,5,150,0,0,7939,7941,5,474,0,0,7940,7942,5,268,0,0,
        7941,7940,1,0,0,0,7941,7942,1,0,0,0,7942,7943,1,0,0,0,7943,7950,
        5,395,0,0,7944,7945,5,457,0,0,7945,7946,5,365,0,0,7946,7948,3,764,
        382,0,7947,7949,5,300,0,0,7948,7947,1,0,0,0,7948,7949,1,0,0,0,7949,
        7951,1,0,0,0,7950,7944,1,0,0,0,7950,7951,1,0,0,0,7951,7953,1,0,0,
        0,7952,7939,1,0,0,0,7952,7953,1,0,0,0,7953,7956,1,0,0,0,7954,7955,
        5,16,0,0,7955,7957,5,627,0,0,7956,7954,1,0,0,0,7956,7957,1,0,0,0,
        7957,7967,1,0,0,0,7958,7959,5,159,0,0,7959,7964,3,792,396,0,7960,
        7961,5,1208,0,0,7961,7963,3,792,396,0,7962,7960,1,0,0,0,7963,7966,
        1,0,0,0,7964,7962,1,0,0,0,7964,7965,1,0,0,0,7965,7968,1,0,0,0,7966,
        7964,1,0,0,0,7967,7958,1,0,0,0,7967,7968,1,0,0,0,7968,7969,1,0,0,
        0,7969,7970,5,206,0,0,7970,7973,3,800,400,0,7971,7972,5,20,0,0,7972,
        7974,3,788,394,0,7973,7971,1,0,0,0,7973,7974,1,0,0,0,7974,7976,1,
        0,0,0,7975,7977,3,684,342,0,7976,7975,1,0,0,0,7976,7977,1,0,0,0,
        7977,7980,1,0,0,0,7978,7979,5,159,0,0,7979,7981,3,764,382,0,7980,
        7978,1,0,0,0,7980,7981,1,0,0,0,7981,7984,1,0,0,0,7982,7983,5,59,
        0,0,7983,7985,5,395,0,0,7984,7982,1,0,0,0,7984,7985,1,0,0,0,7985,
        7991,1,0,0,0,7986,7987,5,190,0,0,7987,7989,5,1042,0,0,7988,7990,
        5,795,0,0,7989,7988,1,0,0,0,7989,7990,1,0,0,0,7990,7992,1,0,0,0,
        7991,7986,1,0,0,0,7991,7992,1,0,0,0,7992,7993,1,0,0,0,7993,7994,
        3,682,341,0,7994,645,1,0,0,0,7995,7996,5,345,0,0,7996,7997,5,192,
        0,0,7997,7998,5,504,0,0,7998,7999,5,159,0,0,7999,8000,3,788,394,
        0,8000,8001,5,190,0,0,8001,8002,3,800,400,0,8002,8003,5,20,0,0,8003,
        8006,3,808,404,0,8004,8005,5,60,0,0,8005,8007,3,764,382,0,8006,8004,
        1,0,0,0,8006,8007,1,0,0,0,8007,8009,1,0,0,0,8008,8010,3,686,343,
        0,8009,8008,1,0,0,0,8009,8010,1,0,0,0,8010,647,1,0,0,0,8011,8012,
        5,46,0,0,8012,8013,3,794,397,0,8013,8022,5,1213,0,0,8014,8019,3,
        650,325,0,8015,8016,5,1208,0,0,8016,8018,3,650,325,0,8017,8015,1,
        0,0,0,8018,8021,1,0,0,0,8019,8017,1,0,0,0,8019,8020,1,0,0,0,8020,
        8023,1,0,0,0,8021,8019,1,0,0,0,8022,8014,1,0,0,0,8022,8023,1,0,0,
        0,8023,8024,1,0,0,0,8024,8025,5,1214,0,0,8025,649,1,0,0,0,8026,8028,
        3,996,498,0,8027,8029,3,1078,539,0,8028,8027,1,0,0,0,8028,8029,1,
        0,0,0,8029,8032,1,0,0,0,8030,8032,5,1212,0,0,8031,8026,1,0,0,0,8031,
        8030,1,0,0,0,8032,651,1,0,0,0,8033,8034,7,65,0,0,8034,8061,3,798,
        399,0,8035,8057,5,1213,0,0,8036,8041,3,996,498,0,8037,8038,5,1208,
        0,0,8038,8040,3,996,498,0,8039,8037,1,0,0,0,8040,8043,1,0,0,0,8041,
        8039,1,0,0,0,8041,8042,1,0,0,0,8042,8058,1,0,0,0,8043,8041,1,0,0,
        0,8044,8045,3,812,406,0,8045,8046,5,1224,0,0,8046,8054,3,996,498,
        0,8047,8048,5,1208,0,0,8048,8049,3,812,406,0,8049,8050,5,1224,0,
        0,8050,8051,3,996,498,0,8051,8053,1,0,0,0,8052,8047,1,0,0,0,8053,
        8056,1,0,0,0,8054,8052,1,0,0,0,8054,8055,1,0,0,0,8055,8058,1,0,0,
        0,8056,8054,1,0,0,0,8057,8036,1,0,0,0,8057,8044,1,0,0,0,8058,8059,
        1,0,0,0,8059,8060,5,1214,0,0,8060,8062,1,0,0,0,8061,8035,1,0,0,0,
        8061,8062,1,0,0,0,8062,653,1,0,0,0,8063,8068,5,71,0,0,8064,8066,
        5,476,0,0,8065,8067,5,337,0,0,8066,8065,1,0,0,0,8066,8067,1,0,0,
        0,8067,8069,1,0,0,0,8068,8064,1,0,0,0,8068,8069,1,0,0,0,8069,655,
        1,0,0,0,8070,8072,5,358,0,0,8071,8073,5,476,0,0,8072,8071,1,0,0,
        0,8072,8073,1,0,0,0,8073,8075,1,0,0,0,8074,8076,3,758,379,0,8075,
        8074,1,0,0,0,8075,8076,1,0,0,0,8076,8078,1,0,0,0,8077,8079,3,856,
        428,0,8078,8077,1,0,0,0,8078,8079,1,0,0,0,8079,8081,1,0,0,0,8080,
        8082,3,952,476,0,8081,8080,1,0,0,0,8081,8082,1,0,0,0,8082,657,1,
        0,0,0,8083,8085,5,1,0,0,8084,8086,3,758,379,0,8085,8084,1,0,0,0,
        8085,8086,1,0,0,0,8086,8088,1,0,0,0,8087,8089,3,856,428,0,8088,8087,
        1,0,0,0,8088,8089,1,0,0,0,8089,8091,1,0,0,0,8090,8092,3,952,476,
        0,8091,8090,1,0,0,0,8091,8092,1,0,0,0,8092,659,1,0,0,0,8093,8094,
        5,34,0,0,8094,8097,5,430,0,0,8095,8097,5,40,0,0,8096,8093,1,0,0,
        0,8096,8095,1,0,0,0,8097,661,1,0,0,0,8098,8099,5,134,0,0,8099,8102,
        5,430,0,0,8100,8102,5,141,0,0,8101,8098,1,0,0,0,8101,8100,1,0,0,
        0,8102,663,1,0,0,0,8103,8104,3,1202,601,0,8104,665,1,0,0,0,8105,
        8107,5,70,0,0,8106,8108,5,286,0,0,8107,8106,1,0,0,0,8107,8108,1,
        0,0,0,8108,8116,1,0,0,0,8109,8111,3,680,340,0,8110,8109,1,0,0,0,
        8110,8111,1,0,0,0,8111,8112,1,0,0,0,8112,8117,3,790,395,0,8113,8114,
        5,69,0,0,8114,8117,3,784,392,0,8115,8117,3,784,392,0,8116,8110,1,
        0,0,0,8116,8113,1,0,0,0,8116,8115,1,0,0,0,8117,667,1,0,0,0,8118,
        8119,5,60,0,0,8119,8123,3,792,396,0,8120,8121,5,1208,0,0,8121,8122,
        5,262,0,0,8122,8124,3,810,405,0,8123,8120,1,0,0,0,8123,8124,1,0,
        0,0,8124,669,1,0,0,0,8125,8127,5,130,0,0,8126,8128,3,758,379,0,8127,
        8126,1,0,0,0,8127,8128,1,0,0,0,8128,671,1,0,0,0,8129,8130,5,1206,
        0,0,8130,673,1,0,0,0,8131,8132,3,784,392,0,8132,8133,5,1224,0,0,
        8133,8134,3,996,498,0,8134,675,1,0,0,0,8135,8137,5,474,0,0,8136,
        8138,5,268,0,0,8137,8136,1,0,0,0,8137,8138,1,0,0,0,8138,8140,1,0,
        0,0,8139,8141,5,587,0,0,8140,8139,1,0,0,0,8140,8141,1,0,0,0,8141,
        8142,1,0,0,0,8142,8143,5,716,0,0,8143,8144,5,223,0,0,8144,677,1,
        0,0,0,8145,8147,5,229,0,0,8146,8148,5,13,0,0,8147,8146,1,0,0,0,8147,
        8148,1,0,0,0,8148,8149,1,0,0,0,8149,8158,5,655,0,0,8150,8156,5,474,
        0,0,8151,8152,5,268,0,0,8152,8157,5,221,0,0,8153,8154,5,221,0,0,
        8154,8155,5,282,0,0,8155,8157,3,764,382,0,8156,8151,1,0,0,0,8156,
        8153,1,0,0,0,8157,8159,1,0,0,0,8158,8150,1,0,0,0,8158,8159,1,0,0,
        0,8159,679,1,0,0,0,8160,8177,5,166,0,0,8161,8162,5,688,0,0,8162,
        8177,5,372,0,0,8163,8177,5,174,0,0,8164,8177,5,235,0,0,8165,8177,
        5,243,0,0,8166,8177,5,310,0,0,8167,8177,5,311,0,0,8168,8177,5,357,
        0,0,8169,8177,5,435,0,0,8170,8177,5,437,0,0,8171,8177,5,468,0,0,
        8172,8177,5,102,0,0,8173,8177,5,406,0,0,8174,8177,5,456,0,0,8175,
        8177,5,668,0,0,8176,8160,1,0,0,0,8176,8161,1,0,0,0,8176,8163,1,0,
        0,0,8176,8164,1,0,0,0,8176,8165,1,0,0,0,8176,8166,1,0,0,0,8176,8167,
        1,0,0,0,8176,8168,1,0,0,0,8176,8169,1,0,0,0,8176,8170,1,0,0,0,8176,
        8171,1,0,0,0,8176,8172,1,0,0,0,8176,8173,1,0,0,0,8176,8174,1,0,0,
        0,8176,8175,1,0,0,0,8177,681,1,0,0,0,8178,8185,3,600,300,0,8179,
        8185,3,652,326,0,8180,8185,3,604,302,0,8181,8185,3,620,310,0,8182,
        8185,3,596,298,0,8183,8185,3,610,305,0,8184,8178,1,0,0,0,8184,8179,
        1,0,0,0,8184,8180,1,0,0,0,8184,8181,1,0,0,0,8184,8182,1,0,0,0,8184,
        8183,1,0,0,0,8185,683,1,0,0,0,8186,8192,5,221,0,0,8187,8190,5,386,
        0,0,8188,8189,5,1224,0,0,8189,8191,3,764,382,0,8190,8188,1,0,0,0,
        8190,8191,1,0,0,0,8191,8193,1,0,0,0,8192,8187,1,0,0,0,8192,8193,
        1,0,0,0,8193,685,1,0,0,0,8194,8195,5,421,0,0,8195,8196,5,221,0,0,
        8196,8197,5,1224,0,0,8197,8198,3,764,382,0,8198,687,1,0,0,0,8199,
        8206,3,694,347,0,8200,8206,3,696,348,0,8201,8206,3,702,351,0,8202,
        8206,3,704,352,0,8203,8206,3,706,353,0,8204,8206,3,708,354,0,8205,
        8199,1,0,0,0,8205,8200,1,0,0,0,8205,8201,1,0,0,0,8205,8202,1,0,0,
        0,8205,8203,1,0,0,0,8205,8204,1,0,0,0,8206,689,1,0,0,0,8207,8215,
        3,694,347,0,8208,8215,3,696,348,0,8209,8215,3,698,349,0,8210,8215,
        3,702,351,0,8211,8215,3,704,352,0,8212,8215,3,706,353,0,8213,8215,
        3,708,354,0,8214,8207,1,0,0,0,8214,8208,1,0,0,0,8214,8209,1,0,0,
        0,8214,8210,1,0,0,0,8214,8211,1,0,0,0,8214,8212,1,0,0,0,8214,8213,
        1,0,0,0,8215,691,1,0,0,0,8216,8227,3,694,347,0,8217,8227,3,696,348,
        0,8218,8227,3,698,349,0,8219,8227,3,700,350,0,8220,8227,3,702,351,
        0,8221,8227,3,704,352,0,8222,8227,3,706,353,0,8223,8227,3,708,354,
        0,8224,8227,5,410,0,0,8225,8227,5,466,0,0,8226,8216,1,0,0,0,8226,
        8217,1,0,0,0,8226,8218,1,0,0,0,8226,8219,1,0,0,0,8226,8220,1,0,0,
        0,8226,8221,1,0,0,0,8226,8222,1,0,0,0,8226,8223,1,0,0,0,8226,8224,
        1,0,0,0,8226,8225,1,0,0,0,8227,693,1,0,0,0,8228,8271,5,44,0,0,8229,
        8271,5,381,0,0,8230,8271,5,202,0,0,8231,8271,5,201,0,0,8232,8271,
        5,36,0,0,8233,8243,7,66,0,0,8234,8236,5,1213,0,0,8235,8237,3,764,
        382,0,8236,8235,1,0,0,0,8236,8237,1,0,0,0,8237,8240,1,0,0,0,8238,
        8239,5,1208,0,0,8239,8241,3,764,382,0,8240,8238,1,0,0,0,8240,8241,
        1,0,0,0,8241,8242,1,0,0,0,8242,8244,5,1214,0,0,8243,8234,1,0,0,0,
        8243,8244,1,0,0,0,8244,8271,1,0,0,0,8245,8250,5,157,0,0,8246,8247,
        5,1213,0,0,8247,8248,3,764,382,0,8248,8249,5,1214,0,0,8249,8251,
        1,0,0,0,8250,8246,1,0,0,0,8250,8251,1,0,0,0,8251,8256,1,0,0,0,8252,
        8256,5,323,0,0,8253,8254,5,124,0,0,8254,8256,5,305,0,0,8255,8245,
        1,0,0,0,8255,8252,1,0,0,0,8255,8253,1,0,0,0,8256,8271,1,0,0,0,8257,
        8268,5,277,0,0,8258,8261,5,1213,0,0,8259,8262,3,764,382,0,8260,8262,
        5,1219,0,0,8261,8259,1,0,0,0,8261,8260,1,0,0,0,8262,8265,1,0,0,0,
        8263,8264,5,1208,0,0,8264,8266,3,764,382,0,8265,8263,1,0,0,0,8265,
        8266,1,0,0,0,8266,8267,1,0,0,0,8267,8269,5,1214,0,0,8268,8258,1,
        0,0,0,8268,8269,1,0,0,0,8269,8271,1,0,0,0,8270,8228,1,0,0,0,8270,
        8229,1,0,0,0,8270,8230,1,0,0,0,8270,8231,1,0,0,0,8270,8232,1,0,0,
        0,8270,8233,1,0,0,0,8270,8255,1,0,0,0,8270,8257,1,0,0,0,8271,695,
        1,0,0,0,8272,8274,7,67,0,0,8273,8275,3,722,361,0,8274,8273,1,0,0,
        0,8274,8275,1,0,0,0,8275,8277,1,0,0,0,8276,8278,3,728,364,0,8277,
        8276,1,0,0,0,8277,8278,1,0,0,0,8278,8313,1,0,0,0,8279,8281,5,173,
        0,0,8280,8282,3,722,361,0,8281,8280,1,0,0,0,8281,8282,1,0,0,0,8282,
        8313,1,0,0,0,8283,8289,5,464,0,0,8284,8285,5,55,0,0,8285,8289,5,
        467,0,0,8286,8287,5,52,0,0,8287,8289,5,467,0,0,8288,8283,1,0,0,0,
        8288,8284,1,0,0,0,8288,8286,1,0,0,0,8289,8290,1,0,0,0,8290,8292,
        3,722,361,0,8291,8293,3,728,364,0,8292,8291,1,0,0,0,8292,8293,1,
        0,0,0,8293,8313,1,0,0,0,8294,8295,5,231,0,0,8295,8313,5,464,0,0,
        8296,8297,5,465,0,0,8297,8313,3,722,361,0,8298,8299,5,231,0,0,8299,
        8313,5,465,0,0,8300,8305,5,62,0,0,8301,8302,5,55,0,0,8302,8303,5,
        215,0,0,8303,8305,5,279,0,0,8304,8300,1,0,0,0,8304,8301,1,0,0,0,
        8305,8307,1,0,0,0,8306,8308,3,724,362,0,8307,8306,1,0,0,0,8307,8308,
        1,0,0,0,8308,8310,1,0,0,0,8309,8311,3,740,370,0,8310,8309,1,0,0,
        0,8310,8311,1,0,0,0,8311,8313,1,0,0,0,8312,8272,1,0,0,0,8312,8279,
        1,0,0,0,8312,8288,1,0,0,0,8312,8294,1,0,0,0,8312,8296,1,0,0,0,8312,
        8298,1,0,0,0,8312,8304,1,0,0,0,8313,697,1,0,0,0,8314,8316,5,464,
        0,0,8315,8317,3,728,364,0,8316,8315,1,0,0,0,8316,8317,1,0,0,0,8317,
        8323,1,0,0,0,8318,8320,5,465,0,0,8319,8321,3,728,364,0,8320,8319,
        1,0,0,0,8320,8321,1,0,0,0,8321,8323,1,0,0,0,8322,8314,1,0,0,0,8322,
        8318,1,0,0,0,8323,699,1,0,0,0,8324,8329,5,62,0,0,8325,8326,5,55,
        0,0,8326,8327,5,215,0,0,8327,8329,5,279,0,0,8328,8324,1,0,0,0,8328,
        8325,1,0,0,0,8329,8330,1,0,0,0,8330,8331,5,20,0,0,8331,8341,5,225,
        0,0,8332,8337,5,38,0,0,8333,8334,5,37,0,0,8334,8335,5,215,0,0,8335,
        8337,5,279,0,0,8336,8332,1,0,0,0,8336,8333,1,0,0,0,8337,8338,1,0,
        0,0,8338,8339,5,20,0,0,8339,8341,5,225,0,0,8340,8328,1,0,0,0,8340,
        8336,1,0,0,0,8341,701,1,0,0,0,8342,8344,5,43,0,0,8343,8345,3,722,
        361,0,8344,8343,1,0,0,0,8344,8345,1,0,0,0,8345,8358,1,0,0,0,8346,
        8347,5,463,0,0,8347,8358,3,722,361,0,8348,8353,5,38,0,0,8349,8350,
        5,37,0,0,8350,8351,5,215,0,0,8351,8353,5,279,0,0,8352,8348,1,0,0,
        0,8352,8349,1,0,0,0,8353,8355,1,0,0,0,8354,8356,3,724,362,0,8355,
        8354,1,0,0,0,8355,8356,1,0,0,0,8356,8358,1,0,0,0,8357,8342,1,0,0,
        0,8357,8346,1,0,0,0,8357,8352,1,0,0,0,8358,703,1,0,0,0,8359,8377,
        5,104,0,0,8360,8362,5,421,0,0,8361,8363,3,722,361,0,8362,8361,1,
        0,0,0,8362,8363,1,0,0,0,8363,8365,1,0,0,0,8364,8366,3,752,376,0,
        8365,8364,1,0,0,0,8365,8366,1,0,0,0,8366,8377,1,0,0,0,8367,8369,
        5,422,0,0,8368,8370,3,722,361,0,8369,8368,1,0,0,0,8369,8370,1,0,
        0,0,8370,8372,1,0,0,0,8371,8373,3,752,376,0,8372,8371,1,0,0,0,8372,
        8373,1,0,0,0,8373,8377,1,0,0,0,8374,8375,5,205,0,0,8375,8377,3,720,
        360,0,8376,8359,1,0,0,0,8376,8360,1,0,0,0,8376,8367,1,0,0,0,8376,
        8374,1,0,0,0,8377,705,1,0,0,0,8378,8379,5,853,0,0,8379,8380,5,1213,
        0,0,8380,8381,5,104,0,0,8381,8403,5,1214,0,0,8382,8383,5,853,0,0,
        8383,8384,5,1213,0,0,8384,8386,5,421,0,0,8385,8387,3,722,361,0,8386,
        8385,1,0,0,0,8386,8387,1,0,0,0,8387,8389,1,0,0,0,8388,8390,3,752,
        376,0,8389,8388,1,0,0,0,8389,8390,1,0,0,0,8390,8391,1,0,0,0,8391,
        8403,5,1214,0,0,8392,8393,5,853,0,0,8393,8394,5,1213,0,0,8394,8396,
        5,422,0,0,8395,8397,3,722,361,0,8396,8395,1,0,0,0,8396,8397,1,0,
        0,0,8397,8399,1,0,0,0,8398,8400,3,752,376,0,8399,8398,1,0,0,0,8399,
        8400,1,0,0,0,8400,8401,1,0,0,0,8401,8403,5,1214,0,0,8402,8378,1,
        0,0,0,8402,8382,1,0,0,0,8402,8392,1,0,0,0,8403,707,1,0,0,0,8404,
        8406,3,718,359,0,8405,8404,1,0,0,0,8405,8406,1,0,0,0,8406,8407,1,
        0,0,0,8407,8409,7,68,0,0,8408,8410,3,724,362,0,8409,8408,1,0,0,0,
        8409,8410,1,0,0,0,8410,8412,1,0,0,0,8411,8413,3,742,371,0,8412,8411,
        1,0,0,0,8412,8413,1,0,0,0,8413,8454,1,0,0,0,8414,8416,3,718,359,
        0,8415,8414,1,0,0,0,8415,8416,1,0,0,0,8416,8417,1,0,0,0,8417,8419,
        5,720,0,0,8418,8420,3,726,363,0,8419,8418,1,0,0,0,8419,8420,1,0,
        0,0,8420,8422,1,0,0,0,8421,8423,3,742,371,0,8422,8421,1,0,0,0,8422,
        8423,1,0,0,0,8423,8426,1,0,0,0,8424,8427,3,740,370,0,8425,8427,3,
        744,372,0,8426,8424,1,0,0,0,8426,8425,1,0,0,0,8426,8427,1,0,0,0,
        8427,8454,1,0,0,0,8428,8430,3,718,359,0,8429,8428,1,0,0,0,8429,8430,
        1,0,0,0,8430,8431,1,0,0,0,8431,8433,5,936,0,0,8432,8434,3,726,363,
        0,8433,8432,1,0,0,0,8433,8434,1,0,0,0,8434,8436,1,0,0,0,8435,8437,
        3,742,371,0,8436,8435,1,0,0,0,8436,8437,1,0,0,0,8437,8454,1,0,0,
        0,8438,8440,3,718,359,0,8439,8438,1,0,0,0,8439,8440,1,0,0,0,8440,
        8441,1,0,0,0,8441,8443,5,607,0,0,8442,8444,3,726,363,0,8443,8442,
        1,0,0,0,8443,8444,1,0,0,0,8444,8446,1,0,0,0,8445,8447,3,742,371,
        0,8446,8445,1,0,0,0,8446,8447,1,0,0,0,8447,8448,1,0,0,0,8448,8454,
        3,746,373,0,8449,8451,3,718,359,0,8450,8449,1,0,0,0,8450,8451,1,
        0,0,0,8451,8452,1,0,0,0,8452,8454,3,788,394,0,8453,8405,1,0,0,0,
        8453,8415,1,0,0,0,8453,8429,1,0,0,0,8453,8439,1,0,0,0,8453,8450,
        1,0,0,0,8454,709,1,0,0,0,8455,8464,3,730,365,0,8456,8464,3,732,366,
        0,8457,8464,3,734,367,0,8458,8464,3,716,358,0,8459,8464,3,752,376,
        0,8460,8464,3,1174,587,0,8461,8464,3,728,364,0,8462,8464,3,712,356,
        0,8463,8455,1,0,0,0,8463,8456,1,0,0,0,8463,8457,1,0,0,0,8463,8458,
        1,0,0,0,8463,8459,1,0,0,0,8463,8460,1,0,0,0,8463,8461,1,0,0,0,8463,
        8462,1,0,0,0,8464,711,1,0,0,0,8465,8467,5,272,0,0,8466,8465,1,0,
        0,0,8466,8467,1,0,0,0,8467,8468,1,0,0,0,8468,8474,5,274,0,0,8469,
        8470,5,111,0,0,8470,8474,3,714,357,0,8471,8472,5,474,0,0,8472,8474,
        5,111,0,0,8473,8466,1,0,0,0,8473,8469,1,0,0,0,8473,8471,1,0,0,0,
        8474,713,1,0,0,0,8475,8476,7,1,0,0,8476,8482,3,768,384,0,8477,8478,
        7,1,0,0,8478,8482,3,764,382,0,8479,8482,3,754,377,0,8480,8482,3,
        1032,516,0,8481,8475,1,0,0,0,8481,8477,1,0,0,0,8481,8479,1,0,0,0,
        8481,8480,1,0,0,0,8482,715,1,0,0,0,8483,8486,3,738,369,0,8484,8486,
        3,736,368,0,8485,8483,1,0,0,0,8485,8484,1,0,0,0,8486,717,1,0,0,0,
        8487,8488,5,1089,0,0,8488,8489,5,1209,0,0,8489,719,1,0,0,0,8490,
        8492,5,478,0,0,8491,8493,3,722,361,0,8492,8491,1,0,0,0,8492,8493,
        1,0,0,0,8493,8496,1,0,0,0,8494,8495,5,426,0,0,8495,8497,5,258,0,
        0,8496,8494,1,0,0,0,8496,8497,1,0,0,0,8497,8553,1,0,0,0,8498,8500,
        5,258,0,0,8499,8501,3,722,361,0,8500,8499,1,0,0,0,8500,8501,1,0,
        0,0,8501,8553,1,0,0,0,8502,8504,5,106,0,0,8503,8505,3,722,361,0,
        8504,8503,1,0,0,0,8504,8505,1,0,0,0,8505,8515,1,0,0,0,8506,8507,
        5,426,0,0,8507,8516,5,185,0,0,8508,8509,5,426,0,0,8509,8516,5,248,
        0,0,8510,8511,5,426,0,0,8511,8513,5,368,0,0,8512,8514,3,722,361,
        0,8513,8512,1,0,0,0,8513,8514,1,0,0,0,8514,8516,1,0,0,0,8515,8506,
        1,0,0,0,8515,8508,1,0,0,0,8515,8510,1,0,0,0,8515,8516,1,0,0,0,8516,
        8553,1,0,0,0,8517,8519,5,185,0,0,8518,8520,3,722,361,0,8519,8518,
        1,0,0,0,8519,8520,1,0,0,0,8520,8528,1,0,0,0,8521,8522,5,426,0,0,
        8522,8529,5,248,0,0,8523,8524,5,426,0,0,8524,8526,5,368,0,0,8525,
        8527,3,722,361,0,8526,8525,1,0,0,0,8526,8527,1,0,0,0,8527,8529,1,
        0,0,0,8528,8521,1,0,0,0,8528,8523,1,0,0,0,8528,8529,1,0,0,0,8529,
        8553,1,0,0,0,8530,8532,5,248,0,0,8531,8533,3,722,361,0,8532,8531,
        1,0,0,0,8532,8533,1,0,0,0,8533,8539,1,0,0,0,8534,8535,5,426,0,0,
        8535,8537,5,368,0,0,8536,8538,3,722,361,0,8537,8536,1,0,0,0,8537,
        8538,1,0,0,0,8538,8540,1,0,0,0,8539,8534,1,0,0,0,8539,8540,1,0,0,
        0,8540,8553,1,0,0,0,8541,8550,5,368,0,0,8542,8543,5,1213,0,0,8543,
        8546,3,764,382,0,8544,8545,5,1208,0,0,8545,8547,3,764,382,0,8546,
        8544,1,0,0,0,8546,8547,1,0,0,0,8547,8548,1,0,0,0,8548,8549,5,1214,
        0,0,8549,8551,1,0,0,0,8550,8542,1,0,0,0,8550,8551,1,0,0,0,8551,8553,
        1,0,0,0,8552,8490,1,0,0,0,8552,8498,1,0,0,0,8552,8502,1,0,0,0,8552,
        8517,1,0,0,0,8552,8530,1,0,0,0,8552,8541,1,0,0,0,8553,721,1,0,0,
        0,8554,8555,5,1213,0,0,8555,8556,3,764,382,0,8556,8557,5,1214,0,
        0,8557,723,1,0,0,0,8558,8559,5,1213,0,0,8559,8561,3,764,382,0,8560,
        8562,7,69,0,0,8561,8560,1,0,0,0,8561,8562,1,0,0,0,8562,8563,1,0,
        0,0,8563,8564,5,1214,0,0,8564,725,1,0,0,0,8565,8566,5,1213,0,0,8566,
        8568,3,764,382,0,8567,8569,7,70,0,0,8568,8567,1,0,0,0,8568,8569,
        1,0,0,0,8569,8570,1,0,0,0,8570,8571,5,1214,0,0,8571,727,1,0,0,0,
        8572,8573,7,67,0,0,8573,8574,5,372,0,0,8574,8575,7,71,0,0,8575,729,
        1,0,0,0,8576,8577,7,72,0,0,8577,731,1,0,0,0,8578,8580,7,73,0,0,8579,
        8578,1,0,0,0,8579,8580,1,0,0,0,8580,8581,1,0,0,0,8581,8582,7,74,
        0,0,8582,733,1,0,0,0,8583,8587,5,161,0,0,8584,8588,3,758,379,0,8585,
        8588,5,1198,0,0,8586,8588,5,1199,0,0,8587,8584,1,0,0,0,8587,8585,
        1,0,0,0,8587,8586,1,0,0,0,8588,735,1,0,0,0,8589,8590,5,425,0,0,8590,
        8591,3,758,379,0,8591,737,1,0,0,0,8592,8593,5,262,0,0,8593,8594,
        3,808,404,0,8594,739,1,0,0,0,8595,8596,7,67,0,0,8596,8597,5,372,
        0,0,8597,8598,7,43,0,0,8598,741,1,0,0,0,8599,8600,5,709,0,0,8600,
        8601,5,739,0,0,8601,8602,3,764,382,0,8602,743,1,0,0,0,8603,8604,
        5,941,0,0,8604,8605,5,161,0,0,8605,8606,7,75,0,0,8606,745,1,0,0,
        0,8607,8608,5,941,0,0,8608,8609,5,161,0,0,8609,8611,3,748,374,0,
        8610,8612,3,750,375,0,8611,8610,1,0,0,0,8611,8612,1,0,0,0,8612,747,
        1,0,0,0,8613,8619,5,545,0,0,8614,8616,5,1073,0,0,8615,8617,3,740,
        370,0,8616,8615,1,0,0,0,8616,8617,1,0,0,0,8617,8619,1,0,0,0,8618,
        8613,1,0,0,0,8618,8614,1,0,0,0,8619,749,1,0,0,0,8620,8621,5,474,
        0,0,8621,8622,5,905,0,0,8622,8623,3,792,396,0,8623,751,1,0,0,0,8624,
        8625,5,474,0,0,8625,8626,5,421,0,0,8626,8627,5,480,0,0,8627,753,
        1,0,0,0,8628,8642,3,756,378,0,8629,8642,3,758,379,0,8630,8642,3,
        760,380,0,8631,8642,3,762,381,0,8632,8642,3,764,382,0,8633,8642,
        3,766,383,0,8634,8642,3,768,384,0,8635,8642,3,772,386,0,8636,8642,
        3,774,387,0,8637,8642,3,776,388,0,8638,8642,3,778,389,0,8639,8642,
        3,782,391,0,8640,8642,5,274,0,0,8641,8628,1,0,0,0,8641,8629,1,0,
        0,0,8641,8630,1,0,0,0,8641,8631,1,0,0,0,8641,8632,1,0,0,0,8641,8633,
        1,0,0,0,8641,8634,1,0,0,0,8641,8635,1,0,0,0,8641,8636,1,0,0,0,8641,
        8637,1,0,0,0,8641,8638,1,0,0,0,8641,8639,1,0,0,0,8641,8640,1,0,0,
        0,8642,755,1,0,0,0,8643,8644,5,1195,0,0,8644,757,1,0,0,0,8645,8647,
        3,770,385,0,8646,8645,1,0,0,0,8646,8647,1,0,0,0,8647,8649,1,0,0,
        0,8648,8650,5,1203,0,0,8649,8648,1,0,0,0,8650,8651,1,0,0,0,8651,
        8649,1,0,0,0,8651,8652,1,0,0,0,8652,759,1,0,0,0,8653,8655,3,770,
        385,0,8654,8653,1,0,0,0,8654,8655,1,0,0,0,8655,8656,1,0,0,0,8656,
        8660,5,1202,0,0,8657,8659,5,1203,0,0,8658,8657,1,0,0,0,8659,8662,
        1,0,0,0,8660,8658,1,0,0,0,8660,8661,1,0,0,0,8661,8663,1,0,0,0,8662,
        8660,1,0,0,0,8663,8664,5,444,0,0,8664,8665,5,1203,0,0,8665,761,1,
        0,0,0,8666,8668,3,770,385,0,8667,8666,1,0,0,0,8667,8668,1,0,0,0,
        8668,8669,1,0,0,0,8669,8670,5,1204,0,0,8670,763,1,0,0,0,8671,8672,
        5,1194,0,0,8672,765,1,0,0,0,8673,8674,5,1196,0,0,8674,767,1,0,0,
        0,8675,8676,5,1197,0,0,8676,769,1,0,0,0,8677,8678,7,76,0,0,8678,
        771,1,0,0,0,8679,8681,5,104,0,0,8680,8679,1,0,0,0,8680,8681,1,0,
        0,0,8681,8682,1,0,0,0,8682,8683,5,1198,0,0,8683,773,1,0,0,0,8684,
        8686,5,421,0,0,8685,8684,1,0,0,0,8685,8686,1,0,0,0,8686,8687,1,0,
        0,0,8687,8688,5,1199,0,0,8688,775,1,0,0,0,8689,8691,5,422,0,0,8690,
        8689,1,0,0,0,8690,8691,1,0,0,0,8691,8692,1,0,0,0,8692,8693,5,1200,
        0,0,8693,777,1,0,0,0,8694,8696,5,205,0,0,8695,8697,5,1222,0,0,8696,
        8695,1,0,0,0,8696,8697,1,0,0,0,8697,8698,1,0,0,0,8698,8699,7,77,
        0,0,8699,8700,3,780,390,0,8700,779,1,0,0,0,8701,8729,5,478,0,0,8702,
        8703,5,478,0,0,8703,8704,5,426,0,0,8704,8729,5,258,0,0,8705,8729,
        5,258,0,0,8706,8729,5,106,0,0,8707,8708,5,106,0,0,8708,8709,5,426,
        0,0,8709,8729,5,185,0,0,8710,8711,5,106,0,0,8711,8712,5,426,0,0,
        8712,8729,5,248,0,0,8713,8714,5,106,0,0,8714,8715,5,426,0,0,8715,
        8729,5,368,0,0,8716,8729,5,185,0,0,8717,8718,5,185,0,0,8718,8719,
        5,426,0,0,8719,8729,5,248,0,0,8720,8721,5,185,0,0,8721,8722,5,426,
        0,0,8722,8729,5,368,0,0,8723,8729,5,248,0,0,8724,8725,5,248,0,0,
        8725,8726,5,426,0,0,8726,8729,5,368,0,0,8727,8729,5,368,0,0,8728,
        8701,1,0,0,0,8728,8702,1,0,0,0,8728,8705,1,0,0,0,8728,8706,1,0,0,
        0,8728,8707,1,0,0,0,8728,8710,1,0,0,0,8728,8713,1,0,0,0,8728,8716,
        1,0,0,0,8728,8717,1,0,0,0,8728,8720,1,0,0,0,8728,8723,1,0,0,0,8728,
        8724,1,0,0,0,8728,8727,1,0,0,0,8729,781,1,0,0,0,8730,8731,5,853,
        0,0,8731,8732,5,1201,0,0,8732,783,1,0,0,0,8733,8734,3,800,400,0,
        8734,8735,5,1209,0,0,8735,8736,3,788,394,0,8736,8737,5,1209,0,0,
        8737,8738,3,786,393,0,8738,8745,1,0,0,0,8739,8740,3,788,394,0,8740,
        8741,5,1209,0,0,8741,8742,3,786,393,0,8742,8745,1,0,0,0,8743,8745,
        3,786,393,0,8744,8733,1,0,0,0,8744,8739,1,0,0,0,8744,8743,1,0,0,
        0,8745,785,1,0,0,0,8746,8751,5,1193,0,0,8747,8751,3,832,416,0,8748,
        8751,5,366,0,0,8749,8751,5,363,0,0,8750,8746,1,0,0,0,8750,8747,1,
        0,0,0,8750,8748,1,0,0,0,8750,8749,1,0,0,0,8751,787,1,0,0,0,8752,
        8755,5,1193,0,0,8753,8755,3,832,416,0,8754,8752,1,0,0,0,8754,8753,
        1,0,0,0,8755,789,1,0,0,0,8756,8757,3,800,400,0,8757,8758,5,1209,
        0,0,8758,8760,1,0,0,0,8759,8756,1,0,0,0,8759,8760,1,0,0,0,8760,8763,
        1,0,0,0,8761,8764,5,1193,0,0,8762,8764,3,832,416,0,8763,8761,1,0,
        0,0,8763,8762,1,0,0,0,8764,791,1,0,0,0,8765,8766,3,800,400,0,8766,
        8767,5,1209,0,0,8767,8769,1,0,0,0,8768,8765,1,0,0,0,8768,8769,1,
        0,0,0,8769,8772,1,0,0,0,8770,8773,5,1193,0,0,8771,8773,3,832,416,
        0,8772,8770,1,0,0,0,8772,8771,1,0,0,0,8773,793,1,0,0,0,8774,8775,
        3,800,400,0,8775,8776,5,1209,0,0,8776,8778,1,0,0,0,8777,8774,1,0,
        0,0,8777,8778,1,0,0,0,8778,8781,1,0,0,0,8779,8782,5,1193,0,0,8780,
        8782,3,832,416,0,8781,8779,1,0,0,0,8781,8780,1,0,0,0,8782,795,1,
        0,0,0,8783,8784,3,800,400,0,8784,8785,5,1209,0,0,8785,8787,1,0,0,
        0,8786,8783,1,0,0,0,8786,8787,1,0,0,0,8787,8790,1,0,0,0,8788,8791,
        5,1193,0,0,8789,8791,3,832,416,0,8790,8788,1,0,0,0,8790,8789,1,0,
        0,0,8791,797,1,0,0,0,8792,8793,3,800,400,0,8793,8794,5,1209,0,0,
        8794,8796,1,0,0,0,8795,8792,1,0,0,0,8795,8796,1,0,0,0,8796,8799,
        1,0,0,0,8797,8800,5,1193,0,0,8798,8800,3,832,416,0,8799,8797,1,0,
        0,0,8799,8798,1,0,0,0,8800,799,1,0,0,0,8801,8804,5,1193,0,0,8802,
        8804,3,832,416,0,8803,8801,1,0,0,0,8803,8802,1,0,0,0,8804,801,1,
        0,0,0,8805,8808,5,1193,0,0,8806,8808,3,832,416,0,8807,8805,1,0,0,
        0,8807,8806,1,0,0,0,8808,803,1,0,0,0,8809,8813,5,1193,0,0,8810,8813,
        5,10,0,0,8811,8813,3,832,416,0,8812,8809,1,0,0,0,8812,8810,1,0,0,
        0,8812,8811,1,0,0,0,8813,805,1,0,0,0,8814,8817,5,1193,0,0,8815,8817,
        3,832,416,0,8816,8814,1,0,0,0,8816,8815,1,0,0,0,8817,807,1,0,0,0,
        8818,8821,5,1193,0,0,8819,8821,3,832,416,0,8820,8818,1,0,0,0,8820,
        8819,1,0,0,0,8821,809,1,0,0,0,8822,8825,5,1193,0,0,8823,8825,3,832,
        416,0,8824,8822,1,0,0,0,8824,8823,1,0,0,0,8825,811,1,0,0,0,8826,
        8829,5,1193,0,0,8827,8829,3,832,416,0,8828,8826,1,0,0,0,8828,8827,
        1,0,0,0,8829,813,1,0,0,0,8830,8833,5,1193,0,0,8831,8833,3,832,416,
        0,8832,8830,1,0,0,0,8832,8831,1,0,0,0,8833,815,1,0,0,0,8834,8837,
        5,1193,0,0,8835,8837,3,832,416,0,8836,8834,1,0,0,0,8836,8835,1,0,
        0,0,8837,817,1,0,0,0,8838,8841,5,1193,0,0,8839,8841,3,832,416,0,
        8840,8838,1,0,0,0,8840,8839,1,0,0,0,8841,819,1,0,0,0,8842,8845,5,
        1193,0,0,8843,8845,3,832,416,0,8844,8842,1,0,0,0,8844,8843,1,0,0,
        0,8845,821,1,0,0,0,8846,8849,5,1193,0,0,8847,8849,3,832,416,0,8848,
        8846,1,0,0,0,8848,8847,1,0,0,0,8849,823,1,0,0,0,8850,8853,5,1193,
        0,0,8851,8853,3,832,416,0,8852,8850,1,0,0,0,8852,8851,1,0,0,0,8853,
        825,1,0,0,0,8854,8857,5,1193,0,0,8855,8857,3,832,416,0,8856,8854,
        1,0,0,0,8856,8855,1,0,0,0,8857,827,1,0,0,0,8858,8861,5,1193,0,0,
        8859,8861,3,832,416,0,8860,8858,1,0,0,0,8860,8859,1,0,0,0,8861,829,
        1,0,0,0,8862,8863,7,78,0,0,8863,831,1,0,0,0,8864,8865,7,79,0,0,8865,
        833,1,0,0,0,8866,8867,6,417,-1,0,8867,8873,3,836,418,0,8868,8869,
        5,1213,0,0,8869,8870,3,834,417,0,8870,8871,5,1214,0,0,8871,8873,
        1,0,0,0,8872,8866,1,0,0,0,8872,8868,1,0,0,0,8873,8882,1,0,0,0,8874,
        8875,10,2,0,0,8875,8877,7,80,0,0,8876,8878,5,13,0,0,8877,8876,1,
        0,0,0,8877,8878,1,0,0,0,8878,8879,1,0,0,0,8879,8881,3,834,417,3,
        8880,8874,1,0,0,0,8881,8884,1,0,0,0,8882,8880,1,0,0,0,8882,8883,
        1,0,0,0,8883,835,1,0,0,0,8884,8882,1,0,0,0,8885,8887,7,34,0,0,8886,
        8888,3,838,419,0,8887,8886,1,0,0,0,8887,8888,1,0,0,0,8888,8890,1,
        0,0,0,8889,8891,3,840,420,0,8890,8889,1,0,0,0,8890,8891,1,0,0,0,
        8891,8892,1,0,0,0,8892,8924,3,842,421,0,8893,8897,3,856,428,0,8894,
        8896,3,946,473,0,8895,8894,1,0,0,0,8896,8899,1,0,0,0,8897,8895,1,
        0,0,0,8897,8898,1,0,0,0,8898,8923,1,0,0,0,8899,8897,1,0,0,0,8900,
        8923,3,854,427,0,8901,8923,3,952,476,0,8902,8923,3,954,477,0,8903,
        8906,3,972,486,0,8904,8906,3,974,487,0,8905,8903,1,0,0,0,8905,8904,
        1,0,0,0,8906,8923,1,0,0,0,8907,8923,3,976,488,0,8908,8910,3,946,
        473,0,8909,8908,1,0,0,0,8910,8913,1,0,0,0,8911,8909,1,0,0,0,8911,
        8912,1,0,0,0,8912,8914,1,0,0,0,8913,8911,1,0,0,0,8914,8918,3,986,
        493,0,8915,8917,3,946,473,0,8916,8915,1,0,0,0,8917,8920,1,0,0,0,
        8918,8916,1,0,0,0,8918,8919,1,0,0,0,8919,8923,1,0,0,0,8920,8918,
        1,0,0,0,8921,8923,3,992,496,0,8922,8893,1,0,0,0,8922,8900,1,0,0,
        0,8922,8901,1,0,0,0,8922,8902,1,0,0,0,8922,8905,1,0,0,0,8922,8907,
        1,0,0,0,8922,8911,1,0,0,0,8922,8921,1,0,0,0,8923,8926,1,0,0,0,8924,
        8922,1,0,0,0,8924,8925,1,0,0,0,8925,8928,1,0,0,0,8926,8924,1,0,0,
        0,8927,8929,3,984,492,0,8928,8927,1,0,0,0,8928,8929,1,0,0,0,8929,
        837,1,0,0,0,8930,8931,5,474,0,0,8931,8932,5,1079,0,0,8932,8933,5,
        364,0,0,8933,839,1,0,0,0,8934,8935,5,20,0,0,8935,8936,5,720,0,0,
        8936,841,1,0,0,0,8937,8942,5,121,0,0,8938,8942,5,448,0,0,8939,8942,
        5,13,0,0,8940,8942,3,846,423,0,8941,8937,1,0,0,0,8941,8938,1,0,0,
        0,8941,8939,1,0,0,0,8941,8940,1,0,0,0,8942,8945,1,0,0,0,8943,8945,
        3,844,422,0,8944,8941,1,0,0,0,8944,8943,1,0,0,0,8944,8945,1,0,0,
        0,8945,8946,1,0,0,0,8946,8949,3,850,425,0,8947,8949,3,848,424,0,
        8948,8944,1,0,0,0,8948,8947,1,0,0,0,8949,843,1,0,0,0,8950,8954,5,
        427,0,0,8951,8955,3,764,382,0,8952,8955,3,768,384,0,8953,8955,3,
        1192,596,0,8954,8951,1,0,0,0,8954,8952,1,0,0,0,8954,8953,1,0,0,0,
        8955,8957,1,0,0,0,8956,8958,5,300,0,0,8957,8956,1,0,0,0,8957,8958,
        1,0,0,0,8958,8961,1,0,0,0,8959,8960,5,474,0,0,8960,8962,5,986,0,
        0,8961,8959,1,0,0,0,8961,8962,1,0,0,0,8962,845,1,0,0,0,8963,8974,
        5,271,0,0,8964,8965,5,286,0,0,8965,8966,5,765,0,0,8966,8967,5,290,
        0,0,8967,8975,5,296,0,0,8968,8969,5,286,0,0,8969,8972,5,296,0,0,
        8970,8971,5,290,0,0,8971,8973,5,765,0,0,8972,8970,1,0,0,0,8972,8973,
        1,0,0,0,8973,8975,1,0,0,0,8974,8964,1,0,0,0,8974,8968,1,0,0,0,8974,
        8975,1,0,0,0,8975,847,1,0,0,0,8976,8983,5,1219,0,0,8977,8978,3,792,
        396,0,8978,8979,5,1209,0,0,8979,8980,5,1219,0,0,8980,8983,1,0,0,
        0,8981,8983,3,784,392,0,8982,8976,1,0,0,0,8982,8977,1,0,0,0,8982,
        8981,1,0,0,0,8983,8984,1,0,0,0,8984,8985,5,1209,0,0,8985,8986,5,
        13,0,0,8986,849,1,0,0,0,8987,8997,5,1219,0,0,8988,8993,3,852,426,
        0,8989,8990,5,1208,0,0,8990,8992,3,852,426,0,8991,8989,1,0,0,0,8992,
        8995,1,0,0,0,8993,8991,1,0,0,0,8993,8994,1,0,0,0,8994,8997,1,0,0,
        0,8995,8993,1,0,0,0,8996,8987,1,0,0,0,8996,8988,1,0,0,0,8997,851,
        1,0,0,0,8998,9003,3,996,498,0,8999,9001,5,20,0,0,9000,8999,1,0,0,
        0,9000,9001,1,0,0,0,9001,9002,1,0,0,0,9002,9004,3,808,404,0,9003,
        9000,1,0,0,0,9003,9004,1,0,0,0,9004,9010,1,0,0,0,9005,9006,3,792,
        396,0,9006,9007,5,1209,0,0,9007,9008,5,1219,0,0,9008,9010,1,0,0,
        0,9009,8998,1,0,0,0,9009,9005,1,0,0,0,9010,853,1,0,0,0,9011,9014,
        5,206,0,0,9012,9015,3,810,405,0,9013,9015,3,1188,594,0,9014,9012,
        1,0,0,0,9014,9013,1,0,0,0,9015,9023,1,0,0,0,9016,9019,5,1208,0,0,
        9017,9020,3,810,405,0,9018,9020,3,1188,594,0,9019,9017,1,0,0,0,9019,
        9018,1,0,0,0,9020,9022,1,0,0,0,9021,9016,1,0,0,0,9022,9025,1,0,0,
        0,9023,9021,1,0,0,0,9023,9024,1,0,0,0,9024,855,1,0,0,0,9025,9023,
        1,0,0,0,9026,9027,5,164,0,0,9027,9028,3,858,429,0,9028,857,1,0,0,
        0,9029,9033,3,860,430,0,9030,9032,3,862,431,0,9031,9030,1,0,0,0,
        9032,9035,1,0,0,0,9033,9031,1,0,0,0,9033,9034,1,0,0,0,9034,9060,
        1,0,0,0,9035,9033,1,0,0,0,9036,9040,3,864,432,0,9037,9039,3,862,
        431,0,9038,9037,1,0,0,0,9039,9042,1,0,0,0,9040,9038,1,0,0,0,9040,
        9041,1,0,0,0,9041,9060,1,0,0,0,9042,9040,1,0,0,0,9043,9047,3,866,
        433,0,9044,9046,3,862,431,0,9045,9044,1,0,0,0,9046,9049,1,0,0,0,
        9047,9045,1,0,0,0,9047,9048,1,0,0,0,9048,9060,1,0,0,0,9049,9047,
        1,0,0,0,9050,9051,5,1213,0,0,9051,9052,3,858,429,0,9052,9056,5,1214,
        0,0,9053,9055,3,862,431,0,9054,9053,1,0,0,0,9055,9058,1,0,0,0,9056,
        9054,1,0,0,0,9056,9057,1,0,0,0,9057,9060,1,0,0,0,9058,9056,1,0,0,
        0,9059,9029,1,0,0,0,9059,9036,1,0,0,0,9059,9043,1,0,0,0,9059,9050,
        1,0,0,0,9060,859,1,0,0,0,9061,9068,3,868,434,0,9062,9068,3,938,469,
        0,9063,9068,3,874,437,0,9064,9068,3,890,445,0,9065,9068,3,876,438,
        0,9066,9068,3,902,451,0,9067,9061,1,0,0,0,9067,9062,1,0,0,0,9067,
        9063,1,0,0,0,9067,9064,1,0,0,0,9067,9065,1,0,0,0,9067,9066,1,0,0,
        0,9068,861,1,0,0,0,9069,9070,5,1208,0,0,9070,9079,3,868,434,0,9071,
        9072,5,1208,0,0,9072,9079,3,938,469,0,9073,9074,5,1208,0,0,9074,
        9079,3,890,445,0,9075,9076,5,1208,0,0,9076,9079,3,902,451,0,9077,
        9079,3,870,435,0,9078,9069,1,0,0,0,9078,9071,1,0,0,0,9078,9073,1,
        0,0,0,9078,9075,1,0,0,0,9078,9077,1,0,0,0,9079,863,1,0,0,0,9080,
        9083,3,868,434,0,9081,9083,3,938,469,0,9082,9080,1,0,0,0,9082,9081,
        1,0,0,0,9083,9084,1,0,0,0,9084,9085,3,1150,575,0,9085,865,1,0,0,
        0,9086,9089,3,868,434,0,9087,9089,3,938,469,0,9088,9086,1,0,0,0,
        9088,9087,1,0,0,0,9089,9090,1,0,0,0,9090,9091,3,1166,583,0,9091,
        867,1,0,0,0,9092,9097,3,792,396,0,9093,9095,3,888,444,0,9094,9096,
        3,886,443,0,9095,9094,1,0,0,0,9095,9096,1,0,0,0,9096,9098,1,0,0,
        0,9097,9093,1,0,0,0,9097,9098,1,0,0,0,9098,9103,1,0,0,0,9099,9101,
        5,20,0,0,9100,9099,1,0,0,0,9100,9101,1,0,0,0,9101,9102,1,0,0,0,9102,
        9104,3,808,404,0,9103,9100,1,0,0,0,9103,9104,1,0,0,0,9104,869,1,
        0,0,0,9105,9111,5,194,0,0,9106,9108,7,81,0,0,9107,9109,5,294,0,0,
        9108,9107,1,0,0,0,9108,9109,1,0,0,0,9109,9111,1,0,0,0,9110,9105,
        1,0,0,0,9110,9106,1,0,0,0,9110,9111,1,0,0,0,9111,9112,1,0,0,0,9112,
        9113,5,210,0,0,9113,9117,3,860,430,0,9114,9116,3,872,436,0,9115,
        9114,1,0,0,0,9116,9119,1,0,0,0,9117,9115,1,0,0,0,9117,9118,1,0,0,
        0,9118,9158,1,0,0,0,9119,9117,1,0,0,0,9120,9126,5,194,0,0,9121,9123,
        7,81,0,0,9122,9124,5,294,0,0,9123,9122,1,0,0,0,9123,9124,1,0,0,0,
        9124,9126,1,0,0,0,9125,9120,1,0,0,0,9125,9121,1,0,0,0,9125,9126,
        1,0,0,0,9126,9127,1,0,0,0,9127,9128,5,210,0,0,9128,9129,5,1213,0,
        0,9129,9130,3,858,429,0,9130,9134,5,1214,0,0,9131,9133,3,872,436,
        0,9132,9131,1,0,0,0,9133,9136,1,0,0,0,9134,9132,1,0,0,0,9134,9135,
        1,0,0,0,9135,9158,1,0,0,0,9136,9134,1,0,0,0,9137,9138,5,87,0,0,9138,
        9139,5,210,0,0,9139,9143,3,860,430,0,9140,9142,3,872,436,0,9141,
        9140,1,0,0,0,9142,9145,1,0,0,0,9143,9141,1,0,0,0,9143,9144,1,0,0,
        0,9144,9158,1,0,0,0,9145,9143,1,0,0,0,9146,9147,5,87,0,0,9147,9148,
        5,210,0,0,9148,9149,5,1213,0,0,9149,9150,3,858,429,0,9150,9154,5,
        1214,0,0,9151,9153,3,872,436,0,9152,9151,1,0,0,0,9153,9156,1,0,0,
        0,9154,9152,1,0,0,0,9154,9155,1,0,0,0,9155,9158,1,0,0,0,9156,9154,
        1,0,0,0,9157,9110,1,0,0,0,9157,9125,1,0,0,0,9157,9137,1,0,0,0,9157,
        9146,1,0,0,0,9158,871,1,0,0,0,9159,9160,5,286,0,0,9160,9161,3,994,
        497,0,9161,873,1,0,0,0,9162,9163,5,160,0,0,9163,9164,5,406,0,0,9164,
        9171,5,1213,0,0,9165,9172,3,836,418,0,9166,9168,9,0,0,0,9167,9166,
        1,0,0,0,9168,9169,1,0,0,0,9169,9170,1,0,0,0,9169,9167,1,0,0,0,9170,
        9172,1,0,0,0,9171,9165,1,0,0,0,9171,9167,1,0,0,0,9172,9173,1,0,0,
        0,9173,9174,5,1214,0,0,9174,9187,3,888,444,0,9175,9176,5,664,0,0,
        9176,9177,5,1213,0,0,9177,9182,3,880,440,0,9178,9179,5,1208,0,0,
        9179,9181,3,880,440,0,9180,9178,1,0,0,0,9181,9184,1,0,0,0,9182,9180,
        1,0,0,0,9182,9183,1,0,0,0,9183,9185,1,0,0,0,9184,9182,1,0,0,0,9185,
        9186,5,1214,0,0,9186,9188,1,0,0,0,9187,9175,1,0,0,0,9187,9188,1,
        0,0,0,9188,9190,1,0,0,0,9189,9191,5,20,0,0,9190,9189,1,0,0,0,9190,
        9191,1,0,0,0,9191,9192,1,0,0,0,9192,9193,3,808,404,0,9193,875,1,
        0,0,0,9194,9195,3,796,398,0,9195,9196,3,888,444,0,9196,9198,5,1213,
        0,0,9197,9199,3,878,439,0,9198,9197,1,0,0,0,9199,9200,1,0,0,0,9200,
        9198,1,0,0,0,9200,9201,1,0,0,0,9201,9202,1,0,0,0,9202,9204,5,1214,
        0,0,9203,9205,5,20,0,0,9204,9203,1,0,0,0,9204,9205,1,0,0,0,9205,
        9206,1,0,0,0,9206,9207,3,808,404,0,9207,877,1,0,0,0,9208,9209,5,
        286,0,0,9209,9210,5,1213,0,0,9210,9215,3,996,498,0,9211,9212,5,1208,
        0,0,9212,9214,3,996,498,0,9213,9211,1,0,0,0,9214,9217,1,0,0,0,9215,
        9213,1,0,0,0,9215,9216,1,0,0,0,9216,9218,1,0,0,0,9217,9215,1,0,0,
        0,9218,9222,5,1214,0,0,9219,9221,3,936,468,0,9220,9219,1,0,0,0,9221,
        9224,1,0,0,0,9222,9220,1,0,0,0,9222,9223,1,0,0,0,9223,9229,1,0,0,
        0,9224,9222,1,0,0,0,9225,9227,5,224,0,0,9226,9225,1,0,0,0,9226,9227,
        1,0,0,0,9227,9228,1,0,0,0,9228,9230,3,986,493,0,9229,9226,1,0,0,
        0,9229,9230,1,0,0,0,9230,9231,1,0,0,0,9231,9232,3,882,441,0,9232,
        879,1,0,0,0,9233,9241,3,938,469,0,9234,9236,3,792,396,0,9235,9237,
        5,20,0,0,9236,9235,1,0,0,0,9236,9237,1,0,0,0,9237,9238,1,0,0,0,9238,
        9239,3,808,404,0,9239,9241,1,0,0,0,9240,9233,1,0,0,0,9240,9234,1,
        0,0,0,9241,881,1,0,0,0,9242,9244,5,457,0,0,9243,9245,3,884,442,0,
        9244,9243,1,0,0,0,9245,9246,1,0,0,0,9246,9244,1,0,0,0,9246,9247,
        1,0,0,0,9247,883,1,0,0,0,9248,9249,3,788,394,0,9249,9250,5,1213,
        0,0,9250,9251,3,996,498,0,9251,9252,5,1214,0,0,9252,885,1,0,0,0,
        9253,9254,5,352,0,0,9254,9255,5,1213,0,0,9255,9260,3,1186,593,0,
        9256,9257,5,1208,0,0,9257,9259,3,1186,593,0,9258,9256,1,0,0,0,9259,
        9262,1,0,0,0,9260,9258,1,0,0,0,9260,9261,1,0,0,0,9261,9263,1,0,0,
        0,9262,9260,1,0,0,0,9263,9264,5,1214,0,0,9264,887,1,0,0,0,9265,9266,
        5,1210,0,0,9266,9267,3,808,404,0,9267,889,1,0,0,0,9268,9269,5,406,
        0,0,9269,9272,5,1213,0,0,9270,9273,3,892,446,0,9271,9273,3,894,447,
        0,9272,9270,1,0,0,0,9272,9271,1,0,0,0,9273,9274,1,0,0,0,9274,9276,
        5,1214,0,0,9275,9277,5,20,0,0,9276,9275,1,0,0,0,9276,9277,1,0,0,
        0,9277,9278,1,0,0,0,9278,9280,3,808,404,0,9279,9281,3,1182,591,0,
        9280,9279,1,0,0,0,9280,9281,1,0,0,0,9281,891,1,0,0,0,9282,9286,3,
        796,398,0,9283,9284,5,1213,0,0,9284,9287,5,1214,0,0,9285,9287,3,
        1180,590,0,9286,9283,1,0,0,0,9286,9285,1,0,0,0,9287,9289,1,0,0,0,
        9288,9290,3,896,448,0,9289,9288,1,0,0,0,9289,9290,1,0,0,0,9290,9295,
        1,0,0,0,9291,9294,3,898,449,0,9292,9294,3,900,450,0,9293,9291,1,
        0,0,0,9293,9292,1,0,0,0,9294,9297,1,0,0,0,9295,9293,1,0,0,0,9295,
        9296,1,0,0,0,9296,893,1,0,0,0,9297,9295,1,0,0,0,9298,9300,3,1066,
        533,0,9299,9298,1,0,0,0,9299,9300,1,0,0,0,9300,9301,1,0,0,0,9301,
        9302,5,1148,0,0,9302,9306,5,1213,0,0,9303,9304,3,996,498,0,9304,
        9305,5,1208,0,0,9305,9307,1,0,0,0,9306,9303,1,0,0,0,9306,9307,1,
        0,0,0,9307,9308,1,0,0,0,9308,9309,3,996,498,0,9309,9312,5,1214,0,
        0,9310,9311,5,474,0,0,9311,9313,5,829,0,0,9312,9310,1,0,0,0,9312,
        9313,1,0,0,0,9313,895,1,0,0,0,9314,9327,5,352,0,0,9315,9328,3,792,
        396,0,9316,9317,5,1213,0,0,9317,9322,3,1186,593,0,9318,9319,5,1208,
        0,0,9319,9321,3,1186,593,0,9320,9318,1,0,0,0,9321,9324,1,0,0,0,9322,
        9320,1,0,0,0,9322,9323,1,0,0,0,9323,9325,1,0,0,0,9324,9322,1,0,0,
        0,9325,9326,5,1214,0,0,9326,9328,1,0,0,0,9327,9315,1,0,0,0,9327,
        9316,1,0,0,0,9327,9328,1,0,0,0,9328,897,1,0,0,0,9329,9330,5,224,
        0,0,9330,9331,5,291,0,0,9331,9332,5,42,0,0,9332,9337,3,988,494,0,
        9333,9334,5,1208,0,0,9334,9336,3,988,494,0,9335,9333,1,0,0,0,9336,
        9339,1,0,0,0,9337,9335,1,0,0,0,9337,9338,1,0,0,0,9338,899,1,0,0,
        0,9339,9337,1,0,0,0,9340,9341,5,178,0,0,9341,9342,5,42,0,0,9342,
        9347,3,784,392,0,9343,9344,5,1208,0,0,9344,9346,3,784,392,0,9345,
        9343,1,0,0,0,9346,9349,1,0,0,0,9347,9345,1,0,0,0,9347,9348,1,0,0,
        0,9348,901,1,0,0,0,9349,9347,1,0,0,0,9350,9361,3,904,452,0,9351,
        9361,3,906,453,0,9352,9361,3,908,454,0,9353,9361,3,910,455,0,9354,
        9361,3,912,456,0,9355,9361,3,914,457,0,9356,9361,3,918,459,0,9357,
        9361,3,916,458,0,9358,9361,3,920,460,0,9359,9361,3,922,461,0,9360,
        9350,1,0,0,0,9360,9351,1,0,0,0,9360,9352,1,0,0,0,9360,9353,1,0,0,
        0,9360,9354,1,0,0,0,9360,9355,1,0,0,0,9360,9356,1,0,0,0,9360,9357,
        1,0,0,0,9360,9358,1,0,0,0,9360,9359,1,0,0,0,9361,9363,1,0,0,0,9362,
        9364,5,20,0,0,9363,9362,1,0,0,0,9363,9364,1,0,0,0,9364,9365,1,0,
        0,0,9365,9367,3,808,404,0,9366,9368,3,1182,591,0,9367,9366,1,0,0,
        0,9367,9368,1,0,0,0,9368,903,1,0,0,0,9369,9370,5,1057,0,0,9370,9372,
        5,1213,0,0,9371,9373,3,1128,564,0,9372,9371,1,0,0,0,9372,9373,1,
        0,0,0,9373,9374,1,0,0,0,9374,9376,3,996,498,0,9375,9377,3,1116,558,
        0,9376,9375,1,0,0,0,9376,9377,1,0,0,0,9377,9379,1,0,0,0,9378,9380,
        3,1132,566,0,9379,9378,1,0,0,0,9379,9380,1,0,0,0,9380,9381,1,0,0,
        0,9381,9382,5,1214,0,0,9382,905,1,0,0,0,9383,9385,3,1066,533,0,9384,
        9383,1,0,0,0,9384,9385,1,0,0,0,9385,9386,1,0,0,0,9386,9387,5,1149,
        0,0,9387,9388,5,1213,0,0,9388,9391,5,286,0,0,9389,9392,3,792,396,
        0,9390,9392,3,1184,592,0,9391,9389,1,0,0,0,9391,9390,1,0,0,0,9392,
        9403,1,0,0,0,9393,9394,5,178,0,0,9394,9395,5,42,0,0,9395,9400,3,
        996,498,0,9396,9397,5,1208,0,0,9397,9399,3,996,498,0,9398,9396,1,
        0,0,0,9399,9402,1,0,0,0,9400,9398,1,0,0,0,9400,9401,1,0,0,0,9401,
        9404,1,0,0,0,9402,9400,1,0,0,0,9403,9393,1,0,0,0,9403,9404,1,0,0,
        0,9404,9416,1,0,0,0,9405,9406,5,224,0,0,9406,9407,5,291,0,0,9407,
        9408,5,42,0,0,9408,9413,3,996,498,0,9409,9410,5,1208,0,0,9410,9412,
        3,996,498,0,9411,9409,1,0,0,0,9412,9415,1,0,0,0,9413,9411,1,0,0,
        0,9413,9414,1,0,0,0,9414,9417,1,0,0,0,9415,9413,1,0,0,0,9416,9405,
        1,0,0,0,9416,9417,1,0,0,0,9417,9418,1,0,0,0,9418,9419,5,457,0,0,
        9419,9420,5,1150,0,0,9420,9421,5,1213,0,0,9421,9422,3,758,379,0,
        9422,9428,5,1214,0,0,9423,9424,5,1151,0,0,9424,9425,5,1213,0,0,9425,
        9426,3,758,379,0,9426,9427,5,1214,0,0,9427,9429,1,0,0,0,9428,9423,
        1,0,0,0,9428,9429,1,0,0,0,9429,9435,1,0,0,0,9430,9431,5,1152,0,0,
        9431,9432,5,1213,0,0,9432,9433,3,758,379,0,9433,9434,5,1214,0,0,
        9434,9436,1,0,0,0,9435,9430,1,0,0,0,9435,9436,1,0,0,0,9436,9442,
        1,0,0,0,9437,9438,5,1153,0,0,9438,9439,5,1213,0,0,9439,9440,3,758,
        379,0,9440,9441,5,1214,0,0,9441,9443,1,0,0,0,9442,9437,1,0,0,0,9442,
        9443,1,0,0,0,9443,907,1,0,0,0,9444,9445,5,1154,0,0,9445,9446,5,1213,
        0,0,9446,9449,5,286,0,0,9447,9450,3,792,396,0,9448,9450,3,1184,592,
        0,9449,9447,1,0,0,0,9449,9448,1,0,0,0,9450,9451,1,0,0,0,9451,9452,
        5,457,0,0,9452,9453,5,1213,0,0,9453,9457,3,940,470,0,9454,9456,3,
        942,471,0,9455,9454,1,0,0,0,9456,9459,1,0,0,0,9457,9455,1,0,0,0,
        9457,9458,1,0,0,0,9458,9460,1,0,0,0,9459,9457,1,0,0,0,9460,9461,
        5,1214,0,0,9461,9462,5,1214,0,0,9462,909,1,0,0,0,9463,9464,5,906,
        0,0,9464,9465,5,1213,0,0,9465,9480,3,924,462,0,9466,9467,5,352,0,
        0,9467,9477,5,1213,0,0,9468,9478,5,1219,0,0,9469,9474,3,758,379,
        0,9470,9471,5,1208,0,0,9471,9473,3,758,379,0,9472,9470,1,0,0,0,9473,
        9476,1,0,0,0,9474,9472,1,0,0,0,9474,9475,1,0,0,0,9475,9478,1,0,0,
        0,9476,9474,1,0,0,0,9477,9468,1,0,0,0,9477,9469,1,0,0,0,9478,9479,
        1,0,0,0,9479,9481,5,1214,0,0,9480,9466,1,0,0,0,9480,9481,1,0,0,0,
        9481,9487,1,0,0,0,9482,9483,5,625,0,0,9483,9484,5,1213,0,0,9484,
        9485,3,758,379,0,9485,9486,5,1214,0,0,9486,9488,1,0,0,0,9487,9482,
        1,0,0,0,9487,9488,1,0,0,0,9488,9494,1,0,0,0,9489,9490,5,569,0,0,
        9490,9491,5,1213,0,0,9491,9492,3,758,379,0,9492,9493,5,1214,0,0,
        9493,9495,1,0,0,0,9494,9489,1,0,0,0,9494,9495,1,0,0,0,9495,9501,
        1,0,0,0,9496,9497,5,871,0,0,9497,9498,5,1213,0,0,9498,9499,3,758,
        379,0,9499,9500,5,1214,0,0,9500,9502,1,0,0,0,9501,9496,1,0,0,0,9501,
        9502,1,0,0,0,9502,9508,1,0,0,0,9503,9504,5,542,0,0,9504,9505,5,1213,
        0,0,9505,9506,3,790,395,0,9506,9507,5,1214,0,0,9507,9509,1,0,0,0,
        9508,9503,1,0,0,0,9508,9509,1,0,0,0,9509,9510,1,0,0,0,9510,9511,
        5,1214,0,0,9511,911,1,0,0,0,9512,9514,3,1066,533,0,9513,9512,1,0,
        0,0,9513,9514,1,0,0,0,9514,9515,1,0,0,0,9515,9516,5,1159,0,0,9516,
        9517,5,1213,0,0,9517,9520,5,286,0,0,9518,9521,3,792,396,0,9519,9521,
        3,1184,592,0,9520,9518,1,0,0,0,9520,9519,1,0,0,0,9521,9522,1,0,0,
        0,9522,9523,5,457,0,0,9523,9524,5,1160,0,0,9524,9525,5,1213,0,0,
        9525,9530,3,758,379,0,9526,9527,5,1208,0,0,9527,9529,3,758,379,0,
        9528,9526,1,0,0,0,9529,9532,1,0,0,0,9530,9528,1,0,0,0,9530,9531,
        1,0,0,0,9531,9533,1,0,0,0,9532,9530,1,0,0,0,9533,9534,5,1214,0,0,
        9534,9535,5,1161,0,0,9535,9536,5,1213,0,0,9536,9537,3,758,379,0,
        9537,9538,5,1214,0,0,9538,9539,5,1162,0,0,9539,9540,5,1213,0,0,9540,
        9545,3,758,379,0,9541,9542,5,1208,0,0,9542,9544,3,758,379,0,9543,
        9541,1,0,0,0,9544,9547,1,0,0,0,9545,9543,1,0,0,0,9545,9546,1,0,0,
        0,9546,9548,1,0,0,0,9547,9545,1,0,0,0,9548,9565,5,1214,0,0,9549,
        9550,5,1163,0,0,9550,9551,5,1213,0,0,9551,9556,3,758,379,0,9552,
        9553,5,1208,0,0,9553,9555,3,758,379,0,9554,9552,1,0,0,0,9555,9558,
        1,0,0,0,9556,9554,1,0,0,0,9556,9557,1,0,0,0,9557,9559,1,0,0,0,9558,
        9556,1,0,0,0,9559,9560,5,1214,0,0,9560,9561,5,1164,0,0,9561,9562,
        5,1213,0,0,9562,9563,3,758,379,0,9563,9564,5,1214,0,0,9564,9566,
        1,0,0,0,9565,9549,1,0,0,0,9565,9566,1,0,0,0,9566,913,1,0,0,0,9567,
        9568,5,1165,0,0,9568,9569,5,1213,0,0,9569,9570,3,924,462,0,9570,
        9571,5,457,0,0,9571,9572,5,1213,0,0,9572,9576,3,940,470,0,9573,9575,
        3,944,472,0,9574,9573,1,0,0,0,9575,9578,1,0,0,0,9576,9574,1,0,0,
        0,9576,9577,1,0,0,0,9577,9579,1,0,0,0,9578,9576,1,0,0,0,9579,9580,
        5,1214,0,0,9580,9581,5,1214,0,0,9581,915,1,0,0,0,9582,9584,3,1066,
        533,0,9583,9582,1,0,0,0,9583,9584,1,0,0,0,9584,9585,1,0,0,0,9585,
        9586,5,1184,0,0,9586,9587,5,1213,0,0,9587,9588,5,286,0,0,9588,9589,
        3,1184,592,0,9589,9590,5,457,0,0,9590,9591,5,1187,0,0,9591,9592,
        5,1213,0,0,9592,9593,3,758,379,0,9593,9594,5,1214,0,0,9594,9595,
        5,1188,0,0,9595,9596,5,1213,0,0,9596,9597,3,758,379,0,9597,9598,
        5,1214,0,0,9598,9599,5,1214,0,0,9599,917,1,0,0,0,9600,9602,3,1066,
        533,0,9601,9600,1,0,0,0,9601,9602,1,0,0,0,9602,9603,1,0,0,0,9603,
        9604,5,1183,0,0,9604,9605,5,1213,0,0,9605,9606,5,286,0,0,9606,9613,
        3,1184,592,0,9607,9609,5,457,0,0,9608,9610,3,934,467,0,9609,9608,
        1,0,0,0,9610,9611,1,0,0,0,9611,9609,1,0,0,0,9611,9612,1,0,0,0,9612,
        9614,1,0,0,0,9613,9607,1,0,0,0,9613,9614,1,0,0,0,9614,9615,1,0,0,
        0,9615,9616,5,1214,0,0,9616,919,1,0,0,0,9617,9619,3,1066,533,0,9618,
        9617,1,0,0,0,9618,9619,1,0,0,0,9619,9620,1,0,0,0,9620,9621,5,1182,
        0,0,9621,9622,5,1213,0,0,9622,9623,5,286,0,0,9623,9624,3,1184,592,
        0,9624,9625,5,457,0,0,9625,9626,5,1187,0,0,9626,9627,5,1213,0,0,
        9627,9628,3,758,379,0,9628,9629,5,1214,0,0,9629,9630,5,1188,0,0,
        9630,9631,5,1213,0,0,9631,9636,3,758,379,0,9632,9633,5,1208,0,0,
        9633,9635,3,758,379,0,9634,9632,1,0,0,0,9635,9638,1,0,0,0,9636,9634,
        1,0,0,0,9636,9637,1,0,0,0,9637,9639,1,0,0,0,9638,9636,1,0,0,0,9639,
        9640,5,1214,0,0,9640,9641,5,1189,0,0,9641,9642,5,1213,0,0,9642,9647,
        3,758,379,0,9643,9644,5,1208,0,0,9644,9646,3,758,379,0,9645,9643,
        1,0,0,0,9646,9649,1,0,0,0,9647,9645,1,0,0,0,9647,9648,1,0,0,0,9648,
        9650,1,0,0,0,9649,9647,1,0,0,0,9650,9656,5,1214,0,0,9651,9652,5,
        1190,0,0,9652,9653,5,1213,0,0,9653,9654,3,764,382,0,9654,9655,5,
        1214,0,0,9655,9657,1,0,0,0,9656,9651,1,0,0,0,9656,9657,1,0,0,0,9657,
        9663,1,0,0,0,9658,9659,5,1191,0,0,9659,9660,5,1213,0,0,9660,9661,
        3,764,382,0,9661,9662,5,1214,0,0,9662,9664,1,0,0,0,9663,9658,1,0,
        0,0,9663,9664,1,0,0,0,9664,9665,1,0,0,0,9665,9666,5,1214,0,0,9666,
        921,1,0,0,0,9667,9668,3,792,396,0,9668,9672,5,1213,0,0,9669,9671,
        3,924,462,0,9670,9669,1,0,0,0,9671,9674,1,0,0,0,9672,9670,1,0,0,
        0,9672,9673,1,0,0,0,9673,9676,1,0,0,0,9674,9672,1,0,0,0,9675,9677,
        3,926,463,0,9676,9675,1,0,0,0,9676,9677,1,0,0,0,9677,9681,1,0,0,
        0,9678,9680,3,928,464,0,9679,9678,1,0,0,0,9680,9683,1,0,0,0,9681,
        9679,1,0,0,0,9681,9682,1,0,0,0,9682,9685,1,0,0,0,9683,9681,1,0,0,
        0,9684,9686,3,930,465,0,9685,9684,1,0,0,0,9685,9686,1,0,0,0,9686,
        9687,1,0,0,0,9687,9688,5,1214,0,0,9688,923,1,0,0,0,9689,9692,5,286,
        0,0,9690,9693,3,792,396,0,9691,9693,3,1184,592,0,9692,9690,1,0,0,
        0,9692,9691,1,0,0,0,9693,9696,1,0,0,0,9694,9695,5,20,0,0,9695,9697,
        3,808,404,0,9696,9694,1,0,0,0,9696,9697,1,0,0,0,9697,9700,1,0,0,
        0,9698,9701,3,936,468,0,9699,9701,5,635,0,0,9700,9698,1,0,0,0,9700,
        9699,1,0,0,0,9700,9701,1,0,0,0,9701,9715,1,0,0,0,9702,9704,5,224,
        0,0,9703,9702,1,0,0,0,9703,9704,1,0,0,0,9704,9705,1,0,0,0,9705,9706,
        5,291,0,0,9706,9707,5,42,0,0,9707,9712,3,988,494,0,9708,9709,5,1208,
        0,0,9709,9711,3,988,494,0,9710,9708,1,0,0,0,9711,9714,1,0,0,0,9712,
        9710,1,0,0,0,9712,9713,1,0,0,0,9713,9716,1,0,0,0,9714,9712,1,0,0,
        0,9715,9703,1,0,0,0,9715,9716,1,0,0,0,9716,925,1,0,0,0,9717,9718,
        5,144,0,0,9718,9719,5,236,0,0,9719,9720,5,1224,0,0,9720,9725,3,758,
        379,0,9721,9722,5,577,0,0,9722,9723,5,457,0,0,9723,9724,5,1224,0,
        0,9724,9726,3,758,379,0,9725,9721,1,0,0,0,9725,9726,1,0,0,0,9726,
        927,1,0,0,0,9727,9728,5,293,0,0,9728,9729,5,406,0,0,9729,9730,3,
        788,394,0,9730,9731,5,1213,0,0,9731,9732,3,792,396,0,9732,9733,5,
        1214,0,0,9733,929,1,0,0,0,9734,9736,5,457,0,0,9735,9737,3,932,466,
        0,9736,9735,1,0,0,0,9737,9738,1,0,0,0,9738,9736,1,0,0,0,9738,9739,
        1,0,0,0,9739,931,1,0,0,0,9740,9743,3,788,394,0,9741,9744,3,1180,
        590,0,9742,9744,3,1184,592,0,9743,9741,1,0,0,0,9743,9742,1,0,0,0,
        9744,933,1,0,0,0,9745,9746,7,82,0,0,9746,9747,5,1213,0,0,9747,9748,
        3,996,498,0,9748,9749,5,1214,0,0,9749,935,1,0,0,0,9750,9751,7,83,
        0,0,9751,9752,5,42,0,0,9752,9757,3,996,498,0,9753,9754,5,1208,0,
        0,9754,9756,3,996,498,0,9755,9753,1,0,0,0,9756,9759,1,0,0,0,9757,
        9755,1,0,0,0,9757,9758,1,0,0,0,9758,9764,1,0,0,0,9759,9757,1,0,0,
        0,9760,9761,5,840,0,0,9761,9762,5,42,0,0,9762,9764,5,18,0,0,9763,
        9750,1,0,0,0,9763,9760,1,0,0,0,9764,937,1,0,0,0,9765,9767,3,1184,
        592,0,9766,9768,5,20,0,0,9767,9766,1,0,0,0,9767,9768,1,0,0,0,9768,
        9769,1,0,0,0,9769,9771,3,808,404,0,9770,9772,3,1182,591,0,9771,9770,
        1,0,0,0,9771,9772,1,0,0,0,9772,939,1,0,0,0,9773,9774,5,1128,0,0,
        9774,9775,5,1213,0,0,9775,9776,5,1203,0,0,9776,9777,5,1214,0,0,9777,
        941,1,0,0,0,9778,9779,5,29,0,0,9779,9782,5,1213,0,0,9780,9783,3,
        790,395,0,9781,9783,3,758,379,0,9782,9780,1,0,0,0,9782,9781,1,0,
        0,0,9783,9784,1,0,0,0,9784,9785,5,1214,0,0,9785,9827,1,0,0,0,9786,
        9787,5,1155,0,0,9787,9788,5,1213,0,0,9788,9789,3,758,379,0,9789,
        9790,5,1214,0,0,9790,9827,1,0,0,0,9791,9792,5,1156,0,0,9792,9793,
        5,1213,0,0,9793,9794,3,758,379,0,9794,9795,5,1214,0,0,9795,9827,
        1,0,0,0,9796,9797,5,1157,0,0,9797,9798,5,1213,0,0,9798,9799,3,758,
        379,0,9799,9800,5,1214,0,0,9800,9827,1,0,0,0,9801,9802,5,1134,0,
        0,9802,9803,5,1213,0,0,9803,9804,3,758,379,0,9804,9805,5,1214,0,
        0,9805,9827,1,0,0,0,9806,9807,5,1158,0,0,9807,9808,5,1213,0,0,9808,
        9809,3,758,379,0,9809,9810,5,1214,0,0,9810,9827,1,0,0,0,9811,9812,
        5,1132,0,0,9812,9813,5,1213,0,0,9813,9814,3,758,379,0,9814,9815,
        5,1214,0,0,9815,9827,1,0,0,0,9816,9817,5,1133,0,0,9817,9818,5,1213,
        0,0,9818,9819,3,758,379,0,9819,9820,5,1214,0,0,9820,9827,1,0,0,0,
        9821,9822,5,1135,0,0,9822,9823,5,1213,0,0,9823,9824,3,758,379,0,
        9824,9825,5,1214,0,0,9825,9827,1,0,0,0,9826,9778,1,0,0,0,9826,9786,
        1,0,0,0,9826,9791,1,0,0,0,9826,9796,1,0,0,0,9826,9801,1,0,0,0,9826,
        9806,1,0,0,0,9826,9811,1,0,0,0,9826,9816,1,0,0,0,9826,9821,1,0,0,
        0,9827,943,1,0,0,0,9828,9829,5,29,0,0,9829,9832,5,1213,0,0,9830,
        9833,3,790,395,0,9831,9833,3,758,379,0,9832,9830,1,0,0,0,9832,9831,
        1,0,0,0,9833,9834,1,0,0,0,9834,9835,5,1214,0,0,9835,9882,1,0,0,0,
        9836,9837,5,1134,0,0,9837,9838,5,1213,0,0,9838,9839,3,758,379,0,
        9839,9840,5,1214,0,0,9840,9882,1,0,0,0,9841,9842,5,1166,0,0,9842,
        9843,5,1213,0,0,9843,9844,3,758,379,0,9844,9845,5,1214,0,0,9845,
        9882,1,0,0,0,9846,9847,5,1167,0,0,9847,9848,5,1213,0,0,9848,9849,
        3,758,379,0,9849,9850,5,1214,0,0,9850,9882,1,0,0,0,9851,9852,5,1168,
        0,0,9852,9853,5,1213,0,0,9853,9854,3,758,379,0,9854,9855,5,1214,
        0,0,9855,9882,1,0,0,0,9856,9857,5,1169,0,0,9857,9858,5,1213,0,0,
        9858,9859,3,758,379,0,9859,9860,5,1214,0,0,9860,9882,1,0,0,0,9861,
        9862,5,1170,0,0,9862,9863,5,1213,0,0,9863,9864,3,758,379,0,9864,
        9865,5,1214,0,0,9865,9882,1,0,0,0,9866,9867,5,1171,0,0,9867,9868,
        5,1213,0,0,9868,9869,3,758,379,0,9869,9870,5,1214,0,0,9870,9882,
        1,0,0,0,9871,9872,5,1172,0,0,9872,9873,5,1213,0,0,9873,9874,3,758,
        379,0,9874,9875,5,1214,0,0,9875,9882,1,0,0,0,9876,9877,5,1173,0,
        0,9877,9878,5,1213,0,0,9878,9879,3,758,379,0,9879,9880,5,1214,0,
        0,9880,9882,1,0,0,0,9881,9828,1,0,0,0,9881,9836,1,0,0,0,9881,9841,
        1,0,0,0,9881,9846,1,0,0,0,9881,9851,1,0,0,0,9881,9856,1,0,0,0,9881,
        9861,1,0,0,0,9881,9866,1,0,0,0,9881,9871,1,0,0,0,9881,9876,1,0,0,
        0,9882,945,1,0,0,0,9883,9884,5,474,0,0,9884,9886,3,996,498,0,9885,
        9887,3,950,475,0,9886,9885,1,0,0,0,9886,9887,1,0,0,0,9887,9895,1,
        0,0,0,9888,9889,5,1208,0,0,9889,9891,3,996,498,0,9890,9892,3,950,
        475,0,9891,9890,1,0,0,0,9891,9892,1,0,0,0,9892,9894,1,0,0,0,9893,
        9888,1,0,0,0,9894,9897,1,0,0,0,9895,9893,1,0,0,0,9895,9896,1,0,0,
        0,9896,9899,1,0,0,0,9897,9895,1,0,0,0,9898,9900,3,948,474,0,9899,
        9898,1,0,0,0,9899,9900,1,0,0,0,9900,947,1,0,0,0,9901,9902,5,42,0,
        0,9902,9907,3,990,495,0,9903,9904,5,1208,0,0,9904,9906,3,990,495,
        0,9905,9903,1,0,0,0,9906,9909,1,0,0,0,9907,9905,1,0,0,0,9907,9908,
        1,0,0,0,9908,949,1,0,0,0,9909,9907,1,0,0,0,9910,9911,5,1213,0,0,
        9911,9912,5,425,0,0,9912,9913,3,758,379,0,9913,9914,5,1214,0,0,9914,
        951,1,0,0,0,9915,9916,5,471,0,0,9916,9917,3,994,497,0,9917,953,1,
        0,0,0,9918,9919,5,174,0,0,9919,9920,5,42,0,0,9920,9931,3,956,478,
        0,9921,9922,5,174,0,0,9922,9923,5,42,0,0,9923,9926,3,956,478,0,9924,
        9925,5,1208,0,0,9925,9927,3,956,478,0,9926,9924,1,0,0,0,9927,9928,
        1,0,0,0,9928,9926,1,0,0,0,9928,9929,1,0,0,0,9929,9931,1,0,0,0,9930,
        9918,1,0,0,0,9930,9921,1,0,0,0,9931,955,1,0,0,0,9932,9937,3,958,
        479,0,9933,9937,3,964,482,0,9934,9937,3,966,483,0,9935,9937,3,968,
        484,0,9936,9932,1,0,0,0,9936,9933,1,0,0,0,9936,9934,1,0,0,0,9936,
        9935,1,0,0,0,9937,957,1,0,0,0,9938,9941,3,996,498,0,9939,9941,3,
        960,480,0,9940,9938,1,0,0,0,9940,9939,1,0,0,0,9941,9949,1,0,0,0,
        9942,9945,5,1208,0,0,9943,9946,3,996,498,0,9944,9946,3,960,480,0,
        9945,9943,1,0,0,0,9945,9944,1,0,0,0,9946,9948,1,0,0,0,9947,9942,
        1,0,0,0,9948,9951,1,0,0,0,9949,9947,1,0,0,0,9949,9950,1,0,0,0,9950,
        959,1,0,0,0,9951,9949,1,0,0,0,9952,9953,5,1213,0,0,9953,9956,3,996,
        498,0,9954,9955,5,1208,0,0,9955,9957,3,996,498,0,9956,9954,1,0,0,
        0,9957,9958,1,0,0,0,9958,9956,1,0,0,0,9958,9959,1,0,0,0,9959,9960,
        1,0,0,0,9960,9961,5,1214,0,0,9961,961,1,0,0,0,9962,9963,5,1213,0,
        0,9963,9964,5,1214,0,0,9964,963,1,0,0,0,9965,9966,5,360,0,0,9966,
        9967,5,1213,0,0,9967,9968,3,958,479,0,9968,9969,5,1214,0,0,9969,
        965,1,0,0,0,9970,9971,5,92,0,0,9971,9972,5,1213,0,0,9972,9973,3,
        958,479,0,9973,9974,5,1214,0,0,9974,967,1,0,0,0,9975,9976,5,175,
        0,0,9976,9977,5,374,0,0,9977,9978,5,1213,0,0,9978,9983,3,970,485,
        0,9979,9980,5,1208,0,0,9980,9982,3,970,485,0,9981,9979,1,0,0,0,9982,
        9985,1,0,0,0,9983,9981,1,0,0,0,9983,9984,1,0,0,0,9984,9986,1,0,0,
        0,9985,9983,1,0,0,0,9986,9987,5,1214,0,0,9987,969,1,0,0,0,9988,9994,
        3,958,479,0,9989,9994,3,962,481,0,9990,9994,3,964,482,0,9991,9994,
        3,966,483,0,9992,9994,3,968,484,0,9993,9988,1,0,0,0,9993,9989,1,
        0,0,0,9993,9990,1,0,0,0,9993,9991,1,0,0,0,9993,9992,1,0,0,0,9994,
        971,1,0,0,0,9995,9996,5,183,0,0,9996,9997,3,994,497,0,9997,973,1,
        0,0,0,9998,9999,5,315,0,0,9999,10000,3,994,497,0,10000,975,1,0,0,
        0,10001,10004,5,365,0,0,10002,10003,5,474,0,0,10003,10005,5,883,
        0,0,10004,10002,1,0,0,0,10004,10005,1,0,0,0,10005,10008,1,0,0,0,
        10006,10007,5,872,0,0,10007,10009,5,498,0,0,10008,10006,1,0,0,0,
        10008,10009,1,0,0,0,10009,10013,1,0,0,0,10010,10014,3,978,489,0,
        10011,10014,3,980,490,0,10012,10014,3,982,491,0,10013,10010,1,0,
        0,0,10013,10011,1,0,0,0,10013,10012,1,0,0,0,10014,977,1,0,0,0,10015,
        10020,3,768,384,0,10016,10017,5,1208,0,0,10017,10019,3,768,384,0,
        10018,10016,1,0,0,0,10019,10022,1,0,0,0,10020,10018,1,0,0,0,10020,
        10021,1,0,0,0,10021,979,1,0,0,0,10022,10020,1,0,0,0,10023,10028,
        3,764,382,0,10024,10025,5,1208,0,0,10025,10027,3,764,382,0,10026,
        10024,1,0,0,0,10027,10030,1,0,0,0,10028,10026,1,0,0,0,10028,10029,
        1,0,0,0,10029,981,1,0,0,0,10030,10028,1,0,0,0,10031,10032,5,470,
        0,0,10032,10033,3,994,497,0,10033,10036,5,419,0,0,10034,10037,3,
        978,489,0,10035,10037,3,980,490,0,10036,10034,1,0,0,0,10036,10035,
        1,0,0,0,10037,10039,1,0,0,0,10038,10031,1,0,0,0,10039,10040,1,0,
        0,0,10040,10038,1,0,0,0,10040,10041,1,0,0,0,10041,10047,1,0,0,0,
        10042,10045,5,131,0,0,10043,10046,3,978,489,0,10044,10046,3,980,
        490,0,10045,10043,1,0,0,0,10045,10044,1,0,0,0,10046,10048,1,0,0,
        0,10047,10042,1,0,0,0,10047,10048,1,0,0,0,10048,10049,1,0,0,0,10049,
        10050,5,134,0,0,10050,983,1,0,0,0,10051,10052,5,148,0,0,10052,10053,
        5,286,0,0,10053,10055,3,996,498,0,10054,10056,5,20,0,0,10055,10054,
        1,0,0,0,10055,10056,1,0,0,0,10056,10057,1,0,0,0,10057,10071,3,808,
        404,0,10058,10069,5,42,0,0,10059,10070,3,778,389,0,10060,10062,5,
        505,0,0,10061,10063,5,853,0,0,10062,10061,1,0,0,0,10062,10063,1,
        0,0,0,10063,10064,1,0,0,0,10064,10067,3,830,415,0,10065,10066,5,
        24,0,0,10066,10068,3,774,387,0,10067,10065,1,0,0,0,10067,10068,1,
        0,0,0,10068,10070,1,0,0,0,10069,10059,1,0,0,0,10069,10060,1,0,0,
        0,10070,10072,1,0,0,0,10071,10058,1,0,0,0,10071,10072,1,0,0,0,10072,
        10075,1,0,0,0,10073,10074,5,159,0,0,10074,10076,3,996,498,0,10075,
        10073,1,0,0,0,10075,10076,1,0,0,0,10076,985,1,0,0,0,10077,10078,
        5,291,0,0,10078,10079,5,42,0,0,10079,10084,3,988,494,0,10080,10081,
        5,1208,0,0,10081,10083,3,988,494,0,10082,10080,1,0,0,0,10083,10086,
        1,0,0,0,10084,10082,1,0,0,0,10084,10085,1,0,0,0,10085,987,1,0,0,
        0,10086,10084,1,0,0,0,10087,10089,3,996,498,0,10088,10090,7,84,0,
        0,10089,10088,1,0,0,0,10089,10090,1,0,0,0,10090,10093,1,0,0,0,10091,
        10092,5,806,0,0,10092,10094,7,85,0,0,10093,10091,1,0,0,0,10093,10094,
        1,0,0,0,10094,989,1,0,0,0,10095,10097,3,996,498,0,10096,10098,7,
        84,0,0,10097,10096,1,0,0,0,10097,10098,1,0,0,0,10098,991,1,0,0,0,
        10099,10100,5,474,0,0,10100,10101,5,59,0,0,10101,10102,5,289,0,0,
        10102,993,1,0,0,0,10103,10104,6,497,-1,0,10104,10105,3,996,498,0,
        10105,10106,3,1196,598,0,10106,10107,3,996,498,0,10107,10350,1,0,
        0,0,10108,10109,3,996,498,0,10109,10110,3,1196,598,0,10110,10111,
        3,1198,599,0,10111,10115,3,1176,588,0,10112,10114,3,1076,538,0,10113,
        10112,1,0,0,0,10114,10117,1,0,0,0,10115,10113,1,0,0,0,10115,10116,
        1,0,0,0,10116,10350,1,0,0,0,10117,10115,1,0,0,0,10118,10119,3,998,
        499,0,10119,10120,3,1196,598,0,10120,10121,3,1198,599,0,10121,10125,
        3,1176,588,0,10122,10124,3,1076,538,0,10123,10122,1,0,0,0,10124,
        10127,1,0,0,0,10125,10123,1,0,0,0,10125,10126,1,0,0,0,10126,10350,
        1,0,0,0,10127,10125,1,0,0,0,10128,10130,3,996,498,0,10129,10131,
        7,73,0,0,10130,10129,1,0,0,0,10130,10131,1,0,0,0,10131,10132,1,0,
        0,0,10132,10133,5,35,0,0,10133,10134,3,996,498,0,10134,10135,5,16,
        0,0,10135,10136,3,996,498,0,10136,10350,1,0,0,0,10137,10139,3,996,
        498,0,10138,10140,5,207,0,0,10139,10138,1,0,0,0,10139,10140,1,0,
        0,0,10140,10142,1,0,0,0,10141,10143,7,73,0,0,10142,10141,1,0,0,0,
        10142,10143,1,0,0,0,10143,10144,1,0,0,0,10144,10146,5,190,0,0,10145,
        10147,3,1198,599,0,10146,10145,1,0,0,0,10146,10147,1,0,0,0,10147,
        10148,1,0,0,0,10148,10152,3,1178,589,0,10149,10151,3,1076,538,0,
        10150,10149,1,0,0,0,10151,10154,1,0,0,0,10152,10150,1,0,0,0,10152,
        10153,1,0,0,0,10153,10350,1,0,0,0,10154,10152,1,0,0,0,10155,10157,
        3,996,498,0,10156,10158,5,207,0,0,10157,10156,1,0,0,0,10157,10158,
        1,0,0,0,10158,10160,1,0,0,0,10159,10161,7,73,0,0,10160,10159,1,0,
        0,0,10160,10161,1,0,0,0,10161,10162,1,0,0,0,10162,10164,5,190,0,
        0,10163,10165,3,1198,599,0,10164,10163,1,0,0,0,10164,10165,1,0,0,
        0,10165,10166,1,0,0,0,10166,10170,3,1184,592,0,10167,10169,3,1076,
        538,0,10168,10167,1,0,0,0,10169,10172,1,0,0,0,10170,10168,1,0,0,
        0,10170,10171,1,0,0,0,10171,10350,1,0,0,0,10172,10170,1,0,0,0,10173,
        10175,3,996,498,0,10174,10176,5,207,0,0,10175,10174,1,0,0,0,10175,
        10176,1,0,0,0,10176,10178,1,0,0,0,10177,10179,7,73,0,0,10178,10177,
        1,0,0,0,10178,10179,1,0,0,0,10179,10180,1,0,0,0,10180,10182,5,190,
        0,0,10181,10183,3,1198,599,0,10182,10181,1,0,0,0,10182,10183,1,0,
        0,0,10183,10184,1,0,0,0,10184,10188,3,996,498,0,10185,10187,3,1076,
        538,0,10186,10185,1,0,0,0,10187,10190,1,0,0,0,10188,10186,1,0,0,
        0,10188,10189,1,0,0,0,10189,10350,1,0,0,0,10190,10188,1,0,0,0,10191,
        10193,3,998,499,0,10192,10194,5,207,0,0,10193,10192,1,0,0,0,10193,
        10194,1,0,0,0,10194,10196,1,0,0,0,10195,10197,7,73,0,0,10196,10195,
        1,0,0,0,10196,10197,1,0,0,0,10197,10198,1,0,0,0,10198,10200,5,190,
        0,0,10199,10201,3,1198,599,0,10200,10199,1,0,0,0,10200,10201,1,0,
        0,0,10201,10202,1,0,0,0,10202,10206,3,1184,592,0,10203,10205,3,1076,
        538,0,10204,10203,1,0,0,0,10205,10208,1,0,0,0,10206,10204,1,0,0,
        0,10206,10207,1,0,0,0,10207,10350,1,0,0,0,10208,10206,1,0,0,0,10209,
        10211,3,996,498,0,10210,10212,7,73,0,0,10211,10210,1,0,0,0,10211,
        10212,1,0,0,0,10212,10213,1,0,0,0,10213,10214,5,220,0,0,10214,10217,
        3,996,498,0,10215,10216,5,140,0,0,10216,10218,3,996,498,0,10217,
        10215,1,0,0,0,10217,10218,1,0,0,0,10218,10350,1,0,0,0,10219,10221,
        3,996,498,0,10220,10222,7,73,0,0,10221,10220,1,0,0,0,10221,10222,
        1,0,0,0,10222,10223,1,0,0,0,10223,10224,5,220,0,0,10224,10225,3,
        1198,599,0,10225,10229,3,1176,588,0,10226,10228,3,1076,538,0,10227,
        10226,1,0,0,0,10228,10231,1,0,0,0,10229,10227,1,0,0,0,10229,10230,
        1,0,0,0,10230,10234,1,0,0,0,10231,10229,1,0,0,0,10232,10233,5,140,
        0,0,10233,10235,3,996,498,0,10234,10232,1,0,0,0,10234,10235,1,0,
        0,0,10235,10239,1,0,0,0,10236,10238,3,1076,538,0,10237,10236,1,0,
        0,0,10238,10241,1,0,0,0,10239,10237,1,0,0,0,10239,10240,1,0,0,0,
        10240,10350,1,0,0,0,10241,10239,1,0,0,0,10242,10244,3,998,499,0,
        10243,10245,7,73,0,0,10244,10243,1,0,0,0,10244,10245,1,0,0,0,10245,
        10246,1,0,0,0,10246,10247,5,220,0,0,10247,10248,3,1198,599,0,10248,
        10252,3,1176,588,0,10249,10251,3,1076,538,0,10250,10249,1,0,0,0,
        10251,10254,1,0,0,0,10252,10250,1,0,0,0,10252,10253,1,0,0,0,10253,
        10257,1,0,0,0,10254,10252,1,0,0,0,10255,10256,5,140,0,0,10256,10258,
        3,996,498,0,10257,10255,1,0,0,0,10257,10258,1,0,0,0,10258,10262,
        1,0,0,0,10259,10261,3,1076,538,0,10260,10259,1,0,0,0,10261,10264,
        1,0,0,0,10262,10260,1,0,0,0,10262,10263,1,0,0,0,10263,10350,1,0,
        0,0,10264,10262,1,0,0,0,10265,10267,7,73,0,0,10266,10265,1,0,0,0,
        10266,10267,1,0,0,0,10267,10268,1,0,0,0,10268,10269,5,145,0,0,10269,
        10350,3,1184,592,0,10270,10271,7,73,0,0,10271,10350,3,994,497,13,
        10272,10273,3,996,498,0,10273,10275,5,207,0,0,10274,10276,7,73,0,
        0,10275,10274,1,0,0,0,10275,10276,1,0,0,0,10276,10277,1,0,0,0,10277,
        10278,5,274,0,0,10278,10350,1,0,0,0,10279,10281,3,996,498,0,10280,
        10282,7,73,0,0,10281,10280,1,0,0,0,10281,10282,1,0,0,0,10282,10283,
        1,0,0,0,10283,10284,5,77,0,0,10284,10285,3,996,498,0,10285,10350,
        1,0,0,0,10286,10288,3,996,498,0,10287,10289,7,73,0,0,10288,10287,
        1,0,0,0,10288,10289,1,0,0,0,10289,10290,1,0,0,0,10290,10291,5,136,
        0,0,10291,10292,3,996,498,0,10292,10350,1,0,0,0,10293,10295,3,996,
        498,0,10294,10296,7,73,0,0,10295,10294,1,0,0,0,10295,10296,1,0,0,
        0,10296,10297,1,0,0,0,10297,10298,5,765,0,0,10298,10299,3,996,498,
        0,10299,10350,1,0,0,0,10300,10302,3,996,498,0,10301,10303,7,73,0,
        0,10302,10301,1,0,0,0,10302,10303,1,0,0,0,10303,10304,1,0,0,0,10304,
        10305,5,857,0,0,10305,10306,3,996,498,0,10306,10350,1,0,0,0,10307,
        10309,3,996,498,0,10308,10310,7,73,0,0,10309,10308,1,0,0,0,10309,
        10310,1,0,0,0,10310,10311,1,0,0,0,10311,10312,5,947,0,0,10312,10313,
        3,996,498,0,10313,10350,1,0,0,0,10314,10315,3,996,498,0,10315,10316,
        5,698,0,0,10316,10317,5,857,0,0,10317,10318,3,996,498,0,10318,10350,
        1,0,0,0,10319,10320,3,996,498,0,10320,10321,5,698,0,0,10321,10322,
        5,947,0,0,10322,10323,3,996,498,0,10323,10350,1,0,0,0,10324,10333,
        3,996,498,0,10325,10326,5,1213,0,0,10326,10327,3,996,498,0,10327,
        10328,5,1208,0,0,10328,10329,3,996,498,0,10329,10330,5,1214,0,0,
        10330,10333,1,0,0,0,10331,10333,3,1184,592,0,10332,10324,1,0,0,0,
        10332,10325,1,0,0,0,10332,10331,1,0,0,0,10333,10334,1,0,0,0,10334,
        10343,5,296,0,0,10335,10344,3,996,498,0,10336,10337,5,1213,0,0,10337,
        10338,3,996,498,0,10338,10339,5,1208,0,0,10339,10340,3,996,498,0,
        10340,10341,5,1214,0,0,10341,10344,1,0,0,0,10342,10344,3,1184,592,
        0,10343,10335,1,0,0,0,10343,10336,1,0,0,0,10343,10342,1,0,0,0,10344,
        10350,1,0,0,0,10345,10346,5,1213,0,0,10346,10347,3,994,497,0,10347,
        10348,5,1214,0,0,10348,10350,1,0,0,0,10349,10103,1,0,0,0,10349,10108,
        1,0,0,0,10349,10118,1,0,0,0,10349,10128,1,0,0,0,10349,10137,1,0,
        0,0,10349,10155,1,0,0,0,10349,10173,1,0,0,0,10349,10191,1,0,0,0,
        10349,10209,1,0,0,0,10349,10219,1,0,0,0,10349,10242,1,0,0,0,10349,
        10266,1,0,0,0,10349,10270,1,0,0,0,10349,10272,1,0,0,0,10349,10279,
        1,0,0,0,10349,10286,1,0,0,0,10349,10293,1,0,0,0,10349,10300,1,0,
        0,0,10349,10307,1,0,0,0,10349,10314,1,0,0,0,10349,10319,1,0,0,0,
        10349,10332,1,0,0,0,10349,10345,1,0,0,0,10350,10359,1,0,0,0,10351,
        10352,10,12,0,0,10352,10353,5,16,0,0,10353,10358,3,994,497,13,10354,
        10355,10,11,0,0,10355,10356,5,290,0,0,10356,10358,3,994,497,12,10357,
        10351,1,0,0,0,10357,10354,1,0,0,0,10358,10361,1,0,0,0,10359,10357,
        1,0,0,0,10359,10360,1,0,0,0,10360,995,1,0,0,0,10361,10359,1,0,0,
        0,10362,10363,6,498,-1,0,10363,10439,3,754,377,0,10364,10365,7,1,
        0,0,10365,10439,3,996,498,70,10366,10439,3,1002,501,0,10367,10439,
        3,1064,532,0,10368,10439,3,784,392,0,10369,10439,3,1014,507,0,10370,
        10439,3,1188,594,0,10371,10439,3,1190,595,0,10372,10439,3,1192,596,
        0,10373,10375,5,265,0,0,10374,10376,3,718,359,0,10375,10374,1,0,
        0,0,10375,10376,1,0,0,0,10376,10377,1,0,0,0,10377,10378,3,824,412,
        0,10378,10387,5,1213,0,0,10379,10384,3,996,498,0,10380,10381,5,1208,
        0,0,10381,10383,3,996,498,0,10382,10380,1,0,0,0,10383,10386,1,0,
        0,0,10384,10382,1,0,0,0,10384,10385,1,0,0,0,10385,10388,1,0,0,0,
        10386,10384,1,0,0,0,10387,10379,1,0,0,0,10387,10388,1,0,0,0,10388,
        10389,1,0,0,0,10389,10390,5,1214,0,0,10390,10439,1,0,0,0,10391,10392,
        5,265,0,0,10392,10393,5,720,0,0,10393,10394,5,1213,0,0,10394,10397,
        3,996,498,0,10395,10396,5,1208,0,0,10396,10398,7,86,0,0,10397,10395,
        1,0,0,0,10397,10398,1,0,0,0,10398,10399,1,0,0,0,10399,10400,5,1214,
        0,0,10400,10439,1,0,0,0,10401,10402,5,265,0,0,10402,10403,5,466,
        0,0,10403,10404,5,1213,0,0,10404,10409,3,996,498,0,10405,10407,5,
        20,0,0,10406,10405,1,0,0,0,10406,10407,1,0,0,0,10407,10408,1,0,0,
        0,10408,10410,3,808,404,0,10409,10406,1,0,0,0,10409,10410,1,0,0,
        0,10410,10421,1,0,0,0,10411,10412,5,1208,0,0,10412,10417,3,996,498,
        0,10413,10415,5,20,0,0,10414,10413,1,0,0,0,10414,10415,1,0,0,0,10415,
        10416,1,0,0,0,10416,10418,3,808,404,0,10417,10414,1,0,0,0,10417,
        10418,1,0,0,0,10418,10420,1,0,0,0,10419,10411,1,0,0,0,10420,10423,
        1,0,0,0,10421,10419,1,0,0,0,10421,10422,1,0,0,0,10422,10424,1,0,
        0,0,10423,10421,1,0,0,0,10424,10425,5,1214,0,0,10425,10439,1,0,0,
        0,10426,10427,5,265,0,0,10427,10428,5,1042,0,0,10428,10429,5,1213,
        0,0,10429,10430,3,996,498,0,10430,10431,5,1214,0,0,10431,10439,1,
        0,0,0,10432,10439,3,1018,509,0,10433,10434,5,1213,0,0,10434,10435,
        3,996,498,0,10435,10436,5,1214,0,0,10436,10439,1,0,0,0,10437,10439,
        3,1184,592,0,10438,10362,1,0,0,0,10438,10364,1,0,0,0,10438,10366,
        1,0,0,0,10438,10367,1,0,0,0,10438,10368,1,0,0,0,10438,10369,1,0,
        0,0,10438,10370,1,0,0,0,10438,10371,1,0,0,0,10438,10372,1,0,0,0,
        10438,10373,1,0,0,0,10438,10391,1,0,0,0,10438,10401,1,0,0,0,10438,
        10426,1,0,0,0,10438,10432,1,0,0,0,10438,10433,1,0,0,0,10438,10437,
        1,0,0,0,10439,10845,1,0,0,0,10440,10441,10,69,0,0,10441,10442,5,
        1223,0,0,10442,10844,3,996,498,69,10443,10444,10,68,0,0,10444,10445,
        7,87,0,0,10445,10844,3,996,498,69,10446,10447,10,67,0,0,10447,10448,
        5,251,0,0,10448,10844,3,996,498,67,10449,10450,10,66,0,0,10450,10451,
        7,1,0,0,10451,10844,3,996,498,67,10452,10453,10,65,0,0,10453,10454,
        7,88,0,0,10454,10844,3,996,498,66,10455,10456,10,57,0,0,10456,10457,
        5,835,0,0,10457,10844,3,996,498,58,10458,10459,10,56,0,0,10459,10460,
        7,89,0,0,10460,10844,3,996,498,57,10461,10462,10,61,0,0,10462,10844,
        3,1174,587,0,10463,10464,10,60,0,0,10464,10465,5,1222,0,0,10465,
        10466,3,996,498,0,10466,10467,3,1016,508,0,10467,10844,1,0,0,0,10468,
        10470,10,58,0,0,10469,10471,3,1076,538,0,10470,10469,1,0,0,0,10471,
        10472,1,0,0,0,10472,10470,1,0,0,0,10472,10473,1,0,0,0,10473,10844,
        1,0,0,0,10474,10475,10,52,0,0,10475,10476,5,1209,0,0,10476,10844,
        3,788,394,0,10477,10478,10,51,0,0,10478,10479,5,1209,0,0,10479,10844,
        5,1219,0,0,10480,10481,10,50,0,0,10481,10482,5,1215,0,0,10482,10483,
        5,1219,0,0,10483,10844,5,1216,0,0,10484,10485,10,49,0,0,10485,10486,
        5,1215,0,0,10486,10487,3,764,382,0,10487,10488,5,1207,0,0,10488,
        10491,3,764,382,0,10489,10490,5,1207,0,0,10490,10492,3,764,382,0,
        10491,10489,1,0,0,0,10491,10492,1,0,0,0,10492,10493,1,0,0,0,10493,
        10494,5,1216,0,0,10494,10844,1,0,0,0,10495,10496,10,48,0,0,10496,
        10497,5,1209,0,0,10497,10498,5,1209,0,0,10498,10844,3,788,394,0,
        10499,10500,10,47,0,0,10500,10501,5,1209,0,0,10501,10502,5,1209,
        0,0,10502,10844,5,1219,0,0,10503,10504,10,46,0,0,10504,10505,5,1209,
        0,0,10505,10506,5,1209,0,0,10506,10507,5,1215,0,0,10507,10508,3,
        764,382,0,10508,10509,5,1216,0,0,10509,10844,1,0,0,0,10510,10511,
        10,45,0,0,10511,10512,5,1209,0,0,10512,10513,5,1209,0,0,10513,10514,
        5,1215,0,0,10514,10515,5,1219,0,0,10515,10844,5,1216,0,0,10516,10517,
        10,44,0,0,10517,10518,5,1209,0,0,10518,10519,5,1209,0,0,10519,10520,
        5,1215,0,0,10520,10521,3,764,382,0,10521,10522,5,1207,0,0,10522,
        10525,3,764,382,0,10523,10524,5,1207,0,0,10524,10526,3,764,382,0,
        10525,10523,1,0,0,0,10525,10526,1,0,0,0,10526,10527,1,0,0,0,10527,
        10528,5,1216,0,0,10528,10844,1,0,0,0,10529,10530,10,43,0,0,10530,
        10531,5,1209,0,0,10531,10532,5,1108,0,0,10532,10534,5,1213,0,0,10533,
        10535,3,758,379,0,10534,10533,1,0,0,0,10534,10535,1,0,0,0,10535,
        10536,1,0,0,0,10536,10844,5,1214,0,0,10537,10538,10,42,0,0,10538,
        10539,5,1209,0,0,10539,10540,5,1109,0,0,10540,10541,5,1213,0,0,10541,
        10844,5,1214,0,0,10542,10543,10,41,0,0,10543,10544,5,1209,0,0,10544,
        10545,5,1110,0,0,10545,10546,5,1213,0,0,10546,10549,3,996,498,0,
        10547,10548,5,1208,0,0,10548,10550,3,758,379,0,10549,10547,1,0,0,
        0,10549,10550,1,0,0,0,10550,10551,1,0,0,0,10551,10552,5,1214,0,0,
        10552,10844,1,0,0,0,10553,10554,10,40,0,0,10554,10555,5,1209,0,0,
        10555,10556,5,1111,0,0,10556,10557,5,1213,0,0,10557,10558,3,996,
        498,0,10558,10559,5,1214,0,0,10559,10844,1,0,0,0,10560,10561,10,
        39,0,0,10561,10562,5,1209,0,0,10562,10563,5,1112,0,0,10563,10564,
        5,1213,0,0,10564,10565,3,996,498,0,10565,10566,5,1214,0,0,10566,
        10844,1,0,0,0,10567,10568,10,38,0,0,10568,10569,5,1209,0,0,10569,
        10570,5,1113,0,0,10570,10571,5,1213,0,0,10571,10572,3,996,498,0,
        10572,10573,5,1214,0,0,10573,10844,1,0,0,0,10574,10575,10,37,0,0,
        10575,10576,5,1209,0,0,10576,10577,5,1114,0,0,10577,10578,5,1213,
        0,0,10578,10579,3,996,498,0,10579,10580,5,1214,0,0,10580,10844,1,
        0,0,0,10581,10582,10,36,0,0,10582,10583,5,1209,0,0,10583,10584,5,
        1115,0,0,10584,10585,5,1213,0,0,10585,10586,3,764,382,0,10586,10587,
        5,1214,0,0,10587,10844,1,0,0,0,10588,10589,10,35,0,0,10589,10590,
        5,1209,0,0,10590,10591,5,1116,0,0,10591,10592,5,1213,0,0,10592,10844,
        5,1214,0,0,10593,10594,10,34,0,0,10594,10595,5,1209,0,0,10595,10596,
        5,1117,0,0,10596,10597,5,1213,0,0,10597,10598,3,758,379,0,10598,
        10599,5,1214,0,0,10599,10844,1,0,0,0,10600,10601,10,33,0,0,10601,
        10602,5,1209,0,0,10602,10603,5,1118,0,0,10603,10604,5,1213,0,0,10604,
        10605,3,996,498,0,10605,10606,5,1214,0,0,10606,10844,1,0,0,0,10607,
        10608,10,32,0,0,10608,10609,5,1209,0,0,10609,10610,5,1119,0,0,10610,
        10611,5,1213,0,0,10611,10844,5,1214,0,0,10612,10613,10,31,0,0,10613,
        10614,5,1209,0,0,10614,10615,5,1120,0,0,10615,10619,5,1213,0,0,10616,
        10617,3,996,498,0,10617,10618,5,1208,0,0,10618,10620,1,0,0,0,10619,
        10616,1,0,0,0,10619,10620,1,0,0,0,10620,10621,1,0,0,0,10621,10622,
        3,996,498,0,10622,10623,5,1208,0,0,10623,10624,3,996,498,0,10624,
        10625,5,1214,0,0,10625,10844,1,0,0,0,10626,10627,10,30,0,0,10627,
        10628,5,1209,0,0,10628,10629,5,1121,0,0,10629,10630,5,1213,0,0,10630,
        10844,5,1214,0,0,10631,10632,10,29,0,0,10632,10633,5,1209,0,0,10633,
        10634,5,1122,0,0,10634,10635,5,1213,0,0,10635,10844,5,1214,0,0,10636,
        10637,10,28,0,0,10637,10638,5,1209,0,0,10638,10639,5,1123,0,0,10639,
        10640,5,1213,0,0,10640,10641,3,996,498,0,10641,10642,5,1208,0,0,
        10642,10643,3,996,498,0,10643,10644,5,1208,0,0,10644,10645,3,996,
        498,0,10645,10646,5,1214,0,0,10646,10844,1,0,0,0,10647,10648,10,
        27,0,0,10648,10649,5,1209,0,0,10649,10650,5,1124,0,0,10650,10651,
        5,1213,0,0,10651,10844,5,1214,0,0,10652,10653,10,26,0,0,10653,10654,
        5,1209,0,0,10654,10655,5,1125,0,0,10655,10659,5,1213,0,0,10656,10657,
        3,996,498,0,10657,10658,5,1208,0,0,10658,10660,1,0,0,0,10659,10656,
        1,0,0,0,10659,10660,1,0,0,0,10660,10661,1,0,0,0,10661,10662,3,996,
        498,0,10662,10663,5,1208,0,0,10663,10664,3,996,498,0,10664,10665,
        5,1214,0,0,10665,10844,1,0,0,0,10666,10667,10,25,0,0,10667,10668,
        5,1209,0,0,10668,10669,5,1126,0,0,10669,10670,5,1213,0,0,10670,10671,
        3,996,498,0,10671,10672,5,1208,0,0,10672,10673,3,996,498,0,10673,
        10674,5,1214,0,0,10674,10844,1,0,0,0,10675,10676,10,20,0,0,10676,
        10677,5,1215,0,0,10677,10682,3,764,382,0,10678,10679,5,1208,0,0,
        10679,10681,3,764,382,0,10680,10678,1,0,0,0,10681,10684,1,0,0,0,
        10682,10680,1,0,0,0,10682,10683,1,0,0,0,10683,10685,1,0,0,0,10684,
        10682,1,0,0,0,10685,10686,5,1216,0,0,10686,10844,1,0,0,0,10687,10688,
        10,19,0,0,10688,10689,5,1209,0,0,10689,10690,5,564,0,0,10690,10692,
        5,1213,0,0,10691,10693,3,1194,597,0,10692,10691,1,0,0,0,10692,10693,
        1,0,0,0,10693,10694,1,0,0,0,10694,10844,5,1214,0,0,10695,10696,10,
        18,0,0,10696,10697,5,1209,0,0,10697,10698,5,517,0,0,10698,10699,
        5,1213,0,0,10699,10702,3,996,498,0,10700,10701,5,1208,0,0,10701,
        10703,3,1194,597,0,10702,10700,1,0,0,0,10702,10703,1,0,0,0,10703,
        10704,1,0,0,0,10704,10705,5,1214,0,0,10705,10844,1,0,0,0,10706,10707,
        10,17,0,0,10707,10708,5,1209,0,0,10708,10709,7,90,0,0,10709,10710,
        5,1213,0,0,10710,10713,3,996,498,0,10711,10712,5,1208,0,0,10712,
        10714,3,1194,597,0,10713,10711,1,0,0,0,10713,10714,1,0,0,0,10714,
        10715,1,0,0,0,10715,10716,5,1214,0,0,10716,10844,1,0,0,0,10717,10718,
        10,16,0,0,10718,10719,5,1209,0,0,10719,10720,7,91,0,0,10720,10721,
        5,1213,0,0,10721,10724,3,996,498,0,10722,10723,5,1208,0,0,10723,
        10725,3,1194,597,0,10724,10722,1,0,0,0,10724,10725,1,0,0,0,10725,
        10726,1,0,0,0,10726,10727,5,1214,0,0,10727,10844,1,0,0,0,10728,10729,
        10,15,0,0,10729,10730,5,1209,0,0,10730,10731,7,92,0,0,10731,10733,
        5,1213,0,0,10732,10734,3,1194,597,0,10733,10732,1,0,0,0,10733,10734,
        1,0,0,0,10734,10735,1,0,0,0,10735,10844,5,1214,0,0,10736,10737,10,
        14,0,0,10737,10738,5,1209,0,0,10738,10739,5,518,0,0,10739,10745,
        5,1213,0,0,10740,10743,3,1194,597,0,10741,10742,5,1208,0,0,10742,
        10744,3,996,498,0,10743,10741,1,0,0,0,10743,10744,1,0,0,0,10744,
        10746,1,0,0,0,10745,10740,1,0,0,0,10745,10746,1,0,0,0,10746,10747,
        1,0,0,0,10747,10844,5,1214,0,0,10748,10749,10,13,0,0,10749,10750,
        5,1209,0,0,10750,10751,5,522,0,0,10751,10752,5,1213,0,0,10752,10753,
        3,996,498,0,10753,10754,5,1214,0,0,10754,10844,1,0,0,0,10755,10756,
        10,12,0,0,10756,10757,5,1209,0,0,10757,10758,5,516,0,0,10758,10759,
        5,1213,0,0,10759,10766,3,996,498,0,10760,10761,5,1208,0,0,10761,
        10764,3,1194,597,0,10762,10763,5,1208,0,0,10763,10765,3,764,382,
        0,10764,10762,1,0,0,0,10764,10765,1,0,0,0,10765,10767,1,0,0,0,10766,
        10760,1,0,0,0,10766,10767,1,0,0,0,10767,10768,1,0,0,0,10768,10769,
        5,1214,0,0,10769,10844,1,0,0,0,10770,10771,10,11,0,0,10771,10772,
        5,1209,0,0,10772,10773,5,533,0,0,10773,10774,5,1213,0,0,10774,10780,
        3,996,498,0,10775,10778,5,1208,0,0,10776,10779,3,1194,597,0,10777,
        10779,3,764,382,0,10778,10776,1,0,0,0,10778,10777,1,0,0,0,10779,
        10781,1,0,0,0,10780,10775,1,0,0,0,10780,10781,1,0,0,0,10781,10782,
        1,0,0,0,10782,10783,5,1214,0,0,10783,10844,1,0,0,0,10784,10785,10,
        10,0,0,10785,10786,5,1209,0,0,10786,10787,5,534,0,0,10787,10788,
        5,1213,0,0,10788,10789,3,996,498,0,10789,10790,5,1208,0,0,10790,
        10796,3,764,382,0,10791,10794,5,1208,0,0,10792,10795,3,1194,597,
        0,10793,10795,3,764,382,0,10794,10792,1,0,0,0,10794,10793,1,0,0,
        0,10795,10797,1,0,0,0,10796,10791,1,0,0,0,10796,10797,1,0,0,0,10797,
        10798,1,0,0,0,10798,10799,5,1214,0,0,10799,10844,1,0,0,0,10800,10801,
        10,9,0,0,10801,10802,5,1209,0,0,10802,10803,7,93,0,0,10803,10804,
        5,1213,0,0,10804,10805,3,996,498,0,10805,10806,5,1214,0,0,10806,
        10844,1,0,0,0,10807,10808,10,8,0,0,10808,10809,5,1209,0,0,10809,
        10810,7,94,0,0,10810,10811,5,1213,0,0,10811,10844,5,1214,0,0,10812,
        10813,10,7,0,0,10813,10814,5,1209,0,0,10814,10815,5,818,0,0,10815,
        10816,5,1213,0,0,10816,10844,5,1214,0,0,10817,10818,10,6,0,0,10818,
        10819,5,1209,0,0,10819,10820,5,832,0,0,10820,10822,5,1213,0,0,10821,
        10823,3,764,382,0,10822,10821,1,0,0,0,10822,10823,1,0,0,0,10823,
        10824,1,0,0,0,10824,10844,5,1214,0,0,10825,10826,10,5,0,0,10826,
        10827,5,1209,0,0,10827,10828,3,828,414,0,10828,10837,5,1213,0,0,
        10829,10834,3,996,498,0,10830,10831,5,1208,0,0,10831,10833,3,996,
        498,0,10832,10830,1,0,0,0,10833,10836,1,0,0,0,10834,10832,1,0,0,
        0,10834,10835,1,0,0,0,10835,10838,1,0,0,0,10836,10834,1,0,0,0,10837,
        10829,1,0,0,0,10837,10838,1,0,0,0,10838,10839,1,0,0,0,10839,10840,
        5,1214,0,0,10840,10844,1,0,0,0,10841,10842,10,4,0,0,10842,10844,
        3,1082,541,0,10843,10440,1,0,0,0,10843,10443,1,0,0,0,10843,10446,
        1,0,0,0,10843,10449,1,0,0,0,10843,10452,1,0,0,0,10843,10455,1,0,
        0,0,10843,10458,1,0,0,0,10843,10461,1,0,0,0,10843,10463,1,0,0,0,
        10843,10468,1,0,0,0,10843,10474,1,0,0,0,10843,10477,1,0,0,0,10843,
        10480,1,0,0,0,10843,10484,1,0,0,0,10843,10495,1,0,0,0,10843,10499,
        1,0,0,0,10843,10503,1,0,0,0,10843,10510,1,0,0,0,10843,10516,1,0,
        0,0,10843,10529,1,0,0,0,10843,10537,1,0,0,0,10843,10542,1,0,0,0,
        10843,10553,1,0,0,0,10843,10560,1,0,0,0,10843,10567,1,0,0,0,10843,
        10574,1,0,0,0,10843,10581,1,0,0,0,10843,10588,1,0,0,0,10843,10593,
        1,0,0,0,10843,10600,1,0,0,0,10843,10607,1,0,0,0,10843,10612,1,0,
        0,0,10843,10626,1,0,0,0,10843,10631,1,0,0,0,10843,10636,1,0,0,0,
        10843,10647,1,0,0,0,10843,10652,1,0,0,0,10843,10666,1,0,0,0,10843,
        10675,1,0,0,0,10843,10687,1,0,0,0,10843,10695,1,0,0,0,10843,10706,
        1,0,0,0,10843,10717,1,0,0,0,10843,10728,1,0,0,0,10843,10736,1,0,
        0,0,10843,10748,1,0,0,0,10843,10755,1,0,0,0,10843,10770,1,0,0,0,
        10843,10784,1,0,0,0,10843,10800,1,0,0,0,10843,10807,1,0,0,0,10843,
        10812,1,0,0,0,10843,10817,1,0,0,0,10843,10825,1,0,0,0,10843,10841,
        1,0,0,0,10844,10847,1,0,0,0,10845,10843,1,0,0,0,10845,10846,1,0,
        0,0,10846,997,1,0,0,0,10847,10845,1,0,0,0,10848,10849,5,1213,0,0,
        10849,10852,3,1000,500,0,10850,10851,5,1208,0,0,10851,10853,3,1000,
        500,0,10852,10850,1,0,0,0,10853,10854,1,0,0,0,10854,10852,1,0,0,
        0,10854,10855,1,0,0,0,10855,10856,1,0,0,0,10856,10857,5,1214,0,0,
        10857,999,1,0,0,0,10858,10863,3,996,498,0,10859,10861,5,20,0,0,10860,
        10859,1,0,0,0,10860,10861,1,0,0,0,10861,10862,1,0,0,0,10862,10864,
        3,808,404,0,10863,10860,1,0,0,0,10863,10864,1,0,0,0,10864,10874,
        1,0,0,0,10865,10866,5,1213,0,0,10866,10868,3,996,498,0,10867,10869,
        5,20,0,0,10868,10867,1,0,0,0,10868,10869,1,0,0,0,10869,10870,1,0,
        0,0,10870,10871,3,808,404,0,10871,10872,5,1214,0,0,10872,10874,1,
        0,0,0,10873,10858,1,0,0,0,10873,10865,1,0,0,0,10874,1001,1,0,0,0,
        10875,10880,3,1004,502,0,10876,10880,3,1006,503,0,10877,10880,3,
        1008,504,0,10878,10880,3,1010,505,0,10879,10875,1,0,0,0,10879,10876,
        1,0,0,0,10879,10877,1,0,0,0,10879,10878,1,0,0,0,10880,1003,1,0,0,
        0,10881,10882,5,47,0,0,10882,10888,3,996,498,0,10883,10884,5,470,
        0,0,10884,10885,3,996,498,0,10885,10886,5,419,0,0,10886,10887,3,
        996,498,0,10887,10889,1,0,0,0,10888,10883,1,0,0,0,10889,10890,1,
        0,0,0,10890,10888,1,0,0,0,10890,10891,1,0,0,0,10891,10894,1,0,0,
        0,10892,10893,5,131,0,0,10893,10895,3,996,498,0,10894,10892,1,0,
        0,0,10894,10895,1,0,0,0,10895,10896,1,0,0,0,10896,10897,5,134,0,
        0,10897,1005,1,0,0,0,10898,10904,5,47,0,0,10899,10900,5,470,0,0,
        10900,10901,3,994,497,0,10901,10902,5,419,0,0,10902,10903,3,996,
        498,0,10903,10905,1,0,0,0,10904,10899,1,0,0,0,10905,10906,1,0,0,
        0,10906,10904,1,0,0,0,10906,10907,1,0,0,0,10907,10910,1,0,0,0,10908,
        10909,5,131,0,0,10909,10911,3,996,498,0,10910,10908,1,0,0,0,10910,
        10911,1,0,0,0,10911,10912,1,0,0,0,10912,10913,5,134,0,0,10913,1007,
        1,0,0,0,10914,10915,5,66,0,0,10915,10916,3,1180,590,0,10916,1009,
        1,0,0,0,10917,10918,5,275,0,0,10918,10919,5,1213,0,0,10919,10920,
        3,996,498,0,10920,10921,5,1208,0,0,10921,10922,3,996,498,0,10922,
        10923,5,1214,0,0,10923,1011,1,0,0,0,10924,10925,3,996,498,0,10925,
        10926,5,1222,0,0,10926,10927,3,996,498,0,10927,10935,1,0,0,0,10928,
        10929,5,1213,0,0,10929,10930,3,996,498,0,10930,10931,5,1222,0,0,
        10931,10932,3,996,498,0,10932,10933,5,1214,0,0,10933,10935,1,0,0,
        0,10934,10924,1,0,0,0,10934,10928,1,0,0,0,10935,1013,1,0,0,0,10936,
        10937,5,1213,0,0,10937,10938,3,1012,506,0,10938,10939,5,1214,0,0,
        10939,10940,3,1016,508,0,10940,1015,1,0,0,0,10941,10950,7,95,0,0,
        10942,10943,5,1213,0,0,10943,10946,3,764,382,0,10944,10945,5,1208,
        0,0,10945,10947,3,764,382,0,10946,10944,1,0,0,0,10946,10947,1,0,
        0,0,10947,10948,1,0,0,0,10948,10949,5,1214,0,0,10949,10951,1,0,0,
        0,10950,10942,1,0,0,0,10950,10951,1,0,0,0,10951,10960,1,0,0,0,10952,
        10953,5,426,0,0,10953,10958,7,96,0,0,10954,10955,5,1213,0,0,10955,
        10956,3,764,382,0,10956,10957,5,1214,0,0,10957,10959,1,0,0,0,10958,
        10954,1,0,0,0,10958,10959,1,0,0,0,10959,10961,1,0,0,0,10960,10952,
        1,0,0,0,10960,10961,1,0,0,0,10961,1017,1,0,0,0,10962,10985,3,1020,
        510,0,10963,10985,3,1022,511,0,10964,10985,3,1024,512,0,10965,10985,
        3,1026,513,0,10966,10985,3,1028,514,0,10967,10985,3,1030,515,0,10968,
        10985,3,1032,516,0,10969,10985,3,1034,517,0,10970,10985,3,1036,518,
        0,10971,10985,3,1038,519,0,10972,10985,3,1040,520,0,10973,10985,
        3,1042,521,0,10974,10985,3,1044,522,0,10975,10985,3,1046,523,0,10976,
        10985,3,1048,524,0,10977,10985,3,1050,525,0,10978,10985,3,1052,526,
        0,10979,10985,3,1054,527,0,10980,10985,3,1056,528,0,10981,10985,
        3,1058,529,0,10982,10985,3,1060,530,0,10983,10985,3,1062,531,0,10984,
        10962,1,0,0,0,10984,10963,1,0,0,0,10984,10964,1,0,0,0,10984,10965,
        1,0,0,0,10984,10966,1,0,0,0,10984,10967,1,0,0,0,10984,10968,1,0,
        0,0,10984,10969,1,0,0,0,10984,10970,1,0,0,0,10984,10971,1,0,0,0,
        10984,10972,1,0,0,0,10984,10973,1,0,0,0,10984,10974,1,0,0,0,10984,
        10975,1,0,0,0,10984,10976,1,0,0,0,10984,10977,1,0,0,0,10984,10978,
        1,0,0,0,10984,10979,1,0,0,0,10984,10980,1,0,0,0,10984,10981,1,0,
        0,0,10984,10982,1,0,0,0,10984,10983,1,0,0,0,10985,1019,1,0,0,0,10986,
        10987,7,97,0,0,10987,10989,5,1213,0,0,10988,10990,7,98,0,0,10989,
        10988,1,0,0,0,10989,10990,1,0,0,0,10990,10991,1,0,0,0,10991,10992,
        3,996,498,0,10992,10993,5,1214,0,0,10993,11022,1,0,0,0,10994,10995,
        7,99,0,0,10995,10996,5,1213,0,0,10996,10997,3,996,498,0,10997,10998,
        5,1208,0,0,10998,10999,3,996,498,0,10999,11000,5,1214,0,0,11000,
        11022,1,0,0,0,11001,11002,5,83,0,0,11002,11008,5,1213,0,0,11003,
        11009,5,1219,0,0,11004,11006,7,100,0,0,11005,11004,1,0,0,0,11005,
        11006,1,0,0,0,11006,11007,1,0,0,0,11007,11009,3,996,498,0,11008,
        11003,1,0,0,0,11008,11005,1,0,0,0,11009,11010,1,0,0,0,11010,11022,
        5,1214,0,0,11011,11012,5,175,0,0,11012,11013,5,1213,0,0,11013,11014,
        3,996,498,0,11014,11015,5,1214,0,0,11015,11022,1,0,0,0,11016,11017,
        5,1081,0,0,11017,11018,5,1213,0,0,11018,11019,3,996,498,0,11019,
        11020,5,1214,0,0,11020,11022,1,0,0,0,11021,10986,1,0,0,0,11021,10994,
        1,0,0,0,11021,11001,1,0,0,0,11021,11011,1,0,0,0,11021,11016,1,0,
        0,0,11022,1021,1,0,0,0,11023,11024,7,101,0,0,11024,11025,5,1213,
        0,0,11025,11026,3,996,498,0,11026,11027,5,1214,0,0,11027,11028,3,
        1102,551,0,11028,11173,1,0,0,0,11029,11030,7,99,0,0,11030,11031,
        5,1213,0,0,11031,11032,3,996,498,0,11032,11033,5,1208,0,0,11033,
        11034,3,996,498,0,11034,11035,5,1214,0,0,11035,11036,3,1102,551,
        0,11036,11173,1,0,0,0,11037,11038,5,83,0,0,11038,11041,5,1213,0,
        0,11039,11042,5,1219,0,0,11040,11042,3,996,498,0,11041,11039,1,0,
        0,0,11041,11040,1,0,0,0,11042,11043,1,0,0,0,11043,11044,5,1214,0,
        0,11044,11173,3,1102,551,0,11045,11046,5,89,0,0,11046,11047,5,1213,
        0,0,11047,11050,3,996,498,0,11048,11049,5,1208,0,0,11049,11051,3,
        990,495,0,11050,11048,1,0,0,0,11051,11052,1,0,0,0,11052,11050,1,
        0,0,0,11052,11053,1,0,0,0,11053,11054,1,0,0,0,11054,11055,5,1214,
        0,0,11055,11173,1,0,0,0,11056,11057,7,102,0,0,11057,11058,5,1213,
        0,0,11058,11059,5,1214,0,0,11059,11173,3,1104,552,0,11060,11061,
        7,103,0,0,11061,11062,5,1213,0,0,11062,11064,3,996,498,0,11063,11065,
        3,1144,572,0,11064,11063,1,0,0,0,11064,11065,1,0,0,0,11065,11066,
        1,0,0,0,11066,11067,5,1214,0,0,11067,11068,3,1102,551,0,11068,11173,
        1,0,0,0,11069,11070,7,104,0,0,11070,11071,5,1213,0,0,11071,11073,
        3,996,498,0,11072,11074,3,1144,572,0,11073,11072,1,0,0,0,11073,11074,
        1,0,0,0,11074,11081,1,0,0,0,11075,11076,5,1208,0,0,11076,11079,3,
        996,498,0,11077,11078,5,1208,0,0,11078,11080,3,996,498,0,11079,11077,
        1,0,0,0,11079,11080,1,0,0,0,11080,11082,1,0,0,0,11081,11075,1,0,
        0,0,11081,11082,1,0,0,0,11082,11083,1,0,0,0,11083,11085,5,1214,0,
        0,11084,11086,3,1144,572,0,11085,11084,1,0,0,0,11085,11086,1,0,0,
        0,11086,11087,1,0,0,0,11087,11088,3,1104,552,0,11088,11173,1,0,0,
        0,11089,11090,7,105,0,0,11090,11091,5,1213,0,0,11091,11092,3,996,
        498,0,11092,11093,5,1208,0,0,11093,11096,3,764,382,0,11094,11095,
        5,1208,0,0,11095,11097,3,990,495,0,11096,11094,1,0,0,0,11097,11098,
        1,0,0,0,11098,11096,1,0,0,0,11098,11099,1,0,0,0,11099,11100,1,0,
        0,0,11100,11101,5,1214,0,0,11101,11173,1,0,0,0,11102,11103,5,763,
        0,0,11103,11104,5,1213,0,0,11104,11105,3,996,498,0,11105,11106,5,
        1214,0,0,11106,11173,1,0,0,0,11107,11108,5,249,0,0,11108,11109,5,
        1213,0,0,11109,11110,3,996,498,0,11110,11111,5,1208,0,0,11111,11112,
        3,764,382,0,11112,11113,5,1208,0,0,11113,11114,3,990,495,0,11114,
        11115,5,1214,0,0,11115,11173,1,0,0,0,11116,11117,7,106,0,0,11117,
        11118,5,1213,0,0,11118,11119,3,996,498,0,11119,11120,5,1214,0,0,
        11120,11121,5,1039,0,0,11121,11122,5,174,0,0,11122,11123,5,1213,
        0,0,11123,11124,5,291,0,0,11124,11125,5,42,0,0,11125,11130,3,988,
        494,0,11126,11127,5,1208,0,0,11127,11129,3,988,494,0,11128,11126,
        1,0,0,0,11129,11132,1,0,0,0,11130,11128,1,0,0,0,11130,11131,1,0,
        0,0,11131,11133,1,0,0,0,11132,11130,1,0,0,0,11133,11134,5,1214,0,
        0,11134,11173,1,0,0,0,11135,11136,5,316,0,0,11136,11137,5,1213,0,
        0,11137,11140,3,764,382,0,11138,11139,5,1208,0,0,11139,11141,3,990,
        495,0,11140,11138,1,0,0,0,11141,11142,1,0,0,0,11142,11140,1,0,0,
        0,11142,11143,1,0,0,0,11143,11144,1,0,0,0,11144,11145,5,1214,0,0,
        11145,11173,1,0,0,0,11146,11147,5,321,0,0,11147,11148,5,1213,0,0,
        11148,11149,5,1214,0,0,11149,11173,3,1106,553,0,11150,11151,5,321,
        0,0,11151,11152,5,1213,0,0,11152,11157,3,990,495,0,11153,11154,5,
        1208,0,0,11154,11156,3,990,495,0,11155,11153,1,0,0,0,11156,11159,
        1,0,0,0,11157,11155,1,0,0,0,11157,11158,1,0,0,0,11158,11160,1,0,
        0,0,11159,11157,1,0,0,0,11160,11161,5,1214,0,0,11161,11173,1,0,0,
        0,11162,11163,5,362,0,0,11163,11164,5,1213,0,0,11164,11165,5,1214,
        0,0,11165,11173,3,1104,552,0,11166,11167,5,1081,0,0,11167,11168,
        5,1213,0,0,11168,11169,3,996,498,0,11169,11170,5,1214,0,0,11170,
        11171,3,1102,551,0,11171,11173,1,0,0,0,11172,11023,1,0,0,0,11172,
        11029,1,0,0,0,11172,11037,1,0,0,0,11172,11045,1,0,0,0,11172,11056,
        1,0,0,0,11172,11060,1,0,0,0,11172,11069,1,0,0,0,11172,11089,1,0,
        0,0,11172,11102,1,0,0,0,11172,11107,1,0,0,0,11172,11116,1,0,0,0,
        11172,11135,1,0,0,0,11172,11146,1,0,0,0,11172,11150,1,0,0,0,11172,
        11162,1,0,0,0,11172,11166,1,0,0,0,11173,1023,1,0,0,0,11174,11175,
        7,107,0,0,11175,11176,5,1213,0,0,11176,11177,3,996,498,0,11177,11178,
        5,1214,0,0,11178,11229,1,0,0,0,11179,11181,3,1066,533,0,11180,11179,
        1,0,0,0,11180,11181,1,0,0,0,11181,11182,1,0,0,0,11182,11183,7,108,
        0,0,11183,11184,5,1213,0,0,11184,11185,3,996,498,0,11185,11186,5,
        1214,0,0,11186,11229,1,0,0,0,11187,11188,7,109,0,0,11188,11189,5,
        1213,0,0,11189,11190,3,996,498,0,11190,11191,5,1208,0,0,11191,11192,
        3,996,498,0,11192,11193,5,1214,0,0,11193,11229,1,0,0,0,11194,11196,
        3,1070,535,0,11195,11194,1,0,0,0,11195,11196,1,0,0,0,11196,11197,
        1,0,0,0,11197,11198,5,856,0,0,11198,11199,5,1213,0,0,11199,11200,
        3,996,498,0,11200,11201,5,1208,0,0,11201,11202,3,996,498,0,11202,
        11203,5,1214,0,0,11203,11229,1,0,0,0,11204,11206,3,1066,533,0,11205,
        11204,1,0,0,0,11205,11206,1,0,0,0,11206,11207,1,0,0,0,11207,11208,
        7,110,0,0,11208,11209,5,1213,0,0,11209,11212,3,996,498,0,11210,11211,
        5,1208,0,0,11211,11213,3,996,498,0,11212,11210,1,0,0,0,11212,11213,
        1,0,0,0,11213,11214,1,0,0,0,11214,11215,5,1214,0,0,11215,11229,1,
        0,0,0,11216,11217,5,1100,0,0,11217,11218,5,1066,0,0,11218,11219,
        5,1213,0,0,11219,11220,3,996,498,0,11220,11221,5,1208,0,0,11221,
        11222,3,996,498,0,11222,11223,5,1208,0,0,11223,11224,3,996,498,0,
        11224,11225,5,1208,0,0,11225,11226,3,996,498,0,11226,11227,5,1214,
        0,0,11227,11229,1,0,0,0,11228,11174,1,0,0,0,11228,11180,1,0,0,0,
        11228,11187,1,0,0,0,11228,11195,1,0,0,0,11228,11205,1,0,0,0,11228,
        11216,1,0,0,0,11229,1025,1,0,0,0,11230,11232,3,1066,533,0,11231,
        11230,1,0,0,0,11231,11232,1,0,0,0,11232,11233,1,0,0,0,11233,11234,
        5,514,0,0,11234,11235,5,1213,0,0,11235,11242,3,996,498,0,11236,11237,
        5,291,0,0,11237,11238,5,42,0,0,11238,11240,3,996,498,0,11239,11241,
        7,84,0,0,11240,11239,1,0,0,0,11240,11241,1,0,0,0,11241,11243,1,0,
        0,0,11242,11236,1,0,0,0,11242,11243,1,0,0,0,11243,11244,1,0,0,0,
        11244,11245,5,1208,0,0,11245,11246,3,996,498,0,11246,11247,5,1214,
        0,0,11247,11444,1,0,0,0,11248,11249,5,564,0,0,11249,11250,5,1213,
        0,0,11250,11255,3,996,498,0,11251,11252,5,1208,0,0,11252,11254,3,
        1194,597,0,11253,11251,1,0,0,0,11254,11257,1,0,0,0,11255,11253,1,
        0,0,0,11255,11256,1,0,0,0,11256,11258,1,0,0,0,11257,11255,1,0,0,
        0,11258,11259,5,1214,0,0,11259,11444,1,0,0,0,11260,11261,5,517,0,
        0,11261,11262,5,1213,0,0,11262,11263,3,996,498,0,11263,11264,5,1208,
        0,0,11264,11269,3,996,498,0,11265,11266,5,1208,0,0,11266,11268,3,
        1194,597,0,11267,11265,1,0,0,0,11268,11271,1,0,0,0,11269,11267,1,
        0,0,0,11269,11270,1,0,0,0,11270,11272,1,0,0,0,11271,11269,1,0,0,
        0,11272,11273,5,1214,0,0,11273,11444,1,0,0,0,11274,11275,7,90,0,
        0,11275,11276,5,1213,0,0,11276,11277,3,996,498,0,11277,11278,5,1208,
        0,0,11278,11283,3,996,498,0,11279,11280,5,1208,0,0,11280,11282,3,
        1194,597,0,11281,11279,1,0,0,0,11282,11285,1,0,0,0,11283,11281,1,
        0,0,0,11283,11284,1,0,0,0,11284,11286,1,0,0,0,11285,11283,1,0,0,
        0,11286,11287,5,1214,0,0,11287,11444,1,0,0,0,11288,11289,7,91,0,
        0,11289,11290,5,1213,0,0,11290,11291,3,996,498,0,11291,11292,5,1208,
        0,0,11292,11297,3,996,498,0,11293,11294,5,1208,0,0,11294,11296,3,
        1194,597,0,11295,11293,1,0,0,0,11296,11299,1,0,0,0,11297,11295,1,
        0,0,0,11297,11298,1,0,0,0,11298,11300,1,0,0,0,11299,11297,1,0,0,
        0,11300,11301,5,1214,0,0,11301,11444,1,0,0,0,11302,11303,7,92,0,
        0,11303,11304,5,1213,0,0,11304,11309,3,996,498,0,11305,11306,5,1208,
        0,0,11306,11308,3,1194,597,0,11307,11305,1,0,0,0,11308,11311,1,0,
        0,0,11309,11307,1,0,0,0,11309,11310,1,0,0,0,11310,11312,1,0,0,0,
        11311,11309,1,0,0,0,11312,11313,5,1214,0,0,11313,11444,1,0,0,0,11314,
        11315,5,518,0,0,11315,11316,5,1213,0,0,11316,11332,3,996,498,0,11317,
        11318,5,1208,0,0,11318,11320,3,1194,597,0,11319,11317,1,0,0,0,11320,
        11323,1,0,0,0,11321,11319,1,0,0,0,11321,11322,1,0,0,0,11322,11324,
        1,0,0,0,11323,11321,1,0,0,0,11324,11325,5,1208,0,0,11325,11333,3,
        996,498,0,11326,11327,5,1208,0,0,11327,11329,3,1194,597,0,11328,
        11326,1,0,0,0,11329,11330,1,0,0,0,11330,11328,1,0,0,0,11330,11331,
        1,0,0,0,11331,11333,1,0,0,0,11332,11321,1,0,0,0,11332,11328,1,0,
        0,0,11332,11333,1,0,0,0,11333,11334,1,0,0,0,11334,11335,5,1214,0,
        0,11335,11444,1,0,0,0,11336,11337,5,522,0,0,11337,11338,5,1213,0,
        0,11338,11339,3,996,498,0,11339,11340,5,1208,0,0,11340,11341,3,996,
        498,0,11341,11342,5,1214,0,0,11342,11444,1,0,0,0,11343,11344,5,516,
        0,0,11344,11345,5,1213,0,0,11345,11346,3,996,498,0,11346,11347,5,
        1208,0,0,11347,11357,3,996,498,0,11348,11349,5,1208,0,0,11349,11351,
        3,1194,597,0,11350,11348,1,0,0,0,11351,11352,1,0,0,0,11352,11350,
        1,0,0,0,11352,11353,1,0,0,0,11353,11354,1,0,0,0,11354,11355,5,1208,
        0,0,11355,11356,3,764,382,0,11356,11358,1,0,0,0,11357,11350,1,0,
        0,0,11357,11358,1,0,0,0,11358,11359,1,0,0,0,11359,11360,5,1214,0,
        0,11360,11444,1,0,0,0,11361,11362,5,533,0,0,11362,11363,5,1213,0,
        0,11363,11364,3,996,498,0,11364,11365,5,1208,0,0,11365,11374,3,996,
        498,0,11366,11367,5,1208,0,0,11367,11369,3,1194,597,0,11368,11366,
        1,0,0,0,11369,11370,1,0,0,0,11370,11368,1,0,0,0,11370,11371,1,0,
        0,0,11371,11375,1,0,0,0,11372,11373,5,1208,0,0,11373,11375,3,996,
        498,0,11374,11368,1,0,0,0,11374,11372,1,0,0,0,11374,11375,1,0,0,
        0,11375,11376,1,0,0,0,11376,11377,5,1214,0,0,11377,11444,1,0,0,0,
        11378,11379,5,534,0,0,11379,11380,5,1213,0,0,11380,11381,3,996,498,
        0,11381,11382,5,1208,0,0,11382,11383,3,996,498,0,11383,11384,5,1208,
        0,0,11384,11393,3,764,382,0,11385,11386,5,1208,0,0,11386,11388,3,
        1194,597,0,11387,11385,1,0,0,0,11388,11389,1,0,0,0,11389,11387,1,
        0,0,0,11389,11390,1,0,0,0,11390,11394,1,0,0,0,11391,11392,5,1208,
        0,0,11392,11394,3,996,498,0,11393,11387,1,0,0,0,11393,11391,1,0,
        0,0,11393,11394,1,0,0,0,11394,11395,1,0,0,0,11395,11396,5,1214,0,
        0,11396,11444,1,0,0,0,11397,11399,3,1066,533,0,11398,11397,1,0,0,
        0,11398,11399,1,0,0,0,11399,11400,1,0,0,0,11400,11401,7,93,0,0,11401,
        11402,5,1213,0,0,11402,11403,3,996,498,0,11403,11404,5,1208,0,0,
        11404,11405,3,996,498,0,11405,11406,5,1214,0,0,11406,11444,1,0,0,
        0,11407,11409,3,1066,533,0,11408,11407,1,0,0,0,11408,11409,1,0,0,
        0,11409,11410,1,0,0,0,11410,11411,7,111,0,0,11411,11412,5,1213,0,
        0,11412,11413,3,996,498,0,11413,11414,5,1214,0,0,11414,11444,1,0,
        0,0,11415,11417,3,1066,533,0,11416,11415,1,0,0,0,11416,11417,1,0,
        0,0,11417,11418,1,0,0,0,11418,11419,5,818,0,0,11419,11420,5,1213,
        0,0,11420,11427,3,996,498,0,11421,11422,5,1208,0,0,11422,11425,3,
        996,498,0,11423,11424,5,1208,0,0,11424,11426,3,996,498,0,11425,11423,
        1,0,0,0,11425,11426,1,0,0,0,11426,11428,1,0,0,0,11427,11421,1,0,
        0,0,11427,11428,1,0,0,0,11428,11429,1,0,0,0,11429,11430,5,1214,0,
        0,11430,11444,1,0,0,0,11431,11433,3,1066,533,0,11432,11431,1,0,0,
        0,11432,11433,1,0,0,0,11433,11434,1,0,0,0,11434,11435,5,832,0,0,
        11435,11436,5,1213,0,0,11436,11439,3,996,498,0,11437,11438,5,1208,
        0,0,11438,11440,3,996,498,0,11439,11437,1,0,0,0,11439,11440,1,0,
        0,0,11440,11441,1,0,0,0,11441,11442,5,1214,0,0,11442,11444,1,0,0,
        0,11443,11231,1,0,0,0,11443,11248,1,0,0,0,11443,11260,1,0,0,0,11443,
        11274,1,0,0,0,11443,11288,1,0,0,0,11443,11302,1,0,0,0,11443,11314,
        1,0,0,0,11443,11336,1,0,0,0,11443,11343,1,0,0,0,11443,11361,1,0,
        0,0,11443,11378,1,0,0,0,11443,11398,1,0,0,0,11443,11408,1,0,0,0,
        11443,11416,1,0,0,0,11443,11432,1,0,0,0,11444,1027,1,0,0,0,11445,
        11446,5,546,0,0,11446,11447,5,1213,0,0,11447,11450,3,996,498,0,11448,
        11449,5,1208,0,0,11449,11451,3,754,377,0,11450,11448,1,0,0,0,11450,
        11451,1,0,0,0,11451,11452,1,0,0,0,11452,11453,5,1214,0,0,11453,11486,
        1,0,0,0,11454,11455,7,112,0,0,11455,11456,5,1213,0,0,11456,11457,
        3,996,498,0,11457,11458,5,1214,0,0,11458,11486,1,0,0,0,11459,11460,
        7,113,0,0,11460,11461,5,1213,0,0,11461,11462,3,996,498,0,11462,11463,
        5,1214,0,0,11463,11486,1,0,0,0,11464,11469,5,111,0,0,11465,11466,
        5,1213,0,0,11466,11467,3,784,392,0,11467,11468,5,1214,0,0,11468,
        11470,1,0,0,0,11469,11465,1,0,0,0,11469,11470,1,0,0,0,11470,11486,
        1,0,0,0,11471,11472,7,114,0,0,11472,11473,5,1213,0,0,11473,11474,
        3,996,498,0,11474,11475,5,1214,0,0,11475,11486,1,0,0,0,11476,11477,
        5,281,0,0,11477,11478,5,1213,0,0,11478,11481,3,996,498,0,11479,11480,
        5,1208,0,0,11480,11482,3,754,377,0,11481,11479,1,0,0,0,11481,11482,
        1,0,0,0,11482,11483,1,0,0,0,11483,11484,5,1214,0,0,11484,11486,1,
        0,0,0,11485,11445,1,0,0,0,11485,11454,1,0,0,0,11485,11459,1,0,0,
        0,11485,11464,1,0,0,0,11485,11471,1,0,0,0,11485,11476,1,0,0,0,11486,
        1029,1,0,0,0,11487,11489,3,1066,533,0,11488,11487,1,0,0,0,11488,
        11489,1,0,0,0,11489,11490,1,0,0,0,11490,11491,5,548,0,0,11491,11492,
        5,1213,0,0,11492,11493,3,996,498,0,11493,11494,5,1214,0,0,11494,
        11552,1,0,0,0,11495,11497,3,1066,533,0,11496,11495,1,0,0,0,11496,
        11497,1,0,0,0,11497,11498,1,0,0,0,11498,11499,7,115,0,0,11499,11500,
        5,1213,0,0,11500,11501,3,996,498,0,11501,11502,5,1208,0,0,11502,
        11503,3,996,498,0,11503,11504,5,1214,0,0,11504,11552,1,0,0,0,11505,
        11507,3,1066,533,0,11506,11505,1,0,0,0,11506,11507,1,0,0,0,11507,
        11508,1,0,0,0,11508,11509,5,597,0,0,11509,11510,5,1213,0,0,11510,
        11513,3,996,498,0,11511,11512,5,1208,0,0,11512,11514,3,996,498,0,
        11513,11511,1,0,0,0,11513,11514,1,0,0,0,11514,11515,1,0,0,0,11515,
        11516,5,1214,0,0,11516,11552,1,0,0,0,11517,11519,3,1066,533,0,11518,
        11517,1,0,0,0,11518,11519,1,0,0,0,11519,11520,1,0,0,0,11520,11521,
        5,919,0,0,11521,11522,5,1213,0,0,11522,11523,3,996,498,0,11523,11524,
        5,1208,0,0,11524,11527,3,996,498,0,11525,11526,5,1208,0,0,11526,
        11528,3,996,498,0,11527,11525,1,0,0,0,11527,11528,1,0,0,0,11528,
        11529,1,0,0,0,11529,11530,5,1214,0,0,11530,11552,1,0,0,0,11531,11533,
        3,1066,533,0,11532,11531,1,0,0,0,11532,11533,1,0,0,0,11533,11534,
        1,0,0,0,11534,11535,5,945,0,0,11535,11536,5,1213,0,0,11536,11537,
        3,996,498,0,11537,11538,5,1208,0,0,11538,11539,3,996,498,0,11539,
        11540,5,1208,0,0,11540,11541,3,996,498,0,11541,11542,5,1214,0,0,
        11542,11552,1,0,0,0,11543,11545,3,1066,533,0,11544,11543,1,0,0,0,
        11544,11545,1,0,0,0,11545,11546,1,0,0,0,11546,11547,5,991,0,0,11547,
        11548,5,1213,0,0,11548,11549,3,996,498,0,11549,11550,5,1214,0,0,
        11550,11552,1,0,0,0,11551,11488,1,0,0,0,11551,11496,1,0,0,0,11551,
        11506,1,0,0,0,11551,11518,1,0,0,0,11551,11532,1,0,0,0,11551,11544,
        1,0,0,0,11552,1031,1,0,0,0,11553,11610,5,5,0,0,11554,11557,5,94,
        0,0,11555,11556,5,1213,0,0,11556,11558,5,1214,0,0,11557,11555,1,
        0,0,0,11557,11558,1,0,0,0,11558,11563,1,0,0,0,11559,11560,5,604,
        0,0,11560,11561,5,1213,0,0,11561,11563,5,1214,0,0,11562,11554,1,
        0,0,0,11562,11559,1,0,0,0,11563,11565,1,0,0,0,11564,11566,3,1174,
        587,0,11565,11564,1,0,0,0,11565,11566,1,0,0,0,11566,11610,1,0,0,
        0,11567,11610,5,95,0,0,11568,11570,5,96,0,0,11569,11571,3,722,361,
        0,11570,11569,1,0,0,0,11570,11571,1,0,0,0,11571,11576,1,0,0,0,11572,
        11573,5,605,0,0,11573,11574,5,1213,0,0,11574,11576,5,1214,0,0,11575,
        11568,1,0,0,0,11575,11572,1,0,0,0,11576,11578,1,0,0,0,11577,11579,
        3,1174,587,0,11578,11577,1,0,0,0,11578,11579,1,0,0,0,11579,11610,
        1,0,0,0,11580,11582,5,97,0,0,11581,11583,3,722,361,0,11582,11581,
        1,0,0,0,11582,11583,1,0,0,0,11583,11585,1,0,0,0,11584,11586,3,1174,
        587,0,11585,11584,1,0,0,0,11585,11586,1,0,0,0,11586,11610,1,0,0,
        0,11587,11610,5,98,0,0,11588,11610,5,102,0,0,11589,11591,5,104,0,
        0,11590,11592,3,1174,587,0,11591,11590,1,0,0,0,11591,11592,1,0,0,
        0,11592,11610,1,0,0,0,11593,11594,5,803,0,0,11594,11595,5,1213,0,
        0,11595,11610,5,1214,0,0,11596,11610,5,311,0,0,11597,11610,5,357,
        0,0,11598,11610,5,371,0,0,11599,11610,5,980,0,0,11600,11602,5,981,
        0,0,11601,11603,3,722,361,0,11602,11601,1,0,0,0,11602,11603,1,0,
        0,0,11603,11610,1,0,0,0,11604,11606,5,421,0,0,11605,11607,3,1174,
        587,0,11606,11605,1,0,0,0,11606,11607,1,0,0,0,11607,11610,1,0,0,
        0,11608,11610,5,456,0,0,11609,11553,1,0,0,0,11609,11562,1,0,0,0,
        11609,11567,1,0,0,0,11609,11575,1,0,0,0,11609,11580,1,0,0,0,11609,
        11587,1,0,0,0,11609,11588,1,0,0,0,11609,11589,1,0,0,0,11609,11593,
        1,0,0,0,11609,11596,1,0,0,0,11609,11597,1,0,0,0,11609,11598,1,0,
        0,0,11609,11599,1,0,0,0,11609,11600,1,0,0,0,11609,11604,1,0,0,0,
        11609,11608,1,0,0,0,11610,1033,1,0,0,0,11611,11613,3,1070,535,0,
        11612,11611,1,0,0,0,11612,11613,1,0,0,0,11613,11614,1,0,0,0,11614,
        11615,7,116,0,0,11615,11616,5,1213,0,0,11616,11617,3,996,498,0,11617,
        11618,5,1214,0,0,11618,11635,1,0,0,0,11619,11621,3,1066,533,0,11620,
        11619,1,0,0,0,11620,11621,1,0,0,0,11621,11622,1,0,0,0,11622,11623,
        7,117,0,0,11623,11624,5,1213,0,0,11624,11626,3,996,498,0,11625,11627,
        5,1208,0,0,11626,11625,1,0,0,0,11626,11627,1,0,0,0,11627,11630,1,
        0,0,0,11628,11631,5,274,0,0,11629,11631,3,758,379,0,11630,11628,
        1,0,0,0,11630,11629,1,0,0,0,11630,11631,1,0,0,0,11631,11632,1,0,
        0,0,11632,11633,5,1214,0,0,11633,11635,1,0,0,0,11634,11612,1,0,0,
        0,11634,11620,1,0,0,0,11635,1035,1,0,0,0,11636,11638,3,1066,533,
        0,11637,11636,1,0,0,0,11637,11638,1,0,0,0,11638,11639,1,0,0,0,11639,
        11640,5,622,0,0,11640,11641,5,1213,0,0,11641,11642,3,996,498,0,11642,
        11643,5,1208,0,0,11643,11644,3,996,498,0,11644,11645,5,1208,0,0,
        11645,11646,3,996,498,0,11646,11647,1,0,0,0,11647,11648,3,996,498,
        0,11648,11649,5,1214,0,0,11649,11665,1,0,0,0,11650,11652,3,1066,
        533,0,11651,11650,1,0,0,0,11651,11652,1,0,0,0,11652,11653,1,0,0,
        0,11653,11654,7,118,0,0,11654,11655,5,1213,0,0,11655,11658,3,996,
        498,0,11656,11657,5,1208,0,0,11657,11659,3,996,498,0,11658,11656,
        1,0,0,0,11659,11660,1,0,0,0,11660,11658,1,0,0,0,11660,11661,1,0,
        0,0,11661,11662,1,0,0,0,11662,11663,5,1214,0,0,11663,11665,1,0,0,
        0,11664,11637,1,0,0,0,11664,11651,1,0,0,0,11665,1037,1,0,0,0,11666,
        11668,3,1066,533,0,11667,11666,1,0,0,0,11667,11668,1,0,0,0,11668,
        11669,1,0,0,0,11669,11670,7,119,0,0,11670,11671,5,1213,0,0,11671,
        11672,3,996,498,0,11672,11673,5,1214,0,0,11673,1039,1,0,0,0,11674,
        11675,5,50,0,0,11675,11676,5,1213,0,0,11676,11677,3,996,498,0,11677,
        11690,5,20,0,0,11678,11682,3,688,344,0,11679,11681,3,710,355,0,11680,
        11679,1,0,0,0,11681,11684,1,0,0,0,11682,11680,1,0,0,0,11682,11683,
        1,0,0,0,11683,11691,1,0,0,0,11684,11682,1,0,0,0,11685,11687,3,710,
        355,0,11686,11685,1,0,0,0,11687,11688,1,0,0,0,11688,11686,1,0,0,
        0,11688,11689,1,0,0,0,11689,11691,1,0,0,0,11690,11678,1,0,0,0,11690,
        11686,1,0,0,0,11691,11692,1,0,0,0,11692,11693,5,1214,0,0,11693,11806,
        1,0,0,0,11694,11695,5,1095,0,0,11695,11696,5,1213,0,0,11696,11697,
        3,996,498,0,11697,11698,5,20,0,0,11698,11699,3,688,344,0,11699,11700,
        5,1214,0,0,11700,11806,1,0,0,0,11701,11703,3,1066,533,0,11702,11701,
        1,0,0,0,11702,11703,1,0,0,0,11703,11704,1,0,0,0,11704,11705,5,992,
        0,0,11705,11706,5,1213,0,0,11706,11707,3,996,498,0,11707,11708,5,
        1208,0,0,11708,11709,3,758,379,0,11709,11710,5,1214,0,0,11710,11806,
        1,0,0,0,11711,11713,3,1066,533,0,11712,11711,1,0,0,0,11712,11713,
        1,0,0,0,11713,11714,1,0,0,0,11714,11715,5,679,0,0,11715,11716,5,
        1213,0,0,11716,11717,3,996,498,0,11717,11718,5,1208,0,0,11718,11719,
        3,758,379,0,11719,11720,5,1214,0,0,11720,11806,1,0,0,0,11721,11723,
        3,1066,533,0,11722,11721,1,0,0,0,11722,11723,1,0,0,0,11723,11724,
        1,0,0,0,11724,11725,5,996,0,0,11725,11726,5,1213,0,0,11726,11736,
        3,996,498,0,11727,11728,5,1208,0,0,11728,11734,3,758,379,0,11729,
        11732,5,1208,0,0,11730,11733,3,758,379,0,11731,11733,5,274,0,0,11732,
        11730,1,0,0,0,11732,11731,1,0,0,0,11733,11735,1,0,0,0,11734,11729,
        1,0,0,0,11734,11735,1,0,0,0,11735,11737,1,0,0,0,11736,11727,1,0,
        0,0,11736,11737,1,0,0,0,11737,11738,1,0,0,0,11738,11739,5,1214,0,
        0,11739,11806,1,0,0,0,11740,11742,3,1066,533,0,11741,11740,1,0,0,
        0,11741,11742,1,0,0,0,11742,11743,1,0,0,0,11743,11744,5,993,0,0,
        11744,11745,5,1213,0,0,11745,11755,3,996,498,0,11746,11747,5,1208,
        0,0,11747,11753,3,758,379,0,11748,11751,5,1208,0,0,11749,11752,3,
        758,379,0,11750,11752,5,274,0,0,11751,11749,1,0,0,0,11751,11750,
        1,0,0,0,11752,11754,1,0,0,0,11753,11748,1,0,0,0,11753,11754,1,0,
        0,0,11754,11756,1,0,0,0,11755,11746,1,0,0,0,11755,11756,1,0,0,0,
        11756,11757,1,0,0,0,11757,11758,5,1214,0,0,11758,11806,1,0,0,0,11759,
        11761,3,1066,533,0,11760,11759,1,0,0,0,11760,11761,1,0,0,0,11761,
        11762,1,0,0,0,11762,11763,5,994,0,0,11763,11764,5,1213,0,0,11764,
        11765,3,996,498,0,11765,11768,5,1208,0,0,11766,11769,3,758,379,0,
        11767,11769,5,274,0,0,11768,11766,1,0,0,0,11768,11767,1,0,0,0,11769,
        11770,1,0,0,0,11770,11771,5,1214,0,0,11771,11806,1,0,0,0,11772,11774,
        3,1066,533,0,11773,11772,1,0,0,0,11773,11774,1,0,0,0,11774,11775,
        1,0,0,0,11775,11776,7,120,0,0,11776,11777,5,1213,0,0,11777,11783,
        3,996,498,0,11778,11781,5,1208,0,0,11779,11782,3,758,379,0,11780,
        11782,5,274,0,0,11781,11779,1,0,0,0,11781,11780,1,0,0,0,11782,11784,
        1,0,0,0,11783,11778,1,0,0,0,11783,11784,1,0,0,0,11784,11785,1,0,
        0,0,11785,11786,5,1214,0,0,11786,11806,1,0,0,0,11787,11789,3,1066,
        533,0,11788,11787,1,0,0,0,11788,11789,1,0,0,0,11789,11790,1,0,0,
        0,11790,11791,7,121,0,0,11791,11792,5,1213,0,0,11792,11793,3,996,
        498,0,11793,11794,5,1214,0,0,11794,11806,1,0,0,0,11795,11797,3,1066,
        533,0,11796,11795,1,0,0,0,11796,11797,1,0,0,0,11797,11798,1,0,0,
        0,11798,11799,7,122,0,0,11799,11800,5,1213,0,0,11800,11801,3,996,
        498,0,11801,11802,5,1208,0,0,11802,11803,3,996,498,0,11803,11804,
        5,1214,0,0,11804,11806,1,0,0,0,11805,11674,1,0,0,0,11805,11694,1,
        0,0,0,11805,11702,1,0,0,0,11805,11712,1,0,0,0,11805,11722,1,0,0,
        0,11805,11741,1,0,0,0,11805,11760,1,0,0,0,11805,11773,1,0,0,0,11805,
        11788,1,0,0,0,11805,11796,1,0,0,0,11806,1041,1,0,0,0,11807,11808,
        7,123,0,0,11808,11809,5,1213,0,0,11809,11810,3,996,498,0,11810,11811,
        5,1214,0,0,11811,11858,1,0,0,0,11812,11814,3,1066,533,0,11813,11812,
        1,0,0,0,11813,11814,1,0,0,0,11814,11815,1,0,0,0,11815,11816,5,732,
        0,0,11816,11817,5,1213,0,0,11817,11818,3,996,498,0,11818,11819,5,
        1214,0,0,11819,11858,1,0,0,0,11820,11822,3,1066,533,0,11821,11820,
        1,0,0,0,11821,11822,1,0,0,0,11822,11823,1,0,0,0,11823,11824,5,792,
        0,0,11824,11825,5,1213,0,0,11825,11826,3,996,498,0,11826,11827,5,
        1208,0,0,11827,11828,3,758,379,0,11828,11829,5,1214,0,0,11829,11858,
        1,0,0,0,11830,11832,3,1066,533,0,11831,11830,1,0,0,0,11831,11832,
        1,0,0,0,11832,11833,1,0,0,0,11833,11834,5,786,0,0,11834,11835,5,
        1213,0,0,11835,11836,3,996,498,0,11836,11837,5,1208,0,0,11837,11838,
        3,996,498,0,11838,11839,5,1214,0,0,11839,11858,1,0,0,0,11840,11842,
        3,1066,533,0,11841,11840,1,0,0,0,11841,11842,1,0,0,0,11842,11843,
        1,0,0,0,11843,11844,7,124,0,0,11844,11845,5,1213,0,0,11845,11846,
        3,996,498,0,11846,11847,5,1208,0,0,11847,11848,3,996,498,0,11848,
        11849,5,1214,0,0,11849,11858,1,0,0,0,11850,11851,5,152,0,0,11851,
        11852,5,1213,0,0,11852,11853,7,125,0,0,11853,11854,5,164,0,0,11854,
        11855,3,996,498,0,11855,11856,5,1214,0,0,11856,11858,1,0,0,0,11857,
        11807,1,0,0,0,11857,11813,1,0,0,0,11857,11821,1,0,0,0,11857,11831,
        1,0,0,0,11857,11841,1,0,0,0,11857,11850,1,0,0,0,11858,1043,1,0,0,
        0,11859,11860,7,126,0,0,11860,11861,5,1213,0,0,11861,11888,5,1214,
        0,0,11862,11863,7,126,0,0,11863,11864,5,1213,0,0,11864,11865,3,1100,
        550,0,11865,11866,5,1214,0,0,11866,11888,1,0,0,0,11867,11868,5,181,
        0,0,11868,11869,5,1213,0,0,11869,11870,3,996,498,0,11870,11871,5,
        1214,0,0,11871,11888,1,0,0,0,11872,11873,5,182,0,0,11873,11874,5,
        1213,0,0,11874,11888,5,1214,0,0,11875,11876,5,182,0,0,11876,11877,
        5,1213,0,0,11877,11882,3,996,498,0,11878,11879,5,1208,0,0,11879,
        11881,3,996,498,0,11880,11878,1,0,0,0,11881,11884,1,0,0,0,11882,
        11880,1,0,0,0,11882,11883,1,0,0,0,11883,11885,1,0,0,0,11884,11882,
        1,0,0,0,11885,11886,5,1214,0,0,11886,11888,1,0,0,0,11887,11859,1,
        0,0,0,11887,11862,1,0,0,0,11887,11867,1,0,0,0,11887,11872,1,0,0,
        0,11887,11875,1,0,0,0,11888,1045,1,0,0,0,11889,11891,3,1066,533,
        0,11890,11889,1,0,0,0,11890,11891,1,0,0,0,11891,11892,1,0,0,0,11892,
        11893,7,127,0,0,11893,11894,5,1213,0,0,11894,11895,5,1214,0,0,11895,
        1047,1,0,0,0,11896,11898,3,1070,535,0,11897,11896,1,0,0,0,11897,
        11898,1,0,0,0,11898,11899,1,0,0,0,11899,11900,5,1145,0,0,11900,11901,
        5,1213,0,0,11901,11902,3,758,379,0,11902,11903,5,1214,0,0,11903,
        11933,1,0,0,0,11904,11906,3,1070,535,0,11905,11904,1,0,0,0,11905,
        11906,1,0,0,0,11906,11907,1,0,0,0,11907,11908,5,1146,0,0,11908,11909,
        5,1213,0,0,11909,11910,3,758,379,0,11910,11911,5,1208,0,0,11911,
        11912,3,758,379,0,11912,11913,5,1208,0,0,11913,11914,3,758,379,0,
        11914,11915,5,1208,0,0,11915,11916,3,758,379,0,11916,11917,5,1208,
        0,0,11917,11918,3,758,379,0,11918,11919,5,1208,0,0,11919,11920,3,
        758,379,0,11920,11921,5,1214,0,0,11921,11933,1,0,0,0,11922,11924,
        3,1070,535,0,11923,11922,1,0,0,0,11923,11924,1,0,0,0,11924,11925,
        1,0,0,0,11925,11926,5,1147,0,0,11926,11927,5,1213,0,0,11927,11928,
        3,758,379,0,11928,11929,5,1208,0,0,11929,11930,3,758,379,0,11930,
        11931,5,1214,0,0,11931,11933,1,0,0,0,11932,11897,1,0,0,0,11932,11905,
        1,0,0,0,11932,11923,1,0,0,0,11933,1049,1,0,0,0,11934,11936,3,1066,
        533,0,11935,11934,1,0,0,0,11935,11936,1,0,0,0,11936,11937,1,0,0,
        0,11937,11938,5,810,0,0,11938,11939,5,1213,0,0,11939,11940,3,996,
        498,0,11940,11941,5,1208,0,0,11941,11942,3,996,498,0,11942,11943,
        5,1214,0,0,11943,11957,1,0,0,0,11944,11946,3,1066,533,0,11945,11944,
        1,0,0,0,11945,11946,1,0,0,0,11946,11947,1,0,0,0,11947,11948,5,811,
        0,0,11948,11949,5,1213,0,0,11949,11950,3,996,498,0,11950,11951,5,
        1208,0,0,11951,11952,3,996,498,0,11952,11953,5,1208,0,0,11953,11954,
        3,996,498,0,11954,11955,5,1214,0,0,11955,11957,1,0,0,0,11956,11935,
        1,0,0,0,11956,11945,1,0,0,0,11957,1051,1,0,0,0,11958,11959,5,34,
        0,0,11959,11960,5,1213,0,0,11960,11961,3,996,498,0,11961,11962,5,
        1214,0,0,11962,12000,1,0,0,0,11963,11964,5,134,0,0,11964,11965,5,
        1213,0,0,11965,11966,3,996,498,0,11966,11967,5,1214,0,0,11967,12000,
        1,0,0,0,11968,11969,5,134,0,0,11969,11970,5,1213,0,0,11970,11971,
        3,996,498,0,11971,11972,5,1214,0,0,11972,11974,5,207,0,0,11973,11975,
        5,272,0,0,11974,11973,1,0,0,0,11974,11975,1,0,0,0,11975,11976,1,
        0,0,0,11976,11977,7,128,0,0,11977,12000,1,0,0,0,11978,11979,5,205,
        0,0,11979,11980,5,1213,0,0,11980,11981,3,996,498,0,11981,11982,5,
        1214,0,0,11982,11983,3,720,360,0,11983,12000,1,0,0,0,11984,11985,
        5,731,0,0,11985,11986,5,1213,0,0,11986,11987,3,996,498,0,11987,11988,
        5,1214,0,0,11988,12000,1,0,0,0,11989,11990,5,267,0,0,11990,11991,
        5,1213,0,0,11991,11992,3,996,498,0,11992,11993,5,1214,0,0,11993,
        12000,1,0,0,0,11994,11995,5,861,0,0,11995,11996,5,1213,0,0,11996,
        11997,3,996,498,0,11997,11998,5,1214,0,0,11998,12000,1,0,0,0,11999,
        11958,1,0,0,0,11999,11963,1,0,0,0,11999,11968,1,0,0,0,11999,11978,
        1,0,0,0,11999,11984,1,0,0,0,11999,11989,1,0,0,0,11999,11994,1,0,
        0,0,12000,1053,1,0,0,0,12001,12003,3,1066,533,0,12002,12001,1,0,
        0,0,12002,12003,1,0,0,0,12003,12004,1,0,0,0,12004,12005,5,882,0,
        0,12005,12006,5,1213,0,0,12006,12007,3,996,498,0,12007,12008,5,1208,
        0,0,12008,12016,3,996,498,0,12009,12010,5,1208,0,0,12010,12011,3,
        996,498,0,12011,12012,5,1208,0,0,12012,12013,3,996,498,0,12013,12014,
        5,1208,0,0,12014,12015,3,996,498,0,12015,12017,1,0,0,0,12016,12009,
        1,0,0,0,12016,12017,1,0,0,0,12017,12018,1,0,0,0,12018,12019,5,1214,
        0,0,12019,12091,1,0,0,0,12020,12022,3,1066,533,0,12021,12020,1,0,
        0,0,12021,12022,1,0,0,0,12022,12023,1,0,0,0,12023,12024,5,880,0,
        0,12024,12025,5,1213,0,0,12025,12026,3,996,498,0,12026,12027,5,1208,
        0,0,12027,12037,3,996,498,0,12028,12029,5,1208,0,0,12029,12030,3,
        996,498,0,12030,12031,5,1208,0,0,12031,12032,3,996,498,0,12032,12033,
        5,1208,0,0,12033,12034,3,996,498,0,12034,12035,5,1208,0,0,12035,
        12036,3,996,498,0,12036,12038,1,0,0,0,12037,12028,1,0,0,0,12037,
        12038,1,0,0,0,12038,12039,1,0,0,0,12039,12040,5,1214,0,0,12040,12091,
        1,0,0,0,12041,12043,3,1066,533,0,12042,12041,1,0,0,0,12042,12043,
        1,0,0,0,12043,12044,1,0,0,0,12044,12045,5,879,0,0,12045,12046,5,
        1213,0,0,12046,12047,3,996,498,0,12047,12048,5,1208,0,0,12048,12058,
        3,996,498,0,12049,12050,5,1208,0,0,12050,12051,3,996,498,0,12051,
        12052,5,1208,0,0,12052,12053,3,996,498,0,12053,12054,5,1208,0,0,
        12054,12055,3,996,498,0,12055,12056,5,1208,0,0,12056,12057,3,996,
        498,0,12057,12059,1,0,0,0,12058,12049,1,0,0,0,12058,12059,1,0,0,
        0,12059,12060,1,0,0,0,12060,12061,5,1214,0,0,12061,12091,1,0,0,0,
        12062,12064,3,1066,533,0,12063,12062,1,0,0,0,12063,12064,1,0,0,0,
        12064,12065,1,0,0,0,12065,12066,5,881,0,0,12066,12067,5,1213,0,0,
        12067,12068,3,996,498,0,12068,12069,5,1208,0,0,12069,12072,3,996,
        498,0,12070,12071,5,1208,0,0,12071,12073,3,996,498,0,12072,12070,
        1,0,0,0,12072,12073,1,0,0,0,12073,12074,1,0,0,0,12074,12075,5,1214,
        0,0,12075,12091,1,0,0,0,12076,12078,3,1066,533,0,12077,12076,1,0,
        0,0,12077,12078,1,0,0,0,12078,12079,1,0,0,0,12079,12080,5,1083,0,
        0,12080,12081,5,1213,0,0,12081,12082,3,996,498,0,12082,12083,5,1208,
        0,0,12083,12084,3,996,498,0,12084,12085,5,1208,0,0,12085,12086,3,
        996,498,0,12086,12087,5,1208,0,0,12087,12088,3,996,498,0,12088,12089,
        5,1214,0,0,12089,12091,1,0,0,0,12090,12002,1,0,0,0,12090,12021,1,
        0,0,0,12090,12042,1,0,0,0,12090,12063,1,0,0,0,12090,12077,1,0,0,
        0,12091,1055,1,0,0,0,12092,12094,3,1066,533,0,12093,12092,1,0,0,
        0,12093,12094,1,0,0,0,12094,12095,1,0,0,0,12095,12096,7,129,0,0,
        12096,12097,5,1213,0,0,12097,12098,3,996,498,0,12098,12099,5,1214,
        0,0,12099,12406,1,0,0,0,12100,12101,7,130,0,0,12101,12102,5,1213,
        0,0,12102,12103,3,996,498,0,12103,12104,5,1214,0,0,12104,12406,1,
        0,0,0,12105,12106,5,586,0,0,12106,12107,5,1213,0,0,12107,12108,3,
        996,498,0,12108,12109,5,1208,0,0,12109,12114,3,996,498,0,12110,12111,
        5,1208,0,0,12111,12113,3,996,498,0,12112,12110,1,0,0,0,12113,12116,
        1,0,0,0,12114,12112,1,0,0,0,12114,12115,1,0,0,0,12115,12117,1,0,
        0,0,12116,12114,1,0,0,0,12117,12118,5,1214,0,0,12118,12406,1,0,0,
        0,12119,12121,3,1066,533,0,12120,12119,1,0,0,0,12120,12121,1,0,0,
        0,12121,12122,1,0,0,0,12122,12123,5,1073,0,0,12123,12124,5,1213,
        0,0,12124,12125,5,265,0,0,12125,12126,5,1098,0,0,12126,12127,5,437,
        0,0,12127,12128,5,1213,0,0,12128,12133,3,996,498,0,12129,12130,5,
        1208,0,0,12130,12132,3,996,498,0,12131,12129,1,0,0,0,12132,12135,
        1,0,0,0,12133,12131,1,0,0,0,12133,12134,1,0,0,0,12134,12136,1,0,
        0,0,12135,12133,1,0,0,0,12136,12137,5,1214,0,0,12137,12138,5,1208,
        0,0,12138,12139,3,758,379,0,12139,12140,5,1208,0,0,12140,12141,3,
        758,379,0,12141,12142,5,1214,0,0,12142,12406,1,0,0,0,12143,12145,
        3,1066,533,0,12144,12143,1,0,0,0,12144,12145,1,0,0,0,12145,12146,
        1,0,0,0,12146,12147,5,1074,0,0,12147,12148,5,1213,0,0,12148,12149,
        3,996,498,0,12149,12150,5,1208,0,0,12150,12151,3,758,379,0,12151,
        12152,5,1208,0,0,12152,12153,3,758,379,0,12153,12154,5,1214,0,0,
        12154,12406,1,0,0,0,12155,12157,3,1066,533,0,12156,12155,1,0,0,0,
        12156,12157,1,0,0,0,12157,12158,1,0,0,0,12158,12159,5,643,0,0,12159,
        12160,5,1213,0,0,12160,12161,3,996,498,0,12161,12162,5,1208,0,0,
        12162,12172,3,996,498,0,12163,12164,5,1208,0,0,12164,12165,3,764,
        382,0,12165,12166,5,1208,0,0,12166,12167,3,764,382,0,12167,12168,
        5,1208,0,0,12168,12169,3,764,382,0,12169,12170,5,1208,0,0,12170,
        12171,3,764,382,0,12171,12173,1,0,0,0,12172,12163,1,0,0,0,12172,
        12173,1,0,0,0,12173,12174,1,0,0,0,12174,12175,5,1214,0,0,12175,12406,
        1,0,0,0,12176,12177,5,192,0,0,12177,12178,5,1213,0,0,12178,12179,
        3,996,498,0,12179,12180,5,1208,0,0,12180,12181,3,996,498,0,12181,
        12182,5,1214,0,0,12182,12406,1,0,0,0,12183,12185,3,1066,533,0,12184,
        12183,1,0,0,0,12184,12185,1,0,0,0,12185,12186,1,0,0,0,12186,12187,
        5,711,0,0,12187,12188,5,1213,0,0,12188,12189,3,996,498,0,12189,12190,
        5,1208,0,0,12190,12197,3,996,498,0,12191,12192,5,1208,0,0,12192,
        12195,3,996,498,0,12193,12194,5,1208,0,0,12194,12196,3,996,498,0,
        12195,12193,1,0,0,0,12195,12196,1,0,0,0,12196,12198,1,0,0,0,12197,
        12191,1,0,0,0,12197,12198,1,0,0,0,12198,12199,1,0,0,0,12199,12200,
        5,1214,0,0,12200,12406,1,0,0,0,12201,12203,3,1066,533,0,12202,12201,
        1,0,0,0,12202,12203,1,0,0,0,12203,12204,1,0,0,0,12204,12205,7,38,
        0,0,12205,12206,5,1213,0,0,12206,12207,3,996,498,0,12207,12208,5,
        1208,0,0,12208,12209,3,996,498,0,12209,12210,5,1214,0,0,12210,12406,
        1,0,0,0,12211,12212,5,743,0,0,12212,12213,5,1213,0,0,12213,12214,
        3,996,498,0,12214,12215,5,1208,0,0,12215,12218,3,996,498,0,12216,
        12217,5,1208,0,0,12217,12219,3,996,498,0,12218,12216,1,0,0,0,12218,
        12219,1,0,0,0,12219,12220,1,0,0,0,12220,12221,5,1214,0,0,12221,12406,
        1,0,0,0,12222,12223,7,131,0,0,12223,12224,5,1213,0,0,12224,12225,
        3,996,498,0,12225,12226,5,1214,0,0,12226,12406,1,0,0,0,12227,12229,
        3,1066,533,0,12228,12227,1,0,0,0,12228,12229,1,0,0,0,12229,12230,
        1,0,0,0,12230,12231,7,132,0,0,12231,12232,5,1213,0,0,12232,12233,
        3,996,498,0,12233,12234,5,1208,0,0,12234,12237,3,996,498,0,12235,
        12236,5,1208,0,0,12236,12238,3,996,498,0,12237,12235,1,0,0,0,12237,
        12238,1,0,0,0,12238,12239,1,0,0,0,12239,12240,5,1214,0,0,12240,12406,
        1,0,0,0,12241,12243,3,1066,533,0,12242,12241,1,0,0,0,12242,12243,
        1,0,0,0,12243,12244,1,0,0,0,12244,12245,7,133,0,0,12245,12246,5,
        1213,0,0,12246,12249,3,996,498,0,12247,12248,5,1208,0,0,12248,12250,
        3,996,498,0,12249,12247,1,0,0,0,12249,12250,1,0,0,0,12250,12251,
        1,0,0,0,12251,12252,5,1214,0,0,12252,12406,1,0,0,0,12253,12255,3,
        1066,533,0,12254,12253,1,0,0,0,12254,12255,1,0,0,0,12255,12256,1,
        0,0,0,12256,12257,5,793,0,0,12257,12258,5,1213,0,0,12258,12259,3,
        996,498,0,12259,12260,5,1208,0,0,12260,12261,3,996,498,0,12261,12262,
        5,1208,0,0,12262,12265,3,996,498,0,12263,12264,5,1208,0,0,12264,
        12266,3,996,498,0,12265,12263,1,0,0,0,12265,12266,1,0,0,0,12266,
        12267,1,0,0,0,12267,12268,5,1214,0,0,12268,12406,1,0,0,0,12269,12271,
        3,1066,533,0,12270,12269,1,0,0,0,12270,12271,1,0,0,0,12271,12272,
        1,0,0,0,12272,12273,5,812,0,0,12273,12274,5,1213,0,0,12274,12275,
        3,996,498,0,12275,12276,5,1208,0,0,12276,12287,3,996,498,0,12277,
        12278,5,1208,0,0,12278,12285,3,996,498,0,12279,12280,5,1208,0,0,
        12280,12283,3,996,498,0,12281,12282,5,1208,0,0,12282,12284,3,996,
        498,0,12283,12281,1,0,0,0,12283,12284,1,0,0,0,12284,12286,1,0,0,
        0,12285,12279,1,0,0,0,12285,12286,1,0,0,0,12286,12288,1,0,0,0,12287,
        12277,1,0,0,0,12287,12288,1,0,0,0,12288,12289,1,0,0,0,12289,12290,
        5,1214,0,0,12290,12406,1,0,0,0,12291,12293,3,1066,533,0,12292,12291,
        1,0,0,0,12292,12293,1,0,0,0,12293,12294,1,0,0,0,12294,12295,5,830,
        0,0,12295,12296,5,1213,0,0,12296,12297,3,996,498,0,12297,12298,5,
        1208,0,0,12298,12301,3,996,498,0,12299,12300,5,1208,0,0,12300,12302,
        3,996,498,0,12301,12299,1,0,0,0,12301,12302,1,0,0,0,12302,12303,
        1,0,0,0,12303,12304,5,1214,0,0,12304,12406,1,0,0,0,12305,12307,3,
        1066,533,0,12306,12305,1,0,0,0,12306,12307,1,0,0,0,12307,12308,1,
        0,0,0,12308,12309,5,831,0,0,12309,12310,5,1213,0,0,12310,12311,3,
        996,498,0,12311,12312,5,1208,0,0,12312,12313,3,996,498,0,12313,12314,
        5,1208,0,0,12314,12315,3,996,498,0,12315,12316,5,1214,0,0,12316,
        12406,1,0,0,0,12317,12318,5,304,0,0,12318,12319,5,1213,0,0,12319,
        12320,3,996,498,0,12320,12321,5,190,0,0,12321,12322,3,996,498,0,
        12322,12323,5,1214,0,0,12323,12406,1,0,0,0,12324,12326,3,1066,533,
        0,12325,12324,1,0,0,0,12325,12326,1,0,0,0,12326,12327,1,0,0,0,12327,
        12328,5,943,0,0,12328,12329,5,1213,0,0,12329,12336,3,996,498,0,12330,
        12331,5,1208,0,0,12331,12334,3,996,498,0,12332,12333,5,1208,0,0,
        12333,12335,3,996,498,0,12334,12332,1,0,0,0,12334,12335,1,0,0,0,
        12335,12337,1,0,0,0,12336,12330,1,0,0,0,12336,12337,1,0,0,0,12337,
        12338,1,0,0,0,12338,12339,5,1214,0,0,12339,12406,1,0,0,0,12340,12342,
        3,1066,533,0,12341,12340,1,0,0,0,12341,12342,1,0,0,0,12342,12343,
        1,0,0,0,12343,12344,5,1087,0,0,12344,12345,5,1213,0,0,12345,12346,
        3,996,498,0,12346,12347,5,1208,0,0,12347,12348,3,996,498,0,12348,
        12349,5,1208,0,0,12349,12350,3,996,498,0,12350,12351,5,1214,0,0,
        12351,12352,5,352,0,0,12352,12353,5,1213,0,0,12353,12354,3,1186,
        593,0,12354,12355,5,1208,0,0,12355,12356,3,1186,593,0,12356,12357,
        5,1208,0,0,12357,12358,3,1186,593,0,12358,12359,5,1214,0,0,12359,
        12406,1,0,0,0,12360,12361,5,402,0,0,12361,12362,5,1213,0,0,12362,
        12363,3,996,498,0,12363,12364,5,164,0,0,12364,12367,3,996,498,0,
        12365,12366,7,134,0,0,12366,12368,3,996,498,0,12367,12365,1,0,0,
        0,12367,12368,1,0,0,0,12368,12369,1,0,0,0,12369,12370,5,1214,0,0,
        12370,12406,1,0,0,0,12371,12372,7,135,0,0,12372,12373,5,1213,0,0,
        12373,12374,3,996,498,0,12374,12375,5,1208,0,0,12375,12378,3,996,
        498,0,12376,12377,7,134,0,0,12377,12379,3,996,498,0,12378,12376,
        1,0,0,0,12378,12379,1,0,0,0,12379,12380,1,0,0,0,12380,12381,5,1214,
        0,0,12381,12406,1,0,0,0,12382,12383,7,136,0,0,12383,12384,5,1213,
        0,0,12384,12385,3,996,498,0,12385,12386,5,457,0,0,12386,12389,3,
        1074,537,0,12387,12388,5,474,0,0,12388,12390,5,137,0,0,12389,12387,
        1,0,0,0,12389,12390,1,0,0,0,12390,12391,1,0,0,0,12391,12392,5,1214,
        0,0,12392,12406,1,0,0,0,12393,12394,5,436,0,0,12394,12400,5,1213,
        0,0,12395,12397,7,137,0,0,12396,12398,3,996,498,0,12397,12396,1,
        0,0,0,12397,12398,1,0,0,0,12398,12399,1,0,0,0,12399,12401,5,164,
        0,0,12400,12395,1,0,0,0,12400,12401,1,0,0,0,12401,12402,1,0,0,0,
        12402,12403,3,996,498,0,12403,12404,5,1214,0,0,12404,12406,1,0,0,
        0,12405,12093,1,0,0,0,12405,12100,1,0,0,0,12405,12105,1,0,0,0,12405,
        12120,1,0,0,0,12405,12144,1,0,0,0,12405,12156,1,0,0,0,12405,12176,
        1,0,0,0,12405,12184,1,0,0,0,12405,12202,1,0,0,0,12405,12211,1,0,
        0,0,12405,12222,1,0,0,0,12405,12228,1,0,0,0,12405,12242,1,0,0,0,
        12405,12254,1,0,0,0,12405,12270,1,0,0,0,12405,12292,1,0,0,0,12405,
        12306,1,0,0,0,12405,12317,1,0,0,0,12405,12325,1,0,0,0,12405,12341,
        1,0,0,0,12405,12360,1,0,0,0,12405,12371,1,0,0,0,12405,12382,1,0,
        0,0,12405,12393,1,0,0,0,12406,1057,1,0,0,0,12407,12409,3,1066,533,
        0,12408,12407,1,0,0,0,12408,12409,1,0,0,0,12409,12410,1,0,0,0,12410,
        12411,5,1174,0,0,12411,12412,5,1213,0,0,12412,12413,3,996,498,0,
        12413,12415,5,1214,0,0,12414,12416,3,1078,539,0,12415,12414,1,0,
        0,0,12415,12416,1,0,0,0,12416,12530,1,0,0,0,12417,12419,3,1066,533,
        0,12418,12417,1,0,0,0,12418,12419,1,0,0,0,12419,12420,1,0,0,0,12420,
        12421,5,1175,0,0,12421,12422,5,1213,0,0,12422,12425,3,996,498,0,
        12423,12424,5,1208,0,0,12424,12426,3,758,379,0,12425,12423,1,0,0,
        0,12425,12426,1,0,0,0,12426,12427,1,0,0,0,12427,12428,5,1214,0,0,
        12428,12530,1,0,0,0,12429,12431,3,1066,533,0,12430,12429,1,0,0,0,
        12430,12431,1,0,0,0,12431,12432,1,0,0,0,12432,12433,5,1075,0,0,12433,
        12434,5,1213,0,0,12434,12435,3,996,498,0,12435,12436,5,1214,0,0,
        12436,12530,1,0,0,0,12437,12439,3,1066,533,0,12438,12437,1,0,0,0,
        12438,12439,1,0,0,0,12439,12440,1,0,0,0,12440,12441,5,1176,0,0,12441,
        12442,5,1213,0,0,12442,12445,3,996,498,0,12443,12444,5,1208,0,0,
        12444,12446,3,764,382,0,12445,12443,1,0,0,0,12445,12446,1,0,0,0,
        12446,12447,1,0,0,0,12447,12449,5,1214,0,0,12448,12450,3,1078,539,
        0,12449,12448,1,0,0,0,12449,12450,1,0,0,0,12450,12530,1,0,0,0,12451,
        12453,3,1066,533,0,12452,12451,1,0,0,0,12452,12453,1,0,0,0,12453,
        12454,1,0,0,0,12454,12455,5,1177,0,0,12455,12456,5,1213,0,0,12456,
        12457,3,996,498,0,12457,12458,5,1208,0,0,12458,12459,3,764,382,0,
        12459,12460,5,1214,0,0,12460,12530,1,0,0,0,12461,12463,3,1066,533,
        0,12462,12461,1,0,0,0,12462,12463,1,0,0,0,12463,12464,1,0,0,0,12464,
        12465,5,1178,0,0,12465,12466,5,1213,0,0,12466,12467,3,996,498,0,
        12467,12468,5,1214,0,0,12468,12530,1,0,0,0,12469,12470,5,1179,0,
        0,12470,12471,5,1213,0,0,12471,12472,3,996,498,0,12472,12473,5,1208,
        0,0,12473,12474,3,996,498,0,12474,12475,5,20,0,0,12475,12476,3,688,
        344,0,12476,12477,5,1214,0,0,12477,12530,1,0,0,0,12478,12479,5,1180,
        0,0,12479,12480,5,1213,0,0,12480,12481,3,996,498,0,12481,12482,5,
        1214,0,0,12482,12530,1,0,0,0,12483,12485,3,1066,533,0,12484,12483,
        1,0,0,0,12484,12485,1,0,0,0,12485,12486,1,0,0,0,12486,12487,5,1181,
        0,0,12487,12488,5,1213,0,0,12488,12497,3,996,498,0,12489,12490,5,
        1208,0,0,12490,12491,3,758,379,0,12491,12492,5,1208,0,0,12492,12495,
        3,758,379,0,12493,12494,5,1208,0,0,12494,12496,3,758,379,0,12495,
        12493,1,0,0,0,12495,12496,1,0,0,0,12496,12498,1,0,0,0,12497,12489,
        1,0,0,0,12497,12498,1,0,0,0,12498,12499,1,0,0,0,12499,12500,5,1214,
        0,0,12500,12530,1,0,0,0,12501,12502,5,721,0,0,12502,12503,5,1213,
        0,0,12503,12508,3,1114,557,0,12504,12505,5,1208,0,0,12505,12507,
        3,1114,557,0,12506,12504,1,0,0,0,12507,12510,1,0,0,0,12508,12506,
        1,0,0,0,12508,12509,1,0,0,0,12509,12511,1,0,0,0,12510,12508,1,0,
        0,0,12511,12513,5,1214,0,0,12512,12514,3,1078,539,0,12513,12512,
        1,0,0,0,12513,12514,1,0,0,0,12514,12530,1,0,0,0,12515,12516,5,722,
        0,0,12516,12517,5,1213,0,0,12517,12522,3,1114,557,0,12518,12519,
        5,1208,0,0,12519,12521,3,1114,557,0,12520,12518,1,0,0,0,12521,12524,
        1,0,0,0,12522,12520,1,0,0,0,12522,12523,1,0,0,0,12523,12525,1,0,
        0,0,12524,12522,1,0,0,0,12525,12527,5,1214,0,0,12526,12528,3,1078,
        539,0,12527,12526,1,0,0,0,12527,12528,1,0,0,0,12528,12530,1,0,0,
        0,12529,12408,1,0,0,0,12529,12418,1,0,0,0,12529,12430,1,0,0,0,12529,
        12438,1,0,0,0,12529,12452,1,0,0,0,12529,12462,1,0,0,0,12529,12469,
        1,0,0,0,12529,12478,1,0,0,0,12529,12484,1,0,0,0,12529,12501,1,0,
        0,0,12529,12515,1,0,0,0,12530,1059,1,0,0,0,12531,12532,5,1068,0,
        0,12532,12533,5,1213,0,0,12533,12534,3,996,498,0,12534,12535,5,1214,
        0,0,12535,12779,1,0,0,0,12536,12538,3,1066,533,0,12537,12536,1,0,
        0,0,12537,12538,1,0,0,0,12538,12539,1,0,0,0,12539,12540,5,1075,0,
        0,12540,12541,5,1213,0,0,12541,12542,3,996,498,0,12542,12543,5,1214,
        0,0,12543,12779,1,0,0,0,12544,12545,5,1054,0,0,12545,12546,5,1213,
        0,0,12546,12548,3,758,379,0,12547,12549,3,1116,558,0,12548,12547,
        1,0,0,0,12548,12549,1,0,0,0,12549,12551,1,0,0,0,12550,12552,3,1140,
        570,0,12551,12550,1,0,0,0,12551,12552,1,0,0,0,12552,12554,1,0,0,
        0,12553,12555,3,1138,569,0,12554,12553,1,0,0,0,12554,12555,1,0,0,
        0,12555,12556,1,0,0,0,12556,12557,5,1214,0,0,12557,12779,1,0,0,0,
        12558,12559,5,1056,0,0,12559,12560,5,1213,0,0,12560,12561,7,138,
        0,0,12561,12564,3,996,498,0,12562,12563,5,20,0,0,12563,12565,3,688,
        344,0,12564,12562,1,0,0,0,12564,12565,1,0,0,0,12565,12567,1,0,0,
        0,12566,12568,3,1136,568,0,12567,12566,1,0,0,0,12567,12568,1,0,0,
        0,12568,12574,1,0,0,0,12569,12571,5,474,0,0,12570,12572,5,268,0,
        0,12571,12570,1,0,0,0,12571,12572,1,0,0,0,12572,12573,1,0,0,0,12573,
        12575,5,554,0,0,12574,12569,1,0,0,0,12574,12575,1,0,0,0,12575,12578,
        1,0,0,0,12576,12577,5,1023,0,0,12577,12579,3,758,379,0,12578,12576,
        1,0,0,0,12578,12579,1,0,0,0,12579,12582,1,0,0,0,12580,12581,7,139,
        0,0,12581,12583,5,1047,0,0,12582,12580,1,0,0,0,12582,12583,1,0,0,
        0,12583,12590,1,0,0,0,12584,12585,5,268,0,0,12585,12591,5,704,0,
        0,12586,12587,5,704,0,0,12587,12588,5,927,0,0,12588,12589,5,1224,
        0,0,12589,12591,3,764,382,0,12590,12584,1,0,0,0,12590,12586,1,0,
        0,0,12590,12591,1,0,0,0,12591,12592,1,0,0,0,12592,12593,5,1214,0,
        0,12593,12779,1,0,0,0,12594,12595,5,1048,0,0,12595,12596,5,1213,
        0,0,12596,12598,3,996,498,0,12597,12599,3,1140,570,0,12598,12597,
        1,0,0,0,12598,12599,1,0,0,0,12599,12600,1,0,0,0,12600,12601,5,1214,
        0,0,12601,12779,1,0,0,0,12602,12603,5,1049,0,0,12603,12604,5,1213,
        0,0,12604,12605,5,789,0,0,12605,12608,3,784,392,0,12606,12607,5,
        1208,0,0,12607,12609,3,1128,564,0,12608,12606,1,0,0,0,12608,12609,
        1,0,0,0,12609,12612,1,0,0,0,12610,12611,5,1208,0,0,12611,12613,3,
        1120,560,0,12612,12610,1,0,0,0,12612,12613,1,0,0,0,12613,12616,1,
        0,0,0,12614,12615,5,1208,0,0,12615,12617,3,1126,563,0,12616,12614,
        1,0,0,0,12616,12617,1,0,0,0,12617,12619,1,0,0,0,12618,12620,3,1140,
        570,0,12619,12618,1,0,0,0,12619,12620,1,0,0,0,12620,12621,1,0,0,
        0,12621,12622,5,1214,0,0,12622,12779,1,0,0,0,12623,12624,5,1050,
        0,0,12624,12626,5,1213,0,0,12625,12627,3,1128,564,0,12626,12625,
        1,0,0,0,12626,12627,1,0,0,0,12627,12636,1,0,0,0,12628,12633,3,1124,
        562,0,12629,12630,5,1208,0,0,12630,12632,3,1124,562,0,12631,12629,
        1,0,0,0,12632,12635,1,0,0,0,12633,12631,1,0,0,0,12633,12634,1,0,
        0,0,12634,12637,1,0,0,0,12635,12633,1,0,0,0,12636,12628,1,0,0,0,
        12636,12637,1,0,0,0,12637,12639,1,0,0,0,12638,12640,3,1142,571,0,
        12639,12638,1,0,0,0,12639,12640,1,0,0,0,12640,12642,1,0,0,0,12641,
        12643,3,1140,570,0,12642,12641,1,0,0,0,12642,12643,1,0,0,0,12643,
        12644,1,0,0,0,12644,12779,5,1214,0,0,12645,12646,5,1046,0,0,12646,
        12647,5,1213,0,0,12647,12652,3,996,498,0,12648,12649,5,1208,0,0,
        12649,12651,3,996,498,0,12650,12648,1,0,0,0,12651,12654,1,0,0,0,
        12652,12650,1,0,0,0,12652,12653,1,0,0,0,12653,12656,1,0,0,0,12654,
        12652,1,0,0,0,12655,12657,3,1140,570,0,12656,12655,1,0,0,0,12656,
        12657,1,0,0,0,12657,12658,1,0,0,0,12658,12659,5,1214,0,0,12659,12779,
        1,0,0,0,12660,12661,5,1045,0,0,12661,12662,5,1213,0,0,12662,12664,
        3,996,498,0,12663,12665,3,1140,570,0,12664,12663,1,0,0,0,12664,12665,
        1,0,0,0,12665,12666,1,0,0,0,12666,12667,5,1214,0,0,12667,12779,1,
        0,0,0,12668,12669,5,1053,0,0,12669,12670,5,1213,0,0,12670,12671,
        5,789,0,0,12671,12674,3,784,392,0,12672,12673,5,1208,0,0,12673,12675,
        3,996,498,0,12674,12672,1,0,0,0,12674,12675,1,0,0,0,12675,12677,
        1,0,0,0,12676,12678,3,1140,570,0,12677,12676,1,0,0,0,12677,12678,
        1,0,0,0,12678,12679,1,0,0,0,12679,12680,5,1214,0,0,12680,12779,1,
        0,0,0,12681,12682,5,1058,0,0,12682,12683,5,1213,0,0,12683,12685,
        3,996,498,0,12684,12686,3,1140,570,0,12685,12684,1,0,0,0,12685,12686,
        1,0,0,0,12686,12687,1,0,0,0,12687,12688,5,1214,0,0,12688,12779,1,
        0,0,0,12689,12690,5,1052,0,0,12690,12691,5,1213,0,0,12691,12692,
        7,138,0,0,12692,12693,3,996,498,0,12693,12694,7,140,0,0,12694,12695,
        5,1037,0,0,12695,12696,5,1214,0,0,12696,12779,1,0,0,0,12697,12698,
        5,1060,0,0,12698,12699,5,1213,0,0,12699,12700,7,141,0,0,12700,12701,
        3,996,498,0,12701,12702,5,491,0,0,12702,12703,5,426,0,0,12703,12704,
        5,1055,0,0,12704,12705,5,459,0,0,12705,12710,3,996,498,0,12706,12707,
        5,790,0,0,12707,12711,3,758,379,0,12708,12709,5,268,0,0,12709,12711,
        5,790,0,0,12710,12706,1,0,0,0,12710,12708,1,0,0,0,12710,12711,1,
        0,0,0,12711,12714,1,0,0,0,12712,12713,5,646,0,0,12713,12715,3,996,
        498,0,12714,12712,1,0,0,0,12714,12715,1,0,0,0,12715,12716,1,0,0,
        0,12716,12717,5,1214,0,0,12717,12779,1,0,0,0,12718,12719,5,1043,
        0,0,12719,12720,5,1213,0,0,12720,12731,3,996,498,0,12721,12722,5,
        291,0,0,12722,12723,5,42,0,0,12723,12728,3,988,494,0,12724,12725,
        5,1208,0,0,12725,12727,3,988,494,0,12726,12724,1,0,0,0,12727,12730,
        1,0,0,0,12728,12726,1,0,0,0,12728,12729,1,0,0,0,12729,12732,1,0,
        0,0,12730,12728,1,0,0,0,12731,12721,1,0,0,0,12731,12732,1,0,0,0,
        12732,12734,1,0,0,0,12733,12735,3,1140,570,0,12734,12733,1,0,0,0,
        12734,12735,1,0,0,0,12735,12736,1,0,0,0,12736,12737,5,1214,0,0,12737,
        12779,1,0,0,0,12738,12739,5,1103,0,0,12739,12740,5,1213,0,0,12740,
        12741,3,996,498,0,12741,12742,5,1208,0,0,12742,12743,3,996,498,0,
        12743,12744,5,1208,0,0,12744,12745,3,996,498,0,12745,12746,5,1208,
        0,0,12746,12751,3,996,498,0,12747,12748,5,1208,0,0,12748,12750,3,
        996,498,0,12749,12747,1,0,0,0,12750,12753,1,0,0,0,12751,12749,1,
        0,0,0,12751,12752,1,0,0,0,12752,12754,1,0,0,0,12753,12751,1,0,0,
        0,12754,12755,5,1214,0,0,12755,12779,1,0,0,0,12756,12757,3,1068,
        534,0,12757,12758,5,1101,0,0,12758,12759,5,1213,0,0,12759,12760,
        3,996,498,0,12760,12761,5,1208,0,0,12761,12762,3,996,498,0,12762,
        12763,5,1208,0,0,12763,12764,3,996,498,0,12764,12765,5,1208,0,0,
        12765,12766,3,996,498,0,12766,12767,5,1214,0,0,12767,12779,1,0,0,
        0,12768,12769,3,1068,534,0,12769,12770,5,1102,0,0,12770,12771,5,
        1213,0,0,12771,12772,3,996,498,0,12772,12773,5,1208,0,0,12773,12774,
        3,996,498,0,12774,12775,5,1208,0,0,12775,12776,3,996,498,0,12776,
        12777,5,1214,0,0,12777,12779,1,0,0,0,12778,12531,1,0,0,0,12778,12537,
        1,0,0,0,12778,12544,1,0,0,0,12778,12558,1,0,0,0,12778,12594,1,0,
        0,0,12778,12602,1,0,0,0,12778,12623,1,0,0,0,12778,12645,1,0,0,0,
        12778,12660,1,0,0,0,12778,12668,1,0,0,0,12778,12681,1,0,0,0,12778,
        12689,1,0,0,0,12778,12697,1,0,0,0,12778,12718,1,0,0,0,12778,12738,
        1,0,0,0,12778,12756,1,0,0,0,12778,12768,1,0,0,0,12779,1061,1,0,0,
        0,12780,12781,3,796,398,0,12781,12782,5,1213,0,0,12782,12787,3,996,
        498,0,12783,12784,5,1208,0,0,12784,12786,3,996,498,0,12785,12783,
        1,0,0,0,12786,12789,1,0,0,0,12787,12785,1,0,0,0,12787,12788,1,0,
        0,0,12788,12790,1,0,0,0,12789,12787,1,0,0,0,12790,12793,5,1214,0,
        0,12791,12794,3,1078,539,0,12792,12794,3,1102,551,0,12793,12791,
        1,0,0,0,12793,12792,1,0,0,0,12793,12794,1,0,0,0,12794,12803,1,0,
        0,0,12795,12796,3,796,398,0,12796,12797,5,1213,0,0,12797,12800,5,
        1214,0,0,12798,12801,3,1078,539,0,12799,12801,3,1102,551,0,12800,
        12798,1,0,0,0,12800,12799,1,0,0,0,12800,12801,1,0,0,0,12801,12803,
        1,0,0,0,12802,12780,1,0,0,0,12802,12795,1,0,0,0,12803,1063,1,0,0,
        0,12804,12805,5,48,0,0,12805,12806,5,1213,0,0,12806,12811,3,994,
        497,0,12807,12808,5,1208,0,0,12808,12810,3,994,497,0,12809,12807,
        1,0,0,0,12810,12813,1,0,0,0,12811,12809,1,0,0,0,12811,12812,1,0,
        0,0,12812,12816,1,0,0,0,12813,12811,1,0,0,0,12814,12815,5,1208,0,
        0,12815,12817,3,1086,543,0,12816,12814,1,0,0,0,12816,12817,1,0,0,
        0,12817,12818,1,0,0,0,12818,12819,5,1214,0,0,12819,12832,1,0,0,0,
        12820,12821,5,320,0,0,12821,12822,5,1213,0,0,12822,12823,3,996,498,
        0,12823,12824,5,35,0,0,12824,12827,3,1088,544,0,12825,12826,5,1208,
        0,0,12826,12828,3,1098,549,0,12827,12825,1,0,0,0,12827,12828,1,0,
        0,0,12828,12829,1,0,0,0,12829,12830,5,1214,0,0,12830,12832,1,0,0,
        0,12831,12804,1,0,0,0,12831,12820,1,0,0,0,12832,1065,1,0,0,0,12833,
        12834,5,1091,0,0,12834,12835,5,1209,0,0,12835,1067,1,0,0,0,12836,
        12837,5,1092,0,0,12837,12838,5,1209,0,0,12838,1069,1,0,0,0,12839,
        12840,5,1088,0,0,12840,12841,5,1209,0,0,12841,1071,1,0,0,0,12842,
        12843,5,1090,0,0,12843,12844,5,1209,0,0,12844,1073,1,0,0,0,12845,
        12846,7,142,0,0,12846,1075,1,0,0,0,12847,12848,5,1213,0,0,12848,
        12853,3,1080,540,0,12849,12850,5,1208,0,0,12850,12852,3,1080,540,
        0,12851,12849,1,0,0,0,12852,12855,1,0,0,0,12853,12851,1,0,0,0,12853,
        12854,1,0,0,0,12854,12856,1,0,0,0,12855,12853,1,0,0,0,12856,12857,
        5,1214,0,0,12857,1077,1,0,0,0,12858,12859,5,352,0,0,12859,12864,
        3,688,344,0,12860,12861,5,352,0,0,12861,12862,5,944,0,0,12862,12864,
        3,784,392,0,12863,12858,1,0,0,0,12863,12860,1,0,0,0,12864,1079,1,
        0,0,0,12865,12870,3,1084,542,0,12866,12870,3,732,366,0,12867,12870,
        3,728,364,0,12868,12870,3,730,365,0,12869,12865,1,0,0,0,12869,12866,
        1,0,0,0,12869,12867,1,0,0,0,12869,12868,1,0,0,0,12870,1081,1,0,0,
        0,12871,12877,5,1213,0,0,12872,12873,3,1084,542,0,12873,12874,5,
        1208,0,0,12874,12876,1,0,0,0,12875,12872,1,0,0,0,12876,12879,1,0,
        0,0,12877,12875,1,0,0,0,12877,12878,1,0,0,0,12878,12880,1,0,0,0,
        12879,12877,1,0,0,0,12880,12888,3,688,344,0,12881,12884,5,1208,0,
        0,12882,12885,3,1084,542,0,12883,12885,3,728,364,0,12884,12882,1,
        0,0,0,12884,12883,1,0,0,0,12885,12887,1,0,0,0,12886,12881,1,0,0,
        0,12887,12890,1,0,0,0,12888,12886,1,0,0,0,12888,12889,1,0,0,0,12889,
        12891,1,0,0,0,12890,12888,1,0,0,0,12891,12892,5,1214,0,0,12892,1083,
        1,0,0,0,12893,12897,3,734,367,0,12894,12897,3,738,369,0,12895,12897,
        3,736,368,0,12896,12893,1,0,0,0,12896,12894,1,0,0,0,12896,12895,
        1,0,0,0,12897,1085,1,0,0,0,12898,12899,5,268,0,0,12899,12902,5,47,
        0,0,12900,12901,7,8,0,0,12901,12903,5,1016,0,0,12902,12900,1,0,0,
        0,12902,12903,1,0,0,0,12903,12906,1,0,0,0,12904,12906,5,1016,0,0,
        12905,12898,1,0,0,0,12905,12904,1,0,0,0,12906,1087,1,0,0,0,12907,
        12911,3,1092,546,0,12908,12911,3,1094,547,0,12909,12911,3,1090,545,
        0,12910,12907,1,0,0,0,12910,12908,1,0,0,0,12910,12909,1,0,0,0,12911,
        1089,1,0,0,0,12912,12919,3,1096,548,0,12913,12916,5,1219,0,0,12914,
        12915,5,16,0,0,12915,12917,3,996,498,0,12916,12914,1,0,0,0,12916,
        12917,1,0,0,0,12917,12919,1,0,0,0,12918,12912,1,0,0,0,12918,12913,
        1,0,0,0,12919,12924,1,0,0,0,12920,12921,5,1208,0,0,12921,12923,3,
        1096,548,0,12922,12920,1,0,0,0,12923,12926,1,0,0,0,12924,12922,1,
        0,0,0,12924,12925,1,0,0,0,12925,12927,1,0,0,0,12926,12924,1,0,0,
        0,12927,12928,5,1208,0,0,12928,12929,3,1092,546,0,12929,1091,1,0,
        0,0,12930,12931,3,996,498,0,12931,12934,5,16,0,0,12932,12935,3,996,
        498,0,12933,12935,5,1219,0,0,12934,12932,1,0,0,0,12934,12933,1,0,
        0,0,12935,12938,1,0,0,0,12936,12937,5,129,0,0,12937,12939,3,996,
        498,0,12938,12936,1,0,0,0,12938,12939,1,0,0,0,12939,1093,1,0,0,0,
        12940,12941,5,1219,0,0,12941,12944,5,16,0,0,12942,12945,3,996,498,
        0,12943,12945,5,1219,0,0,12944,12942,1,0,0,0,12944,12943,1,0,0,0,
        12945,1095,1,0,0,0,12946,12947,3,996,498,0,12947,12948,5,16,0,0,
        12948,12949,3,996,498,0,12949,12952,1,0,0,0,12950,12951,5,129,0,
        0,12951,12953,3,996,498,0,12952,12950,1,0,0,0,12952,12953,1,0,0,
        0,12953,1097,1,0,0,0,12954,12955,5,268,0,0,12955,12958,5,873,0,0,
        12956,12957,7,8,0,0,12957,12959,5,1016,0,0,12958,12956,1,0,0,0,12958,
        12959,1,0,0,0,12959,12962,1,0,0,0,12960,12962,5,1016,0,0,12961,12954,
        1,0,0,0,12961,12960,1,0,0,0,12962,1099,1,0,0,0,12963,12972,3,996,
        498,0,12964,12965,5,236,0,0,12965,12966,5,1224,0,0,12966,12967,3,
        758,379,0,12967,12968,5,577,0,0,12968,12969,5,457,0,0,12969,12970,
        5,1224,0,0,12970,12971,3,758,379,0,12971,12973,1,0,0,0,12972,12964,
        1,0,0,0,12972,12973,1,0,0,0,12973,12983,1,0,0,0,12974,12975,3,996,
        498,0,12975,12976,5,236,0,0,12976,12977,5,1224,0,0,12977,12978,3,
        758,379,0,12978,12983,1,0,0,0,12979,12980,5,236,0,0,12980,12981,
        5,1224,0,0,12981,12983,3,758,379,0,12982,12963,1,0,0,0,12982,12974,
        1,0,0,0,12982,12979,1,0,0,0,12983,1101,1,0,0,0,12984,12985,5,295,
        0,0,12985,12987,5,1213,0,0,12986,12988,3,1108,554,0,12987,12986,
        1,0,0,0,12987,12988,1,0,0,0,12988,12990,1,0,0,0,12989,12991,3,1110,
        555,0,12990,12989,1,0,0,0,12990,12991,1,0,0,0,12991,12993,1,0,0,
        0,12992,12994,3,1112,556,0,12993,12992,1,0,0,0,12993,12994,1,0,0,
        0,12994,12995,1,0,0,0,12995,12996,5,1214,0,0,12996,1103,1,0,0,0,
        12997,12998,5,295,0,0,12998,13000,5,1213,0,0,12999,13001,3,1108,
        554,0,13000,12999,1,0,0,0,13000,13001,1,0,0,0,13001,13002,1,0,0,
        0,13002,13003,3,1110,555,0,13003,13004,5,1214,0,0,13004,1105,1,0,
        0,0,13005,13006,5,295,0,0,13006,13008,5,1213,0,0,13007,13009,3,1108,
        554,0,13008,13007,1,0,0,0,13008,13009,1,0,0,0,13009,13010,1,0,0,
        0,13010,13012,3,1110,555,0,13011,13013,3,1148,574,0,13012,13011,
        1,0,0,0,13012,13013,1,0,0,0,13013,13014,1,0,0,0,13014,13015,5,1214,
        0,0,13015,1107,1,0,0,0,13016,13017,5,840,0,0,13017,13018,5,42,0,
        0,13018,13023,3,996,498,0,13019,13020,5,1208,0,0,13020,13022,3,996,
        498,0,13021,13019,1,0,0,0,13022,13025,1,0,0,0,13023,13021,1,0,0,
        0,13023,13024,1,0,0,0,13024,1109,1,0,0,0,13025,13023,1,0,0,0,13026,
        13027,5,291,0,0,13027,13028,5,42,0,0,13028,13033,3,988,494,0,13029,
        13030,5,1208,0,0,13030,13032,3,988,494,0,13031,13029,1,0,0,0,13032,
        13035,1,0,0,0,13033,13031,1,0,0,0,13033,13034,1,0,0,0,13034,13039,
        1,0,0,0,13035,13033,1,0,0,0,13036,13037,5,884,0,0,13037,13038,5,
        470,0,0,13038,13040,3,994,497,0,13039,13036,1,0,0,0,13039,13040,
        1,0,0,0,13040,1111,1,0,0,0,13041,13126,5,364,0,0,13042,13043,5,1013,
        0,0,13043,13127,5,858,0,0,13044,13045,3,1146,573,0,13045,13046,5,
        858,0,0,13046,13127,1,0,0,0,13047,13048,5,93,0,0,13048,13127,5,361,
        0,0,13049,13124,5,35,0,0,13050,13051,5,1013,0,0,13051,13052,5,858,
        0,0,13052,13053,5,16,0,0,13053,13054,5,1013,0,0,13054,13125,5,675,
        0,0,13055,13056,5,1013,0,0,13056,13057,5,858,0,0,13057,13058,5,16,
        0,0,13058,13059,3,1146,573,0,13059,13060,5,858,0,0,13060,13125,1,
        0,0,0,13061,13062,5,1013,0,0,13062,13063,5,858,0,0,13063,13064,5,
        16,0,0,13064,13065,5,93,0,0,13065,13125,5,361,0,0,13066,13067,5,
        1013,0,0,13067,13068,5,858,0,0,13068,13069,5,16,0,0,13069,13070,
        3,1146,573,0,13070,13071,5,675,0,0,13071,13125,1,0,0,0,13072,13073,
        3,1146,573,0,13073,13074,5,858,0,0,13074,13075,5,16,0,0,13075,13076,
        5,1013,0,0,13076,13077,5,675,0,0,13077,13125,1,0,0,0,13078,13079,
        3,1146,573,0,13079,13080,5,858,0,0,13080,13081,5,16,0,0,13081,13082,
        3,1146,573,0,13082,13083,5,858,0,0,13083,13125,1,0,0,0,13084,13085,
        3,1146,573,0,13085,13086,5,858,0,0,13086,13087,5,16,0,0,13087,13088,
        5,93,0,0,13088,13089,5,361,0,0,13089,13125,1,0,0,0,13090,13091,3,
        1146,573,0,13091,13092,5,858,0,0,13092,13093,5,16,0,0,13093,13094,
        3,1146,573,0,13094,13095,5,675,0,0,13095,13125,1,0,0,0,13096,13097,
        5,93,0,0,13097,13098,5,361,0,0,13098,13099,5,16,0,0,13099,13100,
        5,1013,0,0,13100,13125,5,675,0,0,13101,13102,5,93,0,0,13102,13103,
        5,361,0,0,13103,13104,5,16,0,0,13104,13105,5,93,0,0,13105,13125,
        5,361,0,0,13106,13107,5,93,0,0,13107,13108,5,361,0,0,13108,13109,
        5,16,0,0,13109,13110,3,1146,573,0,13110,13111,5,675,0,0,13111,13125,
        1,0,0,0,13112,13113,3,1146,573,0,13113,13114,5,675,0,0,13114,13115,
        5,16,0,0,13115,13116,5,1013,0,0,13116,13117,5,675,0,0,13117,13125,
        1,0,0,0,13118,13119,3,1146,573,0,13119,13120,5,675,0,0,13120,13121,
        5,16,0,0,13121,13122,3,1146,573,0,13122,13123,5,675,0,0,13123,13125,
        1,0,0,0,13124,13050,1,0,0,0,13124,13055,1,0,0,0,13124,13061,1,0,
        0,0,13124,13066,1,0,0,0,13124,13072,1,0,0,0,13124,13078,1,0,0,0,
        13124,13084,1,0,0,0,13124,13090,1,0,0,0,13124,13096,1,0,0,0,13124,
        13101,1,0,0,0,13124,13106,1,0,0,0,13124,13112,1,0,0,0,13124,13118,
        1,0,0,0,13125,13127,1,0,0,0,13126,13042,1,0,0,0,13126,13044,1,0,
        0,0,13126,13047,1,0,0,0,13126,13049,1,0,0,0,13127,1113,1,0,0,0,13128,
        13133,3,996,498,0,13129,13130,5,1213,0,0,13130,13131,3,734,367,0,
        13131,13132,5,1214,0,0,13132,13134,1,0,0,0,13133,13129,1,0,0,0,13133,
        13134,1,0,0,0,13134,13137,1,0,0,0,13135,13136,5,20,0,0,13136,13138,
        3,808,404,0,13137,13135,1,0,0,0,13137,13138,1,0,0,0,13138,1115,1,
        0,0,0,13139,13142,5,845,0,0,13140,13141,5,42,0,0,13141,13143,5,459,
        0,0,13142,13140,1,0,0,0,13142,13143,1,0,0,0,13143,13153,1,0,0,0,
        13144,13154,3,784,392,0,13145,13150,3,1118,559,0,13146,13147,5,1208,
        0,0,13147,13149,3,1118,559,0,13148,13146,1,0,0,0,13149,13152,1,0,
        0,0,13150,13148,1,0,0,0,13150,13151,1,0,0,0,13151,13154,1,0,0,0,
        13152,13150,1,0,0,0,13153,13144,1,0,0,0,13153,13145,1,0,0,0,13154,
        1117,1,0,0,0,13155,13156,3,784,392,0,13156,13157,5,20,0,0,13157,
        13158,3,810,405,0,13158,1119,1,0,0,0,13159,13160,5,1044,0,0,13160,
        13161,5,1213,0,0,13161,13166,3,1122,561,0,13162,13163,5,1208,0,0,
        13163,13165,3,1122,561,0,13164,13162,1,0,0,0,13165,13168,1,0,0,0,
        13166,13164,1,0,0,0,13166,13167,1,0,0,0,13167,13169,1,0,0,0,13168,
        13166,1,0,0,0,13169,13170,5,1214,0,0,13170,1121,1,0,0,0,13171,13174,
        3,784,392,0,13172,13173,5,20,0,0,13173,13175,3,808,404,0,13174,13172,
        1,0,0,0,13174,13175,1,0,0,0,13175,1123,1,0,0,0,13176,13179,3,784,
        392,0,13177,13178,5,20,0,0,13178,13180,3,808,404,0,13179,13177,1,
        0,0,0,13179,13180,1,0,0,0,13180,1125,1,0,0,0,13181,13183,3,996,498,
        0,13182,13184,3,1142,571,0,13183,13182,1,0,0,0,13183,13184,1,0,0,
        0,13184,1127,1,0,0,0,13185,13186,5,1051,0,0,13186,13187,5,1213,0,
        0,13187,13192,3,1130,565,0,13188,13189,5,1208,0,0,13189,13191,3,
        1130,565,0,13190,13188,1,0,0,0,13191,13194,1,0,0,0,13192,13190,1,
        0,0,0,13192,13193,1,0,0,0,13193,13195,1,0,0,0,13194,13192,1,0,0,
        0,13195,13196,5,1214,0,0,13196,1129,1,0,0,0,13197,13198,3,758,379,
        0,13198,13199,5,20,0,0,13199,13200,3,808,404,0,13200,13206,1,0,0,
        0,13201,13202,5,111,0,0,13202,13206,3,758,379,0,13203,13204,5,268,
        0,0,13204,13206,5,111,0,0,13205,13197,1,0,0,0,13205,13201,1,0,0,
        0,13205,13203,1,0,0,0,13206,1131,1,0,0,0,13207,13213,5,579,0,0,13208,
        13209,3,784,392,0,13209,13210,5,159,0,0,13210,13211,5,829,0,0,13211,
        13214,1,0,0,0,13212,13214,3,1134,567,0,13213,13208,1,0,0,0,13213,
        13212,1,0,0,0,13214,13225,1,0,0,0,13215,13221,5,1208,0,0,13216,13217,
        3,784,392,0,13217,13218,5,159,0,0,13218,13219,5,829,0,0,13219,13222,
        1,0,0,0,13220,13222,3,1134,567,0,13221,13216,1,0,0,0,13221,13220,
        1,0,0,0,13222,13224,1,0,0,0,13223,13215,1,0,0,0,13224,13227,1,0,
        0,0,13225,13223,1,0,0,0,13225,13226,1,0,0,0,13226,1133,1,0,0,0,13227,
        13225,1,0,0,0,13228,13229,3,788,394,0,13229,13232,3,688,344,0,13230,
        13231,5,1082,0,0,13231,13233,3,758,379,0,13232,13230,1,0,0,0,13232,
        13233,1,0,0,0,13233,13236,1,0,0,0,13234,13235,5,111,0,0,13235,13237,
        3,754,377,0,13236,13234,1,0,0,0,13236,13237,1,0,0,0,13237,1135,1,
        0,0,0,13238,13239,5,653,0,0,13239,13240,3,758,379,0,13240,1137,1,
        0,0,0,13241,13242,7,143,0,0,13242,13243,5,286,0,0,13243,13244,5,
        649,0,0,13244,1139,1,0,0,0,13245,13246,5,889,0,0,13246,13247,7,144,
        0,0,13247,1141,1,0,0,0,13248,13256,5,289,0,0,13249,13250,7,145,0,
        0,13250,13251,5,286,0,0,13251,13257,5,274,0,0,13252,13253,5,794,
        0,0,13253,13254,5,286,0,0,13254,13255,5,268,0,0,13255,13257,5,593,
        0,0,13256,13249,1,0,0,0,13256,13252,1,0,0,0,13257,1143,1,0,0,0,13258,
        13259,7,146,0,0,13259,13260,5,806,0,0,13260,1145,1,0,0,0,13261,13262,
        3,764,382,0,13262,1147,1,0,0,0,13263,13264,5,474,0,0,13264,13265,
        5,986,0,0,13265,13266,7,147,0,0,13266,1149,1,0,0,0,13267,13268,5,
        854,0,0,13268,13269,5,1213,0,0,13269,13270,3,1152,576,0,13270,13272,
        5,1214,0,0,13271,13273,3,1154,577,0,13272,13271,1,0,0,0,13272,13273,
        1,0,0,0,13273,13275,1,0,0,0,13274,13276,5,20,0,0,13275,13274,1,0,
        0,0,13275,13276,1,0,0,0,13276,13277,1,0,0,0,13277,13279,3,808,404,
        0,13278,13280,3,1182,591,0,13279,13278,1,0,0,0,13279,13280,1,0,0,
        0,13280,1151,1,0,0,0,13281,13286,3,1156,578,0,13282,13283,5,1208,
        0,0,13283,13285,3,1156,578,0,13284,13282,1,0,0,0,13285,13288,1,0,
        0,0,13286,13284,1,0,0,0,13286,13287,1,0,0,0,13287,13289,1,0,0,0,
        13288,13286,1,0,0,0,13289,13290,5,159,0,0,13290,13291,3,1158,579,
        0,13291,1153,1,0,0,0,13292,13293,5,474,0,0,13293,13298,3,1160,580,
        0,13294,13295,5,1208,0,0,13295,13297,3,1160,580,0,13296,13294,1,
        0,0,0,13297,13300,1,0,0,0,13298,13296,1,0,0,0,13298,13299,1,0,0,
        0,13299,1155,1,0,0,0,13300,13298,1,0,0,0,13301,13306,3,1020,510,
        0,13302,13304,5,20,0,0,13303,13302,1,0,0,0,13303,13304,1,0,0,0,13304,
        13305,1,0,0,0,13305,13307,3,808,404,0,13306,13303,1,0,0,0,13306,
        13307,1,0,0,0,13307,1157,1,0,0,0,13308,13309,3,784,392,0,13309,13310,
        5,190,0,0,13310,13311,5,1213,0,0,13311,13316,3,1162,581,0,13312,
        13313,5,1208,0,0,13313,13315,3,1162,581,0,13314,13312,1,0,0,0,13315,
        13318,1,0,0,0,13316,13314,1,0,0,0,13316,13317,1,0,0,0,13317,13319,
        1,0,0,0,13318,13316,1,0,0,0,13319,13320,5,1214,0,0,13320,13352,1,
        0,0,0,13321,13322,3,1182,591,0,13322,13323,5,190,0,0,13323,13324,
        5,1213,0,0,13324,13329,3,1162,581,0,13325,13326,5,1208,0,0,13326,
        13328,3,1162,581,0,13327,13325,1,0,0,0,13328,13331,1,0,0,0,13329,
        13327,1,0,0,0,13329,13330,1,0,0,0,13330,13332,1,0,0,0,13331,13329,
        1,0,0,0,13332,13333,5,1214,0,0,13333,13352,1,0,0,0,13334,13335,3,
        1182,591,0,13335,13336,5,190,0,0,13336,13337,5,1213,0,0,13337,13342,
        3,1164,582,0,13338,13339,5,1208,0,0,13339,13341,3,1164,582,0,13340,
        13338,1,0,0,0,13341,13344,1,0,0,0,13342,13340,1,0,0,0,13342,13343,
        1,0,0,0,13343,13345,1,0,0,0,13344,13342,1,0,0,0,13345,13346,5,1214,
        0,0,13346,13352,1,0,0,0,13347,13348,3,784,392,0,13348,13349,5,190,
        0,0,13349,13350,3,1184,592,0,13350,13352,1,0,0,0,13351,13308,1,0,
        0,0,13351,13321,1,0,0,0,13351,13334,1,0,0,0,13351,13347,1,0,0,0,
        13352,1159,1,0,0,0,13353,13355,3,1020,510,0,13354,13356,5,20,0,0,
        13355,13354,1,0,0,0,13355,13356,1,0,0,0,13356,13357,1,0,0,0,13357,
        13358,3,808,404,0,13358,1161,1,0,0,0,13359,13364,3,996,498,0,13360,
        13362,5,20,0,0,13361,13360,1,0,0,0,13361,13362,1,0,0,0,13362,13363,
        1,0,0,0,13363,13365,3,808,404,0,13364,13361,1,0,0,0,13364,13365,
        1,0,0,0,13365,1163,1,0,0,0,13366,13368,3,1180,590,0,13367,13369,
        5,20,0,0,13368,13367,1,0,0,0,13368,13369,1,0,0,0,13369,13370,1,0,
        0,0,13370,13371,3,808,404,0,13371,1165,1,0,0,0,13372,13375,5,1017,
        0,0,13373,13374,7,148,0,0,13374,13376,5,806,0,0,13375,13373,1,0,
        0,0,13375,13376,1,0,0,0,13376,13377,1,0,0,0,13377,13378,5,1213,0,
        0,13378,13379,3,1168,584,0,13379,13381,5,1214,0,0,13380,13382,5,
        20,0,0,13381,13380,1,0,0,0,13381,13382,1,0,0,0,13382,13383,1,0,0,
        0,13383,13385,3,808,404,0,13384,13386,3,1182,591,0,13385,13384,1,
        0,0,0,13385,13386,1,0,0,0,13386,1167,1,0,0,0,13387,13388,3,784,392,
        0,13388,13389,5,159,0,0,13389,13390,3,784,392,0,13390,13391,5,190,
        0,0,13391,13392,5,1213,0,0,13392,13397,3,1170,585,0,13393,13394,
        5,1208,0,0,13394,13396,3,1170,585,0,13395,13393,1,0,0,0,13396,13399,
        1,0,0,0,13397,13395,1,0,0,0,13397,13398,1,0,0,0,13398,13400,1,0,
        0,0,13399,13397,1,0,0,0,13400,13401,5,1214,0,0,13401,13418,1,0,0,
        0,13402,13403,3,1182,591,0,13403,13404,5,159,0,0,13404,13405,3,784,
        392,0,13405,13406,5,190,0,0,13406,13407,5,1213,0,0,13407,13412,3,
        1172,586,0,13408,13409,5,1208,0,0,13409,13411,3,1172,586,0,13410,
        13408,1,0,0,0,13411,13414,1,0,0,0,13412,13410,1,0,0,0,13412,13413,
        1,0,0,0,13413,13415,1,0,0,0,13414,13412,1,0,0,0,13415,13416,5,1214,
        0,0,13416,13418,1,0,0,0,13417,13387,1,0,0,0,13417,13402,1,0,0,0,
        13418,1169,1,0,0,0,13419,13424,3,784,392,0,13420,13422,5,20,0,0,
        13421,13420,1,0,0,0,13421,13422,1,0,0,0,13422,13423,1,0,0,0,13423,
        13425,3,754,377,0,13424,13421,1,0,0,0,13424,13425,1,0,0,0,13425,
        1171,1,0,0,0,13426,13431,3,1182,591,0,13427,13429,5,20,0,0,13428,
        13427,1,0,0,0,13428,13429,1,0,0,0,13429,13430,1,0,0,0,13430,13432,
        3,754,377,0,13431,13428,1,0,0,0,13431,13432,1,0,0,0,13432,1173,1,
        0,0,0,13433,13440,5,24,0,0,13434,13441,5,224,0,0,13435,13436,5,421,
        0,0,13436,13438,5,480,0,0,13437,13435,1,0,0,0,13437,13438,1,0,0,
        0,13438,13439,1,0,0,0,13439,13441,3,996,498,0,13440,13434,1,0,0,
        0,13440,13437,1,0,0,0,13441,1175,1,0,0,0,13442,13445,3,1184,592,
        0,13443,13445,3,1178,589,0,13444,13442,1,0,0,0,13444,13443,1,0,0,
        0,13445,1177,1,0,0,0,13446,13447,5,1213,0,0,13447,13452,3,996,498,
        0,13448,13449,7,8,0,0,13449,13451,3,996,498,0,13450,13448,1,0,0,
        0,13451,13454,1,0,0,0,13452,13450,1,0,0,0,13452,13453,1,0,0,0,13453,
        13455,1,0,0,0,13454,13452,1,0,0,0,13455,13456,5,1214,0,0,13456,1179,
        1,0,0,0,13457,13458,5,1213,0,0,13458,13463,3,996,498,0,13459,13460,
        5,1208,0,0,13460,13462,3,996,498,0,13461,13459,1,0,0,0,13462,13465,
        1,0,0,0,13463,13461,1,0,0,0,13463,13464,1,0,0,0,13464,13466,1,0,
        0,0,13465,13463,1,0,0,0,13466,13467,5,1214,0,0,13467,1181,1,0,0,
        0,13468,13469,5,1213,0,0,13469,13474,3,784,392,0,13470,13471,5,1208,
        0,0,13471,13473,3,784,392,0,13472,13470,1,0,0,0,13473,13476,1,0,
        0,0,13474,13472,1,0,0,0,13474,13475,1,0,0,0,13475,13477,1,0,0,0,
        13476,13474,1,0,0,0,13477,13478,5,1214,0,0,13478,1183,1,0,0,0,13479,
        13481,5,1213,0,0,13480,13482,3,1208,604,0,13481,13480,1,0,0,0,13481,
        13482,1,0,0,0,13482,13483,1,0,0,0,13483,13484,3,834,417,0,13484,
        13485,5,1214,0,0,13485,1185,1,0,0,0,13486,13487,3,788,394,0,13487,
        13488,3,688,344,0,13488,1187,1,0,0,0,13489,13490,5,1207,0,0,13490,
        13491,3,810,405,0,13491,1189,1,0,0,0,13492,13493,3,1188,594,0,13493,
        13494,5,1209,0,0,13494,13495,3,788,394,0,13495,1191,1,0,0,0,13496,
        13497,7,149,0,0,13497,13498,3,812,406,0,13498,1193,1,0,0,0,13499,
        13500,3,764,382,0,13500,13501,5,1208,0,0,13501,13502,3,764,382,0,
        13502,1195,1,0,0,0,13503,13521,5,1224,0,0,13504,13521,5,135,0,0,
        13505,13521,5,1225,0,0,13506,13521,5,1226,0,0,13507,13521,5,264,
        0,0,13508,13509,5,272,0,0,13509,13521,5,1224,0,0,13510,13511,5,1227,
        0,0,13511,13521,5,1229,0,0,13512,13521,5,1227,0,0,13513,13521,5,
        234,0,0,13514,13521,5,1228,0,0,13515,13521,5,216,0,0,13516,13521,
        5,1229,0,0,13517,13521,5,176,0,0,13518,13521,5,1230,0,0,13519,13521,
        5,168,0,0,13520,13503,1,0,0,0,13520,13504,1,0,0,0,13520,13505,1,
        0,0,0,13520,13506,1,0,0,0,13520,13507,1,0,0,0,13520,13508,1,0,0,
        0,13520,13510,1,0,0,0,13520,13512,1,0,0,0,13520,13513,1,0,0,0,13520,
        13514,1,0,0,0,13520,13515,1,0,0,0,13520,13516,1,0,0,0,13520,13517,
        1,0,0,0,13520,13518,1,0,0,0,13520,13519,1,0,0,0,13521,1197,1,0,0,
        0,13522,13523,7,150,0,0,13523,1199,1,0,0,0,13524,13529,3,1202,601,
        0,13525,13529,3,1208,604,0,13526,13529,3,1216,608,0,13527,13529,
        3,1220,610,0,13528,13524,1,0,0,0,13528,13525,1,0,0,0,13528,13526,
        1,0,0,0,13528,13527,1,0,0,0,13529,1201,1,0,0,0,13530,13532,3,1204,
        602,0,13531,13530,1,0,0,0,13532,13533,1,0,0,0,13533,13531,1,0,0,
        0,13533,13534,1,0,0,0,13534,1203,1,0,0,0,13535,13549,7,151,0,0,13536,
        13538,5,102,0,0,13537,13536,1,0,0,0,13537,13538,1,0,0,0,13538,13539,
        1,0,0,0,13539,13550,3,800,400,0,13540,13542,5,406,0,0,13541,13540,
        1,0,0,0,13541,13542,1,0,0,0,13542,13543,1,0,0,0,13543,13550,3,792,
        396,0,13544,13546,5,468,0,0,13545,13544,1,0,0,0,13545,13546,1,0,
        0,0,13546,13547,1,0,0,0,13547,13550,3,792,396,0,13548,13550,5,361,
        0,0,13549,13537,1,0,0,0,13549,13541,1,0,0,0,13549,13545,1,0,0,0,
        13549,13548,1,0,0,0,13550,13552,1,0,0,0,13551,13553,7,152,0,0,13552,
        13551,1,0,0,0,13552,13553,1,0,0,0,13553,13554,1,0,0,0,13554,13556,
        3,1206,603,0,13555,13557,5,252,0,0,13556,13555,1,0,0,0,13556,13557,
        1,0,0,0,13557,13559,1,0,0,0,13558,13560,5,273,0,0,13559,13558,1,
        0,0,0,13559,13560,1,0,0,0,13560,1205,1,0,0,0,13561,13573,5,490,0,
        0,13562,13573,7,153,0,0,13563,13573,5,923,0,0,13564,13566,5,877,
        0,0,13565,13567,5,297,0,0,13566,13565,1,0,0,0,13566,13567,1,0,0,
        0,13567,13573,1,0,0,0,13568,13573,5,1041,0,0,13569,13573,5,571,0,
        0,13570,13571,5,742,0,0,13571,13573,5,1067,0,0,13572,13561,1,0,0,
        0,13572,13562,1,0,0,0,13572,13563,1,0,0,0,13572,13564,1,0,0,0,13572,
        13568,1,0,0,0,13572,13569,1,0,0,0,13572,13570,1,0,0,0,13573,1207,
        1,0,0,0,13574,13575,5,474,0,0,13575,13580,3,1210,605,0,13576,13577,
        5,1208,0,0,13577,13579,3,1210,605,0,13578,13576,1,0,0,0,13579,13582,
        1,0,0,0,13580,13578,1,0,0,0,13580,13581,1,0,0,0,13581,1209,1,0,0,
        0,13582,13580,1,0,0,0,13583,13586,3,1212,606,0,13584,13586,3,1214,
        607,0,13585,13583,1,0,0,0,13585,13584,1,0,0,0,13586,1211,1,0,0,0,
        13587,13589,3,808,404,0,13588,13590,3,1182,591,0,13589,13588,1,0,
        0,0,13589,13590,1,0,0,0,13590,13591,1,0,0,0,13591,13592,5,20,0,0,
        13592,13593,3,1184,592,0,13593,1213,1,0,0,0,13594,13595,5,324,0,
        0,13595,13597,3,808,404,0,13596,13598,3,1182,591,0,13597,13596,1,
        0,0,0,13597,13598,1,0,0,0,13598,13599,1,0,0,0,13599,13600,5,20,0,
        0,13600,13601,5,1213,0,0,13601,13605,3,834,417,0,13602,13603,5,447,
        0,0,13603,13604,5,13,0,0,13604,13606,3,836,418,0,13605,13602,1,0,
        0,0,13606,13607,1,0,0,0,13607,13605,1,0,0,0,13607,13608,1,0,0,0,
        13608,13609,1,0,0,0,13609,13610,5,1214,0,0,13610,1215,1,0,0,0,13611,
        13612,5,457,0,0,13612,13613,5,1213,0,0,13613,13618,3,1218,609,0,
        13614,13615,5,1208,0,0,13615,13617,3,1218,609,0,13616,13614,1,0,
        0,0,13617,13620,1,0,0,0,13618,13616,1,0,0,0,13618,13619,1,0,0,0,
        13619,13621,1,0,0,0,13620,13618,1,0,0,0,13621,13622,5,1214,0,0,13622,
        1217,1,0,0,0,13623,13624,3,810,405,0,13624,13628,3,688,344,0,13625,
        13627,3,710,355,0,13626,13625,1,0,0,0,13627,13630,1,0,0,0,13628,
        13626,1,0,0,0,13628,13629,1,0,0,0,13629,13640,1,0,0,0,13630,13628,
        1,0,0,0,13631,13638,5,20,0,0,13632,13635,5,112,0,0,13633,13634,5,
        42,0,0,13634,13636,5,789,0,0,13635,13633,1,0,0,0,13635,13636,1,0,
        0,0,13636,13639,1,0,0,0,13637,13639,5,225,0,0,13638,13632,1,0,0,
        0,13638,13637,1,0,0,0,13639,13641,1,0,0,0,13640,13631,1,0,0,0,13640,
        13641,1,0,0,0,13641,1219,1,0,0,0,13642,13644,7,154,0,0,13643,13642,
        1,0,0,0,13643,13644,1,0,0,0,13644,13645,1,0,0,0,13645,13651,5,150,
        0,0,13646,13647,5,190,0,0,13647,13649,5,1042,0,0,13648,13650,5,795,
        0,0,13649,13648,1,0,0,0,13649,13650,1,0,0,0,13650,13652,1,0,0,0,
        13651,13646,1,0,0,0,13651,13652,1,0,0,0,13652,1221,1,0,0,0,13653,
        13657,3,1224,612,0,13654,13657,3,1226,613,0,13655,13657,3,1244,622,
        0,13656,13653,1,0,0,0,13656,13654,1,0,0,0,13656,13655,1,0,0,0,13657,
        1223,1,0,0,0,13658,13659,5,171,0,0,13659,13660,3,800,400,0,13660,
        13661,5,426,0,0,13661,13662,3,800,400,0,13662,1225,1,0,0,0,13663,
        13672,3,1230,615,0,13664,13672,3,1228,614,0,13665,13672,3,1232,616,
        0,13666,13672,3,1234,617,0,13667,13672,3,1236,618,0,13668,13672,
        3,1238,619,0,13669,13672,3,1240,620,0,13670,13672,3,1242,621,0,13671,
        13663,1,0,0,0,13671,13664,1,0,0,0,13671,13665,1,0,0,0,13671,13666,
        1,0,0,0,13671,13667,1,0,0,0,13671,13668,1,0,0,0,13671,13669,1,0,
        0,0,13671,13670,1,0,0,0,13672,1227,1,0,0,0,13673,13696,5,172,0,0,
        13674,13686,5,255,0,0,13675,13687,5,309,0,0,13676,13677,5,41,0,0,
        13677,13678,5,272,0,0,13678,13683,3,1274,637,0,13679,13680,5,1208,
        0,0,13680,13682,3,1274,637,0,13681,13679,1,0,0,0,13682,13685,1,0,
        0,0,13683,13681,1,0,0,0,13683,13684,1,0,0,0,13684,13687,1,0,0,0,
        13685,13683,1,0,0,0,13686,13675,1,0,0,0,13686,13676,1,0,0,0,13686,
        13687,1,0,0,0,13687,13697,1,0,0,0,13688,13693,3,1274,637,0,13689,
        13690,5,1208,0,0,13690,13692,3,1274,637,0,13691,13689,1,0,0,0,13692,
        13695,1,0,0,0,13693,13691,1,0,0,0,13693,13694,1,0,0,0,13694,13697,
        1,0,0,0,13695,13693,1,0,0,0,13696,13674,1,0,0,0,13696,13688,1,0,
        0,0,13697,13698,1,0,0,0,13698,13721,5,426,0,0,13699,13704,3,1276,
        638,0,13700,13701,5,1208,0,0,13701,13703,3,1276,638,0,13702,13700,
        1,0,0,0,13703,13706,1,0,0,0,13704,13702,1,0,0,0,13704,13705,1,0,
        0,0,13705,13709,1,0,0,0,13706,13704,1,0,0,0,13707,13709,5,313,0,
        0,13708,13699,1,0,0,0,13708,13707,1,0,0,0,13709,13711,1,0,0,0,13710,
        13712,3,1284,642,0,13711,13710,1,0,0,0,13711,13712,1,0,0,0,13712,
        13722,1,0,0,0,13713,13718,3,804,402,0,13714,13715,5,1208,0,0,13715,
        13717,3,804,402,0,13716,13714,1,0,0,0,13717,13720,1,0,0,0,13718,
        13716,1,0,0,0,13718,13719,1,0,0,0,13719,13722,1,0,0,0,13720,13718,
        1,0,0,0,13721,13708,1,0,0,0,13721,13713,1,0,0,0,13722,1229,1,0,0,
        0,13723,13724,5,172,0,0,13724,13725,3,804,402,0,13725,13726,5,1208,
        0,0,13726,13727,3,804,402,0,13727,13728,1,0,0,0,13728,13729,5,426,
        0,0,13729,13734,3,804,402,0,13730,13731,5,1208,0,0,13731,13733,3,
        804,402,0,13732,13730,1,0,0,0,13733,13736,1,0,0,0,13734,13732,1,
        0,0,0,13734,13735,1,0,0,0,13735,13738,1,0,0,0,13736,13734,1,0,0,
        0,13737,13739,3,1282,641,0,13738,13737,1,0,0,0,13738,13739,1,0,0,
        0,13739,1231,1,0,0,0,13740,13798,5,172,0,0,13741,13743,5,13,0,0,
        13742,13744,5,309,0,0,13743,13742,1,0,0,0,13743,13744,1,0,0,0,13744,
        13759,1,0,0,0,13745,13746,5,13,0,0,13746,13748,5,41,0,0,13747,13745,
        1,0,0,0,13747,13748,1,0,0,0,13748,13749,1,0,0,0,13749,13754,3,1262,
        631,0,13750,13751,5,1208,0,0,13751,13753,3,1262,631,0,13752,13750,
        1,0,0,0,13753,13756,1,0,0,0,13754,13752,1,0,0,0,13754,13755,1,0,
        0,0,13755,13759,1,0,0,0,13756,13754,1,0,0,0,13757,13759,5,91,0,0,
        13758,13741,1,0,0,0,13758,13747,1,0,0,0,13758,13757,1,0,0,0,13759,
        13760,1,0,0,0,13760,13761,5,286,0,0,13761,13799,3,1264,632,0,13762,
        13767,3,1266,633,0,13763,13764,5,1208,0,0,13764,13766,3,1266,633,
        0,13765,13763,1,0,0,0,13766,13769,1,0,0,0,13767,13765,1,0,0,0,13767,
        13768,1,0,0,0,13768,13799,1,0,0,0,13769,13767,1,0,0,0,13770,13775,
        3,1268,634,0,13771,13772,5,1208,0,0,13772,13774,3,1268,634,0,13773,
        13771,1,0,0,0,13774,13777,1,0,0,0,13775,13773,1,0,0,0,13775,13776,
        1,0,0,0,13776,13799,1,0,0,0,13777,13775,1,0,0,0,13778,13783,3,1270,
        635,0,13779,13780,5,1208,0,0,13780,13782,3,1268,634,0,13781,13779,
        1,0,0,0,13782,13785,1,0,0,0,13783,13781,1,0,0,0,13783,13784,1,0,
        0,0,13784,13799,1,0,0,0,13785,13783,1,0,0,0,13786,13791,3,1272,636,
        0,13787,13788,5,1208,0,0,13788,13790,3,1272,636,0,13789,13787,1,
        0,0,0,13790,13793,1,0,0,0,13791,13789,1,0,0,0,13791,13792,1,0,0,
        0,13792,13799,1,0,0,0,13793,13791,1,0,0,0,13794,13795,5,74,0,0,13795,
        13799,5,536,0,0,13796,13797,5,74,0,0,13797,13799,5,1078,0,0,13798,
        13758,1,0,0,0,13798,13762,1,0,0,0,13798,13770,1,0,0,0,13798,13778,
        1,0,0,0,13798,13786,1,0,0,0,13798,13794,1,0,0,0,13798,13796,1,0,
        0,0,13799,13800,1,0,0,0,13800,13824,5,426,0,0,13801,13806,3,1276,
        638,0,13802,13803,5,1208,0,0,13803,13805,3,1276,638,0,13804,13802,
        1,0,0,0,13805,13808,1,0,0,0,13806,13804,1,0,0,0,13806,13807,1,0,
        0,0,13807,13810,1,0,0,0,13808,13806,1,0,0,0,13809,13811,3,1284,642,
        0,13810,13809,1,0,0,0,13810,13811,1,0,0,0,13811,13825,1,0,0,0,13812,
        13814,5,313,0,0,13813,13815,3,1284,642,0,13814,13813,1,0,0,0,13814,
        13815,1,0,0,0,13815,13825,1,0,0,0,13816,13821,3,804,402,0,13817,
        13818,5,1208,0,0,13818,13820,3,804,402,0,13819,13817,1,0,0,0,13820,
        13823,1,0,0,0,13821,13819,1,0,0,0,13821,13822,1,0,0,0,13822,13825,
        1,0,0,0,13823,13821,1,0,0,0,13824,13801,1,0,0,0,13824,13812,1,0,
        0,0,13824,13816,1,0,0,0,13825,1233,1,0,0,0,13826,13827,5,172,0,0,
        13827,13828,5,73,0,0,13828,13829,5,984,0,0,13829,13832,3,802,401,
        0,13830,13831,5,474,0,0,13831,13833,5,1007,0,0,13832,13830,1,0,0,
        0,13832,13833,1,0,0,0,13833,13834,1,0,0,0,13834,13886,5,426,0,0,
        13835,13840,3,802,401,0,13836,13837,5,1208,0,0,13837,13839,3,802,
        401,0,13838,13836,1,0,0,0,13839,13842,1,0,0,0,13840,13838,1,0,0,
        0,13840,13841,1,0,0,0,13841,13861,1,0,0,0,13842,13840,1,0,0,0,13843,
        13844,5,474,0,0,13844,13845,5,357,0,0,13845,13850,3,804,402,0,13846,
        13847,5,1208,0,0,13847,13849,3,804,402,0,13848,13846,1,0,0,0,13849,
        13852,1,0,0,0,13850,13848,1,0,0,0,13850,13851,1,0,0,0,13851,13856,
        1,0,0,0,13852,13850,1,0,0,0,13853,13854,5,474,0,0,13854,13855,5,
        311,0,0,13855,13857,3,806,403,0,13856,13853,1,0,0,0,13856,13857,
        1,0,0,0,13857,13862,1,0,0,0,13858,13859,5,474,0,0,13859,13860,5,
        311,0,0,13860,13862,3,806,403,0,13861,13843,1,0,0,0,13861,13858,
        1,0,0,0,13862,13887,1,0,0,0,13863,13864,5,303,0,0,13864,13869,3,
        802,401,0,13865,13866,5,1208,0,0,13866,13868,3,802,401,0,13867,13865,
        1,0,0,0,13868,13871,1,0,0,0,13869,13867,1,0,0,0,13869,13870,1,0,
        0,0,13870,13884,1,0,0,0,13871,13869,1,0,0,0,13872,13873,5,474,0,
        0,13873,13874,5,357,0,0,13874,13879,3,804,402,0,13875,13876,5,1208,
        0,0,13876,13878,3,804,402,0,13877,13875,1,0,0,0,13878,13881,1,0,
        0,0,13879,13877,1,0,0,0,13879,13880,1,0,0,0,13880,13885,1,0,0,0,
        13881,13879,1,0,0,0,13882,13883,5,475,0,0,13883,13885,5,357,0,0,
        13884,13872,1,0,0,0,13884,13882,1,0,0,0,13885,13887,1,0,0,0,13886,
        13835,1,0,0,0,13886,13863,1,0,0,0,13887,1235,1,0,0,0,13888,13889,
        5,172,0,0,13889,13890,5,230,0,0,13890,13900,5,286,0,0,13891,13896,
        3,764,382,0,13892,13893,5,1208,0,0,13893,13895,3,764,382,0,13894,
        13892,1,0,0,0,13895,13898,1,0,0,0,13896,13894,1,0,0,0,13896,13897,
        1,0,0,0,13897,13901,1,0,0,0,13898,13896,1,0,0,0,13899,13901,5,13,
        0,0,13900,13891,1,0,0,0,13900,13899,1,0,0,0,13901,13913,1,0,0,0,
        13902,13903,5,20,0,0,13903,13914,5,111,0,0,13904,13905,7,155,0,0,
        13905,13910,3,802,401,0,13906,13907,5,1208,0,0,13907,13909,3,802,
        401,0,13908,13906,1,0,0,0,13909,13912,1,0,0,0,13910,13908,1,0,0,
        0,13910,13911,1,0,0,0,13911,13914,1,0,0,0,13912,13910,1,0,0,0,13913,
        13902,1,0,0,0,13913,13904,1,0,0,0,13914,13918,1,0,0,0,13915,13916,
        5,474,0,0,13916,13917,5,274,0,0,13917,13919,5,299,0,0,13918,13915,
        1,0,0,0,13918,13919,1,0,0,0,13919,1237,1,0,0,0,13920,13921,5,172,
        0,0,13921,13922,5,236,0,0,13922,13923,3,788,394,0,13923,13936,5,
        426,0,0,13924,13929,3,804,402,0,13925,13926,5,1208,0,0,13926,13928,
        3,804,402,0,13927,13925,1,0,0,0,13928,13931,1,0,0,0,13929,13927,
        1,0,0,0,13929,13930,1,0,0,0,13930,13933,1,0,0,0,13931,13929,1,0,
        0,0,13932,13934,3,1284,642,0,13933,13932,1,0,0,0,13933,13934,1,0,
        0,0,13934,13937,1,0,0,0,13935,13937,5,313,0,0,13936,13924,1,0,0,
        0,13936,13935,1,0,0,0,13937,1239,1,0,0,0,13938,13939,5,172,0,0,13939,
        13940,5,480,0,0,13940,13941,3,788,394,0,13941,13942,5,426,0,0,13942,
        13947,3,804,402,0,13943,13944,5,1208,0,0,13944,13946,3,804,402,0,
        13945,13943,1,0,0,0,13946,13949,1,0,0,0,13947,13945,1,0,0,0,13947,
        13948,1,0,0,0,13948,1241,1,0,0,0,13949,13947,1,0,0,0,13950,13951,
        5,172,0,0,13951,13952,5,480,0,0,13952,13953,5,297,0,0,13953,13954,
        5,426,0,0,13954,13959,3,802,401,0,13955,13956,5,1208,0,0,13956,13958,
        3,802,401,0,13957,13955,1,0,0,0,13958,13961,1,0,0,0,13959,13957,
        1,0,0,0,13959,13960,1,0,0,0,13960,1243,1,0,0,0,13961,13959,1,0,0,
        0,13962,13971,3,1246,623,0,13963,13971,3,1248,624,0,13964,13971,
        3,1250,625,0,13965,13971,3,1252,626,0,13966,13971,3,1254,627,0,13967,
        13971,3,1256,628,0,13968,13971,3,1258,629,0,13969,13971,3,1260,630,
        0,13970,13962,1,0,0,0,13970,13963,1,0,0,0,13970,13964,1,0,0,0,13970,
        13965,1,0,0,0,13970,13966,1,0,0,0,13970,13967,1,0,0,0,13970,13968,
        1,0,0,0,13970,13969,1,0,0,0,13971,1245,1,0,0,0,13972,13974,5,354,
        0,0,13973,13975,3,1286,643,0,13974,13973,1,0,0,0,13974,13975,1,0,
        0,0,13975,13998,1,0,0,0,13976,13988,5,255,0,0,13977,13989,5,309,
        0,0,13978,13979,5,41,0,0,13979,13980,5,272,0,0,13980,13985,3,1274,
        637,0,13981,13982,5,1208,0,0,13982,13984,3,1274,637,0,13983,13981,
        1,0,0,0,13984,13987,1,0,0,0,13985,13983,1,0,0,0,13985,13986,1,0,
        0,0,13986,13989,1,0,0,0,13987,13985,1,0,0,0,13988,13977,1,0,0,0,
        13988,13978,1,0,0,0,13988,13989,1,0,0,0,13989,13999,1,0,0,0,13990,
        13995,3,1274,637,0,13991,13992,5,1208,0,0,13992,13994,3,1274,637,
        0,13993,13991,1,0,0,0,13994,13997,1,0,0,0,13995,13993,1,0,0,0,13995,
        13996,1,0,0,0,13996,13999,1,0,0,0,13997,13995,1,0,0,0,13998,13976,
        1,0,0,0,13998,13990,1,0,0,0,13999,14000,1,0,0,0,14000,14010,7,155,
        0,0,14001,14006,3,1278,639,0,14002,14003,5,1208,0,0,14003,14005,
        3,1278,639,0,14004,14002,1,0,0,0,14005,14008,1,0,0,0,14006,14004,
        1,0,0,0,14006,14007,1,0,0,0,14007,14011,1,0,0,0,14008,14006,1,0,
        0,0,14009,14011,5,313,0,0,14010,14001,1,0,0,0,14010,14009,1,0,0,
        0,14011,1247,1,0,0,0,14012,14016,5,354,0,0,14013,14014,5,10,0,0,
        14014,14015,5,289,0,0,14015,14017,5,159,0,0,14016,14013,1,0,0,0,
        14016,14017,1,0,0,0,14017,14018,1,0,0,0,14018,14023,3,804,402,0,
        14019,14020,5,1208,0,0,14020,14022,3,804,402,0,14021,14019,1,0,0,
        0,14022,14025,1,0,0,0,14023,14021,1,0,0,0,14023,14024,1,0,0,0,14024,
        14026,1,0,0,0,14025,14023,1,0,0,0,14026,14027,7,155,0,0,14027,14032,
        3,804,402,0,14028,14029,5,1208,0,0,14029,14031,3,804,402,0,14030,
        14028,1,0,0,0,14031,14034,1,0,0,0,14032,14030,1,0,0,0,14032,14033,
        1,0,0,0,14033,1249,1,0,0,0,14034,14032,1,0,0,0,14035,14037,5,354,
        0,0,14036,14038,3,1286,643,0,14037,14036,1,0,0,0,14037,14038,1,0,
        0,0,14038,14091,1,0,0,0,14039,14041,5,13,0,0,14040,14042,5,309,0,
        0,14041,14040,1,0,0,0,14041,14042,1,0,0,0,14042,14056,1,0,0,0,14043,
        14044,5,13,0,0,14044,14046,5,41,0,0,14045,14043,1,0,0,0,14045,14046,
        1,0,0,0,14046,14047,1,0,0,0,14047,14052,3,1262,631,0,14048,14049,
        5,1208,0,0,14049,14051,3,1262,631,0,14050,14048,1,0,0,0,14051,14054,
        1,0,0,0,14052,14050,1,0,0,0,14052,14053,1,0,0,0,14053,14056,1,0,
        0,0,14054,14052,1,0,0,0,14055,14039,1,0,0,0,14055,14045,1,0,0,0,
        14056,14057,1,0,0,0,14057,14058,5,286,0,0,14058,14092,3,1264,632,
        0,14059,14064,3,1266,633,0,14060,14061,5,1208,0,0,14061,14063,3,
        1266,633,0,14062,14060,1,0,0,0,14063,14066,1,0,0,0,14064,14062,1,
        0,0,0,14064,14065,1,0,0,0,14065,14092,1,0,0,0,14066,14064,1,0,0,
        0,14067,14072,3,1268,634,0,14068,14069,5,1208,0,0,14069,14071,3,
        1268,634,0,14070,14068,1,0,0,0,14071,14074,1,0,0,0,14072,14070,1,
        0,0,0,14072,14073,1,0,0,0,14073,14092,1,0,0,0,14074,14072,1,0,0,
        0,14075,14080,3,1270,635,0,14076,14077,5,1208,0,0,14077,14079,3,
        1268,634,0,14078,14076,1,0,0,0,14079,14082,1,0,0,0,14080,14078,1,
        0,0,0,14080,14081,1,0,0,0,14081,14092,1,0,0,0,14082,14080,1,0,0,
        0,14083,14088,3,1272,636,0,14084,14085,5,1208,0,0,14085,14087,3,
        1272,636,0,14086,14084,1,0,0,0,14087,14090,1,0,0,0,14088,14086,1,
        0,0,0,14088,14089,1,0,0,0,14089,14092,1,0,0,0,14090,14088,1,0,0,
        0,14091,14055,1,0,0,0,14091,14059,1,0,0,0,14091,14067,1,0,0,0,14091,
        14075,1,0,0,0,14091,14083,1,0,0,0,14092,14093,1,0,0,0,14093,14111,
        7,155,0,0,14094,14099,3,1278,639,0,14095,14096,5,1208,0,0,14096,
        14098,3,1278,639,0,14097,14095,1,0,0,0,14098,14101,1,0,0,0,14099,
        14097,1,0,0,0,14099,14100,1,0,0,0,14100,14112,1,0,0,0,14101,14099,
        1,0,0,0,14102,14112,5,313,0,0,14103,14108,3,804,402,0,14104,14105,
        5,1208,0,0,14105,14107,3,804,402,0,14106,14104,1,0,0,0,14107,14110,
        1,0,0,0,14108,14106,1,0,0,0,14108,14109,1,0,0,0,14109,14112,1,0,
        0,0,14110,14108,1,0,0,0,14111,14094,1,0,0,0,14111,14102,1,0,0,0,
        14111,14103,1,0,0,0,14112,1251,1,0,0,0,14113,14114,5,354,0,0,14114,
        14115,5,73,0,0,14115,14116,5,984,0,0,14116,14172,3,802,401,0,14117,
        14167,7,155,0,0,14118,14123,3,802,401,0,14119,14120,5,1208,0,0,14120,
        14122,3,802,401,0,14121,14119,1,0,0,0,14122,14125,1,0,0,0,14123,
        14121,1,0,0,0,14123,14124,1,0,0,0,14124,14144,1,0,0,0,14125,14123,
        1,0,0,0,14126,14127,5,474,0,0,14127,14128,5,357,0,0,14128,14133,
        3,804,402,0,14129,14130,5,1208,0,0,14130,14132,3,804,402,0,14131,
        14129,1,0,0,0,14132,14135,1,0,0,0,14133,14131,1,0,0,0,14133,14134,
        1,0,0,0,14134,14139,1,0,0,0,14135,14133,1,0,0,0,14136,14137,5,474,
        0,0,14137,14138,5,311,0,0,14138,14140,3,806,403,0,14139,14136,1,
        0,0,0,14139,14140,1,0,0,0,14140,14145,1,0,0,0,14141,14142,5,474,
        0,0,14142,14143,5,311,0,0,14143,14145,3,806,403,0,14144,14126,1,
        0,0,0,14144,14141,1,0,0,0,14145,14168,1,0,0,0,14146,14147,5,303,
        0,0,14147,14152,3,802,401,0,14148,14149,5,1208,0,0,14149,14151,3,
        802,401,0,14150,14148,1,0,0,0,14151,14154,1,0,0,0,14152,14150,1,
        0,0,0,14152,14153,1,0,0,0,14153,14165,1,0,0,0,14154,14152,1,0,0,
        0,14155,14156,5,474,0,0,14156,14157,5,357,0,0,14157,14162,3,804,
        402,0,14158,14159,5,1208,0,0,14159,14161,3,804,402,0,14160,14158,
        1,0,0,0,14161,14164,1,0,0,0,14162,14160,1,0,0,0,14162,14163,1,0,
        0,0,14163,14166,1,0,0,0,14164,14162,1,0,0,0,14165,14155,1,0,0,0,
        14165,14166,1,0,0,0,14166,14168,1,0,0,0,14167,14118,1,0,0,0,14167,
        14146,1,0,0,0,14168,14173,1,0,0,0,14169,14170,5,474,0,0,14170,14171,
        5,1094,0,0,14171,14173,5,287,0,0,14172,14117,1,0,0,0,14172,14169,
        1,0,0,0,14173,1253,1,0,0,0,14174,14175,5,354,0,0,14175,14176,5,230,
        0,0,14176,14186,5,286,0,0,14177,14182,3,764,382,0,14178,14179,5,
        1208,0,0,14179,14181,3,764,382,0,14180,14178,1,0,0,0,14181,14184,
        1,0,0,0,14182,14180,1,0,0,0,14182,14183,1,0,0,0,14183,14187,1,0,
        0,0,14184,14182,1,0,0,0,14185,14187,5,13,0,0,14186,14177,1,0,0,0,
        14186,14185,1,0,0,0,14187,14199,1,0,0,0,14188,14189,5,20,0,0,14189,
        14200,5,111,0,0,14190,14191,7,155,0,0,14191,14196,3,802,401,0,14192,
        14193,5,1208,0,0,14193,14195,3,802,401,0,14194,14192,1,0,0,0,14195,
        14198,1,0,0,0,14196,14194,1,0,0,0,14196,14197,1,0,0,0,14197,14200,
        1,0,0,0,14198,14196,1,0,0,0,14199,14188,1,0,0,0,14199,14190,1,0,
        0,0,14200,1255,1,0,0,0,14201,14203,5,354,0,0,14202,14204,3,1286,
        643,0,14203,14202,1,0,0,0,14203,14204,1,0,0,0,14204,14205,1,0,0,
        0,14205,14206,5,236,0,0,14206,14207,3,788,394,0,14207,14217,7,155,
        0,0,14208,14213,3,804,402,0,14209,14210,5,1208,0,0,14210,14212,3,
        804,402,0,14211,14209,1,0,0,0,14212,14215,1,0,0,0,14213,14211,1,
        0,0,0,14213,14214,1,0,0,0,14214,14218,1,0,0,0,14215,14213,1,0,0,
        0,14216,14218,5,313,0,0,14217,14208,1,0,0,0,14217,14216,1,0,0,0,
        14218,1257,1,0,0,0,14219,14220,5,354,0,0,14220,14221,5,480,0,0,14221,
        14222,3,788,394,0,14222,14223,7,155,0,0,14223,14228,3,804,402,0,
        14224,14225,5,1208,0,0,14225,14227,3,804,402,0,14226,14224,1,0,0,
        0,14227,14230,1,0,0,0,14228,14226,1,0,0,0,14228,14229,1,0,0,0,14229,
        1259,1,0,0,0,14230,14228,1,0,0,0,14231,14232,5,354,0,0,14232,14233,
        5,480,0,0,14233,14234,5,297,0,0,14234,14235,7,155,0,0,14235,14240,
        3,802,401,0,14236,14237,5,1208,0,0,14237,14239,3,802,401,0,14238,
        14236,1,0,0,0,14239,14242,1,0,0,0,14240,14238,1,0,0,0,14240,14241,
        1,0,0,0,14241,1261,1,0,0,0,14242,14240,1,0,0,0,14243,14244,5,14,
        0,0,14244,14245,5,151,0,0,14245,14370,5,310,0,0,14246,14247,5,14,
        0,0,14247,14370,5,166,0,0,14248,14249,5,14,0,0,14249,14370,5,310,
        0,0,14250,14370,5,18,0,0,14251,14370,5,60,0,0,14252,14253,5,86,0,
        0,14253,14370,5,29,0,0,14254,14255,5,86,0,0,14255,14370,5,102,0,
        0,14256,14257,5,86,0,0,14257,14258,5,607,0,0,14258,14370,5,905,0,
        0,14259,14260,5,86,0,0,14260,14261,5,151,0,0,14261,14370,5,310,0,
        0,14262,14263,5,86,0,0,14263,14370,5,166,0,0,14264,14265,5,86,0,
        0,14265,14370,5,688,0,0,14266,14267,5,86,0,0,14267,14370,5,235,0,
        0,14268,14269,5,86,0,0,14269,14270,5,834,0,0,14270,14370,5,310,0,
        0,14271,14272,5,86,0,0,14272,14370,5,310,0,0,14273,14274,5,86,0,
        0,14274,14370,5,917,0,0,14275,14276,5,86,0,0,14276,14370,5,406,0,
        0,14277,14278,5,86,0,0,14278,14370,5,435,0,0,14279,14280,5,86,0,
        0,14280,14370,5,456,0,0,14281,14282,5,86,0,0,14282,14370,5,468,0,
        0,14283,14370,5,102,0,0,14284,14370,5,115,0,0,14285,14286,5,125,
        0,0,14286,14370,5,29,0,0,14287,14288,5,125,0,0,14288,14370,5,102,
        0,0,14289,14290,5,125,0,0,14290,14291,5,607,0,0,14291,14370,5,905,
        0,0,14292,14293,5,125,0,0,14293,14370,5,166,0,0,14294,14295,5,125,
        0,0,14295,14370,5,688,0,0,14296,14297,5,125,0,0,14297,14370,5,235,
        0,0,14298,14299,5,125,0,0,14299,14370,5,310,0,0,14300,14301,5,125,
        0,0,14301,14370,5,917,0,0,14302,14303,5,125,0,0,14303,14370,5,406,
        0,0,14304,14305,5,125,0,0,14305,14370,5,435,0,0,14306,14307,5,125,
        0,0,14307,14370,5,456,0,0,14308,14309,5,125,0,0,14309,14370,5,468,
        0,0,14310,14370,5,127,0,0,14311,14370,5,144,0,0,14312,14313,5,144,
        0,0,14313,14370,5,166,0,0,14314,14315,5,144,0,0,14315,14370,5,310,
        0,0,14316,14370,5,166,0,0,14317,14370,5,688,0,0,14318,14319,5,688,
        0,0,14319,14370,5,766,0,0,14320,14370,5,192,0,0,14321,14370,5,198,
        0,0,14322,14323,5,198,0,0,14323,14370,3,1182,591,0,14324,14370,5,
        235,0,0,14325,14370,5,270,0,0,14326,14370,5,297,0,0,14327,14328,
        5,297,0,0,14328,14370,5,115,0,0,14329,14330,5,297,0,0,14330,14370,
        5,127,0,0,14331,14332,5,297,0,0,14332,14370,5,198,0,0,14333,14334,
        5,297,0,0,14334,14370,5,346,0,0,14335,14336,5,297,0,0,14336,14370,
        5,370,0,0,14337,14338,5,297,0,0,14338,14370,5,453,0,0,14339,14370,
        5,310,0,0,14340,14370,5,325,0,0,14341,14342,5,325,0,0,14342,14370,
        3,1182,591,0,14343,14370,5,346,0,0,14344,14370,5,350,0,0,14345,14370,
        5,370,0,0,14346,14347,5,370,0,0,14347,14370,3,1182,591,0,14348,14370,
        5,376,0,0,14349,14370,5,395,0,0,14350,14370,5,406,0,0,14351,14370,
        5,435,0,0,14352,14353,5,1096,0,0,14353,14370,5,243,0,0,14354,14370,
        5,441,0,0,14355,14356,5,1096,0,0,14356,14370,5,437,0,0,14357,14370,
        5,442,0,0,14358,14359,5,1096,0,0,14359,14370,5,1097,0,0,14360,14370,
        5,443,0,0,14361,14370,5,453,0,0,14362,14363,5,453,0,0,14363,14370,
        3,1182,591,0,14364,14370,5,456,0,0,14365,14370,5,468,0,0,14366,14367,
        5,474,0,0,14367,14368,5,607,0,0,14368,14370,5,905,0,0,14369,14243,
        1,0,0,0,14369,14246,1,0,0,0,14369,14248,1,0,0,0,14369,14250,1,0,
        0,0,14369,14251,1,0,0,0,14369,14252,1,0,0,0,14369,14254,1,0,0,0,
        14369,14256,1,0,0,0,14369,14259,1,0,0,0,14369,14262,1,0,0,0,14369,
        14264,1,0,0,0,14369,14266,1,0,0,0,14369,14268,1,0,0,0,14369,14271,
        1,0,0,0,14369,14273,1,0,0,0,14369,14275,1,0,0,0,14369,14277,1,0,
        0,0,14369,14279,1,0,0,0,14369,14281,1,0,0,0,14369,14283,1,0,0,0,
        14369,14284,1,0,0,0,14369,14285,1,0,0,0,14369,14287,1,0,0,0,14369,
        14289,1,0,0,0,14369,14292,1,0,0,0,14369,14294,1,0,0,0,14369,14296,
        1,0,0,0,14369,14298,1,0,0,0,14369,14300,1,0,0,0,14369,14302,1,0,
        0,0,14369,14304,1,0,0,0,14369,14306,1,0,0,0,14369,14308,1,0,0,0,
        14369,14310,1,0,0,0,14369,14311,1,0,0,0,14369,14312,1,0,0,0,14369,
        14314,1,0,0,0,14369,14316,1,0,0,0,14369,14317,1,0,0,0,14369,14318,
        1,0,0,0,14369,14320,1,0,0,0,14369,14321,1,0,0,0,14369,14322,1,0,
        0,0,14369,14324,1,0,0,0,14369,14325,1,0,0,0,14369,14326,1,0,0,0,
        14369,14327,1,0,0,0,14369,14329,1,0,0,0,14369,14331,1,0,0,0,14369,
        14333,1,0,0,0,14369,14335,1,0,0,0,14369,14337,1,0,0,0,14369,14339,
        1,0,0,0,14369,14340,1,0,0,0,14369,14341,1,0,0,0,14369,14343,1,0,
        0,0,14369,14344,1,0,0,0,14369,14345,1,0,0,0,14369,14346,1,0,0,0,
        14369,14348,1,0,0,0,14369,14349,1,0,0,0,14369,14350,1,0,0,0,14369,
        14351,1,0,0,0,14369,14352,1,0,0,0,14369,14354,1,0,0,0,14369,14355,
        1,0,0,0,14369,14357,1,0,0,0,14369,14358,1,0,0,0,14369,14360,1,0,
        0,0,14369,14361,1,0,0,0,14369,14362,1,0,0,0,14369,14364,1,0,0,0,
        14369,14365,1,0,0,0,14369,14366,1,0,0,0,14370,1263,1,0,0,0,14371,
        14400,3,790,395,0,14372,14373,5,310,0,0,14373,14400,3,794,397,0,
        14374,14375,5,384,0,0,14375,14376,5,166,0,0,14376,14400,3,796,398,
        0,14377,14379,5,166,0,0,14378,14377,1,0,0,0,14378,14379,1,0,0,0,
        14379,14380,1,0,0,0,14380,14381,3,796,398,0,14381,14390,5,1213,0,
        0,14382,14387,3,1280,640,0,14383,14384,5,1208,0,0,14384,14386,3,
        1280,640,0,14385,14383,1,0,0,0,14386,14389,1,0,0,0,14387,14385,1,
        0,0,0,14387,14388,1,0,0,0,14388,14391,1,0,0,0,14389,14387,1,0,0,
        0,14390,14382,1,0,0,0,14390,14391,1,0,0,0,14391,14392,1,0,0,0,14392,
        14393,5,1214,0,0,14393,14400,1,0,0,0,14394,14396,5,437,0,0,14395,
        14397,3,718,359,0,14396,14395,1,0,0,0,14396,14397,1,0,0,0,14397,
        14398,1,0,0,0,14398,14400,3,824,412,0,14399,14371,1,0,0,0,14399,
        14372,1,0,0,0,14399,14374,1,0,0,0,14399,14378,1,0,0,0,14399,14394,
        1,0,0,0,14400,1265,1,0,0,0,14401,14402,5,86,0,0,14402,14407,5,236,
        0,0,14403,14404,5,125,0,0,14404,14407,5,236,0,0,14405,14407,5,236,
        0,0,14406,14401,1,0,0,0,14406,14403,1,0,0,0,14406,14405,1,0,0,0,
        14407,1267,1,0,0,0,14408,14409,5,86,0,0,14409,14414,5,357,0,0,14410,
        14411,5,125,0,0,14411,14414,5,357,0,0,14412,14414,5,357,0,0,14413,
        14408,1,0,0,0,14413,14410,1,0,0,0,14413,14412,1,0,0,0,14414,1269,
        1,0,0,0,14415,14416,5,86,0,0,14416,14421,5,311,0,0,14417,14418,5,
        125,0,0,14418,14421,5,311,0,0,14419,14421,5,311,0,0,14420,14415,
        1,0,0,0,14420,14417,1,0,0,0,14420,14419,1,0,0,0,14421,1271,1,0,0,
        0,14422,14423,5,86,0,0,14423,14428,5,480,0,0,14424,14425,5,125,0,
        0,14425,14428,5,480,0,0,14426,14428,5,480,0,0,14427,14422,1,0,0,
        0,14427,14424,1,0,0,0,14427,14426,1,0,0,0,14428,1273,1,0,0,0,14429,
        14430,7,156,0,0,14430,1275,1,0,0,0,14431,14433,5,13,0,0,14432,14431,
        1,0,0,0,14432,14433,1,0,0,0,14433,14434,1,0,0,0,14434,14435,3,800,
        400,0,14435,1277,1,0,0,0,14436,14438,5,13,0,0,14437,14436,1,0,0,
        0,14437,14438,1,0,0,0,14438,14439,1,0,0,0,14439,14440,3,800,400,
        0,14440,1279,1,0,0,0,14441,14443,3,812,406,0,14442,14441,1,0,0,0,
        14442,14443,1,0,0,0,14443,14444,1,0,0,0,14444,14445,3,688,344,0,
        14445,1281,1,0,0,0,14446,14447,5,474,0,0,14447,14448,5,10,0,0,14448,
        14449,5,289,0,0,14449,1283,1,0,0,0,14450,14451,5,474,0,0,14451,14452,
        5,172,0,0,14452,14453,5,289,0,0,14453,1285,1,0,0,0,14454,14455,5,
        172,0,0,14455,14456,5,289,0,0,14456,14457,5,159,0,0,14457,1287,1,
        0,0,0,1855,1378,1384,1388,1392,1397,1399,1407,1409,1418,1420,1422,
        1436,1439,1442,1444,1448,1453,1455,1476,1486,1498,1501,1510,1517,
        1523,1527,1537,1541,1550,1554,1556,1563,1570,1586,1591,1598,1601,
        1612,1615,1619,1624,1626,1629,1636,1643,1653,1657,1659,1665,1668,
        1682,1696,1704,1715,1723,1732,1737,1741,1744,1749,1754,1758,1763,
        1767,1773,1793,1798,1805,1811,1821,1828,1831,1841,1846,1850,1853,
        1857,1860,1865,1873,1878,1881,1892,1897,1904,1907,1912,1916,1918,
        1922,1928,1932,1940,1945,1951,1957,1959,1968,1976,1980,1986,1991,
        1996,2002,2010,2014,2020,2025,2030,2041,2043,2052,2057,2065,2076,
        2086,2091,2095,2100,2105,2112,2117,2122,2126,2135,2138,2146,2150,
        2153,2158,2165,2170,2176,2179,2182,2191,2196,2200,2206,2216,2223,
        2227,2232,2236,2243,2251,2254,2259,2267,2270,2278,2281,2385,2393,
        2416,2424,2429,2432,2437,2440,2442,2444,2448,2463,2466,2471,2477,
        2479,2492,2499,2506,2509,2525,2528,2530,2535,2539,2546,2550,2561,
        2566,2577,2582,2586,2596,2605,2608,2611,2619,2622,2629,2632,2636,
        2640,2657,2660,2670,2674,2677,2680,2686,2690,2693,2701,2706,2708,
        2712,2715,2720,2725,2729,2734,2737,2741,2744,2751,2756,2762,2767,
        2771,2775,2777,2781,2784,2790,2793,2798,2806,2816,2827,2830,2837,
        2839,2845,2850,2852,2858,2864,2883,2886,2894,2896,2902,2907,2909,
        2915,2921,2924,2930,2932,2935,2941,2944,2946,2950,2961,2964,2972,
        2976,2978,2984,2989,2991,2997,3004,3010,3012,3015,3021,3024,3026,
        3040,3052,3060,3073,3075,3077,3080,3090,3098,3105,3119,3123,3137,
        3151,3160,3165,3170,3173,3178,3184,3196,3201,3206,3220,3223,3229,
        3231,3237,3244,3255,3268,3278,3282,3295,3300,3307,3324,3373,3378,
        3383,3389,3395,3401,3407,3412,3424,3433,3439,3445,3447,3460,3463,
        3472,3480,3487,3490,3498,3507,3514,3521,3523,3530,3533,3541,3545,
        3547,3551,3554,3561,3563,3566,3573,3575,3585,3593,3601,3609,3613,
        3616,3645,3648,3656,3672,3675,3683,3686,3695,3706,3709,3716,3723,
        3728,3730,3736,3738,3749,3757,3765,3773,3777,3784,3786,3797,3806,
        3818,3821,3824,3831,3840,3861,3865,3871,3877,3880,3884,3888,3891,
        3894,3906,3910,3912,3917,3924,3929,3937,3949,3957,3962,3967,3971,
        3974,3982,3987,3990,4001,4008,4013,4016,4024,4033,4044,4050,4058,
        4063,4067,4069,4077,4081,4093,4113,4116,4119,4123,4126,4129,4138,
        4141,4143,4149,4151,4160,4168,4180,4183,4192,4196,4207,4210,4214,
        4223,4229,4236,4240,4254,4257,4265,4274,4277,4283,4289,4295,4301,
        4307,4313,4319,4325,4331,4333,4339,4343,4346,4351,4356,4358,4363,
        4372,4381,4404,4413,4426,4429,4435,4443,4448,4450,4454,4465,4469,
        4473,4480,4489,4495,4500,4503,4506,4510,4514,4521,4530,4535,4541,
        4546,4550,4555,4558,4562,4567,4570,4573,4577,4581,4590,4599,4606,
        4612,4617,4620,4624,4635,4642,4651,4656,4660,4669,4674,4685,4688,
        4692,4700,4705,4710,4713,4718,4724,4730,4736,4741,4748,4750,4760,
        4772,4778,4784,4791,4800,4807,4812,4816,4829,4835,4844,4849,4853,
        4856,4859,4862,4866,4874,4885,4888,4896,4910,4915,4920,4928,4933,
        4936,4940,4949,4954,4957,4959,4964,4967,4974,4980,5010,5040,5053,
        5057,5063,5067,5076,5083,5085,5090,5102,5116,5128,5136,5140,5156,
        5161,5164,5173,5193,5196,5198,5203,5216,5221,5232,5234,5236,5240,
        5245,5253,5271,5277,5282,5286,5295,5300,5305,5309,5313,5317,5321,
        5328,5331,5335,5339,5348,5353,5356,5360,5367,5372,5382,5387,5396,
        5399,5404,5411,5417,5422,5433,5438,5445,5454,5459,5469,5473,5478,
        5485,5491,5497,5503,5507,5516,5519,5529,5531,5535,5538,5543,5548,
        5555,5560,5566,5569,5572,5576,5585,5588,5598,5600,5604,5607,5612,
        5617,5624,5629,5635,5638,5641,5646,5651,5658,5665,5679,5684,5691,
        5700,5709,5717,5720,5723,5734,5737,5744,5747,5767,5771,5783,5787,
        5803,5809,5818,5831,5838,5840,5850,5853,5858,5861,5865,5873,5882,
        5888,5899,5921,5927,5944,5949,5951,5966,5972,5975,5979,6009,6046,
        6053,6061,6064,6071,6074,6078,6082,6085,6090,6097,6101,6128,6137,
        6142,6146,6155,6158,6163,6168,6176,6179,6187,6190,6206,6228,6236,
        6240,6250,6259,6271,6304,6313,6318,6332,6343,6346,6349,6361,6368,
        6379,6397,6418,6422,6426,6429,6435,6439,6447,6451,6455,6467,6480,
        6493,6499,6510,6523,6534,6546,6554,6565,6569,6581,6585,6605,6609,
        6625,6631,6640,6643,6647,6654,6663,6666,6683,6688,6693,6734,6737,
        6742,6748,6750,6758,6769,6777,6788,6795,6802,6808,6815,6823,6832,
        6842,6846,6849,6856,6862,6867,6876,6885,6891,6905,6910,6919,6930,
        6933,6947,6951,6960,6968,6971,6977,6989,6996,6999,7004,7007,7012,
        7020,7031,7034,7049,7069,7074,7080,7094,7115,7120,7123,7134,7137,
        7144,7147,7150,7155,7157,7164,7167,7173,7178,7183,7185,7192,7195,
        7204,7208,7212,7215,7221,7224,7234,7237,7240,7247,7259,7267,7275,
        7281,7284,7290,7293,7300,7304,7308,7311,7315,7318,7321,7328,7331,
        7348,7378,7381,7392,7398,7402,7411,7421,7424,7428,7432,7435,7439,
        7443,7446,7450,7453,7457,7460,7464,7468,7472,7481,7484,7488,7491,
        7494,7499,7503,7512,7516,7526,7532,7535,7539,7543,7546,7554,7559,
        7562,7566,7575,7584,7589,7592,7596,7600,7610,7618,7622,7627,7633,
        7637,7640,7644,7648,7651,7655,7658,7662,7665,7672,7675,7679,7685,
        7689,7691,7694,7706,7710,7721,7735,7740,7748,7756,7763,7767,7771,
        7774,7785,7790,7794,7798,7808,7813,7815,7822,7826,7834,7837,7841,
        7854,7857,7871,7874,7878,7883,7887,7896,7899,7903,7906,7923,7926,
        7935,7941,7948,7950,7952,7956,7964,7967,7973,7976,7980,7984,7989,
        7991,8006,8009,8019,8022,8028,8031,8041,8054,8057,8061,8066,8068,
        8072,8075,8078,8081,8085,8088,8091,8096,8101,8107,8110,8116,8123,
        8127,8137,8140,8147,8156,8158,8176,8184,8190,8192,8205,8214,8226,
        8236,8240,8243,8250,8255,8261,8265,8268,8270,8274,8277,8281,8288,
        8292,8304,8307,8310,8312,8316,8320,8322,8328,8336,8340,8344,8352,
        8355,8357,8362,8365,8369,8372,8376,8386,8389,8396,8399,8402,8405,
        8409,8412,8415,8419,8422,8426,8429,8433,8436,8439,8443,8446,8450,
        8453,8463,8466,8473,8481,8485,8492,8496,8500,8504,8513,8515,8519,
        8526,8528,8532,8537,8539,8546,8550,8552,8561,8568,8579,8587,8611,
        8616,8618,8641,8646,8651,8654,8660,8667,8680,8685,8690,8696,8728,
        8744,8750,8754,8759,8763,8768,8772,8777,8781,8786,8790,8795,8799,
        8803,8807,8812,8816,8820,8824,8828,8832,8836,8840,8844,8848,8852,
        8856,8860,8872,8877,8882,8887,8890,8897,8905,8911,8918,8922,8924,
        8928,8941,8944,8948,8954,8957,8961,8972,8974,8982,8993,8996,9000,
        9003,9009,9014,9019,9023,9033,9040,9047,9056,9059,9067,9078,9082,
        9088,9095,9097,9100,9103,9108,9110,9117,9123,9125,9134,9143,9154,
        9157,9169,9171,9182,9187,9190,9200,9204,9215,9222,9226,9229,9236,
        9240,9246,9260,9272,9276,9280,9286,9289,9293,9295,9299,9306,9312,
        9322,9327,9337,9347,9360,9363,9367,9372,9376,9379,9384,9391,9400,
        9403,9413,9416,9428,9435,9442,9449,9457,9474,9477,9480,9487,9494,
        9501,9508,9513,9520,9530,9545,9556,9565,9576,9583,9601,9611,9613,
        9618,9636,9647,9656,9663,9672,9676,9681,9685,9692,9696,9700,9703,
        9712,9715,9725,9738,9743,9757,9763,9767,9771,9782,9826,9832,9881,
        9886,9891,9895,9899,9907,9928,9930,9936,9940,9945,9949,9958,9983,
        9993,10004,10008,10013,10020,10028,10036,10040,10045,10047,10055,
        10062,10067,10069,10071,10075,10084,10089,10093,10097,10115,10125,
        10130,10139,10142,10146,10152,10157,10160,10164,10170,10175,10178,
        10182,10188,10193,10196,10200,10206,10211,10217,10221,10229,10234,
        10239,10244,10252,10257,10262,10266,10275,10281,10288,10295,10302,
        10309,10332,10343,10349,10357,10359,10375,10384,10387,10397,10406,
        10409,10414,10417,10421,10438,10472,10491,10525,10534,10549,10619,
        10659,10682,10692,10702,10713,10724,10733,10743,10745,10764,10766,
        10778,10780,10794,10796,10822,10834,10837,10843,10845,10854,10860,
        10863,10868,10873,10879,10890,10894,10906,10910,10934,10946,10950,
        10958,10960,10984,10989,11005,11008,11021,11041,11052,11064,11073,
        11079,11081,11085,11098,11130,11142,11157,11172,11180,11195,11205,
        11212,11228,11231,11240,11242,11255,11269,11283,11297,11309,11321,
        11330,11332,11352,11357,11370,11374,11389,11393,11398,11408,11416,
        11425,11427,11432,11439,11443,11450,11469,11481,11485,11488,11496,
        11506,11513,11518,11527,11532,11544,11551,11557,11562,11565,11570,
        11575,11578,11582,11585,11591,11602,11606,11609,11612,11620,11626,
        11630,11634,11637,11651,11660,11664,11667,11682,11688,11690,11702,
        11712,11722,11732,11734,11736,11741,11751,11753,11755,11760,11768,
        11773,11781,11783,11788,11796,11805,11813,11821,11831,11841,11857,
        11882,11887,11890,11897,11905,11923,11932,11935,11945,11956,11974,
        11999,12002,12016,12021,12037,12042,12058,12063,12072,12077,12090,
        12093,12114,12120,12133,12144,12156,12172,12184,12195,12197,12202,
        12218,12228,12237,12242,12249,12254,12265,12270,12283,12285,12287,
        12292,12301,12306,12325,12334,12336,12341,12367,12378,12389,12397,
        12400,12405,12408,12415,12418,12425,12430,12438,12445,12449,12452,
        12462,12484,12495,12497,12508,12513,12522,12527,12529,12537,12548,
        12551,12554,12564,12567,12571,12574,12578,12582,12590,12598,12608,
        12612,12616,12619,12626,12633,12636,12639,12642,12652,12656,12664,
        12674,12677,12685,12710,12714,12728,12731,12734,12751,12778,12787,
        12793,12800,12802,12811,12816,12827,12831,12853,12863,12869,12877,
        12884,12888,12896,12902,12905,12910,12916,12918,12924,12934,12938,
        12944,12952,12958,12961,12972,12982,12987,12990,12993,13000,13008,
        13012,13023,13033,13039,13124,13126,13133,13137,13142,13150,13153,
        13166,13174,13179,13183,13192,13205,13213,13221,13225,13232,13236,
        13256,13272,13275,13279,13286,13298,13303,13306,13316,13329,13342,
        13351,13355,13361,13364,13368,13375,13381,13385,13397,13412,13417,
        13421,13424,13428,13431,13437,13440,13444,13452,13463,13474,13481,
        13520,13528,13533,13537,13541,13545,13549,13552,13556,13559,13566,
        13572,13580,13585,13589,13597,13607,13618,13628,13635,13638,13640,
        13643,13649,13651,13656,13671,13683,13686,13693,13696,13704,13708,
        13711,13718,13721,13734,13738,13743,13747,13754,13758,13767,13775,
        13783,13791,13798,13806,13810,13814,13821,13824,13832,13840,13850,
        13856,13861,13869,13879,13884,13886,13896,13900,13910,13913,13918,
        13929,13933,13936,13947,13959,13970,13974,13985,13988,13995,13998,
        14006,14010,14016,14023,14032,14037,14041,14045,14052,14055,14064,
        14072,14080,14088,14091,14099,14108,14111,14123,14133,14139,14144,
        14152,14162,14165,14167,14172,14182,14186,14196,14199,14203,14213,
        14217,14228,14240,14369,14378,14387,14390,14396,14399,14406,14413,
        14420,14427,14432,14437,14442
    ]

class TeradataSQLDDLParser ( Parser ):

    grammarFileName = "TeradataSQLDDLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORTSESSION'", "'ABS'", 
                     "'ACCESS_LOCK'", "'ACCOUNT'", "'ACOS'", "'ACOSH'", 
                     "'ADD'", "'ADD_MONTHS'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
                     "'ALL'", "'ALTER'", "'AMP'", "'AND'", "'ANSIDATE'", 
                     "'ANY'", "'ARGLPAREN'", "'AS'", "'ASC'", "'ASIN'", 
                     "'ASINH'", "'AT'", "'ATAN'", "'ATAN2'", "'ATANH'", 
                     "'ATOMIC'", "'AUTHORIZATION'", "'AVE'", "'AVERAGE'", 
                     "'AVG'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BLOB'", "'BOTH'", "'BT'", "'BUT'", "'BY'", 
                     "'BYTE'", "'BYTEINT'", "'BYTES'", "'CALL'", "'CASE'", 
                     "'CASE_N'", "'CASESPECIFIC'", "'CAST'", "'CD'", "'CHAR'", 
                     "'CHAR_LENGTH'", "'CHAR2HEXINT'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERS'", "'CHARS'", "'CHECK'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'CM'", 
                     "'COALESCE'", "'COLLATION'", "'COLLECT'", "'COLUMN'", 
                     "'COMMENT'", "'COMMIT'", "'COMPRESS'", "'CONNECT'", 
                     "'CONSTRAINT'", "'CONSTRUCTOR'", "'CONSUME'", "'CONTAINS'", 
                     "'CONTINUE'", "'CONVERT_TABLE_HEADER'", "'CORR'", "'COS'", 
                     "'COSH'", "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", 
                     "'CREATE'", "'CROSS'", "'CS'", "'CSUM'", "'CT'", "'CTCONTROL'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'CV'", "'CYCLE'", "'DATABASE'", "'DATABLOCKSIZE'", 
                     "'DATE'", "'DATEFORM'", "'DAY'", "'DEALLOCATE'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRED'", 
                     "'DEGREES'", "'DEL'", "'DELETE'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIAGNOSTIC'", "'DICTIONARY'", "'DISABLED'", "'DISTINCT'", 
                     "'DO'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'DUAL'", 
                     "'DUMP'", "'DYNAMIC'", "'EACH'", "'ECHO'", "'ELSE'", 
                     "'ELSEIF'", "'ENABLED'", "'END'", "'EQ'", "'EQUALS'", 
                     "'ERROR'", "'ERRORFILES'", "'ERRORTABLES'", "'ESCAPE'", 
                     "'ET'", "'EXCEPT'", "'EXEC'", "'EXECUTE'", "'EXISTS'", 
                     "'EXIT'", "'EXP'", "'EXPAND'", "'EXPANDING'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALLBACK'", "'FASTEXPORT'", 
                     "'FETCH'", "'FIRST'", "'FLOAT'", "'FLUSH'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FOUND'", "'FREESPACE'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONDESCRIPTOR'", 
                     "'GE'", "'GENERATED'", "'GET'", "'GIVE'", "'GRANT'", 
                     "'GRAPHIC'", "'GROUP'", "'GROUPING'", "'GT'", "'HANDLER'", 
                     "'HASH'", "'HASHAMP'", "'HASHBAKAMP'", "'HASHBUCKET'", 
                     "'HASHROW'", "'HAVING'", "'HELP'", "'HOUR'", "'ID2BIGINT'", 
                     "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IN'", "'INCONSISTENT'", 
                     "'INDEX'", "'INITIATE'", "'INNER'", "'INOUT'", "'INPUT'", 
                     "'INS'", "'INSERT'", "'INSTANCE'", "'INSTEAD'", "'INT'", 
                     "'INTEGER'", "'INTEGERDATE'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JAR'", "'JOIN'", "'JOURNAL'", 
                     "'KEY'", "'KURTOSIS'", "'LANGUAGE'", "'LARGE'", "'LE'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LN'", "'LOADING'", "'LOCAL'", "'LOCATOR'", "'LOCK'", 
                     "'LOCKING'", "'LOG'", "'LOGGING'", "'LOGON'", "'LONG'", 
                     "'LOOP'", "'LOWER'", "'LT'", "'MACRO'", "'MAP'", "'MAVG'", 
                     "'MAX'", "'MAXIMUM'", "'MCHARACTERS'", "'MDIFF'", "'MERGE'", 
                     "'METHOD'", "'MIN'", "'MINDEX'", "'MINIMUM'", "'MINUS'", 
                     "'MINUTE'", "'MLINREG'", "'MLOAD'", "'MOD'", "'MODE'", 
                     "'MODIFIES'", "'MODIFY'", "'MONITOR'", "'MONRESOURCE'", 
                     "'MONSESSION'", "'MONTH'", "'MSUBSTR'", "'MSUM'", "'MULTISET'", 
                     "'NAMED'", "'NATURAL'", "'NE'", "'NEW'", "'NEW_TABLE'", 
                     "'NEXT'", "'NO'", "'NONE'", "'NONTEMPORAL'", "'NORMALIZE'", 
                     "'NOT'", "'NOWAIT'", "'NULL'", "'NULLIF'", "'NULLIFZERO'", 
                     "'NUMBER'", "'NUMERIC'", "'OBJECT'", "'OBJECTS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFF'", "'OLD'", "'OLD_TABLE'", "'ON'", "'ONLY'", 
                     "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", "'ORDERING'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERRIDE'", 
                     "'PARAMETER'", "'PASSWORD'", "'PERCENT'", "'PERCENT_RANK'", 
                     "'PERM'", "'PERMANENT'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIVILEGES'", 
                     "'PROCEDURE'", "'PROFILE'", "'PROTECTION'", "'PUBLIC'", 
                     "'QUALIFIED'", "'QUALIFY'", "'QUANTILE'", "'QUEUE'", 
                     "'RADIANS'", "'RANDOM'", "'RANGE_N'", "'RANK'", "'READS'", 
                     "'REAL'", "'RECURSIVE'", "'REFERENCES'", "'REFERENCING'", 
                     "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
                     "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", 
                     "'REGR_SYY'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REPLCONTROL'", "'REPLICATION'", 
                     "'REQUEST'", "'RESIGNAL'", "'RESTART'", "'RESTORE'", 
                     "'RESULT'", "'RESUME'", "'RET'", "'RETRIEVE'", "'RETURN'", 
                     "'RETURNS'", "'REVALIDATE'", "'REVOKE'", "'RIGHT'", 
                     "'RIGHTS'", "'ROLE'", "'ROLLBACK'", "'ROLLFORWARD'", 
                     "'ROLLUP'", "'ROW'", "'ROW_NUMBER'", "'ROWID'", "'ROWS'", 
                     "'SAMPLE'", "'SAMPLEID'", "'SCROLL'", "'SECOND'", "'SEL'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SETRESRATE'", "'SETS'", 
                     "'SETSESSRATE'", "'SHOW'", "'SIGNAL'", "'SIN'", "'SINH'", 
                     "'SKEW'", "'SMALLINT'", "'SOME'", "'SOUNDEX'", "'SPECIFIC'", 
                     "'SPOOL'", "'SQL'", "'SQLEXCEPTION'", "'SQLTEXT'", 
                     "'SQLWARNING'", "'SQRT'", "'SS'", "'START'", "'STARTUP'", 
                     "'STATEMENT'", "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                     "'STEPINFO'", "'STRING_CS'", "'SUBSCRIBER'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUMMARY'", "'SUSPEND'", "'TABLE'", 
                     "'TAN'", "'TANH'", "'TBL_CS'", "'TD_ANYTYPE'", "'TD_AUTHID'", 
                     "'TD_HOST'", "'TD_ROWLOADID'", "'TD_ROWREVISION'", 
                     "'TD_ROWSIZE'", "'TD_VALIST'", "'TEMPORARY'", "'TERMINATE'", 
                     "'THEN'", "'THRESHOLD'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TITLE'", "'TO'", "'TOP'", "'TRACE'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONTIME'", 
                     "'TRANSFORM'", "'TRANSLATE'", "'TRANSLATE_CHK'", "'TRIGGER'", 
                     "'TRIM'", "'TYPE'", "'UC'", "'UDTCASTAS'", "'UDTCASTLPAREN'", 
                     "'UDTMETHOD'", "'UDTTYPE'", "'UDTUSAGE'", "'UESCAPE'", 
                     "'UNDEFINED'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNTIL'", 
                     "'UNTIL_CHANGED'", "'UNTIL_CLOSED'", "'UPD'", "'UPDATE'", 
                     "'UPPER'", "'UPPERCASE'", "'USER'", "'USING'", "'VALIDTIME'", 
                     "'VALUE'", "'VALUES'", "'VAR_POP'", "'VAR_SAMP'", "'VARBYTE'", 
                     "'VARCHAR'", "'VARGRAPHIC'", "'VARIANT_TYPE'", "'VARYING'", 
                     "'VIEW'", "'VOLATILE'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WIDTH_BUCKET'", "'WITH'", "'WITHOUT'", "'WORK'", 
                     "'XMLPLAN'", "'YEAR'", "'ZEROIFNULL'", "'ZONE'", "'ALIAS'", 
                     "'DESCRIPTOR'", "'GO'", "'GOTO'", "'INDICATOR'", "'PRIVATE'", 
                     "'WAIT'", "'AbortSessions'", "'ABSENT'", "'ACCESS'", 
                     "'ACCORDING'", "'ACCUMULATE'", "'AG'", "'AggGeomIntersection'", 
                     "'AggGeomUnion'", "'ALLDBQL'", "'ALLOCATE'", "'ALLOCATION'", 
                     "'ALLOW'", "'ALLPARAMS'", "'ALLTDWM'", "'ALWAYS'", 
                     "'AMPCOUNT'", "'ANALYSIS'", "'ANCHOR'", "'ANCHOR_HOUR'", 
                     "'ANCHOR_MILLISECOND'", "'ANCHOR_MINUTE'", "'ANCHOR_SECOND'", 
                     "'APPLNAME'", "'ARCHIVE'", "'ARRAY'", "'ARRAY_ADD'", 
                     "'ARRAY_AGG'", "'ARRAY_AVG'", "'ARRAY_COMPARE'", "'ARRAY_CONCAT'", 
                     "'ARRAY_COUNT_DISTINCT'", "'ARRAY_DIV'", "'ARRAY_EQ'", 
                     "'ARRAY_GE'", "'ARRAY_GET'", "'ARRAY_GT'", "'ARRAY_LE'", 
                     "'ARRAY_LT'", "'ARRAY_MAX'", "'ARRAY_MIN'", "'ARRAY_MOD'", 
                     "'ARRAY_MUL'", "'ARRAY_NE'", "'ARRAY_SUB'", "'ARRAY_SUM'", 
                     "'ARRAY_UPDATE'", "'ARRAY_UPDATE_STRIDE'", "'ASCII'", 
                     "'ASSIGNMENT'", "'ATTR'", "'ATTRIBUTE'", "'ATTRIBUTES'", 
                     "'ATTRIBUTION'", "'ATTRS'", "'AUTH'", "'AUTO'", "'AUTOTEMP'", 
                     "'AVRO'", "'BIT_LENGTH'", "'BITAND'", "'BITNOT'", "'BITOR'", 
                     "'BITXOR'", "'BLOCKCOMPRESSION'", "'BLOCKCOMPRESSIONALGORITHM'", 
                     "'BLOCKCOMPRESSIONLEVEL'", "'BOM'", "'BOTTOM'", "'BSON'", 
                     "'C'", "'CALENDAR'", "'CALLED'", "'CALLER'", "'camset'", 
                     "'camset_l'", "'CAPTURE'", "'CARDINALITY'", "'CEIL'", 
                     "'CEILING'", "'CHANGERATE'", "'CHARACTERISTICS'", "'CHARSET'", 
                     "'CHARSET_COLL'", "'CHECKSUM'", "'CHR'", "'CLASS_ORIGIN'", 
                     "'CLICKLAG'", "'CLIENT'", "'CNT'", "'COLOCATE'", "'COLUMNMETA'", 
                     "'COLUMNS'", "'COLUMNSPERINDEX'", "'COLUMNSPERJOININDEX'", 
                     "'COMMAND_FUNCTION'", "'COMMAND_FUNCTION_CODE'", "'COMPARISON'", 
                     "'COMPILE'", "'CONCAT'", "'CONCURRENT'", "'CONDITION'", 
                     "'CONDITION_IDENTIFIER'", "'CONDITION_NUMBER'", "'CONTAINED'", 
                     "'CONTAINEDTOKEN'", "'CONTENT'", "'CONTIGUOUS'", "'COST'", 
                     "'COSTS'", "'COUNTSET'", "'CPP'", "'CPUTIME'", "'CPUTIMENORM'", 
                     "'CREATEDATASET'", "'CREATOR'", "'CUME_DIST'", "'CURDATE'", 
                     "'CURTIME'", "'DATA'", "'DATASET'", "'day_of_calendar'", 
                     "'day_of_month'", "'day_of_week'", "'day_of_year'", 
                     "'DayNumber_Of_Calendar'", "'DayNumber_Of_Month'", 
                     "'DayNumber_Of_Week'", "'DayNumber_Of_Year'", "'DayOccurrence_Of_Month'", 
                     "'DBA'", "'DBC'", "'DEBUG'", "'decamset'", "'decamset_l'", 
                     "'DECODE'", "'DECOMPRESS'", "'DEFINER'", "'DELIMITER'", 
                     "'DELTA_T'", "'DEMOGRAPHICS'", "'DENIALS'", "'DENSE'", 
                     "'DENSE_RANK'", "'DESCRIBE'", "'DETAILED'", "'DIAGNOSTICS'", 
                     "'DIGITS'", "'DIMENSION'", "'DOCUMENT'", "'DOT'", "'DOWN'", 
                     "'DR'", "'DUPCOUNT'", "'DUPCOUNTCUM'", "'EBCDIC'", 
                     "'EDITDISTANCE'", "'ELAPSEDSEC'", "'ELAPSEDTIME'", 
                     "'ELEMENT'", "'ELZS_H'", "'EMITNULL'", "'EMPTY'", "'EMPTY_BLOB'", 
                     "'EMPTY_CLOB'", "'ENCODE'", "'ENCODING'", "'ENCRYPT'", 
                     "'ERRORS'", "'ERRORTBL'", "'EVENTCOLUMN'", "'EXCEPTION'", 
                     "'EXCL'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXPORTWIDTH'", "'FALSE'", 
                     "'FEATUREINFO'", "'FILE'", "'FILL'", "'FILTER'", "'FINAL'", 
                     "'FIRST_NOTNULL'", "'FIRST_VALUE'", "'FLOOR'", "'FOLLOWING'", 
                     "'FOREIGNFUNCTION'", "'FORTOKEN'", "'FRIDAY'", "'FROM_BYTES'", 
                     "'FUNCTIONPARAMETER'", "'G'", "'GETBIT'", "'GetPSFVersion'", 
                     "'GetQueryBand'", "'GetQueryBandValue'", "'GetTimeZoneDisplacement'", 
                     "'GLOBAL'", "'GLOP'", "'Greatest'", "'HIGH'", "'HOST'", 
                     "'IdentifyDatabase'", "'IdentifySession'", "'IdentifyTable'", 
                     "'IdentifyUser'", "'IFP'", "'IGNORE'", "'IMMEDIATELY'", 
                     "'IMPORT'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDENT'", "'INDEXESPERTABLE'", "'INDEXMAINTMODE'", 
                     "'INIT'", "'INITCAP'", "'INLINE'", "'INSTANTIABLE'", 
                     "'INSTR'", "'INTERNAL'", "'INVOKER'", "'IOCOUNT'", 
                     "'IPARTITION'", "'ISOLATED'", "'ISOLATION'", "'JAVA'", 
                     "'JIS_COLL'", "'JSON'", "'JSON_AGG'", "'JSON_COMPOSE'", 
                     "'K'", "'KANJI1'", "'KANJISJIS'", "'KBYTE'", "'KBYTES'", 
                     "'KEEP'", "'KILOBYTES'", "'LAG'", "'LAST'", "'Last_Day'", 
                     "'LAST_NOTNULL'", "'LAST_VALUE'", "'LATIN'", "'LDIFF'", 
                     "'LEAD'", "'Least'", "'LENGTH'", "'LEVEL'", "'LIST'", 
                     "'LOAD'", "'LOCATE'", "'LOCKEDUSEREXPIRE'", "'LOW'", 
                     "'LPAD'", "'LTRIM'", "'lzcomp'", "'lzcomp_L'", "'lzdecomp'", 
                     "'lzdecomp_L'", "'M'", "'MAD'", "'MANUAL'", "'MAPPING'", 
                     "'MATCHED'", "'MAX_CHOOSE'", "'MAXCHAR'", "'MAXINTERVALS'", 
                     "'MAXLOGONATTEMPTS'", "'MAXVALUE'", "'MAXVALUELENGTH'", 
                     "'MEDIAN'", "'MEDIUM'", "'MEETS'", "'MEMBER'", "'MERGEBLOCKRATIO'", 
                     "'MESSAGE_LENGTH'", "'MESSAGE_TEXT'", "'MIN_CHOOSE'", 
                     "'MINCHAR'", "'MINVALUE'", "'MODIFIED'", "'MONDAY'", 
                     "'MonitorQueryBand'", "'MonitorSessionRate'", "'MonitorVersion'", 
                     "'MONTH_BEGIN'", "'MONTH_END'", "'month_of_calendar'", 
                     "'month_of_quarter'", "'month_of_year'", "'MonthNumber_Of_Calendar'", 
                     "'MonthNumber_Of_Quarter'", "'MonthNumber_Of_Year'", 
                     "'Months_Between'", "'MORE'", "'MULTINATIONAL'", "'NAME'", 
                     "'NAMESPACE'", "'NEVER'", "'NEXT_DAY'", "'NGRAM'", 
                     "'NIL'", "'NODDLTEXT'", "'NODE'", "'NONOPTCOST'", "'NONOPTINIT'", 
                     "'NONSEQUENCED'", "'NORIGHT'", "'NOSEXTRACTVARFROMPATH'", 
                     "'NOTATION'", "'NOW'", "'NPATH'", "'NTH'", "'NULLS'", 
                     "'NUMFPFNS'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
                     "'nvl'", "'nvl2'", "'NVP'", "'OA'", "'OAdd_Months'", 
                     "'OCOUNT'", "'ODELETE'", "'OEXISTS'", "'OEXTEND'", 
                     "'OFIRST'", "'OLAST'", "'OLD_NEW_TABLE'", "'OLIMIT'", 
                     "'ONEXT'", "'ONLINE'", "'OPRIOR'", "'OPTIONS'", "'ORDERBYVALUES'", 
                     "'ORDERED_ANALYTIC'", "'ORDINALITY'", "'OREPLACE'", 
                     "'OTRANSLATE'", "'OTRIM'", "'OVERLAYS'", "'OWNER'", 
                     "'P_INTERSECT'", "'P_NORMALIZE'", "'PARAMID'", "'PARAMINFO'", 
                     "'PARENT'", "'PARTITION'", "<INVALID>", "'PARTITIONED'", 
                     "'PARTITIONNAMES'", "'PASS'", "'PASSING'", "'PATH_GENERATOR'", 
                     "'PATH_START'", "'PATH_SUMMARIZER'", "'PATTERN'", "'PERCENTILE'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIOD'", 
                     "'PIVOT'", "'PORTION'", "'POWER'", "'PRECEDES'", "'PRECEDING'", 
                     "'PREFIX'", "'PRINT'", "'PRIOR'", "'PROTECTED'", "'QUARTER_BEGIN'", 
                     "'QUARTER_END'", "'quarter_of_calendar'", "'quarter_of_year'", 
                     "'QuarterNumber_Of_Calendar'", "'QuarterNumber_Of_Year'", 
                     "'QUERY'", "'QUERY_BAND'", "'QUOTECHAR'", "'RANDOMIZED'", 
                     "'RANGE'", "<INVALID>", "'RAPIDFIRE'", "'RDIFF'", "'READ'", 
                     "'RECALC'", "'regexp_instr'", "'regexp_replace'", "'regexp_similar'", 
                     "'regexp_substr'", "'REPLACEMENT'", "'RESET'", "'RESPECT'", 
                     "'RESTRICTWORDS'", "'RETAIN'", "'RETURNED_SQLSTATE'", 
                     "'RETURNING'", "'REUSE'", "'ROOT'", "'ROTATELEFT'", 
                     "'ROTATERIGHT'", "'Round'", "'ROW_COUNT'", "'ROWIDGEN'", 
                     "'ROWIDGEN2'", "'RPAD'", "'RTRIM'", "'RU'", "'RULES'", 
                     "'RULESET'", "'SAMPLES'", "'SATURDAY'", "'SCHEMA'", 
                     "'SCRIPT'", "'SCRIPT_COMMAND'", "'SEARCHSPACE'", "'SEARCHUIFDBPATH'", 
                     "'SECURITY'", "'SEED'", "'SELF'", "'SEQ'", "'SEQUENCE'", 
                     "'SEQUENCED'", "'SERIALIZABLE'", "'SERVER'", "'SESSIONIZE'", 
                     "'SETBIT'", "'SetResourceRate'", "'SetSessionAccount'", 
                     "'SetSessionRate'", "'SHARE'", "'SHIFTLEFT'", "'SHIFTRIGHT'", 
                     "'SIGN'", "'SIZE'", "'SNAPPY_COMPRESS'", "'SNAPPY_DECOMPRESS'", 
                     "'SOURCE'", "'SPARSE'", "'SPECCHAR'", "'SPL'", "'SQLSTATE'", 
                     "'SR'", "'ST_GEOMETRY'", "'STAT'", "'STATIC'", "'STATS'", 
                     "'STATSUSAGE'", "'STORAGE'", "'STRIP'", "'STRTOK'", 
                     "'STYLE'", "'SUBBITSTR'", "'SUBCLASS_ORIGIN'", "'SUCCEEDS'", 
                     "'SUMMARYONLY'", "'SUNDAY'", "'SYMBOLS'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SYSTEMTEST'", "'TARGET'", "'TD_ARRAY2P'", 
                     "'TD_DATASET'", "'td_day_of_calendar'", "'td_day_of_month'", 
                     "'td_day_of_week'", "'td_day_of_year'", "'TD_GENERAL'", 
                     "'TD_GETTIMEBUCKET'", "'TD_INTERNAL'", "'TD_LZ_COMPRESS'", 
                     "'TD_LZ_DECOMPRESS'", "'td_month_of_calendar'", "'td_month_of_quarter'", 
                     "'td_month_of_year'", "'td_quarter_of_calendar'", "'td_quarter_of_year'", 
                     "'TD_TIME_BUCKET_NUMBER'", "'td_week_of_calendar'", 
                     "'td_week_of_month'", "'td_week_of_year'", "'td_weekday_of_month'", 
                     "'td_year_of_calendar'", "'TDWMEVENT'", "'TDWMEXCEPTION'", 
                     "'TDWMHISTORY'", "'TEMPORAL_DATE'", "'TEMPORAL_TIMESTAMP'", 
                     "'TEXT'", "'THRESHOLDPERCENT'", "'THROUGH'", "'THURSDAY'", 
                     "'TIES'", "'TIMECODE'", "'TIMECOLUMN'", "'TIMEOUT'", 
                     "'TIMESTAMPCOLUMN'", "'TO_BYTE'", "'TO_BYTES'", "'TO_CHAR'", 
                     "'TO_DATE'", "'TO_DSINTERVAL'", "'TO_NUMBER'", "'TO_TIMESTAMP'", 
                     "'TO_TIMESTAMP_TZ'", "'TO_YMINTERVAL'", "'TOTOKEN'", 
                     "'TPA'", "'TRANSACTION_ACTIVE'", "'TransUnicodeToUTF8'", 
                     "'TransUTF8ToUnicode'", "'TRUE'", "'Trunc'", "'TRUST_ONLY'", 
                     "'TTGRANULARITY'", "'TUESDAY'", "'UBJSON'", "'UCASE'", 
                     "'UDFSEARCHPATH'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNICODE'", "'UNKNOWN'", "'UNPIVOT'", "'USE'", "'USECOUNT'", 
                     "'UTILITYINFO'", "'VARRAY'", "'VERBOSE'", "'VERSION'", 
                     "'VERSIONING'", "'WARNING'", "'WEDNESDAY'", "'WEEK_BEGIN'", 
                     "'WEEK_END'", "'week_of_calendar'", "'week_of_month'", 
                     "'week_of_year'", "'weekday_of_month'", "'WeekNumber_Of_Calendar'", 
                     "'WeekNumber_Of_Month'", "'WeekNumber_Of_Quarter'", 
                     "'WeekNumber_Of_Year'", "'WHITESPACE'", "'WINDOWSIZE'", 
                     "'WITHIN'", "'WORKLOAD'", "'WRITE'", "'XML'", "'XMLAGG'", 
                     "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDECLARATION'", 
                     "'XMLDOCUMENT'", "'XMLELEMENT'", "'XMLFOREST'", "'XMLNAMESPACES'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLSCHEMA'", 
                     "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTEXT'", "'XMLTYPE'", 
                     "'XMLVALIDATE'", "'YEAR_BEGIN'", "'YEAR_END'", "'year_of_calendar'", 
                     "'YearNumber_Of_Calendar'", "'ZLIB'", "'BUCKET'", "'COMMITTED'", 
                     "'CREATEXML'", "'_LATIN'", "'_UNICODE'", "'_KANJISJIS'", 
                     "'_GRAPHIC'", "'CSV'", "'CSVLD'", "'DATASIZE'", "'DAYOFMONTH'", 
                     "'DAYS'", "'DEFINITION'", "'DELETED'", "'FAST'", "'LISTAGG'", 
                     "'PATH'", "'REGEXP_SPLIT_TO_TABLE'", "'REVERSE'", "'SAS'", 
                     "'SQLTABLE'", "'STRTOK_SPLIT_TO_TABLE'", "'SYSLIB'", 
                     "'SYSUDTLIB'", "'TD_SERVER_DB'", "'TD_SYSFNLIB'", "'TD_SYSXML'", 
                     "'TIMEDATEWZCONTROL'", "'TRUST'", "'TRYCAST'", "'UDT'", 
                     "'USAGE'", "'VARIANT'", "'WEEK'", "'WIDTH'", "'XMLPUBLISH'", 
                     "'XMLPUBLISH_STREAM'", "'XMLSPLIT'", "'LATIN_TO_UNICODE'", 
                     "'UNICODE_TO_LATIN'", "'LOCALE_TO_UNICODE'", "'UNICODE_TO_LOCALE'", 
                     "'ASBSON'", "'ASBSONTEXT'", "'COMBINE'", "'EXISTVALUE'", 
                     "'JSONEXTRACT'", "'JSONEXTRACTVALUE'", "'JSONEXTRACTLARGEVALUE'", 
                     "'KEYCOUNT'", "'METADATA'", "'STORAGE_SIZE'", "'CREATESCHEMABASEDXML'", 
                     "'CREATENONSCHEMABASEDXML'", "'EXISTSNODE'", "'ISCONTENT'", 
                     "'ISDOCUMENT'", "'ISSCHEMAVALID'", "'ISSCHEMAVALIDATED'", 
                     "'XMLEXTRACT'", "'XMLTRANSFORM'", "'PROC_ID'", "'LOCATION'", 
                     "'PAYLOAD'", "'TRUSTED'", "'PATHPATTERN'", "'MANIFEST'", 
                     "'ROWFORMAT'", "'STOREDAS'", "'HEADER'", "'STRIP_EXTERIOR_SPACES'", 
                     "'STRIP_ENCLOSING_CHAR'", "'RLS'", "'SINGLE'", "'MULTIPLE'", 
                     "'JSON_COMPRESS'", "'JSON_DECOMPRESS'", "'TS_COMPRESS'", 
                     "'TS_DECOMPRESS'", "'CONTIGUOUSMAPAMPS'", "'SPARSEMAPAMPS'", 
                     "'SPARSETABLEAMPS'", "'UNNEST'", "'CALCMATRIX'", "'PHRASE'", 
                     "'CALCTYPE'", "'OUTPUT'", "'NULL_HANDLING'", "'READ_NOS'", 
                     "'BUFFERSIZE'", "'RETURNTYPE'", "'SAMPLE_PERC'", "'FULLSCAN'", 
                     "'TD_UNPIVOT'", "'VALUE_COLUMNS'", "'UNPIVOT_COLUMN'", 
                     "'COLUMN_LIST'", "'COLUMN_ALIAS_LIST'", "'INCLUDE_NULLS'", 
                     "'WRITE_NOS'", "'NAMING'", "'MANIFESTFILE'", "'MANIFESTONLY'", 
                     "'OVERWRITE'", "'INCLUDE_ORDERING'", "'INCLUDE_HASHBY'", 
                     "'MAXOBJECTSIZE'", "'COMPRESSION'", "'ARRAY_TO_JSON'", 
                     "'BSON_CHECK'", "'GEOJSONFROMGEOM'", "'GEOMFROMGEOJSON'", 
                     "'JSON_CHECK'", "'JSONGETVALUE'", "'JSONMETADATA'", 
                     "'NVP2JSON'", "'TD_JSONSHRED'", "'JSON_KEYS'", "'JSON_TABLE'", 
                     "'DEPTH'", "'QUOTES'", "'ROWEXPR'", "'COLEXPR'", "'RETURNTYPES'", 
                     "'NOCASE'", "'TRUNCATE'", "'LINK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'.'", "'@'", "'^'", "'?'", "'('", "')'", "'['", 
                     "']'", "'||'", "'\\u00A6\\u00A6'", "'*'", "'/'", "'+'", 
                     "'-'", "'**'", "'='", "'<>'", "'^='", "'<'", "'<='", 
                     "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORTSESSION", "ABS", "ACCESS_LOCK", 
                      "ACCOUNT", "ACOS", "ACOSH", "ADD", "ADD_MONTHS", "ADMIN", 
                      "AFTER", "AGGREGATE", "ALL", "ALTER", "AMP", "AND", 
                      "ANSIDATE", "ANY", "ARGLPAREN", "AS", "ASC", "ASIN", 
                      "ASINH", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", 
                      "AUTHORIZATION", "AVE", "AVERAGE", "AVG", "BEFORE", 
                      "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", 
                      "BT", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CALL", 
                      "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CD", "CHAR", 
                      "CHAR_LENGTH", "CHAR2HEXINT", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", 
                      "CLOB", "CLOSE", "CLUSTER", "CM", "COALESCE", "COLLATION", 
                      "COLLECT", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", 
                      "CONNECT", "CONSTRAINT", "CONSTRUCTOR", "CONSUME", 
                      "CONTAINS", "CONTINUE", "CONVERT_TABLE_HEADER", "CORR", 
                      "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", 
                      "CREATE", "CROSS", "CS", "CSUM", "CT", "CTCONTROL", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "CV", "CYCLE", "DATABASE", "DATABLOCKSIZE", 
                      "DATE", "DATEFORM", "DAY", "DEALLOCATE", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRED", "DEGREES", "DEL", 
                      "DELETE", "DESC", "DETERMINISTIC", "DIAGNOSTIC", "DICTIONARY", 
                      "DISABLED", "DISTINCT", "DO", "DOMAIN", "DOUBLE", 
                      "DROP", "DUAL", "DUMP", "DYNAMIC", "EACH", "ECHO", 
                      "ELSE", "ELSEIF", "ENABLED", "END", "EQ", "EQUALS", 
                      "ERROR", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ET", 
                      "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXPAND", "EXPANDING", "EXPLAIN", "EXTERNAL", "EXTRACT", 
                      "FALLBACK", "FASTEXPORT", "FETCH", "FIRST", "FLOAT", 
                      "FLUSH", "FOR", "FOREIGN", "FORMAT", "FOUND", "FREESPACE", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONDESCRIPTOR", 
                      "GE", "GENERATED", "GET", "GIVE", "GRANT", "GRAPHIC", 
                      "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", 
                      "HASHBAKAMP", "HASHBUCKET", "HASHROW", "HAVING", "HELP", 
                      "HOUR", "ID2BIGINT", "IDENTITY", "IF", "IMMEDIATE", 
                      "IN", "INCONSISTENT", "INDEX", "INITIATE", "INNER", 
                      "INOUT", "INPUT", "INS", "INSERT", "INSTANCE", "INSTEAD", 
                      "INT", "INTEGER", "INTEGERDATE", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JAR", "JOIN", "JOURNAL", 
                      "KEY", "KURTOSIS", "LANGUAGE", "LARGE", "LE", "LEADING", 
                      "LEAVE", "LEFT", "LIKE", "LIMIT", "LN", "LOADING", 
                      "LOCAL", "LOCATOR", "LOCK", "LOCKING", "LOG", "LOGGING", 
                      "LOGON", "LONG", "LOOP", "LOWER", "LT", "MACRO", "MAP", 
                      "MAVG", "MAX", "MAXIMUM", "MCHARACTERS", "MDIFF", 
                      "MERGE", "METHOD", "MIN", "MINDEX", "MINIMUM", "MINUS", 
                      "MINUTE", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", 
                      "MODIFY", "MONITOR", "MONRESOURCE", "MONSESSION", 
                      "MONTH", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NATURAL", 
                      "NE", "NEW", "NEW_TABLE", "NEXT", "NO", "NONE", "NONTEMPORAL", 
                      "NORMALIZE", "NOT", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", 
                      "NUMBER", "NUMERIC", "OBJECT", "OBJECTS", "OCTET_LENGTH", 
                      "OF", "OFF", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "ORDERING", "OUT", "OUTER", 
                      "OVER", "OVERLAPS", "OVERRIDE", "PARAMETER", "PASSWORD", 
                      "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "POSITION", 
                      "PRECISION", "PREPARE", "PRESERVE", "PRIMARY", "PRIVILEGES", 
                      "PROCEDURE", "PROFILE", "PROTECTION", "PUBLIC", "QUALIFIED", 
                      "QUALIFY", "QUANTILE", "QUEUE", "RADIANS", "RANDOM", 
                      "RANGE_N", "RANK", "READS", "REAL", "RECURSIVE", "REFERENCES", 
                      "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
                      "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
                      "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REPLCONTROL", "REPLICATION", 
                      "REQUEST", "RESIGNAL", "RESTART", "RESTORE", "RESULT", 
                      "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNS", 
                      "REVALIDATE", "REVOKE", "RIGHT", "RIGHTS", "ROLE", 
                      "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROW", "ROW_NUMBER", 
                      "ROWID", "ROWS", "SAMPLE", "SAMPLEID", "SCROLL", "SECOND", 
                      "SEL", "SELECT", "SESSION", "SET", "SETRESRATE", "SETS", 
                      "SETSESSRATE", "SHOW", "SIGNAL", "SIN", "SINH", "SKEW", 
                      "SMALLINT", "SOME", "SOUNDEX", "SPECIFIC", "SPOOL", 
                      "SQL", "SQLEXCEPTION", "SQLTEXT", "SQLWARNING", "SQRT", 
                      "SS", "START", "STARTUP", "STATEMENT", "STATISTICS", 
                      "STDDEV_POP", "STDDEV_SAMP", "STEPINFO", "STRING_CS", 
                      "SUBSCRIBER", "SUBSTR", "SUBSTRING", "SUM", "SUMMARY", 
                      "SUSPEND", "TABLE", "TAN", "TANH", "TBL_CS", "TD_ANYTYPE", 
                      "TD_AUTHID", "TD_HOST", "TD_ROWLOADID", "TD_ROWREVISION", 
                      "TD_ROWSIZE", "TD_VALIST", "TEMPORARY", "TERMINATE", 
                      "THEN", "THRESHOLD", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TITLE", "TO", "TOP", "TRACE", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONTIME", "TRANSFORM", 
                      "TRANSLATE", "TRANSLATE_CHK", "TRIGGER", "TRIM", "TYPE", 
                      "UC", "UDTCASTAS", "UDTCASTLPAREN", "UDTMETHOD", "UDTTYPE", 
                      "UDTUSAGE", "UESCAPE", "UNDEFINED", "UNDO", "UNION", 
                      "UNIQUE", "UNTIL", "UNTIL_CHANGED", "UNTIL_CLOSED", 
                      "UPD", "UPDATE", "UPPER", "UPPERCASE", "USER", "USING", 
                      "VALIDTIME", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
                      "VARBYTE", "VARCHAR", "VARGRAPHIC", "VARIANT_TYPE", 
                      "VARYING", "VIEW", "VOLATILE", "WHEN", "WHERE", "WHILE", 
                      "WIDTH_BUCKET", "WITH", "WITHOUT", "WORK", "XMLPLAN", 
                      "YEAR", "ZEROIFNULL", "ZONE", "ALIAS", "DESCRIPTOR", 
                      "GO", "GOTO", "INDICATOR", "PRIVATE", "WAIT", "ABORTSESSIONS", 
                      "ABSENT", "ACCESS", "ACCORDING", "ACCUMULATE", "AG", 
                      "AGGGEOMINTERSECTION", "AGGGEOMUNION", "ALLDBQL", 
                      "ALLOCATE", "ALLOCATION", "ALLOW", "ALLPARAMS", "ALLTDWM", 
                      "ALWAYS", "AMPCOUNT", "ANALYSIS", "ANCHOR", "ANCHOR_HOUR", 
                      "ANCHOR_MILLISECOND", "ANCHOR_MINUTE", "ANCHOR_SECOND", 
                      "APPLNAME", "ARCHIVE", "ARRAY", "ARRAY_ADD", "ARRAY_AGG", 
                      "ARRAY_AVG", "ARRAY_COMPARE", "ARRAY_CONCAT", "ARRAY_COUNT_DISTINCT", 
                      "ARRAY_DIV", "ARRAY_EQ", "ARRAY_GE", "ARRAY_GET", 
                      "ARRAY_GT", "ARRAY_LE", "ARRAY_LT", "ARRAY_MAX", "ARRAY_MIN", 
                      "ARRAY_MOD", "ARRAY_MUL", "ARRAY_NE", "ARRAY_SUB", 
                      "ARRAY_SUM", "ARRAY_UPDATE", "ARRAY_UPDATE_STRIDE", 
                      "ASCII", "ASSIGNMENT", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "ATTRIBUTION", "ATTRS", "AUTH", "AUTO", "AUTOTEMP", 
                      "AVRO", "BIT_LENGTH", "BITAND", "BITNOT", "BITOR", 
                      "BITXOR", "BLOCKCOMPRESSION", "BLOCKCOMPRESSIONALGORITHM", 
                      "BLOCKCOMPRESSIONLEVEL", "BOM", "BOTTOM", "BSON", 
                      "C", "CALENDAR", "CALLED", "CALLER", "CAMSET", "CAMSET_L", 
                      "CAPTURE", "CARDINALITY", "CEIL", "CEILING", "CHANGERATE", 
                      "CHARACTERISTICS", "CHARSET", "CHARSET_COLL", "CHECKSUM", 
                      "CHR", "CLASS_ORIGIN", "CLICKLAG", "CLIENT", "CNT", 
                      "COLOCATE", "COLUMNMETA", "COLUMNS", "COLUMNSPERINDEX", 
                      "COLUMNSPERJOININDEX", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
                      "COMPARISON", "COMPILE", "CONCAT", "CONCURRENT", "CONDITION", 
                      "CONDITION_IDENTIFIER", "CONDITION_NUMBER", "CONTAINED", 
                      "CONTAINEDTOKEN", "CONTENT", "CONTIGUOUS", "COST", 
                      "COSTS", "COUNTSET", "CPP", "CPUTIME", "CPUTIMENORM", 
                      "CREATEDATASET", "CREATOR", "CUME_DIST", "CURDATE", 
                      "CURTIME", "DATA", "DATASET", "DAY_OF_CALENDAR", "DAY_OF_MONTH", 
                      "DAY_OF_WEEK", "DAY_OF_YEAR", "DAYNUMBER_OF_CALENDAR", 
                      "DAYNUMBER_OF_MONTH", "DAYNUMBER_OF_WEEK", "DAYNUMBER_OF_YEAR", 
                      "DAYOCCURRENCE_OF_MONTH", "DBA", "DBC", "DEBUG", "DECAMSET", 
                      "DECAMSET_L", "DECODE", "DECOMPRESS", "DEFINER", "DELIMITER", 
                      "DELTA_T", "DEMOGRAPHICS", "DENIALS", "DENSE", "DENSE_RANK", 
                      "DESCRIBE", "DETAILED", "DIAGNOSTICS", "DIGITS", "DIMENSION", 
                      "DOCUMENT", "DOT", "DOWN", "DR", "DUPCOUNT", "DUPCOUNTCUM", 
                      "EBCDIC", "EDITDISTANCE", "ELAPSEDSEC", "ELAPSEDTIME", 
                      "ELEMENT", "ELZS_H", "EMITNULL", "EMPTY", "EMPTY_BLOB", 
                      "EMPTY_CLOB", "ENCODE", "ENCODING", "ENCRYPT", "ERRORS", 
                      "ERRORTBL", "EVENTCOLUMN", "EXCEPTION", "EXCL", "EXCLUDE", 
                      "EXCLUDING", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXPORTWIDTH", 
                      "FALSE", "FEATUREINFO", "FILE", "FILL", "FILTER", 
                      "FINAL", "FIRST_NOTNULL", "FIRST_VALUE", "FLOOR", 
                      "FOLLOWING", "FOREIGNFUNCTION", "FORTOKEN", "FRIDAY", 
                      "FROM_BYTES", "FUNCTIONPARAMETER", "G", "GETBIT", 
                      "GETPSFVERSION", "GETQUERYBAND", "GETQUERYBANDVALUE", 
                      "GETTIMEZONEDISPLACEMENT", "GLOBAL", "GLOP", "GREATEST", 
                      "HIGH", "HOST", "IDENTIFYDATABASE", "IDENTIFYSESSION", 
                      "IDENTIFYTABLE", "IDENTIFYUSER", "IFP", "IGNORE", 
                      "IMMEDIATELY", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INCREMENTAL", "INDENT", "INDEXESPERTABLE", "INDEXMAINTMODE", 
                      "INIT", "INITCAP", "INLINE", "INSTANTIABLE", "INSTR", 
                      "INTERNAL", "INVOKER", "IOCOUNT", "IPARTITION", "ISOLATED", 
                      "ISOLATION", "JAVA", "JIS_COLL", "JSON", "JSON_AGG", 
                      "JSON_COMPOSE", "K", "KANJI1", "KANJISJIS", "KBYTE", 
                      "KBYTES", "KEEP", "KILOBYTES", "LAG", "LAST", "LAST_DAY", 
                      "LAST_NOTNULL", "LAST_VALUE", "LATIN", "LDIFF", "LEAD", 
                      "LEAST", "LENGTH", "LEVEL", "LIST", "LOAD", "LOCATE", 
                      "LOCKEDUSEREXPIRE", "LOW", "LPAD", "LTRIM", "LZCOMP", 
                      "LZCOMP_L", "LZDECOMP", "LZDECOMP_L", "M", "MAD", 
                      "MANUAL", "MAPPING", "MATCHED", "MAX_CHOOSE", "MAXCHAR", 
                      "MAXINTERVALS", "MAXLOGONATTEMPTS", "MAXVALUE", "MAXVALUELENGTH", 
                      "MEDIAN", "MEDIUM", "MEETS", "MEMBER", "MERGEBLOCKRATIO", 
                      "MESSAGE_LENGTH", "MESSAGE_TEXT", "MIN_CHOOSE", "MINCHAR", 
                      "MINVALUE", "MODIFIED", "MONDAY", "MONITORQUERYBAND", 
                      "MONITORSESSIONRATE", "MONITORVERSION", "MONTH_BEGIN", 
                      "MONTH_END", "MONTH_OF_CALENDAR", "MONTH_OF_QUARTER", 
                      "MONTH_OF_YEAR", "MONTHNUMBER_OF_CALENDAR", "MONTHNUMBER_OF_QUARTER", 
                      "MONTHNUMBER_OF_YEAR", "MONTHS_BETWEEN", "MORE_", 
                      "MULTINATIONAL", "NAME", "NAMESPACE", "NEVER", "NEXT_DAY", 
                      "NGRAM", "NIL", "NODDLTEXT", "NODE", "NONOPTCOST", 
                      "NONOPTINIT", "NONSEQUENCED", "NORIGHT", "NOSEXTRACTVARFROMPATH", 
                      "NOTATION", "NOW", "NPATH", "NTH", "NULLS", "NUMFPFNS", 
                      "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", 
                      "NVP", "OA", "OADD_MONTHS", "OCOUNT", "ODELETE", "OEXISTS", 
                      "OEXTEND", "OFIRST", "OLAST", "OLD_NEW_TABLE", "OLIMIT", 
                      "ONEXT", "ONLINE", "OPRIOR", "OPTIONS", "ORDERBYVALUES", 
                      "ORDERED_ANALYTIC", "ORDINALITY", "OREPLACE", "OTRANSLATE", 
                      "OTRIM", "OVERLAYS", "OWNER", "P_INTERSECT", "P_NORMALIZE", 
                      "PARAMID", "PARAMINFO", "PARENT", "PARTITION", "PARTITION_L", 
                      "PARTITIONED", "PARTITIONNAMES", "PASS", "PASSING", 
                      "PATH_GENERATOR", "PATH_START", "PATH_SUMMARIZER", 
                      "PATTERN", "PERCENTILE", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERIOD", "PIVOT", "PORTION", "POWER", "PRECEDES", 
                      "PRECEDING", "PREFIX", "PRINT", "PRIOR", "PROTECTED", 
                      "QUARTER_BEGIN", "QUARTER_END", "QUARTER_OF_CALENDAR", 
                      "QUARTER_OF_YEAR", "QUARTERNUMBER_OF_CALENDAR", "QUARTERNUMBER_OF_YEAR", 
                      "QUERY", "QUERY_BAND", "QUOTECHAR", "RANDOMIZED", 
                      "RANGE", "RANGE_L", "RAPIDFIRE", "RDIFF", "READ", 
                      "RECALC", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SIMILAR", 
                      "REGEXP_SUBSTR", "REPLACEMENT", "RESET", "RESPECT", 
                      "RESTRICTWORDS", "RETAIN", "RETURNED_SQLSTATE", "RETURNING", 
                      "REUSE", "ROOT", "ROTATELEFT", "ROTATERIGHT", "ROUND", 
                      "ROW_COUNT", "ROWIDGEN", "ROWIDGEN2", "RPAD", "RTRIM", 
                      "RU", "RULES", "RULESET", "SAMPLES", "SATURDAY", "SCHEMA", 
                      "SCRIPT", "SCRIPT_COMMAND", "SEARCHSPACE", "SEARCHUIFDBPATH", 
                      "SECURITY", "SEED", "SELF", "SEQ", "SEQUENCE", "SEQUENCED", 
                      "SERIALIZABLE", "SERVER", "SESSIONIZE", "SETBIT", 
                      "SETRESOURCERATE", "SETSESSIONACCOUNT", "SETSESSIONRATE", 
                      "SHARE", "SHIFTLEFT", "SHIFTRIGHT", "SIGN", "SIZE", 
                      "SNAPPY_COMPRESS", "SNAPPY_DECOMPRESS", "SOURCE", 
                      "SPARSE", "SPECCHAR", "SPL", "SQLSTATE", "SR", "ST_GEOMETRY", 
                      "STAT", "STATIC", "STATS", "STATSUSAGE", "STORAGE", 
                      "STRIP", "STRTOK", "STYLE", "SUBBITSTR", "SUBCLASS_ORIGIN", 
                      "SUCCEEDS", "SUMMARYONLY", "SUNDAY", "SYMBOLS", "SYSTEM", 
                      "SYSTEM_TIME", "SYSTEMTEST", "TARGET", "TD_ARRAY2P", 
                      "TD_DATASET", "TD_DAY_OF_CALENDAR", "TD_DAY_OF_MONTH", 
                      "TD_DAY_OF_WEEK", "TD_DAY_OF_YEAR", "TD_GENERAL", 
                      "TD_GETTIMEBUCKET", "TD_INTERNAL", "TD_LZ_COMPRESS", 
                      "TD_LZ_DECOMPRESS", "TD_MONTH_OF_CALENDAR", "TD_MONTH_OF_QUARTER", 
                      "TD_MONTH_OF_YEAR", "TD_QUARTER_OF_CALENDAR", "TD_QUARTER_OF_YEAR", 
                      "TD_TIME_BUCKET_NUMBER", "TD_WEEK_OF_CALENDAR", "TD_WEEK_OF_MONTH", 
                      "TD_WEEK_OF_YEAR", "TD_WEEKDAY_OF_MONTH", "TD_YEAR_OF_CALENDAR", 
                      "TDWMEVENT", "TDWMEXCEPTION", "TDWMHISTORY", "TEMPORAL_DATE", 
                      "TEMPORAL_TIMESTAMP", "TEXT", "THRESHOLDPERCENT", 
                      "THROUGH", "THURSDAY", "TIES", "TIMECODE", "TIMECOLUMN", 
                      "TIMEOUT", "TIMESTAMPCOLUMN", "TO_BYTE", "TO_BYTES", 
                      "TO_CHAR", "TO_DATE", "TO_DSINTERVAL", "TO_NUMBER", 
                      "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", 
                      "TOTOKEN", "TPA", "TRANSACTION_ACTIVE", "TRANSUNICODETOUTF8", 
                      "TRANSUTF8TOUNICODE", "TRUE", "TRUNC", "TRUST_ONLY", 
                      "TTGRANULARITY", "TUESDAY", "UBJSON", "UCASE", "UDFSEARCHPATH", 
                      "UNBOUNDED", "UNCOMMITTED", "UNICODE", "UNKNOWN", 
                      "UNPIVOT", "USE", "USECOUNT", "UTILITYINFO", "VARRAY", 
                      "VERBOSE", "VERSION", "VERSIONING", "WARNING", "WEDNESDAY", 
                      "WEEK_BEGIN", "WEEK_END", "WEEK_OF_CALENDAR", "WEEK_OF_MONTH", 
                      "WEEK_OF_YEAR", "WEEKDAY_OF_MONTH", "WEEKNUMBER_OF_CALENDAR", 
                      "WEEKNUMBER_OF_MONTH", "WEEKNUMBER_OF_QUARTER", "WEEKNUMBER_OF_YEAR", 
                      "WHITESPACE", "WINDOWSIZE", "WITHIN", "WORKLOAD", 
                      "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCOMMENT", 
                      "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT", "XMLELEMENT", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTEXT", "XMLTYPE", "XMLVALIDATE", "YEAR_BEGIN", 
                      "YEAR_END", "YEAR_OF_CALENDAR", "YEARNUMBER_OF_CALENDAR", 
                      "ZLIB", "BUCKET", "COMMITTED", "CREATEXML", "CS_LATIN", 
                      "CS_UNICODE", "CS_KANJISJIS", "CS_GRAPHIC", "CSV", 
                      "CSVLD", "DATASIZE", "DAYOFMONTH", "DAYS", "DEFINITION", 
                      "DELETED", "FAST", "LISTAGG", "PATH", "REGEXP_SPLIT_TO_TABLE", 
                      "REVERSE", "SAS", "SQLTABLE", "STRTOK_SPLIT_TO_TABLE", 
                      "SYSLIB", "SYSUDTLIB", "TD_SERVER_DB", "TD_SYSFNLIB", 
                      "TD_SYSXML", "TIMEDATEWZCONTROL", "TRUST", "TRYCAST", 
                      "UDT", "USAGE", "VARIANT", "WEEK", "WIDTH", "XMLPUBLISH", 
                      "XMLPUBLISH_STREAM", "XMLSPLIT", "LATIN_TO_UNICODE", 
                      "UNICODE_TO_LATIN", "LOCALE_TO_UNICODE", "UNICODE_TO_LOCALE", 
                      "ASBSON", "ASBSONTEXT", "COMBINE", "EXISTVALUE", "JSONEXTRACT", 
                      "JSONEXTRACTVALUE", "JSONEXTRACTLARGEVALUE", "KEYCOUNT", 
                      "METADATA", "STORAGE_SIZE", "CREATESCHEMABASEDXML", 
                      "CREATENONSCHEMABASEDXML", "EXISTSNODE", "ISCONTENT", 
                      "ISDOCUMENT", "ISSCHEMAVALID", "ISSCHEMAVALIDATED", 
                      "XMLEXTRACT", "XMLTRANSFORM", "PROC_ID", "LOCATION", 
                      "PAYLOAD", "TRUSTED", "PATHPATTERN", "MANIFEST", "ROWFORMAT", 
                      "STOREDAS", "HEADER", "STRIP_EXTERIOR_SPACES", "STRIP_ENCLOSING_CHAR", 
                      "RLS", "SINGLE", "MULTIPLE", "JSON_COMPRESS", "JSON_DECOMPRESS", 
                      "TS_COMPRESS", "TS_DECOMPRESS", "CONTIGUOUSMAPAMPS", 
                      "SPARSEMAPAMPS", "SPARSETABLEAMPS", "UNNEST", "CALCMATRIX", 
                      "PHRASE", "CALCTYPE", "OUTPUT", "NULL_HANDLING", "READ_NOS", 
                      "BUFFERSIZE", "RETURNTYPE", "SAMPLE_PERC", "FULLSCAN", 
                      "TD_UNPIVOT", "VALUE_COLUMNS", "UNPIVOT_COLUMN", "COLUMN_LIST", 
                      "COLUMN_ALIAS_LIST", "INCLUDE_NULLS", "WRITE_NOS", 
                      "NAMING", "MANIFESTFILE", "MANIFESTONLY", "OVERWRITE", 
                      "INCLUDE_ORDERING", "INCLUDE_HASHBY", "MAXOBJECTSIZE", 
                      "COMPRESSION", "ARRAY_TO_JSON", "BSON_CHECK", "GEOJSONFROMGEOM", 
                      "GEOMFROMGEOJSON", "JSON_CHECK", "JSONGETVALUE", "JSONMETADATA", 
                      "NVP2JSON", "TD_JSONSHRED", "JSON_KEYS", "JSON_TABLE", 
                      "DEPTH", "QUOTES", "ROWEXPR", "COLEXPR", "RETURNTYPES", 
                      "NOCASE", "TRUNCATE", "LINK", "OBJECT_NAME", "UNSIGNED_INTEGER", 
                      "HEX_BYTE_LITERAL", "HEX_INTEGER_LITERAL", "FLOAT_LITERAL", 
                      "DATE_STRING", "TIME_STRING", "TIMESTAMP_STRING", 
                      "PERIOD_STRING", "UNICODE_STRING_LEADING", "CHAR_STRING", 
                      "HEX_STRING", "PASSWORD_STRING", "SEMICOLON", "COLON", 
                      "COMMA", "DOT_", "AT_SIGN", "CARET", "QUESTION_MARK", 
                      "OPEN_PAR", "CLOSE_PAR", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
                      "CONCATENATE", "BROKEN_CONCATENATE", "MUL_SIGN", "DIV_SIGN", 
                      "PLUS_SIGN", "MINUS_SIGN", "EXPONENTIATION", "EQUALS_SIGN", 
                      "NOT_EQUALS_SIGN", "NOT_EQUALS_SIGN_TD", "LT_SIGN", 
                      "LE_SIGN", "GT_SIGN", "GE_SIGN", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT", "WS" ]

    RULE_ddl_stat = 0
    RULE_alter_foreign_server_stat = 1
    RULE_foreign_server_add_clause = 2
    RULE_foreign_server_drop_clause = 3
    RULE_alter_function_stat = 4
    RULE_alter_join_index_stat = 5
    RULE_alter_hash_index_stat = 6
    RULE_alter_table_stat = 7
    RULE_alter_table_basic_stat = 8
    RULE_alter_table_join_index_stat = 9
    RULE_alter_table_revalidation_stat = 10
    RULE_alter_table_release_rows_stat = 11
    RULE_alter_table_map_and_collocation_form_stat = 12
    RULE_alter_foreign_table_stat = 13
    RULE_alter_foreign_column_option = 14
    RULE_alter_table_to_current_stat = 15
    RULE_alter_option = 16
    RULE_table_option_alter_form = 17
    RULE_add_option = 18
    RULE_drop_option = 19
    RULE_modify_primary = 20
    RULE_alter_partitioning = 21
    RULE_add_drop_range_option = 22
    RULE_alter_column_spec = 23
    RULE_alter_range_expr = 24
    RULE_with_isolated_loading_alter_form = 25
    RULE_join_index_add_option = 26
    RULE_alter_type_stat = 27
    RULE_add_attribute_clause = 28
    RULE_add_method_clause = 29
    RULE_add_specific_method_clause = 30
    RULE_drop_attribute_clause = 31
    RULE_drop_method_clause = 32
    RULE_drop_specific_method_clause = 33
    RULE_add_method_spec = 34
    RULE_add_specific_method_spec = 35
    RULE_begin_isolated_loading_stat = 36
    RULE_begin_logging_stat = 37
    RULE_operation = 38
    RULE_logging_frequency = 39
    RULE_logging_item = 40
    RULE_begin_query_capture_stat = 41
    RULE_begin_query_logging_stat = 42
    RULE_query_logging_with_item = 43
    RULE_query_logging_limit_item = 44
    RULE_query_logging_on_items = 45
    RULE_query_logging_on_all = 46
    RULE_query_logging_on_users = 47
    RULE_query_logging_on_application = 48
    RULE_account_spec = 49
    RULE_checkpoint_isolated_loading_stat = 50
    RULE_collect_statistics_optimizer_form_stat = 51
    RULE_using_option = 52
    RULE_stats_target_spec = 53
    RULE_stats_index_spec = 54
    RULE_stats_column_spec = 55
    RULE_collection_source = 56
    RULE_from_stats_option = 57
    RULE_comment_placing_stat = 58
    RULE_create_replace_authorization_stat = 59
    RULE_create_replace_function_stat = 60
    RULE_create_replace_sql_function_stat = 61
    RULE_create_replace_table_function_stat = 62
    RULE_create_replace_external_function_stat = 63
    RULE_sql_function_parameter_spec = 64
    RULE_sql_function_language_spec = 65
    RULE_sql_function_access_spec = 66
    RULE_sql_function_attr = 67
    RULE_table_spec = 68
    RULE_table_function_parameter_spec = 69
    RULE_table_function_language_spec = 70
    RULE_table_function_attr = 71
    RULE_table_function_parameter_style = 72
    RULE_external_function_parameter_spec = 73
    RULE_external_function_language_spec = 74
    RULE_external_function_attr = 75
    RULE_external_function_parameter_style = 76
    RULE_no_sql = 77
    RULE_create_replace_macro_stat = 78
    RULE_macro_parameter = 79
    RULE_create_replace_procedure_stat = 80
    RULE_create_replace_procedure_sql_form_stat = 81
    RULE_parameter_spec = 82
    RULE_sql_data_access_option = 83
    RULE_dynamic_result_sets = 84
    RULE_sql_security_option = 85
    RULE_procedure_body = 86
    RULE_procedure_stat = 87
    RULE_procedure_data_stat = 88
    RULE_procedure_dml_stat = 89
    RULE_procedure_ddl_stat = 90
    RULE_procedure_dcl_stat = 91
    RULE_compound_stat = 92
    RULE_procedure_cursor_control_stat = 93
    RULE_assignment_stat = 94
    RULE_condition_stat = 95
    RULE_iteration_stat = 96
    RULE_diagnostic_stat = 97
    RULE_print_stat = 98
    RULE_local_declaration = 99
    RULE_cursor_declaration = 100
    RULE_condition_handler = 101
    RULE_allocate_stat = 102
    RULE_close_stat = 103
    RULE_deallocate_prepare_stat = 104
    RULE_positioned_delete_stat = 105
    RULE_positioned_update_stat = 106
    RULE_execute_statement_stat = 107
    RULE_execute_immediate_stat = 108
    RULE_fetch_stat = 109
    RULE_open_stat = 110
    RULE_prepare_stat = 111
    RULE_case_stat = 112
    RULE_when_operand_clause = 113
    RULE_when_condition_clause = 114
    RULE_if_stat = 115
    RULE_while_stat = 116
    RULE_loop_stat = 117
    RULE_for_stat = 118
    RULE_repeat_stat = 119
    RULE_diagnostic_statement_assignment = 120
    RULE_diagnostic_condition_assignment = 121
    RULE_condition_information_item = 122
    RULE_statement_information_item = 123
    RULE_signal_spec = 124
    RULE_sqlstate_spec = 125
    RULE_create_replace_view_stat = 126
    RULE_as_of_clause = 127
    RULE_create_database_stat = 128
    RULE_database_attribute = 129
    RULE_create_index_stat = 130
    RULE_index_spec = 131
    RULE_create_join_index_stat = 132
    RULE_join_index_select_clause = 133
    RULE_ji_selection = 134
    RULE_aggregation_clause = 135
    RULE_ji_source = 136
    RULE_ji_joined_table = 137
    RULE_ji_grouping_or_ordering_spec = 138
    RULE_create_profile_stat = 139
    RULE_profile_attribute = 140
    RULE_password_attribute = 141
    RULE_create_foreign_server_stat = 142
    RULE_foreign_server_external_security_clause = 143
    RULE_foreign_server_using_clause = 144
    RULE_foreign_server_using_option = 145
    RULE_foreign_server_operator_option = 146
    RULE_do_import_with = 147
    RULE_do_export_with = 148
    RULE_foreign_server_with_clause = 149
    RULE_foreign_server_option_name = 150
    RULE_create_hash_index_stat = 151
    RULE_create_role_stat = 152
    RULE_create_table_stat = 153
    RULE_create_table_primary_form_stat = 154
    RULE_create_table_as_stat = 155
    RULE_create_queue_table_stat = 156
    RULE_create_global_temporary_trace_table_stat = 157
    RULE_create_foreign_table_stat = 158
    RULE_create_error_table_stat = 159
    RULE_table_kind = 160
    RULE_table_option = 161
    RULE_column_definition = 162
    RULE_ctas_column_definition = 163
    RULE_index_definition = 164
    RULE_qits_definition = 165
    RULE_foreign_table_external_security_clause = 166
    RULE_location_column = 167
    RULE_payload_column = 168
    RULE_foreign_table_option = 169
    RULE_table_preservation = 170
    RULE_mergeblockratio = 171
    RULE_datablocksize = 172
    RULE_block_compression = 173
    RULE_table_isolated_loading = 174
    RULE_column_attribute = 175
    RULE_column_storage_attribute = 176
    RULE_compressed_value = 177
    RULE_column_constraint_attribute = 178
    RULE_auto_column_attribute = 179
    RULE_identity_column_attribute = 180
    RULE_id_column_value = 181
    RULE_normalize_option = 182
    RULE_table_constraint = 183
    RULE_references = 184
    RULE_partitioning_level = 185
    RULE_column_partition = 186
    RULE_create_type_stat = 187
    RULE_create_type_structured_form_stat = 188
    RULE_create_type_distinct_form_stat = 189
    RULE_create_type_array_form_stat = 190
    RULE_create_type_one_dimensional_array_form_stat = 191
    RULE_create_type_one_dimensional_varray_form_stat = 192
    RULE_create_type_multidimensional_array_form_stat = 193
    RULE_create_type_multidimensional_varray_form_stat = 194
    RULE_type_attribute_spec = 195
    RULE_structured_method_spec = 196
    RULE_distinct_method_spec = 197
    RULE_method_parameter_spec = 198
    RULE_returns_parameter_spec = 199
    RULE_method_language_spec = 200
    RULE_method_attr = 201
    RULE_multidimensional_array_dimension = 202
    RULE_multidimensional_varray_dimension = 203
    RULE_array_bounds = 204
    RULE_bound = 205
    RULE_create_user_stat = 206
    RULE_user_attribute = 207
    RULE_transform_specification = 208
    RULE_user_constraint = 209
    RULE_database_stat = 210
    RULE_delete_database_stat = 211
    RULE_delete_user_stat = 212
    RULE_drop_authorization_stat = 213
    RULE_drop_cast_stat = 214
    RULE_drop_constraint_stat = 215
    RULE_drop_database_stat = 216
    RULE_drop_error_table_stat = 217
    RULE_drop_foreign_server_stat = 218
    RULE_drop_function_stat = 219
    RULE_drop_function_mapping_stat = 220
    RULE_drop_index_stat = 221
    RULE_drop_glop_set_stat = 222
    RULE_drop_join_index_stat = 223
    RULE_drop_hash_index_stat = 224
    RULE_drop_macro_stat = 225
    RULE_drop_map_stat = 226
    RULE_drop_method_stat = 227
    RULE_drop_ordering_stat = 228
    RULE_drop_procedure_stat = 229
    RULE_drop_profile_stat = 230
    RULE_drop_replication_group_stat = 231
    RULE_drop_replication_ruleset_stat = 232
    RULE_drop_role_stat = 233
    RULE_drop_schema_stat = 234
    RULE_drop_statistics_optimizer_form_stat = 235
    RULE_drop_table_stat = 236
    RULE_drop_transform_stat = 237
    RULE_drop_trigger_stat = 238
    RULE_drop_type_stat = 239
    RULE_drop_user_stat = 240
    RULE_drop_view_stat = 241
    RULE_drop_zone_stat = 242
    RULE_end_isolated_loading_stat = 243
    RULE_end_logging_stat = 244
    RULE_end_query_capture_stat = 245
    RULE_end_query_logging_stat = 246
    RULE_end_query_logging_on_items = 247
    RULE_end_query_logging_all_rules = 248
    RULE_flush_query_logging_stat = 249
    RULE_flush_option = 250
    RULE_help_stat = 251
    RULE_help_statistics_optimimizer_form_stat = 252
    RULE_help_statistics_qcd_form_stat = 253
    RULE_incremental_restore_allow_write_stat = 254
    RULE_logging_incremental_archive_off_stat = 255
    RULE_logging_incremental_archive_on_stat = 256
    RULE_modify_database_stat = 257
    RULE_modified_database_attribute = 258
    RULE_modify_profile_stat = 259
    RULE_modify_user_stat = 260
    RULE_modify_user_attribute = 261
    RULE_rename_function_stat = 262
    RULE_rename_procedure_stat = 263
    RULE_rename_macro_stat = 264
    RULE_rename_table_stat = 265
    RULE_rename_trigger_stat = 266
    RULE_rename_view_stat = 267
    RULE_replace_query_logging_stat = 268
    RULE_set_session_stat = 269
    RULE_collation_sequence = 270
    RULE_session_constraint = 271
    RULE_isolation_level = 272
    RULE_session_debug_spec = 273
    RULE_trace_enabling_spec = 274
    RULE_set_role_stat = 275
    RULE_set_query_band_stat = 276
    RULE_show_object_stat = 277
    RULE_show_query_logging_stat = 278
    RULE_show_request_stat = 279
    RULE_show_statistics_optimizer_form_stat = 280
    RULE_show_statistics_qcd_form_stat = 281
    RULE_show_stats_target_spec = 282
    RULE_method = 283
    RULE_index_loading = 284
    RULE_index_ordering = 285
    RULE_table_option_index_form = 286
    RULE_map_spec = 287
    RULE_database_size_spec = 288
    RULE_skew_spec = 289
    RULE_database_default_map = 290
    RULE_fallback_protection = 291
    RULE_before_journal = 292
    RULE_after_journal = 293
    RULE_default_journal_table = 294
    RULE_drop_default_journal_table = 295
    RULE_password = 296
    RULE_dml_stat = 297
    RULE_select_stat = 298
    RULE_select_and_consume_stat = 299
    RULE_delete_stat = 300
    RULE_delete_table_spec = 301
    RULE_insert_stat = 302
    RULE_hash_by = 303
    RULE_local_order_by = 304
    RULE_update_stat = 305
    RULE_update_basic_form_stat = 306
    RULE_update_with_from_stat = 307
    RULE_update_upsert_form_stat = 308
    RULE_update_table_spec = 309
    RULE_merge_stat = 310
    RULE_when_matched = 311
    RULE_when_not_matched = 312
    RULE_collect_demographics_stat = 313
    RULE_collect_statistics_qcd_form_stat = 314
    RULE_qcd_stats_target_spec = 315
    RULE_drop_statistics_qcd_form_stat = 316
    RULE_dump_explain_stat = 317
    RULE_initiate_index_analysis_stat = 318
    RULE_index_analysis_set_spec = 319
    RULE_index_analysis_boundary_option = 320
    RULE_initiate_partition_analysis_stat = 321
    RULE_insert_explain_stat = 322
    RULE_restart_index_analysis_stat = 323
    RULE_call_stat = 324
    RULE_argument = 325
    RULE_execute_stat = 326
    RULE_commit_stat = 327
    RULE_rollback_stat = 328
    RULE_abort_stat = 329
    RULE_begin_transaction_stat = 330
    RULE_end_transaction_stat = 331
    RULE_locking_stat = 332
    RULE_comment_retrieving_stat = 333
    RULE_checkpoint_stat = 334
    RULE_echo_stat = 335
    RULE_null_stat = 336
    RULE_set_spec = 337
    RULE_with_isolated_loading = 338
    RULE_logging_errors = 339
    RULE_object_kind = 340
    RULE_explained_sql_request = 341
    RULE_limit_sql_clause = 342
    RULE_analysis_time_limit_clause = 343
    RULE_data_type = 344
    RULE_variable_data_type = 345
    RULE_external_function_data_type = 346
    RULE_numeric_data_type = 347
    RULE_char_data_type = 348
    RULE_precisionless_char_data_type = 349
    RULE_lob_as_locator_data_type = 350
    RULE_binary_data_type = 351
    RULE_datetime_type = 352
    RULE_period_type = 353
    RULE_udt_type = 354
    RULE_data_type_attribute = 355
    RULE_default_value_control_phrase = 356
    RULE_default_value = 357
    RULE_column_naming_phrase = 358
    RULE_sysudtlib = 359
    RULE_interval_period_spec = 360
    RULE_type_precision = 361
    RULE_max_length_k_m_g = 362
    RULE_max_length_k_m = 363
    RULE_character_set_phrase = 364
    RULE_uppercase_phrase = 365
    RULE_casespecific_phrase = 366
    RULE_format_phrase = 367
    RULE_title_phrase = 368
    RULE_named_phrase = 369
    RULE_latin_unicode_character_set_phrase = 370
    RULE_inline_length = 371
    RULE_json_storage_format = 372
    RULE_dataset_storage_format_clause = 373
    RULE_dataset_storage_format = 374
    RULE_with_schema = 375
    RULE_with_time_zone = 376
    RULE_literal = 377
    RULE_hex_byte_literal = 378
    RULE_char_string_literal = 379
    RULE_unicode_char_string_literal = 380
    RULE_hex_char_string_literal = 381
    RULE_integer_literal = 382
    RULE_hex_integer_literal = 383
    RULE_float_literal = 384
    RULE_character_set_prefix = 385
    RULE_date_literal = 386
    RULE_time_literal = 387
    RULE_timestamp_literal = 388
    RULE_interval_literal = 389
    RULE_interval_qualifier = 390
    RULE_period_literal = 391
    RULE_column_name = 392
    RULE_unqualified_column_name = 393
    RULE_unqualified_name = 394
    RULE_object_name = 395
    RULE_table_name = 396
    RULE_procedure_name = 397
    RULE_function_name = 398
    RULE_macro_name = 399
    RULE_database_name = 400
    RULE_user_name = 401
    RULE_role_name = 402
    RULE_profile_name = 403
    RULE_alias_name = 404
    RULE_variable_name = 405
    RULE_parameter_name = 406
    RULE_label_name = 407
    RULE_condition_name = 408
    RULE_cursor_name = 409
    RULE_statement_name = 410
    RULE_statistics_name = 411
    RULE_udt_name = 412
    RULE_attribute_name = 413
    RULE_method_name = 414
    RULE_anchor_name = 415
    RULE_nonreserved_word = 416
    RULE_query_expr = 417
    RULE_query_term = 418
    RULE_with_deleted_rows = 419
    RULE_as_json = 420
    RULE_select_list = 421
    RULE_top_n = 422
    RULE_normalize = 423
    RULE_all_operator = 424
    RULE_selected_columns = 425
    RULE_selected_column = 426
    RULE_into_clause = 427
    RULE_from_clause = 428
    RULE_from_spec = 429
    RULE_join_source_spec = 430
    RULE_join_joined_spec = 431
    RULE_from_pivot_spec = 432
    RULE_from_unpivot_spec = 433
    RULE_table_reference = 434
    RULE_join_clause = 435
    RULE_join_on_clause = 436
    RULE_foreign_table_reference = 437
    RULE_foreign_function_reference = 438
    RULE_foreign_on_clause = 439
    RULE_exported_data = 440
    RULE_foreign_using_clause = 441
    RULE_foreign_parameter = 442
    RULE_foreign_returns_clause = 443
    RULE_server_name_reference = 444
    RULE_table_function_reference = 445
    RULE_udt_table_function = 446
    RULE_unnest_table_function = 447
    RULE_table_function_returns_clause = 448
    RULE_table_function_local_order_by_clause = 449
    RULE_table_function_hash_by_clause = 450
    RULE_table_operator_reference = 451
    RULE_xmltable_operator = 452
    RULE_calcmatrix_table_operator = 453
    RULE_read_nos_table_operator = 454
    RULE_script_table_operator = 455
    RULE_td_unpivot_table_operator = 456
    RULE_write_nos_table_operator = 457
    RULE_json_table_table_operator = 458
    RULE_json_keys_table_operator = 459
    RULE_json_shred_table_operator = 460
    RULE_generic_table_operator = 461
    RULE_table_operator_on_clause = 462
    RULE_table_operator_execute_clause = 463
    RULE_table_operator_out_table_clause = 464
    RULE_table_operator_using_clause = 465
    RULE_table_operator_using_spec = 466
    RULE_json_keys_using_name_value_pair = 467
    RULE_hash_or_partition_by = 468
    RULE_subquery_reference = 469
    RULE_location = 470
    RULE_read_nos_option = 471
    RULE_write_nos_option = 472
    RULE_with_clause = 473
    RULE_with_clause_by_phrase = 474
    RULE_with_clause_title_phrase = 475
    RULE_where_clause = 476
    RULE_group_by_clause = 477
    RULE_group_by_spec = 478
    RULE_ordinary_grouping_set = 479
    RULE_ordinary_grouping_set_parenthesized = 480
    RULE_empty_grouping_set = 481
    RULE_rollup_option = 482
    RULE_cube_option = 483
    RULE_grouping_sets_option = 484
    RULE_grouping_sets_spec = 485
    RULE_having_clause = 486
    RULE_qualify_clause = 487
    RULE_sample_clause = 488
    RULE_sample_fraction_description = 489
    RULE_sample_count_description = 490
    RULE_sample_when_clause = 491
    RULE_expand_on_clause = 492
    RULE_order_by_clause = 493
    RULE_order_by_spec_full = 494
    RULE_order_by_spec_asc_desc_only = 495
    RULE_with_check_option = 496
    RULE_logical_expr = 497
    RULE_scalar_expr = 498
    RULE_tuple = 499
    RULE_tuple_attribute = 500
    RULE_case_expr = 501
    RULE_valued_case_expr = 502
    RULE_searched_case_expr = 503
    RULE_coalesce_expr = 504
    RULE_nullif_expr = 505
    RULE_interval_expr_base = 506
    RULE_interval_expr_parenthesized = 507
    RULE_interval_expr_start_end_phrase = 508
    RULE_function_invocation = 509
    RULE_aggregate_function = 510
    RULE_analytic_function = 511
    RULE_arithmetic_function = 512
    RULE_array_function = 513
    RULE_attribute_function = 514
    RULE_byte_function = 515
    RULE_builtin_function = 516
    RULE_calendar_function = 517
    RULE_comparison_function = 518
    RULE_compression_function = 519
    RULE_conversion_function = 520
    RULE_date_function = 521
    RULE_hash_function = 522
    RULE_lob_function = 523
    RULE_map_function = 524
    RULE_nvl_funtion = 525
    RULE_period_function = 526
    RULE_regexp_function = 527
    RULE_string_function = 528
    RULE_json_function = 529
    RULE_xml_function = 530
    RULE_other_function = 531
    RULE_partitioning_expr = 532
    RULE_td_sysfnlib = 533
    RULE_td_sysxml = 534
    RULE_syslib = 535
    RULE_td_server_db = 536
    RULE_translation_mapping = 537
    RULE_attribute_modification = 538
    RULE_returns_clause = 539
    RULE_attribute_modification_option = 540
    RULE_teradata_type_conversion = 541
    RULE_teradata_type_conversion_data_attribute = 542
    RULE_case_spec = 543
    RULE_range_expr = 544
    RULE_range_list = 545
    RULE_range_expr_1 = 546
    RULE_range_expr_2 = 547
    RULE_range_expr_3 = 548
    RULE_range_spec = 549
    RULE_hash_bucket_number_expr = 550
    RULE_window_spec = 551
    RULE_window_spec_without_rows = 552
    RULE_window_spec_with_ties = 553
    RULE_window_partition_by = 554
    RULE_window_order_by = 555
    RULE_window_rows = 556
    RULE_json_param_spec = 557
    RULE_xml_query_argument = 558
    RULE_xml_query_variable_spec = 559
    RULE_xml_attribute_declaration = 560
    RULE_xml_attribute_spec = 561
    RULE_xml_forest_element_spec = 562
    RULE_xml_value_declaration = 563
    RULE_xml_namespace_declaration = 564
    RULE_xml_namespace_spec = 565
    RULE_xml_columns_spec = 566
    RULE_xml_regular_column_definition = 567
    RULE_xml_encoding = 568
    RULE_xml_query_on_empty = 569
    RULE_xml_returning_spec = 570
    RULE_xml_content_option_spec = 571
    RULE_ignore_respect_nulls = 572
    RULE_number_of_rows = 573
    RULE_with_ties = 574
    RULE_pivot = 575
    RULE_pivot_spec = 576
    RULE_pivot_with_phrase = 577
    RULE_pivot_agg_func_spec = 578
    RULE_pivot_for_phrase = 579
    RULE_pivot_with_spec = 580
    RULE_pivot_expr_spec_scalar = 581
    RULE_pivot_expr_spec_list = 582
    RULE_unpivot = 583
    RULE_unpivot_spec = 584
    RULE_unpivot_column_name_spec_single = 585
    RULE_unpivot_column_name_spec_list = 586
    RULE_at_timezone = 587
    RULE_elements_list = 588
    RULE_scalar_expr_list = 589
    RULE_scalar_expr_list_comma_separated = 590
    RULE_column_list = 591
    RULE_subquery = 592
    RULE_column_spec = 593
    RULE_variable_reference = 594
    RULE_cursor_variable_reference = 595
    RULE_macro_parameter_reference = 596
    RULE_array_scope_reference = 597
    RULE_comparison_operator = 598
    RULE_quantifier = 599
    RULE_request_modifier = 600
    RULE_locking_request_modifier = 601
    RULE_locking_spec = 602
    RULE_lock_type = 603
    RULE_with_request_modifier = 604
    RULE_cte_spec = 605
    RULE_regular_cte_spec = 606
    RULE_recursive_cte_spec = 607
    RULE_using_request_modifier = 608
    RULE_using_spec = 609
    RULE_explain_request_modifier = 610
    RULE_dcl_stat = 611
    RULE_give_stat = 612
    RULE_grant_stat = 613
    RULE_grant_monitor_stat = 614
    RULE_grant_role_stat = 615
    RULE_grant_sql_form_stat = 616
    RULE_grant_connect_through_stat = 617
    RULE_grant_logon_stat = 618
    RULE_grant_map_stat = 619
    RULE_grant_zone_stat = 620
    RULE_grant_zone_override_stat = 621
    RULE_revoke_stat = 622
    RULE_revoke_monitor_stat = 623
    RULE_revoke_role_stat = 624
    RULE_revoke_sql_form_stat = 625
    RULE_revoke_connect_through_stat = 626
    RULE_revoke_logon_stat = 627
    RULE_revoke_map_stat = 628
    RULE_revoke_zone_stat = 629
    RULE_revoke_zone_override_stat = 630
    RULE_privilege = 631
    RULE_privilege_object = 632
    RULE_map_privilege = 633
    RULE_role_privilege = 634
    RULE_profile_privilege = 635
    RULE_zone_privilege = 636
    RULE_monitor_privilege = 637
    RULE_grantee = 638
    RULE_revokee = 639
    RULE_function_parameter = 640
    RULE_with_admin_option = 641
    RULE_with_grant_option = 642
    RULE_grant_option_for = 643

    ruleNames =  [ "ddl_stat", "alter_foreign_server_stat", "foreign_server_add_clause", 
                   "foreign_server_drop_clause", "alter_function_stat", 
                   "alter_join_index_stat", "alter_hash_index_stat", "alter_table_stat", 
                   "alter_table_basic_stat", "alter_table_join_index_stat", 
                   "alter_table_revalidation_stat", "alter_table_release_rows_stat", 
                   "alter_table_map_and_collocation_form_stat", "alter_foreign_table_stat", 
                   "alter_foreign_column_option", "alter_table_to_current_stat", 
                   "alter_option", "table_option_alter_form", "add_option", 
                   "drop_option", "modify_primary", "alter_partitioning", 
                   "add_drop_range_option", "alter_column_spec", "alter_range_expr", 
                   "with_isolated_loading_alter_form", "join_index_add_option", 
                   "alter_type_stat", "add_attribute_clause", "add_method_clause", 
                   "add_specific_method_clause", "drop_attribute_clause", 
                   "drop_method_clause", "drop_specific_method_clause", 
                   "add_method_spec", "add_specific_method_spec", "begin_isolated_loading_stat", 
                   "begin_logging_stat", "operation", "logging_frequency", 
                   "logging_item", "begin_query_capture_stat", "begin_query_logging_stat", 
                   "query_logging_with_item", "query_logging_limit_item", 
                   "query_logging_on_items", "query_logging_on_all", "query_logging_on_users", 
                   "query_logging_on_application", "account_spec", "checkpoint_isolated_loading_stat", 
                   "collect_statistics_optimizer_form_stat", "using_option", 
                   "stats_target_spec", "stats_index_spec", "stats_column_spec", 
                   "collection_source", "from_stats_option", "comment_placing_stat", 
                   "create_replace_authorization_stat", "create_replace_function_stat", 
                   "create_replace_sql_function_stat", "create_replace_table_function_stat", 
                   "create_replace_external_function_stat", "sql_function_parameter_spec", 
                   "sql_function_language_spec", "sql_function_access_spec", 
                   "sql_function_attr", "table_spec", "table_function_parameter_spec", 
                   "table_function_language_spec", "table_function_attr", 
                   "table_function_parameter_style", "external_function_parameter_spec", 
                   "external_function_language_spec", "external_function_attr", 
                   "external_function_parameter_style", "no_sql", "create_replace_macro_stat", 
                   "macro_parameter", "create_replace_procedure_stat", "create_replace_procedure_sql_form_stat", 
                   "parameter_spec", "sql_data_access_option", "dynamic_result_sets", 
                   "sql_security_option", "procedure_body", "procedure_stat", 
                   "procedure_data_stat", "procedure_dml_stat", "procedure_ddl_stat", 
                   "procedure_dcl_stat", "compound_stat", "procedure_cursor_control_stat", 
                   "assignment_stat", "condition_stat", "iteration_stat", 
                   "diagnostic_stat", "print_stat", "local_declaration", 
                   "cursor_declaration", "condition_handler", "allocate_stat", 
                   "close_stat", "deallocate_prepare_stat", "positioned_delete_stat", 
                   "positioned_update_stat", "execute_statement_stat", "execute_immediate_stat", 
                   "fetch_stat", "open_stat", "prepare_stat", "case_stat", 
                   "when_operand_clause", "when_condition_clause", "if_stat", 
                   "while_stat", "loop_stat", "for_stat", "repeat_stat", 
                   "diagnostic_statement_assignment", "diagnostic_condition_assignment", 
                   "condition_information_item", "statement_information_item", 
                   "signal_spec", "sqlstate_spec", "create_replace_view_stat", 
                   "as_of_clause", "create_database_stat", "database_attribute", 
                   "create_index_stat", "index_spec", "create_join_index_stat", 
                   "join_index_select_clause", "ji_selection", "aggregation_clause", 
                   "ji_source", "ji_joined_table", "ji_grouping_or_ordering_spec", 
                   "create_profile_stat", "profile_attribute", "password_attribute", 
                   "create_foreign_server_stat", "foreign_server_external_security_clause", 
                   "foreign_server_using_clause", "foreign_server_using_option", 
                   "foreign_server_operator_option", "do_import_with", "do_export_with", 
                   "foreign_server_with_clause", "foreign_server_option_name", 
                   "create_hash_index_stat", "create_role_stat", "create_table_stat", 
                   "create_table_primary_form_stat", "create_table_as_stat", 
                   "create_queue_table_stat", "create_global_temporary_trace_table_stat", 
                   "create_foreign_table_stat", "create_error_table_stat", 
                   "table_kind", "table_option", "column_definition", "ctas_column_definition", 
                   "index_definition", "qits_definition", "foreign_table_external_security_clause", 
                   "location_column", "payload_column", "foreign_table_option", 
                   "table_preservation", "mergeblockratio", "datablocksize", 
                   "block_compression", "table_isolated_loading", "column_attribute", 
                   "column_storage_attribute", "compressed_value", "column_constraint_attribute", 
                   "auto_column_attribute", "identity_column_attribute", 
                   "id_column_value", "normalize_option", "table_constraint", 
                   "references", "partitioning_level", "column_partition", 
                   "create_type_stat", "create_type_structured_form_stat", 
                   "create_type_distinct_form_stat", "create_type_array_form_stat", 
                   "create_type_one_dimensional_array_form_stat", "create_type_one_dimensional_varray_form_stat", 
                   "create_type_multidimensional_array_form_stat", "create_type_multidimensional_varray_form_stat", 
                   "type_attribute_spec", "structured_method_spec", "distinct_method_spec", 
                   "method_parameter_spec", "returns_parameter_spec", "method_language_spec", 
                   "method_attr", "multidimensional_array_dimension", "multidimensional_varray_dimension", 
                   "array_bounds", "bound", "create_user_stat", "user_attribute", 
                   "transform_specification", "user_constraint", "database_stat", 
                   "delete_database_stat", "delete_user_stat", "drop_authorization_stat", 
                   "drop_cast_stat", "drop_constraint_stat", "drop_database_stat", 
                   "drop_error_table_stat", "drop_foreign_server_stat", 
                   "drop_function_stat", "drop_function_mapping_stat", "drop_index_stat", 
                   "drop_glop_set_stat", "drop_join_index_stat", "drop_hash_index_stat", 
                   "drop_macro_stat", "drop_map_stat", "drop_method_stat", 
                   "drop_ordering_stat", "drop_procedure_stat", "drop_profile_stat", 
                   "drop_replication_group_stat", "drop_replication_ruleset_stat", 
                   "drop_role_stat", "drop_schema_stat", "drop_statistics_optimizer_form_stat", 
                   "drop_table_stat", "drop_transform_stat", "drop_trigger_stat", 
                   "drop_type_stat", "drop_user_stat", "drop_view_stat", 
                   "drop_zone_stat", "end_isolated_loading_stat", "end_logging_stat", 
                   "end_query_capture_stat", "end_query_logging_stat", "end_query_logging_on_items", 
                   "end_query_logging_all_rules", "flush_query_logging_stat", 
                   "flush_option", "help_stat", "help_statistics_optimimizer_form_stat", 
                   "help_statistics_qcd_form_stat", "incremental_restore_allow_write_stat", 
                   "logging_incremental_archive_off_stat", "logging_incremental_archive_on_stat", 
                   "modify_database_stat", "modified_database_attribute", 
                   "modify_profile_stat", "modify_user_stat", "modify_user_attribute", 
                   "rename_function_stat", "rename_procedure_stat", "rename_macro_stat", 
                   "rename_table_stat", "rename_trigger_stat", "rename_view_stat", 
                   "replace_query_logging_stat", "set_session_stat", "collation_sequence", 
                   "session_constraint", "isolation_level", "session_debug_spec", 
                   "trace_enabling_spec", "set_role_stat", "set_query_band_stat", 
                   "show_object_stat", "show_query_logging_stat", "show_request_stat", 
                   "show_statistics_optimizer_form_stat", "show_statistics_qcd_form_stat", 
                   "show_stats_target_spec", "method", "index_loading", 
                   "index_ordering", "table_option_index_form", "map_spec", 
                   "database_size_spec", "skew_spec", "database_default_map", 
                   "fallback_protection", "before_journal", "after_journal", 
                   "default_journal_table", "drop_default_journal_table", 
                   "password", "dml_stat", "select_stat", "select_and_consume_stat", 
                   "delete_stat", "delete_table_spec", "insert_stat", "hash_by", 
                   "local_order_by", "update_stat", "update_basic_form_stat", 
                   "update_with_from_stat", "update_upsert_form_stat", "update_table_spec", 
                   "merge_stat", "when_matched", "when_not_matched", "collect_demographics_stat", 
                   "collect_statistics_qcd_form_stat", "qcd_stats_target_spec", 
                   "drop_statistics_qcd_form_stat", "dump_explain_stat", 
                   "initiate_index_analysis_stat", "index_analysis_set_spec", 
                   "index_analysis_boundary_option", "initiate_partition_analysis_stat", 
                   "insert_explain_stat", "restart_index_analysis_stat", 
                   "call_stat", "argument", "execute_stat", "commit_stat", 
                   "rollback_stat", "abort_stat", "begin_transaction_stat", 
                   "end_transaction_stat", "locking_stat", "comment_retrieving_stat", 
                   "checkpoint_stat", "echo_stat", "null_stat", "set_spec", 
                   "with_isolated_loading", "logging_errors", "object_kind", 
                   "explained_sql_request", "limit_sql_clause", "analysis_time_limit_clause", 
                   "data_type", "variable_data_type", "external_function_data_type", 
                   "numeric_data_type", "char_data_type", "precisionless_char_data_type", 
                   "lob_as_locator_data_type", "binary_data_type", "datetime_type", 
                   "period_type", "udt_type", "data_type_attribute", "default_value_control_phrase", 
                   "default_value", "column_naming_phrase", "sysudtlib", 
                   "interval_period_spec", "type_precision", "max_length_k_m_g", 
                   "max_length_k_m", "character_set_phrase", "uppercase_phrase", 
                   "casespecific_phrase", "format_phrase", "title_phrase", 
                   "named_phrase", "latin_unicode_character_set_phrase", 
                   "inline_length", "json_storage_format", "dataset_storage_format_clause", 
                   "dataset_storage_format", "with_schema", "with_time_zone", 
                   "literal", "hex_byte_literal", "char_string_literal", 
                   "unicode_char_string_literal", "hex_char_string_literal", 
                   "integer_literal", "hex_integer_literal", "float_literal", 
                   "character_set_prefix", "date_literal", "time_literal", 
                   "timestamp_literal", "interval_literal", "interval_qualifier", 
                   "period_literal", "column_name", "unqualified_column_name", 
                   "unqualified_name", "object_name", "table_name", "procedure_name", 
                   "function_name", "macro_name", "database_name", "user_name", 
                   "role_name", "profile_name", "alias_name", "variable_name", 
                   "parameter_name", "label_name", "condition_name", "cursor_name", 
                   "statement_name", "statistics_name", "udt_name", "attribute_name", 
                   "method_name", "anchor_name", "nonreserved_word", "query_expr", 
                   "query_term", "with_deleted_rows", "as_json", "select_list", 
                   "top_n", "normalize", "all_operator", "selected_columns", 
                   "selected_column", "into_clause", "from_clause", "from_spec", 
                   "join_source_spec", "join_joined_spec", "from_pivot_spec", 
                   "from_unpivot_spec", "table_reference", "join_clause", 
                   "join_on_clause", "foreign_table_reference", "foreign_function_reference", 
                   "foreign_on_clause", "exported_data", "foreign_using_clause", 
                   "foreign_parameter", "foreign_returns_clause", "server_name_reference", 
                   "table_function_reference", "udt_table_function", "unnest_table_function", 
                   "table_function_returns_clause", "table_function_local_order_by_clause", 
                   "table_function_hash_by_clause", "table_operator_reference", 
                   "xmltable_operator", "calcmatrix_table_operator", "read_nos_table_operator", 
                   "script_table_operator", "td_unpivot_table_operator", 
                   "write_nos_table_operator", "json_table_table_operator", 
                   "json_keys_table_operator", "json_shred_table_operator", 
                   "generic_table_operator", "table_operator_on_clause", 
                   "table_operator_execute_clause", "table_operator_out_table_clause", 
                   "table_operator_using_clause", "table_operator_using_spec", 
                   "json_keys_using_name_value_pair", "hash_or_partition_by", 
                   "subquery_reference", "location", "read_nos_option", 
                   "write_nos_option", "with_clause", "with_clause_by_phrase", 
                   "with_clause_title_phrase", "where_clause", "group_by_clause", 
                   "group_by_spec", "ordinary_grouping_set", "ordinary_grouping_set_parenthesized", 
                   "empty_grouping_set", "rollup_option", "cube_option", 
                   "grouping_sets_option", "grouping_sets_spec", "having_clause", 
                   "qualify_clause", "sample_clause", "sample_fraction_description", 
                   "sample_count_description", "sample_when_clause", "expand_on_clause", 
                   "order_by_clause", "order_by_spec_full", "order_by_spec_asc_desc_only", 
                   "with_check_option", "logical_expr", "scalar_expr", "tuple", 
                   "tuple_attribute", "case_expr", "valued_case_expr", "searched_case_expr", 
                   "coalesce_expr", "nullif_expr", "interval_expr_base", 
                   "interval_expr_parenthesized", "interval_expr_start_end_phrase", 
                   "function_invocation", "aggregate_function", "analytic_function", 
                   "arithmetic_function", "array_function", "attribute_function", 
                   "byte_function", "builtin_function", "calendar_function", 
                   "comparison_function", "compression_function", "conversion_function", 
                   "date_function", "hash_function", "lob_function", "map_function", 
                   "nvl_funtion", "period_function", "regexp_function", 
                   "string_function", "json_function", "xml_function", "other_function", 
                   "partitioning_expr", "td_sysfnlib", "td_sysxml", "syslib", 
                   "td_server_db", "translation_mapping", "attribute_modification", 
                   "returns_clause", "attribute_modification_option", "teradata_type_conversion", 
                   "teradata_type_conversion_data_attribute", "case_spec", 
                   "range_expr", "range_list", "range_expr_1", "range_expr_2", 
                   "range_expr_3", "range_spec", "hash_bucket_number_expr", 
                   "window_spec", "window_spec_without_rows", "window_spec_with_ties", 
                   "window_partition_by", "window_order_by", "window_rows", 
                   "json_param_spec", "xml_query_argument", "xml_query_variable_spec", 
                   "xml_attribute_declaration", "xml_attribute_spec", "xml_forest_element_spec", 
                   "xml_value_declaration", "xml_namespace_declaration", 
                   "xml_namespace_spec", "xml_columns_spec", "xml_regular_column_definition", 
                   "xml_encoding", "xml_query_on_empty", "xml_returning_spec", 
                   "xml_content_option_spec", "ignore_respect_nulls", "number_of_rows", 
                   "with_ties", "pivot", "pivot_spec", "pivot_with_phrase", 
                   "pivot_agg_func_spec", "pivot_for_phrase", "pivot_with_spec", 
                   "pivot_expr_spec_scalar", "pivot_expr_spec_list", "unpivot", 
                   "unpivot_spec", "unpivot_column_name_spec_single", "unpivot_column_name_spec_list", 
                   "at_timezone", "elements_list", "scalar_expr_list", "scalar_expr_list_comma_separated", 
                   "column_list", "subquery", "column_spec", "variable_reference", 
                   "cursor_variable_reference", "macro_parameter_reference", 
                   "array_scope_reference", "comparison_operator", "quantifier", 
                   "request_modifier", "locking_request_modifier", "locking_spec", 
                   "lock_type", "with_request_modifier", "cte_spec", "regular_cte_spec", 
                   "recursive_cte_spec", "using_request_modifier", "using_spec", 
                   "explain_request_modifier", "dcl_stat", "give_stat", 
                   "grant_stat", "grant_monitor_stat", "grant_role_stat", 
                   "grant_sql_form_stat", "grant_connect_through_stat", 
                   "grant_logon_stat", "grant_map_stat", "grant_zone_stat", 
                   "grant_zone_override_stat", "revoke_stat", "revoke_monitor_stat", 
                   "revoke_role_stat", "revoke_sql_form_stat", "revoke_connect_through_stat", 
                   "revoke_logon_stat", "revoke_map_stat", "revoke_zone_stat", 
                   "revoke_zone_override_stat", "privilege", "privilege_object", 
                   "map_privilege", "role_privilege", "profile_privilege", 
                   "zone_privilege", "monitor_privilege", "grantee", "revokee", 
                   "function_parameter", "with_admin_option", "with_grant_option", 
                   "grant_option_for" ]

    EOF = Token.EOF
    ABORT=1
    ABORTSESSION=2
    ABS=3
    ACCESS_LOCK=4
    ACCOUNT=5
    ACOS=6
    ACOSH=7
    ADD=8
    ADD_MONTHS=9
    ADMIN=10
    AFTER=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    AMP=15
    AND=16
    ANSIDATE=17
    ANY=18
    ARGLPAREN=19
    AS=20
    ASC=21
    ASIN=22
    ASINH=23
    AT=24
    ATAN=25
    ATAN2=26
    ATANH=27
    ATOMIC=28
    AUTHORIZATION=29
    AVE=30
    AVERAGE=31
    AVG=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BIGINT=36
    BINARY=37
    BLOB=38
    BOTH=39
    BT=40
    BUT=41
    BY=42
    BYTE=43
    BYTEINT=44
    BYTES=45
    CALL=46
    CASE=47
    CASE_N=48
    CASESPECIFIC=49
    CAST=50
    CD=51
    CHAR=52
    CHAR_LENGTH=53
    CHAR2HEXINT=54
    CHARACTER=55
    CHARACTER_LENGTH=56
    CHARACTERS=57
    CHARS=58
    CHECK=59
    CHECKPOINT=60
    CLASS=61
    CLOB=62
    CLOSE=63
    CLUSTER=64
    CM=65
    COALESCE=66
    COLLATION=67
    COLLECT=68
    COLUMN=69
    COMMENT=70
    COMMIT=71
    COMPRESS=72
    CONNECT=73
    CONSTRAINT=74
    CONSTRUCTOR=75
    CONSUME=76
    CONTAINS=77
    CONTINUE=78
    CONVERT_TABLE_HEADER=79
    CORR=80
    COS=81
    COSH=82
    COUNT=83
    COVAR_POP=84
    COVAR_SAMP=85
    CREATE=86
    CROSS=87
    CS=88
    CSUM=89
    CT=90
    CTCONTROL=91
    CUBE=92
    CURRENT=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CV=100
    CYCLE=101
    DATABASE=102
    DATABLOCKSIZE=103
    DATE=104
    DATEFORM=105
    DAY=106
    DEALLOCATE=107
    DEC=108
    DECIMAL=109
    DECLARE=110
    DEFAULT=111
    DEFERRED=112
    DEGREES=113
    DEL=114
    DELETE=115
    DESC=116
    DETERMINISTIC=117
    DIAGNOSTIC=118
    DICTIONARY=119
    DISABLED=120
    DISTINCT=121
    DO=122
    DOMAIN=123
    DOUBLE=124
    DROP=125
    DUAL=126
    DUMP=127
    DYNAMIC=128
    EACH=129
    ECHO=130
    ELSE=131
    ELSEIF=132
    ENABLED=133
    END=134
    EQ=135
    EQUALS=136
    ERROR=137
    ERRORFILES=138
    ERRORTABLES=139
    ESCAPE=140
    ET=141
    EXCEPT=142
    EXEC=143
    EXECUTE=144
    EXISTS=145
    EXIT=146
    EXP=147
    EXPAND=148
    EXPANDING=149
    EXPLAIN=150
    EXTERNAL=151
    EXTRACT=152
    FALLBACK=153
    FASTEXPORT=154
    FETCH=155
    FIRST=156
    FLOAT=157
    FLUSH=158
    FOR=159
    FOREIGN=160
    FORMAT=161
    FOUND=162
    FREESPACE=163
    FROM=164
    FULL=165
    FUNCTION=166
    FUNCTIONDESCRIPTOR=167
    GE=168
    GENERATED=169
    GET=170
    GIVE=171
    GRANT=172
    GRAPHIC=173
    GROUP=174
    GROUPING=175
    GT=176
    HANDLER=177
    HASH=178
    HASHAMP=179
    HASHBAKAMP=180
    HASHBUCKET=181
    HASHROW=182
    HAVING=183
    HELP=184
    HOUR=185
    ID2BIGINT=186
    IDENTITY=187
    IF=188
    IMMEDIATE=189
    IN=190
    INCONSISTENT=191
    INDEX=192
    INITIATE=193
    INNER=194
    INOUT=195
    INPUT=196
    INS=197
    INSERT=198
    INSTANCE=199
    INSTEAD=200
    INT=201
    INTEGER=202
    INTEGERDATE=203
    INTERSECT=204
    INTERVAL=205
    INTO=206
    IS=207
    ITERATE=208
    JAR=209
    JOIN=210
    JOURNAL=211
    KEY=212
    KURTOSIS=213
    LANGUAGE=214
    LARGE=215
    LE=216
    LEADING=217
    LEAVE=218
    LEFT=219
    LIKE=220
    LIMIT=221
    LN=222
    LOADING=223
    LOCAL=224
    LOCATOR=225
    LOCK=226
    LOCKING=227
    LOG=228
    LOGGING=229
    LOGON=230
    LONG=231
    LOOP=232
    LOWER=233
    LT=234
    MACRO=235
    MAP=236
    MAVG=237
    MAX=238
    MAXIMUM=239
    MCHARACTERS=240
    MDIFF=241
    MERGE=242
    METHOD=243
    MIN=244
    MINDEX=245
    MINIMUM=246
    MINUS=247
    MINUTE=248
    MLINREG=249
    MLOAD=250
    MOD=251
    MODE=252
    MODIFIES=253
    MODIFY=254
    MONITOR=255
    MONRESOURCE=256
    MONSESSION=257
    MONTH=258
    MSUBSTR=259
    MSUM=260
    MULTISET=261
    NAMED=262
    NATURAL=263
    NE=264
    NEW=265
    NEW_TABLE=266
    NEXT=267
    NO=268
    NONE=269
    NONTEMPORAL=270
    NORMALIZE=271
    NOT=272
    NOWAIT=273
    NULL=274
    NULLIF=275
    NULLIFZERO=276
    NUMBER=277
    NUMERIC=278
    OBJECT=279
    OBJECTS=280
    OCTET_LENGTH=281
    OF=282
    OFF=283
    OLD=284
    OLD_TABLE=285
    ON=286
    ONLY=287
    OPEN=288
    OPTION=289
    OR=290
    ORDER=291
    ORDERING=292
    OUT=293
    OUTER=294
    OVER=295
    OVERLAPS=296
    OVERRIDE=297
    PARAMETER=298
    PASSWORD=299
    PERCENT=300
    PERCENT_RANK=301
    PERM=302
    PERMANENT=303
    POSITION=304
    PRECISION=305
    PREPARE=306
    PRESERVE=307
    PRIMARY=308
    PRIVILEGES=309
    PROCEDURE=310
    PROFILE=311
    PROTECTION=312
    PUBLIC=313
    QUALIFIED=314
    QUALIFY=315
    QUANTILE=316
    QUEUE=317
    RADIANS=318
    RANDOM=319
    RANGE_N=320
    RANK=321
    READS=322
    REAL=323
    RECURSIVE=324
    REFERENCES=325
    REFERENCING=326
    REGR_AVGX=327
    REGR_AVGY=328
    REGR_COUNT=329
    REGR_INTERCEPT=330
    REGR_R2=331
    REGR_SLOPE=332
    REGR_SXX=333
    REGR_SXY=334
    REGR_SYY=335
    RELATIVE=336
    RELEASE=337
    RENAME=338
    REPEAT=339
    REPLACE=340
    REPLCONTROL=341
    REPLICATION=342
    REQUEST=343
    RESIGNAL=344
    RESTART=345
    RESTORE=346
    RESULT=347
    RESUME=348
    RET=349
    RETRIEVE=350
    RETURN=351
    RETURNS=352
    REVALIDATE=353
    REVOKE=354
    RIGHT=355
    RIGHTS=356
    ROLE=357
    ROLLBACK=358
    ROLLFORWARD=359
    ROLLUP=360
    ROW=361
    ROW_NUMBER=362
    ROWID=363
    ROWS=364
    SAMPLE=365
    SAMPLEID=366
    SCROLL=367
    SECOND=368
    SEL=369
    SELECT=370
    SESSION=371
    SET=372
    SETRESRATE=373
    SETS=374
    SETSESSRATE=375
    SHOW=376
    SIGNAL=377
    SIN=378
    SINH=379
    SKEW=380
    SMALLINT=381
    SOME=382
    SOUNDEX=383
    SPECIFIC=384
    SPOOL=385
    SQL=386
    SQLEXCEPTION=387
    SQLTEXT=388
    SQLWARNING=389
    SQRT=390
    SS=391
    START=392
    STARTUP=393
    STATEMENT=394
    STATISTICS=395
    STDDEV_POP=396
    STDDEV_SAMP=397
    STEPINFO=398
    STRING_CS=399
    SUBSCRIBER=400
    SUBSTR=401
    SUBSTRING=402
    SUM=403
    SUMMARY=404
    SUSPEND=405
    TABLE=406
    TAN=407
    TANH=408
    TBL_CS=409
    TD_ANYTYPE=410
    TD_AUTHID=411
    TD_HOST=412
    TD_ROWLOADID=413
    TD_ROWREVISION=414
    TD_ROWSIZE=415
    TD_VALIST=416
    TEMPORARY=417
    TERMINATE=418
    THEN=419
    THRESHOLD=420
    TIME=421
    TIMESTAMP=422
    TIMEZONE_HOUR=423
    TIMEZONE_MINUTE=424
    TITLE=425
    TO=426
    TOP=427
    TRACE=428
    TRAILING=429
    TRANSACTION=430
    TRANSACTIONTIME=431
    TRANSFORM=432
    TRANSLATE=433
    TRANSLATE_CHK=434
    TRIGGER=435
    TRIM=436
    TYPE=437
    UC=438
    UDTCASTAS=439
    UDTCASTLPAREN=440
    UDTMETHOD=441
    UDTTYPE=442
    UDTUSAGE=443
    UESCAPE=444
    UNDEFINED=445
    UNDO=446
    UNION=447
    UNIQUE=448
    UNTIL=449
    UNTIL_CHANGED=450
    UNTIL_CLOSED=451
    UPD=452
    UPDATE=453
    UPPER=454
    UPPERCASE=455
    USER=456
    USING=457
    VALIDTIME=458
    VALUE=459
    VALUES=460
    VAR_POP=461
    VAR_SAMP=462
    VARBYTE=463
    VARCHAR=464
    VARGRAPHIC=465
    VARIANT_TYPE=466
    VARYING=467
    VIEW=468
    VOLATILE=469
    WHEN=470
    WHERE=471
    WHILE=472
    WIDTH_BUCKET=473
    WITH=474
    WITHOUT=475
    WORK=476
    XMLPLAN=477
    YEAR=478
    ZEROIFNULL=479
    ZONE=480
    ALIAS=481
    DESCRIPTOR=482
    GO=483
    GOTO=484
    INDICATOR=485
    PRIVATE=486
    WAIT=487
    ABORTSESSIONS=488
    ABSENT=489
    ACCESS=490
    ACCORDING=491
    ACCUMULATE=492
    AG=493
    AGGGEOMINTERSECTION=494
    AGGGEOMUNION=495
    ALLDBQL=496
    ALLOCATE=497
    ALLOCATION=498
    ALLOW=499
    ALLPARAMS=500
    ALLTDWM=501
    ALWAYS=502
    AMPCOUNT=503
    ANALYSIS=504
    ANCHOR=505
    ANCHOR_HOUR=506
    ANCHOR_MILLISECOND=507
    ANCHOR_MINUTE=508
    ANCHOR_SECOND=509
    APPLNAME=510
    ARCHIVE=511
    ARRAY=512
    ARRAY_ADD=513
    ARRAY_AGG=514
    ARRAY_AVG=515
    ARRAY_COMPARE=516
    ARRAY_CONCAT=517
    ARRAY_COUNT_DISTINCT=518
    ARRAY_DIV=519
    ARRAY_EQ=520
    ARRAY_GE=521
    ARRAY_GET=522
    ARRAY_GT=523
    ARRAY_LE=524
    ARRAY_LT=525
    ARRAY_MAX=526
    ARRAY_MIN=527
    ARRAY_MOD=528
    ARRAY_MUL=529
    ARRAY_NE=530
    ARRAY_SUB=531
    ARRAY_SUM=532
    ARRAY_UPDATE=533
    ARRAY_UPDATE_STRIDE=534
    ASCII=535
    ASSIGNMENT=536
    ATTR=537
    ATTRIBUTE=538
    ATTRIBUTES=539
    ATTRIBUTION=540
    ATTRS=541
    AUTH=542
    AUTO=543
    AUTOTEMP=544
    AVRO=545
    BIT_LENGTH=546
    BITAND=547
    BITNOT=548
    BITOR=549
    BITXOR=550
    BLOCKCOMPRESSION=551
    BLOCKCOMPRESSIONALGORITHM=552
    BLOCKCOMPRESSIONLEVEL=553
    BOM=554
    BOTTOM=555
    BSON=556
    C=557
    CALENDAR=558
    CALLED=559
    CALLER=560
    CAMSET=561
    CAMSET_L=562
    CAPTURE=563
    CARDINALITY=564
    CEIL=565
    CEILING=566
    CHANGERATE=567
    CHARACTERISTICS=568
    CHARSET=569
    CHARSET_COLL=570
    CHECKSUM=571
    CHR=572
    CLASS_ORIGIN=573
    CLICKLAG=574
    CLIENT=575
    CNT=576
    COLOCATE=577
    COLUMNMETA=578
    COLUMNS=579
    COLUMNSPERINDEX=580
    COLUMNSPERJOININDEX=581
    COMMAND_FUNCTION=582
    COMMAND_FUNCTION_CODE=583
    COMPARISON=584
    COMPILE=585
    CONCAT=586
    CONCURRENT=587
    CONDITION=588
    CONDITION_IDENTIFIER=589
    CONDITION_NUMBER=590
    CONTAINED=591
    CONTAINEDTOKEN=592
    CONTENT=593
    CONTIGUOUS=594
    COST=595
    COSTS=596
    COUNTSET=597
    CPP=598
    CPUTIME=599
    CPUTIMENORM=600
    CREATEDATASET=601
    CREATOR=602
    CUME_DIST=603
    CURDATE=604
    CURTIME=605
    DATA=606
    DATASET=607
    DAY_OF_CALENDAR=608
    DAY_OF_MONTH=609
    DAY_OF_WEEK=610
    DAY_OF_YEAR=611
    DAYNUMBER_OF_CALENDAR=612
    DAYNUMBER_OF_MONTH=613
    DAYNUMBER_OF_WEEK=614
    DAYNUMBER_OF_YEAR=615
    DAYOCCURRENCE_OF_MONTH=616
    DBA=617
    DBC=618
    DEBUG=619
    DECAMSET=620
    DECAMSET_L=621
    DECODE=622
    DECOMPRESS=623
    DEFINER=624
    DELIMITER=625
    DELTA_T=626
    DEMOGRAPHICS=627
    DENIALS=628
    DENSE=629
    DENSE_RANK=630
    DESCRIBE=631
    DETAILED=632
    DIAGNOSTICS=633
    DIGITS=634
    DIMENSION=635
    DOCUMENT=636
    DOT=637
    DOWN=638
    DR=639
    DUPCOUNT=640
    DUPCOUNTCUM=641
    EBCDIC=642
    EDITDISTANCE=643
    ELAPSEDSEC=644
    ELAPSEDTIME=645
    ELEMENT=646
    ELZS_H=647
    EMITNULL=648
    EMPTY=649
    EMPTY_BLOB=650
    EMPTY_CLOB=651
    ENCODE=652
    ENCODING=653
    ENCRYPT=654
    ERRORS=655
    ERRORTBL=656
    EVENTCOLUMN=657
    EXCEPTION=658
    EXCL=659
    EXCLUDE=660
    EXCLUDING=661
    EXCLUSIVE=662
    EXPIRE=663
    EXPORT=664
    EXPORTWIDTH=665
    FALSE=666
    FEATUREINFO=667
    FILE=668
    FILL=669
    FILTER=670
    FINAL=671
    FIRST_NOTNULL=672
    FIRST_VALUE=673
    FLOOR=674
    FOLLOWING=675
    FOREIGNFUNCTION=676
    FORTOKEN=677
    FRIDAY=678
    FROM_BYTES=679
    FUNCTIONPARAMETER=680
    G=681
    GETBIT=682
    GETPSFVERSION=683
    GETQUERYBAND=684
    GETQUERYBANDVALUE=685
    GETTIMEZONEDISPLACEMENT=686
    GLOBAL=687
    GLOP=688
    GREATEST=689
    HIGH=690
    HOST=691
    IDENTIFYDATABASE=692
    IDENTIFYSESSION=693
    IDENTIFYTABLE=694
    IDENTIFYUSER=695
    IFP=696
    IGNORE=697
    IMMEDIATELY=698
    IMPORT=699
    INCLUDE=700
    INCLUDING=701
    INCREMENT=702
    INCREMENTAL=703
    INDENT=704
    INDEXESPERTABLE=705
    INDEXMAINTMODE=706
    INIT=707
    INITCAP=708
    INLINE=709
    INSTANTIABLE=710
    INSTR=711
    INTERNAL=712
    INVOKER=713
    IOCOUNT=714
    IPARTITION=715
    ISOLATED=716
    ISOLATION=717
    JAVA=718
    JIS_COLL=719
    JSON=720
    JSON_AGG=721
    JSON_COMPOSE=722
    K=723
    KANJI1=724
    KANJISJIS=725
    KBYTE=726
    KBYTES=727
    KEEP=728
    KILOBYTES=729
    LAG=730
    LAST=731
    LAST_DAY=732
    LAST_NOTNULL=733
    LAST_VALUE=734
    LATIN=735
    LDIFF=736
    LEAD=737
    LEAST=738
    LENGTH=739
    LEVEL=740
    LIST=741
    LOAD=742
    LOCATE=743
    LOCKEDUSEREXPIRE=744
    LOW=745
    LPAD=746
    LTRIM=747
    LZCOMP=748
    LZCOMP_L=749
    LZDECOMP=750
    LZDECOMP_L=751
    M=752
    MAD=753
    MANUAL=754
    MAPPING=755
    MATCHED=756
    MAX_CHOOSE=757
    MAXCHAR=758
    MAXINTERVALS=759
    MAXLOGONATTEMPTS=760
    MAXVALUE=761
    MAXVALUELENGTH=762
    MEDIAN=763
    MEDIUM=764
    MEETS=765
    MEMBER=766
    MERGEBLOCKRATIO=767
    MESSAGE_LENGTH=768
    MESSAGE_TEXT=769
    MIN_CHOOSE=770
    MINCHAR=771
    MINVALUE=772
    MODIFIED=773
    MONDAY=774
    MONITORQUERYBAND=775
    MONITORSESSIONRATE=776
    MONITORVERSION=777
    MONTH_BEGIN=778
    MONTH_END=779
    MONTH_OF_CALENDAR=780
    MONTH_OF_QUARTER=781
    MONTH_OF_YEAR=782
    MONTHNUMBER_OF_CALENDAR=783
    MONTHNUMBER_OF_QUARTER=784
    MONTHNUMBER_OF_YEAR=785
    MONTHS_BETWEEN=786
    MORE_=787
    MULTINATIONAL=788
    NAME=789
    NAMESPACE=790
    NEVER=791
    NEXT_DAY=792
    NGRAM=793
    NIL=794
    NODDLTEXT=795
    NODE=796
    NONOPTCOST=797
    NONOPTINIT=798
    NONSEQUENCED=799
    NORIGHT=800
    NOSEXTRACTVARFROMPATH=801
    NOTATION=802
    NOW=803
    NPATH=804
    NTH=805
    NULLS=806
    NUMFPFNS=807
    NUMTODSINTERVAL=808
    NUMTOYMINTERVAL=809
    NVL=810
    NVL2=811
    NVP=812
    OA=813
    OADD_MONTHS=814
    OCOUNT=815
    ODELETE=816
    OEXISTS=817
    OEXTEND=818
    OFIRST=819
    OLAST=820
    OLD_NEW_TABLE=821
    OLIMIT=822
    ONEXT=823
    ONLINE=824
    OPRIOR=825
    OPTIONS=826
    ORDERBYVALUES=827
    ORDERED_ANALYTIC=828
    ORDINALITY=829
    OREPLACE=830
    OTRANSLATE=831
    OTRIM=832
    OVERLAYS=833
    OWNER=834
    P_INTERSECT=835
    P_NORMALIZE=836
    PARAMID=837
    PARAMINFO=838
    PARENT=839
    PARTITION=840
    PARTITION_L=841
    PARTITIONED=842
    PARTITIONNAMES=843
    PASS=844
    PASSING=845
    PATH_GENERATOR=846
    PATH_START=847
    PATH_SUMMARIZER=848
    PATTERN=849
    PERCENTILE=850
    PERCENTILE_CONT=851
    PERCENTILE_DISC=852
    PERIOD=853
    PIVOT=854
    PORTION=855
    POWER=856
    PRECEDES=857
    PRECEDING=858
    PREFIX=859
    PRINT=860
    PRIOR=861
    PROTECTED=862
    QUARTER_BEGIN=863
    QUARTER_END=864
    QUARTER_OF_CALENDAR=865
    QUARTER_OF_YEAR=866
    QUARTERNUMBER_OF_CALENDAR=867
    QUARTERNUMBER_OF_YEAR=868
    QUERY=869
    QUERY_BAND=870
    QUOTECHAR=871
    RANDOMIZED=872
    RANGE=873
    RANGE_L=874
    RAPIDFIRE=875
    RDIFF=876
    READ=877
    RECALC=878
    REGEXP_INSTR=879
    REGEXP_REPLACE=880
    REGEXP_SIMILAR=881
    REGEXP_SUBSTR=882
    REPLACEMENT=883
    RESET=884
    RESPECT=885
    RESTRICTWORDS=886
    RETAIN=887
    RETURNED_SQLSTATE=888
    RETURNING=889
    REUSE=890
    ROOT=891
    ROTATELEFT=892
    ROTATERIGHT=893
    ROUND=894
    ROW_COUNT=895
    ROWIDGEN=896
    ROWIDGEN2=897
    RPAD=898
    RTRIM=899
    RU=900
    RULES=901
    RULESET=902
    SAMPLES=903
    SATURDAY=904
    SCHEMA=905
    SCRIPT=906
    SCRIPT_COMMAND=907
    SEARCHSPACE=908
    SEARCHUIFDBPATH=909
    SECURITY=910
    SEED=911
    SELF=912
    SEQ=913
    SEQUENCE=914
    SEQUENCED=915
    SERIALIZABLE=916
    SERVER=917
    SESSIONIZE=918
    SETBIT=919
    SETRESOURCERATE=920
    SETSESSIONACCOUNT=921
    SETSESSIONRATE=922
    SHARE=923
    SHIFTLEFT=924
    SHIFTRIGHT=925
    SIGN=926
    SIZE=927
    SNAPPY_COMPRESS=928
    SNAPPY_DECOMPRESS=929
    SOURCE=930
    SPARSE=931
    SPECCHAR=932
    SPL=933
    SQLSTATE=934
    SR=935
    ST_GEOMETRY=936
    STAT=937
    STATIC=938
    STATS=939
    STATSUSAGE=940
    STORAGE=941
    STRIP=942
    STRTOK=943
    STYLE=944
    SUBBITSTR=945
    SUBCLASS_ORIGIN=946
    SUCCEEDS=947
    SUMMARYONLY=948
    SUNDAY=949
    SYMBOLS=950
    SYSTEM=951
    SYSTEM_TIME=952
    SYSTEMTEST=953
    TARGET=954
    TD_ARRAY2P=955
    TD_DATASET=956
    TD_DAY_OF_CALENDAR=957
    TD_DAY_OF_MONTH=958
    TD_DAY_OF_WEEK=959
    TD_DAY_OF_YEAR=960
    TD_GENERAL=961
    TD_GETTIMEBUCKET=962
    TD_INTERNAL=963
    TD_LZ_COMPRESS=964
    TD_LZ_DECOMPRESS=965
    TD_MONTH_OF_CALENDAR=966
    TD_MONTH_OF_QUARTER=967
    TD_MONTH_OF_YEAR=968
    TD_QUARTER_OF_CALENDAR=969
    TD_QUARTER_OF_YEAR=970
    TD_TIME_BUCKET_NUMBER=971
    TD_WEEK_OF_CALENDAR=972
    TD_WEEK_OF_MONTH=973
    TD_WEEK_OF_YEAR=974
    TD_WEEKDAY_OF_MONTH=975
    TD_YEAR_OF_CALENDAR=976
    TDWMEVENT=977
    TDWMEXCEPTION=978
    TDWMHISTORY=979
    TEMPORAL_DATE=980
    TEMPORAL_TIMESTAMP=981
    TEXT=982
    THRESHOLDPERCENT=983
    THROUGH=984
    THURSDAY=985
    TIES=986
    TIMECODE=987
    TIMECOLUMN=988
    TIMEOUT=989
    TIMESTAMPCOLUMN=990
    TO_BYTE=991
    TO_BYTES=992
    TO_CHAR=993
    TO_DATE=994
    TO_DSINTERVAL=995
    TO_NUMBER=996
    TO_TIMESTAMP=997
    TO_TIMESTAMP_TZ=998
    TO_YMINTERVAL=999
    TOTOKEN=1000
    TPA=1001
    TRANSACTION_ACTIVE=1002
    TRANSUNICODETOUTF8=1003
    TRANSUTF8TOUNICODE=1004
    TRUE=1005
    TRUNC=1006
    TRUST_ONLY=1007
    TTGRANULARITY=1008
    TUESDAY=1009
    UBJSON=1010
    UCASE=1011
    UDFSEARCHPATH=1012
    UNBOUNDED=1013
    UNCOMMITTED=1014
    UNICODE=1015
    UNKNOWN=1016
    UNPIVOT=1017
    USE=1018
    USECOUNT=1019
    UTILITYINFO=1020
    VARRAY=1021
    VERBOSE=1022
    VERSION=1023
    VERSIONING=1024
    WARNING=1025
    WEDNESDAY=1026
    WEEK_BEGIN=1027
    WEEK_END=1028
    WEEK_OF_CALENDAR=1029
    WEEK_OF_MONTH=1030
    WEEK_OF_YEAR=1031
    WEEKDAY_OF_MONTH=1032
    WEEKNUMBER_OF_CALENDAR=1033
    WEEKNUMBER_OF_MONTH=1034
    WEEKNUMBER_OF_QUARTER=1035
    WEEKNUMBER_OF_YEAR=1036
    WHITESPACE=1037
    WINDOWSIZE=1038
    WITHIN=1039
    WORKLOAD=1040
    WRITE=1041
    XML=1042
    XMLAGG=1043
    XMLATTRIBUTES=1044
    XMLCOMMENT=1045
    XMLCONCAT=1046
    XMLDECLARATION=1047
    XMLDOCUMENT=1048
    XMLELEMENT=1049
    XMLFOREST=1050
    XMLNAMESPACES=1051
    XMLPARSE=1052
    XMLPI=1053
    XMLQUERY=1054
    XMLSCHEMA=1055
    XMLSERIALIZE=1056
    XMLTABLE=1057
    XMLTEXT=1058
    XMLTYPE=1059
    XMLVALIDATE=1060
    YEAR_BEGIN=1061
    YEAR_END=1062
    YEAR_OF_CALENDAR=1063
    YEARNUMBER_OF_CALENDAR=1064
    ZLIB=1065
    BUCKET=1066
    COMMITTED=1067
    CREATEXML=1068
    CS_LATIN=1069
    CS_UNICODE=1070
    CS_KANJISJIS=1071
    CS_GRAPHIC=1072
    CSV=1073
    CSVLD=1074
    DATASIZE=1075
    DAYOFMONTH=1076
    DAYS=1077
    DEFINITION=1078
    DELETED=1079
    FAST=1080
    LISTAGG=1081
    PATH=1082
    REGEXP_SPLIT_TO_TABLE=1083
    REVERSE=1084
    SAS=1085
    SQLTABLE=1086
    STRTOK_SPLIT_TO_TABLE=1087
    SYSLIB=1088
    SYSUDTLIB=1089
    TD_SERVER_DB=1090
    TD_SYSFNLIB=1091
    TD_SYSXML=1092
    TIMEDATEWZCONTROL=1093
    TRUST=1094
    TRYCAST=1095
    UDT=1096
    USAGE=1097
    VARIANT=1098
    WEEK=1099
    WIDTH=1100
    XMLPUBLISH=1101
    XMLPUBLISH_STREAM=1102
    XMLSPLIT=1103
    LATIN_TO_UNICODE=1104
    UNICODE_TO_LATIN=1105
    LOCALE_TO_UNICODE=1106
    UNICODE_TO_LOCALE=1107
    ASBSON=1108
    ASBSONTEXT=1109
    COMBINE=1110
    EXISTVALUE=1111
    JSONEXTRACT=1112
    JSONEXTRACTVALUE=1113
    JSONEXTRACTLARGEVALUE=1114
    KEYCOUNT=1115
    METADATA=1116
    STORAGE_SIZE=1117
    CREATESCHEMABASEDXML=1118
    CREATENONSCHEMABASEDXML=1119
    EXISTSNODE=1120
    ISCONTENT=1121
    ISDOCUMENT=1122
    ISSCHEMAVALID=1123
    ISSCHEMAVALIDATED=1124
    XMLEXTRACT=1125
    XMLTRANSFORM=1126
    PROC_ID=1127
    LOCATION=1128
    PAYLOAD=1129
    TRUSTED=1130
    PATHPATTERN=1131
    MANIFEST=1132
    ROWFORMAT=1133
    STOREDAS=1134
    HEADER=1135
    STRIP_EXTERIOR_SPACES=1136
    STRIP_ENCLOSING_CHAR=1137
    RLS=1138
    SINGLE=1139
    MULTIPLE=1140
    JSON_COMPRESS=1141
    JSON_DECOMPRESS=1142
    TS_COMPRESS=1143
    TS_DECOMPRESS=1144
    CONTIGUOUSMAPAMPS=1145
    SPARSEMAPAMPS=1146
    SPARSETABLEAMPS=1147
    UNNEST=1148
    CALCMATRIX=1149
    PHRASE=1150
    CALCTYPE=1151
    OUTPUT=1152
    NULL_HANDLING=1153
    READ_NOS=1154
    BUFFERSIZE=1155
    RETURNTYPE=1156
    SAMPLE_PERC=1157
    FULLSCAN=1158
    TD_UNPIVOT=1159
    VALUE_COLUMNS=1160
    UNPIVOT_COLUMN=1161
    COLUMN_LIST=1162
    COLUMN_ALIAS_LIST=1163
    INCLUDE_NULLS=1164
    WRITE_NOS=1165
    NAMING=1166
    MANIFESTFILE=1167
    MANIFESTONLY=1168
    OVERWRITE=1169
    INCLUDE_ORDERING=1170
    INCLUDE_HASHBY=1171
    MAXOBJECTSIZE=1172
    COMPRESSION=1173
    ARRAY_TO_JSON=1174
    BSON_CHECK=1175
    GEOJSONFROMGEOM=1176
    GEOMFROMGEOJSON=1177
    JSON_CHECK=1178
    JSONGETVALUE=1179
    JSONMETADATA=1180
    NVP2JSON=1181
    TD_JSONSHRED=1182
    JSON_KEYS=1183
    JSON_TABLE=1184
    DEPTH=1185
    QUOTES=1186
    ROWEXPR=1187
    COLEXPR=1188
    RETURNTYPES=1189
    NOCASE=1190
    TRUNCATE=1191
    LINK=1192
    OBJECT_NAME=1193
    UNSIGNED_INTEGER=1194
    HEX_BYTE_LITERAL=1195
    HEX_INTEGER_LITERAL=1196
    FLOAT_LITERAL=1197
    DATE_STRING=1198
    TIME_STRING=1199
    TIMESTAMP_STRING=1200
    PERIOD_STRING=1201
    UNICODE_STRING_LEADING=1202
    CHAR_STRING=1203
    HEX_STRING=1204
    PASSWORD_STRING=1205
    SEMICOLON=1206
    COLON=1207
    COMMA=1208
    DOT_=1209
    AT_SIGN=1210
    CARET=1211
    QUESTION_MARK=1212
    OPEN_PAR=1213
    CLOSE_PAR=1214
    OPEN_SQ_BRACKET=1215
    CLOSE_SQ_BRACKET=1216
    CONCATENATE=1217
    BROKEN_CONCATENATE=1218
    MUL_SIGN=1219
    DIV_SIGN=1220
    PLUS_SIGN=1221
    MINUS_SIGN=1222
    EXPONENTIATION=1223
    EQUALS_SIGN=1224
    NOT_EQUALS_SIGN=1225
    NOT_EQUALS_SIGN_TD=1226
    LT_SIGN=1227
    LE_SIGN=1228
    GT_SIGN=1229
    GE_SIGN=1230
    SINGLE_LINE_COMMENT=1231
    MULTI_LINE_COMMENT=1232
    WS=1233

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Ddl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_foreign_server_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_foreign_server_statContext,0)


        def alter_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_function_statContext,0)


        def alter_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_join_index_statContext,0)


        def alter_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_hash_index_statContext,0)


        def alter_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_statContext,0)


        def alter_type_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_type_statContext,0)


        def begin_isolated_loading_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_isolated_loading_statContext,0)


        def begin_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_logging_statContext,0)


        def begin_query_capture_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_query_capture_statContext,0)


        def begin_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_query_logging_statContext,0)


        def checkpoint_isolated_loading_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Checkpoint_isolated_loading_statContext,0)


        def collect_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collect_statistics_optimizer_form_statContext,0)


        def comment_placing_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comment_placing_statContext,0)


        def create_replace_authorization_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_authorization_statContext,0)


        def create_replace_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_function_statContext,0)


        def create_replace_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_macro_statContext,0)


        def create_replace_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_procedure_statContext,0)


        def create_replace_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_view_statContext,0)


        def create_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_database_statContext,0)


        def create_foreign_server_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_foreign_server_statContext,0)


        def create_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_hash_index_statContext,0)


        def create_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_index_statContext,0)


        def create_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_join_index_statContext,0)


        def create_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_profile_statContext,0)


        def create_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_role_statContext,0)


        def create_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_table_statContext,0)


        def create_type_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_statContext,0)


        def create_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_user_statContext,0)


        def database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_statContext,0)


        def delete_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_database_statContext,0)


        def delete_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_user_statContext,0)


        def drop_authorization_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_authorization_statContext,0)


        def drop_cast_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_cast_statContext,0)


        def drop_constraint_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_constraint_statContext,0)


        def drop_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_database_statContext,0)


        def drop_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_error_table_statContext,0)


        def drop_foreign_server_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_foreign_server_statContext,0)


        def drop_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_function_statContext,0)


        def drop_function_mapping_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_function_mapping_statContext,0)


        def drop_glop_set_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_glop_set_statContext,0)


        def drop_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_hash_index_statContext,0)


        def drop_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_index_statContext,0)


        def drop_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_join_index_statContext,0)


        def drop_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_macro_statContext,0)


        def drop_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_map_statContext,0)


        def drop_method_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_method_statContext,0)


        def drop_ordering_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_ordering_statContext,0)


        def drop_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_procedure_statContext,0)


        def drop_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_profile_statContext,0)


        def drop_replication_group_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_replication_group_statContext,0)


        def drop_replication_ruleset_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_replication_ruleset_statContext,0)


        def drop_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_role_statContext,0)


        def drop_schema_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_schema_statContext,0)


        def drop_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_statistics_optimizer_form_statContext,0)


        def drop_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_table_statContext,0)


        def drop_transform_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_transform_statContext,0)


        def drop_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_trigger_statContext,0)


        def drop_type_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_type_statContext,0)


        def drop_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_user_statContext,0)


        def drop_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_view_statContext,0)


        def drop_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_zone_statContext,0)


        def end_isolated_loading_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_isolated_loading_statContext,0)


        def end_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_logging_statContext,0)


        def end_query_capture_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_query_capture_statContext,0)


        def end_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_query_logging_statContext,0)


        def flush_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Flush_query_logging_statContext,0)


        def help_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Help_statContext,0)


        def help_statistics_optimimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Help_statistics_optimimizer_form_statContext,0)


        def help_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Help_statistics_qcd_form_statContext,0)


        def incremental_restore_allow_write_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Incremental_restore_allow_write_statContext,0)


        def logging_incremental_archive_off_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_incremental_archive_off_statContext,0)


        def logging_incremental_archive_on_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_incremental_archive_on_statContext,0)


        def modify_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_database_statContext,0)


        def modify_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_profile_statContext,0)


        def modify_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_user_statContext,0)


        def rename_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_function_statContext,0)


        def rename_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_procedure_statContext,0)


        def rename_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_macro_statContext,0)


        def rename_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_table_statContext,0)


        def rename_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_trigger_statContext,0)


        def rename_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_view_statContext,0)


        def replace_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Replace_query_logging_statContext,0)


        def set_session_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Set_session_statContext,0)


        def set_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Set_role_statContext,0)


        def set_query_band_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Set_query_band_statContext,0)


        def show_object_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Show_object_statContext,0)


        def show_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Show_query_logging_statContext,0)


        def show_request_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Show_request_statContext,0)


        def show_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Show_statistics_optimizer_form_statContext,0)


        def show_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Show_statistics_qcd_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ddl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_stat" ):
                listener.enterDdl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_stat" ):
                listener.exitDdl_stat(self)




    def ddl_stat(self):

        localctx = TeradataSQLDDLParser.Ddl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_ddl_stat)
        try:
            self.state = 1378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1288
                self.alter_foreign_server_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1289
                self.alter_function_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1290
                self.alter_join_index_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1291
                self.alter_hash_index_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1292
                self.alter_table_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1293
                self.alter_type_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1294
                self.begin_isolated_loading_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1295
                self.begin_logging_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1296
                self.begin_query_capture_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1297
                self.begin_query_logging_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1298
                self.checkpoint_isolated_loading_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1299
                self.collect_statistics_optimizer_form_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1300
                self.comment_placing_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1301
                self.create_replace_authorization_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1302
                self.create_replace_function_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1303
                self.create_replace_macro_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1304
                self.create_replace_procedure_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1305
                self.create_replace_view_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1306
                self.create_database_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1307
                self.create_foreign_server_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1308
                self.create_hash_index_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1309
                self.create_index_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1310
                self.create_join_index_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1311
                self.create_profile_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1312
                self.create_role_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1313
                self.create_table_stat()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1314
                self.create_type_stat()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1315
                self.create_user_stat()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1316
                self.database_stat()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1317
                self.delete_database_stat()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1318
                self.delete_user_stat()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1319
                self.drop_authorization_stat()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1320
                self.drop_cast_stat()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1321
                self.drop_constraint_stat()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1322
                self.drop_database_stat()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1323
                self.drop_error_table_stat()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1324
                self.drop_foreign_server_stat()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1325
                self.drop_function_stat()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1326
                self.drop_function_mapping_stat()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1327
                self.drop_glop_set_stat()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1328
                self.drop_hash_index_stat()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1329
                self.drop_index_stat()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1330
                self.drop_join_index_stat()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1331
                self.drop_macro_stat()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1332
                self.drop_map_stat()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1333
                self.drop_method_stat()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1334
                self.drop_ordering_stat()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1335
                self.drop_procedure_stat()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1336
                self.drop_profile_stat()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1337
                self.drop_replication_group_stat()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1338
                self.drop_replication_ruleset_stat()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1339
                self.drop_role_stat()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1340
                self.drop_schema_stat()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1341
                self.drop_statistics_optimizer_form_stat()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1342
                self.drop_table_stat()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1343
                self.drop_transform_stat()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1344
                self.drop_trigger_stat()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1345
                self.drop_type_stat()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1346
                self.drop_user_stat()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1347
                self.drop_view_stat()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1348
                self.drop_zone_stat()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1349
                self.end_isolated_loading_stat()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1350
                self.end_logging_stat()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1351
                self.end_query_capture_stat()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1352
                self.end_query_logging_stat()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1353
                self.flush_query_logging_stat()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1354
                self.help_stat()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1355
                self.help_statistics_optimimizer_form_stat()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1356
                self.help_statistics_qcd_form_stat()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1357
                self.incremental_restore_allow_write_stat()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1358
                self.logging_incremental_archive_off_stat()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1359
                self.logging_incremental_archive_on_stat()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1360
                self.modify_database_stat()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1361
                self.modify_profile_stat()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1362
                self.modify_user_stat()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1363
                self.rename_function_stat()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1364
                self.rename_procedure_stat()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1365
                self.rename_macro_stat()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1366
                self.rename_table_stat()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1367
                self.rename_trigger_stat()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1368
                self.rename_view_stat()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1369
                self.replace_query_logging_stat()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1370
                self.set_session_stat()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1371
                self.set_role_stat()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1372
                self.set_query_band_stat()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1373
                self.show_object_stat()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1374
                self.show_query_logging_stat()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1375
                self.show_request_stat()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1376
                self.show_statistics_optimizer_form_stat()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1377
                self.show_statistics_qcd_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_foreign_server_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_name = None # Unqualified_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def foreign_server_add_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_server_add_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_add_clauseContext,i)


        def foreign_server_drop_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_server_drop_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_drop_clauseContext,i)


        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_server_dbContext,0)


        def foreign_server_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_external_security_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_foreign_server_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_foreign_server_stat" ):
                listener.enterAlter_foreign_server_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_foreign_server_stat" ):
                listener.exitAlter_foreign_server_stat(self)




    def alter_foreign_server_stat(self):

        localctx = TeradataSQLDDLParser.Alter_foreign_server_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_alter_foreign_server_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1381
            self.match(TeradataSQLDDLParser.FOREIGN)
            self.state = 1382
            self.match(TeradataSQLDDLParser.SERVER)
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 1383
                self.td_server_db()


            self.state = 1386
            localctx.server_name = self.unqualified_name()
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1387
                self.foreign_server_external_security_clause()


            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 1390
                self.foreign_server_add_clause()
                pass
            elif token in [125]:
                self.state = 1391
                self.foreign_server_drop_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125 or _la==1208:
                self.state = 1397
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1208]:
                    self.state = 1394
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1395
                    self.foreign_server_add_clause()
                    pass
                elif token in [125]:
                    self.state = 1396
                    self.foreign_server_drop_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_add_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def foreign_server_using_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_using_optionContext,0)


        def IMPORT(self):
            return self.getToken(TeradataSQLDDLParser.IMPORT, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDDLParser.EXPORT, 0)

        def foreign_server_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_using_clauseContext,0)


        def foreign_server_with_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_with_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_add_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_add_clause" ):
                listener.enterForeign_server_add_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_add_clause" ):
                listener.exitForeign_server_add_clause(self)




    def foreign_server_add_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_server_add_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_foreign_server_add_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(TeradataSQLDDLParser.ADD)
            self.state = 1409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1023, 1192]:
                self.state = 1403
                self.foreign_server_using_option()
                pass
            elif token in [664, 699]:
                self.state = 1404
                _la = self._input.LA(1)
                if not(_la==664 or _la==699):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1407
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [457]:
                    self.state = 1405
                    self.foreign_server_using_clause()
                    pass
                elif token in [474]:
                    self.state = 1406
                    self.foreign_server_with_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_drop_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def foreign_server_option_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_server_option_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_option_nameContext,i)


        def IMPORT(self):
            return self.getToken(TeradataSQLDDLParser.IMPORT, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDDLParser.EXPORT, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_drop_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_drop_clause" ):
                listener.enterForeign_server_drop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_drop_clause" ):
                listener.exitForeign_server_drop_clause(self)




    def foreign_server_drop_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_server_drop_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreign_server_drop_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 1422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1023, 1192]:
                self.state = 1412
                self.foreign_server_option_name()
                pass
            elif token in [664, 699]:
                self.state = 1413
                _la = self._input.LA(1)
                if not(_la==664 or _la==699):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==457:
                    self.state = 1414
                    self.match(TeradataSQLDDLParser.USING)
                    self.state = 1416 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1415
                        self.foreign_server_option_name()
                        self.state = 1418 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1023 or _la==1192):
                            break



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLDDLParser.PROTECTED, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLDDLParser.COMPILE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def ONLY(self):
            return self.getToken(TeradataSQLDDLParser.ONLY, 0)

        def variable_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_data_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function_stat" ):
                listener.enterAlter_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function_stat" ):
                listener.exitAlter_function_stat(self)




    def alter_function_stat(self):

        localctx = TeradataSQLDDLParser.Alter_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.state = 1425
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 1426
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 1427
                self.function_name()
                pass
            elif token in [166]:
                self.state = 1428
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 1429
                self.function_name()
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1430
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 1439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                        self.state = 1431
                        self.variable_data_type()
                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 1432
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 1433
                            self.variable_data_type()
                            self.state = 1438
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1441
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [144]:
                self.state = 1446
                self.match(TeradataSQLDDLParser.EXECUTE)
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1447
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 1450
                self.match(TeradataSQLDDLParser.PROTECTED)
                pass
            elif token in [585]:
                self.state = 1451
                self.match(TeradataSQLDDLParser.COMPILE)
                self.state = 1453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 1452
                    self.match(TeradataSQLDDLParser.ONLY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_specContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_join_index_stat" ):
                listener.enterAlter_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_join_index_stat" ):
                listener.exitAlter_join_index_stat(self)




    def alter_join_index_stat(self):

        localctx = TeradataSQLDDLParser.Alter_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alter_join_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1458
            self.match(TeradataSQLDDLParser.JOIN)
            self.state = 1459
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 1460
            localctx.join_index_name = self.table_name()
            self.state = 1461
            self.map_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_hash_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hash_index_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_specContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_hash_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_hash_index_stat" ):
                listener.enterAlter_hash_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_hash_index_stat" ):
                listener.exitAlter_hash_index_stat(self)




    def alter_hash_index_stat(self):

        localctx = TeradataSQLDDLParser.Alter_hash_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alter_hash_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1464
            self.match(TeradataSQLDDLParser.HASH)
            self.state = 1465
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 1466
            localctx.hash_index_name = self.table_name()
            self.state = 1467
            self.map_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_basic_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_basic_statContext,0)


        def alter_table_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_join_index_statContext,0)


        def alter_table_revalidation_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_revalidation_statContext,0)


        def alter_table_release_rows_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_release_rows_statContext,0)


        def alter_table_map_and_collocation_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_map_and_collocation_form_statContext,0)


        def alter_foreign_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_foreign_table_statContext,0)


        def alter_table_to_current_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_to_current_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stat" ):
                listener.enterAlter_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stat" ):
                listener.exitAlter_table_stat(self)




    def alter_table_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_alter_table_stat)
        try:
            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.alter_table_basic_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.alter_table_join_index_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1471
                self.alter_table_revalidation_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1472
                self.alter_table_release_rows_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1473
                self.alter_table_map_and_collocation_form_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1474
                self.alter_foreign_table_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1475
                self.alter_table_to_current_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_basic_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.quotestring = None # Char_string_literalContext
            self.n = None # Integer_literalContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def alter_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Alter_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_optionContext,i)


        def table_option_alter_form(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_option_alter_formContext,0)


        def normalize_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Normalize_optionContext,0)


        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def NORMALIZE(self):
            return self.getToken(TeradataSQLDDLParser.NORMALIZE, 0)

        def modify_primary(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_primaryContext,0)


        def MODIFY(self):
            return self.getToken(TeradataSQLDDLParser.MODIFY, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def alter_partitioning(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_partitioningContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.TIME)
            else:
                return self.getToken(TeradataSQLDDLParser.TIME, i)

        def ZONE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ZONE)
            else:
                return self.getToken(TeradataSQLDDLParser.ZONE, i)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def DOWN(self):
            return self.getToken(TeradataSQLDDLParser.DOWN, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def RESET(self):
            return self.getToken(TeradataSQLDDLParser.RESET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLDDLParser.TIMEDATEWZCONTROL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_basic_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_basic_stat" ):
                listener.enterAlter_table_basic_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_basic_stat" ):
                listener.exitAlter_table_basic_stat(self)




    def alter_table_basic_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_basic_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alter_table_basic_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1479
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1480
            self.table_name()
            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1481
                self.alter_option()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1482
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1483
                    self.alter_option()
                    self.state = 1488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1489
                self.table_option_alter_form()
                pass

            elif la_ == 3:
                self.state = 1490
                self.normalize_option()
                pass

            elif la_ == 4:
                self.state = 1491
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 1492
                self.match(TeradataSQLDDLParser.NORMALIZE)
                pass

            elif la_ == 5:
                self.state = 1493
                self.modify_primary()
                pass

            elif la_ == 6:
                self.state = 1494
                self.match(TeradataSQLDDLParser.MODIFY)
                self.state = 1495
                self.match(TeradataSQLDDLParser.NO)
                self.state = 1496
                self.match(TeradataSQLDDLParser.PRIMARY)
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 1497
                    self.match(TeradataSQLDDLParser.INDEX)


                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==125 or _la==272 or _la==840:
                    self.state = 1500
                    self.alter_partitioning()


                pass

            elif la_ == 7:
                self.state = 1503
                self.match(TeradataSQLDDLParser.MODIFY)
                self.state = 1504
                self.alter_partitioning()
                pass

            elif la_ == 8:
                self.state = 1505
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 1506
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 1507
                self.match(TeradataSQLDDLParser.ZONE)
                self.state = 1508
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1221 or _la==1222:
                    self.state = 1509
                    _la = self._input.LA(1)
                    if not(_la==1221 or _la==1222):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1512
                localctx.quotestring = self.char_string_literal()
                self.state = 1517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 1513
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1514
                    self.match(TeradataSQLDDLParser.TIMEDATEWZCONTROL)
                    self.state = 1515
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 1516
                    localctx.n = self.integer_literal()


                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 1519
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1520
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 1521
                    self.match(TeradataSQLDDLParser.TIME)
                    self.state = 1522
                    self.match(TeradataSQLDDLParser.ZONE)


                pass

            elif la_ == 9:
                self.state = 1525
                _la = self._input.LA(1)
                if not(_la==372 or _la==884):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1526
                self.match(TeradataSQLDDLParser.DOWN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def join_index_add_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Join_index_add_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Join_index_add_optionContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_join_index_stat" ):
                listener.enterAlter_table_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_join_index_stat" ):
                listener.exitAlter_table_join_index_stat(self)




    def alter_table_join_index_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alter_table_join_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1530
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1531
            localctx.join_index_name = self.table_name()
            self.state = 1532
            self.join_index_add_option()
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1533
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 1534
                self.join_index_add_option()
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_revalidation_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.save_table_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def REVALIDATE(self):
            return self.getToken(TeradataSQLDDLParser.REVALIDATE, 0)

        def NONTEMPORAL(self):
            return self.getToken(TeradataSQLDDLParser.NONTEMPORAL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_revalidation_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_revalidation_stat" ):
                listener.enterAlter_table_revalidation_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_revalidation_stat" ):
                listener.exitAlter_table_revalidation_stat(self)




    def alter_table_revalidation_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_revalidation_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_alter_table_revalidation_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270:
                self.state = 1540
                self.match(TeradataSQLDDLParser.NONTEMPORAL)


            self.state = 1543
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1544
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1545
            self.table_name()
            self.state = 1546
            self.match(TeradataSQLDDLParser.REVALIDATE)
            self.state = 1556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1547
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 1554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [198]:
                    self.state = 1548
                    self.match(TeradataSQLDDLParser.INSERT)
                    self.state = 1550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==206:
                        self.state = 1549
                        self.match(TeradataSQLDDLParser.INTO)


                    self.state = 1552
                    localctx.save_table_name = self.table_name()
                    pass
                elif token in [115]:
                    self.state = 1553
                    self.match(TeradataSQLDDLParser.DELETE)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_release_rows_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def RELEASE(self):
            return self.getToken(TeradataSQLDDLParser.RELEASE, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDDLParser.ROWS, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDDLParser.DELETED, 0)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def RESET(self):
            return self.getToken(TeradataSQLDDLParser.RESET, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDDLParser.LOAD, 0)

        def IDENTITY(self):
            return self.getToken(TeradataSQLDDLParser.IDENTITY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_release_rows_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_release_rows_stat" ):
                listener.enterAlter_table_release_rows_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_release_rows_stat" ):
                listener.exitAlter_table_release_rows_stat(self)




    def alter_table_release_rows_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_release_rows_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alter_table_release_rows_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1559
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1560
            self.table_name()
            self.state = 1561
            self.match(TeradataSQLDDLParser.RELEASE)
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1079:
                self.state = 1562
                self.match(TeradataSQLDDLParser.DELETED)


            self.state = 1565
            self.match(TeradataSQLDDLParser.ROWS)
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 1566
                self.match(TeradataSQLDDLParser.AND)
                self.state = 1567
                self.match(TeradataSQLDDLParser.RESET)
                self.state = 1568
                self.match(TeradataSQLDDLParser.LOAD)
                self.state = 1569
                self.match(TeradataSQLDDLParser.IDENTITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_map_and_collocation_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_map_and_collocation_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_map_and_collocation_form_stat" ):
                listener.enterAlter_table_map_and_collocation_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_map_and_collocation_form_stat" ):
                listener.exitAlter_table_map_and_collocation_form_stat(self)




    def alter_table_map_and_collocation_form_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_map_and_collocation_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alter_table_map_and_collocation_form_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1573
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1574
            self.table_name()
            self.state = 1575
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 1576
            self.map_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_foreign_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_optionContext,i)


        def foreign_table_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_table_external_security_clauseContext,0)


        def alter_foreign_column_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Alter_foreign_column_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_foreign_column_optionContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def location_column(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Location_columnContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def payload_column(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Payload_columnContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_definitionContext,i)


        def location(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.LocationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.LocationContext,i)


        def foreign_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_table_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_foreign_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_foreign_table_stat" ):
                listener.enterAlter_foreign_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_foreign_table_stat" ):
                listener.exitAlter_foreign_table_stat(self)




    def alter_foreign_table_stat(self):

        localctx = TeradataSQLDDLParser.Alter_foreign_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_alter_foreign_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1579
            self.match(TeradataSQLDDLParser.FOREIGN)
            self.state = 1580
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1581
            self.table_name()
            self.state = 1586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1582
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1583
                    self.table_option() 
                self.state = 1588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 1589
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 1590
                self.foreign_table_external_security_clause()


            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==125 or _la==338:
                self.state = 1593
                self.alter_foreign_column_option()
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1594
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1595
                    self.alter_foreign_column_option()
                    self.state = 1600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 1603
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1604
                self.location_column()
                self.state = 1605
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 1615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 1606
                    self.payload_column()
                    pass

                elif la_ == 2:
                    self.state = 1607
                    self.column_definition()
                    self.state = 1612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1608
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 1609
                        self.column_definition()
                        self.state = 1614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 1617
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 1621
                self.match(TeradataSQLDDLParser.UPDATE)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & 1017) != 0):
                    self.state = 1624
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1128]:
                        self.state = 1622
                        self.location()
                        pass
                    elif token in [1131, 1132, 1133, 1134, 1135, 1136, 1137]:
                        self.state = 1623
                        self.foreign_table_option()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_foreign_column_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.old_name = None # Unqualified_nameContext
            self.new_name = None # Unqualified_nameContext

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def add_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Add_optionContext,0)


        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def IDENTITY(self):
            return self.getToken(TeradataSQLDDLParser.IDENTITY, 0)

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_foreign_column_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_foreign_column_option" ):
                listener.enterAlter_foreign_column_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_foreign_column_option" ):
                listener.exitAlter_foreign_column_option(self)




    def alter_foreign_column_option(self):

        localctx = TeradataSQLDDLParser.Alter_foreign_column_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alter_foreign_column_option)
        self._la = 0 # Token type
        try:
            self.state = 1643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1631
                self.match(TeradataSQLDDLParser.ADD)
                self.state = 1632
                self.add_option()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 1634
                localctx.name = self.unqualified_name()
                self.state = 1636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1635
                    self.match(TeradataSQLDDLParser.IDENTITY)


                pass
            elif token in [338]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1638
                self.match(TeradataSQLDDLParser.RENAME)
                self.state = 1639
                localctx.old_name = self.unqualified_name()
                self.state = 1640
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1641
                localctx.new_name = self.unqualified_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_to_current_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.save_table = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_table_to_current_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_to_current_stat" ):
                listener.enterAlter_table_to_current_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_to_current_stat" ):
                listener.exitAlter_table_to_current_stat(self)




    def alter_table_to_current_stat(self):

        localctx = TeradataSQLDDLParser.Alter_table_to_current_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alter_table_to_current_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 1646
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 1647
            self.table_name()
            self.state = 1648
            self.match(TeradataSQLDDLParser.TO)
            self.state = 1649
            self.match(TeradataSQLDDLParser.CURRENT)
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1650
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 1657
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [198]:
                    self.state = 1651
                    self.match(TeradataSQLDDLParser.INSERT)
                    self.state = 1653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==206:
                        self.state = 1652
                        self.match(TeradataSQLDDLParser.INTO)


                    self.state = 1655
                    localctx.save_table = self.table_name()
                    pass
                elif token in [115]:
                    self.state = 1656
                    self.match(TeradataSQLDDLParser.DELETE)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Unqualified_nameContext
            self.old_name = None # Unqualified_nameContext
            self.new_name = None # Unqualified_nameContext

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def add_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Add_optionContext,0)


        def MODIFY(self):
            return self.getToken(TeradataSQLDDLParser.MODIFY, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def drop_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_option" ):
                listener.enterAlter_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_option" ):
                listener.exitAlter_option(self)




    def alter_option(self):

        localctx = TeradataSQLDDLParser.Alter_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alter_option)
        self._la = 0 # Token type
        try:
            self.state = 1682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.match(TeradataSQLDDLParser.ADD)
                self.state = 1662
                self.add_option()
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1663
                self.match(TeradataSQLDDLParser.MODIFY)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 1664
                        self.match(TeradataSQLDDLParser.CONSTRAINT)


                    self.state = 1667
                    localctx.constraint_name = self.unqualified_name()


                self.state = 1670
                self.match(TeradataSQLDDLParser.CHECK)
                self.state = 1671
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1672
                self.logical_expr(0)
                self.state = 1673
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [338]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1675
                self.match(TeradataSQLDDLParser.RENAME)
                self.state = 1676
                localctx.old_name = self.unqualified_name()
                self.state = 1677
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1678
                localctx.new_name = self.unqualified_name()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1680
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 1681
                self.drop_option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_option_alter_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLDDLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Before_journalContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def COMMIT(self):
            return self.getToken(TeradataSQLDDLParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDDLParser.ROWS, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLDDLParser.PRESERVE, 0)

        def LOG(self):
            return self.getToken(TeradataSQLDDLParser.LOG, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def AFTER(self):
            return self.getToken(TeradataSQLDDLParser.AFTER, 0)

        def DUAL(self):
            return self.getToken(TeradataSQLDDLParser.DUAL, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDDLParser.CHECKSUM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def OFF(self):
            return self.getToken(TeradataSQLDDLParser.OFF, 0)

        def FREESPACE(self):
            return self.getToken(TeradataSQLDDLParser.FREESPACE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def datablocksize(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.DatablocksizeContext,0)


        def IMMEDIATE(self):
            return self.getToken(TeradataSQLDDLParser.IMMEDIATE, 0)

        def mergeblockratio(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.MergeblockratioContext,0)


        def block_compression(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Block_compressionContext,0)


        def with_isolated_loading_alter_form(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loading_alter_formContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_option_alter_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option_alter_form" ):
                listener.enterTable_option_alter_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option_alter_form" ):
                listener.exitTable_option_alter_form(self)




    def table_option_alter_form(self):

        localctx = TeradataSQLDDLParser.Table_option_alter_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_table_option_alter_form)
        self._la = 0 # Token type
        try:
            self.state = 1723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1684
                self.fallback_protection()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1685
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 1686
                self.match(TeradataSQLDDLParser.JOURNAL)
                self.state = 1687
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 1688
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 1689
                localctx.journal_table_name = self.table_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1690
                self.before_journal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1691
                self.match(TeradataSQLDDLParser.ON)
                self.state = 1692
                self.match(TeradataSQLDDLParser.COMMIT)
                self.state = 1693
                _la = self._input.LA(1)
                if not(_la==115 or _la==307):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1694
                self.match(TeradataSQLDDLParser.ROWS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 1695
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 1698
                self.match(TeradataSQLDDLParser.LOG)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1704
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 1699
                    self.match(TeradataSQLDDLParser.NO)
                    pass
                elif token in [126]:
                    self.state = 1700
                    self.match(TeradataSQLDDLParser.DUAL)
                    pass
                elif token in [224]:
                    self.state = 1701
                    self.match(TeradataSQLDDLParser.LOCAL)
                    pass
                elif token in [272]:
                    self.state = 1702
                    self.match(TeradataSQLDDLParser.NOT)
                    self.state = 1703
                    self.match(TeradataSQLDDLParser.LOCAL)
                    pass
                elif token in [11]:
                    pass
                else:
                    pass
                self.state = 1706
                self.match(TeradataSQLDDLParser.AFTER)
                self.state = 1707
                self.match(TeradataSQLDDLParser.JOURNAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1708
                self.match(TeradataSQLDDLParser.CHECKSUM)
                self.state = 1709
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 1710
                _la = self._input.LA(1)
                if not(_la==111 or _la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1711
                self.match(TeradataSQLDDLParser.FREESPACE)
                self.state = 1712
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 1713
                self.integer_literal()
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 1714
                    self.match(TeradataSQLDDLParser.PERCENT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1717
                self.datablocksize()
                self.state = 1718
                self.match(TeradataSQLDDLParser.IMMEDIATE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1720
                self.mergeblockratio()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1721
                self.block_compression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1722
                self.with_isolated_loading_alter_form()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.into_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.name = list() # of Unqualified_nameContexts
            self.period_name = None # Unqualified_nameContext
            self.period_begin_column = None # Unqualified_nameContext
            self.period_end_column = None # Unqualified_nameContext
            self.row_level_security_constraint_column_name = list() # of Unqualified_nameContexts

        def alter_column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Alter_column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_column_specContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDDLParser.SYSTEM, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_option" ):
                listener.enterAdd_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_option" ):
                listener.exitAdd_option(self)




    def add_option(self):

        localctx = TeradataSQLDDLParser.Add_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_add_option)
        self._la = 0 # Token type
        try:
            self.state = 1798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 1725
                    self.alter_column_spec()
                    pass
                elif token in [1213]:
                    self.state = 1726
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 1727
                    self.alter_column_spec()
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1728
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 1729
                        self.alter_column_spec()
                        self.state = 1734
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1735
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 1739
                    self.match(TeradataSQLDDLParser.INTO)
                    self.state = 1740
                    localctx.into_name = self.unqualified_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==361 or _la==951:
                    self.state = 1743
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==361 or _la==951):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1746
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 1747
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.name.append(localctx._unqualified_name)
                    pass

                elif la_ == 2:
                    self.state = 1748
                    self.alter_column_spec()
                    pass


                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1751
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1754
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        self.state = 1752
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.name.append(localctx._unqualified_name)
                        pass

                    elif la_ == 2:
                        self.state = 1753
                        self.alter_column_spec()
                        pass


                    self.state = 1760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1761
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 1763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 1762
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 1765
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 1766
                    self.match(TeradataSQLDDLParser.COMPRESS)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1769
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1770
                localctx._unqualified_name = self.unqualified_name()
                localctx.name.append(localctx._unqualified_name)
                self.state = 1771
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 1772
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 1775
                self.match(TeradataSQLDDLParser.AUTO)
                self.state = 1776
                self.match(TeradataSQLDDLParser.COMPRESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1778
                self.match(TeradataSQLDDLParser.PERIOD)
                self.state = 1779
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 1780
                localctx.period_name = self.unqualified_name()
                self.state = 1781
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1782
                localctx.period_begin_column = self.unqualified_name()
                self.state = 1783
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 1784
                localctx.period_end_column = self.unqualified_name()
                self.state = 1785
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1787
                self.table_constraint()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1788
                localctx._unqualified_name = self.unqualified_name()
                localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1789
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1790
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                    self.state = 1795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1796
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.period_name = None # Unqualified_nameContext
            self.name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.fk_column_name = list() # of Unqualified_nameContexts
            self.row_level_security_constraint_column_name = list() # of Unqualified_nameContexts

        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def IDENTITY(self):
            return self.getToken(TeradataSQLDDLParser.IDENTITY, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TeradataSQLDDLParser.KEY, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def references(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.ReferencesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def INCONSISTENT(self):
            return self.getToken(TeradataSQLDDLParser.INCONSISTENT, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLDDLParser.REFERENCES, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_option" ):
                listener.enterDrop_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_option" ):
                listener.exitDrop_option(self)




    def drop_option(self):

        localctx = TeradataSQLDDLParser.Drop_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_option)
        self._la = 0 # Token type
        try:
            self.state = 1846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1800
                self.match(TeradataSQLDDLParser.PERIOD)
                self.state = 1801
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 1802
                localctx.period_name = self.unqualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1803
                localctx.name = self.unqualified_name()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1804
                    self.match(TeradataSQLDDLParser.IDENTITY)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1807
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 1808
                localctx.name = self.unqualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 1809
                    self.match(TeradataSQLDDLParser.CONSTRAINT)
                    self.state = 1810
                    localctx.name = self.unqualified_name()


                self.state = 1813
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 1814
                self.match(TeradataSQLDDLParser.KEY)
                self.state = 1815
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1816
                localctx._unqualified_name = self.unqualified_name()
                localctx.fk_column_name.append(localctx._unqualified_name)
                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1817
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1818
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.fk_column_name.append(localctx._unqualified_name)
                    self.state = 1823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1824
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 1825
                self.references()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 1828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 1827
                        self.match(TeradataSQLDDLParser.CONSTRAINT)


                    self.state = 1830
                    localctx.name = self.unqualified_name()


                self.state = 1833
                self.match(TeradataSQLDDLParser.CHECK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1834
                self.match(TeradataSQLDDLParser.INCONSISTENT)
                self.state = 1835
                self.match(TeradataSQLDDLParser.REFERENCES)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1836
                localctx._unqualified_name = self.unqualified_name()
                localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1837
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1838
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                    self.state = 1843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1844
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts

        def MODIFY(self):
            return self.getToken(TeradataSQLDDLParser.MODIFY, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def AMP(self):
            return self.getToken(TeradataSQLDDLParser.AMP, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NOT)
            else:
                return self.getToken(TeradataSQLDDLParser.NOT, i)

        def NAMED(self):
            return self.getToken(TeradataSQLDDLParser.NAMED, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def alter_partitioning(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_partitioningContext,0)


        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_modify_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_primary" ):
                listener.enterModify_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_primary" ):
                listener.exitModify_primary(self)




    def modify_primary(self):

        localctx = TeradataSQLDDLParser.Modify_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modify_primary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.match(TeradataSQLDDLParser.MODIFY)
            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==448:
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1849
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 1852
                self.match(TeradataSQLDDLParser.UNIQUE)


            self.state = 1855
            self.match(TeradataSQLDDLParser.PRIMARY)
            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1856
                self.match(TeradataSQLDDLParser.AMP)


            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 1859
                self.match(TeradataSQLDDLParser.INDEX)


            self.state = 1865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1862
                localctx.index_name = self.unqualified_name()

            elif la_ == 2:
                self.state = 1863
                self.match(TeradataSQLDDLParser.NOT)
                self.state = 1864
                self.match(TeradataSQLDDLParser.NAMED)


            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 1867
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 1868
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1869
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1870
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 1875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1876
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 1881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==125 or _la==272 or _la==840:
                self.state = 1880
                self.alter_partitioning()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_partitioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.save_table_name = None # Table_nameContext

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def add_drop_range_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Add_drop_range_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Add_drop_range_optionContext,i)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def partitioning_level(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Partitioning_levelContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Partitioning_levelContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLDDLParser.PARTITIONED, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_partitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_partitioning" ):
                listener.enterAlter_partitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_partitioning" ):
                listener.exitAlter_partitioning(self)




    def alter_partitioning(self):

        localctx = TeradataSQLDDLParser.Alter_partitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_alter_partitioning)
        self._la = 0 # Token type
        try:
            self.state = 1922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 125, 840]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1907
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [840]:
                    self.state = 1883
                    self.match(TeradataSQLDDLParser.PARTITION)
                    self.state = 1884
                    self.match(TeradataSQLDDLParser.BY)
                    self.state = 1897
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48, 69, 320]:
                        self.state = 1885
                        self.partitioning_level()
                        pass
                    elif token in [1213]:
                        self.state = 1886
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 1887
                        self.partitioning_level()
                        self.state = 1892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 1888
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 1889
                            self.partitioning_level()
                            self.state = 1894
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1895
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [8, 125]:
                    self.state = 1899
                    self.add_drop_range_option()
                    self.state = 1904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1900
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 1901
                        self.add_drop_range_option()
                        self.state = 1906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1909
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 1916
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [198]:
                        self.state = 1910
                        self.match(TeradataSQLDDLParser.INSERT)
                        self.state = 1912
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==206:
                            self.state = 1911
                            self.match(TeradataSQLDDLParser.INTO)


                        self.state = 1914
                        localctx.save_table_name = self.table_name()
                        pass
                    elif token in [115]:
                        self.state = 1915
                        self.match(TeradataSQLDDLParser.DELETE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1920
                self.match(TeradataSQLDDLParser.NOT)
                self.state = 1921
                self.match(TeradataSQLDDLParser.PARTITIONED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_drop_range_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def alter_range_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Alter_range_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_range_exprContext,i)


        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_drop_range_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_drop_range_option" ):
                listener.enterAdd_drop_range_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_drop_range_option" ):
                listener.exitAdd_drop_range_option(self)




    def add_drop_range_option(self):

        localctx = TeradataSQLDDLParser.Add_drop_range_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_add_drop_range_option)
        self._la = 0 # Token type
        try:
            self.state = 1932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1924
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 1925
                self.alter_range_expr()
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 1926
                    self.match(TeradataSQLDDLParser.ADD)
                    self.state = 1927
                    self.alter_range_expr()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1930
                self.match(TeradataSQLDDLParser.ADD)
                self.state = 1931
                self.alter_range_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def column_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_attributeContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_spec" ):
                listener.enterAlter_column_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_spec" ):
                listener.exitAlter_column_spec(self)




    def alter_column_spec(self):

        localctx = TeradataSQLDDLParser.Alter_column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_alter_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            localctx.name = self.unqualified_name()
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1935
                self.data_type()
                pass

            elif la_ == 2:
                self.state = 1936
                self.data_type()
                self.state = 1938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1937
                    self.column_attribute()
                    self.state = 1940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211):
                        break

                pass

            elif la_ == 3:
                self.state = 1943 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1942
                        self.column_attribute()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1945 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 1947
                self.data_type()
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 1948
                    self.column_attribute()
                    self.state = 1953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 1955 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1954
                    self.column_attribute()
                    self.state = 1957 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.RANGE)
            else:
                return self.getToken(TeradataSQLDDLParser.RANGE, i)

        def RANGE_L(self):
            return self.getToken(TeradataSQLDDLParser.RANGE_L, 0)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDDLParser.BETWEEN, 0)

        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Range_expr_3Context,i)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDDLParser.UNKNOWN, 0)

        def WHERE(self):
            return self.getToken(TeradataSQLDDLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def OR(self):
            return self.getToken(TeradataSQLDDLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_range_expr" ):
                listener.enterAlter_range_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_range_expr" ):
                listener.exitAlter_range_expr(self)




    def alter_range_expr(self):

        localctx = TeradataSQLDDLParser.Alter_range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_alter_range_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            _la = self._input.LA(1)
            if not(_la==873 or _la==874):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 1962
                self.match(TeradataSQLDDLParser.BETWEEN)
                self.state = 1963
                self.range_expr_3()
                self.state = 1968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1964
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 1965
                        self.range_expr_3() 
                    self.state = 1970
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 1980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1971
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1972
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 1973
                    self.match(TeradataSQLDDLParser.RANGE)
                    self.state = 1976
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        self.state = 1974
                        _la = self._input.LA(1)
                        if not(_la==290 or _la==1208):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1975
                        self.match(TeradataSQLDDLParser.UNKNOWN)



                elif la_ == 2:
                    self.state = 1978
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 1979
                    self.match(TeradataSQLDDLParser.UNKNOWN)


                pass
            elif token in [268]:
                self.state = 1982
                self.match(TeradataSQLDDLParser.NO)
                self.state = 1983
                self.match(TeradataSQLDDLParser.RANGE)
                self.state = 1986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 1984
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1985
                    self.match(TeradataSQLDDLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.state = 1988
                self.match(TeradataSQLDDLParser.UNKNOWN)
                pass
            elif token in [471]:
                self.state = 1989
                self.match(TeradataSQLDDLParser.WHERE)
                self.state = 1990
                self.logical_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_isolated_loading_alter_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def FAST(self):
            return self.getToken(TeradataSQLDDLParser.FAST, 0)

        def MODE(self):
            return self.getToken(TeradataSQLDDLParser.MODE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLDDLParser.OFF, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_isolated_loading_alter_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_isolated_loading_alter_form" ):
                listener.enterWith_isolated_loading_alter_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_isolated_loading_alter_form" ):
                listener.exitWith_isolated_loading_alter_form(self)




    def with_isolated_loading_alter_form(self):

        localctx = TeradataSQLDDLParser.With_isolated_loading_alter_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_with_isolated_loading_alter_form)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.with_isolated_loading()
            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1994
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 1995
                _la = self._input.LA(1)
                if not(_la==13 or _la==198 or _la==269):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 1998
                self.match(TeradataSQLDDLParser.USING)
                self.state = 1999
                self.match(TeradataSQLDDLParser.FAST)
                self.state = 2000
                self.match(TeradataSQLDDLParser.MODE)
                self.state = 2001
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_index_add_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDDLParser.SYSTEM, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_join_index_add_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_index_add_option" ):
                listener.enterJoin_index_add_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_index_add_option" ):
                listener.exitJoin_index_add_option(self)




    def join_index_add_option(self):

        localctx = TeradataSQLDDLParser.Join_index_add_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_join_index_add_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.match(TeradataSQLDDLParser.ADD)
            self.state = 2025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69, 361, 951]:
                self.state = 2005
                _la = self._input.LA(1)
                if not(_la==69 or _la==361 or _la==951):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2006
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2007
                localctx.name = self.unqualified_name()
                self.state = 2008
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 2010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 2009
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 2012
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 2013
                    self.match(TeradataSQLDDLParser.COMPRESS)


                pass
            elif token in [1213]:
                self.state = 2016
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2017
                localctx.name = self.unqualified_name()
                self.state = 2018
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 2019
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 2022
                self.match(TeradataSQLDDLParser.AUTO)
                self.state = 2023
                self.match(TeradataSQLDDLParser.COMPRESS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_type_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def add_attribute_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Add_attribute_clauseContext,0)


        def add_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Add_method_clauseContext,0)


        def add_specific_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Add_specific_method_clauseContext,0)


        def drop_attribute_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_attribute_clauseContext,0)


        def drop_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_method_clauseContext,0)


        def drop_specific_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_specific_method_clauseContext,0)


        def COMPILE(self):
            return self.getToken(TeradataSQLDDLParser.COMPILE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def ONLY(self):
            return self.getToken(TeradataSQLDDLParser.ONLY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alter_type_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type_stat" ):
                listener.enterAlter_type_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type_stat" ):
                listener.exitAlter_type_stat(self)




    def alter_type_stat(self):

        localctx = TeradataSQLDDLParser.Alter_type_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_alter_type_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.match(TeradataSQLDDLParser.ALTER)
            self.state = 2028
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 2030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 2029
                self.sysudtlib()


            self.state = 2032
            self.udt_name()
            self.state = 2043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 2033
                self.add_attribute_clause()
                pass

            elif la_ == 2:
                self.state = 2034
                self.add_method_clause()
                pass

            elif la_ == 3:
                self.state = 2035
                self.add_specific_method_clause()
                pass

            elif la_ == 4:
                self.state = 2036
                self.drop_attribute_clause()
                pass

            elif la_ == 5:
                self.state = 2037
                self.drop_method_clause()
                pass

            elif la_ == 6:
                self.state = 2038
                self.drop_specific_method_clause()
                pass

            elif la_ == 7:
                self.state = 2039
                self.match(TeradataSQLDDLParser.COMPILE)
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 2040
                    self.match(TeradataSQLDDLParser.ONLY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_attribute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTE, 0)

        def type_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Type_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Type_attribute_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_attribute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_attribute_clause" ):
                listener.enterAdd_attribute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_attribute_clause" ):
                listener.exitAdd_attribute_clause(self)




    def add_attribute_clause(self):

        localctx = TeradataSQLDDLParser.Add_attribute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_add_attribute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.match(TeradataSQLDDLParser.ADD)
            self.state = 2046
            self.match(TeradataSQLDDLParser.ATTRIBUTE)
            self.state = 2047
            self.type_attribute_spec()
            self.state = 2052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2048
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2049
                self.type_attribute_spec()
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def add_method_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Add_method_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Add_method_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INSTANCE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRUCTOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_method_clause" ):
                listener.enterAdd_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_method_clause" ):
                listener.exitAdd_method_clause(self)




    def add_method_clause(self):

        localctx = TeradataSQLDDLParser.Add_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_add_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(TeradataSQLDDLParser.ADD)
            self.state = 2057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 2056
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2059
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 2060
            self.add_method_spec()
            self.state = 2065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2061
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2062
                self.add_method_spec()
                self.state = 2067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_specific_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def add_specific_method_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Add_specific_method_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Add_specific_method_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_specific_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_specific_method_clause" ):
                listener.enterAdd_specific_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_specific_method_clause" ):
                listener.exitAdd_specific_method_clause(self)




    def add_specific_method_clause(self):

        localctx = TeradataSQLDDLParser.Add_specific_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_add_specific_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.match(TeradataSQLDDLParser.ADD)
            self.state = 2069
            self.match(TeradataSQLDDLParser.SPECIFIC)
            self.state = 2070
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 2071
            self.add_specific_method_spec()
            self.state = 2076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2072
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2073
                self.add_specific_method_spec()
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_attribute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTE, 0)

        def attribute_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_attribute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_attribute_clause" ):
                listener.enterDrop_attribute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_attribute_clause" ):
                listener.exitDrop_attribute_clause(self)




    def drop_attribute_clause(self):

        localctx = TeradataSQLDDLParser.Drop_attribute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop_attribute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 2080
            self.match(TeradataSQLDDLParser.ATTRIBUTE)
            self.state = 2081
            self.attribute_name()
            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2082
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2083
                self.attribute_name()
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,i)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INSTANCE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRUCTOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_method_clause" ):
                listener.enterDrop_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_method_clause" ):
                listener.exitDrop_method_clause(self)




    def drop_method_clause(self):

        localctx = TeradataSQLDDLParser.Drop_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_drop_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 2091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 2090
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2093
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 2095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 2094
                self.sysudtlib()


            self.state = 2097
            self.method_name()
            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2098
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 2099
                    self.sysudtlib()


                self.state = 2102
                self.method_name()
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_specific_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,i)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_specific_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_specific_method_clause" ):
                listener.enterDrop_specific_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_specific_method_clause" ):
                listener.exitDrop_specific_method_clause(self)




    def drop_specific_method_clause(self):

        localctx = TeradataSQLDDLParser.Drop_specific_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_drop_specific_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 2109
            self.match(TeradataSQLDDLParser.SPECIFIC)
            self.state = 2110
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 2112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 2111
                self.sysudtlib()


            self.state = 2114
            self.method_name()
            self.state = 2122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2115
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 2116
                    self.sysudtlib()


                self.state = 2119
                self.method_name()
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cast_from_data_type = None # Data_typeContext
            self.specific_method_name = None # Method_nameContext

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def returns_parameter_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Returns_parameter_specContext,0)


        def method_language_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_language_specContext,0)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,i)


        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def method_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_attrContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_method_spec" ):
                listener.enterAdd_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_method_spec" ):
                listener.exitAdd_method_spec(self)




    def add_method_spec(self):

        localctx = TeradataSQLDDLParser.Add_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_add_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 2125
                self.sysudtlib()


            self.state = 2128
            self.method_name()
            self.state = 2129
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 2138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 2130
                self.data_type()
                self.state = 2135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2131
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2132
                    self.data_type()
                    self.state = 2137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2140
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 2141
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 2142
            self.returns_parameter_spec()
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 2143
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 2144
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 2145
                localctx.cast_from_data_type = self.data_type()


            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 2148
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 2150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 2149
                    self.sysudtlib()


                self.state = 2152
                localctx.specific_method_name = self.method_name()


            self.state = 2179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 2155
                    self.method_attr()
                    self.state = 2160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2161
                self.method_language_spec()
                self.state = 2163 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2162
                    self.method_attr()
                    self.state = 2165 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                pass

            elif la_ == 2:
                self.state = 2168 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2167
                    self.method_attr()
                    self.state = 2170 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                self.state = 2172
                self.method_language_spec()
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 2173
                    self.method_attr()
                    self.state = 2178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_specific_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.specific_method_name = None # Method_nameContext

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_add_specific_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_specific_method_spec" ):
                listener.enterAdd_specific_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_specific_method_spec" ):
                listener.exitAdd_specific_method_spec(self)




    def add_specific_method_spec(self):

        localctx = TeradataSQLDDLParser.Add_specific_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_add_specific_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 2181
                self.sysudtlib()


            self.state = 2184
            localctx.specific_method_name = self.method_name()
            self.state = 2196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 2185
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2186
                self.data_type()
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2187
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2188
                    self.data_type()
                    self.state = 2193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2194
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 2198
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 2199
                self.sysudtlib()


            self.state = 2202
            self.udt_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_isolated_loading_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_band = None # Char_string_literalContext

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLDDLParser.LOADING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDDLParser.QUERY_BAND, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def CONCURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CONCURRENT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def SESSION(self):
            return self.getToken(TeradataSQLDDLParser.SESSION, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLDDLParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLDDLParser.MULTIPLE, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_begin_isolated_loading_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_isolated_loading_stat" ):
                listener.enterBegin_isolated_loading_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_isolated_loading_stat" ):
                listener.exitBegin_isolated_loading_stat(self)




    def begin_isolated_loading_stat(self):

        localctx = TeradataSQLDDLParser.Begin_isolated_loading_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_begin_isolated_loading_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self.match(TeradataSQLDDLParser.BEGIN)
            self.state = 2206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 2205
                self.match(TeradataSQLDDLParser.CONCURRENT)


            self.state = 2208
            self.match(TeradataSQLDDLParser.ISOLATED)
            self.state = 2209
            self.match(TeradataSQLDDLParser.LOADING)
            self.state = 2210
            self.match(TeradataSQLDDLParser.ON)
            self.state = 2211
            self.table_name()
            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2212
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2213
                self.table_name()
                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2219
            self.match(TeradataSQLDDLParser.USING)
            self.state = 2220
            self.match(TeradataSQLDDLParser.QUERY_BAND)
            self.state = 2221
            localctx.query_band = self.char_string_literal()
            self.state = 2227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190 or _la==1139 or _la==1140:
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 2222
                    self.match(TeradataSQLDDLParser.IN)


                self.state = 2225
                _la = self._input.LA(1)
                if not(_la==1139 or _la==1140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2226
                self.match(TeradataSQLDDLParser.SESSION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Object_nameContext

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ON)
            else:
                return self.getToken(TeradataSQLDDLParser.ON, i)

        def logging_frequency(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_frequencyContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.OperationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.OperationContext,i)


        def DENIALS(self):
            return self.getToken(TeradataSQLDDLParser.DENIALS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLDDLParser.TEXT, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOR)
            else:
                return self.getToken(TeradataSQLDDLParser.FOR, i)

        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CONSTRAINT)
            else:
                return self.getToken(TeradataSQLDDLParser.CONSTRAINT, i)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def logging_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logging_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_itemContext,i)


        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_begin_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_logging_stat" ):
                listener.enterBegin_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_logging_stat" ):
                listener.exitBegin_logging_stat(self)




    def begin_logging_stat(self):

        localctx = TeradataSQLDDLParser.Begin_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_begin_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(TeradataSQLDDLParser.BEGIN)
            self.state = 2230
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 2232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==628:
                self.state = 2231
                self.match(TeradataSQLDDLParser.DENIALS)


            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2234
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 2235
                self.match(TeradataSQLDDLParser.TEXT)


            self.state = 2238
            self.match(TeradataSQLDDLParser.ON)
            self.state = 2239
            self.logging_frequency()
            self.state = 2243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2240
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 2241
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 2242
                localctx.constraint_name = self.object_name()


            self.state = 2254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 2245
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [14, 60, 86, 102, 115, 125, 127, 144, 172, 192, 198, 235, 297, 310, 325, 346, 358, 359, 370, 406, 435, 441, 442, 443, 453, 456, 468]:
                self.state = 2246
                self.operation()
                self.state = 2251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2247
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2248
                    self.operation()
                    self.state = 2253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2256
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 2257
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 2258
                localctx.constraint_name = self.object_name()


            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 2261
                self.match(TeradataSQLDDLParser.BY)
                self.state = 2262
                self.user_name()
                self.state = 2267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2263
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2264
                    self.user_name()
                    self.state = 2269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 2272
                self.match(TeradataSQLDDLParser.ON)
                self.state = 2273
                self.logging_item()
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2274
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2275
                    self.logging_item()
                    self.state = 2280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.EXTERNAL, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDDLParser.CHECKPOINT, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def DUMP(self):
            return self.getToken(TeradataSQLDDLParser.DUMP, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLDDLParser.REFERENCES, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLDDLParser.RESTORE, 0)

        def ROLLBACK(self):
            return self.getToken(TeradataSQLDDLParser.ROLLBACK, 0)

        def ROLLFORWARD(self):
            return self.getToken(TeradataSQLDDLParser.ROLLFORWARD, 0)

        def UDTMETHOD(self):
            return self.getToken(TeradataSQLDDLParser.UDTMETHOD, 0)

        def UDTTYPE(self):
            return self.getToken(TeradataSQLDDLParser.UDTTYPE, 0)

        def UDTUSAGE(self):
            return self.getToken(TeradataSQLDDLParser.UDTUSAGE, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLDDLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation" ):
                listener.enterOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation" ):
                listener.exitOperation(self)




    def operation(self):

        localctx = TeradataSQLDDLParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_operation)
        try:
            self.state = 2385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2283
                self.match(TeradataSQLDDLParser.ALTER)
                self.state = 2284
                self.match(TeradataSQLDDLParser.EXTERNAL)
                self.state = 2285
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2286
                self.match(TeradataSQLDDLParser.ALTER)
                self.state = 2287
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2288
                self.match(TeradataSQLDDLParser.ALTER)
                self.state = 2289
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2290
                self.match(TeradataSQLDDLParser.CHECKPOINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2291
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2292
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2293
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2294
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2295
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2296
                self.match(TeradataSQLDDLParser.EXTERNAL)
                self.state = 2297
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2298
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2299
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2300
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2301
                self.match(TeradataSQLDDLParser.GLOP)
                self.state = 2302
                self.match(TeradataSQLDDLParser.SET)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2303
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2304
                self.match(TeradataSQLDDLParser.MACRO)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2305
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2306
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2307
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2308
                self.match(TeradataSQLDDLParser.PROFILE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2309
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2310
                self.match(TeradataSQLDDLParser.ROLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2311
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2312
                self.match(TeradataSQLDDLParser.TABLE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2313
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2314
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2315
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2316
                self.match(TeradataSQLDDLParser.USER)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2317
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 2318
                self.match(TeradataSQLDDLParser.VIEW)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2319
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2320
                self.match(TeradataSQLDDLParser.DROP)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2321
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2322
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2323
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2324
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2325
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2326
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2327
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2328
                self.match(TeradataSQLDDLParser.GLOP)
                self.state = 2329
                self.match(TeradataSQLDDLParser.SET)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2330
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2331
                self.match(TeradataSQLDDLParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2332
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2333
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2334
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2335
                self.match(TeradataSQLDDLParser.PROFILE)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2336
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2337
                self.match(TeradataSQLDDLParser.ROLE)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2338
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2339
                self.match(TeradataSQLDDLParser.TABLE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2340
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2341
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2342
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2343
                self.match(TeradataSQLDDLParser.USER)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2344
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 2345
                self.match(TeradataSQLDDLParser.VIEW)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2346
                self.match(TeradataSQLDDLParser.DUMP)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2347
                self.match(TeradataSQLDDLParser.EXECUTE)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2348
                self.match(TeradataSQLDDLParser.EXECUTE)
                self.state = 2349
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2350
                self.match(TeradataSQLDDLParser.EXECUTE)
                self.state = 2351
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2352
                self.match(TeradataSQLDDLParser.GRANT)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2353
                self.match(TeradataSQLDDLParser.INDEX)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2354
                self.match(TeradataSQLDDLParser.MACRO)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2355
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2356
                self.match(TeradataSQLDDLParser.REFERENCES)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2357
                self.match(TeradataSQLDDLParser.RESTORE)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2358
                self.match(TeradataSQLDDLParser.ROLLBACK)
                self.state = 2359
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2360
                self.match(TeradataSQLDDLParser.ROLLFORWARD)
                self.state = 2361
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2362
                self.match(TeradataSQLDDLParser.TABLE)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 2363
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 2364
                self.match(TeradataSQLDDLParser.UDTMETHOD)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 2365
                self.match(TeradataSQLDDLParser.UDTTYPE)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 2366
                self.match(TeradataSQLDDLParser.UDTUSAGE)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 2367
                self.match(TeradataSQLDDLParser.USER)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 2368
                self.match(TeradataSQLDDLParser.VIEW)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 2369
                self.match(TeradataSQLDDLParser.DELETE)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 2370
                self.match(TeradataSQLDDLParser.INSERT)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 2371
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 2372
                self.match(TeradataSQLDDLParser.DELETE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 2373
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 2374
                self.match(TeradataSQLDDLParser.DUMP)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 2375
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 2376
                self.match(TeradataSQLDDLParser.INSERT)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 2377
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 2378
                self.match(TeradataSQLDDLParser.RESTORE)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 2379
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 2380
                self.match(TeradataSQLDDLParser.SELECT)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 2381
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 2382
                self.match(TeradataSQLDDLParser.UPDATE)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 2383
                self.match(TeradataSQLDDLParser.SELECT)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 2384
                self.match(TeradataSQLDDLParser.UPDATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_frequencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(TeradataSQLDDLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDDLParser.LAST, 0)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDDLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_logging_frequency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_frequency" ):
                listener.enterLogging_frequency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_frequency" ):
                listener.exitLogging_frequency(self)




    def logging_frequency(self):

        localctx = TeradataSQLDDLParser.Logging_frequencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_logging_frequency)
        try:
            self.state = 2393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.match(TeradataSQLDDLParser.FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2388
                self.match(TeradataSQLDDLParser.LAST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2389
                self.match(TeradataSQLDDLParser.FIRST)
                self.state = 2390
                self.match(TeradataSQLDDLParser.AND)
                self.state = 2391
                self.match(TeradataSQLDDLParser.LAST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2392
                self.match(TeradataSQLDDLParser.EACH)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.view_name = None # Table_nameContext
            self.function_mapping_name = None # Object_nameContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,0)


        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def MAPPING(self):
            return self.getToken(TeradataSQLDDLParser.MAPPING, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_logging_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_item" ):
                listener.enterLogging_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_item" ):
                listener.exitLogging_item(self)




    def logging_item(self):

        localctx = TeradataSQLDDLParser.Logging_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_logging_item)
        try:
            self.state = 2416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                self.state = 2396
                localctx.authorization_name = self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2397
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 2398
                self.database_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2399
                self.match(TeradataSQLDDLParser.USER)
                self.state = 2400
                self.user_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2401
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 2402
                self.table_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2403
                self.match(TeradataSQLDDLParser.VIEW)
                self.state = 2404
                localctx.view_name = self.table_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2405
                self.match(TeradataSQLDDLParser.MACRO)
                self.state = 2406
                self.macro_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2407
                self.match(TeradataSQLDDLParser.PROCEDURE)
                self.state = 2408
                self.procedure_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2409
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 2410
                self.function_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2411
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 2412
                self.match(TeradataSQLDDLParser.MAPPING)
                self.state = 2413
                localctx.function_mapping_name = self.object_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2414
                self.match(TeradataSQLDDLParser.TYPE)
                self.state = 2415
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_query_capture_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.workload_name = None # Unqualified_nameContext

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLDDLParser.CAPTURE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLDDLParser.WORKLOAD, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDDLParser.ANALYSIS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def VERBOSE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.VERBOSE)
            else:
                return self.getToken(TeradataSQLDDLParser.VERBOSE, i)

        def STATSUSAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.STATSUSAGE)
            else:
                return self.getToken(TeradataSQLDDLParser.STATSUSAGE, i)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def DETAILED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DETAILED)
            else:
                return self.getToken(TeradataSQLDDLParser.DETAILED, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_begin_query_capture_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_query_capture_stat" ):
                listener.enterBegin_query_capture_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_query_capture_stat" ):
                listener.exitBegin_query_capture_stat(self)




    def begin_query_capture_stat(self):

        localctx = TeradataSQLDDLParser.Begin_query_capture_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_begin_query_capture_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.match(TeradataSQLDDLParser.BEGIN)
            self.state = 2419
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 2420
            self.match(TeradataSQLDDLParser.CAPTURE)
            self.state = 2424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2421
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 2422
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 2423
                self.match(TeradataSQLDDLParser.ANALYSIS)


            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2426
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 2432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1022]:
                    self.state = 2427
                    self.match(TeradataSQLDDLParser.VERBOSE)
                    pass
                elif token in [632, 940]:
                    self.state = 2429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==632:
                        self.state = 2428
                        self.match(TeradataSQLDDLParser.DETAILED)


                    self.state = 2431
                    self.match(TeradataSQLDDLParser.STATSUSAGE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2434
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2440
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1022]:
                        self.state = 2435
                        self.match(TeradataSQLDDLParser.VERBOSE)
                        pass
                    elif token in [632, 940]:
                        self.state = 2437
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==632:
                            self.state = 2436
                            self.match(TeradataSQLDDLParser.DETAILED)


                        self.state = 2439
                        self.match(TeradataSQLDDLParser.STATSUSAGE)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 2448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 2446
                self.match(TeradataSQLDDLParser.INTO)
                self.state = 2447
                localctx.qcd_name = self.database_name()


            self.state = 2450
            self.match(TeradataSQLDDLParser.AS)
            self.state = 2451
            self.match(TeradataSQLDDLParser.WORKLOAD)
            self.state = 2452
            localctx.workload_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None # Integer_literalContext

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_itemsContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def query_logging_with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Query_logging_with_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_with_itemContext,i)


        def MODE(self):
            return self.getToken(TeradataSQLDDLParser.MODE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLDDLParser.LIMIT, 0)

        def query_logging_limit_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Query_logging_limit_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_limit_itemContext,i)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_begin_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_query_logging_stat" ):
                listener.enterBegin_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_query_logging_stat" ):
                listener.exitBegin_query_logging_stat(self)




    def begin_query_logging_stat(self):

        localctx = TeradataSQLDDLParser.Begin_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_begin_query_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.match(TeradataSQLDDLParser.BEGIN)
            self.state = 2455
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 2456
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2457
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 2458
                self.query_logging_with_item()
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2459
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2460
                    self.query_logging_with_item()
                    self.state = 2465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 2468
                self.match(TeradataSQLDDLParser.MODE)
                self.state = 2469
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 2470
                localctx.m = self.integer_literal()


            self.state = 2479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 2473
                self.match(TeradataSQLDDLParser.LIMIT)
                self.state = 2474
                self.query_logging_limit_item()
                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 2475
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 2476
                    self.query_logging_limit_item()




            self.state = 2481
            self.match(TeradataSQLDDLParser.ON)
            self.state = 2482
            self.query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_with_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lock_duration = None # Integer_literalContext

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDDLParser.EXPLAIN, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDDLParser.LOCK, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def OBJECTS(self):
            return self.getToken(TeradataSQLDDLParser.OBJECTS, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNS, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLDDLParser.PARAMINFO, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLDDLParser.FEATUREINFO, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLDDLParser.STATSUSAGE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLDDLParser.DETAILED, 0)

        def STEPINFO(self):
            return self.getToken(TeradataSQLDDLParser.STEPINFO, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLDDLParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLDDLParser.UTILITYINFO, 0)

        def XMLPLAN(self):
            return self.getToken(TeradataSQLDDLParser.XMLPLAN, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLDDLParser.VERBOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_logging_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_with_item" ):
                listener.enterQuery_logging_with_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_with_item" ):
                listener.exitQuery_logging_with_item(self)




    def query_logging_with_item(self):

        localctx = TeradataSQLDDLParser.Query_logging_with_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_query_logging_with_item)
        self._la = 0 # Token type
        try:
            self.state = 2509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2484
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2485
                self.match(TeradataSQLDDLParser.EXPLAIN)
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2486
                self.match(TeradataSQLDDLParser.LOCK)
                self.state = 2487
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 2488
                localctx.lock_duration = self.integer_literal()
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2489
                self.match(TeradataSQLDDLParser.NONE)
                pass
            elif token in [268, 280]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 2490
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 2491
                    self.match(TeradataSQLDDLParser.COLUMNS)


                self.state = 2494
                self.match(TeradataSQLDDLParser.OBJECTS)
                pass
            elif token in [838]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2495
                self.match(TeradataSQLDDLParser.PARAMINFO)
                pass
            elif token in [667]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2496
                self.match(TeradataSQLDDLParser.FEATUREINFO)
                pass
            elif token in [386]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2497
                self.match(TeradataSQLDDLParser.SQL)
                pass
            elif token in [632, 940]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==632:
                    self.state = 2498
                    self.match(TeradataSQLDDLParser.DETAILED)


                self.state = 2501
                self.match(TeradataSQLDDLParser.STATSUSAGE)
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2502
                self.match(TeradataSQLDDLParser.STEPINFO)
                pass
            elif token in [1019]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2503
                self.match(TeradataSQLDDLParser.USECOUNT)
                pass
            elif token in [1020]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2504
                self.match(TeradataSQLDDLParser.UTILITYINFO)
                pass
            elif token in [477, 1022]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1022:
                    self.state = 2505
                    self.match(TeradataSQLDDLParser.VERBOSE)


                self.state = 2508
                self.match(TeradataSQLDDLParser.XMLPLAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_limit_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sqltext_n = None # Integer_literalContext
            self.summary_n1 = None # Integer_literalContext
            self.summary_n2 = None # Integer_literalContext
            self.summary_n3 = None # Integer_literalContext
            self.threshold_n = None # Integer_literalContext

        def SQLTEXT(self):
            return self.getToken(TeradataSQLDDLParser.SQLTEXT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def SUMMARY(self):
            return self.getToken(TeradataSQLDDLParser.SUMMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def THRESHOLD(self):
            return self.getToken(TeradataSQLDDLParser.THRESHOLD, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLDDLParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLDDLParser.CPUTIMENORM, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLDDLParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLDDLParser.ELAPSEDTIME, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.IOCOUNT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_logging_limit_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_limit_item" ):
                listener.enterQuery_logging_limit_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_limit_item" ):
                listener.exitQuery_logging_limit_item(self)




    def query_logging_limit_item(self):

        localctx = TeradataSQLDDLParser.Query_logging_limit_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_query_logging_limit_item)
        self._la = 0 # Token type
        try:
            self.state = 2530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [388]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2511
                self.match(TeradataSQLDDLParser.SQLTEXT)

                self.state = 2512
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 2513
                localctx.sqltext_n = self.integer_literal()
                pass
            elif token in [404, 420]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2525
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [404]:
                    self.state = 2514
                    self.match(TeradataSQLDDLParser.SUMMARY)
                    self.state = 2515
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 2516
                    localctx.summary_n1 = self.integer_literal()
                    self.state = 2517
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2518
                    localctx.summary_n2 = self.integer_literal()
                    self.state = 2519
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2520
                    localctx.summary_n3 = self.integer_literal()
                    pass
                elif token in [420]:
                    self.state = 2522
                    self.match(TeradataSQLDDLParser.THRESHOLD)

                    self.state = 2523
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 2524
                    localctx.threshold_n = self.integer_literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & 105553116266499) != 0) or _la==714:
                    self.state = 2527
                    _la = self._input.LA(1)
                    if not(((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & 105553116266499) != 0) or _la==714):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_logging_on_all(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_allContext,0)


        def query_logging_on_users(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_usersContext,0)


        def query_logging_on_application(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_applicationContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_logging_on_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_items" ):
                listener.enterQuery_logging_on_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_items" ):
                listener.exitQuery_logging_on_items(self)




    def query_logging_on_items(self):

        localctx = TeradataSQLDDLParser.Query_logging_on_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_query_logging_on_items)
        try:
            self.state = 2535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2532
                self.query_logging_on_all()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2533
                self.query_logging_on_users()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2534
                self.query_logging_on_application()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_allContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def account_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Account_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_logging_on_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_all" ):
                listener.enterQuery_logging_on_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_all" ):
                listener.exitQuery_logging_on_all(self)




    def query_logging_on_all(self):

        localctx = TeradataSQLDDLParser.Query_logging_on_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_query_logging_on_all)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2537
            self.match(TeradataSQLDDLParser.ALL)
            self.state = 2539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 2538
                self.account_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_usersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def account_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Account_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_logging_on_users

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_users" ):
                listener.enterQuery_logging_on_users(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_users" ):
                listener.exitQuery_logging_on_users(self)




    def query_logging_on_users(self):

        localctx = TeradataSQLDDLParser.Query_logging_on_usersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_query_logging_on_users)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2541
            self.user_name()
            self.state = 2546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2542
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 2543
                self.user_name()
                self.state = 2548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 2549
                self.account_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_applicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.application_name = list() # of Char_string_literalContexts

        def APPLNAME(self):
            return self.getToken(TeradataSQLDDLParser.APPLNAME, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_logging_on_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_application" ):
                listener.enterQuery_logging_on_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_application" ):
                listener.exitQuery_logging_on_application(self)




    def query_logging_on_application(self):

        localctx = TeradataSQLDDLParser.Query_logging_on_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_query_logging_on_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(TeradataSQLDDLParser.APPLNAME)
            self.state = 2553
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 2566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 2554
                localctx._char_string_literal = self.char_string_literal()
                localctx.application_name.append(localctx._char_string_literal)
                pass
            elif token in [1213]:
                self.state = 2555
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2556
                localctx._char_string_literal = self.char_string_literal()
                localctx.application_name.append(localctx._char_string_literal)
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2557
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2558
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.application_name.append(localctx._char_string_literal)
                    self.state = 2563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2564
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_account_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_spec" ):
                listener.enterAccount_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_spec" ):
                listener.exitAccount_spec(self)




    def account_spec(self):

        localctx = TeradataSQLDDLParser.Account_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_account_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2568
            self.match(TeradataSQLDDLParser.ACCOUNT)
            self.state = 2569
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 2582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 2570
                localctx._char_string_literal = self.char_string_literal()
                localctx.account_string.append(localctx._char_string_literal)
                pass
            elif token in [1213]:
                self.state = 2571
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2572
                localctx._char_string_literal = self.char_string_literal()
                localctx.account_string.append(localctx._char_string_literal)
                self.state = 2577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2573
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2574
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 2579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2580
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checkpoint_isolated_loading_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_band = None # Char_string_literalContext

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDDLParser.CHECKPOINT, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLDDLParser.LOADING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDDLParser.QUERY_BAND, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def CONCURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CONCURRENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_checkpoint_isolated_loading_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpoint_isolated_loading_stat" ):
                listener.enterCheckpoint_isolated_loading_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpoint_isolated_loading_stat" ):
                listener.exitCheckpoint_isolated_loading_stat(self)




    def checkpoint_isolated_loading_stat(self):

        localctx = TeradataSQLDDLParser.Checkpoint_isolated_loading_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_checkpoint_isolated_loading_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self.match(TeradataSQLDDLParser.CHECKPOINT)
            self.state = 2586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 2585
                self.match(TeradataSQLDDLParser.CONCURRENT)


            self.state = 2588
            self.match(TeradataSQLDDLParser.ISOLATED)
            self.state = 2589
            self.match(TeradataSQLDDLParser.LOADING)
            self.state = 2590
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 2591
            self.match(TeradataSQLDDLParser.QUERY_BAND)
            self.state = 2592
            localctx.query_band = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_statistics_optimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLECT(self):
            return self.getToken(TeradataSQLDDLParser.COLLECT, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def collection_source(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collection_sourceContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def SUMMARY(self):
            return self.getToken(TeradataSQLDDLParser.SUMMARY, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def using_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Using_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Using_optionContext,i)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def from_stats_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_stats_optionContext,0)


        def stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Stats_target_specContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.AND)
            else:
                return self.getToken(TeradataSQLDDLParser.AND, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_collect_statistics_optimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_statistics_optimizer_form_stat" ):
                listener.enterCollect_statistics_optimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_statistics_optimizer_form_stat" ):
                listener.exitCollect_statistics_optimizer_form_stat(self)




    def collect_statistics_optimizer_form_stat(self):

        localctx = TeradataSQLDDLParser.Collect_statistics_optimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_collect_statistics_optimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self.match(TeradataSQLDDLParser.COLLECT)
            self.state = 2596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==404:
                self.state = 2595
                self.match(TeradataSQLDDLParser.SUMMARY)


            self.state = 2598
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2599
                self.match(TeradataSQLDDLParser.USING)
                self.state = 2600
                self.using_option()
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 2601
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 2602
                    self.using_option()
                    self.state = 2607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 2610
                    self.match(TeradataSQLDDLParser.ON)


                self.state = 2613
                self.collection_source()
                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 2614
                    self.stats_target_spec()
                    self.state = 2619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2615
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 2616
                        self.stats_target_spec()
                        self.state = 2621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.state = 2632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 2624
                    self.stats_target_spec()
                    self.state = 2629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2625
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 2626
                        self.stats_target_spec()
                        self.state = 2631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2634
                self.match(TeradataSQLDDLParser.ON)
                self.state = 2635
                self.collection_source()
                pass


            self.state = 2640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 2638
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 2639
                self.from_stats_option()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Integer_literalContext

        def SAMPLE(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLE, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDDLParser.SYSTEM, 0)

        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLDDLParser.MAXINTERVALS, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLDDLParser.MAXVALUELENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def THRESHOLD(self):
            return self.getToken(TeradataSQLDDLParser.THRESHOLD, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLDDLParser.DAYS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_using_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_option" ):
                listener.enterUsing_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_option" ):
                listener.exitUsing_option(self)




    def using_option(self):

        localctx = TeradataSQLDDLParser.Using_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_using_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 2642
                self.match(TeradataSQLDDLParser.SAMPLE)
                pass

            elif la_ == 2:
                self.state = 2643
                self.match(TeradataSQLDDLParser.SYSTEM)
                self.state = 2644
                self.match(TeradataSQLDDLParser.SAMPLE)
                pass

            elif la_ == 3:
                self.state = 2645
                self.match(TeradataSQLDDLParser.SAMPLE)
                self.state = 2646
                localctx.n = self.integer_literal()
                self.state = 2647
                self.match(TeradataSQLDDLParser.PERCENT)
                pass

            elif la_ == 4:
                self.state = 2649
                self.match(TeradataSQLDDLParser.NO)
                self.state = 2650
                self.match(TeradataSQLDDLParser.SAMPLE)
                pass

            elif la_ == 5:
                self.state = 2657
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [951]:
                    self.state = 2651
                    self.match(TeradataSQLDDLParser.SYSTEM)
                    self.state = 2652
                    self.match(TeradataSQLDDLParser.THRESHOLD)
                    pass
                elif token in [420]:
                    self.state = 2653
                    self.match(TeradataSQLDDLParser.THRESHOLD)
                    self.state = 2654
                    localctx.n = self.integer_literal()
                    pass
                elif token in [268]:
                    self.state = 2655
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 2656
                    self.match(TeradataSQLDDLParser.THRESHOLD)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 2659
                    _la = self._input.LA(1)
                    if not(_la==300 or _la==1077):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                self.state = 2662
                self.match(TeradataSQLDDLParser.MAXINTERVALS)
                self.state = 2663
                localctx.n = self.integer_literal()
                pass

            elif la_ == 7:
                self.state = 2664
                self.match(TeradataSQLDDLParser.SYSTEM)
                self.state = 2665
                self.match(TeradataSQLDDLParser.MAXINTERVALS)
                pass

            elif la_ == 8:
                self.state = 2666
                self.match(TeradataSQLDDLParser.MAXVALUELENGTH)
                self.state = 2667
                localctx.n = self.integer_literal()
                pass

            elif la_ == 9:
                self.state = 2668
                self.match(TeradataSQLDDLParser.SYSTEM)
                self.state = 2669
                self.match(TeradataSQLDDLParser.MAXVALUELENGTH)
                pass


            self.state = 2674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2672
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 2673
                self.match(TeradataSQLDDLParser.CURRENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def stats_index_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Stats_index_specContext,0)


        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def stats_column_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Stats_column_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStats_target_spec" ):
                listener.enterStats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStats_target_spec" ):
                listener.exitStats_target_spec(self)




    def stats_target_spec(self):

        localctx = TeradataSQLDDLParser.Stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 2686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192, 308, 448]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 2676
                    self.match(TeradataSQLDDLParser.UNIQUE)


                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308:
                    self.state = 2679
                    self.match(TeradataSQLDDLParser.PRIMARY)


                self.state = 2682
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 2683
                self.stats_index_spec()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2684
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 2685
                self.stats_column_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stats_index_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Table_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_orderingContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_stats_index_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStats_index_spec" ):
                listener.enterStats_index_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStats_index_spec" ):
                listener.exitStats_index_spec(self)




    def stats_index_spec(self):

        localctx = TeradataSQLDDLParser.Stats_index_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_stats_index_spec)
        self._la = 0 # Token type
        try:
            self.state = 2708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2688
                localctx.index_name = self.table_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2689
                    localctx.index_name = self.table_name()


                self.state = 2693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 2692
                    self.match(TeradataSQLDDLParser.ALL)


                self.state = 2695
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2696
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 2701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2697
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2698
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 2703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2704
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 2706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 2705
                    self.index_ordering()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stats_column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def statistics_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statistics_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLDDLParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_stats_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStats_column_spec" ):
                listener.enterStats_column_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStats_column_spec" ):
                listener.exitStats_column_spec(self)




    def stats_column_spec(self):

        localctx = TeradataSQLDDLParser.Stats_column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_stats_column_spec)
        self._la = 0 # Token type
        try:
            self.state = 2741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2710
                self.scalar_expr(0)
                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2711
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 2714
                    self.statistics_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2717
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 2720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 2718
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2719
                    self.match(TeradataSQLDDLParser.PARTITION)
                    pass


                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2722
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2725
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                    if la_ == 1:
                        self.state = 2723
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 2724
                        self.match(TeradataSQLDDLParser.PARTITION)
                        pass


                    self.state = 2731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2732
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2733
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 2736
                    self.statistics_name()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2739
                self.match(TeradataSQLDDLParser.PARTITION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2740
                self.statistics_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_collection_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_source" ):
                listener.enterCollection_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_source" ):
                listener.exitCollection_source(self)




    def collection_source(self):

        localctx = TeradataSQLDDLParser.Collection_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_collection_source)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 2743
                self.match(TeradataSQLDDLParser.TEMPORARY)


            self.state = 2746
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_stats_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Table_nameContext
            self.from_column_name = None # Unqualified_nameContext
            self.partition_column = None # Token

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def statistics_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statistics_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLDDLParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_from_stats_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stats_option" ):
                listener.enterFrom_stats_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stats_option" ):
                listener.exitFrom_stats_option(self)




    def from_stats_option(self):

        localctx = TeradataSQLDDLParser.From_stats_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_from_stats_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [417]:
                self.state = 2748
                self.match(TeradataSQLDDLParser.TEMPORARY)
                self.state = 2749
                self.table_name()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2750
                localctx.index_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 2753
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 2775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 2756
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        self.state = 2754
                        localctx.from_column_name = self.unqualified_name()
                        pass

                    elif la_ == 2:
                        self.state = 2755
                        localctx.partition_column = self.match(TeradataSQLDDLParser.PARTITION)
                        pass


                    pass

                elif la_ == 2:
                    self.state = 2758
                    self.statistics_name()
                    pass

                elif la_ == 3:
                    self.state = 2759
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 2762
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                    if la_ == 1:
                        self.state = 2760
                        localctx.from_column_name = self.unqualified_name()
                        pass

                    elif la_ == 2:
                        self.state = 2761
                        localctx.partition_column = self.match(TeradataSQLDDLParser.PARTITION)
                        pass


                    self.state = 2771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2764
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 2767
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                        if la_ == 1:
                            self.state = 2765
                            self.unqualified_name()
                            pass

                        elif la_ == 2:
                            self.state = 2766
                            localctx.partition_column = self.match(TeradataSQLDDLParser.PARTITION)
                            pass


                        self.state = 2773
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2774
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_placing_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.comment = None # Char_string_literalContext
            self.unicode_comment = None # Unicode_char_string_literalContext
            self.hexstring_comment = None # Hex_char_string_literalContext

        def COMMENT(self):
            return self.getToken(TeradataSQLDDLParser.COMMENT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hex_char_string_literalContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)

        def object_kind(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_comment_placing_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_placing_stat" ):
                listener.enterComment_placing_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_placing_stat" ):
                listener.exitComment_placing_stat(self)




    def comment_placing_stat(self):

        localctx = TeradataSQLDDLParser.Comment_placing_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_comment_placing_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self.match(TeradataSQLDDLParser.COMMENT)
            self.state = 2781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 2780
                self.match(TeradataSQLDDLParser.ON)


            self.state = 2790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 2784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 2783
                    self.object_kind()


                self.state = 2786
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 2787
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 2788
                self.column_name()
                pass

            elif la_ == 3:
                self.state = 2789
                self.column_name()
                pass


            self.state = 2793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==207:
                self.state = 2792
                _la = self._input.LA(1)
                if not(_la==20 or _la==207):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 2795
                localctx.comment = self.char_string_literal()
                pass

            elif la_ == 2:
                self.state = 2796
                localctx.unicode_comment = self.unicode_char_string_literal()
                pass

            elif la_ == 3:
                self.state = 2797
                localctx.hexstring_comment = self.hex_char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_authorization_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_user_name = None # Char_string_literalContext
            self.authorization_password = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLDDLParser.PASSWORD, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLDDLParser.TRUSTED, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_authorization_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_authorization_stat" ):
                listener.enterCreate_replace_authorization_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_authorization_stat" ):
                listener.exitCreate_replace_authorization_stat(self)




    def create_replace_authorization_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_authorization_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_create_replace_authorization_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2800
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2801
            self.match(TeradataSQLDDLParser.AUTHORIZATION)
            self.state = 2802
            localctx.authorization_name = self.object_name()
            self.state = 2806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2803
                self.match(TeradataSQLDDLParser.AS)
                self.state = 2804
                _la = self._input.LA(1)
                if not(_la==624 or _la==713):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2805
                self.match(TeradataSQLDDLParser.TRUSTED)


            self.state = 2808
            self.match(TeradataSQLDDLParser.USER)
            self.state = 2809
            localctx.authorization_user_name = self.char_string_literal()
            self.state = 2810
            self.match(TeradataSQLDDLParser.PASSWORD)
            self.state = 2811
            localctx.authorization_password = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_replace_sql_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_sql_function_statContext,0)


        def create_replace_table_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_table_function_statContext,0)


        def create_replace_external_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_external_function_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_function_stat" ):
                listener.enterCreate_replace_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_function_stat" ):
                listener.exitCreate_replace_function_stat(self)




    def create_replace_function_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_create_replace_function_stat)
        try:
            self.state = 2816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2813
                self.create_replace_sql_function_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2814
                self.create_replace_table_function_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2815
                self.create_replace_external_function_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_sql_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_data_type = None # Data_typeContext
            self.return_expr = None # Scalar_exprContext

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def COLLATION(self):
            return self.getToken(TeradataSQLDDLParser.COLLATION, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLDDLParser.INLINE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.UNSIGNED_INTEGER, 0)

        def RETURN(self):
            return self.getToken(TeradataSQLDDLParser.RETURN, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def sql_function_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sql_function_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sql_function_parameter_specContext,i)


        def sql_function_language_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sql_function_language_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sql_function_language_specContext,i)


        def sql_function_access_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sql_function_access_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sql_function_access_specContext,i)


        def sql_function_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sql_function_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sql_function_attrContext,i)


        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_sql_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_sql_function_stat" ):
                listener.enterCreate_replace_sql_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_sql_function_stat" ):
                listener.exitCreate_replace_sql_function_stat(self)




    def create_replace_sql_function_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_sql_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_create_replace_sql_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2818
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2819
            self.match(TeradataSQLDDLParser.FUNCTION)
            self.state = 2820
            self.function_name()
            self.state = 2821
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 2830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 2822
                self.sql_function_parameter_spec()
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2823
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2824
                    self.sql_function_parameter_spec()
                    self.state = 2829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2832
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 2833
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 2834
            localctx.return_data_type = self.data_type()
            self.state = 2839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2837
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [214]:
                        self.state = 2835
                        self.sql_function_language_spec()
                        pass
                    elif token in [77]:
                        self.state = 2836
                        self.sql_function_access_spec()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

            self.state = 2845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2842
                    self.sql_function_attr() 
                self.state = 2847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77 or _la==214:
                self.state = 2850
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 2848
                    self.sql_function_language_spec()
                    pass
                elif token in [77]:
                    self.state = 2849
                    self.sql_function_access_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==117 or _la==272 or _la==352 or _la==384 or _la==559:
                self.state = 2855
                self.sql_function_attr()
                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 2861
                self.match(TeradataSQLDDLParser.SQL)
                self.state = 2862
                self.match(TeradataSQLDDLParser.SECURITY)
                self.state = 2863
                self.match(TeradataSQLDDLParser.DEFINER)


            self.state = 2866
            self.match(TeradataSQLDDLParser.COLLATION)
            self.state = 2867
            self.match(TeradataSQLDDLParser.INVOKER)
            self.state = 2868
            self.match(TeradataSQLDDLParser.INLINE)
            self.state = 2869
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 2870
            self.match(TeradataSQLDDLParser.UNSIGNED_INTEGER)
            self.state = 2871
            self.match(TeradataSQLDDLParser.RETURN)
            self.state = 2872
            localctx.return_expr = self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_table_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.glob_set_name = None # Object_nameContext
            self.external_function_name = None # Function_nameContext
            self.code_or_jar_spec = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Function_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_specContext,0)


        def EXTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EXTERNAL)
            else:
                return self.getToken(TeradataSQLDDLParser.EXTERNAL, i)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def table_function_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_function_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_parameter_specContext,i)


        def table_function_language_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_function_language_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_language_specContext,i)


        def no_sql(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.No_sqlContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.No_sqlContext,i)


        def table_function_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_function_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_attrContext,i)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDDLParser.NAME, 0)

        def table_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_parameter_styleContext,0)


        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_specContext,0)


        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_table_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_table_function_stat" ):
                listener.enterCreate_replace_table_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_table_function_stat" ):
                listener.exitCreate_replace_table_function_stat(self)




    def create_replace_table_function_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_table_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_create_replace_table_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2874
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2875
            self.match(TeradataSQLDDLParser.FUNCTION)
            self.state = 2876
            self.function_name()
            self.state = 2877
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 2886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3299071754241) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554417) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 2878
                self.table_function_parameter_spec()
                self.state = 2883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2879
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2880
                    self.table_function_parameter_spec()
                    self.state = 2885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2888
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 2889
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 2890
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 2891
            self.table_spec()
            self.state = 2896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2894
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [214]:
                        self.state = 2892
                        self.table_function_language_spec()
                        pass
                    elif token in [268]:
                        self.state = 2893
                        self.no_sql()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

            self.state = 2902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2899
                    self.table_function_attr() 
                self.state = 2904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

            self.state = 2909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==214 or _la==268:
                self.state = 2907
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 2905
                    self.table_function_language_spec()
                    pass
                elif token in [268]:
                    self.state = 2906
                    self.no_sql()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==117 or _la==272 or _la==298 or _la==384 or _la==559:
                self.state = 2912
                self.table_function_attr()
                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2918
                self.match(TeradataSQLDDLParser.USING)
                self.state = 2921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2919
                    self.match(TeradataSQLDDLParser.GLOP)
                    self.state = 2920
                    self.match(TeradataSQLDDLParser.SET)


                self.state = 2923
                localctx.glob_set_name = self.object_name()


            self.state = 2926
            self.match(TeradataSQLDDLParser.EXTERNAL)
            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==789:
                self.state = 2927
                self.match(TeradataSQLDDLParser.NAME)
                self.state = 2930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 2928
                    localctx.external_function_name = self.function_name()
                    pass

                elif la_ == 2:
                    self.state = 2929
                    localctx.code_or_jar_spec = self.char_string_literal()
                    pass




            self.state = 2935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==298:
                self.state = 2934
                self.table_function_parameter_style()


            self.state = 2946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2937
                self.match(TeradataSQLDDLParser.EXTERNAL)
                self.state = 2938
                self.match(TeradataSQLDDLParser.SECURITY)
                self.state = 2944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [624]:
                    self.state = 2939
                    self.match(TeradataSQLDDLParser.DEFINER)
                    self.state = 2941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 2940
                        localctx.authorization_name = self.object_name()


                    pass
                elif token in [713]:
                    self.state = 2943
                    self.match(TeradataSQLDDLParser.INVOKER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 2948
                self.match(TeradataSQLDDLParser.EXECUTE)
                self.state = 2949
                self.map_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_external_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_data_type = None # External_function_data_typeContext
            self.from_data_type = None # External_function_data_typeContext
            self.glob_set_name = None # Object_nameContext
            self.external_function_name = None # Function_nameContext
            self.code_or_jar_spec = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Function_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def EXTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EXTERNAL)
            else:
                return self.getToken(TeradataSQLDDLParser.EXTERNAL, i)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def external_function_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.External_function_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_data_typeContext,i)


        def external_function_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.External_function_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_parameter_specContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def external_function_language_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.External_function_language_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_language_specContext,i)


        def no_sql(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.No_sqlContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.No_sqlContext,i)


        def external_function_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.External_function_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_attrContext,i)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDDLParser.NAME, 0)

        def external_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_parameter_styleContext,0)


        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_external_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_external_function_stat" ):
                listener.enterCreate_replace_external_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_external_function_stat" ):
                listener.exitCreate_replace_external_function_stat(self)




    def create_replace_external_function_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_external_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_create_replace_external_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2953
            self.match(TeradataSQLDDLParser.FUNCTION)
            self.state = 2954
            self.function_name()
            self.state = 2955
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 2964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3299071754241) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554417) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 2956
                self.external_function_parameter_spec()
                self.state = 2961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2957
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 2958
                    self.external_function_parameter_spec()
                    self.state = 2963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2966
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 2967
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 2968
            localctx.return_data_type = self.external_function_data_type()
            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 2969
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 2970
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 2971
                localctx.from_data_type = self.external_function_data_type()


            self.state = 2978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2976
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [214]:
                        self.state = 2974
                        self.external_function_language_spec()
                        pass
                    elif token in [268]:
                        self.state = 2975
                        self.no_sql()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

            self.state = 2984
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2981
                    self.external_function_attr() 
                self.state = 2986
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

            self.state = 2991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==214 or _la==268:
                self.state = 2989
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 2987
                    self.external_function_language_spec()
                    pass
                elif token in [268]:
                    self.state = 2988
                    self.no_sql()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61 or _la==117 or _la==159 or _la==272 or _la==298 or _la==352 or _la==384 or _la==559:
                self.state = 2994
                self.external_function_attr()
                self.state = 2999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 3000
                self.match(TeradataSQLDDLParser.USING)
                self.state = 3001
                self.match(TeradataSQLDDLParser.GLOP)
                self.state = 3002
                self.match(TeradataSQLDDLParser.SET)
                self.state = 3003
                localctx.glob_set_name = self.object_name()


            self.state = 3006
            self.match(TeradataSQLDDLParser.EXTERNAL)
            self.state = 3012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==789:
                self.state = 3007
                self.match(TeradataSQLDDLParser.NAME)
                self.state = 3010
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 3008
                    localctx.external_function_name = self.function_name()
                    pass

                elif la_ == 2:
                    self.state = 3009
                    localctx.code_or_jar_spec = self.char_string_literal()
                    pass




            self.state = 3015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==298:
                self.state = 3014
                self.external_function_parameter_style()


            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 3017
                self.match(TeradataSQLDDLParser.EXTERNAL)
                self.state = 3018
                self.match(TeradataSQLDDLParser.SECURITY)
                self.state = 3024
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [624]:
                    self.state = 3019
                    self.match(TeradataSQLDDLParser.DEFINER)
                    self.state = 3021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 3020
                        localctx.authorization_name = self.object_name()


                    pass
                elif token in [713]:
                    self.state = 3023
                    self.match(TeradataSQLDDLParser.INVOKER)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def variable_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_data_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sql_function_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_parameter_spec" ):
                listener.enterSql_function_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_parameter_spec" ):
                listener.exitSql_function_parameter_spec(self)




    def sql_function_parameter_spec(self):

        localctx = TeradataSQLDDLParser.Sql_function_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_sql_function_parameter_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3028
            self.parameter_name()
            self.state = 3029
            self.variable_data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLDDLParser.LANGUAGE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sql_function_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_language_spec" ):
                listener.enterSql_function_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_language_spec" ):
                listener.exitSql_function_language_spec(self)




    def sql_function_language_spec(self):

        localctx = TeradataSQLDDLParser.Sql_function_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_sql_function_language_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3031
            self.match(TeradataSQLDDLParser.LANGUAGE)
            self.state = 3032
            self.match(TeradataSQLDDLParser.SQL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_access_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(TeradataSQLDDLParser.CONTAINS, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sql_function_access_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_access_spec" ):
                listener.enterSql_function_access_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_access_spec" ):
                listener.exitSql_function_access_spec(self)




    def sql_function_access_spec(self):

        localctx = TeradataSQLDDLParser.Sql_function_access_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_sql_function_access_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3034
            self.match(TeradataSQLDDLParser.CONTAINS)
            self.state = 3035
            self.match(TeradataSQLDDLParser.SQL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLDDLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDDLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NULL)
            else:
                return self.getToken(TeradataSQLDDLParser.NULL, i)

        def INPUT(self):
            return self.getToken(TeradataSQLDDLParser.INPUT, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sql_function_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_attr" ):
                listener.enterSql_function_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_attr" ):
                listener.exitSql_function_attr(self)




    def sql_function_attr(self):

        localctx = TeradataSQLDDLParser.Sql_function_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_sql_function_attr)
        self._la = 0 # Token type
        try:
            self.state = 3052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3037
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 3038
                self.function_name()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3039
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 3042
                self.match(TeradataSQLDDLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3043
                self.match(TeradataSQLDDLParser.CALLED)
                self.state = 3044
                self.match(TeradataSQLDDLParser.ON)
                self.state = 3045
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3046
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3047
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 3048
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3049
                self.match(TeradataSQLDDLParser.ON)
                self.state = 3050
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3051
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.maximum_output_columns = None # Token

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def VARYING(self):
            return self.getToken(TeradataSQLDDLParser.VARYING, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNS, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.UNSIGNED_INTEGER, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = TeradataSQLDDLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 3077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3054
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 3055
                self.column_spec()
                self.state = 3060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3056
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3057
                    self.column_spec()
                    self.state = 3062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3063
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [467]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3065
                self.match(TeradataSQLDDLParser.VARYING)
                self.state = 3075
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [579]:
                    self.state = 3066
                    self.match(TeradataSQLDDLParser.COLUMNS)
                    self.state = 3067
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 3068
                    localctx.maximum_output_columns = self.match(TeradataSQLDDLParser.UNSIGNED_INTEGER)
                    self.state = 3069
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                elif token in [457]:
                    self.state = 3070
                    self.match(TeradataSQLDDLParser.USING)
                    self.state = 3071
                    self.match(TeradataSQLDDLParser.FUNCTION)
                    self.state = 3073
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                    if la_ == 1:
                        self.state = 3072
                        self.function_name()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def external_function_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_parameter_spec" ):
                listener.enterTable_function_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_parameter_spec" ):
                listener.exitTable_function_parameter_spec(self)




    def table_function_parameter_spec(self):

        localctx = TeradataSQLDDLParser.Table_function_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_table_function_parameter_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 3079
                self.parameter_name()


            self.state = 3082
            self.external_function_data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLDDLParser.LANGUAGE, 0)

        def C(self):
            return self.getToken(TeradataSQLDDLParser.C, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDDLParser.CPP, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDDLParser.JAVA, 0)

        def SAS(self):
            return self.getToken(TeradataSQLDDLParser.SAS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_language_spec" ):
                listener.enterTable_function_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_language_spec" ):
                listener.exitTable_function_language_spec(self)




    def table_function_language_spec(self):

        localctx = TeradataSQLDDLParser.Table_function_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_function_language_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3084
            self.match(TeradataSQLDDLParser.LANGUAGE)
            self.state = 3085
            _la = self._input.LA(1)
            if not(_la==557 or _la==598 or _la==718 or _la==1085):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLDDLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDDLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def INPUT(self):
            return self.getToken(TeradataSQLDDLParser.INPUT, 0)

        def table_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_parameter_styleContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_attr" ):
                listener.enterTable_function_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_attr" ):
                listener.exitTable_function_attr(self)




    def table_function_attr(self):

        localctx = TeradataSQLDDLParser.Table_function_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_function_attr)
        self._la = 0 # Token type
        try:
            self.state = 3098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3087
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 3088
                self.function_name()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3089
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 3092
                self.match(TeradataSQLDDLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3093
                self.match(TeradataSQLDDLParser.CALLED)
                self.state = 3094
                self.match(TeradataSQLDDLParser.ON)
                self.state = 3095
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3096
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3097
                self.table_function_parameter_style()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_parameter_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETER(self):
            return self.getToken(TeradataSQLDDLParser.PARAMETER, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDDLParser.STYLE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDDLParser.JAVA, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLDDLParser.SQLTABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_parameter_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_parameter_style" ):
                listener.enterTable_function_parameter_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_parameter_style" ):
                listener.exitTable_function_parameter_style(self)




    def table_function_parameter_style(self):

        localctx = TeradataSQLDDLParser.Table_function_parameter_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_function_parameter_style)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3100
            self.match(TeradataSQLDDLParser.PARAMETER)
            self.state = 3101
            self.match(TeradataSQLDDLParser.STYLE)
            self.state = 3102
            _la = self._input.LA(1)
            if not(_la==386 or _la==718 or _la==1086):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def external_function_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_external_function_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_parameter_spec" ):
                listener.enterExternal_function_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_parameter_spec" ):
                listener.exitExternal_function_parameter_spec(self)




    def external_function_parameter_spec(self):

        localctx = TeradataSQLDDLParser.External_function_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_external_function_parameter_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 3104
                self.parameter_name()


            self.state = 3107
            self.external_function_data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLDDLParser.LANGUAGE, 0)

        def C(self):
            return self.getToken(TeradataSQLDDLParser.C, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDDLParser.CPP, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDDLParser.JAVA, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_external_function_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_language_spec" ):
                listener.enterExternal_function_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_language_spec" ):
                listener.exitExternal_function_language_spec(self)




    def external_function_language_spec(self):

        localctx = TeradataSQLDDLParser.External_function_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_external_function_language_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            self.match(TeradataSQLDDLParser.LANGUAGE)
            self.state = 3110
            _la = self._input.LA(1)
            if not(_la==557 or _la==598 or _la==718):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.interim_size = None # Token

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def CLASS(self):
            return self.getToken(TeradataSQLDDLParser.CLASS, 0)

        def AGGREGATE(self):
            return self.getToken(TeradataSQLDDLParser.AGGREGATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLDDLParser.AG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.UNSIGNED_INTEGER, 0)

        def external_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.External_function_parameter_styleContext,0)


        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLDDLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDDLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NULL)
            else:
                return self.getToken(TeradataSQLDDLParser.NULL, i)

        def INPUT(self):
            return self.getToken(TeradataSQLDDLParser.INPUT, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.DECOMPRESS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_external_function_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_attr" ):
                listener.enterExternal_function_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_attr" ):
                listener.exitExternal_function_attr(self)




    def external_function_attr(self):

        localctx = TeradataSQLDDLParser.External_function_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_external_function_attr)
        self._la = 0 # Token type
        try:
            self.state = 3137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3112
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 3113
                self.function_name()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3114
                self.match(TeradataSQLDDLParser.CLASS)
                self.state = 3115
                _la = self._input.LA(1)
                if not(_la==12 or _la==493):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 3116
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 3117
                    localctx.interim_size = self.match(TeradataSQLDDLParser.UNSIGNED_INTEGER)
                    self.state = 3118
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3121
                self.external_function_parameter_style()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3122
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 3125
                self.match(TeradataSQLDDLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3126
                self.match(TeradataSQLDDLParser.CALLED)
                self.state = 3127
                self.match(TeradataSQLDDLParser.ON)
                self.state = 3128
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3129
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3130
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 3131
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3132
                self.match(TeradataSQLDDLParser.ON)
                self.state = 3133
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 3134
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3135
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 3136
                _la = self._input.LA(1)
                if not(_la==72 or _la==623):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_parameter_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETER(self):
            return self.getToken(TeradataSQLDDLParser.PARAMETER, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDDLParser.STYLE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDDLParser.JAVA, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLDDLParser.TD_GENERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_external_function_parameter_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_parameter_style" ):
                listener.enterExternal_function_parameter_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_parameter_style" ):
                listener.exitExternal_function_parameter_style(self)




    def external_function_parameter_style(self):

        localctx = TeradataSQLDDLParser.External_function_parameter_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_external_function_parameter_style)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3139
            self.match(TeradataSQLDDLParser.PARAMETER)
            self.state = 3140
            self.match(TeradataSQLDDLParser.STYLE)
            self.state = 3141
            _la = self._input.LA(1)
            if not(_la==386 or _la==718 or _la==961):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_no_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_sql" ):
                listener.enterNo_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_sql" ):
                listener.exitNo_sql(self)




    def no_sql(self):

        localctx = TeradataSQLDDLParser.No_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_no_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3143
            self.match(TeradataSQLDDLParser.NO)
            self.state = 3144
            self.match(TeradataSQLDDLParser.SQL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_macro_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def CM(self):
            return self.getToken(TeradataSQLDDLParser.CM, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def macro_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Macro_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_parameterContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.SEMICOLON)
            else:
                return self.getToken(TeradataSQLDDLParser.SEMICOLON, i)

        def dml_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Dml_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Dml_statContext,i)


        def ddl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ddl_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ddl_statContext,i)


        def dcl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Dcl_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Dcl_statContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def using_request_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Using_request_modifierContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Using_request_modifierContext,i)


        def locking_request_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Locking_request_modifierContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_macro_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_macro_stat" ):
                listener.enterCreate_replace_macro_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_macro_stat" ):
                listener.exitCreate_replace_macro_stat(self)




    def create_replace_macro_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_macro_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_create_replace_macro_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 3146
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 3147
                self.match(TeradataSQLDDLParser.MACRO)
                pass
            elif token in [65]:
                self.state = 3148
                self.match(TeradataSQLDDLParser.CM)
                pass
            elif token in [340]:
                self.state = 3149
                self.match(TeradataSQLDDLParser.REPLACE)
                self.state = 3150
                self.match(TeradataSQLDDLParser.MACRO)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3153
            self.macro_name()
            self.state = 3165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 3154
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 3155
                self.macro_parameter()
                self.state = 3160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3156
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3157
                    self.macro_parameter()
                    self.state = 3162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3163
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 3167
            self.match(TeradataSQLDDLParser.AS)
            self.state = 3168
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 3182 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 3169
                    self.using_request_modifier()


                self.state = 3173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 3172
                    self.locking_request_modifier()


                self.state = 3178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 3175
                    self.dml_stat()
                    pass

                elif la_ == 2:
                    self.state = 3176
                    self.ddl_stat()
                    pass

                elif la_ == 3:
                    self.state = 3177
                    self.dcl_stat()
                    pass


                self.state = 3180
                self.match(TeradataSQLDDLParser.SEMICOLON)
                self.state = 3184 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1155244789856223234) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3457075492125933463) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9205351041006016495) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & 144150378353524739) != 0) or _la==270 or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 9007497756082309) != 0) or ((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & 4194339) != 0) or _la==703 or _la==938 or _la==1206 or _la==1213):
                    break

            self.state = 3186
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_type_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_macro_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter" ):
                listener.enterMacro_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter" ):
                listener.exitMacro_parameter(self)




    def macro_parameter(self):

        localctx = TeradataSQLDDLParser.Macro_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_macro_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self.parameter_name()
            self.state = 3201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 37, 38, 43, 44, 52, 55, 62, 104, 108, 109, 124, 157, 173, 201, 202, 205, 231, 277, 278, 323, 381, 421, 422, 463, 464, 465, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 3189
                self.data_type()
                pass
            elif token in [1213]:
                self.state = 3190
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 3191
                self.data_type()
                self.state = 3196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3192
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3193
                    self.data_type_attribute()
                    self.state = 3198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3199
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 3203
                self.data_type_attribute()
                self.state = 3208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_replace_procedure_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_procedure_sql_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_procedure_stat" ):
                listener.enterCreate_replace_procedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_procedure_stat" ):
                listener.exitCreate_replace_procedure_stat(self)




    def create_replace_procedure_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_create_replace_procedure_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.create_replace_procedure_sql_form_stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_procedure_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def procedure_body(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_bodyContext,0)


        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_specContext,i)


        def sql_data_access_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sql_data_access_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sql_data_access_optionContext,i)


        def dynamic_result_sets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Dynamic_result_setsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Dynamic_result_setsContext,i)


        def sql_security_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sql_security_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sql_security_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_procedure_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_procedure_sql_form_stat" ):
                listener.enterCreate_replace_procedure_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_procedure_sql_form_stat" ):
                listener.exitCreate_replace_procedure_sql_form_stat(self)




    def create_replace_procedure_sql_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_procedure_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_create_replace_procedure_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3211
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3212
            self.match(TeradataSQLDDLParser.PROCEDURE)
            self.state = 3213
            self.procedure_name()
            self.state = 3214
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 3223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190 or _la==195 or _la==293 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3215
                self.parameter_spec()
                self.state = 3220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3216
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3217
                    self.parameter_spec()
                    self.state = 3222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3225
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 3231
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3229
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [77, 253, 322]:
                        self.state = 3226
                        self.sql_data_access_option()
                        pass
                    elif token in [128]:
                        self.state = 3227
                        self.dynamic_result_sets()
                        pass
                    elif token in [386]:
                        self.state = 3228
                        self.sql_security_option()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 3233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

            self.state = 3234
            self.procedure_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def variable_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_type_attributeContext,i)


        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def OUT(self):
            return self.getToken(TeradataSQLDDLParser.OUT, 0)

        def INOUT(self):
            return self.getToken(TeradataSQLDDLParser.INOUT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)




    def parameter_spec(self):

        localctx = TeradataSQLDDLParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190 or _la==195 or _la==293:
                self.state = 3236
                _la = self._input.LA(1)
                if not(_la==190 or _la==195 or _la==293):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3239
            self.parameter_name()
            self.state = 3240
            self.variable_data_type()
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 3241
                self.data_type_attribute()
                self.state = 3246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_data_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(TeradataSQLDDLParser.CONTAINS, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def MODIFIES(self):
            return self.getToken(TeradataSQLDDLParser.MODIFIES, 0)

        def DATA(self):
            return self.getToken(TeradataSQLDDLParser.DATA, 0)

        def READS(self):
            return self.getToken(TeradataSQLDDLParser.READS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sql_data_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_data_access_option" ):
                listener.enterSql_data_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_data_access_option" ):
                listener.exitSql_data_access_option(self)




    def sql_data_access_option(self):

        localctx = TeradataSQLDDLParser.Sql_data_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sql_data_access_option)
        try:
            self.state = 3255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3247
                self.match(TeradataSQLDDLParser.CONTAINS)
                self.state = 3248
                self.match(TeradataSQLDDLParser.SQL)
                pass
            elif token in [253]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3249
                self.match(TeradataSQLDDLParser.MODIFIES)
                self.state = 3250
                self.match(TeradataSQLDDLParser.SQL)
                self.state = 3251
                self.match(TeradataSQLDDLParser.DATA)
                pass
            elif token in [322]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3252
                self.match(TeradataSQLDDLParser.READS)
                self.state = 3253
                self.match(TeradataSQLDDLParser.SQL)
                self.state = 3254
                self.match(TeradataSQLDDLParser.DATA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_result_setsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_of_sets = None # Integer_literalContext

        def DYNAMIC(self):
            return self.getToken(TeradataSQLDDLParser.DYNAMIC, 0)

        def RESULT(self):
            return self.getToken(TeradataSQLDDLParser.RESULT, 0)

        def SETS(self):
            return self.getToken(TeradataSQLDDLParser.SETS, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_dynamic_result_sets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_result_sets" ):
                listener.enterDynamic_result_sets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_result_sets" ):
                listener.exitDynamic_result_sets(self)




    def dynamic_result_sets(self):

        localctx = TeradataSQLDDLParser.Dynamic_result_setsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dynamic_result_sets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3257
            self.match(TeradataSQLDDLParser.DYNAMIC)
            self.state = 3258
            self.match(TeradataSQLDDLParser.RESULT)
            self.state = 3259
            self.match(TeradataSQLDDLParser.SETS)
            self.state = 3260
            localctx.number_of_sets = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_security_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLDDLParser.CREATOR, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDDLParser.OWNER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sql_security_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_security_option" ):
                listener.enterSql_security_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_security_option" ):
                listener.exitSql_security_option(self)




    def sql_security_option(self):

        localctx = TeradataSQLDDLParser.Sql_security_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sql_security_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.match(TeradataSQLDDLParser.SQL)
            self.state = 3263
            self.match(TeradataSQLDDLParser.SECURITY)
            self.state = 3264
            _la = self._input.LA(1)
            if not(_la==602 or _la==624 or _la==713 or _la==834):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure_data_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_data_statContext,0)


        def compound_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Compound_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_body" ):
                listener.enterProcedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_body" ):
                listener.exitProcedure_body(self)




    def procedure_body(self):

        localctx = TeradataSQLDDLParser.Procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_procedure_body)
        try:
            self.state = 3268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3266
                self.procedure_data_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3267
                self.compound_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(TeradataSQLDDLParser.SEMICOLON, 0)

        def procedure_data_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_data_statContext,0)


        def compound_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Compound_statContext,0)


        def procedure_cursor_control_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_cursor_control_statContext,0)


        def assignment_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Assignment_statContext,0)


        def condition_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_statContext,0)


        def iteration_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Iteration_statContext,0)


        def diagnostic_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Diagnostic_statContext,0)


        def print_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Print_statContext,0)


        def ITERATE(self):
            return self.getToken(TeradataSQLDDLParser.ITERATE, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Label_nameContext,i)


        def LEAVE(self):
            return self.getToken(TeradataSQLDDLParser.LEAVE, 0)

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def REQUEST(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.REQUEST)
            else:
                return self.getToken(TeradataSQLDDLParser.REQUEST, i)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def COLON(self):
            return self.getToken(TeradataSQLDDLParser.COLON, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_stat" ):
                listener.enterProcedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_stat" ):
                listener.exitProcedure_stat(self)




    def procedure_stat(self):

        localctx = TeradataSQLDDLParser.Procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_procedure_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 3270
                self.procedure_data_stat()
                pass

            elif la_ == 2:
                self.state = 3271
                self.compound_stat()
                pass

            elif la_ == 3:
                self.state = 3272
                self.procedure_cursor_control_stat()
                pass

            elif la_ == 4:
                self.state = 3273
                self.assignment_stat()
                pass

            elif la_ == 5:
                self.state = 3274
                self.condition_stat()
                pass

            elif la_ == 6:
                self.state = 3278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3275
                    self.label_name()
                    self.state = 3276
                    self.match(TeradataSQLDDLParser.COLON)


                self.state = 3280
                self.iteration_stat()
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3281
                    self.label_name()


                pass

            elif la_ == 7:
                self.state = 3284
                self.diagnostic_stat()
                pass

            elif la_ == 8:
                self.state = 3285
                self.print_stat()
                pass

            elif la_ == 9:
                self.state = 3286
                self.match(TeradataSQLDDLParser.ITERATE)
                self.state = 3287
                self.label_name()
                pass

            elif la_ == 10:
                self.state = 3288
                self.match(TeradataSQLDDLParser.LEAVE)
                self.state = 3289
                self.label_name()
                pass

            elif la_ == 11:
                self.state = 3290
                self.match(TeradataSQLDDLParser.BEGIN)
                self.state = 3291
                self.match(TeradataSQLDDLParser.REQUEST)
                self.state = 3293 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3292
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3295 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

                self.state = 3297
                self.match(TeradataSQLDDLParser.END)
                self.state = 3298
                self.match(TeradataSQLDDLParser.REQUEST)
                pass


            self.state = 3302
            self.match(TeradataSQLDDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_data_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure_dml_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_dml_statContext,0)


        def procedure_ddl_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_ddl_statContext,0)


        def procedure_dcl_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_dcl_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_data_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_data_stat" ):
                listener.enterProcedure_data_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_data_stat" ):
                listener.exitProcedure_data_stat(self)




    def procedure_data_stat(self):

        localctx = TeradataSQLDDLParser.Procedure_data_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_procedure_data_stat)
        try:
            self.state = 3307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3304
                self.procedure_dml_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3305
                self.procedure_ddl_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3306
                self.procedure_dcl_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_dml_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abort_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Abort_statContext,0)


        def begin_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_transaction_statContext,0)


        def end_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_transaction_statContext,0)


        def call_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Call_statContext,0)


        def collect_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collect_statistics_qcd_form_statContext,0)


        def commit_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Commit_statContext,0)


        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_statContext,0)


        def drop_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_statistics_qcd_form_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Insert_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Merge_statContext,0)


        def rollback_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rollback_statContext,0)


        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Select_statContext,0)


        def select_and_consume_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Select_and_consume_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Update_statContext,0)


        def locking_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_dml_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_dml_stat" ):
                listener.enterProcedure_dml_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_dml_stat" ):
                listener.exitProcedure_dml_stat(self)




    def procedure_dml_stat(self):

        localctx = TeradataSQLDDLParser.Procedure_dml_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_procedure_dml_stat)
        try:
            self.state = 3324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3309
                self.abort_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3310
                self.begin_transaction_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3311
                self.end_transaction_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3312
                self.call_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3313
                self.collect_statistics_qcd_form_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3314
                self.commit_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3315
                self.delete_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3316
                self.drop_statistics_qcd_form_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3317
                self.insert_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3318
                self.merge_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3319
                self.rollback_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3320
                self.select_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3321
                self.select_and_consume_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3322
                self.update_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3323
                self.locking_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_ddl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_function_statContext,0)


        def alter_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alter_table_statContext,0)


        def begin_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_logging_statContext,0)


        def collect_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collect_statistics_optimizer_form_statContext,0)


        def comment_placing_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comment_placing_statContext,0)


        def create_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_database_statContext,0)


        def create_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_error_table_statContext,0)


        def create_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_index_statContext,0)


        def create_foreign_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_foreign_table_statContext,0)


        def create_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_join_index_statContext,0)


        def create_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_hash_index_statContext,0)


        def create_replace_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_macro_statContext,0)


        def create_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_profile_statContext,0)


        def create_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_role_statContext,0)


        def create_table_as_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_table_as_statContext,0)


        def create_table_primary_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_table_primary_form_statContext,0)


        def create_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_user_statContext,0)


        def create_replace_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_replace_view_statContext,0)


        def delete_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_database_statContext,0)


        def delete_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_user_statContext,0)


        def drop_cast_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_cast_statContext,0)


        def drop_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_database_statContext,0)


        def drop_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_error_table_statContext,0)


        def drop_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_index_statContext,0)


        def drop_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_join_index_statContext,0)


        def drop_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_hash_index_statContext,0)


        def drop_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_macro_statContext,0)


        def drop_ordering_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_ordering_statContext,0)


        def drop_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_procedure_statContext,0)


        def drop_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_profile_statContext,0)


        def drop_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_role_statContext,0)


        def drop_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_statistics_optimizer_form_statContext,0)


        def drop_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_table_statContext,0)


        def drop_transform_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_transform_statContext,0)


        def drop_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_trigger_statContext,0)


        def drop_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_user_statContext,0)


        def drop_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_view_statContext,0)


        def end_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_logging_statContext,0)


        def modify_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_database_statContext,0)


        def modify_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_profile_statContext,0)


        def modify_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_user_statContext,0)


        def rename_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_macro_statContext,0)


        def rename_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_procedure_statContext,0)


        def rename_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_table_statContext,0)


        def rename_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_trigger_statContext,0)


        def rename_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rename_view_statContext,0)


        def set_query_band_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Set_query_band_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_ddl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_ddl_stat" ):
                listener.enterProcedure_ddl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_ddl_stat" ):
                listener.exitProcedure_ddl_stat(self)




    def procedure_ddl_stat(self):

        localctx = TeradataSQLDDLParser.Procedure_ddl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_procedure_ddl_stat)
        try:
            self.state = 3373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3326
                self.alter_function_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3327
                self.alter_table_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3328
                self.begin_logging_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3329
                self.collect_statistics_optimizer_form_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3330
                self.comment_placing_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3331
                self.create_database_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3332
                self.create_error_table_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3333
                self.create_index_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3334
                self.create_foreign_table_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3335
                self.create_join_index_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3336
                self.create_hash_index_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3337
                self.create_replace_macro_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3338
                self.create_profile_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3339
                self.create_role_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3340
                self.create_table_as_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3341
                self.create_table_primary_form_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3342
                self.create_user_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3343
                self.create_replace_view_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3344
                self.delete_database_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3345
                self.delete_user_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3346
                self.drop_cast_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3347
                self.drop_database_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 3348
                self.drop_error_table_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 3349
                self.drop_index_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 3350
                self.drop_join_index_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 3351
                self.drop_hash_index_stat()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 3352
                self.drop_macro_stat()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 3353
                self.drop_ordering_stat()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 3354
                self.drop_procedure_stat()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 3355
                self.drop_profile_stat()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 3356
                self.drop_role_stat()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 3357
                self.drop_statistics_optimizer_form_stat()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 3358
                self.drop_table_stat()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 3359
                self.drop_transform_stat()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 3360
                self.drop_trigger_stat()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 3361
                self.drop_user_stat()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 3362
                self.drop_view_stat()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 3363
                self.end_logging_stat()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 3364
                self.modify_database_stat()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 3365
                self.modify_profile_stat()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 3366
                self.modify_user_stat()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 3367
                self.rename_macro_stat()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 3368
                self.rename_procedure_stat()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 3369
                self.rename_table_stat()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 3370
                self.rename_trigger_stat()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 3371
                self.rename_view_stat()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 3372
                self.set_query_band_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_dcl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def give_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Give_statContext,0)


        def grant_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_statContext,0)


        def revoke_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_dcl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_dcl_stat" ):
                listener.enterProcedure_dcl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_dcl_stat" ):
                listener.exitProcedure_dcl_stat(self)




    def procedure_dcl_stat(self):

        localctx = TeradataSQLDDLParser.Procedure_dcl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_procedure_dcl_stat)
        try:
            self.state = 3378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3375
                self.give_stat()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3376
                self.grant_stat()
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3377
                self.revoke_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Label_nameContext,i)


        def COLON(self):
            return self.getToken(TeradataSQLDDLParser.COLON, 0)

        def local_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Local_declarationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Local_declarationContext,i)


        def cursor_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Cursor_declarationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_declarationContext,i)


        def condition_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Condition_handlerContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_handlerContext,i)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_compound_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stat" ):
                listener.enterCompound_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stat" ):
                listener.exitCompound_stat(self)




    def compound_stat(self):

        localctx = TeradataSQLDDLParser.Compound_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_compound_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3380
                self.label_name()
                self.state = 3381
                self.match(TeradataSQLDDLParser.COLON)


            self.state = 3385
            self.match(TeradataSQLDDLParser.BEGIN)
            self.state = 3389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3386
                    self.local_declaration() 
                self.state = 3391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

            self.state = 3395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3392
                    self.cursor_declaration() 
                self.state = 3397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==110:
                self.state = 3398
                self.condition_handler()
                self.state = 3403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3404
                    self.procedure_stat() 
                self.state = 3409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

            self.state = 3410
            self.match(TeradataSQLDDLParser.END)
            self.state = 3412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3411
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_cursor_control_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allocate_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Allocate_statContext,0)


        def close_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Close_statContext,0)


        def deallocate_prepare_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Deallocate_prepare_statContext,0)


        def positioned_delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Positioned_delete_statContext,0)


        def positioned_update_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Positioned_update_statContext,0)


        def execute_statement_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Execute_statement_statContext,0)


        def execute_immediate_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Execute_immediate_statContext,0)


        def fetch_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fetch_statContext,0)


        def open_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Open_statContext,0)


        def prepare_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Prepare_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_cursor_control_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_cursor_control_stat" ):
                listener.enterProcedure_cursor_control_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_cursor_control_stat" ):
                listener.exitProcedure_cursor_control_stat(self)




    def procedure_cursor_control_stat(self):

        localctx = TeradataSQLDDLParser.Procedure_cursor_control_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_procedure_cursor_control_stat)
        try:
            self.state = 3424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3414
                self.allocate_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3415
                self.close_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3416
                self.deallocate_prepare_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3417
                self.positioned_delete_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3418
                self.positioned_update_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3419
                self.execute_statement_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3420
                self.execute_immediate_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3421
                self.fetch_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3422
                self.open_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3423
                self.prepare_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assignment_target = None # Variable_nameContext
            self.assignment_source = None # Scalar_exprContext

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_assignment_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_stat" ):
                listener.enterAssignment_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_stat" ):
                listener.exitAssignment_stat(self)




    def assignment_stat(self):

        localctx = TeradataSQLDDLParser.Assignment_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_assignment_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3426
            self.match(TeradataSQLDDLParser.SET)
            self.state = 3427
            localctx.assignment_target = self.variable_name()
            self.state = 3428
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 3429
            localctx.assignment_source = self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Case_statContext,0)


        def if_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.If_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_condition_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_stat" ):
                listener.enterCondition_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_stat" ):
                listener.exitCondition_stat(self)




    def condition_stat(self):

        localctx = TeradataSQLDDLParser.Condition_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_condition_stat)
        try:
            self.state = 3433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3431
                self.case_stat()
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3432
                self.if_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iteration_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def while_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.While_statContext,0)


        def loop_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Loop_statContext,0)


        def for_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.For_statContext,0)


        def repeat_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Repeat_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_iteration_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteration_stat" ):
                listener.enterIteration_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteration_stat" ):
                listener.exitIteration_stat(self)




    def iteration_stat(self):

        localctx = TeradataSQLDDLParser.Iteration_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_iteration_stat)
        try:
            self.state = 3439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [472]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3435
                self.while_stat()
                pass
            elif token in [232]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3436
                self.loop_stat()
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3437
                self.for_stat()
                pass
            elif token in [339]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3438
                self.repeat_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition_number = None # Integer_literalContext
            self.condition_variable = None # Variable_nameContext

        def SIGNAL(self):
            return self.getToken(TeradataSQLDDLParser.SIGNAL, 0)

        def signal_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Signal_specContext,0)


        def RESIGNAL(self):
            return self.getToken(TeradataSQLDDLParser.RESIGNAL, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def condition_information_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Condition_information_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_information_itemContext,i)


        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def GET(self):
            return self.getToken(TeradataSQLDDLParser.GET, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLDDLParser.DIAGNOSTICS, 0)

        def diagnostic_statement_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Diagnostic_statement_assignmentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Diagnostic_statement_assignmentContext,i)


        def EXCEPTION(self):
            return self.getToken(TeradataSQLDDLParser.EXCEPTION, 0)

        def diagnostic_condition_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Diagnostic_condition_assignmentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Diagnostic_condition_assignmentContext,i)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_diagnostic_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_stat" ):
                listener.enterDiagnostic_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_stat" ):
                listener.exitDiagnostic_stat(self)




    def diagnostic_stat(self):

        localctx = TeradataSQLDDLParser.Diagnostic_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_diagnostic_stat)
        self._la = 0 # Token type
        try:
            self.state = 3490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [377]:
                    self.state = 3441
                    self.match(TeradataSQLDDLParser.SIGNAL)
                    self.state = 3442
                    self.signal_spec()
                    pass
                elif token in [344]:
                    self.state = 3443
                    self.match(TeradataSQLDDLParser.RESIGNAL)
                    self.state = 3445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 3444
                        self.signal_spec()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 3449
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 3450
                    self.condition_information_item()
                    self.state = 3451
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 3452
                    self.scalar_expr(0)
                    self.state = 3460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 3453
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 3454
                        self.condition_information_item()
                        self.state = 3455
                        self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                        self.state = 3456
                        self.scalar_expr(0)
                        self.state = 3462
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3465
                self.match(TeradataSQLDDLParser.GET)
                self.state = 3466
                self.match(TeradataSQLDDLParser.DIAGNOSTICS)
                self.state = 3467
                self.diagnostic_statement_assignment()
                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3468
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3469
                    self.diagnostic_statement_assignment()
                    self.state = 3474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3475
                self.match(TeradataSQLDDLParser.GET)
                self.state = 3476
                self.match(TeradataSQLDDLParser.DIAGNOSTICS)
                self.state = 3477
                self.match(TeradataSQLDDLParser.EXCEPTION)
                self.state = 3480
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1194]:
                    self.state = 3478
                    localctx.condition_number = self.integer_literal()
                    pass
                elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 3479
                    localctx.condition_variable = self.variable_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3482
                self.diagnostic_condition_assignment()
                self.state = 3487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3483
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3484
                    self.diagnostic_condition_assignment()
                    self.state = 3489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(TeradataSQLDDLParser.PRINT, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_print_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stat" ):
                listener.enterPrint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stat" ):
                listener.exitPrint_stat(self)




    def print_stat(self):

        localctx = TeradataSQLDDLParser.Print_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_print_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3492
            self.match(TeradataSQLDDLParser.PRINT)
            self.state = 3493
            self.scalar_expr(0)
            self.state = 3498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3494
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3495
                self.scalar_expr(0)
                self.state = 3500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(TeradataSQLDDLParser.DECLARE, 0)

        def SEMICOLON(self):
            return self.getToken(TeradataSQLDDLParser.SEMICOLON, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,i)


        def variable_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_data_typeContext,0)


        def condition_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_nameContext,0)


        def CONDITION(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_type_attributeContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def sqlstate_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Sqlstate_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_local_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_declaration" ):
                listener.enterLocal_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_declaration" ):
                listener.exitLocal_declaration(self)




    def local_declaration(self):

        localctx = TeradataSQLDDLParser.Local_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_local_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3501
            self.match(TeradataSQLDDLParser.DECLARE)
            self.state = 3523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 3502
                self.variable_name()
                self.state = 3507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3503
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3504
                    self.variable_name()
                    self.state = 3509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3510
                self.variable_data_type()
                self.state = 3514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                    self.state = 3511
                    self.data_type_attribute()
                    self.state = 3516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3517
                self.condition_name()
                self.state = 3518
                self.match(TeradataSQLDDLParser.CONDITION)
                self.state = 3521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 3519
                    self.match(TeradataSQLDDLParser.FOR)
                    self.state = 3520
                    self.sqlstate_spec()


                pass


            self.state = 3525
            self.match(TeradataSQLDDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prepared_statement_name = None # Statement_nameContext
            self.statement_string = None # Char_string_literalContext
            self.statement_string_variable = None # Variable_nameContext

        def DECLARE(self):
            return self.getToken(TeradataSQLDDLParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TeradataSQLDDLParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOR)
            else:
                return self.getToken(TeradataSQLDDLParser.FOR, i)

        def SEMICOLON(self):
            return self.getToken(TeradataSQLDDLParser.SEMICOLON, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def statement_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Statement_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Statement_nameContext,i)


        def SCROLL(self):
            return self.getToken(TeradataSQLDDLParser.SCROLL, 0)

        def WITHOUT(self):
            return self.getToken(TeradataSQLDDLParser.WITHOUT, 0)

        def RETURN(self):
            return self.getToken(TeradataSQLDDLParser.RETURN, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def PREPARE(self):
            return self.getToken(TeradataSQLDDLParser.PREPARE, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ONLY)
            else:
                return self.getToken(TeradataSQLDDLParser.ONLY, i)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def CALLER(self):
            return self.getToken(TeradataSQLDDLParser.CALLER, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLDDLParser.CLIENT, 0)

        def READ(self):
            return self.getToken(TeradataSQLDDLParser.READ, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)




    def cursor_declaration(self):

        localctx = TeradataSQLDDLParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3527
            self.match(TeradataSQLDDLParser.DECLARE)
            self.state = 3528
            self.cursor_name()
            self.state = 3533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268 or _la==367:
                self.state = 3530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 3529
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 3532
                self.match(TeradataSQLDDLParser.SCROLL)


            self.state = 3535
            self.match(TeradataSQLDDLParser.CURSOR)
            self.state = 3547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [475]:
                self.state = 3536
                self.match(TeradataSQLDDLParser.WITHOUT)
                self.state = 3537
                self.match(TeradataSQLDDLParser.RETURN)
                pass
            elif token in [474]:
                self.state = 3538
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 3539
                self.match(TeradataSQLDDLParser.RETURN)
                self.state = 3541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 3540
                    self.match(TeradataSQLDDLParser.ONLY)


                self.state = 3545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==426:
                    self.state = 3543
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 3544
                    _la = self._input.LA(1)
                    if not(_la==560 or _la==575):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [159]:
                pass
            else:
                pass
            self.state = 3549
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 3566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227, 369, 370, 474, 1213]:
                self.state = 3551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226 or _la==227:
                    self.state = 3550
                    self.locking_request_modifier()


                self.state = 3554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3553
                    self.with_request_modifier()


                self.state = 3556
                self.query_expr(0)
                self.state = 3563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 3557
                    self.match(TeradataSQLDDLParser.FOR)
                    self.state = 3561
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [877]:
                        self.state = 3558
                        self.match(TeradataSQLDDLParser.READ)
                        self.state = 3559
                        self.match(TeradataSQLDDLParser.ONLY)
                        pass
                    elif token in [453]:
                        self.state = 3560
                        self.match(TeradataSQLDDLParser.UPDATE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 3565
                self.statement_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3568
                self.match(TeradataSQLDDLParser.PREPARE)
                self.state = 3569
                localctx.prepared_statement_name = self.statement_name()
                self.state = 3570
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 3573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                if la_ == 1:
                    self.state = 3571
                    localctx.statement_string = self.char_string_literal()
                    pass

                elif la_ == 2:
                    self.state = 3572
                    localctx.statement_string_variable = self.variable_name()
                    pass




            self.state = 3577
            self.match(TeradataSQLDDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handler_action_statement = None # Procedure_statContext

        def DECLARE(self):
            return self.getToken(TeradataSQLDDLParser.DECLARE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,0)


        def HANDLER(self):
            return self.getToken(TeradataSQLDDLParser.HANDLER, 0)

        def condition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Condition_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_nameContext,i)


        def CONDITION(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION, 0)

        def sqlstate_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sqlstate_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sqlstate_specContext,i)


        def CONTINUE(self):
            return self.getToken(TeradataSQLDDLParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(TeradataSQLDDLParser.EXIT, 0)

        def SQLEXCEPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.SQLEXCEPTION)
            else:
                return self.getToken(TeradataSQLDDLParser.SQLEXCEPTION, i)

        def SQLWARNING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.SQLWARNING)
            else:
                return self.getToken(TeradataSQLDDLParser.SQLWARNING, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NOT)
            else:
                return self.getToken(TeradataSQLDDLParser.NOT, i)

        def FOUND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOUND)
            else:
                return self.getToken(TeradataSQLDDLParser.FOUND, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_condition_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_handler" ):
                listener.enterCondition_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_handler" ):
                listener.exitCondition_handler(self)




    def condition_handler(self):

        localctx = TeradataSQLDDLParser.Condition_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_condition_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.match(TeradataSQLDDLParser.DECLARE)
            self.state = 3585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 146]:
                self.state = 3580
                _la = self._input.LA(1)
                if not(_la==78 or _la==146):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3581
                self.match(TeradataSQLDDLParser.HANDLER)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 3582
                self.condition_name()
                self.state = 3583
                self.match(TeradataSQLDDLParser.CONDITION)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3587
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 3616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 3588
                self.sqlstate_spec()
                self.state = 3593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3589
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3590
                    self.sqlstate_spec()
                    self.state = 3595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3601
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [387]:
                    self.state = 3596
                    self.match(TeradataSQLDDLParser.SQLEXCEPTION)
                    pass
                elif token in [389]:
                    self.state = 3597
                    self.match(TeradataSQLDDLParser.SQLWARNING)
                    pass
                elif token in [272]:
                    self.state = 3598
                    self.match(TeradataSQLDDLParser.NOT)
                    self.state = 3599
                    self.match(TeradataSQLDDLParser.FOUND)
                    pass
                elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 3600
                    self.condition_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3603
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3609
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [387]:
                        self.state = 3604
                        self.match(TeradataSQLDDLParser.SQLEXCEPTION)
                        pass
                    elif token in [389]:
                        self.state = 3605
                        self.match(TeradataSQLDDLParser.SQLWARNING)
                        pass
                    elif token in [272]:
                        self.state = 3606
                        self.match(TeradataSQLDDLParser.NOT)
                        self.state = 3607
                        self.match(TeradataSQLDDLParser.FOUND)
                        pass
                    elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 3608
                        self.condition_name()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3618
            localctx.handler_action_statement = self.procedure_stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allocate_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.ALLOCATE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TeradataSQLDDLParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_allocate_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocate_stat" ):
                listener.enterAllocate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocate_stat" ):
                listener.exitAllocate_stat(self)




    def allocate_stat(self):

        localctx = TeradataSQLDDLParser.Allocate_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_allocate_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3620
            self.match(TeradataSQLDDLParser.ALLOCATE)
            self.state = 3621
            self.cursor_name()
            self.state = 3622
            self.match(TeradataSQLDDLParser.CURSOR)
            self.state = 3623
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 3624
            self.match(TeradataSQLDDLParser.PROCEDURE)
            self.state = 3625
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_close_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_stat" ):
                listener.enterClose_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_stat" ):
                listener.exitClose_stat(self)




    def close_stat(self):

        localctx = TeradataSQLDDLParser.Close_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_close_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3627
            self.match(TeradataSQLDDLParser.CLOSE)
            self.state = 3628
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deallocate_prepare_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.DEALLOCATE, 0)

        def PREPARE(self):
            return self.getToken(TeradataSQLDDLParser.PREPARE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statement_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_deallocate_prepare_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate_prepare_stat" ):
                listener.enterDeallocate_prepare_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate_prepare_stat" ):
                listener.exitDeallocate_prepare_stat(self)




    def deallocate_prepare_stat(self):

        localctx = TeradataSQLDDLParser.Deallocate_prepare_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_deallocate_prepare_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3630
            self.match(TeradataSQLDDLParser.DEALLOCATE)
            self.state = 3631
            self.match(TeradataSQLDDLParser.PREPARE)
            self.state = 3632
            self.statement_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positioned_delete_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def WHERE(self):
            return self.getToken(TeradataSQLDDLParser.WHERE, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TeradataSQLDDLParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLDDLParser.DEL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_positioned_delete_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositioned_delete_stat" ):
                listener.enterPositioned_delete_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositioned_delete_stat" ):
                listener.exitPositioned_delete_stat(self)




    def positioned_delete_stat(self):

        localctx = TeradataSQLDDLParser.Positioned_delete_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_positioned_delete_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3634
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3635
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 3636
            self.table_name()
            self.state = 3637
            self.match(TeradataSQLDDLParser.WHERE)
            self.state = 3638
            self.match(TeradataSQLDDLParser.CURRENT)
            self.state = 3639
            self.match(TeradataSQLDDLParser.OF)
            self.state = 3640
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positioned_update_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Set_specContext,i)


        def WHERE(self):
            return self.getToken(TeradataSQLDDLParser.WHERE, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TeradataSQLDDLParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDDLParser.UPD, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_positioned_update_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositioned_update_stat" ):
                listener.enterPositioned_update_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositioned_update_stat" ):
                listener.exitPositioned_update_stat(self)




    def positioned_update_stat(self):

        localctx = TeradataSQLDDLParser.Positioned_update_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_positioned_update_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3642
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3643
            self.table_name()
            self.state = 3648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 3644
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 3647
                self.alias_name()


            self.state = 3650
            self.match(TeradataSQLDDLParser.SET)
            self.state = 3651
            self.set_spec()
            self.state = 3656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3652
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3653
                self.set_spec()
                self.state = 3658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3659
            self.match(TeradataSQLDDLParser.WHERE)
            self.state = 3660
            self.match(TeradataSQLDDLParser.CURRENT)
            self.state = 3661
            self.match(TeradataSQLDDLParser.OF)
            self.state = 3662
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statement_nameContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_execute_statement_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_stat" ):
                listener.enterExecute_statement_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_stat" ):
                listener.exitExecute_statement_stat(self)




    def execute_statement_stat(self):

        localctx = TeradataSQLDDLParser.Execute_statement_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_execute_statement_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3664
            self.match(TeradataSQLDDLParser.EXECUTE)
            self.state = 3665
            self.statement_name()
            self.state = 3675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 3666
                self.match(TeradataSQLDDLParser.USING)
                self.state = 3667
                self.variable_name()
                self.state = 3672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3668
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3669
                    self.variable_name()
                    self.state = 3674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_immediate_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(TeradataSQLDDLParser.IMMEDIATE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statement_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_execute_immediate_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate_stat" ):
                listener.enterExecute_immediate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate_stat" ):
                listener.exitExecute_immediate_stat(self)




    def execute_immediate_stat(self):

        localctx = TeradataSQLDDLParser.Execute_immediate_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_execute_immediate_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3677
            self.match(TeradataSQLDDLParser.EXECUTE)
            self.state = 3678
            self.match(TeradataSQLDDLParser.IMMEDIATE)
            self.state = 3679
            self.statement_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(TeradataSQLDDLParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,i)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NEXT(self):
            return self.getToken(TeradataSQLDDLParser.NEXT, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLDDLParser.FIRST, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_fetch_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_stat" ):
                listener.enterFetch_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_stat" ):
                listener.exitFetch_stat(self)




    def fetch_stat(self):

        localctx = TeradataSQLDDLParser.Fetch_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fetch_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3681
            self.match(TeradataSQLDDLParser.FETCH)
            self.state = 3686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156 or _la==164 or _la==267:
                self.state = 3683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156 or _la==267:
                    self.state = 3682
                    _la = self._input.LA(1)
                    if not(_la==156 or _la==267):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3685
                self.match(TeradataSQLDDLParser.FROM)


            self.state = 3688
            self.cursor_name()
            self.state = 3689
            self.match(TeradataSQLDDLParser.INTO)
            self.state = 3690
            self.variable_name()
            self.state = 3695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3691
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3692
                self.variable_name()
                self.state = 3697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(TeradataSQLDDLParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_open_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_stat" ):
                listener.enterOpen_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_stat" ):
                listener.exitOpen_stat(self)




    def open_stat(self):

        localctx = TeradataSQLDDLParser.Open_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_open_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3698
            self.match(TeradataSQLDDLParser.OPEN)
            self.state = 3699
            self.cursor_name()
            self.state = 3709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 3700
                self.match(TeradataSQLDDLParser.USING)
                self.state = 3701
                self.variable_name()
                self.state = 3706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3702
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 3703
                    self.variable_name()
                    self.state = 3708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prepare_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.statement_string = None # Char_string_literalContext
            self.statement_string_variable = None # Variable_nameContext

        def PREPARE(self):
            return self.getToken(TeradataSQLDDLParser.PREPARE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statement_nameContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_prepare_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare_stat" ):
                listener.enterPrepare_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare_stat" ):
                listener.exitPrepare_stat(self)




    def prepare_stat(self):

        localctx = TeradataSQLDDLParser.Prepare_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_prepare_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3711
            self.match(TeradataSQLDDLParser.PREPARE)
            self.state = 3712
            self.statement_name()
            self.state = 3713
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 3716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 3714
                localctx.statement_string = self.char_string_literal()
                pass

            elif la_ == 2:
                self.state = 3715
                localctx.statement_string_variable = self.variable_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.operand_1 = None # Scalar_exprContext

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CASE)
            else:
                return self.getToken(TeradataSQLDDLParser.CASE, i)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def ELSE(self):
            return self.getToken(TeradataSQLDDLParser.ELSE, 0)

        def when_operand_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.When_operand_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.When_operand_clauseContext,i)


        def when_condition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.When_condition_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.When_condition_clauseContext,i)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_case_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_stat" ):
                listener.enterCase_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_stat" ):
                listener.exitCase_stat(self)




    def case_stat(self):

        localctx = TeradataSQLDDLParser.Case_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_case_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3718
            self.match(TeradataSQLDDLParser.CASE)
            self.state = 3730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 3719
                localctx.operand_1 = self.scalar_expr(0)
                self.state = 3721 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3720
                    self.when_operand_clause()
                    self.state = 3723 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==470):
                        break

                pass
            elif token in [470]:
                self.state = 3726 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3725
                    self.when_condition_clause()
                    self.state = 3728 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==470):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3732
                self.match(TeradataSQLDDLParser.ELSE)
                self.state = 3734 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3733
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3736 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,364,self._ctx)



            self.state = 3740
            self.match(TeradataSQLDDLParser.END)
            self.state = 3741
            self.match(TeradataSQLDDLParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_operand_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.operand = None # Scalar_exprContext

        def WHEN(self):
            return self.getToken(TeradataSQLDDLParser.WHEN, 0)

        def THEN(self):
            return self.getToken(TeradataSQLDDLParser.THEN, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_when_operand_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_operand_clause" ):
                listener.enterWhen_operand_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_operand_clause" ):
                listener.exitWhen_operand_clause(self)




    def when_operand_clause(self):

        localctx = TeradataSQLDDLParser.When_operand_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_when_operand_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3743
            self.match(TeradataSQLDDLParser.WHEN)
            self.state = 3744
            localctx.operand = self.scalar_expr(0)
            self.state = 3745
            self.match(TeradataSQLDDLParser.THEN)
            self.state = 3747 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3746
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3749 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,366,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_condition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLDDLParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def THEN(self):
            return self.getToken(TeradataSQLDDLParser.THEN, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_when_condition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_condition_clause" ):
                listener.enterWhen_condition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_condition_clause" ):
                listener.exitWhen_condition_clause(self)




    def when_condition_clause(self):

        localctx = TeradataSQLDDLParser.When_condition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_when_condition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3751
            self.match(TeradataSQLDDLParser.WHEN)
            self.state = 3752
            self.logical_expr(0)
            self.state = 3753
            self.match(TeradataSQLDDLParser.THEN)
            self.state = 3755 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3754
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3757 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.IF)
            else:
                return self.getToken(TeradataSQLDDLParser.IF, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.THEN)
            else:
                return self.getToken(TeradataSQLDDLParser.THEN, i)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def ELSEIF(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ELSEIF)
            else:
                return self.getToken(TeradataSQLDDLParser.ELSEIF, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDDLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_if_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stat" ):
                listener.enterIf_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stat" ):
                listener.exitIf_stat(self)




    def if_stat(self):

        localctx = TeradataSQLDDLParser.If_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_if_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3759
            self.match(TeradataSQLDDLParser.IF)
            self.state = 3760
            self.logical_expr(0)
            self.state = 3761
            self.match(TeradataSQLDDLParser.THEN)
            self.state = 3763 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3762
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3765 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

            self.state = 3777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 3767
                self.match(TeradataSQLDDLParser.ELSEIF)
                self.state = 3768
                self.logical_expr(0)
                self.state = 3769
                self.match(TeradataSQLDDLParser.THEN)
                self.state = 3771 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3770
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3773 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

                self.state = 3779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3780
                self.match(TeradataSQLDDLParser.ELSE)
                self.state = 3782 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3781
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3784 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,371,self._ctx)



            self.state = 3788
            self.match(TeradataSQLDDLParser.END)
            self.state = 3789
            self.match(TeradataSQLDDLParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WHILE)
            else:
                return self.getToken(TeradataSQLDDLParser.WHILE, i)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def DO(self):
            return self.getToken(TeradataSQLDDLParser.DO, 0)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_while_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stat" ):
                listener.enterWhile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stat" ):
                listener.exitWhile_stat(self)




    def while_stat(self):

        localctx = TeradataSQLDDLParser.While_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_while_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.match(TeradataSQLDDLParser.WHILE)
            self.state = 3792
            self.logical_expr(0)
            self.state = 3793
            self.match(TeradataSQLDDLParser.DO)
            self.state = 3795 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3794
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3797 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,373,self._ctx)

            self.state = 3799
            self.match(TeradataSQLDDLParser.END)
            self.state = 3800
            self.match(TeradataSQLDDLParser.WHILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.LOOP)
            else:
                return self.getToken(TeradataSQLDDLParser.LOOP, i)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_loop_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_stat" ):
                listener.enterLoop_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_stat" ):
                listener.exitLoop_stat(self)




    def loop_stat(self):

        localctx = TeradataSQLDDLParser.Loop_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_loop_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3802
            self.match(TeradataSQLDDLParser.LOOP)
            self.state = 3804 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3803
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3806 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

            self.state = 3808
            self.match(TeradataSQLDDLParser.END)
            self.state = 3809
            self.match(TeradataSQLDDLParser.LOOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOR)
            else:
                return self.getToken(TeradataSQLDDLParser.FOR, i)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def DO(self):
            return self.getToken(TeradataSQLDDLParser.DO, 0)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TeradataSQLDDLParser.CURSOR, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_for_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stat" ):
                listener.enterFor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stat" ):
                listener.exitFor_stat(self)




    def for_stat(self):

        localctx = TeradataSQLDDLParser.For_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_for_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3811
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 3812
            self.variable_name()
            self.state = 3813
            self.match(TeradataSQLDDLParser.AS)
            self.state = 3818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3814
                self.cursor_name()
                self.state = 3815
                self.match(TeradataSQLDDLParser.CURSOR)
                self.state = 3816
                self.match(TeradataSQLDDLParser.FOR)


            self.state = 3821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 3820
                self.locking_request_modifier()


            self.state = 3824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3823
                self.with_request_modifier()


            self.state = 3826
            self.query_expr(0)
            self.state = 3827
            self.match(TeradataSQLDDLParser.DO)
            self.state = 3829 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3828
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3831 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

            self.state = 3833
            self.match(TeradataSQLDDLParser.END)
            self.state = 3834
            self.match(TeradataSQLDDLParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.REPEAT)
            else:
                return self.getToken(TeradataSQLDDLParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(TeradataSQLDDLParser.UNTIL, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_repeat_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_stat" ):
                listener.enterRepeat_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_stat" ):
                listener.exitRepeat_stat(self)




    def repeat_stat(self):

        localctx = TeradataSQLDDLParser.Repeat_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_repeat_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3836
            self.match(TeradataSQLDDLParser.REPEAT)
            self.state = 3838 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3837
                self.procedure_stat()
                self.state = 3840 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9220908014117044222) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -8068757249945763735) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -9205357157273238399) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 72075204210197505) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 68719738881) != 0) or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 573379248199) != 0) or ((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & -68714233821) != 0) or ((((_la - 516)) & ~0x3f) == 0 and ((1 << (_la - 516)) & -1) != 0) or ((((_la - 580)) & ~0x3f) == 0 and ((1 << (_la - 580)) & -1) != 0) or ((((_la - 644)) & ~0x3f) == 0 and ((1 << (_la - 644)) & -1) != 0) or ((((_la - 708)) & ~0x3f) == 0 and ((1 << (_la - 708)) & -1) != 0) or ((((_la - 772)) & ~0x3f) == 0 and ((1 << (_la - 772)) & -1) != 0) or ((((_la - 836)) & ~0x3f) == 0 and ((1 << (_la - 836)) & -1) != 0) or ((((_la - 900)) & ~0x3f) == 0 and ((1 << (_la - 900)) & -1) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & -1) != 0) or ((((_la - 1028)) & ~0x3f) == 0 and ((1 << (_la - 1028)) & -1) != 0) or ((((_la - 1092)) & ~0x3f) == 0 and ((1 << (_la - 1092)) & -1) != 0) or ((((_la - 1156)) & ~0x3f) == 0 and ((1 << (_la - 1156)) & 144115462953762815) != 0)):
                    break

            self.state = 3842
            self.match(TeradataSQLDDLParser.UNTIL)
            self.state = 3843
            self.logical_expr(0)
            self.state = 3844
            self.match(TeradataSQLDDLParser.END)
            self.state = 3845
            self.match(TeradataSQLDDLParser.REPEAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_statement_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def statement_information_item(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Statement_information_itemContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_diagnostic_statement_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_statement_assignment" ):
                listener.enterDiagnostic_statement_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_statement_assignment" ):
                listener.exitDiagnostic_statement_assignment(self)




    def diagnostic_statement_assignment(self):

        localctx = TeradataSQLDDLParser.Diagnostic_statement_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_diagnostic_statement_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3847
            self.variable_name()
            self.state = 3848
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 3849
            self.statement_information_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_condition_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def condition_information_item(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_information_itemContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_diagnostic_condition_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_condition_assignment" ):
                listener.enterDiagnostic_condition_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_condition_assignment" ):
                listener.exitDiagnostic_condition_assignment(self)




    def diagnostic_condition_assignment(self):

        localctx = TeradataSQLDDLParser.Diagnostic_condition_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_diagnostic_condition_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3851
            self.variable_name()
            self.state = 3852
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 3853
            self.condition_information_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_information_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDDLParser.CLASS_ORIGIN, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION_NUMBER, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLDDLParser.MESSAGE_TEXT, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLDDLParser.RETURNED_SQLSTATE, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDDLParser.SUBCLASS_ORIGIN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_condition_information_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_information_item" ):
                listener.enterCondition_information_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_information_item" ):
                listener.exitCondition_information_item(self)




    def condition_information_item(self):

        localctx = TeradataSQLDDLParser.Condition_information_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_condition_information_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3855
            _la = self._input.LA(1)
            if not(((((_la - 573)) & ~0x3f) == 0 and ((1 << (_la - 573)) & 196609) != 0) or _la==768 or _la==769 or _la==888 or _la==946):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_information_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLDDLParser.COMMAND_FUNCTION_CODE, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLDDLParser.MORE_, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.NUMBER, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLDDLParser.ROW_COUNT, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLDDLParser.TRANSACTION_ACTIVE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_statement_information_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_information_item" ):
                listener.enterStatement_information_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_information_item" ):
                listener.exitStatement_information_item(self)




    def statement_information_item(self):

        localctx = TeradataSQLDDLParser.Statement_information_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_statement_information_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3857
            _la = self._input.LA(1)
            if not(_la==277 or _la==582 or _la==583 or _la==787 or _la==895 or _la==1002):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signal_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Condition_nameContext,0)


        def sqlstate_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Sqlstate_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_signal_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignal_spec" ):
                listener.enterSignal_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignal_spec" ):
                listener.exitSignal_spec(self)




    def signal_spec(self):

        localctx = TeradataSQLDDLParser.Signal_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_signal_spec)
        try:
            self.state = 3861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3859
                self.condition_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3860
                self.sqlstate_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlstate_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sqlstate_code = None # Char_string_literalContext

        def SQLSTATE(self):
            return self.getToken(TeradataSQLDDLParser.SQLSTATE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def VALUE(self):
            return self.getToken(TeradataSQLDDLParser.VALUE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sqlstate_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlstate_spec" ):
                listener.enterSqlstate_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlstate_spec" ):
                listener.exitSqlstate_spec(self)




    def sqlstate_spec(self):

        localctx = TeradataSQLDDLParser.Sqlstate_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_sqlstate_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3863
            self.match(TeradataSQLDDLParser.SQLSTATE)
            self.state = 3865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==459:
                self.state = 3864
                self.match(TeradataSQLDDLParser.VALUE)


            self.state = 3867
            localctx.sqlstate_code = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_view_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def CV(self):
            return self.getToken(TeradataSQLDDLParser.CV, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def as_of_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.As_of_clauseContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def RECURSIVE(self):
            return self.getToken(TeradataSQLDDLParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_replace_view_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_view_stat" ):
                listener.enterCreate_replace_view_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_view_stat" ):
                listener.exitCreate_replace_view_stat(self)




    def create_replace_view_stat(self):

        localctx = TeradataSQLDDLParser.Create_replace_view_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_create_replace_view_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 3869
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 3871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==324:
                    self.state = 3870
                    self.match(TeradataSQLDDLParser.RECURSIVE)


                self.state = 3873
                self.match(TeradataSQLDDLParser.VIEW)
                pass
            elif token in [100]:
                self.state = 3874
                self.match(TeradataSQLDDLParser.CV)
                pass
            elif token in [340]:
                self.state = 3875
                self.match(TeradataSQLDDLParser.REPLACE)
                self.state = 3877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==324:
                    self.state = 3876
                    self.match(TeradataSQLDDLParser.RECURSIVE)


                self.state = 3879
                self.match(TeradataSQLDDLParser.VIEW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3882
            localctx.view_name = self.table_name()
            self.state = 3884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 3883
                self.column_list()


            self.state = 3886
            self.match(TeradataSQLDDLParser.AS)
            self.state = 3888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 3887
                self.locking_request_modifier()


            self.state = 3891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 3890
                self.as_of_clause()


            self.state = 3894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3893
                self.with_request_modifier()


            self.state = 3896
            self.query_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_of_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.system_calendar_name = None # Object_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OF(self):
            return self.getToken(TeradataSQLDDLParser.OF, 0)

        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Calendar_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDDLParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def AT(self):
            return self.getToken(TeradataSQLDDLParser.AT, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_time_zoneContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_as_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_of_clause" ):
                listener.enterAs_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_of_clause" ):
                listener.exitAs_of_clause(self)




    def as_of_clause(self):

        localctx = TeradataSQLDDLParser.As_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_as_of_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3898
            self.match(TeradataSQLDDLParser.AS)
            self.state = 3899
            self.match(TeradataSQLDDLParser.OF)
            self.state = 3900
            self.calendar_function()
            self.state = 3901
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 3912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.state = 3902
                self.match(TeradataSQLDDLParser.DATE)
                self.state = 3906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 3903
                    self.match(TeradataSQLDDLParser.AT)
                    self.state = 3904
                    self.match(TeradataSQLDDLParser.TIME)
                    self.state = 3905
                    self.match(TeradataSQLDDLParser.ZONE)


                pass
            elif token in [422]:
                self.state = 3908
                self.match(TeradataSQLDDLParser.TIMESTAMP)
                self.state = 3910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3909
                    self.with_time_zone()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3914
            self.scalar_expr(0)
            self.state = 3917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 3915
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3916
                localctx.system_calendar_name = self.object_name()


            self.state = 3919
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_database_name = None # Database_nameContext

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def database_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Database_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Database_attributeContext,i)


        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def CD(self):
            return self.getToken(TeradataSQLDDLParser.CD, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stat" ):
                listener.enterCreate_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stat" ):
                listener.exitCreate_database_stat(self)




    def create_database_stat(self):

        localctx = TeradataSQLDDLParser.Create_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_create_database_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 3921
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 3922
                self.match(TeradataSQLDDLParser.DATABASE)
                pass
            elif token in [51]:
                self.state = 3923
                self.match(TeradataSQLDDLParser.CD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3926
            self.database_name()
            self.state = 3929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 3927
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 3928
                localctx.from_database_name = self.database_name()


            self.state = 3931
            self.match(TeradataSQLDDLParser.AS)
            self.state = 3932
            self.database_attribute()
            self.state = 3937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3933
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3934
                self.database_attribute()
                self.state = 3939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.account_name = None # Char_string_literalContext

        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_size_specContext,0)


        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_default_mapContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_journal_tableContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_database_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_attribute" ):
                listener.enterDatabase_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_attribute" ):
                listener.exitDatabase_attribute(self)




    def database_attribute(self):

        localctx = TeradataSQLDDLParser.Database_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_database_attribute)
        try:
            self.state = 3949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3940
                self.database_size_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3941
                self.match(TeradataSQLDDLParser.ACCOUNT)
                self.state = 3942
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 3943
                localctx.account_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3944
                self.database_default_map()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3945
                self.fallback_protection()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3946
                self.before_journal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3947
                self.after_journal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3948
                self.default_journal_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def index_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Index_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Index_specContext,i)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stat" ):
                listener.enterCreate_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stat" ):
                listener.exitCreate_index_stat(self)




    def create_index_stat(self):

        localctx = TeradataSQLDDLParser.Create_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_create_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3951
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 3952
            self.index_spec()
            self.state = 3957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3953
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3954
                self.index_spec()
                self.state = 3959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3960
            self.match(TeradataSQLDDLParser.ON)
            self.state = 3962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 3961
                self.match(TeradataSQLDDLParser.TEMPORARY)


            self.state = 3964
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext
            self.index_column_name = None # Unqualified_nameContext

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_orderingContext,0)


        def index_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_loadingContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_index_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_spec" ):
                listener.enterIndex_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_spec" ):
                listener.exitIndex_spec(self)




    def index_spec(self):

        localctx = TeradataSQLDDLParser.Index_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_index_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448:
                self.state = 3966
                self.match(TeradataSQLDDLParser.UNIQUE)


            self.state = 3969
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 3971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3970
                localctx.index_name = self.unqualified_name()


            self.state = 3974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 3973
                self.match(TeradataSQLDDLParser.ALL)


            self.state = 3976
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 3977
            localctx.index_column_name = self.unqualified_name()
            self.state = 3982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3978
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3979
                localctx.index_column_name = self.unqualified_name()
                self.state = 3984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3985
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 3987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 3986
                self.index_ordering()


            self.state = 3990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3989
                self.index_loading()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def table_option_index_form(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_option_index_formContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_option_index_formContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def join_index_select_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Join_index_select_clauseContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Index_definitionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_join_index_stat" ):
                listener.enterCreate_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_join_index_stat" ):
                listener.exitCreate_join_index_stat(self)




    def create_join_index_stat(self):

        localctx = TeradataSQLDDLParser.Create_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_create_join_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3992
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 3993
            self.match(TeradataSQLDDLParser.JOIN)
            self.state = 3994
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 3995
            localctx.join_index_name = self.table_name()
            self.state = 3996
            self.table_option_index_form()
            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3997
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 3998
                self.table_option_index_form()
                self.state = 4003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4004
            self.match(TeradataSQLDDLParser.AS)
            self.state = 4005
            self.join_index_select_clause()
            self.state = 4016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4006
                self.index_definition()
                self.state = 4013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4007
                        self.match(TeradataSQLDDLParser.COMMA)


                    self.state = 4010
                    self.index_definition()
                    self.state = 4015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_index_select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.grouping_spec = None # Ji_grouping_or_ordering_specContext
            self.ordering_spec = None # Ji_grouping_or_ordering_specContext

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def ji_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ji_sourceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ji_sourceContext,i)


        def GROUP(self):
            return self.getToken(TeradataSQLDDLParser.GROUP, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.BY)
            else:
                return self.getToken(TeradataSQLDDLParser.BY, i)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def SEL(self):
            return self.getToken(TeradataSQLDDLParser.SEL, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLDDLParser.SELECT, 0)

        def ji_grouping_or_ordering_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ji_grouping_or_ordering_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ji_grouping_or_ordering_specContext,i)


        def ji_selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ji_selectionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ji_selectionContext,i)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,0)


        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_join_index_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_index_select_clause" ):
                listener.enterJoin_index_select_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_index_select_clause" ):
                listener.exitJoin_index_select_clause(self)




    def join_index_select_clause(self):

        localctx = TeradataSQLDDLParser.Join_index_select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_join_index_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4018
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 4019
                self.ji_selection()
                self.state = 4024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4020
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4021
                    self.ji_selection()
                    self.state = 4026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 4027
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4028
                self.ji_selection()
                self.state = 4033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4029
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4030
                    self.ji_selection()
                    self.state = 4035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4036
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 4037
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4038
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4039
                self.ji_selection()
                self.state = 4044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4040
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4041
                    self.ji_selection()
                    self.state = 4046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4047
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.state = 4050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==361:
                    self.state = 4049
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==361):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4052
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4053
                self.ji_selection()
                self.state = 4058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4054
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4055
                    self.ji_selection()
                    self.state = 4060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4061
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 4067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 4063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4062
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 4065
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 4066
                    self.match(TeradataSQLDDLParser.COMPRESS)


                pass


            self.state = 4071
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 4072
            self.ji_source()
            self.state = 4077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,417,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4073
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4074
                    self.ji_source() 
                self.state = 4079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

            self.state = 4081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 4080
                self.where_clause()


            self.state = 4083
            self.matchWildcard()
            self.state = 4084
            self.match(TeradataSQLDDLParser.GROUP)
            self.state = 4085
            self.match(TeradataSQLDDLParser.BY)
            self.state = 4086
            localctx.grouping_spec = self.ji_grouping_or_ordering_spec()
            self.state = 4087
            self.match(TeradataSQLDDLParser.ORDER)
            self.state = 4088
            self.match(TeradataSQLDDLParser.BY)
            self.state = 4089
            localctx.ordering_spec = self.ji_grouping_or_ordering_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ji_selectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def aggregation_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Aggregation_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ji_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_selection" ):
                listener.enterJi_selection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_selection" ):
                listener.exitJi_selection(self)




    def ji_selection(self):

        localctx = TeradataSQLDDLParser.Ji_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_ji_selection)
        try:
            self.state = 4093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4091
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4092
                self.aggregation_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregation_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def SUM(self):
            return self.getToken(TeradataSQLDDLParser.SUM, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLDDLParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLDDLParser.COUNT, 0)

        def MIN(self):
            return self.getToken(TeradataSQLDDLParser.MIN, 0)

        def MAX(self):
            return self.getToken(TeradataSQLDDLParser.MAX, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLDDLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDDLParser.MONTH, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_aggregation_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation_clause" ):
                listener.enterAggregation_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation_clause" ):
                listener.exitAggregation_clause(self)




    def aggregation_clause(self):

        localctx = TeradataSQLDDLParser.Aggregation_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_aggregation_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 4095
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 4096
                self.match(TeradataSQLDDLParser.SUM)
                self.state = 4097
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4098
                self.scalar_expr(0)
                self.state = 4099
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.state = 4101
                _la = self._input.LA(1)
                if not(_la==83 or _la==238 or _la==244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4102
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4103
                self.scalar_expr(0)
                self.state = 4104
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.state = 4106
                self.match(TeradataSQLDDLParser.EXTRACT)
                self.state = 4107
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4108
                _la = self._input.LA(1)
                if not(_la==258 or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4109
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 4110
                self.scalar_expr(0)
                self.state = 4111
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


            self.state = 4119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 4116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4115
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 4118
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ji_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def ji_joined_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Ji_joined_tableContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ji_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_source" ):
                listener.enterJi_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_source" ):
                listener.exitJi_source(self)




    def ji_source(self):

        localctx = TeradataSQLDDLParser.Ji_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_ji_source)
        self._la = 0 # Token type
        try:
            self.state = 4129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4121
                self.table_name()
                self.state = 4126
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 4123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 4122
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 4125
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4128
                self.ji_joined_table(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ji_joined_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def ji_joined_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ji_joined_tableContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ji_joined_tableContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLDDLParser.INNER, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLDDLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDDLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLDDLParser.OUTER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ji_joined_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_joined_table" ):
                listener.enterJi_joined_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_joined_table" ):
                listener.exitJi_joined_table(self)



    def ji_joined_table(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDDLParser.Ji_joined_tableContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_ji_joined_table, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.state = 4132
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4133
                self.ji_joined_table(0)
                self.state = 4134
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 4136
                self.table_name()
                self.state = 4141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
                if la_ == 1:
                    self.state = 4138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 4137
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 4140
                    self.alias_name()


                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 4160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,431,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLDDLParser.Ji_joined_tableContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ji_joined_table)
                    self.state = 4145
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 4151
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [194]:
                        self.state = 4146
                        self.match(TeradataSQLDDLParser.INNER)
                        pass
                    elif token in [219, 355]:
                        self.state = 4147
                        _la = self._input.LA(1)
                        if not(_la==219 or _la==355):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4149
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==294:
                            self.state = 4148
                            self.match(TeradataSQLDDLParser.OUTER)


                        pass
                    elif token in [210]:
                        pass
                    else:
                        pass
                    self.state = 4153
                    self.match(TeradataSQLDDLParser.JOIN)
                    self.state = 4154
                    self.ji_joined_table(0)
                    self.state = 4155
                    self.match(TeradataSQLDDLParser.ON)
                    self.state = 4156
                    self.logical_expr(0) 
                self.state = 4162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,431,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Ji_grouping_or_ordering_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ji_grouping_or_ordering_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_grouping_or_ordering_spec" ):
                listener.enterJi_grouping_or_ordering_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_grouping_or_ordering_spec" ):
                listener.exitJi_grouping_or_ordering_spec(self)




    def ji_grouping_or_ordering_spec(self):

        localctx = TeradataSQLDDLParser.Ji_grouping_or_ordering_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_ji_grouping_or_ordering_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4163
            self.scalar_expr(0)
            self.state = 4168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4164
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4165
                self.scalar_expr(0)
                self.state = 4170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_profile_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def profile_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Profile_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_profile_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_profile_stat" ):
                listener.enterCreate_profile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_profile_stat" ):
                listener.exitCreate_profile_stat(self)




    def create_profile_stat(self):

        localctx = TeradataSQLDDLParser.Create_profile_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_create_profile_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4171
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4172
            self.match(TeradataSQLDDLParser.PROFILE)
            self.state = 4173
            self.profile_name()
            self.state = 4183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4174
                self.match(TeradataSQLDDLParser.AS)
                self.state = 4175
                self.profile_attribute()
                self.state = 4180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4176
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4177
                    self.profile_attribute()
                    self.state = 4182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts
            self.size = None # Scalar_exprContext
            self.band_spec = None # Char_string_literalContext
            self.ignore_band_spec = None # Char_string_literalContext
            self.cost_profile_name = None # Unqualified_nameContext

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_default_mapContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def SPOOL(self):
            return self.getToken(TeradataSQLDDLParser.SPOOL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def BYTES(self):
            return self.getToken(TeradataSQLDDLParser.BYTES, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLDDLParser.PASSWORD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def password_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Password_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Password_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTES, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDDLParser.QUERY_BAND, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDDLParser.IGNORE, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def TRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.TRANSFORM, 0)

        def transform_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Transform_specificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Transform_specificationContext,i)


        def COST(self):
            return self.getToken(TeradataSQLDDLParser.COST, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def user_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_constraintContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_profile_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_attribute" ):
                listener.enterProfile_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_attribute" ):
                listener.exitProfile_attribute(self)




    def profile_attribute(self):

        localctx = TeradataSQLDDLParser.Profile_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_profile_attribute)
        self._la = 0 # Token type
        try:
            self.state = 4277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4185
                self.match(TeradataSQLDDLParser.ACCOUNT)
                self.state = 4186
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 4187
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 4192
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,435,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4188
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 4189
                            localctx._char_string_literal = self.char_string_literal()
                            localctx.account_string.append(localctx._char_string_literal) 
                        self.state = 4194
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,435,self._ctx)

                    pass
                elif token in [274]:
                    self.state = 4195
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4198
                self.database_default_map()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4199
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 4200
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 4201
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4202
                self.database_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4203
                _la = self._input.LA(1)
                if not(_la==385 or _la==417):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4204
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 4205
                    localctx.size = self.scalar_expr(0)
                    self.state = 4207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==45:
                        self.state = 4206
                        self.match(TeradataSQLDDLParser.BYTES)


                    pass

                elif la_ == 2:
                    self.state = 4209
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4212
                self.match(TeradataSQLDDLParser.PASSWORD)
                self.state = 4214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==539:
                    self.state = 4213
                    self.match(TeradataSQLDDLParser.ATTRIBUTES)


                self.state = 4216
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4229
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1213]:
                    self.state = 4217
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 4218
                    self.password_attribute()
                    self.state = 4223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4219
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4220
                        self.password_attribute()
                        self.state = 4225
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4226
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                elif token in [274]:
                    self.state = 4228
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4231
                self.match(TeradataSQLDDLParser.QUERY_BAND)
                self.state = 4232
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4233
                localctx.band_spec = self.char_string_literal()
                self.state = 4240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 4234
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 4236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272:
                        self.state = 4235
                        self.match(TeradataSQLDDLParser.NOT)


                    self.state = 4238
                    self.match(TeradataSQLDDLParser.DEFAULT)
                    self.state = 4239
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4242
                self.match(TeradataSQLDDLParser.IGNORE)
                self.state = 4243
                self.match(TeradataSQLDDLParser.QUERY_BAND)
                self.state = 4244
                self.match(TeradataSQLDDLParser.VALUES)
                self.state = 4245
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4246
                localctx.ignore_band_spec = self.char_string_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4247
                self.match(TeradataSQLDDLParser.TRANSFORM)
                self.state = 4248
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 4249
                    self.transform_specification()
                    self.state = 4254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4250
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4251
                        self.transform_specification()
                        self.state = 4256
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4259
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4260
                self.match(TeradataSQLDDLParser.COST)
                self.state = 4261
                self.match(TeradataSQLDDLParser.PROFILE)
                self.state = 4262
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4265
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4263
                    localctx.cost_profile_name = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4264
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4267
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 4268
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4269
                self.user_constraint()
                self.state = 4274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,447,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4270
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4271
                        self.user_constraint() 
                    self.state = 4276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,447,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Password_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Scalar_exprContext
            self.c = None # Unqualified_nameContext

        def EXPIRE(self):
            return self.getToken(TeradataSQLDDLParser.EXPIRE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def MINCHAR(self):
            return self.getToken(TeradataSQLDDLParser.MINCHAR, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLDDLParser.MAXCHAR, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLDDLParser.DIGITS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def SPECCHAR(self):
            return self.getToken(TeradataSQLDDLParser.SPECCHAR, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLDDLParser.MAXLOGONATTEMPTS, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLDDLParser.LOCKEDUSEREXPIRE, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLDDLParser.REUSE, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLDDLParser.RESTRICTWORDS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_password_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_attribute" ):
                listener.enterPassword_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_attribute" ):
                listener.exitPassword_attribute(self)




    def password_attribute(self):

        localctx = TeradataSQLDDLParser.Password_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_password_attribute)
        try:
            self.state = 4333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [663]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4279
                self.match(TeradataSQLDDLParser.EXPIRE)
                self.state = 4280
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                if la_ == 1:
                    self.state = 4281
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4282
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass
            elif token in [771]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4285
                self.match(TeradataSQLDDLParser.MINCHAR)
                self.state = 4286
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 4287
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4288
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass
            elif token in [758]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4291
                self.match(TeradataSQLDDLParser.MAXCHAR)
                self.state = 4292
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                if la_ == 1:
                    self.state = 4293
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4294
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass
            elif token in [634]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4297
                self.match(TeradataSQLDDLParser.DIGITS)
                self.state = 4298
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4301
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4299
                    localctx.c = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4300
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [932]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4303
                self.match(TeradataSQLDDLParser.SPECCHAR)
                self.state = 4304
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4307
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4305
                    localctx.c = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4306
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [760]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4309
                self.match(TeradataSQLDDLParser.MAXLOGONATTEMPTS)
                self.state = 4310
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 4311
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4312
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass
            elif token in [744]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4315
                self.match(TeradataSQLDDLParser.LOCKEDUSEREXPIRE)
                self.state = 4316
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 4317
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4318
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass
            elif token in [890]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4321
                self.match(TeradataSQLDDLParser.REUSE)
                self.state = 4322
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 4323
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4324
                    self.match(TeradataSQLDDLParser.NULL)
                    pass


                pass
            elif token in [886]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4327
                self.match(TeradataSQLDDLParser.RESTRICTWORDS)
                self.state = 4328
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4331
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4329
                    localctx.c = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4330
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_foreign_server_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_name = None # Unqualified_nameContext

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_server_dbContext,0)


        def foreign_server_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_external_security_clauseContext,0)


        def foreign_server_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_using_clauseContext,0)


        def do_import_with(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Do_import_withContext,0)


        def do_export_with(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Do_export_withContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_foreign_server_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_foreign_server_stat" ):
                listener.enterCreate_foreign_server_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_foreign_server_stat" ):
                listener.exitCreate_foreign_server_stat(self)




    def create_foreign_server_stat(self):

        localctx = TeradataSQLDDLParser.Create_foreign_server_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_create_foreign_server_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4335
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4336
            self.match(TeradataSQLDDLParser.FOREIGN)
            self.state = 4337
            self.match(TeradataSQLDDLParser.SERVER)
            self.state = 4339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 4338
                self.td_server_db()


            self.state = 4341
            localctx.server_name = self.unqualified_name()
            self.state = 4343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 4342
                self.foreign_server_external_security_clause()


            self.state = 4346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 4345
                self.foreign_server_using_clause()


            self.state = 4358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 4348
                self.do_import_with()
                self.state = 4351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4349
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4350
                    self.do_export_with()



            elif la_ == 2:
                self.state = 4353
                self.do_export_with()
                self.state = 4356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4354
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4355
                    self.do_import_with()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_external_security_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext

        def EXTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.EXTERNAL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLDDLParser.TRUSTED, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_external_security_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_external_security_clause" ):
                listener.enterForeign_server_external_security_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_external_security_clause" ):
                listener.exitForeign_server_external_security_clause(self)




    def foreign_server_external_security_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_server_external_security_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_foreign_server_external_security_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4360
            self.match(TeradataSQLDDLParser.EXTERNAL)
            self.state = 4361
            self.match(TeradataSQLDDLParser.SECURITY)
            self.state = 4363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==624 or _la==713:
                self.state = 4362
                _la = self._input.LA(1)
                if not(_la==624 or _la==713):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4365
            self.match(TeradataSQLDDLParser.TRUSTED)
            self.state = 4366
            localctx.authorization_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def foreign_server_using_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_server_using_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_using_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_using_clause" ):
                listener.enterForeign_server_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_using_clause" ):
                listener.exitForeign_server_using_clause(self)




    def foreign_server_using_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_server_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_foreign_server_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4368
            self.match(TeradataSQLDDLParser.USING)
            self.state = 4370 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4369
                self.foreign_server_using_option()
                self.state = 4372 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1023 or _la==1192):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_using_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_option_value = None # Scalar_exprContext

        def foreign_server_option_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_option_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_using_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_using_option" ):
                listener.enterForeign_server_using_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_using_option" ):
                listener.exitForeign_server_using_option(self)




    def foreign_server_using_option(self):

        localctx = TeradataSQLDDLParser.Foreign_server_using_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_foreign_server_using_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4374
            self.foreign_server_option_name()
            self.state = 4375
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 4376
            localctx.foreign_option_value = self.scalar_expr(0)
            self.state = 4377
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_operator_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def foreign_server_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_operator_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_operator_option" ):
                listener.enterForeign_server_operator_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_operator_option" ):
                listener.exitForeign_server_operator_option(self)




    def foreign_server_operator_option(self):

        localctx = TeradataSQLDDLParser.Foreign_server_operator_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_foreign_server_operator_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4379
            self.function_name()
            self.state = 4381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 4380
                self.foreign_server_using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_import_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(TeradataSQLDDLParser.DO, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLDDLParser.IMPORT, 0)

        def foreign_server_with_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_with_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_do_import_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_import_with" ):
                listener.enterDo_import_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_import_with" ):
                listener.exitDo_import_with(self)




    def do_import_with(self):

        localctx = TeradataSQLDDLParser.Do_import_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_do_import_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4383
            self.match(TeradataSQLDDLParser.DO)
            self.state = 4384
            self.match(TeradataSQLDDLParser.IMPORT)
            self.state = 4385
            self.foreign_server_with_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_export_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(TeradataSQLDDLParser.DO, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDDLParser.EXPORT, 0)

        def foreign_server_with_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_with_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_do_export_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_export_with" ):
                listener.enterDo_export_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_export_with" ):
                listener.exitDo_export_with(self)




    def do_export_with(self):

        localctx = TeradataSQLDDLParser.Do_export_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_do_export_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4387
            self.match(TeradataSQLDDLParser.DO)
            self.state = 4388
            self.match(TeradataSQLDDLParser.EXPORT)
            self.state = 4389
            self.foreign_server_with_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_with_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def foreign_server_operator_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_server_operator_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_with_clause" ):
                listener.enterForeign_server_with_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_with_clause" ):
                listener.exitForeign_server_with_clause(self)




    def foreign_server_with_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_server_with_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_foreign_server_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4391
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 4392
            self.foreign_server_operator_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINK(self):
            return self.getToken(TeradataSQLDDLParser.LINK, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDDLParser.VERSION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_server_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_option_name" ):
                listener.enterForeign_server_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_option_name" ):
                listener.exitForeign_server_option_name(self)




    def foreign_server_option_name(self):

        localctx = TeradataSQLDDLParser.Foreign_server_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_foreign_server_option_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4394
            _la = self._input.LA(1)
            if not(_la==1023 or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_hash_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hash_index_name = None # Table_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts
            self.by_column_name = list() # of Unqualified_nameContexts
            self.order_column_name = list() # of Unqualified_nameContexts

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def HASH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.HASH)
            else:
                return self.getToken(TeradataSQLDDLParser.HASH, i)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def table_option_index_form(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_option_index_formContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_option_index_formContext,i)


        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.BY)
            else:
                return self.getToken(TeradataSQLDDLParser.BY, i)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_hash_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_hash_index_stat" ):
                listener.enterCreate_hash_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_hash_index_stat" ):
                listener.exitCreate_hash_index_stat(self)




    def create_hash_index_stat(self):

        localctx = TeradataSQLDDLParser.Create_hash_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_create_hash_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4396
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4397
            self.match(TeradataSQLDDLParser.HASH)
            self.state = 4398
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 4399
            localctx.hash_index_name = self.table_name()
            self.state = 4404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4400
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4401
                self.table_option_index_form()
                self.state = 4406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4407
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 4408
            localctx._unqualified_name = self.unqualified_name()
            localctx.index_column_name.append(localctx._unqualified_name)
            self.state = 4413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4409
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4410
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4416
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 4417
            self.match(TeradataSQLDDLParser.ON)
            self.state = 4418
            self.table_name()
            self.state = 4429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 4419
                self.match(TeradataSQLDDLParser.BY)
                self.state = 4420
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4421
                localctx._unqualified_name = self.unqualified_name()
                localctx.by_column_name.append(localctx._unqualified_name)
                self.state = 4426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4422
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4423
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.by_column_name.append(localctx._unqualified_name)
                    self.state = 4428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 4431
                self.match(TeradataSQLDDLParser.ORDER)
                self.state = 4432
                self.match(TeradataSQLDDLParser.BY)
                self.state = 4448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 4433
                    self.match(TeradataSQLDDLParser.VALUES)
                    pass

                elif la_ == 2:
                    self.state = 4435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==178 or _la==460:
                        self.state = 4434
                        _la = self._input.LA(1)
                        if not(_la==178 or _la==460):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4437
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 4438
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.order_column_name.append(localctx._unqualified_name)
                    self.state = 4443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4439
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4440
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.order_column_name.append(localctx._unqualified_name)
                        self.state = 4445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4446
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,0)


        def EXTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.EXTERNAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_role_stat" ):
                listener.enterCreate_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_role_stat" ):
                listener.exitCreate_role_stat(self)




    def create_role_stat(self):

        localctx = TeradataSQLDDLParser.Create_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_create_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4452
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 4453
                self.match(TeradataSQLDDLParser.EXTERNAL)


            self.state = 4456
            self.match(TeradataSQLDDLParser.ROLE)
            self.state = 4457
            self.role_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_table_primary_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_table_primary_form_statContext,0)


        def create_table_as_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_table_as_statContext,0)


        def create_queue_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_queue_table_statContext,0)


        def create_global_temporary_trace_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_global_temporary_trace_table_statContext,0)


        def create_foreign_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_foreign_table_statContext,0)


        def create_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_error_table_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stat" ):
                listener.enterCreate_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stat" ):
                listener.exitCreate_table_stat(self)




    def create_table_stat(self):

        localctx = TeradataSQLDDLParser.Create_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_create_table_stat)
        try:
            self.state = 4465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4459
                self.create_table_primary_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4460
                self.create_table_as_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4461
                self.create_queue_table_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4462
                self.create_global_temporary_trace_table_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4463
                self.create_foreign_table_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4464
                self.create_error_table_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_primary_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_definitionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def CT(self):
            return self.getToken(TeradataSQLDDLParser.CT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_optionContext,i)


        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Index_definitionContext,i)


        def table_preservation(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_preservationContext,0)


        def table_kind(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_table_primary_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_primary_form_stat" ):
                listener.enterCreate_table_primary_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_primary_form_stat" ):
                listener.exitCreate_table_primary_form_stat(self)




    def create_table_primary_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_table_primary_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_create_table_primary_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 4467
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 4469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==372 or _la==469 or _la==687:
                    self.state = 4468
                    self.table_kind()


                self.state = 4471
                self.match(TeradataSQLDDLParser.TABLE)
                pass
            elif token in [90]:
                self.state = 4472
                self.match(TeradataSQLDDLParser.CT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4475
            self.table_name()
            self.state = 4480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4476
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4477
                self.table_option()
                self.state = 4482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4483
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 4484
            self.column_definition()
            self.state = 4489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4485
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4486
                self.column_definition()
                self.state = 4491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4492
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 4503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4493
                self.index_definition()
                self.state = 4500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4494
                        self.match(TeradataSQLDDLParser.COMMA)


                    self.state = 4497
                    self.index_definition()
                    self.state = 4502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 4505
                self.table_preservation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_as_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_table_name = None # Table_nameContext

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def DATA(self):
            return self.getToken(TeradataSQLDDLParser.DATA, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def CT(self):
            return self.getToken(TeradataSQLDDLParser.CT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_optionContext,i)


        def ctas_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ctas_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ctas_column_definitionContext,i)


        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NO)
            else:
                return self.getToken(TeradataSQLDDLParser.NO, i)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Index_definitionContext,i)


        def table_preservation(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_preservationContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def table_kind(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_kindContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_table_as_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_as_stat" ):
                listener.enterCreate_table_as_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_as_stat" ):
                listener.exitCreate_table_as_stat(self)




    def create_table_as_stat(self):

        localctx = TeradataSQLDDLParser.Create_table_as_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_create_table_as_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 4508
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 4510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==372 or _la==469 or _la==687:
                    self.state = 4509
                    self.table_kind()


                self.state = 4512
                self.match(TeradataSQLDDLParser.TABLE)
                pass
            elif token in [90]:
                self.state = 4513
                self.match(TeradataSQLDDLParser.CT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4516
            self.table_name()
            self.state = 4521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4517
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4518
                self.table_option()
                self.state = 4523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4524
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4525
                self.ctas_column_definition()
                self.state = 4530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4526
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4527
                    self.ctas_column_definition()
                    self.state = 4532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4533
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 4537
            self.match(TeradataSQLDDLParser.AS)
            self.state = 4546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 4538
                localctx.source_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 4539
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4540
                    self.with_request_modifier()


                self.state = 4543
                self.query_expr(0)
                self.state = 4544
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4548
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 4550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 4549
                self.match(TeradataSQLDDLParser.NO)


            self.state = 4552
            self.match(TeradataSQLDDLParser.DATA)
            self.state = 4558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 4553
                self.match(TeradataSQLDDLParser.AND)
                self.state = 4555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 4554
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 4557
                _la = self._input.LA(1)
                if not(_la==395 or _la==937 or _la==939):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4560
                self.index_definition()
                self.state = 4567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4561
                        self.match(TeradataSQLDDLParser.COMMA)


                    self.state = 4564
                    self.index_definition()
                    self.state = 4569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 4572
                self.table_preservation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_queue_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def QUEUE(self):
            return self.getToken(TeradataSQLDDLParser.QUEUE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def qits_definition(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Qits_definitionContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def CT(self):
            return self.getToken(TeradataSQLDDLParser.CT, 0)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_optionContext,i)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_definitionContext,i)


        def column_constraint_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_constraint_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_constraint_attributeContext,i)


        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Index_definitionContext,i)


        def table_kind(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_queue_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_queue_table_stat" ):
                listener.enterCreate_queue_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_queue_table_stat" ):
                listener.exitCreate_queue_table_stat(self)




    def create_queue_table_stat(self):

        localctx = TeradataSQLDDLParser.Create_queue_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_create_queue_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 4575
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 4577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==372 or _la==469 or _la==687:
                    self.state = 4576
                    self.table_kind()


                self.state = 4579
                self.match(TeradataSQLDDLParser.TABLE)
                pass
            elif token in [90]:
                self.state = 4580
                self.match(TeradataSQLDDLParser.CT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4583
            self.table_name()
            self.state = 4584
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 4585
            self.match(TeradataSQLDDLParser.QUEUE)
            self.state = 4590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4586
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4587
                self.table_option()
                self.state = 4592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4593
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 4594
            self.qits_definition()
            self.state = 4599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4595
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4596
                    self.column_definition() 
                self.state = 4601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

            self.state = 4606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4602
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4603
                self.column_constraint_attribute()
                self.state = 4608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4609
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 4620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4610
                self.index_definition()
                self.state = 4617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4611
                        self.match(TeradataSQLDDLParser.COMMA)


                    self.state = 4614
                    self.index_definition()
                    self.state = 4619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_global_temporary_trace_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLDDLParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def TRACE(self):
            return self.getToken(TeradataSQLDDLParser.TRACE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLDDLParser.PROC_ID, 0)

        def BYTE(self):
            return self.getToken(TeradataSQLDDLParser.BYTE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCE, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.INTEGER, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_optionContext,i)


        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_definitionContext,i)


        def table_preservation(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_preservationContext,0)


        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def MULTISET(self):
            return self.getToken(TeradataSQLDDLParser.MULTISET, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_global_temporary_trace_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_global_temporary_trace_table_stat" ):
                listener.enterCreate_global_temporary_trace_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_global_temporary_trace_table_stat" ):
                listener.exitCreate_global_temporary_trace_table_stat(self)




    def create_global_temporary_trace_table_stat(self):

        localctx = TeradataSQLDDLParser.Create_global_temporary_trace_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_create_global_temporary_trace_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4622
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261 or _la==372:
                self.state = 4623
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4626
            self.match(TeradataSQLDDLParser.GLOBAL)
            self.state = 4627
            self.match(TeradataSQLDDLParser.TEMPORARY)
            self.state = 4628
            self.match(TeradataSQLDDLParser.TRACE)
            self.state = 4629
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 4630
            self.table_name()
            self.state = 4635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4631
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4632
                self.table_option()
                self.state = 4637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4638
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 4639
            self.match(TeradataSQLDDLParser.PROC_ID)
            self.state = 4640
            self.match(TeradataSQLDDLParser.BYTE)
            self.state = 4642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4641
                self.type_precision()


            self.state = 4644
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 4645
            self.match(TeradataSQLDDLParser.SEQUENCE)
            self.state = 4646
            self.match(TeradataSQLDDLParser.INTEGER)
            self.state = 4651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4647
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4648
                self.column_definition()
                self.state = 4653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4654
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 4656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 4655
                self.table_preservation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_foreign_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def MULTISET(self):
            return self.getToken(TeradataSQLDDLParser.MULTISET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_optionContext,i)


        def foreign_table_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_table_external_security_clauseContext,0)


        def location_column(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Location_columnContext,0)


        def foreign_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_table_optionContext,i)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def payload_column(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Payload_columnContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_definitionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_foreign_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_foreign_table_stat" ):
                listener.enterCreate_foreign_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_foreign_table_stat" ):
                listener.exitCreate_foreign_table_stat(self)




    def create_foreign_table_stat(self):

        localctx = TeradataSQLDDLParser.Create_foreign_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_create_foreign_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4658
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 4659
                self.match(TeradataSQLDDLParser.MULTISET)


            self.state = 4662
            self.match(TeradataSQLDDLParser.FOREIGN)
            self.state = 4663
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 4664
            self.table_name()
            self.state = 4669
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,514,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4665
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4666
                    self.table_option() 
                self.state = 4671
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,514,self._ctx)

            self.state = 4674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 4672
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4673
                self.foreign_table_external_security_clause()


            self.state = 4692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4676
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4677
                self.location_column()
                self.state = 4678
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
                if la_ == 1:
                    self.state = 4679
                    self.payload_column()
                    pass

                elif la_ == 2:
                    self.state = 4680
                    self.column_definition()
                    self.state = 4685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4681
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4682
                        self.column_definition()
                        self.state = 4687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 4690
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 4694
            self.match(TeradataSQLDDLParser.USING)
            self.state = 4695
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 4696
            self.location()
            self.state = 4700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1131)) & ~0x3f) == 0 and ((1 << (_la - 1131)) & 127) != 0):
                self.state = 4697
                self.foreign_table_option()
                self.state = 4702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4703
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 4710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.state = 4705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4704
                    self.match(TeradataSQLDDLParser.COMMA)


                self.state = 4707
                self.match(TeradataSQLDDLParser.NO)
                self.state = 4708
                self.match(TeradataSQLDDLParser.PRIMARY)
                self.state = 4709
                self.match(TeradataSQLDDLParser.INDEX)


            self.state = 4718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840 or _la==1208:
                self.state = 4713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4712
                    self.match(TeradataSQLDDLParser.COMMA)


                self.state = 4715
                self.match(TeradataSQLDDLParser.PARTITION)
                self.state = 4716
                self.match(TeradataSQLDDLParser.BY)
                self.state = 4717
                self.match(TeradataSQLDDLParser.COLUMN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_error_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_table_name = None # Table_nameContext
            self.data_table_name = None # Table_nameContext

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def RLS(self):
            return self.getToken(TeradataSQLDDLParser.RLS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_error_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_error_table_stat" ):
                listener.enterCreate_error_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_error_table_stat" ):
                listener.exitCreate_error_table_stat(self)




    def create_error_table_stat(self):

        localctx = TeradataSQLDDLParser.Create_error_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_create_error_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4720
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 4721
            self.match(TeradataSQLDDLParser.ERROR)
            self.state = 4722
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 4724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 4723
                localctx.error_table_name = self.table_name()


            self.state = 4726
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 4727
            localctx.data_table_name = self.table_name()
            self.state = 4730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 4728
                self.match(TeradataSQLDDLParser.NO)
                self.state = 4729
                self.match(TeradataSQLDDLParser.RLS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def MULTISET(self):
            return self.getToken(TeradataSQLDDLParser.MULTISET, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLDDLParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def VOLATILE(self):
            return self.getToken(TeradataSQLDDLParser.VOLATILE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_kind" ):
                listener.enterTable_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_kind" ):
                listener.exitTable_kind(self)




    def table_kind(self):

        localctx = TeradataSQLDDLParser.Table_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_table_kind)
        self._la = 0 # Token type
        try:
            self.state = 4750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4732
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4736
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [687]:
                    self.state = 4733
                    self.match(TeradataSQLDDLParser.GLOBAL)
                    self.state = 4734
                    self.match(TeradataSQLDDLParser.TEMPORARY)
                    pass
                elif token in [469]:
                    self.state = 4735
                    self.match(TeradataSQLDDLParser.VOLATILE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [687]:
                    self.state = 4738
                    self.match(TeradataSQLDDLParser.GLOBAL)
                    self.state = 4739
                    self.match(TeradataSQLDDLParser.TEMPORARY)
                    pass
                elif token in [469]:
                    self.state = 4740
                    self.match(TeradataSQLDDLParser.VOLATILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4743
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4744
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [687]:
                    self.state = 4745
                    self.match(TeradataSQLDDLParser.GLOBAL)
                    self.state = 4746
                    self.match(TeradataSQLDDLParser.TEMPORARY)
                    pass
                elif token in [469]:
                    self.state = 4747
                    self.match(TeradataSQLDDLParser.VOLATILE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_specContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLDDLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def LOG(self):
            return self.getToken(TeradataSQLDDLParser.LOG, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.After_journalContext,0)


        def CHECKSUM(self):
            return self.getToken(TeradataSQLDDLParser.CHECKSUM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLDDLParser.OFF, 0)

        def FREESPACE(self):
            return self.getToken(TeradataSQLDDLParser.FREESPACE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def mergeblockratio(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.MergeblockratioContext,0)


        def datablocksize(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.DatablocksizeContext,0)


        def block_compression(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Block_compressionContext,0)


        def table_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_isolated_loadingContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option" ):
                listener.enterTable_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option" ):
                listener.exitTable_option(self)




    def table_option(self):

        localctx = TeradataSQLDDLParser.Table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_table_option)
        self._la = 0 # Token type
        try:
            self.state = 4778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4752
                self.map_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4753
                self.fallback_protection()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4754
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 4755
                self.match(TeradataSQLDDLParser.JOURNAL)
                self.state = 4756
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 4757
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4758
                localctx.journal_table_name = self.table_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 4759
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 4762
                self.match(TeradataSQLDDLParser.LOG)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4763
                self.before_journal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4764
                self.after_journal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4765
                self.match(TeradataSQLDDLParser.CHECKSUM)
                self.state = 4766
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4767
                _la = self._input.LA(1)
                if not(_la==111 or _la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4768
                self.match(TeradataSQLDDLParser.FREESPACE)
                self.state = 4769
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 4770
                self.integer_literal()
                self.state = 4772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 4771
                    self.match(TeradataSQLDDLParser.PERCENT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4774
                self.mergeblockratio()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4775
                self.datablocksize()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4776
                self.block_compression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4777
                self.table_isolated_loading()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.period_name = None # Unqualified_nameContext
            self.period_begin_column = None # Unqualified_nameContext
            self.period_end_column = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def column_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_attributeContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def normalize_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Normalize_optionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = TeradataSQLDDLParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.state = 4829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4780
                localctx.name = self.unqualified_name()
                self.state = 4784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,533,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4781
                        self.column_attribute() 
                    self.state = 4786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,533,self._ctx)

                self.state = 4787
                self.data_type()
                self.state = 4791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4788
                    self.column_attribute()
                    self.state = 4793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4794
                _la = self._input.LA(1)
                if not(_la==69 or _la==361):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4795
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4796
                localctx.name = self.unqualified_name()
                self.state = 4800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,535,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4797
                        self.column_attribute() 
                    self.state = 4802
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,535,self._ctx)

                self.state = 4803
                self.data_type()
                self.state = 4807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4804
                    self.column_attribute()
                    self.state = 4809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4810
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 4816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 4812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4811
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 4814
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 4815
                    self.match(TeradataSQLDDLParser.COMPRESS)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4818
                self.match(TeradataSQLDDLParser.PERIOD)
                self.state = 4819
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 4820
                localctx.period_name = self.unqualified_name()
                self.state = 4821
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4822
                localctx.period_begin_column = self.unqualified_name()
                self.state = 4823
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 4824
                localctx.period_end_column = self.unqualified_name()
                self.state = 4825
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4827
                self.normalize_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4828
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctas_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def column_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_attributeContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ctas_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtas_column_definition" ):
                listener.enterCtas_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtas_column_definition" ):
                listener.exitCtas_column_definition(self)




    def ctas_column_definition(self):

        localctx = TeradataSQLDDLParser.Ctas_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_ctas_column_definition)
        self._la = 0 # Token type
        try:
            self.state = 4856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4831
                localctx.name = self.unqualified_name()
                self.state = 4835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4832
                    self.column_attribute()
                    self.state = 4837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [69, 361]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4838
                _la = self._input.LA(1)
                if not(_la==69 or _la==361):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4839
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4840
                localctx.name = self.unqualified_name()
                self.state = 4844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4841
                    self.column_attribute()
                    self.state = 4846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4847
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 4853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 4849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4848
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 4851
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 4852
                    self.match(TeradataSQLDDLParser.COMPRESS)


                pass
            elif token in [59, 74, 160, 308, 448]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4855
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def AMP(self):
            return self.getToken(TeradataSQLDDLParser.AMP, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def partitioning_level(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Partitioning_levelContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Partitioning_levelContext,i)


        def index_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_loadingContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_orderingContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_index_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_definition" ):
                listener.enterIndex_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_definition" ):
                listener.exitIndex_definition(self)




    def index_definition(self):

        localctx = TeradataSQLDDLParser.Index_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_index_definition)
        self._la = 0 # Token type
        try:
            self.state = 4959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 4858
                    self.match(TeradataSQLDDLParser.UNIQUE)


                self.state = 4862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308:
                    self.state = 4861
                    self.match(TeradataSQLDDLParser.PRIMARY)


                self.state = 4864
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 4866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4865
                    localctx.index_name = self.unqualified_name()


                self.state = 4868
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4869
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4870
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4871
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4877
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4879
                self.match(TeradataSQLDDLParser.NO)
                self.state = 4880
                self.match(TeradataSQLDDLParser.PRIMARY)
                self.state = 4881
                self.match(TeradataSQLDDLParser.INDEX)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4882
                self.match(TeradataSQLDDLParser.PRIMARY)
                self.state = 4883
                self.match(TeradataSQLDDLParser.AMP)
                self.state = 4885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 4884
                    self.match(TeradataSQLDDLParser.INDEX)


                self.state = 4888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4887
                    localctx.index_name = self.unqualified_name()


                self.state = 4890
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4891
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4892
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4893
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4899
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4901
                self.match(TeradataSQLDDLParser.PARTITION)
                self.state = 4902
                self.match(TeradataSQLDDLParser.BY)
                self.state = 4915
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [48, 69, 320]:
                    self.state = 4903
                    self.partitioning_level()
                    pass
                elif token in [1213]:
                    self.state = 4904
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 4905
                    self.partitioning_level()
                    self.state = 4910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4906
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4907
                        self.partitioning_level()
                        self.state = 4912
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4913
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4917
                self.match(TeradataSQLDDLParser.UNIQUE)
                self.state = 4918
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 4920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
                if la_ == 1:
                    self.state = 4919
                    localctx.index_name = self.unqualified_name()


                self.state = 4933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 4922
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 4923
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4924
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 4925
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.index_column_name.append(localctx._unqualified_name)
                        self.state = 4930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4931
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                self.state = 4936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4935
                    self.index_loading()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4938
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 4940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4939
                    localctx.index_name = self.unqualified_name()


                self.state = 4942
                self.match(TeradataSQLDDLParser.ALL)
                self.state = 4943
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 4944
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4945
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 4946
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4952
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 4954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 4953
                    self.index_ordering()


                self.state = 4957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4956
                    self.index_loading()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qits_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qits_column_name = None # Column_nameContext

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT_TIMESTAMP, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,i)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_time_zoneContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_qits_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQits_definition" ):
                listener.enterQits_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQits_definition" ):
                listener.exitQits_definition(self)




    def qits_definition(self):

        localctx = TeradataSQLDDLParser.Qits_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_qits_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4961
            localctx.qits_column_name = self.column_name()
            self.state = 4962
            self.match(TeradataSQLDDLParser.TIMESTAMP)
            self.state = 4964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4963
                self.type_precision()


            self.state = 4967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 4966
                self.with_time_zone()


            self.state = 4969
            self.match(TeradataSQLDDLParser.NOT)
            self.state = 4970
            self.match(TeradataSQLDDLParser.NULL)
            self.state = 4971
            self.match(TeradataSQLDDLParser.DEFAULT)
            self.state = 4972
            self.match(TeradataSQLDDLParser.CURRENT_TIMESTAMP)
            self.state = 4974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4973
                self.type_precision()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_external_security_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext

        def EXTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.EXTERNAL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def TRUSTED(self):
            return self.getToken(TeradataSQLDDLParser.TRUSTED, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_table_external_security_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_external_security_clause" ):
                listener.enterForeign_table_external_security_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_external_security_clause" ):
                listener.exitForeign_table_external_security_clause(self)




    def foreign_table_external_security_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_table_external_security_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_foreign_table_external_security_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4976
            self.match(TeradataSQLDDLParser.EXTERNAL)
            self.state = 4977
            self.match(TeradataSQLDDLParser.SECURITY)
            self.state = 4980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
            if la_ == 1:
                self.state = 4978
                _la = self._input.LA(1)
                if not(_la==624 or _la==713):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4979
                self.match(TeradataSQLDDLParser.TRUSTED)


            self.state = 4982
            localctx.authorization_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Location_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(TeradataSQLDDLParser.LOCATION, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLDDLParser.VARCHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.CASESPECIFIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_location_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation_column" ):
                listener.enterLocation_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation_column" ):
                listener.exitLocation_column(self)




    def location_column(self):

        localctx = TeradataSQLDDLParser.Location_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_location_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4984
            self.match(TeradataSQLDDLParser.LOCATION)
            self.state = 4985
            self.match(TeradataSQLDDLParser.VARCHAR)
            self.state = 4986
            self.type_precision()
            self.state = 4987
            self.match(TeradataSQLDDLParser.CHARACTER)
            self.state = 4988
            self.match(TeradataSQLDDLParser.SET)
            self.state = 4989
            self.match(TeradataSQLDDLParser.UNICODE)
            self.state = 4990
            self.match(TeradataSQLDDLParser.CASESPECIFIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Payload_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAYLOAD(self):
            return self.getToken(TeradataSQLDDLParser.PAYLOAD, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Inline_lengthContext,0)


        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDDLParser.DATASET, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLDDLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDDLParser.FORMAT, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDDLParser.CSV, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_payload_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayload_column" ):
                listener.enterPayload_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayload_column" ):
                listener.exitPayload_column(self)




    def payload_column(self):

        localctx = TeradataSQLDDLParser.Payload_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_payload_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4992
            self.match(TeradataSQLDDLParser.PAYLOAD)
            self.state = 5010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [720]:
                self.state = 4993
                self.match(TeradataSQLDDLParser.JSON)
                self.state = 4994
                self.type_precision()
                self.state = 4995
                self.inline_length()
                self.state = 4996
                self.match(TeradataSQLDDLParser.CHARACTER)
                self.state = 4997
                self.match(TeradataSQLDDLParser.SET)
                self.state = 4998
                _la = self._input.LA(1)
                if not(_la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [607]:
                self.state = 5000
                self.match(TeradataSQLDDLParser.DATASET)
                self.state = 5001
                self.type_precision()
                self.state = 5002
                self.inline_length()
                self.state = 5003
                self.match(TeradataSQLDDLParser.STORAGE)
                self.state = 5004
                self.match(TeradataSQLDDLParser.FORMAT)
                self.state = 5005
                self.match(TeradataSQLDDLParser.CSV)
                self.state = 5006
                self.match(TeradataSQLDDLParser.CHARACTER)
                self.state = 5007
                self.match(TeradataSQLDDLParser.SET)
                self.state = 5008
                _la = self._input.LA(1)
                if not(_la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path_pattern = None # Token
            self.manifest = None # Token
            self.encoding_format = None # Token
            self.stored_as = None # Token
            self.header = None # Token
            self.strip_exterior_spaces = None # Token
            self.strip_enclosing_char = None # Token

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLDDLParser.PATHPATTERN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDDLParser.CHAR_STRING, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDDLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDDLParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDDLParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDDLParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLDDLParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLDDLParser.STRIP_ENCLOSING_CHAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_option" ):
                listener.enterForeign_table_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_option" ):
                listener.exitForeign_table_option(self)




    def foreign_table_option(self):

        localctx = TeradataSQLDDLParser.Foreign_table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_foreign_table_option)
        try:
            self.state = 5040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5012
                self.match(TeradataSQLDDLParser.PATHPATTERN)
                self.state = 5013
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5014
                localctx.path_pattern = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5015
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5016
                self.match(TeradataSQLDDLParser.MANIFEST)
                self.state = 5017
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5018
                localctx.manifest = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5019
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5020
                self.match(TeradataSQLDDLParser.ROWFORMAT)
                self.state = 5021
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5022
                localctx.encoding_format = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5023
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5024
                self.match(TeradataSQLDDLParser.STOREDAS)
                self.state = 5025
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5026
                localctx.stored_as = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5027
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5028
                self.match(TeradataSQLDDLParser.HEADER)
                self.state = 5029
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5030
                localctx.header = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5031
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1136]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5032
                self.match(TeradataSQLDDLParser.STRIP_EXTERIOR_SPACES)
                self.state = 5033
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5034
                localctx.strip_exterior_spaces = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5035
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1137]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5036
                self.match(TeradataSQLDDLParser.STRIP_ENCLOSING_CHAR)
                self.state = 5037
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5038
                localctx.strip_enclosing_char = self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 5039
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_preservationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def COMMIT(self):
            return self.getToken(TeradataSQLDDLParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDDLParser.ROWS, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLDDLParser.PRESERVE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_preservation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_preservation" ):
                listener.enterTable_preservation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_preservation" ):
                listener.exitTable_preservation(self)




    def table_preservation(self):

        localctx = TeradataSQLDDLParser.Table_preservationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_table_preservation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5042
            self.match(TeradataSQLDDLParser.ON)
            self.state = 5043
            self.match(TeradataSQLDDLParser.COMMIT)
            self.state = 5044
            _la = self._input.LA(1)
            if not(_la==115 or _la==307):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5045
            self.match(TeradataSQLDDLParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeblockratioContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLDDLParser.MERGEBLOCKRATIO, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_mergeblockratio

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeblockratio" ):
                listener.enterMergeblockratio(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeblockratio" ):
                listener.exitMergeblockratio(self)




    def mergeblockratio(self):

        localctx = TeradataSQLDDLParser.MergeblockratioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_mergeblockratio)
        self._la = 0 # Token type
        try:
            self.state = 5057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5047
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5048
                self.match(TeradataSQLDDLParser.MERGEBLOCKRATIO)
                pass
            elif token in [767]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5049
                self.match(TeradataSQLDDLParser.MERGEBLOCKRATIO)
                self.state = 5050
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5051
                self.integer_literal()
                self.state = 5053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 5052
                    self.match(TeradataSQLDDLParser.PERCENT)


                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5055
                self.match(TeradataSQLDDLParser.NO)
                self.state = 5056
                self.match(TeradataSQLDDLParser.MERGEBLOCKRATIO)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatablocksizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data_block_size = None # Integer_literalContext

        def DATABLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DATABLOCKSIZE)
            else:
                return self.getToken(TeradataSQLDDLParser.DATABLOCKSIZE, i)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def MINIMUM(self):
            return self.getToken(TeradataSQLDDLParser.MINIMUM, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLDDLParser.MAXIMUM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLDDLParser.BYTES, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLDDLParser.KBYTES, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLDDLParser.KILOBYTES, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_datablocksize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatablocksize" ):
                listener.enterDatablocksize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatablocksize" ):
                listener.exitDatablocksize(self)




    def datablocksize(self):

        localctx = TeradataSQLDDLParser.DatablocksizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_datablocksize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5059
            self.match(TeradataSQLDDLParser.DATABLOCKSIZE)
            self.state = 5060
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 5067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 5061
                localctx.data_block_size = self.integer_literal()
                self.state = 5063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45 or _la==727 or _la==729:
                    self.state = 5062
                    _la = self._input.LA(1)
                    if not(_la==45 or _la==727 or _la==729):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [111, 239, 246]:
                self.state = 5065
                _la = self._input.LA(1)
                if not(_la==111 or _la==239 or _la==246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5066
                self.match(TeradataSQLDDLParser.DATABLOCKSIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_compressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Integer_literalContext

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLDDLParser.BLOCKCOMPRESSION, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLDDLParser.AUTOTEMP, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLDDLParser.MANUAL, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLDDLParser.ALWAYS, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLDDLParser.NEVER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLDDLParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLDDLParser.BLOCKCOMPRESSIONLEVEL, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLDDLParser.ZLIB, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLDDLParser.ELZS_H, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DEFAULT)
            else:
                return self.getToken(TeradataSQLDDLParser.DEFAULT, i)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_block_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_compression" ):
                listener.enterBlock_compression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_compression" ):
                listener.exitBlock_compression(self)




    def block_compression(self):

        localctx = TeradataSQLDDLParser.Block_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_block_compression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5069
            self.match(TeradataSQLDDLParser.BLOCKCOMPRESSION)
            self.state = 5070
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 5071
            _la = self._input.LA(1)
            if not(_la==502 or _la==544 or _la==754 or _la==791):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 5072
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 5073
                self.match(TeradataSQLDDLParser.BLOCKCOMPRESSIONALGORITHM)
                self.state = 5074
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5075
                _la = self._input.LA(1)
                if not(_la==111 or _la==647 or _la==1065):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
            if la_ == 1:
                self.state = 5078
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 5079
                self.match(TeradataSQLDDLParser.BLOCKCOMPRESSIONLEVEL)
                self.state = 5080
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5083
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1194]:
                    self.state = 5081
                    localctx.value = self.integer_literal()
                    pass
                elif token in [111]:
                    self.state = 5082
                    self.match(TeradataSQLDDLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_isolated_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_isolated_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_isolated_loading" ):
                listener.enterTable_isolated_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_isolated_loading" ):
                listener.exitTable_isolated_loading(self)




    def table_isolated_loading(self):

        localctx = TeradataSQLDDLParser.Table_isolated_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_table_isolated_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5087
            self.with_isolated_loading()
            self.state = 5090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 5088
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 5089
                _la = self._input.LA(1)
                if not(_la==13 or _la==198 or _la==269):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Format_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Title_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_value_control_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_phraseContext,0)


        def column_storage_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_storage_attributeContext,0)


        def column_constraint_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_constraint_attributeContext,0)


        def auto_column_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Auto_column_attributeContext,0)


        def identity_column_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Identity_column_attributeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_attribute" ):
                listener.enterColumn_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_attribute" ):
                listener.exitColumn_attribute(self)




    def column_attribute(self):

        localctx = TeradataSQLDDLParser.Column_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_column_attribute)
        try:
            self.state = 5102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,577,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5092
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5093
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5094
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5095
                self.title_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5096
                self.default_value_control_phrase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5097
                self.character_set_phrase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5098
                self.column_storage_attribute()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5099
                self.column_constraint_attribute()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5100
                self.auto_column_attribute()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5101
                self.identity_column_attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_storage_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.compress_udf = None # Table_nameContext
            self.decompress_udf = None # Table_nameContext

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def compressed_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Compressed_valueContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Compressed_valueContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def USING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.USING)
            else:
                return self.getToken(TeradataSQLDDLParser.USING, i)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.DECOMPRESS, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_storage_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_storage_attribute" ):
                listener.enterColumn_storage_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_storage_attribute" ):
                listener.exitColumn_storage_attribute(self)




    def column_storage_attribute(self):

        localctx = TeradataSQLDDLParser.Column_storage_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_column_storage_attribute)
        self._la = 0 # Token type
        try:
            self.state = 5128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,579,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5104
                self.match(TeradataSQLDDLParser.NO)
                self.state = 5105
                self.match(TeradataSQLDDLParser.COMPRESS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5106
                self.match(TeradataSQLDDLParser.COMPRESS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5107
                self.match(TeradataSQLDDLParser.COMPRESS)
                self.state = 5108
                self.compressed_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5109
                self.match(TeradataSQLDDLParser.COMPRESS)
                self.state = 5110
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5111
                self.compressed_value()
                self.state = 5116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5112
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5113
                    self.compressed_value()
                    self.state = 5118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5119
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5121
                self.match(TeradataSQLDDLParser.COMPRESS)
                self.state = 5122
                self.match(TeradataSQLDDLParser.USING)
                self.state = 5123
                localctx.compress_udf = self.table_name()
                self.state = 5124
                self.match(TeradataSQLDDLParser.DECOMPRESS)
                self.state = 5125
                self.match(TeradataSQLDDLParser.USING)
                self.state = 5126
                localctx.decompress_udf = self.table_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compressed_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Float_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_compressed_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompressed_value" ):
                listener.enterCompressed_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompressed_value" ):
                listener.exitCompressed_value(self)




    def compressed_value(self):

        localctx = TeradataSQLDDLParser.Compressed_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_compressed_value)
        try:
            self.state = 5136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5130
                self.match(TeradataSQLDDLParser.MINUS_SIGN)
                self.state = 5131
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5132
                self.match(TeradataSQLDDLParser.MINUS_SIGN)
                self.state = 5133
                self.float_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5134
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5135
                self.match(TeradataSQLDDLParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraint_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.row_level_security_constraint_column_name = list() # of Unqualified_nameContexts

        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(TeradataSQLDDLParser.KEY, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def references(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.ReferencesContext,0)


        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CONSTRAINT)
            else:
                return self.getToken(TeradataSQLDDLParser.CONSTRAINT, i)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_constraint_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint_attribute" ):
                listener.enterColumn_constraint_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint_attribute" ):
                listener.exitColumn_constraint_attribute(self)




    def column_constraint_attribute(self):

        localctx = TeradataSQLDDLParser.Column_constraint_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_column_constraint_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 5138
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 5139
                localctx.constraint_name = self.unqualified_name()


            self.state = 5161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [448]:
                self.state = 5142
                self.match(TeradataSQLDDLParser.UNIQUE)
                pass
            elif token in [308]:
                self.state = 5143
                self.match(TeradataSQLDDLParser.PRIMARY)
                self.state = 5144
                self.match(TeradataSQLDDLParser.KEY)
                pass
            elif token in [59]:
                self.state = 5145
                self.match(TeradataSQLDDLParser.CHECK)
                self.state = 5146
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5147
                self.logical_expr(0)
                self.state = 5148
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [325]:
                self.state = 5150
                self.references()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5151
                localctx._unqualified_name = self.unqualified_name()
                localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                self.state = 5156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5152
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5153
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                    self.state = 5158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5159
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_column_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_auto_column_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_column_attribute" ):
                listener.enterAuto_column_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_column_attribute" ):
                listener.exitAuto_column_attribute(self)




    def auto_column_attribute(self):

        localctx = TeradataSQLDDLParser.Auto_column_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_auto_column_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272:
                self.state = 5163
                self.match(TeradataSQLDDLParser.NOT)


            self.state = 5166
            self.match(TeradataSQLDDLParser.AUTO)
            self.state = 5167
            self.match(TeradataSQLDDLParser.COLUMN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identity_column_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.start_with = None # Id_column_valueContext
            self.increment_by = None # Id_column_valueContext
            self.minvalue = None # Id_column_valueContext
            self.maxvalue = None # Id_column_valueContext

        def GENERATED(self):
            return self.getToken(TeradataSQLDDLParser.GENERATED, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def IDENTITY(self):
            return self.getToken(TeradataSQLDDLParser.IDENTITY, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLDDLParser.ALWAYS, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.BY)
            else:
                return self.getToken(TeradataSQLDDLParser.BY, i)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def START(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.START)
            else:
                return self.getToken(TeradataSQLDDLParser.START, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WITH)
            else:
                return self.getToken(TeradataSQLDDLParser.WITH, i)

        def INCREMENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.INCREMENT)
            else:
                return self.getToken(TeradataSQLDDLParser.INCREMENT, i)

        def MINVALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.MINVALUE)
            else:
                return self.getToken(TeradataSQLDDLParser.MINVALUE, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NO)
            else:
                return self.getToken(TeradataSQLDDLParser.NO, i)

        def MAXVALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.MAXVALUE)
            else:
                return self.getToken(TeradataSQLDDLParser.MAXVALUE, i)

        def CYCLE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CYCLE)
            else:
                return self.getToken(TeradataSQLDDLParser.CYCLE, i)

        def id_column_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Id_column_valueContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Id_column_valueContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_identity_column_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentity_column_attribute" ):
                listener.enterIdentity_column_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentity_column_attribute" ):
                listener.exitIdentity_column_attribute(self)




    def identity_column_attribute(self):

        localctx = TeradataSQLDDLParser.Identity_column_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_identity_column_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5169
            self.match(TeradataSQLDDLParser.GENERATED)
            self.state = 5173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [502]:
                self.state = 5170
                self.match(TeradataSQLDDLParser.ALWAYS)
                pass
            elif token in [42]:
                self.state = 5171
                self.match(TeradataSQLDDLParser.BY)
                self.state = 5172
                self.match(TeradataSQLDDLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5175
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5176
            self.match(TeradataSQLDDLParser.IDENTITY)
            self.state = 5177
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5196 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
                if la_ == 1:
                    self.state = 5178
                    self.match(TeradataSQLDDLParser.START)
                    self.state = 5179
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 5180
                    localctx.start_with = self.id_column_value()
                    pass

                elif la_ == 2:
                    self.state = 5181
                    self.match(TeradataSQLDDLParser.INCREMENT)
                    self.state = 5182
                    self.match(TeradataSQLDDLParser.BY)
                    self.state = 5183
                    localctx.increment_by = self.id_column_value()
                    pass

                elif la_ == 3:
                    self.state = 5184
                    self.match(TeradataSQLDDLParser.MINVALUE)
                    self.state = 5185
                    localctx.minvalue = self.id_column_value()
                    pass

                elif la_ == 4:
                    self.state = 5186
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 5187
                    self.match(TeradataSQLDDLParser.MINVALUE)
                    pass

                elif la_ == 5:
                    self.state = 5188
                    self.match(TeradataSQLDDLParser.MAXVALUE)
                    self.state = 5189
                    localctx.maxvalue = self.id_column_value()
                    pass

                elif la_ == 6:
                    self.state = 5190
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 5191
                    self.match(TeradataSQLDDLParser.MAXVALUE)
                    pass

                elif la_ == 7:
                    self.state = 5193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5192
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 5195
                    self.match(TeradataSQLDDLParser.CYCLE)
                    pass


                self.state = 5198 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==101 or _la==268 or _la==392 or _la==702 or _la==761 or _la==772):
                    break

            self.state = 5200
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_column_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_id_column_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_column_value" ):
                listener.enterId_column_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_column_value" ):
                listener.exitId_column_value(self)




    def id_column_value(self):

        localctx = TeradataSQLDDLParser.Id_column_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_id_column_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1221 or _la==1222:
                self.state = 5202
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5205
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Normalize_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unqualified_name = None # Unqualified_nameContext
            self.normalize_ignore_column_name = list() # of Unqualified_nameContexts
            self.normalize_column = None # Unqualified_nameContext

        def NORMALIZE(self):
            return self.getToken(TeradataSQLDDLParser.NORMALIZE, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ON)
            else:
                return self.getToken(TeradataSQLDDLParser.ON, i)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDDLParser.BUT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDDLParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLDDLParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDDLParser.OVERLAPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_normalize_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize_option" ):
                listener.enterNormalize_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize_option" ):
                listener.exitNormalize_option(self)




    def normalize_option(self):

        localctx = TeradataSQLDDLParser.Normalize_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_normalize_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5207
            self.match(TeradataSQLDDLParser.NORMALIZE)
            self.state = 5221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 5208
                self.match(TeradataSQLDDLParser.ALL)
                self.state = 5209
                self.match(TeradataSQLDDLParser.BUT)
                self.state = 5210
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5211
                localctx._unqualified_name = self.unqualified_name()
                localctx.normalize_ignore_column_name.append(localctx._unqualified_name)
                self.state = 5216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5212
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5213
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.normalize_ignore_column_name.append(localctx._unqualified_name)
                    self.state = 5218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5219
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 5223
            self.match(TeradataSQLDDLParser.ON)
            self.state = 5224
            localctx.normalize_column = self.unqualified_name()
            self.state = 5236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 5225
                self.match(TeradataSQLDDLParser.ON)
                self.state = 5234
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [765]:
                    self.state = 5226
                    self.match(TeradataSQLDDLParser.MEETS)
                    self.state = 5227
                    self.match(TeradataSQLDDLParser.OR)
                    self.state = 5228
                    self.match(TeradataSQLDDLParser.OVERLAPS)
                    pass
                elif token in [296]:
                    self.state = 5229
                    self.match(TeradataSQLDDLParser.OVERLAPS)
                    self.state = 5232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==290:
                        self.state = 5230
                        self.match(TeradataSQLDDLParser.OR)
                        self.state = 5231
                        self.match(TeradataSQLDDLParser.MEETS)


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.constrained_column_name = list() # of Unqualified_nameContexts
            self.referencing_column = list() # of Unqualified_nameContexts

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TeradataSQLDDLParser.KEY, 0)

        def references(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.ReferencesContext,0)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLDDLParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = TeradataSQLDDLParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 5238
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 5239
                localctx.constraint_name = self.unqualified_name()


            self.state = 5277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [308, 448]:
                self.state = 5245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [448]:
                    self.state = 5242
                    self.match(TeradataSQLDDLParser.UNIQUE)
                    pass
                elif token in [308]:
                    self.state = 5243
                    self.match(TeradataSQLDDLParser.PRIMARY)
                    self.state = 5244
                    self.match(TeradataSQLDDLParser.KEY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5247
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5248
                localctx._unqualified_name = self.unqualified_name()
                localctx.constrained_column_name.append(localctx._unqualified_name)
                self.state = 5253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5249
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5250
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.constrained_column_name.append(localctx._unqualified_name)
                    self.state = 5255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5256
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [59]:
                self.state = 5258
                self.match(TeradataSQLDDLParser.CHECK)
                self.state = 5259
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5260
                self.logical_expr(0)
                self.state = 5261
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [160]:
                self.state = 5263
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 5264
                self.match(TeradataSQLDDLParser.KEY)
                self.state = 5265
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5266
                localctx._unqualified_name = self.unqualified_name()
                localctx.referencing_column.append(localctx._unqualified_name)
                self.state = 5271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5267
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5268
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.referencing_column.append(localctx._unqualified_name)
                    self.state = 5273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5274
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 5275
                self.references()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.referenced_table_name = None # Table_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.referenced_column_name = list() # of Unqualified_nameContexts

        def REFERENCES(self):
            return self.getToken(TeradataSQLDDLParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)




    def references(self):

        localctx = TeradataSQLDDLParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5279
            self.match(TeradataSQLDDLParser.REFERENCES)
            self.state = 5286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 5280
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 5282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 5281
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 5284
                self.match(TeradataSQLDDLParser.CHECK)
                self.state = 5285
                self.match(TeradataSQLDDLParser.OPTION)


            self.state = 5288
            localctx.referenced_table_name = self.table_name()
            self.state = 5300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
            if la_ == 1:
                self.state = 5289
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5290
                localctx._unqualified_name = self.unqualified_name()
                localctx.referenced_column_name.append(localctx._unqualified_name)
                self.state = 5295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5291
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5292
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.referenced_column_name.append(localctx._unqualified_name)
                    self.state = 5297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5298
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constant = None # LiteralContext

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Partitioning_exprContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def column_partition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_partitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_partitionContext,i)


        def ADD(self):
            return self.getToken(TeradataSQLDDLParser.ADD, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDDLParser.BUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_partitioning_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_level" ):
                listener.enterPartitioning_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_level" ):
                listener.exitPartitioning_level(self)




    def partitioning_level(self):

        localctx = TeradataSQLDDLParser.Partitioning_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_partitioning_level)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
            if la_ == 1:
                self.state = 5302
                self.partitioning_expr()
                pass

            elif la_ == 2:
                self.state = 5303
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 5309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,605,self._ctx)
                if la_ == 1:
                    self.state = 5305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5304
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 5307
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 5308
                    self.match(TeradataSQLDDLParser.COMPRESS)


                pass

            elif la_ == 3:
                self.state = 5311
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 5317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 5313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5312
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 5315
                    self.match(TeradataSQLDDLParser.AUTO)
                    self.state = 5316
                    self.match(TeradataSQLDDLParser.COMPRESS)


                self.state = 5321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 5319
                    self.match(TeradataSQLDDLParser.ALL)
                    self.state = 5320
                    self.match(TeradataSQLDDLParser.BUT)


                self.state = 5323
                self.column_partition()
                self.state = 5328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,609,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5324
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 5325
                        self.column_partition() 
                    self.state = 5330
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,609,self._ctx)

                pass


            self.state = 5335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 5333
                self.match(TeradataSQLDDLParser.ADD)
                self.state = 5334
                localctx.constant = self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_partitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unqualified_name = None # Unqualified_nameContext
            self.partitioning_column_name = list() # of Unqualified_nameContexts

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_partition" ):
                listener.enterColumn_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_partition" ):
                listener.exitColumn_partition(self)




    def column_partition(self):

        localctx = TeradataSQLDDLParser.Column_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_column_partition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5337
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==361:
                self.state = 5338
                _la = self._input.LA(1)
                if not(_la==69 or _la==361):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5341
                localctx._unqualified_name = self.unqualified_name()
                localctx.partitioning_column_name.append(localctx._unqualified_name)
                pass
            elif token in [1213]:
                self.state = 5342
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5343
                localctx._unqualified_name = self.unqualified_name()
                localctx.partitioning_column_name.append(localctx._unqualified_name)
                self.state = 5348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5344
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5345
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.partitioning_column_name.append(localctx._unqualified_name)
                    self.state = 5350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5351
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268 or _la==543:
                self.state = 5356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 5355
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 5358
                self.match(TeradataSQLDDLParser.AUTO)
                self.state = 5359
                self.match(TeradataSQLDDLParser.COMPRESS)


            self.state = 5362
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_type_structured_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_structured_form_statContext,0)


        def create_type_distinct_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_distinct_form_statContext,0)


        def create_type_array_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_array_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_stat" ):
                listener.enterCreate_type_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_stat" ):
                listener.exitCreate_type_stat(self)




    def create_type_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_create_type_stat)
        try:
            self.state = 5367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5364
                self.create_type_structured_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5365
                self.create_type_distinct_form_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5366
                self.create_type_array_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_structured_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def type_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Type_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Type_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLDDLParser.FINAL, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANTIABLE, 0)

        def structured_method_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Structured_method_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Structured_method_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_structured_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_structured_form_stat" ):
                listener.enterCreate_type_structured_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_structured_form_stat" ):
                listener.exitCreate_type_structured_form_stat(self)




    def create_type_structured_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_structured_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_create_type_structured_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5369
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5370
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 5372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
            if la_ == 1:
                self.state = 5371
                self.sysudtlib()


            self.state = 5374
            self.udt_name()
            self.state = 5375
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5376
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5377
            self.type_attribute_spec()
            self.state = 5382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5378
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 5379
                self.type_attribute_spec()
                self.state = 5384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5385
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 5387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==710:
                self.state = 5386
                self.match(TeradataSQLDDLParser.INSTANTIABLE)


            self.state = 5389
            self.match(TeradataSQLDDLParser.NOT)
            self.state = 5390
            self.match(TeradataSQLDDLParser.FINAL)
            self.state = 5399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199 or _la==243:
                self.state = 5391
                self.structured_method_spec()
                self.state = 5396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5392
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5393
                    self.structured_method_spec()
                    self.state = 5398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_distinct_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def FINAL(self):
            return self.getToken(TeradataSQLDDLParser.FINAL, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def distinct_method_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Distinct_method_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_distinct_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_distinct_form_stat" ):
                listener.enterCreate_type_distinct_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_distinct_form_stat" ):
                listener.exitCreate_type_distinct_form_stat(self)




    def create_type_distinct_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_distinct_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_create_type_distinct_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5401
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5402
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 5404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,623,self._ctx)
            if la_ == 1:
                self.state = 5403
                self.sysudtlib()


            self.state = 5406
            self.udt_name()
            self.state = 5407
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5408
            self.data_type()
            self.state = 5409
            self.match(TeradataSQLDDLParser.FINAL)
            self.state = 5411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199 or _la==243:
                self.state = 5410
                self.distinct_method_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_array_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_type_one_dimensional_array_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_one_dimensional_array_form_statContext,0)


        def create_type_one_dimensional_varray_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_one_dimensional_varray_form_statContext,0)


        def create_type_multidimensional_array_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_multidimensional_array_form_statContext,0)


        def create_type_multidimensional_varray_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Create_type_multidimensional_varray_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_array_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_array_form_stat" ):
                listener.enterCreate_type_array_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_array_form_stat" ):
                listener.exitCreate_type_array_form_stat(self)




    def create_type_array_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_array_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_create_type_array_form_stat)
        try:
            self.state = 5417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,625,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5413
                self.create_type_one_dimensional_array_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5414
                self.create_type_one_dimensional_varray_form_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5415
                self.create_type_multidimensional_array_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5416
                self.create_type_multidimensional_varray_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_one_dimensional_array_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_of_elements = None # Integer_literalContext

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def ARRAY(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY, 0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)

        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_one_dimensional_array_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_one_dimensional_array_form_stat" ):
                listener.enterCreate_type_one_dimensional_array_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_one_dimensional_array_form_stat" ):
                listener.exitCreate_type_one_dimensional_array_form_stat(self)




    def create_type_one_dimensional_array_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_one_dimensional_array_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_create_type_one_dimensional_array_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5419
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5420
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 5422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,626,self._ctx)
            if la_ == 1:
                self.state = 5421
                self.sysudtlib()


            self.state = 5424
            self.udt_name()
            self.state = 5425
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5426
            self.data_type()
            self.state = 5427
            self.match(TeradataSQLDDLParser.ARRAY)
            self.state = 5428
            self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
            self.state = 5429
            localctx.number_of_elements = self.integer_literal()
            self.state = 5430
            self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
            self.state = 5433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5431
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5432
                self.match(TeradataSQLDDLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_one_dimensional_varray_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_of_elements = None # Integer_literalContext

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def OF(self):
            return self.getToken(TeradataSQLDDLParser.OF, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def VARYING(self):
            return self.getToken(TeradataSQLDDLParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLDDLParser.VARRAY, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_one_dimensional_varray_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_one_dimensional_varray_form_stat" ):
                listener.enterCreate_type_one_dimensional_varray_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_one_dimensional_varray_form_stat" ):
                listener.exitCreate_type_one_dimensional_varray_form_stat(self)




    def create_type_one_dimensional_varray_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_one_dimensional_varray_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_create_type_one_dimensional_varray_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5435
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5436
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 5438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
            if la_ == 1:
                self.state = 5437
                self.sysudtlib()


            self.state = 5440
            self.udt_name()
            self.state = 5441
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [467]:
                self.state = 5442
                self.match(TeradataSQLDDLParser.VARYING)
                self.state = 5443
                self.match(TeradataSQLDDLParser.ARRAY)
                pass
            elif token in [1021]:
                self.state = 5444
                self.match(TeradataSQLDDLParser.VARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5447
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5448
            localctx.number_of_elements = self.integer_literal()
            self.state = 5449
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 5450
            self.match(TeradataSQLDDLParser.OF)
            self.state = 5451
            self.data_type()
            self.state = 5454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5452
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5453
                self.match(TeradataSQLDDLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_multidimensional_array_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def ARRAY(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY, 0)

        def multidimensional_array_dimension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Multidimensional_array_dimensionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Multidimensional_array_dimensionContext,i)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_multidimensional_array_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_multidimensional_array_form_stat" ):
                listener.enterCreate_type_multidimensional_array_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_multidimensional_array_form_stat" ):
                listener.exitCreate_type_multidimensional_array_form_stat(self)




    def create_type_multidimensional_array_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_multidimensional_array_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_create_type_multidimensional_array_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5456
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5457
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 5459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
            if la_ == 1:
                self.state = 5458
                self.sysudtlib()


            self.state = 5461
            self.udt_name()
            self.state = 5462
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5463
            self.data_type()
            self.state = 5464
            self.match(TeradataSQLDDLParser.ARRAY)
            self.state = 5465
            self.multidimensional_array_dimension()
            self.state = 5467 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5466
                self.multidimensional_array_dimension()
                self.state = 5469 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1215):
                    break

            self.state = 5473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5471
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5472
                self.match(TeradataSQLDDLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_multidimensional_varray_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def multidimensional_varray_dimension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Multidimensional_varray_dimensionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Multidimensional_varray_dimensionContext,i)


        def OF(self):
            return self.getToken(TeradataSQLDDLParser.OF, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def VARYING(self):
            return self.getToken(TeradataSQLDDLParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLDDLParser.VARRAY, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_type_multidimensional_varray_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_multidimensional_varray_form_stat" ):
                listener.enterCreate_type_multidimensional_varray_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_multidimensional_varray_form_stat" ):
                listener.exitCreate_type_multidimensional_varray_form_stat(self)




    def create_type_multidimensional_varray_form_stat(self):

        localctx = TeradataSQLDDLParser.Create_type_multidimensional_varray_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_create_type_multidimensional_varray_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5475
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5476
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 5478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                self.state = 5477
                self.sysudtlib()


            self.state = 5480
            self.udt_name()
            self.state = 5481
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [467]:
                self.state = 5482
                self.match(TeradataSQLDDLParser.VARYING)
                self.state = 5483
                self.match(TeradataSQLDDLParser.ARRAY)
                pass
            elif token in [1021]:
                self.state = 5484
                self.match(TeradataSQLDDLParser.VARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5487
            self.multidimensional_varray_dimension()
            self.state = 5489 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5488
                self.multidimensional_varray_dimension()
                self.state = 5491 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1213):
                    break

            self.state = 5493
            self.match(TeradataSQLDDLParser.OF)
            self.state = 5494
            self.data_type()
            self.state = 5497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5495
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5496
                self.match(TeradataSQLDDLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_type_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_attribute_spec" ):
                listener.enterType_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_attribute_spec" ):
                listener.exitType_attribute_spec(self)




    def type_attribute_spec(self):

        localctx = TeradataSQLDDLParser.Type_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_type_attribute_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5499
            self.attribute_name()
            self.state = 5500
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Structured_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cast_from_data_type = None # Data_typeContext
            self.specific_method_name = None # Method_nameContext

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def returns_parameter_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Returns_parameter_specContext,0)


        def method_language_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_language_specContext,0)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,i)


        def method_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_parameter_specContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def SELF(self):
            return self.getToken(TeradataSQLDDLParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.AS)
            else:
                return self.getToken(TeradataSQLDDLParser.AS, i)

        def RESULT(self):
            return self.getToken(TeradataSQLDDLParser.RESULT, 0)

        def INSTANCE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRUCTOR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def method_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_attrContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDDLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_structured_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructured_method_spec" ):
                listener.enterStructured_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructured_method_spec" ):
                listener.exitStructured_method_spec(self)




    def structured_method_spec(self):

        localctx = TeradataSQLDDLParser.Structured_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_structured_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 5502
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5505
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 5507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.state = 5506
                self.sysudtlib()


            self.state = 5509
            self.method_name()
            self.state = 5510
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 5511
                self.method_parameter_spec()
                self.state = 5516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5512
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5513
                    self.method_parameter_spec()
                    self.state = 5518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5521
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 5522
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 5523
            self.returns_parameter_spec()
            self.state = 5531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 5524
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 5525
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 5526
                localctx.cast_from_data_type = self.data_type()
                self.state = 5529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5527
                    self.match(TeradataSQLDDLParser.AS)
                    self.state = 5528
                    self.match(TeradataSQLDDLParser.LOCATOR)




            self.state = 5538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
            if la_ == 1:
                self.state = 5533
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 5535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
                if la_ == 1:
                    self.state = 5534
                    self.sysudtlib()


                self.state = 5537
                localctx.specific_method_name = self.method_name()


            self.state = 5543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==912:
                self.state = 5540
                self.match(TeradataSQLDDLParser.SELF)
                self.state = 5541
                self.match(TeradataSQLDDLParser.AS)
                self.state = 5542
                self.match(TeradataSQLDDLParser.RESULT)


            self.state = 5569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.state = 5548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5545
                    self.method_attr()
                    self.state = 5550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5551
                self.method_language_spec()
                self.state = 5553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5552
                    self.method_attr()
                    self.state = 5555 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                pass

            elif la_ == 2:
                self.state = 5558 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5557
                    self.method_attr()
                    self.state = 5560 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                self.state = 5562
                self.method_language_spec()
                self.state = 5566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5563
                    self.method_attr()
                    self.state = 5568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distinct_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cast_from_data_type = None # Data_typeContext
            self.specific_method_name = None # Method_nameContext

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def returns_parameter_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Returns_parameter_specContext,0)


        def method_language_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_language_specContext,0)


        def INSTANCE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANCE, 0)

        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,i)


        def method_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_parameter_specContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def SELF(self):
            return self.getToken(TeradataSQLDDLParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.AS)
            else:
                return self.getToken(TeradataSQLDDLParser.AS, i)

        def RESULT(self):
            return self.getToken(TeradataSQLDDLParser.RESULT, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def method_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Method_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Method_attrContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDDLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_distinct_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct_method_spec" ):
                listener.enterDistinct_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct_method_spec" ):
                listener.exitDistinct_method_spec(self)




    def distinct_method_spec(self):

        localctx = TeradataSQLDDLParser.Distinct_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_distinct_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199:
                self.state = 5571
                self.match(TeradataSQLDDLParser.INSTANCE)


            self.state = 5574
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 5576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,653,self._ctx)
            if la_ == 1:
                self.state = 5575
                self.sysudtlib()


            self.state = 5578
            self.method_name()
            self.state = 5579
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 5580
                self.method_parameter_spec()
                self.state = 5585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5581
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5582
                    self.method_parameter_spec()
                    self.state = 5587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5590
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 5591
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 5592
            self.returns_parameter_spec()
            self.state = 5600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 5593
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 5594
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 5595
                localctx.cast_from_data_type = self.data_type()
                self.state = 5598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5596
                    self.match(TeradataSQLDDLParser.AS)
                    self.state = 5597
                    self.match(TeradataSQLDDLParser.LOCATOR)




            self.state = 5607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
            if la_ == 1:
                self.state = 5602
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 5604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
                if la_ == 1:
                    self.state = 5603
                    self.sysudtlib()


                self.state = 5606
                localctx.specific_method_name = self.method_name()


            self.state = 5612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==912:
                self.state = 5609
                self.match(TeradataSQLDDLParser.SELF)
                self.state = 5610
                self.match(TeradataSQLDDLParser.AS)
                self.state = 5611
                self.match(TeradataSQLDDLParser.RESULT)


            self.state = 5638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,665,self._ctx)
            if la_ == 1:
                self.state = 5617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5614
                    self.method_attr()
                    self.state = 5619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5620
                self.method_language_spec()
                self.state = 5622 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5621
                    self.method_attr()
                    self.state = 5624 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                pass

            elif la_ == 2:
                self.state = 5627 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5626
                    self.method_attr()
                    self.state = 5629 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                self.state = 5631
                self.method_language_spec()
                self.state = 5635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5632
                    self.method_attr()
                    self.state = 5637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDDLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_method_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_parameter_spec" ):
                listener.enterMethod_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_parameter_spec" ):
                listener.exitMethod_parameter_spec(self)




    def method_parameter_spec(self):

        localctx = TeradataSQLDDLParser.Method_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_method_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
            if la_ == 1:
                self.state = 5640
                self.parameter_name()


            self.state = 5643
            self.data_type()
            self.state = 5646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5644
                self.match(TeradataSQLDDLParser.AS)
                self.state = 5645
                self.match(TeradataSQLDDLParser.LOCATOR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDDLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_returns_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_parameter_spec" ):
                listener.enterReturns_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_parameter_spec" ):
                listener.exitReturns_parameter_spec(self)




    def returns_parameter_spec(self):

        localctx = TeradataSQLDDLParser.Returns_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_returns_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5648
            self.data_type()
            self.state = 5651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5649
                self.match(TeradataSQLDDLParser.AS)
                self.state = 5650
                self.match(TeradataSQLDDLParser.LOCATOR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLDDLParser.LANGUAGE, 0)

        def C(self):
            return self.getToken(TeradataSQLDDLParser.C, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDDLParser.CPP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_method_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_language_spec" ):
                listener.enterMethod_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_language_spec" ):
                listener.exitMethod_language_spec(self)




    def method_language_spec(self):

        localctx = TeradataSQLDDLParser.Method_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_method_language_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5653
            self.match(TeradataSQLDDLParser.LANGUAGE)
            self.state = 5654
            _la = self._input.LA(1)
            if not(_la==557 or _la==598):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.specific_method_name = None # Method_nameContext

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def PARAMETER(self):
            return self.getToken(TeradataSQLDDLParser.PARAMETER, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDDLParser.STYLE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLDDLParser.TD_GENERAL, 0)

        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLDDLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDDLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NULL)
            else:
                return self.getToken(TeradataSQLDDLParser.NULL, i)

        def INPUT(self):
            return self.getToken(TeradataSQLDDLParser.INPUT, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_method_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_attr" ):
                listener.enterMethod_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_attr" ):
                listener.exitMethod_attr(self)




    def method_attr(self):

        localctx = TeradataSQLDDLParser.Method_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_method_attr)
        self._la = 0 # Token type
        try:
            self.state = 5679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5656
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 5658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
                if la_ == 1:
                    self.state = 5657
                    self.sysudtlib()


                self.state = 5660
                localctx.specific_method_name = self.method_name()
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5661
                self.match(TeradataSQLDDLParser.PARAMETER)
                self.state = 5662
                self.match(TeradataSQLDDLParser.STYLE)
                self.state = 5663
                _la = self._input.LA(1)
                if not(_la==386 or _la==961):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 5664
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 5667
                self.match(TeradataSQLDDLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5668
                self.match(TeradataSQLDDLParser.CALLED)
                self.state = 5669
                self.match(TeradataSQLDDLParser.ON)
                self.state = 5670
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 5671
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5672
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 5673
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 5674
                self.match(TeradataSQLDDLParser.ON)
                self.state = 5675
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 5676
                self.match(TeradataSQLDDLParser.INPUT)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5677
                self.match(TeradataSQLDDLParser.NO)
                self.state = 5678
                self.match(TeradataSQLDDLParser.SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multidimensional_array_dimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.maximum_size = list() # of Integer_literalContexts

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)

        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)

        def array_bounds(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_boundsContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_multidimensional_array_dimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultidimensional_array_dimension" ):
                listener.enterMultidimensional_array_dimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultidimensional_array_dimension" ):
                listener.exitMultidimensional_array_dimension(self)




    def multidimensional_array_dimension(self):

        localctx = TeradataSQLDDLParser.Multidimensional_array_dimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_multidimensional_array_dimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5681
            self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
            self.state = 5684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,672,self._ctx)
            if la_ == 1:
                self.state = 5682
                self.array_bounds()
                pass

            elif la_ == 2:
                self.state = 5683
                localctx._integer_literal = self.integer_literal()
                localctx.maximum_size.append(localctx._integer_literal)
                pass


            self.state = 5686
            self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multidimensional_varray_dimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.maximum_size = list() # of Integer_literalContexts

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def array_bounds(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_boundsContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_multidimensional_varray_dimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultidimensional_varray_dimension" ):
                listener.enterMultidimensional_varray_dimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultidimensional_varray_dimension" ):
                listener.exitMultidimensional_varray_dimension(self)




    def multidimensional_varray_dimension(self):

        localctx = TeradataSQLDDLParser.Multidimensional_varray_dimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_multidimensional_varray_dimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5688
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
            if la_ == 1:
                self.state = 5689
                self.array_bounds()
                pass

            elif la_ == 2:
                self.state = 5690
                localctx._integer_literal = self.integer_literal()
                localctx.maximum_size.append(localctx._integer_literal)
                pass


            self.state = 5693
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_boundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lower_bound = None # BoundContext
            self.upper_bound = None # BoundContext

        def COLON(self):
            return self.getToken(TeradataSQLDDLParser.COLON, 0)

        def bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.BoundContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.BoundContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_array_bounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_bounds" ):
                listener.enterArray_bounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_bounds" ):
                listener.exitArray_bounds(self)




    def array_bounds(self):

        localctx = TeradataSQLDDLParser.Array_boundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_array_bounds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5695
            localctx.lower_bound = self.bound()
            self.state = 5696
            self.match(TeradataSQLDDLParser.COLON)
            self.state = 5697
            localctx.upper_bound = self.bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBound" ):
                listener.enterBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBound" ):
                listener.exitBound(self)




    def bound(self):

        localctx = TeradataSQLDDLParser.BoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_bound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 5699
                self.match(TeradataSQLDDLParser.MINUS_SIGN)


            self.state = 5702
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_database_name = None # Database_nameContext
            self.expire = None # Integer_literalContext

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLDDLParser.PASSWORD, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def password(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.PasswordContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLDDLParser.EXPIRE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def user_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_create_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user_stat" ):
                listener.enterCreate_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user_stat" ):
                listener.exitCreate_user_stat(self)




    def create_user_stat(self):

        localctx = TeradataSQLDDLParser.Create_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_create_user_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5704
            self.match(TeradataSQLDDLParser.CREATE)
            self.state = 5705
            self.match(TeradataSQLDDLParser.USER)
            self.state = 5706
            self.user_name()
            self.state = 5709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 5707
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 5708
                localctx.from_database_name = self.database_name()


            self.state = 5711
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8589936672) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 576478619367374977) != 0) or _la==153 or _la==211 or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & 299067162755073) != 0) or ((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 515) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & 140810502799617) != 0) or _la==617 or _la==665:
                self.state = 5712
                self.user_attribute()
                self.state = 5717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,676,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5713
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 5714
                        self.user_attribute() 
                    self.state = 5719
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,676,self._ctx)



            self.state = 5723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 5722
                self.match(TeradataSQLDDLParser.COMMA)


            self.state = 5725
            self.match(TeradataSQLDDLParser.PASSWORD)
            self.state = 5726
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 5734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193, 1205]:
                self.state = 5727
                self.password()
                pass
            elif token in [1213]:
                self.state = 5728
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5729
                self.match(TeradataSQLDDLParser.EXPIRE)
                self.state = 5730
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5731
                localctx.expire = self.integer_literal()
                self.state = 5732
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 5736
                self.match(TeradataSQLDDLParser.COMMA)


            self.state = 5747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8589936672) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 576478619367374977) != 0) or _la==153 or _la==211 or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & 299067162755073) != 0) or ((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 515) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & 140810502799617) != 0) or _la==617 or _la==665:
                self.state = 5739
                self.user_attribute()
                self.state = 5744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5740
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5741
                    self.user_attribute()
                    self.state = 5746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.startup_string = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts
            self.timezone_string = None # Char_string_literalContext

        def STARTUP(self):
            return self.getToken(TeradataSQLDDLParser.STARTUP, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_size_specContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def COLLATION(self):
            return self.getToken(TeradataSQLDDLParser.COLLATION, 0)

        def collation_sequence(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collation_sequenceContext,0)


        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_default_mapContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_journal_tableContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def DATEFORM(self):
            return self.getToken(TeradataSQLDDLParser.DATEFORM, 0)

        def INTEGERDATE(self):
            return self.getToken(TeradataSQLDDLParser.INTEGERDATE, 0)

        def ANSIDATE(self):
            return self.getToken(TeradataSQLDDLParser.ANSIDATE, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDDLParser.KANJISJIS, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,0)


        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def TRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.TRANSFORM, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def transform_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Transform_specificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Transform_specificationContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def DBA(self):
            return self.getToken(TeradataSQLDDLParser.DBA, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def user_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_constraintContext,i)


        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLDDLParser.EXPORTWIDTH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_user_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_attribute" ):
                listener.enterUser_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_attribute" ):
                listener.exitUser_attribute(self)




    def user_attribute(self):

        localctx = TeradataSQLDDLParser.User_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_user_attribute)
        self._la = 0 # Token type
        try:
            self.state = 5840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5749
                self.match(TeradataSQLDDLParser.STARTUP)
                self.state = 5750
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5751
                localctx.startup_string = self.char_string_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5752
                self.database_size_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5753
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5754
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 5755
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5756
                self.database_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5757
                self.match(TeradataSQLDDLParser.COLLATION)
                self.state = 5758
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5759
                self.collation_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5760
                self.match(TeradataSQLDDLParser.ACCOUNT)
                self.state = 5761
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5771
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 5762
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 5767
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,683,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5763
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 5764
                            localctx._char_string_literal = self.char_string_literal()
                            localctx.account_string.append(localctx._char_string_literal) 
                        self.state = 5769
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,683,self._ctx)

                    pass
                elif token in [274]:
                    self.state = 5770
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5773
                self.database_default_map()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5774
                self.fallback_protection()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5775
                self.before_journal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5776
                self.after_journal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5777
                self.default_journal_table()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5778
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 5779
                self.match(TeradataSQLDDLParser.ZONE)
                self.state = 5780
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5787
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 5781
                    self.match(TeradataSQLDDLParser.LOCAL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203, 1221, 1222]:
                    self.state = 5783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1221 or _la==1222:
                        self.state = 5782
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5785
                    localctx.timezone_string = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 5786
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5789
                self.match(TeradataSQLDDLParser.DATEFORM)
                self.state = 5790
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5791
                _la = self._input.LA(1)
                if not(_la==17 or _la==203 or _la==274):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5792
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5793
                self.match(TeradataSQLDDLParser.CHARACTER)
                self.state = 5794
                self.match(TeradataSQLDDLParser.SET)
                self.state = 5795
                _la = self._input.LA(1)
                if not(_la==725 or _la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5796
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 5797
                self.match(TeradataSQLDDLParser.ROLE)
                self.state = 5798
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5803
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 5799
                    self.role_name()
                    pass
                elif token in [269]:
                    self.state = 5800
                    self.match(TeradataSQLDDLParser.NONE)
                    pass
                elif token in [274]:
                    self.state = 5801
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                elif token in [13]:
                    self.state = 5802
                    self.match(TeradataSQLDDLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5805
                self.match(TeradataSQLDDLParser.PROFILE)
                self.state = 5806
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5809
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 5807
                    self.profile_name()
                    pass
                elif token in [274]:
                    self.state = 5808
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5811
                self.match(TeradataSQLDDLParser.TRANSFORM)
                self.state = 5812
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5813
                self.transform_specification()
                self.state = 5818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5814
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5815
                    self.transform_specification()
                    self.state = 5820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5821
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5823
                self.match(TeradataSQLDDLParser.DBA)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5824
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 5825
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5826
                self.user_constraint()
                self.state = 5831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,690,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5827
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 5828
                        self.user_constraint() 
                    self.state = 5833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,690,self._ctx)

                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5834
                self.match(TeradataSQLDDLParser.EXPORTWIDTH)
                self.state = 5835
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 5838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 5836
                    self.char_string_literal()
                    pass
                elif token in [111]:
                    self.state = 5837
                    self.match(TeradataSQLDDLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_transform_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_specification" ):
                listener.enterTransform_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_specification" ):
                listener.exitTransform_specification(self)




    def transform_specification(self):

        localctx = TeradataSQLDDLParser.Transform_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_transform_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5842
            self.data_type()
            self.state = 5843
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 5844
            localctx.group_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_level_security_constraint_column_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.level_name = list() # of Unqualified_nameContexts
            self.category_name = list() # of Unqualified_nameContexts

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DEFAULT)
            else:
                return self.getToken(TeradataSQLDDLParser.DEFAULT, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_user_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_constraint" ):
                listener.enterUser_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_constraint" ):
                listener.exitUser_constraint(self)




    def user_constraint(self):

        localctx = TeradataSQLDDLParser.User_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_user_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5846
            localctx.row_level_security_constraint_column_name = self.unqualified_name()
            self.state = 5873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,698,self._ctx)
            if la_ == 1:
                self.state = 5847
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,694,self._ctx)
                if la_ == 1:
                    self.state = 5848
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.level_name.append(localctx._unqualified_name)
                    self.state = 5850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==111:
                        self.state = 5849
                        self.match(TeradataSQLDDLParser.DEFAULT)


                    pass

                elif la_ == 2:
                    self.state = 5852
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.category_name.append(localctx._unqualified_name)
                    pass


                self.state = 5865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5855
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5861
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
                    if la_ == 1:
                        self.state = 5856
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.level_name.append(localctx._unqualified_name)
                        self.state = 5858
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==111:
                            self.state = 5857
                            self.match(TeradataSQLDDLParser.DEFAULT)


                        pass

                    elif la_ == 2:
                        self.state = 5860
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.category_name.append(localctx._unqualified_name)
                        pass


                    self.state = 5867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5868
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 5870
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5871
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 5872
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_stat" ):
                listener.enterDatabase_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_stat" ):
                listener.exitDatabase_stat(self)




    def database_stat(self):

        localctx = TeradataSQLDDLParser.Database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_database_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5875
            self.match(TeradataSQLDDLParser.DATABASE)
            self.state = 5876
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLDDLParser.DEL, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_delete_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_database_stat" ):
                listener.enterDelete_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_database_stat" ):
                listener.exitDelete_database_stat(self)




    def delete_database_stat(self):

        localctx = TeradataSQLDDLParser.Delete_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_delete_database_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5878
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5879
            self.match(TeradataSQLDDLParser.DATABASE)
            self.state = 5880
            self.database_name()
            self.state = 5882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 5881
                self.match(TeradataSQLDDLParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,0)


        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLDDLParser.DEL, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_delete_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_user_stat" ):
                listener.enterDelete_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_user_stat" ):
                listener.exitDelete_user_stat(self)




    def delete_user_stat(self):

        localctx = TeradataSQLDDLParser.Delete_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_delete_user_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5884
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5885
            self.match(TeradataSQLDDLParser.USER)
            self.state = 5886
            self.user_name()
            self.state = 5888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 5887
                self.match(TeradataSQLDDLParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_authorization_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_authorization_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_authorization_stat" ):
                listener.enterDrop_authorization_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_authorization_stat" ):
                listener.exitDrop_authorization_stat(self)




    def drop_authorization_stat(self):

        localctx = TeradataSQLDDLParser.Drop_authorization_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_drop_authorization_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5890
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5891
            self.match(TeradataSQLDDLParser.AUTHORIZATION)
            self.state = 5892
            localctx.authorization_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_cast_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_data_type = None # Data_typeContext
            self.target_data_type = None # Data_typeContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,i)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_cast_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_cast_stat" ):
                listener.enterDrop_cast_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_cast_stat" ):
                listener.exitDrop_cast_stat(self)




    def drop_cast_stat(self):

        localctx = TeradataSQLDDLParser.Drop_cast_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_drop_cast_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5894
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5895
            self.match(TeradataSQLDDLParser.CAST)
            self.state = 5899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 5896
                self.database_name()
                self.state = 5897
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 5901
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 5902
            localctx.source_data_type = self.data_type()
            self.state = 5903
            self.match(TeradataSQLDDLParser.AS)
            self.state = 5904
            localctx.target_data_type = self.data_type()
            self.state = 5905
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_constraint_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_constraint_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_constraint_stat" ):
                listener.enterDrop_constraint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_constraint_stat" ):
                listener.exitDrop_constraint_stat(self)




    def drop_constraint_stat(self):

        localctx = TeradataSQLDDLParser.Drop_constraint_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_drop_constraint_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5907
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5908
            self.match(TeradataSQLDDLParser.CONSTRAINT)
            self.state = 5909
            localctx.constraint_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_stat" ):
                listener.enterDrop_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_stat" ):
                listener.exitDrop_database_stat(self)




    def drop_database_stat(self):

        localctx = TeradataSQLDDLParser.Drop_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_drop_database_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5911
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5912
            self.match(TeradataSQLDDLParser.DATABASE)
            self.state = 5913
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_error_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data_table_name = None # Table_nameContext
            self.error_table_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_error_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_error_table_stat" ):
                listener.enterDrop_error_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_error_table_stat" ):
                listener.exitDrop_error_table_stat(self)




    def drop_error_table_stat(self):

        localctx = TeradataSQLDDLParser.Drop_error_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_drop_error_table_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5915
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5916
            self.match(TeradataSQLDDLParser.ERROR)
            self.state = 5917
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 5921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [159]:
                self.state = 5918
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 5919
                localctx.data_table_name = self.table_name()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5920
                localctx.error_table_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_foreign_server_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_server_dbContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_foreign_server_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_foreign_server_stat" ):
                listener.enterDrop_foreign_server_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_foreign_server_stat" ):
                listener.exitDrop_foreign_server_stat(self)




    def drop_foreign_server_stat(self):

        localctx = TeradataSQLDDLParser.Drop_foreign_server_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_drop_foreign_server_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5923
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5924
            self.match(TeradataSQLDDLParser.FOREIGN)
            self.state = 5925
            self.match(TeradataSQLDDLParser.SERVER)
            self.state = 5927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,703,self._ctx)
            if la_ == 1:
                self.state = 5926
                self.td_server_db()


            self.state = 5929
            localctx.server_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function_stat" ):
                listener.enterDrop_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function_stat" ):
                listener.exitDrop_function_stat(self)




    def drop_function_stat(self):

        localctx = TeradataSQLDDLParser.Drop_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_drop_function_stat)
        self._la = 0 # Token type
        try:
            self.state = 5951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5931
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 5932
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 5933
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 5934
                self.function_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5935
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 5936
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 5937
                self.function_name()
                self.state = 5949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 5938
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 5939
                    self.data_type()
                    self.state = 5944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 5940
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 5941
                        self.data_type()
                        self.state = 5946
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 5947
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_function_mapping_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functin_mapping_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLDDLParser.MAPPING, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_function_mapping_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function_mapping_stat" ):
                listener.enterDrop_function_mapping_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function_mapping_stat" ):
                listener.exitDrop_function_mapping_stat(self)




    def drop_function_mapping_stat(self):

        localctx = TeradataSQLDDLParser.Drop_function_mapping_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_drop_function_mapping_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5953
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5954
            self.match(TeradataSQLDDLParser.FUNCTION)
            self.state = 5955
            self.match(TeradataSQLDDLParser.MAPPING)
            self.state = 5956
            localctx.functin_mapping_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts
            self.index_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_orderingContext,0)


        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index_stat" ):
                listener.enterDrop_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index_stat" ):
                listener.exitDrop_index_stat(self)




    def drop_index_stat(self):

        localctx = TeradataSQLDDLParser.Drop_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_drop_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5958
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5959
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 5972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.state = 5960
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 5961
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 5966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5962
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 5963
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 5968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5969
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5971
                localctx.index_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 5974
                self.index_ordering()


            self.state = 5977
            self.match(TeradataSQLDDLParser.ON)
            self.state = 5979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 5978
                self.match(TeradataSQLDDLParser.TEMPORARY)


            self.state = 5981
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_glop_set_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.glop_set_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_glop_set_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_glop_set_stat" ):
                listener.enterDrop_glop_set_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_glop_set_stat" ):
                listener.exitDrop_glop_set_stat(self)




    def drop_glop_set_stat(self):

        localctx = TeradataSQLDDLParser.Drop_glop_set_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_drop_glop_set_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5983
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5984
            self.match(TeradataSQLDDLParser.GLOP)
            self.state = 5985
            self.match(TeradataSQLDDLParser.SET)
            self.state = 5986
            localctx.glop_set_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_join_index_stat" ):
                listener.enterDrop_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_join_index_stat" ):
                listener.exitDrop_join_index_stat(self)




    def drop_join_index_stat(self):

        localctx = TeradataSQLDDLParser.Drop_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_drop_join_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5988
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5989
            self.match(TeradataSQLDDLParser.JOIN)
            self.state = 5990
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 5991
            localctx.join_index_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_hash_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_hash_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_hash_index_stat" ):
                listener.enterDrop_hash_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_hash_index_stat" ):
                listener.exitDrop_hash_index_stat(self)




    def drop_hash_index_stat(self):

        localctx = TeradataSQLDDLParser.Drop_hash_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_drop_hash_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5993
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5994
            self.match(TeradataSQLDDLParser.HASH)
            self.state = 5995
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 5996
            localctx.join_index_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_macro_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_macro_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_macro_stat" ):
                listener.enterDrop_macro_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_macro_stat" ):
                listener.exitDrop_macro_stat(self)




    def drop_macro_stat(self):

        localctx = TeradataSQLDDLParser.Drop_macro_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_drop_macro_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5998
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 5999
            self.match(TeradataSQLDDLParser.MACRO)
            self.state = 6000
            self.macro_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_map_stat" ):
                listener.enterDrop_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_map_stat" ):
                listener.exitDrop_map_stat(self)




    def drop_map_stat(self):

        localctx = TeradataSQLDDLParser.Drop_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_drop_map_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6002
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6003
            self.match(TeradataSQLDDLParser.MAP)
            self.state = 6004
            localctx.map_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_method_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_method_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_method_stat" ):
                listener.enterDrop_method_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_method_stat" ):
                listener.exitDrop_method_stat(self)




    def drop_method_stat(self):

        localctx = TeradataSQLDDLParser.Drop_method_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_drop_method_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6006
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6007
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 6009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,711,self._ctx)
            if la_ == 1:
                self.state = 6008
                self.sysudtlib()


            self.state = 6011
            self.method_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_ordering_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def ORDERING(self):
            return self.getToken(TeradataSQLDDLParser.ORDERING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_ordering_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_ordering_stat" ):
                listener.enterDrop_ordering_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_ordering_stat" ):
                listener.exitDrop_ordering_stat(self)




    def drop_ordering_stat(self):

        localctx = TeradataSQLDDLParser.Drop_ordering_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_drop_ordering_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6013
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6014
            self.match(TeradataSQLDDLParser.ORDERING)
            self.state = 6015
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6016
            self.udt_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure_stat" ):
                listener.enterDrop_procedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure_stat" ):
                listener.exitDrop_procedure_stat(self)




    def drop_procedure_stat(self):

        localctx = TeradataSQLDDLParser.Drop_procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_drop_procedure_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6018
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6019
            self.match(TeradataSQLDDLParser.PROCEDURE)
            self.state = 6020
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_profile_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_profile_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_profile_stat" ):
                listener.enterDrop_profile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_profile_stat" ):
                listener.exitDrop_profile_stat(self)




    def drop_profile_stat(self):

        localctx = TeradataSQLDDLParser.Drop_profile_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_drop_profile_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6022
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6023
            self.match(TeradataSQLDDLParser.PROFILE)
            self.state = 6024
            self.profile_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_replication_group_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def REPLICATION(self):
            return self.getToken(TeradataSQLDDLParser.REPLICATION, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDDLParser.GROUP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_replication_group_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_replication_group_stat" ):
                listener.enterDrop_replication_group_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_replication_group_stat" ):
                listener.exitDrop_replication_group_stat(self)




    def drop_replication_group_stat(self):

        localctx = TeradataSQLDDLParser.Drop_replication_group_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_drop_replication_group_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6026
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6027
            self.match(TeradataSQLDDLParser.REPLICATION)
            self.state = 6028
            self.match(TeradataSQLDDLParser.GROUP)
            self.state = 6029
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_replication_ruleset_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.replication_group_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def REPLICATION(self):
            return self.getToken(TeradataSQLDDLParser.REPLICATION, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLDDLParser.RULESET, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_replication_ruleset_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_replication_ruleset_stat" ):
                listener.enterDrop_replication_ruleset_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_replication_ruleset_stat" ):
                listener.exitDrop_replication_ruleset_stat(self)




    def drop_replication_ruleset_stat(self):

        localctx = TeradataSQLDDLParser.Drop_replication_ruleset_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_drop_replication_ruleset_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6031
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6032
            self.match(TeradataSQLDDLParser.REPLICATION)
            self.state = 6033
            self.match(TeradataSQLDDLParser.RULESET)
            self.state = 6034
            localctx.name = self.unqualified_name()
            self.state = 6035
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6036
            localctx.replication_group_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_role_stat" ):
                listener.enterDrop_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_role_stat" ):
                listener.exitDrop_role_stat(self)




    def drop_role_stat(self):

        localctx = TeradataSQLDDLParser.Drop_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_drop_role_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6038
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6039
            self.match(TeradataSQLDDLParser.ROLE)
            self.state = 6040
            self.role_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schema_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.storage_format = None # Unqualified_nameContext
            self.schema_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.SCHEMA, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_schema_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_schema_stat" ):
                listener.enterDrop_schema_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_schema_stat" ):
                listener.exitDrop_schema_stat(self)




    def drop_schema_stat(self):

        localctx = TeradataSQLDDLParser.Drop_schema_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_drop_schema_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6042
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6043
            localctx.storage_format = self.unqualified_name()
            self.state = 6044
            self.match(TeradataSQLDDLParser.SCHEMA)
            self.state = 6046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,712,self._ctx)
            if la_ == 1:
                self.state = 6045
                self.sysudtlib()


            self.state = 6048
            localctx.schema_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_optimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def collection_source(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collection_sourceContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Stats_target_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_statistics_optimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_optimizer_form_stat" ):
                listener.enterDrop_statistics_optimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_optimizer_form_stat" ):
                listener.exitDrop_statistics_optimizer_form_stat(self)




    def drop_statistics_optimizer_form_stat(self):

        localctx = TeradataSQLDDLParser.Drop_statistics_optimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_drop_statistics_optimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6050
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6051
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,718,self._ctx)
            if la_ == 1:
                self.state = 6053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 6052
                    self.match(TeradataSQLDDLParser.ON)


                self.state = 6055
                self.collection_source()
                self.state = 6064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 6056
                    self.stats_target_spec()
                    self.state = 6061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6057
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 6058
                        self.stats_target_spec()
                        self.state = 6063
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.state = 6074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 6066
                    self.stats_target_spec()
                    self.state = 6071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6067
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 6068
                        self.stats_target_spec()
                        self.state = 6073
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6076
                self.match(TeradataSQLDDLParser.ON)
                self.state = 6077
                self.collection_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_stat" ):
                listener.enterDrop_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_stat" ):
                listener.exitDrop_table_stat(self)




    def drop_table_stat(self):

        localctx = TeradataSQLDDLParser.Drop_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_drop_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6080
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 6081
                self.match(TeradataSQLDDLParser.TEMPORARY)


            self.state = 6085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 6084
                self.match(TeradataSQLDDLParser.FOREIGN)


            self.state = 6087
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 6088
            self.table_name()
            self.state = 6090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 6089
                self.match(TeradataSQLDDLParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_transform_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transform_group_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def TRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_transform_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_transform_stat" ):
                listener.enterDrop_transform_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_transform_stat" ):
                listener.exitDrop_transform_stat(self)




    def drop_transform_stat(self):

        localctx = TeradataSQLDDLParser.Drop_transform_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_drop_transform_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6092
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6093
            self.match(TeradataSQLDDLParser.TRANSFORM)
            self.state = 6097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.state = 6094
                self.database_name()
                self.state = 6095
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 6101
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 6099
                localctx.transform_group_name = self.unqualified_name()
                pass
            elif token in [13]:
                self.state = 6100
                self.match(TeradataSQLDDLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6103
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6104
            self.udt_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_trigger_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trigger_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_trigger_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger_stat" ):
                listener.enterDrop_trigger_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger_stat" ):
                listener.exitDrop_trigger_stat(self)




    def drop_trigger_stat(self):

        localctx = TeradataSQLDDLParser.Drop_trigger_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_drop_trigger_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6106
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6107
            self.match(TeradataSQLDDLParser.TRIGGER)
            self.state = 6108
            localctx.trigger_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_type_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_type_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type_stat" ):
                listener.enterDrop_type_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type_stat" ):
                listener.exitDrop_type_stat(self)




    def drop_type_stat(self):

        localctx = TeradataSQLDDLParser.Drop_type_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_drop_type_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6110
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6111
            self.match(TeradataSQLDDLParser.TYPE)
            self.state = 6112
            self.udt_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_user_stat" ):
                listener.enterDrop_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_user_stat" ):
                listener.exitDrop_user_stat(self)




    def drop_user_stat(self):

        localctx = TeradataSQLDDLParser.Drop_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_drop_user_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6114
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6115
            self.match(TeradataSQLDDLParser.USER)
            self.state = 6116
            self.user_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_view_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_view_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view_stat" ):
                listener.enterDrop_view_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view_stat" ):
                listener.exitDrop_view_stat(self)




    def drop_view_stat(self):

        localctx = TeradataSQLDDLParser.Drop_view_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_drop_view_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6118
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6119
            self.match(TeradataSQLDDLParser.VIEW)
            self.state = 6120
            localctx.view_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_zone_stat" ):
                listener.enterDrop_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_zone_stat" ):
                listener.exitDrop_zone_stat(self)




    def drop_zone_stat(self):

        localctx = TeradataSQLDDLParser.Drop_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_drop_zone_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6122
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 6123
            self.match(TeradataSQLDDLParser.ZONE)
            self.state = 6124
            localctx.zone_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_isolated_loading_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_band = None # Char_string_literalContext

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLDDLParser.LOADING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDDLParser.QUERY_BAND, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def CONCURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CONCURRENT, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLDDLParser.SESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_isolated_loading_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_isolated_loading_stat" ):
                listener.enterEnd_isolated_loading_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_isolated_loading_stat" ):
                listener.exitEnd_isolated_loading_stat(self)




    def end_isolated_loading_stat(self):

        localctx = TeradataSQLDDLParser.End_isolated_loading_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_end_isolated_loading_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6126
            self.match(TeradataSQLDDLParser.END)
            self.state = 6128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 6127
                self.match(TeradataSQLDDLParser.CONCURRENT)


            self.state = 6130
            self.match(TeradataSQLDDLParser.ISOLATED)
            self.state = 6131
            self.match(TeradataSQLDDLParser.LOADING)
            self.state = 6132
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6133
            self.match(TeradataSQLDDLParser.QUERY_BAND)
            self.state = 6134
            localctx.query_band = self.char_string_literal()
            self.state = 6137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 6135
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 6136
                self.match(TeradataSQLDDLParser.SESSION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Object_nameContext

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ON)
            else:
                return self.getToken(TeradataSQLDDLParser.ON, i)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.OperationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.OperationContext,i)


        def DENIALS(self):
            return self.getToken(TeradataSQLDDLParser.DENIALS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLDDLParser.TEXT, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOR)
            else:
                return self.getToken(TeradataSQLDDLParser.FOR, i)

        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CONSTRAINT)
            else:
                return self.getToken(TeradataSQLDDLParser.CONSTRAINT, i)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def logging_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logging_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_itemContext,i)


        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_logging_stat" ):
                listener.enterEnd_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_logging_stat" ):
                listener.exitEnd_logging_stat(self)




    def end_logging_stat(self):

        localctx = TeradataSQLDDLParser.End_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_end_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6139
            self.match(TeradataSQLDDLParser.END)
            self.state = 6140
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 6142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==628:
                self.state = 6141
                self.match(TeradataSQLDDLParser.DENIALS)


            self.state = 6146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6144
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 6145
                self.match(TeradataSQLDDLParser.TEXT)


            self.state = 6148
            self.match(TeradataSQLDDLParser.ON)
            self.state = 6158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 6149
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [14, 60, 86, 102, 115, 125, 127, 144, 172, 192, 198, 235, 297, 310, 325, 346, 358, 359, 370, 406, 435, 441, 442, 443, 453, 456, 468]:
                self.state = 6150
                self.operation()
                self.state = 6155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6151
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6152
                    self.operation()
                    self.state = 6157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 6163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
            if la_ == 1:
                self.state = 6160
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6161
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 6162
                localctx.constraint_name = self.object_name()


            self.state = 6168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 6165
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6166
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 6167
                localctx.constraint_name = self.object_name()


            self.state = 6179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 6170
                self.match(TeradataSQLDDLParser.BY)
                self.state = 6171
                self.user_name()
                self.state = 6176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6172
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6173
                    self.user_name()
                    self.state = 6178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 6181
                self.match(TeradataSQLDDLParser.ON)
                self.state = 6182
                self.logging_item()
                self.state = 6187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6183
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6184
                    self.logging_item()
                    self.state = 6189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_capture_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLDDLParser.CAPTURE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_query_capture_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_capture_stat" ):
                listener.enterEnd_query_capture_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_capture_stat" ):
                listener.exitEnd_query_capture_stat(self)




    def end_query_capture_stat(self):

        localctx = TeradataSQLDDLParser.End_query_capture_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_end_query_capture_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6192
            self.match(TeradataSQLDDLParser.END)
            self.state = 6193
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 6194
            self.match(TeradataSQLDDLParser.CAPTURE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def end_query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_query_logging_on_itemsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_logging_stat" ):
                listener.enterEnd_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_logging_stat" ):
                listener.exitEnd_query_logging_stat(self)




    def end_query_logging_stat(self):

        localctx = TeradataSQLDDLParser.End_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_end_query_logging_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6196
            self.match(TeradataSQLDDLParser.END)
            self.state = 6197
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 6198
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 6199
            self.match(TeradataSQLDDLParser.ON)
            self.state = 6200
            self.end_query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_logging_on_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def end_query_logging_all_rules(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_query_logging_all_rulesContext,0)


        def query_logging_on_all(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_allContext,0)


        def query_logging_on_users(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_usersContext,0)


        def query_logging_on_application(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_applicationContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_query_logging_on_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_logging_on_items" ):
                listener.enterEnd_query_logging_on_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_logging_on_items" ):
                listener.exitEnd_query_logging_on_items(self)




    def end_query_logging_on_items(self):

        localctx = TeradataSQLDDLParser.End_query_logging_on_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_end_query_logging_on_items)
        try:
            self.state = 6206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6202
                self.end_query_logging_all_rules()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6203
                self.query_logging_on_all()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6204
                self.query_logging_on_users()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6205
                self.query_logging_on_application()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_logging_all_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def RULES(self):
            return self.getToken(TeradataSQLDDLParser.RULES, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_query_logging_all_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_logging_all_rules" ):
                listener.enterEnd_query_logging_all_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_logging_all_rules" ):
                listener.exitEnd_query_logging_all_rules(self)




    def end_query_logging_all_rules(self):

        localctx = TeradataSQLDDLParser.End_query_logging_all_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_end_query_logging_all_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6208
            self.match(TeradataSQLDDLParser.ALL)
            self.state = 6209
            self.match(TeradataSQLDDLParser.RULES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flush_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLUSH(self):
            return self.getToken(TeradataSQLDDLParser.FLUSH, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def flush_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Flush_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_flush_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_query_logging_stat" ):
                listener.enterFlush_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_query_logging_stat" ):
                listener.exitFlush_query_logging_stat(self)




    def flush_query_logging_stat(self):

        localctx = TeradataSQLDDLParser.Flush_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_flush_query_logging_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6211
            self.match(TeradataSQLDDLParser.FLUSH)
            self.state = 6212
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 6213
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 6214
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 6215
            self.flush_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flush_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLDDLParser.ALLDBQL, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLDDLParser.ALLTDWM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDDLParser.EXPLAIN, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDDLParser.LOCK, 0)

        def OBJECTS(self):
            return self.getToken(TeradataSQLDDLParser.OBJECTS, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLDDLParser.PARAMINFO, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLDDLParser.STATSUSAGE, 0)

        def STEPINFO(self):
            return self.getToken(TeradataSQLDDLParser.STEPINFO, 0)

        def SUMMARY(self):
            return self.getToken(TeradataSQLDDLParser.SUMMARY, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLDDLParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLDDLParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLDDLParser.TDWMHISTORY, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLDDLParser.USECOUNT, 0)

        def XMLPLAN(self):
            return self.getToken(TeradataSQLDDLParser.XMLPLAN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_flush_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_option" ):
                listener.enterFlush_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_option" ):
                listener.exitFlush_option(self)




    def flush_option(self):

        localctx = TeradataSQLDDLParser.Flush_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_flush_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6217
            _la = self._input.LA(1)
            if not(_la==13 or _la==111 or _la==150 or _la==226 or _la==280 or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 266241) != 0) or ((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & 17301505) != 0) or _la==838 or ((((_la - 940)) & ~0x3f) == 0 and ((1 << (_la - 940)) & 962072674305) != 0) or _la==1019):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Help_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_help_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HelpHashIndexStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.hash_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpHashIndexStat" ):
                listener.enterHelpHashIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpHashIndexStat" ):
                listener.exitHelpHashIndexStat(self)


    class HelpForeignServerContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.server_name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)
        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)

        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_server_dbContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignServer" ):
                listener.enterHelpForeignServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignServer" ):
                listener.exitHelpForeignServer(self)


    class HelpErrorTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.data_table_name = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpErrorTableStat" ):
                listener.enterHelpErrorTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpErrorTableStat" ):
                listener.exitHelpErrorTableStat(self)


    class HelpTriggerStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.trigger_or_table_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTriggerStat" ):
                listener.enterHelpTriggerStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTriggerStat" ):
                listener.exitHelpTriggerStat(self)


    class HelpTypeStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTE, 0)
        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTypeStat" ):
                listener.enterHelpTypeStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTypeStat" ):
                listener.exitHelpTypeStat(self)


    class HelpTransformStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def TRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.TRANSFORM, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTransformStat" ):
                listener.enterHelpTransformStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTransformStat" ):
                listener.exitHelpTransformStat(self)


    class HelpProcedureStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)
        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTES, 0)
        def ATTRS(self):
            return self.getToken(TeradataSQLDDLParser.ATTRS, 0)
        def ATTR(self):
            return self.getToken(TeradataSQLDDLParser.ATTR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpProcedureStat" ):
                listener.enterHelpProcedureStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpProcedureStat" ):
                listener.exitHelpProcedureStat(self)


    class HelpConstraintStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.constraint_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpConstraintStat" ):
                listener.enterHelpConstraintStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpConstraintStat" ):
                listener.exitHelpConstraintStat(self)


    class HelpForeignFunctionContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignFunction" ):
                listener.enterHelpForeignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignFunction" ):
                listener.exitHelpForeignFunction(self)


    class HelpUserStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)
        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpUserStat" ):
                listener.enterHelpUserStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpUserStat" ):
                listener.exitHelpUserStat(self)


    class HelpSpecificMethodStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)
        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpSpecificMethodStat" ):
                listener.enterHelpSpecificMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpSpecificMethodStat" ):
                listener.exitHelpSpecificMethodStat(self)


    class HelpTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTableStat" ):
                listener.enterHelpTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTableStat" ):
                listener.exitHelpTableStat(self)


    class HelpMethodStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def method(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.MethodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpMethodStat" ):
                listener.enterHelpMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpMethodStat" ):
                listener.exitHelpMethodStat(self)


    class HelpDatabaseStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)
        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpDatabaseStat" ):
                listener.enterHelpDatabaseStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpDatabaseStat" ):
                listener.exitHelpDatabaseStat(self)


    class HelpForeignDatabaseContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)
        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)
        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignDatabase" ):
                listener.enterHelpForeignDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignDatabase" ):
                listener.exitHelpForeignDatabase(self)


    class HelpColumnAllFromStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)
        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)
        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnAllFromStat" ):
                listener.enterHelpColumnAllFromStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnAllFromStat" ):
                listener.exitHelpColumnAllFromStat(self)


    class HelpFunctionStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def variable_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_data_typeContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpFunctionStat" ):
                listener.enterHelpFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpFunctionStat" ):
                listener.exitHelpFunctionStat(self)


    class HelpViewStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.view_name = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpViewStat" ):
                listener.enterHelpViewStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpViewStat" ):
                listener.exitHelpViewStat(self)


    class HelpJoinIndexStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.join_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpJoinIndexStat" ):
                listener.enterHelpJoinIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpJoinIndexStat" ):
                listener.exitHelpJoinIndexStat(self)


    class HelpColumnListStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.table_name_for_all_columns = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)
        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.MUL_SIGN, i)
        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnListStat" ):
                listener.enterHelpColumnListStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnListStat" ):
                listener.exitHelpColumnListStat(self)


    class HelpColumnFromStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)
        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)
        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnFromStat" ):
                listener.enterHelpColumnFromStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnFromStat" ):
                listener.exitHelpColumnFromStat(self)


    class HelpSpecificFunctionStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpSpecificFunctionStat" ):
                listener.enterHelpSpecificFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpSpecificFunctionStat" ):
                listener.exitHelpSpecificFunctionStat(self)


    class HelpStorageFormatSchemaStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.schema_name = None # Udt_typeContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Dataset_storage_formatContext,0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.SCHEMA, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStorageFormatSchemaStat" ):
                listener.enterHelpStorageFormatSchemaStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStorageFormatSchemaStat" ):
                listener.exitHelpStorageFormatSchemaStat(self)


    class HelpForeignTableContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignTable" ):
                listener.enterHelpForeignTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignTable" ):
                listener.exitHelpForeignTable(self)


    class HelpColumnFromErrorTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.data_table_name = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)
        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)
        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnFromErrorTableStat" ):
                listener.enterHelpColumnFromErrorTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnFromErrorTableStat" ):
                listener.exitHelpColumnFromErrorTableStat(self)


    class HelpOnlineStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.request = None # Token
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDDLParser.CHAR_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpOnlineStat" ):
                listener.enterHelpOnlineStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpOnlineStat" ):
                listener.exitHelpOnlineStat(self)


    class HelpIndexStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.indexed_object_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpIndexStat" ):
                listener.enterHelpIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpIndexStat" ):
                listener.exitHelpIndexStat(self)


    class HelpCastStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)

        def SOURCE(self):
            return self.getToken(TeradataSQLDDLParser.SOURCE, 0)
        def TARGET(self):
            return self.getToken(TeradataSQLDDLParser.TARGET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpCastStat" ):
                listener.enterHelpCastStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpCastStat" ):
                listener.exitHelpCastStat(self)


    class HelpVolatileTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)
        def VOLATILE(self):
            return self.getToken(TeradataSQLDDLParser.VOLATILE, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpVolatileTableStat" ):
                listener.enterHelpVolatileTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpVolatileTableStat" ):
                listener.exitHelpVolatileTableStat(self)



    def help_stat(self):

        localctx = TeradataSQLDDLParser.Help_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_help_stat)
        self._la = 0 # Token type
        try:
            self.state = 6418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDDLParser.HelpOnlineStatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6219
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6220
                localctx.request = self.match(TeradataSQLDDLParser.CHAR_STRING)
                pass

            elif la_ == 2:
                localctx = TeradataSQLDDLParser.HelpColumnListStatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6221
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6222
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 6228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
                if la_ == 1:
                    self.state = 6223
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 6224
                    localctx.table_name_for_all_columns = self.table_name()
                    self.state = 6225
                    self.match(TeradataSQLDDLParser.DOT_)
                    self.state = 6226
                    self.match(TeradataSQLDDLParser.MUL_SIGN)
                    pass


                self.state = 6240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6230
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6236
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
                    if la_ == 1:
                        self.state = 6231
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 6232
                        localctx.table_name_for_all_columns = self.table_name()
                        self.state = 6233
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 6234
                        self.match(TeradataSQLDDLParser.MUL_SIGN)
                        pass


                    self.state = 6242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = TeradataSQLDDLParser.HelpColumnFromStatContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6243
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6244
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 6245
                self.column_name()
                self.state = 6250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6246
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6247
                    self.column_name()
                    self.state = 6252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6253
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 6254
                self.table_name()
                self.state = 6259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6255
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6256
                    self.table_name()
                    self.state = 6261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                localctx = TeradataSQLDDLParser.HelpColumnAllFromStatContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6262
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6263
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 6264
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                self.state = 6265
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 6266
                self.table_name()
                self.state = 6271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6267
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6268
                    self.table_name()
                    self.state = 6273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = TeradataSQLDDLParser.HelpColumnFromErrorTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6274
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6275
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 6276
                self.column_name()
                self.state = 6277
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 6278
                self.match(TeradataSQLDDLParser.ERROR)
                self.state = 6279
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 6280
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6281
                localctx.data_table_name = self.table_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLDDLParser.HelpConstraintStatContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6283
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6284
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 6285
                localctx.constraint_name = self.object_name()
                pass

            elif la_ == 7:
                localctx = TeradataSQLDDLParser.HelpTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6286
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6287
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 6288
                self.table_name()
                pass

            elif la_ == 8:
                localctx = TeradataSQLDDLParser.HelpErrorTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6289
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6290
                self.match(TeradataSQLDDLParser.ERROR)
                self.state = 6291
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 6292
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6293
                localctx.data_table_name = self.table_name()
                pass

            elif la_ == 9:
                localctx = TeradataSQLDDLParser.HelpVolatileTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6294
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6295
                self.match(TeradataSQLDDLParser.VOLATILE)
                self.state = 6296
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 6297
                self.table_name()
                pass

            elif la_ == 10:
                localctx = TeradataSQLDDLParser.HelpViewStatContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6298
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6299
                self.match(TeradataSQLDDLParser.VIEW)
                self.state = 6300
                localctx.view_name = self.table_name()
                pass

            elif la_ == 11:
                localctx = TeradataSQLDDLParser.HelpIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6301
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6302
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 6304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==417:
                    self.state = 6303
                    self.match(TeradataSQLDDLParser.TEMPORARY)


                self.state = 6306
                localctx.indexed_object_name = self.object_name()
                self.state = 6318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 6307
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 6308
                    self.column_name()
                    self.state = 6313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6309
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 6310
                        self.column_name()
                        self.state = 6315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6316
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass

            elif la_ == 12:
                localctx = TeradataSQLDDLParser.HelpJoinIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6320
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6321
                self.match(TeradataSQLDDLParser.JOIN)
                self.state = 6322
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 6323
                localctx.join_index_name = self.object_name()
                pass

            elif la_ == 13:
                localctx = TeradataSQLDDLParser.HelpHashIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6324
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6325
                self.match(TeradataSQLDDLParser.HASH)
                self.state = 6326
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 6327
                localctx.hash_index_name = self.object_name()
                pass

            elif la_ == 14:
                localctx = TeradataSQLDDLParser.HelpProcedureStatContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6328
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6329
                self.match(TeradataSQLDDLParser.PROCEDURE)
                self.state = 6330
                self.procedure_name()
                self.state = 6332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 537)) & ~0x3f) == 0 and ((1 << (_la - 537)) & 21) != 0):
                    self.state = 6331
                    _la = self._input.LA(1)
                    if not(((((_la - 537)) & ~0x3f) == 0 and ((1 << (_la - 537)) & 21) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 15:
                localctx = TeradataSQLDDLParser.HelpFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 6334
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6335
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6336
                self.function_name()
                self.state = 6349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 6337
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 6346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                        self.state = 6338
                        self.variable_data_type()
                        self.state = 6343
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 6339
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 6340
                            self.variable_data_type()
                            self.state = 6345
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 6348
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass

            elif la_ == 16:
                localctx = TeradataSQLDDLParser.HelpSpecificFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 6351
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6352
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 6353
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6354
                self.function_name()
                pass

            elif la_ == 17:
                localctx = TeradataSQLDDLParser.HelpMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 6355
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6356
                self.method()
                pass

            elif la_ == 18:
                localctx = TeradataSQLDDLParser.HelpSpecificMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 6357
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6358
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 6359
                self.match(TeradataSQLDDLParser.METHOD)
                self.state = 6361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
                if la_ == 1:
                    self.state = 6360
                    self.sysudtlib()


                self.state = 6363
                self.method_name()
                pass

            elif la_ == 19:
                localctx = TeradataSQLDDLParser.HelpTypeStatContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 6364
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6365
                self.match(TeradataSQLDDLParser.TYPE)
                self.state = 6366
                self.udt_type()
                self.state = 6368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243 or _la==538:
                    self.state = 6367
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==538):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 20:
                localctx = TeradataSQLDDLParser.HelpStorageFormatSchemaStatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 6370
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6371
                self.dataset_storage_format()
                self.state = 6372
                self.match(TeradataSQLDDLParser.SCHEMA)
                self.state = 6373
                localctx.schema_name = self.udt_type()
                pass

            elif la_ == 21:
                localctx = TeradataSQLDDLParser.HelpCastStatContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 6375
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6376
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 6377
                self.udt_type()
                self.state = 6379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==930 or _la==954:
                    self.state = 6378
                    _la = self._input.LA(1)
                    if not(_la==930 or _la==954):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 22:
                localctx = TeradataSQLDDLParser.HelpTransformStatContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 6381
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6382
                self.match(TeradataSQLDDLParser.TRANSFORM)
                self.state = 6383
                self.udt_type()
                pass

            elif la_ == 23:
                localctx = TeradataSQLDDLParser.HelpDatabaseStatContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 6384
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6385
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 6386
                self.database_name()
                pass

            elif la_ == 24:
                localctx = TeradataSQLDDLParser.HelpUserStatContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 6387
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6388
                self.match(TeradataSQLDDLParser.USER)
                self.state = 6389
                self.user_name()
                pass

            elif la_ == 25:
                localctx = TeradataSQLDDLParser.HelpTriggerStatContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 6390
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6391
                self.match(TeradataSQLDDLParser.TRIGGER)
                self.state = 6392
                localctx.trigger_or_table_name = self.object_name()
                pass

            elif la_ == 26:
                localctx = TeradataSQLDDLParser.HelpForeignServerContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 6393
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6394
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 6395
                self.match(TeradataSQLDDLParser.SERVER)
                self.state = 6397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
                if la_ == 1:
                    self.state = 6396
                    self.td_server_db()


                self.state = 6399
                localctx.server_name = self.unqualified_name()
                pass

            elif la_ == 27:
                localctx = TeradataSQLDDLParser.HelpForeignDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 6400
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6401
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 6402
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 6403
                self.database_name()
                self.state = 6404
                self.server_name_reference()
                pass

            elif la_ == 28:
                localctx = TeradataSQLDDLParser.HelpForeignTableContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 6406
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6407
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 6408
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 6409
                self.table_name()
                self.state = 6410
                self.server_name_reference()
                pass

            elif la_ == 29:
                localctx = TeradataSQLDDLParser.HelpForeignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 6412
                self.match(TeradataSQLDDLParser.HELP)
                self.state = 6413
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 6414
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6415
                self.function_name()
                self.state = 6416
                self.server_name_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Help_statistics_optimimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_help_statistics_optimimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelp_statistics_optimimizer_form_stat" ):
                listener.enterHelp_statistics_optimimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelp_statistics_optimimizer_form_stat" ):
                listener.exitHelp_statistics_optimimizer_form_stat(self)




    def help_statistics_optimimizer_form_stat(self):

        localctx = TeradataSQLDDLParser.Help_statistics_optimimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_help_statistics_optimimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6420
            self.match(TeradataSQLDDLParser.HELP)
            self.state = 6422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 6421
                self.match(TeradataSQLDDLParser.CURRENT)


            self.state = 6424
            self.match(TeradataSQLDDLParser.STATISTICS)
            self.state = 6426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 6425
                self.match(TeradataSQLDDLParser.ON)


            self.state = 6429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 6428
                self.match(TeradataSQLDDLParser.TEMPORARY)


            self.state = 6431
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Help_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def HELP(self):
            return self.getToken(TeradataSQLDDLParser.HELP, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLEID, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDDLParser.MODIFIED, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_help_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelp_statistics_qcd_form_stat" ):
                listener.enterHelp_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelp_statistics_qcd_form_stat" ):
                listener.exitHelp_statistics_qcd_form_stat(self)




    def help_statistics_qcd_form_stat(self):

        localctx = TeradataSQLDDLParser.Help_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_help_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6433
            self.match(TeradataSQLDDLParser.HELP)
            self.state = 6435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 6434
                self.match(TeradataSQLDDLParser.CURRENT)


            self.state = 6437
            self.match(TeradataSQLDDLParser.STATISTICS)
            self.state = 6439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 6438
                self.match(TeradataSQLDDLParser.ON)


            self.state = 6441
            self.object_name()
            self.state = 6442
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 6443
            localctx.qcd_name = self.database_name()
            self.state = 6447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 6444
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6445
                self.match(TeradataSQLDDLParser.QUERY)
                self.state = 6446
                localctx.query_id = self.integer_literal()


            self.state = 6451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 6449
                self.match(TeradataSQLDDLParser.SAMPLEID)
                self.state = 6450
                localctx.statistics_id = self.integer_literal()


            self.state = 6455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 6453
                self.match(TeradataSQLDDLParser.USING)
                self.state = 6454
                self.match(TeradataSQLDDLParser.MODIFIED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incremental_restore_allow_write_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDDLParser.INCREMENTAL, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLDDLParser.RESTORE, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLDDLParser.ALLOW, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDDLParser.WRITE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_incremental_restore_allow_write_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncremental_restore_allow_write_stat" ):
                listener.enterIncremental_restore_allow_write_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncremental_restore_allow_write_stat" ):
                listener.exitIncremental_restore_allow_write_stat(self)




    def incremental_restore_allow_write_stat(self):

        localctx = TeradataSQLDDLParser.Incremental_restore_allow_write_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_incremental_restore_allow_write_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6457
            self.match(TeradataSQLDDLParser.INCREMENTAL)
            self.state = 6458
            self.match(TeradataSQLDDLParser.RESTORE)
            self.state = 6459
            self.match(TeradataSQLDDLParser.ALLOW)
            self.state = 6460
            self.match(TeradataSQLDDLParser.WRITE)
            self.state = 6461
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6462
            self.object_name()
            self.state = 6467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6463
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 6464
                self.object_name()
                self.state = 6469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_incremental_archive_off_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDDLParser.INCREMENTAL, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLDDLParser.ARCHIVE, 0)

        def OFF(self):
            return self.getToken(TeradataSQLDDLParser.OFF, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_logging_incremental_archive_off_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_incremental_archive_off_stat" ):
                listener.enterLogging_incremental_archive_off_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_incremental_archive_off_stat" ):
                listener.exitLogging_incremental_archive_off_stat(self)




    def logging_incremental_archive_off_stat(self):

        localctx = TeradataSQLDDLParser.Logging_incremental_archive_off_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_logging_incremental_archive_off_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6470
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 6471
            self.match(TeradataSQLDDLParser.INCREMENTAL)
            self.state = 6472
            self.match(TeradataSQLDDLParser.ARCHIVE)
            self.state = 6473
            self.match(TeradataSQLDDLParser.OFF)
            self.state = 6474
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6475
            self.object_name()
            self.state = 6480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6476
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 6477
                self.object_name()
                self.state = 6482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_incremental_archive_on_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDDLParser.INCREMENTAL, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLDDLParser.ARCHIVE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def LOG(self):
            return self.getToken(TeradataSQLDDLParser.LOG, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDDLParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_logging_incremental_archive_on_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_incremental_archive_on_stat" ):
                listener.enterLogging_incremental_archive_on_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_incremental_archive_on_stat" ):
                listener.exitLogging_incremental_archive_on_stat(self)




    def logging_incremental_archive_on_stat(self):

        localctx = TeradataSQLDDLParser.Logging_incremental_archive_on_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_logging_incremental_archive_on_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6483
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 6484
            self.match(TeradataSQLDDLParser.INCREMENTAL)
            self.state = 6485
            self.match(TeradataSQLDDLParser.ARCHIVE)
            self.state = 6486
            self.match(TeradataSQLDDLParser.ON)
            self.state = 6487
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6488
            self.object_name()
            self.state = 6493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6489
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 6490
                self.object_name()
                self.state = 6495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 6496
                self.match(TeradataSQLDDLParser.DELETE)
                self.state = 6497
                self.match(TeradataSQLDDLParser.LOG)
                self.state = 6498
                self.match(TeradataSQLDDLParser.ROWS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(TeradataSQLDDLParser.MODIFY, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def modified_database_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Modified_database_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Modified_database_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_modify_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_database_stat" ):
                listener.enterModify_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_database_stat" ):
                listener.exitModify_database_stat(self)




    def modify_database_stat(self):

        localctx = TeradataSQLDDLParser.Modify_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_modify_database_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6501
            self.match(TeradataSQLDDLParser.MODIFY)
            self.state = 6502
            self.match(TeradataSQLDDLParser.DATABASE)
            self.state = 6503
            self.database_name()
            self.state = 6504
            self.match(TeradataSQLDDLParser.AS)
            self.state = 6505
            self.modified_database_attribute()
            self.state = 6510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6506
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 6507
                self.modified_database_attribute()
                self.state = 6512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modified_database_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.account_name = None # Char_string_literalContext

        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_size_specContext,0)


        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_default_mapContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_journal_tableContext,0)


        def drop_default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_default_journal_tableContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_modified_database_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModified_database_attribute" ):
                listener.enterModified_database_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModified_database_attribute" ):
                listener.exitModified_database_attribute(self)




    def modified_database_attribute(self):

        localctx = TeradataSQLDDLParser.Modified_database_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_modified_database_attribute)
        try:
            self.state = 6523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6513
                self.database_size_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6514
                self.match(TeradataSQLDDLParser.ACCOUNT)
                self.state = 6515
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6516
                localctx.account_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6517
                self.database_default_map()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6518
                self.fallback_protection()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6519
                self.before_journal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6520
                self.after_journal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6521
                self.default_journal_table()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6522
                self.drop_default_journal_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_profile_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(TeradataSQLDDLParser.MODIFY, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def profile_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Profile_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_modify_profile_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_profile_stat" ):
                listener.enterModify_profile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_profile_stat" ):
                listener.exitModify_profile_stat(self)




    def modify_profile_stat(self):

        localctx = TeradataSQLDDLParser.Modify_profile_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_modify_profile_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6525
            self.match(TeradataSQLDDLParser.MODIFY)
            self.state = 6526
            self.match(TeradataSQLDDLParser.PROFILE)
            self.state = 6527
            self.profile_name()
            self.state = 6528
            self.match(TeradataSQLDDLParser.AS)
            self.state = 6529
            self.profile_attribute()
            self.state = 6534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6530
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 6531
                self.profile_attribute()
                self.state = 6536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(TeradataSQLDDLParser.MODIFY, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def modify_user_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Modify_user_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Modify_user_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_modify_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_user_stat" ):
                listener.enterModify_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_user_stat" ):
                listener.exitModify_user_stat(self)




    def modify_user_stat(self):

        localctx = TeradataSQLDDLParser.Modify_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_modify_user_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6537
            self.match(TeradataSQLDDLParser.MODIFY)
            self.state = 6538
            self.match(TeradataSQLDDLParser.USER)
            self.state = 6539
            self.user_name()
            self.state = 6540
            self.match(TeradataSQLDDLParser.AS)
            self.state = 6541
            self.modify_user_attribute()
            self.state = 6546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6542
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 6543
                self.modify_user_attribute()
                self.state = 6548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_user_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.startup_string = None # Char_string_literalContext
            self.expire = None # Integer_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts
            self.timezone_string = None # Char_string_literalContext

        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_size_specContext,0)


        def STARTUP(self):
            return self.getToken(TeradataSQLDDLParser.STARTUP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def PASSWORD(self):
            return self.getToken(TeradataSQLDDLParser.PASSWORD, 0)

        def password(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.PasswordContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLDDLParser.EXPIRE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def RELEASE(self):
            return self.getToken(TeradataSQLDDLParser.RELEASE, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDDLParser.LOCK, 0)

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_default_mapContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def COLLATION(self):
            return self.getToken(TeradataSQLDDLParser.COLLATION, 0)

        def collation_sequence(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collation_sequenceContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_journal_tableContext,0)


        def drop_default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_default_journal_tableContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def DATEFORM(self):
            return self.getToken(TeradataSQLDDLParser.DATEFORM, 0)

        def INTEGERDATE(self):
            return self.getToken(TeradataSQLDDLParser.INTEGERDATE, 0)

        def ANSIDATE(self):
            return self.getToken(TeradataSQLDDLParser.ANSIDATE, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDDLParser.KANJISJIS, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,0)


        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def TRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.TRANSFORM, 0)

        def transform_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Transform_specificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Transform_specificationContext,i)


        def DBA(self):
            return self.getToken(TeradataSQLDDLParser.DBA, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLDDLParser.EXPORTWIDTH, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def user_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_constraintContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_modify_user_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_user_attribute" ):
                listener.enterModify_user_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_user_attribute" ):
                listener.exitModify_user_attribute(self)




    def modify_user_attribute(self):

        localctx = TeradataSQLDDLParser.Modify_user_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_modify_user_attribute)
        self._la = 0 # Token type
        try:
            self.state = 6666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6549
                self.database_size_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6550
                self.match(TeradataSQLDDLParser.STARTUP)
                self.state = 6551
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 6552
                    localctx.startup_string = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 6553
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6556
                self.match(TeradataSQLDDLParser.PASSWORD)
                self.state = 6557
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6565
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1193, 1205]:
                    self.state = 6558
                    self.password()
                    pass
                elif token in [1213]:
                    self.state = 6559
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 6560
                    self.match(TeradataSQLDDLParser.EXPIRE)
                    self.state = 6561
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 6562
                    localctx.expire = self.integer_literal()
                    self.state = 6563
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 6567
                    self.match(TeradataSQLDDLParser.FOR)
                    self.state = 6568
                    self.match(TeradataSQLDDLParser.USER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6571
                self.match(TeradataSQLDDLParser.RELEASE)
                self.state = 6572
                self.match(TeradataSQLDDLParser.PASSWORD)
                self.state = 6573
                self.match(TeradataSQLDDLParser.LOCK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6574
                self.match(TeradataSQLDDLParser.ACCOUNT)
                self.state = 6575
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6585
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 6576
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 6581
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,774,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6577
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 6578
                            localctx._char_string_literal = self.char_string_literal()
                            localctx.account_string.append(localctx._char_string_literal) 
                        self.state = 6583
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,774,self._ctx)

                    pass
                elif token in [274]:
                    self.state = 6584
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6587
                self.database_default_map()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6588
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 6589
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 6590
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6591
                self.database_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6592
                self.match(TeradataSQLDDLParser.COLLATION)
                self.state = 6593
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6594
                self.collation_sequence()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6595
                self.fallback_protection()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6596
                self.before_journal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6597
                self.after_journal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6598
                self.default_journal_table()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6599
                self.drop_default_journal_table()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6600
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 6601
                self.match(TeradataSQLDDLParser.ZONE)
                self.state = 6602
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 6603
                    self.match(TeradataSQLDDLParser.LOCAL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203, 1221, 1222]:
                    self.state = 6605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1221 or _la==1222:
                        self.state = 6604
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 6607
                    localctx.timezone_string = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 6608
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6611
                self.match(TeradataSQLDDLParser.DATEFORM)
                self.state = 6612
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6613
                _la = self._input.LA(1)
                if not(_la==17 or _la==203 or _la==274):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6614
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 6615
                self.match(TeradataSQLDDLParser.CHARACTER)
                self.state = 6616
                self.match(TeradataSQLDDLParser.SET)
                self.state = 6617
                _la = self._input.LA(1)
                if not(_la==725 or _la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6618
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 6619
                self.match(TeradataSQLDDLParser.ROLE)
                self.state = 6620
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6625
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 6621
                    self.role_name()
                    pass
                elif token in [269]:
                    self.state = 6622
                    self.match(TeradataSQLDDLParser.NONE)
                    pass
                elif token in [274]:
                    self.state = 6623
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                elif token in [13]:
                    self.state = 6624
                    self.match(TeradataSQLDDLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6627
                self.match(TeradataSQLDDLParser.PROFILE)
                self.state = 6628
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6631
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 6629
                    self.profile_name()
                    pass
                elif token in [274]:
                    self.state = 6630
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6633
                self.match(TeradataSQLDDLParser.TRANSFORM)
                self.state = 6634
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 6643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 6635
                    self.transform_specification()
                    self.state = 6640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6636
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 6637
                        self.transform_specification()
                        self.state = 6642
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6645
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 6646
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 6649
                self.match(TeradataSQLDDLParser.DBA)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6650
                self.match(TeradataSQLDDLParser.EXPORTWIDTH)
                self.state = 6651
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6654
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 6652
                    self.char_string_literal()
                    pass
                elif token in [111]:
                    self.state = 6653
                    self.match(TeradataSQLDDLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6656
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 6657
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6658
                self.user_constraint()
                self.state = 6663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,784,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6659
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 6660
                        self.user_constraint() 
                    self.state = 6665
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,784,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_specific_function_name = None # Function_nameContext
            self.new_specific_function_name = None # Function_nameContext
            self.old_function_name = None # Function_nameContext
            self.new_function_name = None # Function_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Function_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rename_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_function_stat" ):
                listener.enterRename_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_function_stat" ):
                listener.exitRename_function_stat(self)




    def rename_function_stat(self):

        localctx = TeradataSQLDDLParser.Rename_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_rename_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6668
            self.match(TeradataSQLDDLParser.RENAME)
            self.state = 6693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.state = 6669
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 6670
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6671
                localctx.old_specific_function_name = self.function_name()
                self.state = 6672
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6673
                localctx.new_specific_function_name = self.function_name()
                pass
            elif token in [166]:
                self.state = 6675
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6676
                localctx.old_function_name = self.function_name()
                self.state = 6688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 6677
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 6678
                    self.data_type()
                    self.state = 6683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6679
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 6680
                        self.data_type()
                        self.state = 6685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6686
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                self.state = 6690
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6691
                localctx.new_function_name = self.function_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_procedure_name = None # Procedure_nameContext
            self.new_procedure_name = None # Procedure_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Procedure_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rename_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_procedure_stat" ):
                listener.enterRename_procedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_procedure_stat" ):
                listener.exitRename_procedure_stat(self)




    def rename_procedure_stat(self):

        localctx = TeradataSQLDDLParser.Rename_procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_rename_procedure_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6695
            self.match(TeradataSQLDDLParser.RENAME)
            self.state = 6696
            self.match(TeradataSQLDDLParser.PROCEDURE)
            self.state = 6697
            localctx.old_procedure_name = self.procedure_name()
            self.state = 6698
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6699
            localctx.new_procedure_name = self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_macro_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_macro_name = None # Macro_nameContext
            self.new_macro_name = None # Macro_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def macro_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Macro_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rename_macro_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_macro_stat" ):
                listener.enterRename_macro_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_macro_stat" ):
                listener.exitRename_macro_stat(self)




    def rename_macro_stat(self):

        localctx = TeradataSQLDDLParser.Rename_macro_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_rename_macro_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6701
            self.match(TeradataSQLDDLParser.RENAME)
            self.state = 6702
            self.match(TeradataSQLDDLParser.MACRO)
            self.state = 6703
            localctx.old_macro_name = self.macro_name()
            self.state = 6704
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6705
            localctx.new_macro_name = self.macro_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_table_name = None # Table_nameContext
            self.new_table_name = None # Table_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rename_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_table_stat" ):
                listener.enterRename_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_table_stat" ):
                listener.exitRename_table_stat(self)




    def rename_table_stat(self):

        localctx = TeradataSQLDDLParser.Rename_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_rename_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6707
            self.match(TeradataSQLDDLParser.RENAME)
            self.state = 6708
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 6709
            localctx.old_table_name = self.table_name()
            self.state = 6710
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6711
            localctx.new_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_trigger_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_trigger_name = None # Object_nameContext
            self.new_trigger_name = None # Object_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rename_trigger_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_trigger_stat" ):
                listener.enterRename_trigger_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_trigger_stat" ):
                listener.exitRename_trigger_stat(self)




    def rename_trigger_stat(self):

        localctx = TeradataSQLDDLParser.Rename_trigger_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_rename_trigger_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6713
            self.match(TeradataSQLDDLParser.RENAME)
            self.state = 6714
            self.match(TeradataSQLDDLParser.TRIGGER)
            self.state = 6715
            localctx.old_trigger_name = self.object_name()
            self.state = 6716
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6717
            localctx.new_trigger_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_view_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_view_name = None # Table_nameContext
            self.new_view_name = None # Table_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLDDLParser.RENAME, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rename_view_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_view_stat" ):
                listener.enterRename_view_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_view_stat" ):
                listener.exitRename_view_stat(self)




    def rename_view_stat(self):

        localctx = TeradataSQLDDLParser.Rename_view_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_rename_view_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6719
            self.match(TeradataSQLDDLParser.RENAME)
            self.state = 6720
            self.match(TeradataSQLDDLParser.VIEW)
            self.state = 6721
            localctx.old_view_name = self.table_name()
            self.state = 6722
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6723
            localctx.new_view_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replace_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None # Integer_literalContext

        def REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REPLACE, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_itemsContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def query_logging_with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Query_logging_with_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_with_itemContext,i)


        def MODE(self):
            return self.getToken(TeradataSQLDDLParser.MODE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLDDLParser.LIMIT, 0)

        def query_logging_limit_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Query_logging_limit_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_limit_itemContext,i)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_replace_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_query_logging_stat" ):
                listener.enterReplace_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_query_logging_stat" ):
                listener.exitReplace_query_logging_stat(self)




    def replace_query_logging_stat(self):

        localctx = TeradataSQLDDLParser.Replace_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_replace_query_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6725
            self.match(TeradataSQLDDLParser.REPLACE)
            self.state = 6726
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 6727
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 6737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6728
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 6729
                self.query_logging_with_item()
                self.state = 6734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6730
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6731
                    self.query_logging_with_item()
                    self.state = 6736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 6739
                self.match(TeradataSQLDDLParser.MODE)
                self.state = 6740
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6741
                localctx.m = self.integer_literal()


            self.state = 6750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 6744
                self.match(TeradataSQLDDLParser.LIMIT)
                self.state = 6745
                self.query_logging_limit_item()
                self.state = 6748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 6746
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 6747
                    self.query_logging_limit_item()




            self.state = 6752
            self.match(TeradataSQLDDLParser.ON)
            self.state = 6753
            self.query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_session_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.account_string = None # Char_string_literalContext
            self.calendar_name = None # Unqualified_nameContext
            self._table_name = None # Table_nameContext
            self.udf_name = list() # of Table_nameContexts

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def SESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.SESSION)
            else:
                return self.getToken(TeradataSQLDDLParser.SESSION, i)

        def REQUEST(self):
            return self.getToken(TeradataSQLDDLParser.REQUEST, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.SET)
            else:
                return self.getToken(TeradataSQLDDLParser.SET, i)

        def SS(self):
            return self.getToken(TeradataSQLDDLParser.SS, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.CALENDAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def PASS(self):
            return self.getToken(TeradataSQLDDLParser.PASS, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDDLParser.THROUGH, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLDDLParser.OFF, 0)

        def COLLATION(self):
            return self.getToken(TeradataSQLDDLParser.COLLATION, 0)

        def collation_sequence(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collation_sequenceContext,0)


        def session_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Session_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Session_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,i)


        def DATEFORM(self):
            return self.getToken(TeradataSQLDDLParser.DATEFORM, 0)

        def ANSIDATE(self):
            return self.getToken(TeradataSQLDDLParser.ANSIDATE, 0)

        def INTEGERDATE(self):
            return self.getToken(TeradataSQLDDLParser.INTEGERDATE, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLDDLParser.DEBUG, 0)

        def session_debug_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Session_debug_specContext,0)


        def DOT(self):
            return self.getToken(TeradataSQLDDLParser.DOT, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLDDLParser.NOTATION, 0)

        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ERROR)
            else:
                return self.getToken(TeradataSQLDDLParser.ERROR, i)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def LIST(self):
            return self.getToken(TeradataSQLDDLParser.LIST, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLDDLParser.LOADING, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CONCURRENT, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def TRACE(self):
            return self.getToken(TeradataSQLDDLParser.TRACE, 0)

        def trace_enabling_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Trace_enabling_specContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDDLParser.IGNORE, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDDLParser.ERRORS, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLDDLParser.SEARCHUIFDBPATH, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTERISTICS, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLDDLParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLDDLParser.LEVEL, 0)

        def isolation_level(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Isolation_levelContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLDDLParser.UDFSEARCHPATH, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_set_session_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_session_stat" ):
                listener.enterSet_session_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_session_stat" ):
                listener.exitSet_session_stat(self)




    def set_session_stat(self):

        localctx = TeradataSQLDDLParser.Set_session_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_set_session_stat)
        self._la = 0 # Token type
        try:
            self.state = 6933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6758
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6755
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6756
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6757
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6760
                self.match(TeradataSQLDDLParser.ACCOUNT)
                self.state = 6761
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6762
                localctx.account_string = self.char_string_literal()
                self.state = 6763
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6764
                _la = self._input.LA(1)
                if not(_la==343 or _la==371):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6769
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6766
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6767
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6768
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6771
                self.match(TeradataSQLDDLParser.CALENDAR)
                self.state = 6772
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6773
                localctx.calendar_name = self.unqualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6774
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6775
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6776
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6779
                self.match(TeradataSQLDDLParser.CHARACTER)
                self.state = 6780
                self.match(TeradataSQLDDLParser.SET)
                self.state = 6781
                self.match(TeradataSQLDDLParser.UNICODE)
                self.state = 6782
                self.match(TeradataSQLDDLParser.PASS)
                self.state = 6783
                self.match(TeradataSQLDDLParser.THROUGH)
                self.state = 6784
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6788
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6785
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6786
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6787
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6790
                self.match(TeradataSQLDDLParser.COLLATION)
                self.state = 6791
                self.collation_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6795
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6792
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6793
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6794
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6797
                self.session_constraint()
                self.state = 6802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6798
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6799
                    self.session_constraint()
                    self.state = 6804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6808
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6805
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6806
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6807
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6810
                self.match(TeradataSQLDDLParser.DATABASE)
                self.state = 6811
                self.database_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6815
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6812
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6813
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6814
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6817
                self.match(TeradataSQLDDLParser.DATEFORM)
                self.state = 6818
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6819
                _la = self._input.LA(1)
                if not(_la==17 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6823
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6820
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6821
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6822
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6825
                self.match(TeradataSQLDDLParser.DEBUG)
                self.state = 6826
                self.session_debug_spec()
                self.state = 6827
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6832
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6829
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6830
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6831
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6834
                self.match(TeradataSQLDDLParser.DOT)
                self.state = 6835
                self.match(TeradataSQLDDLParser.NOTATION)
                self.state = 6836
                _la = self._input.LA(1)
                if not(_la==111 or _la==137 or _la==274 or _la==741):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6837
                self.match(TeradataSQLDDLParser.ON)
                self.state = 6838
                self.match(TeradataSQLDDLParser.ERROR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6842
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6839
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6840
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6841
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6844
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 6845
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 6849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==587:
                    self.state = 6848
                    self.match(TeradataSQLDDLParser.CONCURRENT)


                self.state = 6851
                self.match(TeradataSQLDDLParser.ISOLATED)
                self.state = 6852
                self.match(TeradataSQLDDLParser.LOADING)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6853
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6854
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6855
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6858
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6859
                self.match(TeradataSQLDDLParser.TRACE)
                self.state = 6862
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [457]:
                    self.state = 6860
                    self.trace_enabling_spec()
                    pass
                elif token in [283]:
                    self.state = 6861
                    self.match(TeradataSQLDDLParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6867
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6864
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6865
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6866
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6869
                self.match(TeradataSQLDDLParser.JSON)
                self.state = 6870
                self.match(TeradataSQLDDLParser.IGNORE)
                self.state = 6871
                self.match(TeradataSQLDDLParser.ERRORS)
                self.state = 6872
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6876
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6873
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6874
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6875
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6878
                self.match(TeradataSQLDDLParser.SEARCHUIFDBPATH)
                self.state = 6879
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6880
                self.database_name()
                self.state = 6885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6881
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6882
                    self.database_name()
                    self.state = 6887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6891
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6888
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6889
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6890
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6893
                self.match(TeradataSQLDDLParser.CHARACTERISTICS)
                self.state = 6894
                self.match(TeradataSQLDDLParser.AS)
                self.state = 6895
                self.match(TeradataSQLDDLParser.TRANSACTION)
                self.state = 6896
                self.match(TeradataSQLDDLParser.ISOLATION)
                self.state = 6897
                self.match(TeradataSQLDDLParser.LEVEL)
                self.state = 6898
                self.isolation_level()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6899
                self.match(TeradataSQLDDLParser.SET)
                self.state = 6900
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 6901
                self.match(TeradataSQLDDLParser.ZONE)
                self.state = 6905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
                if la_ == 1:
                    self.state = 6902
                    self.match(TeradataSQLDDLParser.LOCAL)
                    pass

                elif la_ == 2:
                    self.state = 6903
                    self.match(TeradataSQLDDLParser.USER)
                    pass

                elif la_ == 3:
                    self.state = 6904
                    self.scalar_expr(0)
                    pass


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6910
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6907
                    self.match(TeradataSQLDDLParser.SET)
                    self.state = 6908
                    self.match(TeradataSQLDDLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6909
                    self.match(TeradataSQLDDLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6912
                self.match(TeradataSQLDDLParser.UDFSEARCHPATH)
                self.state = 6913
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6914
                self.database_name()
                self.state = 6919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6915
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6916
                    self.database_name()
                    self.state = 6921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6922
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 6923
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6924
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 6925
                localctx._table_name = self.table_name()
                localctx.udf_name.append(localctx._table_name)
                self.state = 6930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6926
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6927
                    localctx._table_name = self.table_name()
                    localctx.udf_name.append(localctx._table_name)
                    self.state = 6932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII(self):
            return self.getToken(TeradataSQLDDLParser.ASCII, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLDDLParser.CHARSET_COLL, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLDDLParser.EBCDIC, 0)

        def HOST(self):
            return self.getToken(TeradataSQLDDLParser.HOST, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLDDLParser.JIS_COLL, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLDDLParser.MULTINATIONAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_collation_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_sequence" ):
                listener.enterCollation_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_sequence" ):
                listener.exitCollation_sequence(self)




    def collation_sequence(self):

        localctx = TeradataSQLDDLParser.Collation_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_collation_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6935
            _la = self._input.LA(1)
            if not(_la==535 or _la==570 or _la==642 or _la==691 or _la==719 or _la==788):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_level_security_constraint_name = None # Unqualified_nameContext
            self.level_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.category_name = list() # of Unqualified_nameContexts

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_session_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_constraint" ):
                listener.enterSession_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_constraint" ):
                listener.exitSession_constraint(self)




    def session_constraint(self):

        localctx = TeradataSQLDDLParser.Session_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_session_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6937
            self.match(TeradataSQLDDLParser.CONSTRAINT)
            self.state = 6938
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 6939
            localctx.row_level_security_constraint_name = self.unqualified_name()
            self.state = 6940
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 6951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.state = 6941
                localctx.level_name = self.unqualified_name()
                pass

            elif la_ == 2:
                self.state = 6942
                localctx._unqualified_name = self.unqualified_name()
                localctx.category_name.append(localctx._unqualified_name)
                self.state = 6947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6943
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 6944
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.category_name.append(localctx._unqualified_name)
                    self.state = 6949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 6950
                self.match(TeradataSQLDDLParser.NULL)
                pass


            self.state = 6953
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isolation_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(TeradataSQLDDLParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLDDLParser.UNCOMMITTED, 0)

        def RU(self):
            return self.getToken(TeradataSQLDDLParser.RU, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLDDLParser.SERIALIZABLE, 0)

        def SR(self):
            return self.getToken(TeradataSQLDDLParser.SR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_isolation_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolation_level" ):
                listener.enterIsolation_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolation_level" ):
                listener.exitIsolation_level(self)




    def isolation_level(self):

        localctx = TeradataSQLDDLParser.Isolation_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_isolation_level)
        try:
            self.state = 6960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [877]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6955
                self.match(TeradataSQLDDLParser.READ)
                self.state = 6956
                self.match(TeradataSQLDDLParser.UNCOMMITTED)
                pass
            elif token in [900]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6957
                self.match(TeradataSQLDDLParser.RU)
                pass
            elif token in [916]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6958
                self.match(TeradataSQLDDLParser.SERIALIZABLE)
                pass
            elif token in [935]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6959
                self.match(TeradataSQLDDLParser.SR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_debug_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_session_debug_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_debug_spec" ):
                listener.enterSession_debug_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_debug_spec" ):
                listener.exitSession_debug_spec(self)




    def session_debug_spec(self):

        localctx = TeradataSQLDDLParser.Session_debug_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_session_debug_spec)
        try:
            self.state = 6971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [166]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6962
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 6963
                self.function_name()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6964
                self.match(TeradataSQLDDLParser.PROCEDURE)
                self.state = 6965
                self.procedure_name()
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6966
                self.match(TeradataSQLDDLParser.METHOD)
                self.state = 6968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
                if la_ == 1:
                    self.state = 6967
                    self.sysudtlib()


                self.state = 6970
                self.method_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trace_enabling_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mask_string = None # Char_string_literalContext

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def TRACE(self):
            return self.getToken(TeradataSQLDDLParser.TRACE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_trace_enabling_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_enabling_spec" ):
                listener.enterTrace_enabling_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_enabling_spec" ):
                listener.exitTrace_enabling_spec(self)




    def trace_enabling_spec(self):

        localctx = TeradataSQLDDLParser.Trace_enabling_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_trace_enabling_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6973
            self.match(TeradataSQLDDLParser.USING)
            self.state = 6974
            localctx.mask_string = self.char_string_literal()
            self.state = 6975
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 6977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==428:
                self.state = 6976
                self.match(TeradataSQLDDLParser.TRACE)


            self.state = 6979
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 6980
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,0)


        def EXTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.EXTERNAL, 0)

        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_set_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_role_stat" ):
                listener.enterSet_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_role_stat" ):
                listener.exitSet_role_stat(self)




    def set_role_stat(self):

        localctx = TeradataSQLDDLParser.Set_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_set_role_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6982
            self.match(TeradataSQLDDLParser.SET)
            self.state = 6983
            self.match(TeradataSQLDDLParser.ROLE)
            self.state = 6989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 6984
                self.role_name()
                pass
            elif token in [151]:
                self.state = 6985
                self.match(TeradataSQLDDLParser.EXTERNAL)
                pass
            elif token in [269]:
                self.state = 6986
                self.match(TeradataSQLDDLParser.NONE)
                pass
            elif token in [274]:
                self.state = 6987
                self.match(TeradataSQLDDLParser.NULL)
                pass
            elif token in [13]:
                self.state = 6988
                self.match(TeradataSQLDDLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_query_band_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.band_spec = None # Char_string_literalContext

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDDLParser.QUERY_BAND, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def NONE(self):
            return self.getToken(TeradataSQLDDLParser.NONE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLDDLParser.SESSION, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLDDLParser.TRANSACTION, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def VOLATILE(self):
            return self.getToken(TeradataSQLDDLParser.VOLATILE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_set_query_band_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_query_band_stat" ):
                listener.enterSet_query_band_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_query_band_stat" ):
                listener.exitSet_query_band_stat(self)




    def set_query_band_stat(self):

        localctx = TeradataSQLDDLParser.Set_query_band_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_set_query_band_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6991
            self.match(TeradataSQLDDLParser.SET)
            self.state = 6992
            self.match(TeradataSQLDDLParser.QUERY_BAND)
            self.state = 6993
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 6996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 6994
                localctx.band_spec = self.char_string_literal()
                pass
            elif token in [269]:
                self.state = 6995
                self.match(TeradataSQLDDLParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 6998
                self.match(TeradataSQLDDLParser.UPDATE)


            self.state = 7001
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [371]:
                self.state = 7002
                self.match(TeradataSQLDDLParser.SESSION)
                self.state = 7004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==469:
                    self.state = 7003
                    self.match(TeradataSQLDDLParser.VOLATILE)


                pass
            elif token in [430]:
                self.state = 7006
                self.match(TeradataSQLDDLParser.TRANSACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_object_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_show_object_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowMethodStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def method(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.MethodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMethodStat" ):
                listener.enterShowMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMethodStat" ):
                listener.exitShowMethodStat(self)


    class ShowForeignServerContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.server_name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)
        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)
        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_server_dbContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowForeignServer" ):
                listener.enterShowForeignServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowForeignServer" ):
                listener.exitShowForeignServer(self)


    class ShowSpecificFunctionStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSpecificFunctionStat" ):
                listener.enterShowSpecificFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSpecificFunctionStat" ):
                listener.exitShowSpecificFunctionStat(self)


    class ShowAuthorizationStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.authorization_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAuthorizationStat" ):
                listener.enterShowAuthorizationStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAuthorizationStat" ):
                listener.exitShowAuthorizationStat(self)


    class ShowErrorTableStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.data_table_name = None # Table_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrorTableStat" ):
                listener.enterShowErrorTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrorTableStat" ):
                listener.exitShowErrorTableStat(self)


    class ShowStorageFormatSchemaStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.schema_name = None # Udt_typeContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Dataset_storage_formatContext,0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.SCHEMA, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)

        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_schemaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStorageFormatSchemaStat" ):
                listener.enterShowStorageFormatSchemaStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStorageFormatSchemaStat" ):
                listener.exitShowStorageFormatSchemaStat(self)


    class ShowFileStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.uif_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def FILE(self):
            return self.getToken(TeradataSQLDDLParser.FILE, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFileStat" ):
                listener.enterShowFileStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFileStat" ):
                listener.exitShowFileStat(self)


    class ShowHashIndexStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.hash_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowHashIndexStat" ):
                listener.enterShowHashIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowHashIndexStat" ):
                listener.exitShowHashIndexStat(self)


    class ShowCastStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCastStat" ):
                listener.enterShowCastStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCastStat" ):
                listener.exitShowCastStat(self)


    class ShowMacroStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)
        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMacroStat" ):
                listener.enterShowMacroStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMacroStat" ):
                listener.exitShowMacroStat(self)


    class ShowGlopSetStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.glop_set_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)
        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlopSetStat" ):
                listener.enterShowGlopSetStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlopSetStat" ):
                listener.exitShowGlopSetStat(self)


    class ShowSpecificMethodStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)
        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSpecificMethodStat" ):
                listener.enterShowSpecificMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSpecificMethodStat" ):
                listener.exitShowSpecificMethodStat(self)


    class ShowProcedureStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)
        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProcedureStat" ):
                listener.enterShowProcedureStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProcedureStat" ):
                listener.exitShowProcedureStat(self)


    class ShowConstraintStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.constraint_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowConstraintStat" ):
                listener.enterShowConstraintStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowConstraintStat" ):
                listener.exitShowConstraintStat(self)


    class ShowTypeStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTypeStat" ):
                listener.enterShowTypeStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTypeStat" ):
                listener.exitShowTypeStat(self)


    class ShowTableStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)
        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableStat" ):
                listener.enterShowTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableStat" ):
                listener.exitShowTableStat(self)


    class ShowJoinIndexStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.join_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowJoinIndexStat" ):
                listener.enterShowJoinIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowJoinIndexStat" ):
                listener.exitShowJoinIndexStat(self)


    class ShowTriggerStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.trigger_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTriggerStat" ):
                listener.enterShowTriggerStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTriggerStat" ):
                listener.exitShowTriggerStat(self)


    class ShowViewStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.view_name = None # Table_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViewStat" ):
                listener.enterShowViewStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViewStat" ):
                listener.exitShowViewStat(self)


    class ShowFunctionStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def variable_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_data_typeContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctionStat" ):
                listener.enterShowFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctionStat" ):
                listener.exitShowFunctionStat(self)



    def show_object_stat(self):

        localctx = TeradataSQLDDLParser.Show_object_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_show_object_stat)
        self._la = 0 # Token type
        try:
            self.state = 7123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDDLParser.ShowHashIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7009
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7010
                    self.match(TeradataSQLDDLParser.IN)
                    self.state = 7011
                    self.match(TeradataSQLDDLParser.XML)


                self.state = 7014
                self.match(TeradataSQLDDLParser.HASH)
                self.state = 7015
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 7016
                localctx.hash_index_name = self.object_name()
                pass

            elif la_ == 2:
                localctx = TeradataSQLDDLParser.ShowJoinIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7017
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7018
                    self.match(TeradataSQLDDLParser.IN)
                    self.state = 7019
                    self.match(TeradataSQLDDLParser.XML)


                self.state = 7022
                self.match(TeradataSQLDDLParser.JOIN)
                self.state = 7023
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 7024
                localctx.join_index_name = self.object_name()
                pass

            elif la_ == 3:
                localctx = TeradataSQLDDLParser.ShowMacroStatContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7025
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7026
                self.match(TeradataSQLDDLParser.MACRO)
                self.state = 7027
                self.macro_name()
                pass

            elif la_ == 4:
                localctx = TeradataSQLDDLParser.ShowTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 7028
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7029
                    self.match(TeradataSQLDDLParser.IN)
                    self.state = 7030
                    self.match(TeradataSQLDDLParser.XML)


                self.state = 7034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==417:
                    self.state = 7033
                    self.match(TeradataSQLDDLParser.TEMPORARY)


                self.state = 7036
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 7037
                self.table_name()
                pass

            elif la_ == 5:
                localctx = TeradataSQLDDLParser.ShowErrorTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 7038
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7039
                self.match(TeradataSQLDDLParser.ERROR)
                self.state = 7040
                self.match(TeradataSQLDDLParser.TABLE)
                self.state = 7041
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 7042
                localctx.data_table_name = self.table_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLDDLParser.ShowTriggerStatContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 7043
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7044
                self.match(TeradataSQLDDLParser.TRIGGER)
                self.state = 7045
                localctx.trigger_name = self.object_name()
                pass

            elif la_ == 7:
                localctx = TeradataSQLDDLParser.ShowViewStatContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 7046
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7047
                    self.match(TeradataSQLDDLParser.IN)
                    self.state = 7048
                    self.match(TeradataSQLDDLParser.XML)


                self.state = 7051
                self.match(TeradataSQLDDLParser.VIEW)
                self.state = 7052
                localctx.view_name = self.table_name()
                pass

            elif la_ == 8:
                localctx = TeradataSQLDDLParser.ShowProcedureStatContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 7053
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7054
                self.match(TeradataSQLDDLParser.PROCEDURE)
                self.state = 7055
                self.procedure_name()
                pass

            elif la_ == 9:
                localctx = TeradataSQLDDLParser.ShowSpecificFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 7056
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7057
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 7058
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 7059
                self.function_name()
                pass

            elif la_ == 10:
                localctx = TeradataSQLDDLParser.ShowFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 7060
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7061
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 7062
                self.function_name()
                self.state = 7074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 7063
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 7064
                    self.variable_data_type()
                    self.state = 7069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7065
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 7066
                        self.variable_data_type()
                        self.state = 7071
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 7072
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass

            elif la_ == 11:
                localctx = TeradataSQLDDLParser.ShowSpecificMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 7076
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7077
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 7078
                self.match(TeradataSQLDDLParser.METHOD)
                self.state = 7080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,836,self._ctx)
                if la_ == 1:
                    self.state = 7079
                    self.sysudtlib()


                self.state = 7082
                self.method_name()
                pass

            elif la_ == 12:
                localctx = TeradataSQLDDLParser.ShowMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 7083
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7084
                self.method()
                pass

            elif la_ == 13:
                localctx = TeradataSQLDDLParser.ShowCastStatContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 7085
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7086
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 7087
                self.udt_type()
                pass

            elif la_ == 14:
                localctx = TeradataSQLDDLParser.ShowTypeStatContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 7088
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7089
                self.match(TeradataSQLDDLParser.TYPE)
                self.state = 7090
                self.udt_type()
                pass

            elif la_ == 15:
                localctx = TeradataSQLDDLParser.ShowStorageFormatSchemaStatContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 7091
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7092
                self.dataset_storage_format()
                self.state = 7094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 7093
                    self.with_schema()


                self.state = 7096
                self.match(TeradataSQLDDLParser.SCHEMA)
                self.state = 7097
                localctx.schema_name = self.udt_type()
                pass

            elif la_ == 16:
                localctx = TeradataSQLDDLParser.ShowFileStatContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 7099
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7100
                self.match(TeradataSQLDDLParser.FILE)
                self.state = 7101
                localctx.uif_name = self.object_name()
                pass

            elif la_ == 17:
                localctx = TeradataSQLDDLParser.ShowConstraintStatContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 7102
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7103
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 7104
                localctx.constraint_name = self.object_name()
                pass

            elif la_ == 18:
                localctx = TeradataSQLDDLParser.ShowAuthorizationStatContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 7105
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7106
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                self.state = 7107
                localctx.authorization_name = self.object_name()
                pass

            elif la_ == 19:
                localctx = TeradataSQLDDLParser.ShowGlopSetStatContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 7108
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7109
                self.match(TeradataSQLDDLParser.GLOP)
                self.state = 7110
                self.match(TeradataSQLDDLParser.SET)
                self.state = 7111
                localctx.glop_set_name = self.object_name()
                pass

            elif la_ == 20:
                localctx = TeradataSQLDDLParser.ShowForeignServerContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 7112
                self.match(TeradataSQLDDLParser.SHOW)
                self.state = 7115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7113
                    self.match(TeradataSQLDDLParser.IN)
                    self.state = 7114
                    self.match(TeradataSQLDDLParser.XML)


                self.state = 7117
                self.match(TeradataSQLDDLParser.FOREIGN)
                self.state = 7118
                self.match(TeradataSQLDDLParser.SERVER)
                self.state = 7120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
                if la_ == 1:
                    self.state = 7119
                    self.td_server_db()


                self.state = 7122
                localctx.server_name = self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_logging_on_itemsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_show_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_query_logging_stat" ):
                listener.enterShow_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_query_logging_stat" ):
                listener.exitShow_query_logging_stat(self)




    def show_query_logging_stat(self):

        localctx = TeradataSQLDDLParser.Show_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_show_query_logging_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7125
            self.match(TeradataSQLDDLParser.SHOW)
            self.state = 7126
            self.match(TeradataSQLDDLParser.QUERY)
            self.state = 7127
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 7128
            self.match(TeradataSQLDDLParser.ON)
            self.state = 7129
            self.query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_request_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)

        def dml_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Dml_statContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def QUALIFIED(self):
            return self.getToken(TeradataSQLDDLParser.QUALIFIED, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_show_request_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_request_stat" ):
                listener.enterShow_request_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_request_stat" ):
                listener.exitShow_request_stat(self)




    def show_request_stat(self):

        localctx = TeradataSQLDDLParser.Show_request_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_show_request_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7131
            self.match(TeradataSQLDDLParser.SHOW)
            self.state = 7134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7132
                self.match(TeradataSQLDDLParser.IN)
                self.state = 7133
                self.match(TeradataSQLDDLParser.XML)


            self.state = 7137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 7136
                self.match(TeradataSQLDDLParser.QUALIFIED)


            self.state = 7139
            self.dml_stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_statistics_optimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Table_nameContext

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def SUMMARY(self):
            return self.getToken(TeradataSQLDDLParser.SUMMARY, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def show_stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Show_stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Show_stats_target_specContext,i)


        def SEQUENCED(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_show_statistics_optimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_statistics_optimizer_form_stat" ):
                listener.enterShow_statistics_optimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_statistics_optimizer_form_stat" ):
                listener.exitShow_statistics_optimizer_form_stat(self)




    def show_statistics_optimizer_form_stat(self):

        localctx = TeradataSQLDDLParser.Show_statistics_optimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_show_statistics_optimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7141
            self.match(TeradataSQLDDLParser.SHOW)
            self.state = 7144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7142
                self.match(TeradataSQLDDLParser.IN)
                self.state = 7143
                self.match(TeradataSQLDDLParser.XML)


            self.state = 7147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==404:
                self.state = 7146
                self.match(TeradataSQLDDLParser.SUMMARY)


            self.state = 7150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 7149
                self.match(TeradataSQLDDLParser.CURRENT)


            self.state = 7152
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==460:
                self.state = 7153
                self.match(TeradataSQLDDLParser.VALUES)
                self.state = 7155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==915:
                    self.state = 7154
                    self.match(TeradataSQLDDLParser.SEQUENCED)




            self.state = 7167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192 or _la==448:
                self.state = 7159
                self.show_stats_target_spec()
                self.state = 7164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7160
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7161
                    self.show_stats_target_spec()
                    self.state = 7166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7169
            self.match(TeradataSQLDDLParser.ON)
            self.state = 7173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [417]:
                self.state = 7170
                self.match(TeradataSQLDDLParser.TEMPORARY)
                self.state = 7171
                self.table_name()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7172
                localctx.index_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def show_stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Show_stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Show_stats_target_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLEID, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDDLParser.MODIFIED, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def SEQUENCED(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_show_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_statistics_qcd_form_stat" ):
                listener.enterShow_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_statistics_qcd_form_stat" ):
                listener.exitShow_statistics_qcd_form_stat(self)




    def show_statistics_qcd_form_stat(self):

        localctx = TeradataSQLDDLParser.Show_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_show_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7175
            self.match(TeradataSQLDDLParser.SHOW)
            self.state = 7178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7176
                self.match(TeradataSQLDDLParser.IN)
                self.state = 7177
                self.match(TeradataSQLDDLParser.XML)


            self.state = 7180
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==460:
                self.state = 7181
                self.match(TeradataSQLDDLParser.VALUES)
                self.state = 7183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==915:
                    self.state = 7182
                    self.match(TeradataSQLDDLParser.SEQUENCED)




            self.state = 7195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192 or _la==448:
                self.state = 7187
                self.show_stats_target_spec()
                self.state = 7192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7188
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7189
                    self.show_stats_target_spec()
                    self.state = 7194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7197
            self.match(TeradataSQLDDLParser.ON)
            self.state = 7198
            self.object_name()
            self.state = 7199
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 7200
            localctx.qcd_name = self.database_name()
            self.state = 7204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 7201
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 7202
                self.match(TeradataSQLDDLParser.QUERY)
                self.state = 7203
                localctx.query_id = self.integer_literal()


            self.state = 7208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 7206
                self.match(TeradataSQLDDLParser.SAMPLEID)
                self.state = 7207
                localctx.statistics_id = self.integer_literal()


            self.state = 7212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 7210
                self.match(TeradataSQLDDLParser.USING)
                self.state = 7211
                self.match(TeradataSQLDDLParser.MODIFIED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def stats_index_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Stats_index_specContext,0)


        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def stats_column_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Stats_column_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_show_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_stats_target_spec" ):
                listener.enterShow_stats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_stats_target_spec" ):
                listener.exitShow_stats_target_spec(self)




    def show_stats_target_spec(self):

        localctx = TeradataSQLDDLParser.Show_stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_show_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 7221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192, 448]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 7214
                    self.match(TeradataSQLDDLParser.UNIQUE)


                self.state = 7217
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 7218
                self.stats_index_spec()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7219
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 7220
                self.stats_column_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.for_udt_name = None # Udt_nameContext

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def udt_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Udt_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def INSTANCE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRUCTOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod" ):
                listener.enterMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod" ):
                listener.exitMethod(self)




    def method(self):

        localctx = TeradataSQLDDLParser.MethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 7223
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7226
            self.match(TeradataSQLDDLParser.METHOD)
            self.state = 7227
            self.method_name()
            self.state = 7240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 7228
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 7237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 7229
                    self.udt_name()
                    self.state = 7234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7230
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 7231
                        self.udt_name()
                        self.state = 7236
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7239
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 7242
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7243
            localctx.for_udt_name = self.udt_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDDLParser.LOAD, 0)

        def IDENTITY(self):
            return self.getToken(TeradataSQLDDLParser.IDENTITY, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_index_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_loading" ):
                listener.enterIndex_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_loading" ):
                listener.exitIndex_loading(self)




    def index_loading(self):

        localctx = TeradataSQLDDLParser.Index_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_index_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7245
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 7247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 7246
                self.match(TeradataSQLDDLParser.NO)


            self.state = 7249
            self.match(TeradataSQLDDLParser.LOAD)
            self.state = 7250
            self.match(TeradataSQLDDLParser.IDENTITY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_orderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order_column_name = None # Unqualified_nameContext

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_index_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_ordering" ):
                listener.enterIndex_ordering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_ordering" ):
                listener.exitIndex_ordering(self)




    def index_ordering(self):

        localctx = TeradataSQLDDLParser.Index_orderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_index_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7252
            self.match(TeradataSQLDDLParser.ORDER)
            self.state = 7253
            self.match(TeradataSQLDDLParser.BY)
            self.state = 7254
            _la = self._input.LA(1)
            if not(_la==178 or _la==460):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 7255
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 7256
                localctx.order_column_name = self.unqualified_name()
                self.state = 7257
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_option_index_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_specContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Fallback_protectionContext,0)


        def CHECKSUM(self):
            return self.getToken(TeradataSQLDDLParser.CHECKSUM, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLDDLParser.OFF, 0)

        def block_compression(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Block_compressionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_option_index_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option_index_form" ):
                listener.enterTable_option_index_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option_index_form" ):
                listener.exitTable_option_index_form(self)




    def table_option_index_form(self):

        localctx = TeradataSQLDDLParser.Table_option_index_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_table_option_index_form)
        self._la = 0 # Token type
        try:
            self.state = 7267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7261
                self.map_spec()
                pass
            elif token in [153, 268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7262
                self.fallback_protection()
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7263
                self.match(TeradataSQLDDLParser.CHECKSUM)
                self.state = 7264
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 7265
                _la = self._input.LA(1)
                if not(_la==111 or _la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [551]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7266
                self.block_compression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.colocation_name = None # Unqualified_nameContext

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_map_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_spec" ):
                listener.enterMap_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_spec" ):
                listener.exitMap_spec(self)




    def map_spec(self):

        localctx = TeradataSQLDDLParser.Map_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_map_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7269
            self.match(TeradataSQLDDLParser.MAP)
            self.state = 7270
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 7271
            localctx.map_name = self.unqualified_name()
            self.state = 7275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 7272
                self.match(TeradataSQLDDLParser.COLOCATE)
                self.state = 7273
                self.match(TeradataSQLDDLParser.USING)
                self.state = 7274
                localctx.colocation_name = self.unqualified_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_size_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.size = None # Scalar_exprContext

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def PERMANENT(self):
            return self.getToken(TeradataSQLDDLParser.PERMANENT, 0)

        def PERM(self):
            return self.getToken(TeradataSQLDDLParser.PERM, 0)

        def SPOOL(self):
            return self.getToken(TeradataSQLDDLParser.SPOOL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORARY, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def BYTES(self):
            return self.getToken(TeradataSQLDDLParser.BYTES, 0)

        def skew_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Skew_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_database_size_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_size_spec" ):
                listener.enterDatabase_size_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_size_spec" ):
                listener.exitDatabase_size_spec(self)




    def database_size_spec(self):

        localctx = TeradataSQLDDLParser.Database_size_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_database_size_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7277
            _la = self._input.LA(1)
            if not(_la==302 or _la==303 or _la==385 or _la==417):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7278
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 7279
            localctx.size = self.scalar_expr(0)
            self.state = 7281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 7280
                self.match(TeradataSQLDDLParser.BYTES)


            self.state = 7284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==380:
                self.state = 7283
                self.skew_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Skew_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.skew_pct = None # Integer_literalContext

        def SKEW(self):
            return self.getToken(TeradataSQLDDLParser.SKEW, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_skew_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkew_spec" ):
                listener.enterSkew_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkew_spec" ):
                listener.exitSkew_spec(self)




    def skew_spec(self):

        localctx = TeradataSQLDDLParser.Skew_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_skew_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7286
            self.match(TeradataSQLDDLParser.SKEW)
            self.state = 7287
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 7290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 7288
                localctx.skew_pct = self.integer_literal()
                pass
            elif token in [111]:
                self.state = 7289
                self.match(TeradataSQLDDLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 7292
                self.match(TeradataSQLDDLParser.PERCENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_default_mapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_database_default_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_default_map" ):
                listener.enterDatabase_default_map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_default_map" ):
                listener.exitDatabase_default_map(self)




    def database_default_map(self):

        localctx = TeradataSQLDDLParser.Database_default_mapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_database_default_map)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7295
            self.match(TeradataSQLDDLParser.DEFAULT)
            self.state = 7296
            self.match(TeradataSQLDDLParser.MAP)
            self.state = 7297
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 7300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7298
                localctx.map_name = self.unqualified_name()
                pass
            elif token in [274]:
                self.state = 7299
                self.match(TeradataSQLDDLParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 7302
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 7304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 7303
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 7306
                self.match(TeradataSQLDDLParser.ON)
                self.state = 7307
                self.match(TeradataSQLDDLParser.ERROR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fallback_protectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLBACK(self):
            return self.getToken(TeradataSQLDDLParser.FALLBACK, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def PROTECTION(self):
            return self.getToken(TeradataSQLDDLParser.PROTECTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_fallback_protection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallback_protection" ):
                listener.enterFallback_protection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallback_protection" ):
                listener.exitFallback_protection(self)




    def fallback_protection(self):

        localctx = TeradataSQLDDLParser.Fallback_protectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_fallback_protection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 7310
                self.match(TeradataSQLDDLParser.NO)


            self.state = 7313
            self.match(TeradataSQLDDLParser.FALLBACK)
            self.state = 7315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==312:
                self.state = 7314
                self.match(TeradataSQLDDLParser.PROTECTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Before_journalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOURNAL(self):
            return self.getToken(TeradataSQLDDLParser.JOURNAL, 0)

        def BEFORE(self):
            return self.getToken(TeradataSQLDDLParser.BEFORE, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def DUAL(self):
            return self.getToken(TeradataSQLDDLParser.DUAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_before_journal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBefore_journal" ):
                listener.enterBefore_journal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBefore_journal" ):
                listener.exitBefore_journal(self)




    def before_journal(self):

        localctx = TeradataSQLDDLParser.Before_journalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_before_journal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126 or _la==268:
                self.state = 7317
                _la = self._input.LA(1)
                if not(_la==126 or _la==268):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 7320
                self.match(TeradataSQLDDLParser.BEFORE)


            self.state = 7323
            self.match(TeradataSQLDDLParser.JOURNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class After_journalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(TeradataSQLDDLParser.AFTER, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLDDLParser.JOURNAL, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def DUAL(self):
            return self.getToken(TeradataSQLDDLParser.DUAL, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_after_journal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAfter_journal" ):
                listener.enterAfter_journal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAfter_journal" ):
                listener.exitAfter_journal(self)




    def after_journal(self):

        localctx = TeradataSQLDDLParser.After_journalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_after_journal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 7325
                self.match(TeradataSQLDDLParser.NO)
                pass
            elif token in [126]:
                self.state = 7326
                self.match(TeradataSQLDDLParser.DUAL)
                pass
            elif token in [224, 272]:
                self.state = 7328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 7327
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 7330
                self.match(TeradataSQLDDLParser.LOCAL)
                pass
            elif token in [11]:
                pass
            else:
                pass
            self.state = 7333
            self.match(TeradataSQLDDLParser.AFTER)
            self.state = 7334
            self.match(TeradataSQLDDLParser.JOURNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_journal_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLDDLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_default_journal_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_journal_table" ):
                listener.enterDefault_journal_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_journal_table" ):
                listener.exitDefault_journal_table(self)




    def default_journal_table(self):

        localctx = TeradataSQLDDLParser.Default_journal_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_default_journal_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7336
            self.match(TeradataSQLDDLParser.DEFAULT)
            self.state = 7337
            self.match(TeradataSQLDDLParser.JOURNAL)
            self.state = 7338
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 7339
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 7340
            localctx.journal_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_default_journal_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLDDLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_default_journal_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_default_journal_table" ):
                listener.enterDrop_default_journal_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_default_journal_table" ):
                listener.exitDrop_default_journal_table(self)




    def drop_default_journal_table(self):

        localctx = TeradataSQLDDLParser.Drop_default_journal_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_drop_default_journal_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7342
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 7343
            self.match(TeradataSQLDDLParser.DEFAULT)
            self.state = 7344
            self.match(TeradataSQLDDLParser.JOURNAL)
            self.state = 7345
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 7348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1224:
                self.state = 7346
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 7347
                localctx.journal_table_name = self.table_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD_STRING(self):
            return self.getToken(TeradataSQLDDLParser.PASSWORD_STRING, 0)

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_password

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword" ):
                listener.enterPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword" ):
                listener.exitPassword(self)




    def password(self):

        localctx = TeradataSQLDDLParser.PasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_password)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7350
            _la = self._input.LA(1)
            if not(_la==1193 or _la==1205):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Select_statContext,0)


        def select_and_consume_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Select_and_consume_statContext,0)


        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Insert_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Update_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Merge_statContext,0)


        def collect_demographics_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collect_demographics_statContext,0)


        def collect_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Collect_statistics_qcd_form_statContext,0)


        def drop_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Drop_statistics_qcd_form_statContext,0)


        def dump_explain_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Dump_explain_statContext,0)


        def initiate_index_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Initiate_index_analysis_statContext,0)


        def initiate_partition_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Initiate_partition_analysis_statContext,0)


        def insert_explain_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Insert_explain_statContext,0)


        def restart_index_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Restart_index_analysis_statContext,0)


        def call_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Call_statContext,0)


        def execute_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Execute_statContext,0)


        def commit_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Commit_statContext,0)


        def rollback_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rollback_statContext,0)


        def abort_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Abort_statContext,0)


        def begin_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Begin_transaction_statContext,0)


        def end_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.End_transaction_statContext,0)


        def locking_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_statContext,0)


        def comment_retrieving_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comment_retrieving_statContext,0)


        def checkpoint_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Checkpoint_statContext,0)


        def echo_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Echo_statContext,0)


        def null_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Null_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_dml_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_stat" ):
                listener.enterDml_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_stat" ):
                listener.exitDml_stat(self)




    def dml_stat(self):

        localctx = TeradataSQLDDLParser.Dml_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_dml_stat)
        try:
            self.state = 7378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7352
                self.select_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7353
                self.select_and_consume_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7354
                self.delete_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7355
                self.insert_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7356
                self.update_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7357
                self.merge_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7358
                self.collect_demographics_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7359
                self.collect_statistics_qcd_form_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7360
                self.drop_statistics_qcd_form_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7361
                self.dump_explain_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7362
                self.initiate_index_analysis_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7363
                self.initiate_partition_analysis_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7364
                self.insert_explain_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7365
                self.restart_index_analysis_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7366
                self.call_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7367
                self.execute_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7368
                self.commit_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7369
                self.rollback_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7370
                self.abort_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7371
                self.begin_transaction_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7372
                self.end_transaction_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7373
                self.locking_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7374
                self.comment_retrieving_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7375
                self.checkpoint_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7376
                self.echo_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7377
                self.null_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_select_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stat" ):
                listener.enterSelect_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stat" ):
                listener.exitSelect_stat(self)




    def select_stat(self):

        localctx = TeradataSQLDDLParser.Select_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_select_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==150 or _la==226 or _la==227 or _la==457 or _la==474 or _la==938:
                self.state = 7380
                self.request_modifier()


            self.state = 7383
            self.query_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_and_consume_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token
            self.queue_table_name = None # Table_nameContext

        def SELECT(self):
            return self.getToken(TeradataSQLDDLParser.SELECT, 0)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def CONSUME(self):
            return self.getToken(TeradataSQLDDLParser.CONSUME, 0)

        def TOP(self):
            return self.getToken(TeradataSQLDDLParser.TOP, 0)

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Selected_columnsContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.UNSIGNED_INTEGER, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Into_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_select_and_consume_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_and_consume_stat" ):
                listener.enterSelect_and_consume_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_and_consume_stat" ):
                listener.exitSelect_and_consume_stat(self)




    def select_and_consume_stat(self):

        localctx = TeradataSQLDDLParser.Select_and_consume_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_select_and_consume_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7385
            self.match(TeradataSQLDDLParser.SELECT)
            self.state = 7386
            self.match(TeradataSQLDDLParser.AND)
            self.state = 7387
            self.match(TeradataSQLDDLParser.CONSUME)
            self.state = 7388
            self.match(TeradataSQLDDLParser.TOP)
            self.state = 7389
            localctx.count = self.match(TeradataSQLDDLParser.UNSIGNED_INTEGER)
            self.state = 7390
            self.selected_columns()
            self.state = 7392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7391
                self.into_clause()


            self.state = 7394
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 7395
            localctx.queue_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLDDLParser.DEL, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def delete_table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Delete_table_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_table_specContext,i)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_delete_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stat" ):
                listener.enterDelete_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stat" ):
                listener.exitDelete_stat(self)




    def delete_stat(self):

        localctx = TeradataSQLDDLParser.Delete_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_delete_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7397
                self.locking_request_modifier()


            self.state = 7400
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7401
                self.with_isolated_loading()


            self.state = 7424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,890,self._ctx)
            if la_ == 1:
                self.state = 7404
                localctx.target_table_name = self.table_name()
                pass

            elif la_ == 2:
                self.state = 7405
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 7406
                self.delete_table_spec()
                self.state = 7411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7407
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7408
                    self.delete_table_spec()
                    self.state = 7413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 7414
                localctx.target_table_name = self.table_name()
                self.state = 7415
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 7416
                self.delete_table_spec()
                self.state = 7421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7417
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7418
                    self.delete_table_spec()
                    self.state = 7423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 7428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 7426
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 7427
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.correlation_name = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_delete_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_table_spec" ):
                listener.enterDelete_table_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_table_spec" ):
                listener.exitDelete_table_spec(self)




    def delete_table_spec(self):

        localctx = TeradataSQLDDLParser.Delete_table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_delete_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 7443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7430
                self.table_name()
                self.state = 7435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 7432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 7431
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 7434
                    localctx.correlation_name = self.alias_name()


                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7437
                self.subquery()
                self.state = 7439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7438
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 7441
                localctx.correlation_name = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.select_query = None # Query_exprContext
            self.json_string = None # Char_string_literalContext
            self.parametrized_sql = None # Token

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLDDLParser.INS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def hash_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hash_byContext,0)


        def local_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Local_order_byContext,0)


        def logging_errors(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_errorsContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def QUESTION_MARK(self):
            return self.getToken(TeradataSQLDDLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_insert_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stat" ):
                listener.enterInsert_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stat" ):
                listener.exitInsert_stat(self)




    def insert_stat(self):

        localctx = TeradataSQLDDLParser.Insert_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_insert_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7445
                self.locking_request_modifier()


            self.state = 7448
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7449
                self.with_isolated_loading()


            self.state = 7453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7452
                self.match(TeradataSQLDDLParser.INTO)


            self.state = 7455
            localctx.target_table_name = self.table_name()
            self.state = 7457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1210:
                self.state = 7456
                self.server_name_reference()


            self.state = 7503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,910,self._ctx)
            if la_ == 1:
                self.state = 7460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 7459
                    self.match(TeradataSQLDDLParser.VALUES)


                self.state = 7462
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 7464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 7463
                    self.scalar_expr(0)


                self.state = 7472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7466
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 7467
                        self.scalar_expr(0)


                    self.state = 7474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7475
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 7476
                self.column_list()
                self.state = 7477
                self.match(TeradataSQLDDLParser.VALUES)
                self.state = 7478
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 3:
                self.state = 7481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,904,self._ctx)
                if la_ == 1:
                    self.state = 7480
                    self.column_list()


                self.state = 7484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 7483
                    self.with_request_modifier()


                self.state = 7486
                localctx.select_query = self.query_expr(0)
                self.state = 7488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 7487
                    self.hash_by()


                self.state = 7491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 7490
                    self.local_order_by()


                self.state = 7494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 7493
                    self.logging_errors()


                pass

            elif la_ == 4:
                self.state = 7496
                self.match(TeradataSQLDDLParser.JSON)
                self.state = 7499
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 7497
                    localctx.json_string = self.char_string_literal()
                    pass
                elif token in [1212]:
                    self.state = 7498
                    localctx.parametrized_sql = self.match(TeradataSQLDDLParser.QUESTION_MARK)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.state = 7501
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 7502
                self.match(TeradataSQLDDLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def RANDOM(self):
            return self.getToken(TeradataSQLDDLParser.RANDOM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hash_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_by" ):
                listener.enterHash_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_by" ):
                listener.exitHash_by(self)




    def hash_by(self):

        localctx = TeradataSQLDDLParser.Hash_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_hash_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7505
            self.match(TeradataSQLDDLParser.HASH)
            self.state = 7506
            self.match(TeradataSQLDDLParser.BY)
            self.state = 7516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
            if la_ == 1:
                self.state = 7507
                self.scalar_expr(0)
                self.state = 7512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7508
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7509
                    self.scalar_expr(0)
                    self.state = 7514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 7515
                self.match(TeradataSQLDDLParser.RANDOM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_local_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_order_by" ):
                listener.enterLocal_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_order_by" ):
                listener.exitLocal_order_by(self)




    def local_order_by(self):

        localctx = TeradataSQLDDLParser.Local_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_local_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7518
            self.match(TeradataSQLDDLParser.LOCAL)
            self.state = 7519
            self.match(TeradataSQLDDLParser.ORDER)
            self.state = 7520
            self.match(TeradataSQLDDLParser.BY)
            self.state = 7521
            self.order_by_spec_full()
            self.state = 7526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7522
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 7523
                self.order_by_spec_full()
                self.state = 7528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def update_basic_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Update_basic_form_statContext,0)


        def update_with_from_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Update_with_from_statContext,0)


        def update_upsert_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Update_upsert_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_update_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stat" ):
                listener.enterUpdate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stat" ):
                listener.exitUpdate_stat(self)




    def update_stat(self):

        localctx = TeradataSQLDDLParser.Update_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_update_stat)
        try:
            self.state = 7532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,914,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7529
                self.update_basic_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7530
                self.update_with_from_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7531
                self.update_upsert_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_basic_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.correlation_name = None # Alias_nameContext

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Set_specContext,i)


        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDDLParser.UPD, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_update_basic_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_basic_form_stat" ):
                listener.enterUpdate_basic_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_basic_form_stat" ):
                listener.exitUpdate_basic_form_stat(self)




    def update_basic_form_stat(self):

        localctx = TeradataSQLDDLParser.Update_basic_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_update_basic_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7534
                self.locking_request_modifier()


            self.state = 7537
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7538
                self.with_isolated_loading()


            self.state = 7541
            localctx.target_table_name = self.table_name()
            self.state = 7546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 7543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7542
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 7545
                localctx.correlation_name = self.alias_name()


            self.state = 7548
            self.match(TeradataSQLDDLParser.SET)
            self.state = 7549
            self.set_spec()
            self.state = 7554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7550
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 7551
                self.set_spec()
                self.state = 7556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 7557
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 7558
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_with_from_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def update_table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Update_table_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Update_table_specContext,i)


        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Set_specContext,i)


        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDDLParser.UPD, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_update_with_from_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_with_from_stat" ):
                listener.enterUpdate_with_from_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_with_from_stat" ):
                listener.exitUpdate_with_from_stat(self)




    def update_with_from_stat(self):

        localctx = TeradataSQLDDLParser.Update_with_from_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_update_with_from_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7561
                self.locking_request_modifier()


            self.state = 7564
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7565
                self.with_isolated_loading()


            self.state = 7568
            localctx.target_table_name = self.table_name()
            self.state = 7569
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 7570
            self.update_table_spec()
            self.state = 7575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7571
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 7572
                self.update_table_spec()
                self.state = 7577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7578
            self.match(TeradataSQLDDLParser.SET)
            self.state = 7579
            self.set_spec()
            self.state = 7584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7580
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 7581
                self.set_spec()
                self.state = 7586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 7587
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 7588
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_upsert_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.correlation_name = None # Alias_nameContext
            self.insert_table_name = None # Table_nameContext

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Set_specContext,i)


        def WHERE(self):
            return self.getToken(TeradataSQLDDLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def ELSE(self):
            return self.getToken(TeradataSQLDDLParser.ELSE, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDDLParser.UPD, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLDDLParser.INS, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_update_upsert_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_upsert_form_stat" ):
                listener.enterUpdate_upsert_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_upsert_form_stat" ):
                listener.exitUpdate_upsert_form_stat(self)




    def update_upsert_form_stat(self):

        localctx = TeradataSQLDDLParser.Update_upsert_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_update_upsert_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7591
                self.locking_request_modifier()


            self.state = 7594
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7595
                self.with_isolated_loading()


            self.state = 7598
            localctx.target_table_name = self.table_name()

            self.state = 7600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7599
                self.match(TeradataSQLDDLParser.AS)


            self.state = 7602
            localctx.correlation_name = self.alias_name()
            self.state = 7604
            self.match(TeradataSQLDDLParser.SET)
            self.state = 7605
            self.set_spec()
            self.state = 7610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7606
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 7607
                self.set_spec()
                self.state = 7612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7613
            self.match(TeradataSQLDDLParser.WHERE)
            self.state = 7614
            self.logical_expr(0)
            self.state = 7615
            self.match(TeradataSQLDDLParser.ELSE)
            self.state = 7616
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7617
                self.match(TeradataSQLDDLParser.INTO)


            self.state = 7620
            localctx.insert_table_name = self.table_name()
            self.state = 7633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
            if la_ == 1:
                self.state = 7622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 7621
                    self.match(TeradataSQLDDLParser.VALUES)


                self.state = 7624
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 7625
                self.column_list()
                self.state = 7627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 7626
                    self.match(TeradataSQLDDLParser.VALUES)


                self.state = 7629
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 3:
                self.state = 7631
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 7632
                self.match(TeradataSQLDDLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.correlation_name = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_update_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_table_spec" ):
                listener.enterUpdate_table_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_table_spec" ):
                listener.exitUpdate_table_spec(self)




    def update_table_spec(self):

        localctx = TeradataSQLDDLParser.Update_table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_update_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 7648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7635
                self.table_name()
                self.state = 7640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 7637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 7636
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 7639
                    localctx.correlation_name = self.alias_name()


                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7642
                self.subquery()
                self.state = 7644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7643
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 7646
                localctx.correlation_name = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.target_correlation_name = None # Alias_nameContext
            self.source_table_name = None # Table_nameContext
            self.source_correlation_name = None # Alias_nameContext
            self.match_condition = None # Logical_exprContext

        def MERGE(self):
            return self.getToken(TeradataSQLDDLParser.MERGE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,i)


        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def when_matched(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.When_matchedContext,0)


        def when_not_matched(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.When_not_matchedContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_isolated_loadingContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.AS)
            else:
                return self.getToken(TeradataSQLDDLParser.AS, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def logging_errors(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logging_errorsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_merge_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_stat" ):
                listener.enterMerge_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_stat" ):
                listener.exitMerge_stat(self)




    def merge_stat(self):

        localctx = TeradataSQLDDLParser.Merge_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_merge_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7650
                self.locking_request_modifier()


            self.state = 7653
            self.match(TeradataSQLDDLParser.MERGE)
            self.state = 7655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7654
                self.with_isolated_loading()


            self.state = 7658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7657
                self.match(TeradataSQLDDLParser.INTO)


            self.state = 7660
            localctx.target_table_name = self.table_name()
            self.state = 7665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 7662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7661
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 7664
                localctx.target_correlation_name = self.alias_name()


            self.state = 7667
            self.match(TeradataSQLDDLParser.USING)
            self.state = 7672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [460]:
                self.state = 7668
                self.match(TeradataSQLDDLParser.VALUES)
                self.state = 7669
                self.scalar_expr_list_comma_separated()
                pass
            elif token in [1213]:
                self.state = 7670
                self.subquery()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7671
                localctx.source_table_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7674
                self.match(TeradataSQLDDLParser.AS)


            self.state = 7677
            localctx.source_correlation_name = self.alias_name()
            self.state = 7679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 7678
                self.column_list()


            self.state = 7681
            self.match(TeradataSQLDDLParser.ON)
            self.state = 7682
            localctx.match_condition = self.logical_expr(0)
            self.state = 7691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
            if la_ == 1:
                self.state = 7683
                self.when_matched()
                self.state = 7685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 7684
                    self.when_not_matched()


                pass

            elif la_ == 2:
                self.state = 7687
                self.when_not_matched()
                self.state = 7689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 7688
                    self.when_matched()


                pass


            self.state = 7694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==229:
                self.state = 7693
                self.logging_errors()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLDDLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDDLParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(TeradataSQLDDLParser.THEN, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Set_specContext,i)


        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDDLParser.UPD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_when_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_matched" ):
                listener.enterWhen_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_matched" ):
                listener.exitWhen_matched(self)




    def when_matched(self):

        localctx = TeradataSQLDDLParser.When_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_when_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7696
            self.match(TeradataSQLDDLParser.WHEN)
            self.state = 7697
            self.match(TeradataSQLDDLParser.MATCHED)
            self.state = 7698
            self.match(TeradataSQLDDLParser.THEN)
            self.state = 7710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [452, 453]:
                self.state = 7699
                _la = self._input.LA(1)
                if not(_la==452 or _la==453):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7700
                self.match(TeradataSQLDDLParser.SET)
                self.state = 7701
                self.set_spec()
                self.state = 7706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7702
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7703
                    self.set_spec()
                    self.state = 7708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [115]:
                self.state = 7709
                self.match(TeradataSQLDDLParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_not_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLDDLParser.WHEN, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDDLParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(TeradataSQLDDLParser.THEN, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLDDLParser.INS, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDDLParser.VALUES, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_when_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_not_matched" ):
                listener.enterWhen_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_not_matched" ):
                listener.exitWhen_not_matched(self)




    def when_not_matched(self):

        localctx = TeradataSQLDDLParser.When_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_when_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7712
            self.match(TeradataSQLDDLParser.WHEN)
            self.state = 7713
            self.match(TeradataSQLDDLParser.NOT)
            self.state = 7714
            self.match(TeradataSQLDDLParser.MATCHED)
            self.state = 7715
            self.match(TeradataSQLDDLParser.THEN)
            self.state = 7716
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
            if la_ == 1:
                self.state = 7717
                self.match(TeradataSQLDDLParser.VALUES)

            elif la_ == 2:
                self.state = 7718
                self.column_list()
                self.state = 7719
                self.match(TeradataSQLDDLParser.VALUES)


            self.state = 7723
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_demographics_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext

        def COLLECT(self):
            return self.getToken(TeradataSQLDDLParser.COLLECT, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDDLParser.DEMOGRAPHICS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_collect_demographics_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_demographics_stat" ):
                listener.enterCollect_demographics_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_demographics_stat" ):
                listener.exitCollect_demographics_stat(self)




    def collect_demographics_stat(self):

        localctx = TeradataSQLDDLParser.Collect_demographics_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_collect_demographics_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7725
            self.match(TeradataSQLDDLParser.COLLECT)
            self.state = 7726
            self.match(TeradataSQLDDLParser.DEMOGRAPHICS)
            self.state = 7727
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7728
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 7729
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 7730
                self.table_name()
                self.state = 7735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7731
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7732
                    self.table_name()
                    self.state = 7737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7738
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7742
            self.match(TeradataSQLDDLParser.INTO)
            self.state = 7743
            localctx.qcd_name = self.database_name()
            self.state = 7748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 7744
                self.match(TeradataSQLDDLParser.ALL)
                pass
            elif token in [474]:
                self.state = 7745
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 7746
                self.match(TeradataSQLDDLParser.NO)
                self.state = 7747
                self.match(TeradataSQLDDLParser.INDEX)
                pass
            elif token in [1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sample_percentage = None # Integer_literalContext
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def COLLECT(self):
            return self.getToken(TeradataSQLDDLParser.COLLECT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def SAMPLE(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def qcd_stats_target_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Qcd_stats_target_specContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLEID, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDDLParser.MODIFIED, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_collect_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_statistics_qcd_form_stat" ):
                listener.enterCollect_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_statistics_qcd_form_stat" ):
                listener.exitCollect_statistics_qcd_form_stat(self)




    def collect_statistics_qcd_form_stat(self):

        localctx = TeradataSQLDDLParser.Collect_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_collect_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7750
            self.match(TeradataSQLDDLParser.COLLECT)
            self.state = 7751
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7752
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7753
            self.match(TeradataSQLDDLParser.SAMPLE)
            self.state = 7754
            localctx.sample_percentage = self.integer_literal()
            self.state = 7756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 7755
                self.match(TeradataSQLDDLParser.PERCENT)


            self.state = 7758
            self.match(TeradataSQLDDLParser.INTO)
            self.state = 7759
            localctx.qcd_name = self.database_name()
            self.state = 7763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 7760
                self.match(TeradataSQLDDLParser.SET)
                self.state = 7761
                self.match(TeradataSQLDDLParser.QUERY)
                self.state = 7762
                localctx.query_id = self.integer_literal()


            self.state = 7767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 7765
                self.match(TeradataSQLDDLParser.SAMPLEID)
                self.state = 7766
                localctx.statistics_id = self.integer_literal()


            self.state = 7771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 7769
                self.match(TeradataSQLDDLParser.UPDATE)
                self.state = 7770
                self.match(TeradataSQLDDLParser.MODIFIED)


            self.state = 7774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7773
                self.match(TeradataSQLDDLParser.ON)


            self.state = 7776
            self.table_name()
            self.state = 7777
            self.qcd_stats_target_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qcd_stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext

        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLDDLParser.PARTITION, i)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_qcd_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQcd_stats_target_spec" ):
                listener.enterQcd_stats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQcd_stats_target_spec" ):
                listener.exitQcd_stats_target_spec(self)




    def qcd_stats_target_spec(self):

        localctx = TeradataSQLDDLParser.Qcd_stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_qcd_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 7815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7779
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 7798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                if la_ == 1:
                    self.state = 7780
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 7781
                    self.match(TeradataSQLDDLParser.PARTITION)
                    pass

                elif la_ == 3:
                    self.state = 7782
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 7785
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
                    if la_ == 1:
                        self.state = 7783
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 7784
                        self.match(TeradataSQLDDLParser.PARTITION)
                        pass


                    self.state = 7794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7787
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 7790
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
                        if la_ == 1:
                            self.state = 7788
                            self.column_name()
                            pass

                        elif la_ == 2:
                            self.state = 7789
                            self.match(TeradataSQLDDLParser.PARTITION)
                            pass


                        self.state = 7796
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 7797
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass


                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7800
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 7813
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 7801
                    localctx.index_name = self.unqualified_name()
                    pass
                elif token in [1213]:
                    self.state = 7802
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 7803
                    self.column_name()
                    self.state = 7808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7804
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 7805
                        self.column_name()
                        self.state = 7810
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 7811
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def qcd_stats_target_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Qcd_stats_target_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_drop_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_qcd_form_stat" ):
                listener.enterDrop_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_qcd_form_stat" ):
                listener.exitDrop_statistics_qcd_form_stat(self)




    def drop_statistics_qcd_form_stat(self):

        localctx = TeradataSQLDDLParser.Drop_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_drop_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7817
            self.match(TeradataSQLDDLParser.DROP)
            self.state = 7818
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7819
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 7820
            localctx.qcd_name = self.database_name()
            self.state = 7822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7821
                self.match(TeradataSQLDDLParser.ON)


            self.state = 7824
            self.table_name()
            self.state = 7826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192:
                self.state = 7825
                self.qcd_stats_target_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dump_explain_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_plan_name = None # Unqualified_nameContext

        def DUMP(self):
            return self.getToken(TeradataSQLDDLParser.DUMP, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDDLParser.EXPLAIN, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def explained_sql_request(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Explained_sql_requestContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def limit_sql_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Limit_sql_clauseContext,0)


        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_dump_explain_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDump_explain_stat" ):
                listener.enterDump_explain_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDump_explain_stat" ):
                listener.exitDump_explain_stat(self)




    def dump_explain_stat(self):

        localctx = TeradataSQLDDLParser.Dump_explain_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_dump_explain_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7828
            self.match(TeradataSQLDDLParser.DUMP)
            self.state = 7829
            self.match(TeradataSQLDDLParser.EXPLAIN)
            self.state = 7830
            self.match(TeradataSQLDDLParser.INTO)
            self.state = 7831
            localctx.qcd_name = self.database_name()
            self.state = 7834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7832
                self.match(TeradataSQLDDLParser.AS)
                self.state = 7833
                localctx.query_plan_name = self.unqualified_name()


            self.state = 7837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 7836
                self.limit_sql_clause()


            self.state = 7841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 7839
                self.match(TeradataSQLDDLParser.CHECK)
                self.state = 7840
                self.match(TeradataSQLDDLParser.STATISTICS)


            self.state = 7843
            self.explained_sql_request()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initiate_index_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.index_name_tag = None # Alias_nameContext
            self._integer_literal = None # Integer_literalContext
            self.index_type_number = list() # of Integer_literalContexts
            self.checkpoint_trigger = None # Integer_literalContext

        def INITIATE(self):
            return self.getToken(TeradataSQLDDLParser.INITIATE, 0)

        def INDEX(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.INDEX)
            else:
                return self.getToken(TeradataSQLDDLParser.INDEX, i)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDDLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def index_analysis_set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Index_analysis_set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Index_analysis_set_specContext,i)


        def KEEP(self):
            return self.getToken(TeradataSQLDDLParser.KEEP, 0)

        def USE(self):
            return self.getToken(TeradataSQLDDLParser.USE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDDLParser.MODIFIED, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDDLParser.CHECKPOINT, 0)

        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Analysis_time_limit_clauseContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_initiate_index_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiate_index_analysis_stat" ):
                listener.enterInitiate_index_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiate_index_analysis_stat" ):
                listener.exitInitiate_index_analysis_stat(self)




    def initiate_index_analysis_stat(self):

        localctx = TeradataSQLDDLParser.Initiate_index_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_initiate_index_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7845
            self.match(TeradataSQLDDLParser.INITIATE)
            self.state = 7846
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 7847
            self.match(TeradataSQLDDLParser.ANALYSIS)
            self.state = 7857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7848
                self.match(TeradataSQLDDLParser.ON)
                self.state = 7849
                self.table_name()
                self.state = 7854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7850
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7851
                    self.table_name()
                    self.state = 7856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7859
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7860
            localctx.workload_name = self.unqualified_name()
            self.state = 7861
            self.match(TeradataSQLDDLParser.IN)
            self.state = 7862
            localctx.qcd_name = self.database_name()
            self.state = 7863
            self.match(TeradataSQLDDLParser.AS)
            self.state = 7864
            localctx.index_name_tag = self.alias_name()
            self.state = 7874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 7865
                self.match(TeradataSQLDDLParser.SET)
                self.state = 7866
                self.index_analysis_set_spec()
                self.state = 7871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7867
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7868
                    self.index_analysis_set_spec()
                    self.state = 7873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==728:
                self.state = 7876
                self.match(TeradataSQLDDLParser.KEEP)
                self.state = 7877
                self.match(TeradataSQLDDLParser.INDEX)


            self.state = 7883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1018:
                self.state = 7880
                self.match(TeradataSQLDDLParser.USE)
                self.state = 7881
                self.match(TeradataSQLDDLParser.MODIFIED)
                self.state = 7882
                _la = self._input.LA(1)
                if not(_la==395 or _la==937 or _la==939):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7885
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 7887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 7886
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 7889
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 7890
                self.match(TeradataSQLDDLParser.TYPE)
                self.state = 7891
                localctx._integer_literal = self.integer_literal()
                localctx.index_type_number.append(localctx._integer_literal)
                self.state = 7896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7892
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7893
                    localctx._integer_literal = self.integer_literal()
                    localctx.index_type_number.append(localctx._integer_literal)
                    self.state = 7898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 7901
                self.match(TeradataSQLDDLParser.CHECKPOINT)
                self.state = 7902
                localctx.checkpoint_trigger = self.integer_literal()


            self.state = 7906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 7905
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_analysis_set_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Integer_literalContext

        def index_analysis_boundary_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Index_analysis_boundary_optionContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_index_analysis_set_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_analysis_set_spec" ):
                listener.enterIndex_analysis_set_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_analysis_set_spec" ):
                listener.exitIndex_analysis_set_spec(self)




    def index_analysis_set_spec(self):

        localctx = TeradataSQLDDLParser.Index_analysis_set_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_index_analysis_set_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7908
            self.index_analysis_boundary_option()
            self.state = 7909
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 7910
            localctx.value = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_analysis_boundary_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGERATE(self):
            return self.getToken(TeradataSQLDDLParser.CHANGERATE, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNSPERJOININDEX, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLDDLParser.INDEXMAINTMODE, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLDDLParser.INDEXESPERTABLE, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLDDLParser.SEARCHSPACE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_index_analysis_boundary_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_analysis_boundary_option" ):
                listener.enterIndex_analysis_boundary_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_analysis_boundary_option" ):
                listener.exitIndex_analysis_boundary_option(self)




    def index_analysis_boundary_option(self):

        localctx = TeradataSQLDDLParser.Index_analysis_boundary_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_index_analysis_boundary_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7912
            _la = self._input.LA(1)
            if not(((((_la - 567)) & ~0x3f) == 0 and ((1 << (_la - 567)) & 24577) != 0) or _la==705 or _la==706 or _la==908):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initiate_partition_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.result_name_tag = None # Alias_nameContext

        def INITIATE(self):
            return self.getToken(TeradataSQLDDLParser.INITIATE, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDDLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Analysis_time_limit_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_initiate_partition_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiate_partition_analysis_stat" ):
                listener.enterInitiate_partition_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiate_partition_analysis_stat" ):
                listener.exitInitiate_partition_analysis_stat(self)




    def initiate_partition_analysis_stat(self):

        localctx = TeradataSQLDDLParser.Initiate_partition_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_initiate_partition_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7914
            self.match(TeradataSQLDDLParser.INITIATE)
            self.state = 7915
            self.match(TeradataSQLDDLParser.PARTITION)
            self.state = 7916
            self.match(TeradataSQLDDLParser.ANALYSIS)
            self.state = 7926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7917
                self.match(TeradataSQLDDLParser.ON)
                self.state = 7918
                self.table_name()
                self.state = 7923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7919
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7920
                    self.table_name()
                    self.state = 7925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7928
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7929
            localctx.workload_name = self.unqualified_name()
            self.state = 7930
            self.match(TeradataSQLDDLParser.IN)
            self.state = 7931
            localctx.qcd_name = self.database_name()
            self.state = 7932
            self.match(TeradataSQLDDLParser.AS)
            self.state = 7933
            localctx.result_name_tag = self.alias_name()
            self.state = 7935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 7934
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_explain_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sample_percentage = None # Integer_literalContext
            self.qcd_name = None # Database_nameContext
            self.query_plan_name = None # Unqualified_nameContext
            self.frequency = None # Integer_literalContext

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDDLParser.EXPLAIN, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def explained_sql_request(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Explained_sql_requestContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def STATISTICS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.STATISTICS)
            else:
                return self.getToken(TeradataSQLDDLParser.STATISTICS, i)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDDLParser.DEMOGRAPHICS, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOR)
            else:
                return self.getToken(TeradataSQLDDLParser.FOR, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def limit_sql_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Limit_sql_clauseContext,0)


        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def SAMPLE(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDDLParser.NODDLTEXT, 0)

        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_insert_explain_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_explain_stat" ):
                listener.enterInsert_explain_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_explain_stat" ):
                listener.exitInsert_explain_stat(self)




    def insert_explain_stat(self):

        localctx = TeradataSQLDDLParser.Insert_explain_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_insert_explain_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7937
            self.match(TeradataSQLDDLParser.INSERT)
            self.state = 7938
            self.match(TeradataSQLDDLParser.EXPLAIN)
            self.state = 7952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7939
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 7941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 7940
                    self.match(TeradataSQLDDLParser.NO)


                self.state = 7943
                self.match(TeradataSQLDDLParser.STATISTICS)
                self.state = 7950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==457:
                    self.state = 7944
                    self.match(TeradataSQLDDLParser.USING)
                    self.state = 7945
                    self.match(TeradataSQLDDLParser.SAMPLE)
                    self.state = 7946
                    localctx.sample_percentage = self.integer_literal()
                    self.state = 7948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==300:
                        self.state = 7947
                        self.match(TeradataSQLDDLParser.PERCENT)






            self.state = 7956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 7954
                self.match(TeradataSQLDDLParser.AND)
                self.state = 7955
                self.match(TeradataSQLDDLParser.DEMOGRAPHICS)


            self.state = 7967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 7958
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 7959
                self.table_name()
                self.state = 7964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7960
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 7961
                    self.table_name()
                    self.state = 7966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7969
            self.match(TeradataSQLDDLParser.INTO)
            self.state = 7970
            localctx.qcd_name = self.database_name()
            self.state = 7973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7971
                self.match(TeradataSQLDDLParser.AS)
                self.state = 7972
                localctx.query_plan_name = self.unqualified_name()


            self.state = 7976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 7975
                self.limit_sql_clause()


            self.state = 7980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 7978
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 7979
                localctx.frequency = self.integer_literal()


            self.state = 7984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 7982
                self.match(TeradataSQLDDLParser.CHECK)
                self.state = 7983
                self.match(TeradataSQLDDLParser.STATISTICS)


            self.state = 7991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7986
                self.match(TeradataSQLDDLParser.IN)
                self.state = 7987
                self.match(TeradataSQLDDLParser.XML)
                self.state = 7989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 7988
                    self.match(TeradataSQLDDLParser.NODDLTEXT)




            self.state = 7993
            self.explained_sql_request()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_index_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.index_name_tag = None # Alias_nameContext
            self.checkpoint_trigger = None # Integer_literalContext

        def RESTART(self):
            return self.getToken(TeradataSQLDDLParser.RESTART, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDDLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDDLParser.CHECKPOINT, 0)

        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Analysis_time_limit_clauseContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_restart_index_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestart_index_analysis_stat" ):
                listener.enterRestart_index_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestart_index_analysis_stat" ):
                listener.exitRestart_index_analysis_stat(self)




    def restart_index_analysis_stat(self):

        localctx = TeradataSQLDDLParser.Restart_index_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_restart_index_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7995
            self.match(TeradataSQLDDLParser.RESTART)
            self.state = 7996
            self.match(TeradataSQLDDLParser.INDEX)
            self.state = 7997
            self.match(TeradataSQLDDLParser.ANALYSIS)
            self.state = 7998
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 7999
            localctx.workload_name = self.unqualified_name()
            self.state = 8000
            self.match(TeradataSQLDDLParser.IN)
            self.state = 8001
            localctx.qcd_name = self.database_name()
            self.state = 8002
            self.match(TeradataSQLDDLParser.AS)
            self.state = 8003
            localctx.index_name_tag = self.alias_name()
            self.state = 8006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 8004
                self.match(TeradataSQLDDLParser.CHECKPOINT)
                self.state = 8005
                localctx.checkpoint_trigger = self.integer_literal()


            self.state = 8009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 8008
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(TeradataSQLDDLParser.CALL, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_call_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_stat" ):
                listener.enterCall_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_stat" ):
                listener.exitCall_stat(self)




    def call_stat(self):

        localctx = TeradataSQLDDLParser.Call_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_call_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8011
            self.match(TeradataSQLDDLParser.CALL)
            self.state = 8012
            self.procedure_name()
            self.state = 8013
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 8022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1614061055) != 0):
                self.state = 8014
                self.argument()
                self.state = 8019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 8015
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 8016
                    self.argument()
                    self.state = 8021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 8024
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Returns_clauseContext,0)


        def QUESTION_MARK(self):
            return self.getToken(TeradataSQLDDLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = TeradataSQLDDLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 8031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8026
                self.scalar_expr(0)
                self.state = 8028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==352:
                    self.state = 8027
                    self.returns_clause()


                pass
            elif token in [1212]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8030
                self.match(TeradataSQLDDLParser.QUESTION_MARK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_nameContext,0)


        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def EXEC(self):
            return self.getToken(TeradataSQLDDLParser.EXEC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def parameter_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Parameter_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,i)


        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_execute_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_stat" ):
                listener.enterExecute_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_stat" ):
                listener.exitExecute_stat(self)




    def execute_stat(self):

        localctx = TeradataSQLDDLParser.Execute_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_execute_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8033
            _la = self._input.LA(1)
            if not(_la==143 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8034
            self.macro_name()
            self.state = 8061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 8035
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 8057
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
                if la_ == 1:
                    self.state = 8036
                    self.scalar_expr(0)
                    self.state = 8041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 8037
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 8038
                        self.scalar_expr(0)
                        self.state = 8043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 8044
                    self.parameter_name()
                    self.state = 8045
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 8046
                    self.scalar_expr(0)
                    self.state = 8054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 8047
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 8048
                        self.parameter_name()
                        self.state = 8049
                        self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                        self.state = 8050
                        self.scalar_expr(0)
                        self.state = 8056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 8059
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(TeradataSQLDDLParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(TeradataSQLDDLParser.WORK, 0)

        def RELEASE(self):
            return self.getToken(TeradataSQLDDLParser.RELEASE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_commit_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stat" ):
                listener.enterCommit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stat" ):
                listener.exitCommit_stat(self)




    def commit_stat(self):

        localctx = TeradataSQLDDLParser.Commit_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_commit_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8063
            self.match(TeradataSQLDDLParser.COMMIT)
            self.state = 8068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==476:
                self.state = 8064
                self.match(TeradataSQLDDLParser.WORK)
                self.state = 8066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==337:
                    self.state = 8065
                    self.match(TeradataSQLDDLParser.RELEASE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.abort_message = None # Char_string_literalContext

        def ROLLBACK(self):
            return self.getToken(TeradataSQLDDLParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(TeradataSQLDDLParser.WORK, 0)

        def from_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rollback_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stat" ):
                listener.enterRollback_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stat" ):
                listener.exitRollback_stat(self)




    def rollback_stat(self):

        localctx = TeradataSQLDDLParser.Rollback_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_rollback_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8070
            self.match(TeradataSQLDDLParser.ROLLBACK)
            self.state = 8072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==476:
                self.state = 8071
                self.match(TeradataSQLDDLParser.WORK)


            self.state = 8075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 8074
                localctx.abort_message = self.char_string_literal()


            self.state = 8078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 8077
                self.from_clause()


            self.state = 8081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==471:
                self.state = 8080
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abort_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.abort_message = None # Char_string_literalContext

        def ABORT(self):
            return self.getToken(TeradataSQLDDLParser.ABORT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_abort_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbort_stat" ):
                listener.enterAbort_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbort_stat" ):
                listener.exitAbort_stat(self)




    def abort_stat(self):

        localctx = TeradataSQLDDLParser.Abort_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_abort_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8083
            self.match(TeradataSQLDDLParser.ABORT)
            self.state = 8085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 8084
                localctx.abort_message = self.char_string_literal()


            self.state = 8088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 8087
                self.from_clause()


            self.state = 8091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==471:
                self.state = 8090
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_transaction_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLDDLParser.TRANSACTION, 0)

        def BT(self):
            return self.getToken(TeradataSQLDDLParser.BT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_begin_transaction_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_transaction_stat" ):
                listener.enterBegin_transaction_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_transaction_stat" ):
                listener.exitBegin_transaction_stat(self)




    def begin_transaction_stat(self):

        localctx = TeradataSQLDDLParser.Begin_transaction_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_begin_transaction_stat)
        try:
            self.state = 8096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8093
                self.match(TeradataSQLDDLParser.BEGIN)
                self.state = 8094
                self.match(TeradataSQLDDLParser.TRANSACTION)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8095
                self.match(TeradataSQLDDLParser.BT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_transaction_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLDDLParser.TRANSACTION, 0)

        def ET(self):
            return self.getToken(TeradataSQLDDLParser.ET, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_end_transaction_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_transaction_stat" ):
                listener.enterEnd_transaction_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_transaction_stat" ):
                listener.exitEnd_transaction_stat(self)




    def end_transaction_stat(self):

        localctx = TeradataSQLDDLParser.End_transaction_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_end_transaction_stat)
        try:
            self.state = 8101
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8098
                self.match(TeradataSQLDDLParser.END)
                self.state = 8099
                self.match(TeradataSQLDDLParser.TRANSACTION)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8100
                self.match(TeradataSQLDDLParser.ET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_locking_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_stat" ):
                listener.enterLocking_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_stat" ):
                listener.exitLocking_stat(self)




    def locking_stat(self):

        localctx = TeradataSQLDDLParser.Locking_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_locking_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8103
            self.locking_request_modifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_retrieving_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(TeradataSQLDDLParser.COMMENT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def object_kind(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_comment_retrieving_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_retrieving_stat" ):
                listener.enterComment_retrieving_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_retrieving_stat" ):
                listener.exitComment_retrieving_stat(self)




    def comment_retrieving_stat(self):

        localctx = TeradataSQLDDLParser.Comment_retrieving_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_comment_retrieving_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8105
            self.match(TeradataSQLDDLParser.COMMENT)
            self.state = 8107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 8106
                self.match(TeradataSQLDDLParser.ON)


            self.state = 8116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1023,self._ctx)
            if la_ == 1:
                self.state = 8110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1022,self._ctx)
                if la_ == 1:
                    self.state = 8109
                    self.object_kind()


                self.state = 8112
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 8113
                self.match(TeradataSQLDDLParser.COLUMN)
                self.state = 8114
                self.column_name()
                pass

            elif la_ == 3:
                self.state = 8115
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checkpoint_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table = None # Table_nameContext

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDDLParser.CHECKPOINT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def NAMED(self):
            return self.getToken(TeradataSQLDDLParser.NAMED, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_checkpoint_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpoint_stat" ):
                listener.enterCheckpoint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpoint_stat" ):
                listener.exitCheckpoint_stat(self)




    def checkpoint_stat(self):

        localctx = TeradataSQLDDLParser.Checkpoint_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_checkpoint_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8118
            self.match(TeradataSQLDDLParser.CHECKPOINT)
            self.state = 8119
            localctx.journal_table = self.table_name()
            self.state = 8123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 8120
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 8121
                self.match(TeradataSQLDDLParser.NAMED)
                self.state = 8122
                self.variable_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Echo_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.string = None # Char_string_literalContext

        def ECHO(self):
            return self.getToken(TeradataSQLDDLParser.ECHO, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_echo_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEcho_stat" ):
                listener.enterEcho_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEcho_stat" ):
                listener.exitEcho_stat(self)




    def echo_stat(self):

        localctx = TeradataSQLDDLParser.Echo_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_echo_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8125
            self.match(TeradataSQLDDLParser.ECHO)
            self.state = 8127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 8126
                localctx.string = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(TeradataSQLDDLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_null_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_stat" ):
                listener.enterNull_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_stat" ):
                listener.exitNull_stat(self)




    def null_stat(self):

        localctx = TeradataSQLDDLParser.Null_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_null_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8129
            self.match(TeradataSQLDDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_set_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_spec" ):
                listener.enterSet_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_spec" ):
                listener.exitSet_spec(self)




    def set_spec(self):

        localctx = TeradataSQLDDLParser.Set_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_set_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8131
            self.column_name()
            self.state = 8132
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 8133
            self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_isolated_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLDDLParser.LOADING, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CONCURRENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_isolated_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_isolated_loading" ):
                listener.enterWith_isolated_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_isolated_loading" ):
                listener.exitWith_isolated_loading(self)




    def with_isolated_loading(self):

        localctx = TeradataSQLDDLParser.With_isolated_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_with_isolated_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8135
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 8137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 8136
                self.match(TeradataSQLDDLParser.NO)


            self.state = 8140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 8139
                self.match(TeradataSQLDDLParser.CONCURRENT)


            self.state = 8142
            self.match(TeradataSQLDDLParser.ISOLATED)
            self.state = 8143
            self.match(TeradataSQLDDLParser.LOADING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_errorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_limit = None # Integer_literalContext

        def LOGGING(self):
            return self.getToken(TeradataSQLDDLParser.LOGGING, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDDLParser.ERRORS, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLDDLParser.LIMIT, 0)

        def OF(self):
            return self.getToken(TeradataSQLDDLParser.OF, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_logging_errors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_errors" ):
                listener.enterLogging_errors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_errors" ):
                listener.exitLogging_errors(self)




    def logging_errors(self):

        localctx = TeradataSQLDDLParser.Logging_errorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_logging_errors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8145
            self.match(TeradataSQLDDLParser.LOGGING)
            self.state = 8147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 8146
                self.match(TeradataSQLDDLParser.ALL)


            self.state = 8149
            self.match(TeradataSQLDDLParser.ERRORS)
            self.state = 8158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 8150
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 8156
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 8151
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 8152
                    self.match(TeradataSQLDDLParser.LIMIT)
                    pass
                elif token in [221]:
                    self.state = 8153
                    self.match(TeradataSQLDDLParser.LIMIT)
                    self.state = 8154
                    self.match(TeradataSQLDDLParser.OF)
                    self.state = 8155
                    localctx.error_limit = self.integer_literal()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDDLParser.GROUP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def FILE(self):
            return self.getToken(TeradataSQLDDLParser.FILE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_object_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_kind" ):
                listener.enterObject_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_kind" ):
                listener.exitObject_kind(self)




    def object_kind(self):

        localctx = TeradataSQLDDLParser.Object_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_object_kind)
        try:
            self.state = 8176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [166]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8160
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass
            elif token in [688]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8161
                self.match(TeradataSQLDDLParser.GLOP)
                self.state = 8162
                self.match(TeradataSQLDDLParser.SET)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8163
                self.match(TeradataSQLDDLParser.GROUP)
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8164
                self.match(TeradataSQLDDLParser.MACRO)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8165
                self.match(TeradataSQLDDLParser.METHOD)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8166
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8167
                self.match(TeradataSQLDDLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8168
                self.match(TeradataSQLDDLParser.ROLE)
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8169
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass
            elif token in [437]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8170
                self.match(TeradataSQLDDLParser.TYPE)
                pass
            elif token in [468]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8171
                self.match(TeradataSQLDDLParser.VIEW)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8172
                self.match(TeradataSQLDDLParser.DATABASE)
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8173
                self.match(TeradataSQLDDLParser.TABLE)
                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 14)
                self.state = 8174
                self.match(TeradataSQLDDLParser.USER)
                pass
            elif token in [668]:
                self.enterOuterAlt(localctx, 15)
                self.state = 8175
                self.match(TeradataSQLDDLParser.FILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explained_sql_requestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Delete_statContext,0)


        def execute_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Execute_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Insert_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Merge_statContext,0)


        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Select_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Update_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_explained_sql_request

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplained_sql_request" ):
                listener.enterExplained_sql_request(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplained_sql_request" ):
                listener.exitExplained_sql_request(self)




    def explained_sql_request(self):

        localctx = TeradataSQLDDLParser.Explained_sql_requestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_explained_sql_request)
        try:
            self.state = 8184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8178
                self.delete_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8179
                self.execute_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8180
                self.insert_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8181
                self.merge_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8182
                self.select_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8183
                self.update_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_sql_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sql_length = None # Integer_literalContext

        def LIMIT(self):
            return self.getToken(TeradataSQLDDLParser.LIMIT, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDDLParser.SQL, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_limit_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sql_clause" ):
                listener.enterLimit_sql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sql_clause" ):
                listener.exitLimit_sql_clause(self)




    def limit_sql_clause(self):

        localctx = TeradataSQLDDLParser.Limit_sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_limit_sql_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8186
            self.match(TeradataSQLDDLParser.LIMIT)
            self.state = 8192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 8187
                self.match(TeradataSQLDDLParser.SQL)
                self.state = 8190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1224:
                    self.state = 8188
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 8189
                    localctx.sql_length = self.integer_literal()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analysis_time_limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.elapsed_time = None # Integer_literalContext

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLDDLParser.LIMIT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_analysis_time_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalysis_time_limit_clause" ):
                listener.enterAnalysis_time_limit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalysis_time_limit_clause" ):
                listener.exitAnalysis_time_limit_clause(self)




    def analysis_time_limit_clause(self):

        localctx = TeradataSQLDDLParser.Analysis_time_limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_analysis_time_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8194
            self.match(TeradataSQLDDLParser.TIME)
            self.state = 8195
            self.match(TeradataSQLDDLParser.LIMIT)
            self.state = 8196
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 8197
            localctx.elapsed_time = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TeradataSQLDDLParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_data_type)
        try:
            self.state = 8205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1035,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8199
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8200
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8201
                self.binary_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8202
                self.datetime_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8203
                self.period_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8204
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Precisionless_char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_variable_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_data_type" ):
                listener.enterVariable_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_data_type" ):
                listener.exitVariable_data_type(self)




    def variable_data_type(self):

        localctx = TeradataSQLDDLParser.Variable_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_variable_data_type)
        try:
            self.state = 8214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1036,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8207
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8208
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8209
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8210
                self.binary_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8211
                self.datetime_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8212
                self.period_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8213
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Precisionless_char_data_typeContext,0)


        def lob_as_locator_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Lob_as_locator_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_typeContext,0)


        def TD_ANYTYPE(self):
            return self.getToken(TeradataSQLDDLParser.TD_ANYTYPE, 0)

        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDDLParser.VARIANT_TYPE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_external_function_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_data_type" ):
                listener.enterExternal_function_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_data_type" ):
                listener.exitExternal_function_data_type(self)




    def external_function_data_type(self):

        localctx = TeradataSQLDDLParser.External_function_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_external_function_data_type)
        try:
            self.state = 8226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8216
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8217
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8218
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8219
                self.lob_as_locator_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8220
                self.binary_data_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8221
                self.datetime_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8222
                self.period_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8223
                self.udt_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8224
                self.match(TeradataSQLDDLParser.TD_ANYTYPE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8225
                self.match(TeradataSQLDDLParser.VARIANT_TYPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.scale = None # Integer_literalContext

        def BYTEINT(self):
            return self.getToken(TeradataSQLDDLParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataSQLDDLParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.INTEGER, 0)

        def INT(self):
            return self.getToken(TeradataSQLDDLParser.INT, 0)

        def BIGINT(self):
            return self.getToken(TeradataSQLDDLParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataSQLDDLParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataSQLDDLParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataSQLDDLParser.NUMERIC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def FLOAT(self):
            return self.getToken(TeradataSQLDDLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataSQLDDLParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(TeradataSQLDDLParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TeradataSQLDDLParser.PRECISION, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.NUMBER, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_numeric_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_data_type" ):
                listener.enterNumeric_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_data_type" ):
                listener.exitNumeric_data_type(self)




    def numeric_data_type(self):

        localctx = TeradataSQLDDLParser.Numeric_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_numeric_data_type)
        self._la = 0 # Token type
        try:
            self.state = 8270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8228
                self.match(TeradataSQLDDLParser.BYTEINT)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8229
                self.match(TeradataSQLDDLParser.SMALLINT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8230
                self.match(TeradataSQLDDLParser.INTEGER)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8231
                self.match(TeradataSQLDDLParser.INT)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8232
                self.match(TeradataSQLDDLParser.BIGINT)
                pass
            elif token in [108, 109, 278]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8233
                _la = self._input.LA(1)
                if not(_la==108 or _la==109 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
                if la_ == 1:
                    self.state = 8234
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 8236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 8235
                        localctx.precision = self.integer_literal()


                    self.state = 8240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 8238
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 8239
                        localctx.scale = self.integer_literal()


                    self.state = 8242
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass
            elif token in [124, 157, 323]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8255
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157]:
                    self.state = 8245
                    self.match(TeradataSQLDDLParser.FLOAT)
                    self.state = 8250
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1041,self._ctx)
                    if la_ == 1:
                        self.state = 8246
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 8247
                        localctx.precision = self.integer_literal()
                        self.state = 8248
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)


                    pass
                elif token in [323]:
                    self.state = 8252
                    self.match(TeradataSQLDDLParser.REAL)
                    pass
                elif token in [124]:
                    self.state = 8253
                    self.match(TeradataSQLDDLParser.DOUBLE)
                    self.state = 8254
                    self.match(TeradataSQLDDLParser.PRECISION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8257
                self.match(TeradataSQLDDLParser.NUMBER)
                self.state = 8268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1045,self._ctx)
                if la_ == 1:
                    self.state = 8258
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 8261
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1194]:
                        self.state = 8259
                        localctx.precision = self.integer_literal()
                        pass
                    elif token in [1219]:
                        self.state = 8260
                        self.match(TeradataSQLDDLParser.MUL_SIGN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 8263
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 8264
                        localctx.scale = self.integer_literal()


                    self.state = 8267
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDDLParser.CHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_phraseContext,0)


        def GRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.GRAPHIC, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLDDLParser.VARCHAR, 0)

        def VARYING(self):
            return self.getToken(TeradataSQLDDLParser.VARYING, 0)

        def LONG(self):
            return self.getToken(TeradataSQLDDLParser.LONG, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.VARGRAPHIC, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDDLParser.CLOB, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDDLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Max_length_k_m_gContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_data_type" ):
                listener.enterChar_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_data_type" ):
                listener.exitChar_data_type(self)




    def char_data_type(self):

        localctx = TeradataSQLDDLParser.Char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 8312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1055,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8272
                _la = self._input.LA(1)
                if not(_la==52 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1047,self._ctx)
                if la_ == 1:
                    self.state = 8273
                    self.type_precision()


                self.state = 8277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
                if la_ == 1:
                    self.state = 8276
                    self.character_set_phrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8279
                self.match(TeradataSQLDDLParser.GRAPHIC)
                self.state = 8281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1049,self._ctx)
                if la_ == 1:
                    self.state = 8280
                    self.type_precision()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8288
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [464]:
                    self.state = 8283
                    self.match(TeradataSQLDDLParser.VARCHAR)
                    pass
                elif token in [55]:
                    self.state = 8284
                    self.match(TeradataSQLDDLParser.CHARACTER)
                    self.state = 8285
                    self.match(TeradataSQLDDLParser.VARYING)
                    pass
                elif token in [52]:
                    self.state = 8286
                    self.match(TeradataSQLDDLParser.CHAR)
                    self.state = 8287
                    self.match(TeradataSQLDDLParser.VARYING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8290
                self.type_precision()
                self.state = 8292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                if la_ == 1:
                    self.state = 8291
                    self.character_set_phrase()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8294
                self.match(TeradataSQLDDLParser.LONG)
                self.state = 8295
                self.match(TeradataSQLDDLParser.VARCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8296
                self.match(TeradataSQLDDLParser.VARGRAPHIC)
                self.state = 8297
                self.type_precision()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8298
                self.match(TeradataSQLDDLParser.LONG)
                self.state = 8299
                self.match(TeradataSQLDDLParser.VARGRAPHIC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8304
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 8300
                    self.match(TeradataSQLDDLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 8301
                    self.match(TeradataSQLDDLParser.CHARACTER)
                    self.state = 8302
                    self.match(TeradataSQLDDLParser.LARGE)
                    self.state = 8303
                    self.match(TeradataSQLDDLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
                if la_ == 1:
                    self.state = 8306
                    self.max_length_k_m_g()


                self.state = 8310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
                if la_ == 1:
                    self.state = 8309
                    self.latin_unicode_character_set_phrase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precisionless_char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(TeradataSQLDDLParser.VARCHAR, 0)

        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_phraseContext,0)


        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.VARGRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_precisionless_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecisionless_char_data_type" ):
                listener.enterPrecisionless_char_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecisionless_char_data_type" ):
                listener.exitPrecisionless_char_data_type(self)




    def precisionless_char_data_type(self):

        localctx = TeradataSQLDDLParser.Precisionless_char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_precisionless_char_data_type)
        try:
            self.state = 8322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8314
                self.match(TeradataSQLDDLParser.VARCHAR)
                self.state = 8316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                if la_ == 1:
                    self.state = 8315
                    self.character_set_phrase()


                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8318
                self.match(TeradataSQLDDLParser.VARGRAPHIC)
                self.state = 8320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                if la_ == 1:
                    self.state = 8319
                    self.character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_as_locator_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDDLParser.LOCATOR, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDDLParser.CLOB, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDDLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDDLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDDLParser.BINARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_lob_as_locator_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_as_locator_data_type" ):
                listener.enterLob_as_locator_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_as_locator_data_type" ):
                listener.exitLob_as_locator_data_type(self)




    def lob_as_locator_data_type(self):

        localctx = TeradataSQLDDLParser.Lob_as_locator_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_lob_as_locator_data_type)
        try:
            self.state = 8340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8328
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 8324
                    self.match(TeradataSQLDDLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 8325
                    self.match(TeradataSQLDDLParser.CHARACTER)
                    self.state = 8326
                    self.match(TeradataSQLDDLParser.LARGE)
                    self.state = 8327
                    self.match(TeradataSQLDDLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8330
                self.match(TeradataSQLDDLParser.AS)
                self.state = 8331
                self.match(TeradataSQLDDLParser.LOCATOR)
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8336
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 8332
                    self.match(TeradataSQLDDLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 8333
                    self.match(TeradataSQLDDLParser.BINARY)
                    self.state = 8334
                    self.match(TeradataSQLDDLParser.LARGE)
                    self.state = 8335
                    self.match(TeradataSQLDDLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8338
                self.match(TeradataSQLDDLParser.AS)
                self.state = 8339
                self.match(TeradataSQLDDLParser.LOCATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(TeradataSQLDDLParser.BYTE, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def VARBYTE(self):
            return self.getToken(TeradataSQLDDLParser.VARBYTE, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDDLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDDLParser.BINARY, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDDLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Max_length_k_m_gContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_binary_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_data_type" ):
                listener.enterBinary_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_data_type" ):
                listener.exitBinary_data_type(self)




    def binary_data_type(self):

        localctx = TeradataSQLDDLParser.Binary_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_binary_data_type)
        try:
            self.state = 8357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8342
                self.match(TeradataSQLDDLParser.BYTE)
                self.state = 8344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
                if la_ == 1:
                    self.state = 8343
                    self.type_precision()


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8346
                self.match(TeradataSQLDDLParser.VARBYTE)
                self.state = 8347
                self.type_precision()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8352
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 8348
                    self.match(TeradataSQLDDLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 8349
                    self.match(TeradataSQLDDLParser.BINARY)
                    self.state = 8350
                    self.match(TeradataSQLDDLParser.LARGE)
                    self.state = 8351
                    self.match(TeradataSQLDDLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1064,self._ctx)
                if la_ == 1:
                    self.state = 8354
                    self.max_length_k_m_g()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(TeradataSQLDDLParser.DATE, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_period_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_datetime_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_type" ):
                listener.enterDatetime_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_type" ):
                listener.exitDatetime_type(self)




    def datetime_type(self):

        localctx = TeradataSQLDDLParser.Datetime_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_datetime_type)
        try:
            self.state = 8376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8359
                self.match(TeradataSQLDDLParser.DATE)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8360
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 8362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1066,self._ctx)
                if la_ == 1:
                    self.state = 8361
                    self.type_precision()


                self.state = 8365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
                if la_ == 1:
                    self.state = 8364
                    self.with_time_zone()


                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8367
                self.match(TeradataSQLDDLParser.TIMESTAMP)
                self.state = 8369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1068,self._ctx)
                if la_ == 1:
                    self.state = 8368
                    self.type_precision()


                self.state = 8372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1069,self._ctx)
                if la_ == 1:
                    self.state = 8371
                    self.with_time_zone()


                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8374
                self.match(TeradataSQLDDLParser.INTERVAL)
                self.state = 8375
                self.interval_period_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDDLParser.DATE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_period_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_type" ):
                listener.enterPeriod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_type" ):
                listener.exitPeriod_type(self)




    def period_type(self):

        localctx = TeradataSQLDDLParser.Period_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_period_type)
        self._la = 0 # Token type
        try:
            self.state = 8402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1075,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8378
                self.match(TeradataSQLDDLParser.PERIOD)
                self.state = 8379
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 8380
                self.match(TeradataSQLDDLParser.DATE)
                self.state = 8381
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8382
                self.match(TeradataSQLDDLParser.PERIOD)
                self.state = 8383
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 8384
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 8386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 8385
                    self.type_precision()


                self.state = 8389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 8388
                    self.with_time_zone()


                self.state = 8391
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8392
                self.match(TeradataSQLDDLParser.PERIOD)
                self.state = 8393
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 8394
                self.match(TeradataSQLDDLParser.TIMESTAMP)
                self.state = 8396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 8395
                    self.type_precision()


                self.state = 8399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 8398
                    self.with_time_zone()


                self.state = 8401
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDDLParser.XMLTYPE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Max_length_k_m_gContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Inline_lengthContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)

        def max_length_k_m(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Max_length_k_mContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Latin_unicode_character_set_phraseContext,0)


        def json_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Json_storage_formatContext,0)


        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDDLParser.ST_GEOMETRY, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDDLParser.DATASET, 0)

        def dataset_storage_format_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Dataset_storage_format_clauseContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_udt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_type" ):
                listener.enterUdt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_type" ):
                listener.exitUdt_type(self)




    def udt_type(self):

        localctx = TeradataSQLDDLParser.Udt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_udt_type)
        self._la = 0 # Token type
        try:
            self.state = 8453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1090,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8404
                    self.sysudtlib()


                self.state = 8407
                _la = self._input.LA(1)
                if not(_la==1042 or _la==1059):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
                if la_ == 1:
                    self.state = 8408
                    self.max_length_k_m_g()


                self.state = 8412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
                if la_ == 1:
                    self.state = 8411
                    self.inline_length()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8414
                    self.sysudtlib()


                self.state = 8417
                self.match(TeradataSQLDDLParser.JSON)
                self.state = 8419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1080,self._ctx)
                if la_ == 1:
                    self.state = 8418
                    self.max_length_k_m()


                self.state = 8422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1081,self._ctx)
                if la_ == 1:
                    self.state = 8421
                    self.inline_length()


                self.state = 8426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1082,self._ctx)
                if la_ == 1:
                    self.state = 8424
                    self.latin_unicode_character_set_phrase()

                elif la_ == 2:
                    self.state = 8425
                    self.json_storage_format()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8428
                    self.sysudtlib()


                self.state = 8431
                self.match(TeradataSQLDDLParser.ST_GEOMETRY)
                self.state = 8433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1084,self._ctx)
                if la_ == 1:
                    self.state = 8432
                    self.max_length_k_m()


                self.state = 8436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1085,self._ctx)
                if la_ == 1:
                    self.state = 8435
                    self.inline_length()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8438
                    self.sysudtlib()


                self.state = 8441
                self.match(TeradataSQLDDLParser.DATASET)
                self.state = 8443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 8442
                    self.max_length_k_m()


                self.state = 8446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709:
                    self.state = 8445
                    self.inline_length()


                self.state = 8448
                self.dataset_storage_format_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1089,self._ctx)
                if la_ == 1:
                    self.state = 8449
                    self.sysudtlib()


                self.state = 8452
                self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Format_phraseContext,0)


        def column_naming_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_naming_phraseContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_time_zoneContext,0)


        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.At_timezoneContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_value_control_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_data_type_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_attribute" ):
                listener.enterData_type_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_attribute" ):
                listener.exitData_type_attribute(self)




    def data_type_attribute(self):

        localctx = TeradataSQLDDLParser.Data_type_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_data_type_attribute)
        try:
            self.state = 8463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1091,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8455
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8456
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8457
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8458
                self.column_naming_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8459
                self.with_time_zone()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8460
                self.at_timezone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8461
                self.character_set_phrase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8462
                self.default_value_control_phrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_control_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def default_value(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Default_valueContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_default_value_control_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_control_phrase" ):
                listener.enterDefault_value_control_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_control_phrase" ):
                listener.exitDefault_value_control_phrase(self)




    def default_value_control_phrase(self):

        localctx = TeradataSQLDDLParser.Default_value_control_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_default_value_control_phrase)
        self._la = 0 # Token type
        try:
            self.state = 8473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 8465
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 8468
                self.match(TeradataSQLDDLParser.NULL)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8469
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 8470
                self.default_value()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8471
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 8472
                self.match(TeradataSQLDDLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Float_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Builtin_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TeradataSQLDDLParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 8481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1094,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8475
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8476
                self.float_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8477
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8478
                self.integer_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8479
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8480
                self.builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_naming_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_naming_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_naming_phrase" ):
                listener.enterColumn_naming_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_naming_phrase" ):
                listener.exitColumn_naming_phrase(self)




    def column_naming_phrase(self):

        localctx = TeradataSQLDDLParser.Column_naming_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_column_naming_phrase)
        try:
            self.state = 8485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [262]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8483
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8484
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysudtlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDDLParser.SYSUDTLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sysudtlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysudtlib" ):
                listener.enterSysudtlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysudtlib" ):
                listener.exitSysudtlib(self)




    def sysudtlib(self):

        localctx = TeradataSQLDDLParser.SysudtlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_sysudtlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8487
            self.match(TeradataSQLDDLParser.SYSUDTLIB)
            self.state = 8488
            self.match(TeradataSQLDDLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_period_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDDLParser.YEAR, 0)

        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDDLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDDLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDDLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDDLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDDLParser.SECOND, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_interval_period_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_period_spec" ):
                listener.enterInterval_period_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_period_spec" ):
                listener.exitInterval_period_spec(self)




    def interval_period_spec(self):

        localctx = TeradataSQLDDLParser.Interval_period_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_interval_period_spec)
        self._la = 0 # Token type
        try:
            self.state = 8552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [478]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8490
                self.match(TeradataSQLDDLParser.YEAR)
                self.state = 8492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1096,self._ctx)
                if la_ == 1:
                    self.state = 8491
                    self.type_precision()


                self.state = 8496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
                if la_ == 1:
                    self.state = 8494
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8495
                    self.match(TeradataSQLDDLParser.MONTH)


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8498
                self.match(TeradataSQLDDLParser.MONTH)
                self.state = 8500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
                if la_ == 1:
                    self.state = 8499
                    self.type_precision()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8502
                self.match(TeradataSQLDDLParser.DAY)
                self.state = 8504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1099,self._ctx)
                if la_ == 1:
                    self.state = 8503
                    self.type_precision()


                self.state = 8515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1101,self._ctx)
                if la_ == 1:
                    self.state = 8506
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8507
                    self.match(TeradataSQLDDLParser.HOUR)

                elif la_ == 2:
                    self.state = 8508
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8509
                    self.match(TeradataSQLDDLParser.MINUTE)

                elif la_ == 3:
                    self.state = 8510
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8511
                    self.match(TeradataSQLDDLParser.SECOND)
                    self.state = 8513
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1100,self._ctx)
                    if la_ == 1:
                        self.state = 8512
                        self.type_precision()




                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8517
                self.match(TeradataSQLDDLParser.HOUR)
                self.state = 8519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1102,self._ctx)
                if la_ == 1:
                    self.state = 8518
                    self.type_precision()


                self.state = 8528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
                if la_ == 1:
                    self.state = 8521
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8522
                    self.match(TeradataSQLDDLParser.MINUTE)

                elif la_ == 2:
                    self.state = 8523
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8524
                    self.match(TeradataSQLDDLParser.SECOND)
                    self.state = 8526
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1103,self._ctx)
                    if la_ == 1:
                        self.state = 8525
                        self.type_precision()




                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8530
                self.match(TeradataSQLDDLParser.MINUTE)
                self.state = 8532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
                if la_ == 1:
                    self.state = 8531
                    self.type_precision()


                self.state = 8539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
                if la_ == 1:
                    self.state = 8534
                    self.match(TeradataSQLDDLParser.TO)
                    self.state = 8535
                    self.match(TeradataSQLDDLParser.SECOND)
                    self.state = 8537
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1106,self._ctx)
                    if la_ == 1:
                        self.state = 8536
                        self.type_precision()




                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8541
                self.match(TeradataSQLDDLParser.SECOND)
                self.state = 8550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1109,self._ctx)
                if la_ == 1:
                    self.state = 8542
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 8543
                    localctx.precision = self.integer_literal()
                    self.state = 8546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 8544
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 8545
                        localctx.fractional_precision = self.integer_literal()


                    self.state = 8548
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_precisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_type_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_precision" ):
                listener.enterType_precision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_precision" ):
                listener.exitType_precision(self)




    def type_precision(self):

        localctx = TeradataSQLDDLParser.Type_precisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_type_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8554
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 8555
            localctx.precision = self.integer_literal()
            self.state = 8556
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_m_gContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDDLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDDLParser.M, 0)

        def G(self):
            return self.getToken(TeradataSQLDDLParser.G, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_max_length_k_m_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m_g" ):
                listener.enterMax_length_k_m_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m_g" ):
                listener.exitMax_length_k_m_g(self)




    def max_length_k_m_g(self):

        localctx = TeradataSQLDDLParser.Max_length_k_m_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_max_length_k_m_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8558
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 8559
            localctx.max_length = self.integer_literal()
            self.state = 8561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==681 or _la==723 or _la==752:
                self.state = 8560
                _la = self._input.LA(1)
                if not(_la==681 or _la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8563
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_mContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDDLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDDLParser.M, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_max_length_k_m

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m" ):
                listener.enterMax_length_k_m(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m" ):
                listener.exitMax_length_k_m(self)




    def max_length_k_m(self):

        localctx = TeradataSQLDDLParser.Max_length_k_mContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_max_length_k_m)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8565
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 8566
            localctx.max_length = self.integer_literal()
            self.state = 8568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==723 or _la==752:
                self.state = 8567
                _la = self._input.LA(1)
                if not(_la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8570
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDDLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def GRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.GRAPHIC, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDDLParser.KANJISJIS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_phrase" ):
                listener.enterCharacter_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_phrase" ):
                listener.exitCharacter_set_phrase(self)




    def character_set_phrase(self):

        localctx = TeradataSQLDDLParser.Character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8572
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8573
            self.match(TeradataSQLDDLParser.SET)
            self.state = 8574
            _la = self._input.LA(1)
            if not(_la==173 or _la==725 or _la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uppercase_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPPERCASE(self):
            return self.getToken(TeradataSQLDDLParser.UPPERCASE, 0)

        def UC(self):
            return self.getToken(TeradataSQLDDLParser.UC, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_uppercase_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUppercase_phrase" ):
                listener.enterUppercase_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUppercase_phrase" ):
                listener.exitUppercase_phrase(self)




    def uppercase_phrase(self):

        localctx = TeradataSQLDDLParser.Uppercase_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_uppercase_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8576
            _la = self._input.LA(1)
            if not(_la==438 or _la==455):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Casespecific_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.not_ = None # Token

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.CASESPECIFIC, 0)

        def CS(self):
            return self.getToken(TeradataSQLDDLParser.CS, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_casespecific_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasespecific_phrase" ):
                listener.enterCasespecific_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasespecific_phrase" ):
                listener.exitCasespecific_phrase(self)




    def casespecific_phrase(self):

        localctx = TeradataSQLDDLParser.Casespecific_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_casespecific_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==1211:
                self.state = 8578
                localctx.not_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    localctx.not_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8581
            _la = self._input.LA(1)
            if not(_la==49 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Char_string_literalContext
            self.date_format = None # Token
            self.time_format = None # Token

        def FORMAT(self):
            return self.getToken(TeradataSQLDDLParser.FORMAT, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def DATE_STRING(self):
            return self.getToken(TeradataSQLDDLParser.DATE_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDDLParser.TIME_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_format_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_phrase" ):
                listener.enterFormat_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_phrase" ):
                listener.exitFormat_phrase(self)




    def format_phrase(self):

        localctx = TeradataSQLDDLParser.Format_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_format_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8583
            self.match(TeradataSQLDDLParser.FORMAT)
            self.state = 8587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 8584
                localctx.format_ = self.char_string_literal()
                pass
            elif token in [1198]:
                self.state = 8585
                localctx.date_format = self.match(TeradataSQLDDLParser.DATE_STRING)
                pass
            elif token in [1199]:
                self.state = 8586
                localctx.time_format = self.match(TeradataSQLDDLParser.TIME_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def TITLE(self):
            return self.getToken(TeradataSQLDDLParser.TITLE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle_phrase" ):
                listener.enterTitle_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle_phrase" ):
                listener.exitTitle_phrase(self)




    def title_phrase(self):

        localctx = TeradataSQLDDLParser.Title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8589
            self.match(TeradataSQLDDLParser.TITLE)
            self.state = 8590
            localctx.title = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMED(self):
            return self.getToken(TeradataSQLDDLParser.NAMED, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_named_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_phrase" ):
                listener.enterNamed_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_phrase" ):
                listener.exitNamed_phrase(self)




    def named_phrase(self):

        localctx = TeradataSQLDDLParser.Named_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_named_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8592
            self.match(TeradataSQLDDLParser.NAMED)
            self.state = 8593
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_unicode_character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDDLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDDLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_latin_unicode_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLatin_unicode_character_set_phrase" ):
                listener.enterLatin_unicode_character_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLatin_unicode_character_set_phrase" ):
                listener.exitLatin_unicode_character_set_phrase(self)




    def latin_unicode_character_set_phrase(self):

        localctx = TeradataSQLDDLParser.Latin_unicode_character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_latin_unicode_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8595
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8596
            self.match(TeradataSQLDDLParser.SET)
            self.state = 8597
            _la = self._input.LA(1)
            if not(_la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.length = None # Integer_literalContext

        def INLINE(self):
            return self.getToken(TeradataSQLDDLParser.INLINE, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.LENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_inline_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_length" ):
                listener.enterInline_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_length" ):
                listener.exitInline_length(self)




    def inline_length(self):

        localctx = TeradataSQLDDLParser.Inline_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_inline_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8599
            self.match(TeradataSQLDDLParser.INLINE)
            self.state = 8600
            self.match(TeradataSQLDDLParser.LENGTH)
            self.state = 8601
            localctx.length = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDDLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDDLParser.FORMAT, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDDLParser.BSON, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDDLParser.UBJSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_storage_format" ):
                listener.enterJson_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_storage_format" ):
                listener.exitJson_storage_format(self)




    def json_storage_format(self):

        localctx = TeradataSQLDDLParser.Json_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_json_storage_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8603
            self.match(TeradataSQLDDLParser.STORAGE)
            self.state = 8604
            self.match(TeradataSQLDDLParser.FORMAT)
            self.state = 8605
            _la = self._input.LA(1)
            if not(_la==556 or _la==1010):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDDLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDDLParser.FORMAT, 0)

        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Dataset_storage_formatContext,0)


        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_schemaContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_dataset_storage_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format_clause" ):
                listener.enterDataset_storage_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format_clause" ):
                listener.exitDataset_storage_format_clause(self)




    def dataset_storage_format_clause(self):

        localctx = TeradataSQLDDLParser.Dataset_storage_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_dataset_storage_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8607
            self.match(TeradataSQLDDLParser.STORAGE)
            self.state = 8608
            self.match(TeradataSQLDDLParser.FORMAT)
            self.state = 8609
            self.dataset_storage_format()
            self.state = 8611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1115,self._ctx)
            if la_ == 1:
                self.state = 8610
                self.with_schema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVRO(self):
            return self.getToken(TeradataSQLDDLParser.AVRO, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDDLParser.CSV, 0)

        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_dataset_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format" ):
                listener.enterDataset_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format" ):
                listener.exitDataset_storage_format(self)




    def dataset_storage_format(self):

        localctx = TeradataSQLDDLParser.Dataset_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_dataset_storage_format)
        try:
            self.state = 8618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8613
                self.match(TeradataSQLDDLParser.AVRO)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8614
                self.match(TeradataSQLDDLParser.CSV)
                self.state = 8616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1116,self._ctx)
                if la_ == 1:
                    self.state = 8615
                    self.latin_unicode_character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Table_nameContext

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.SCHEMA, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_schema" ):
                listener.enterWith_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_schema" ):
                listener.exitWith_schema(self)




    def with_schema(self):

        localctx = TeradataSQLDDLParser.With_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_with_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8620
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 8621
            self.match(TeradataSQLDDLParser.SCHEMA)
            self.state = 8622
            localctx.schema_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_time_zone" ):
                listener.enterWith_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_time_zone" ):
                listener.exitWith_time_zone(self)




    def with_time_zone(self):

        localctx = TeradataSQLDDLParser.With_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_with_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8624
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 8625
            self.match(TeradataSQLDDLParser.TIME)
            self.state = 8626
            self.match(TeradataSQLDDLParser.ZONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hex_byte_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hex_byte_literalContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hex_char_string_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def hex_integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hex_integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Float_literalContext,0)


        def date_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Date_literalContext,0)


        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Time_literalContext,0)


        def timestamp_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Timestamp_literalContext,0)


        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_literalContext,0)


        def period_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Period_literalContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = TeradataSQLDDLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_literal)
        try:
            self.state = 8641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8628
                self.hex_byte_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8629
                self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8630
                self.unicode_char_string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8631
                self.hex_char_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8632
                self.integer_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8633
                self.hex_integer_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8634
                self.float_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8635
                self.date_literal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8636
                self.time_literal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8637
                self.timestamp_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8638
                self.interval_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8639
                self.period_literal()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8640
                self.match(TeradataSQLDDLParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_byte_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_BYTE_LITERAL(self):
            return self.getToken(TeradataSQLDDLParser.HEX_BYTE_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hex_byte_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_byte_literal" ):
                listener.enterHex_byte_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_byte_literal" ):
                listener.exitHex_byte_literal(self)




    def hex_byte_literal(self):

        localctx = TeradataSQLDDLParser.Hex_byte_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_hex_byte_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8643
            self.match(TeradataSQLDDLParser.HEX_BYTE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_prefixContext,0)


        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDDLParser.CHAR_STRING, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_string_literal" ):
                listener.enterChar_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_string_literal" ):
                listener.exitChar_string_literal(self)




    def char_string_literal(self):

        localctx = TeradataSQLDDLParser.Char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 8645
                self.character_set_prefix()


            self.state = 8649 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 8648
                    self.match(TeradataSQLDDLParser.CHAR_STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 8651 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_STRING_LEADING(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE_STRING_LEADING, 0)

        def UESCAPE(self):
            return self.getToken(TeradataSQLDDLParser.UESCAPE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDDLParser.CHAR_STRING, i)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unicode_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_char_string_literal" ):
                listener.enterUnicode_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_char_string_literal" ):
                listener.exitUnicode_char_string_literal(self)




    def unicode_char_string_literal(self):

        localctx = TeradataSQLDDLParser.Unicode_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_unicode_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 8653
                self.character_set_prefix()


            self.state = 8656
            self.match(TeradataSQLDDLParser.UNICODE_STRING_LEADING)
            self.state = 8660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1203:
                self.state = 8657
                self.match(TeradataSQLDDLParser.CHAR_STRING)
                self.state = 8662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8663
            self.match(TeradataSQLDDLParser.UESCAPE)
            self.state = 8664
            self.match(TeradataSQLDDLParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(TeradataSQLDDLParser.HEX_STRING, 0)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hex_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_char_string_literal" ):
                listener.enterHex_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_char_string_literal" ):
                listener.exitHex_char_string_literal(self)




    def hex_char_string_literal(self):

        localctx = TeradataSQLDDLParser.Hex_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_hex_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 8666
                self.character_set_prefix()


            self.state = 8669
            self.match(TeradataSQLDDLParser.HEX_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDDLParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = TeradataSQLDDLParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8671
            self.match(TeradataSQLDDLParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(TeradataSQLDDLParser.HEX_INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hex_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_integer_literal" ):
                listener.enterHex_integer_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_integer_literal" ):
                listener.exitHex_integer_literal(self)




    def hex_integer_literal(self):

        localctx = TeradataSQLDDLParser.Hex_integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_hex_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8673
            self.match(TeradataSQLDDLParser.HEX_INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(TeradataSQLDDLParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)




    def float_literal(self):

        localctx = TeradataSQLDDLParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8675
            self.match(TeradataSQLDDLParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDDLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDDLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.CS_GRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_character_set_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_prefix" ):
                listener.enterCharacter_set_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_prefix" ):
                listener.exitCharacter_set_prefix(self)




    def character_set_prefix(self):

        localctx = TeradataSQLDDLParser.Character_set_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_character_set_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8677
            _la = self._input.LA(1)
            if not(((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDDLParser.DATE_STRING, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDDLParser.DATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_date_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_literal" ):
                listener.enterDate_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_literal" ):
                listener.exitDate_literal(self)




    def date_literal(self):

        localctx = TeradataSQLDDLParser.Date_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_date_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 8679
                self.match(TeradataSQLDDLParser.DATE)


            self.state = 8682
            self.match(TeradataSQLDDLParser.DATE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDDLParser.TIME_STRING, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_time_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_literal" ):
                listener.enterTime_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_literal" ):
                listener.exitTime_literal(self)




    def time_literal(self):

        localctx = TeradataSQLDDLParser.Time_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_time_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 8684
                self.match(TeradataSQLDDLParser.TIME)


            self.state = 8687
            self.match(TeradataSQLDDLParser.TIME_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timestamp_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP_STRING, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_timestamp_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp_literal" ):
                listener.enterTimestamp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp_literal" ):
                listener.exitTimestamp_literal(self)




    def timestamp_literal(self):

        localctx = TeradataSQLDDLParser.Timestamp_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_timestamp_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 8689
                self.match(TeradataSQLDDLParser.TIMESTAMP)


            self.state = 8692
            self.match(TeradataSQLDDLParser.TIMESTAMP_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.INTERVAL, 0)

        def interval_qualifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_qualifierContext,0)


        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDDLParser.CHAR_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDDLParser.TIME_STRING, 0)

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDDLParser.DATE_STRING, 0)

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMP_STRING, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_interval_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_literal" ):
                listener.enterInterval_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_literal" ):
                listener.exitInterval_literal(self)




    def interval_literal(self):

        localctx = TeradataSQLDDLParser.Interval_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_interval_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8694
            self.match(TeradataSQLDDLParser.INTERVAL)
            self.state = 8696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 8695
                self.match(TeradataSQLDDLParser.MINUS_SIGN)


            self.state = 8698
            _la = self._input.LA(1)
            if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 39) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8699
            self.interval_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TeradataSQLDDLParser.YEAR, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDDLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDDLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDDLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDDLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDDLParser.SECOND, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_interval_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_qualifier" ):
                listener.enterInterval_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_qualifier" ):
                listener.exitInterval_qualifier(self)




    def interval_qualifier(self):

        localctx = TeradataSQLDDLParser.Interval_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_interval_qualifier)
        try:
            self.state = 8728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8701
                self.match(TeradataSQLDDLParser.YEAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8702
                self.match(TeradataSQLDDLParser.YEAR)
                self.state = 8703
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8704
                self.match(TeradataSQLDDLParser.MONTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8705
                self.match(TeradataSQLDDLParser.MONTH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8706
                self.match(TeradataSQLDDLParser.DAY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8707
                self.match(TeradataSQLDDLParser.DAY)
                self.state = 8708
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8709
                self.match(TeradataSQLDDLParser.HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8710
                self.match(TeradataSQLDDLParser.DAY)
                self.state = 8711
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8712
                self.match(TeradataSQLDDLParser.MINUTE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8713
                self.match(TeradataSQLDDLParser.DAY)
                self.state = 8714
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8715
                self.match(TeradataSQLDDLParser.SECOND)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8716
                self.match(TeradataSQLDDLParser.HOUR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8717
                self.match(TeradataSQLDDLParser.HOUR)
                self.state = 8718
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8719
                self.match(TeradataSQLDDLParser.MINUTE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8720
                self.match(TeradataSQLDDLParser.HOUR)
                self.state = 8721
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8722
                self.match(TeradataSQLDDLParser.SECOND)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8723
                self.match(TeradataSQLDDLParser.MINUTE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8724
                self.match(TeradataSQLDDLParser.MINUTE)
                self.state = 8725
                self.match(TeradataSQLDDLParser.TO)
                self.state = 8726
                self.match(TeradataSQLDDLParser.SECOND)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8727
                self.match(TeradataSQLDDLParser.SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def PERIOD_STRING(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_period_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_literal" ):
                listener.enterPeriod_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_literal" ):
                listener.exitPeriod_literal(self)




    def period_literal(self):

        localctx = TeradataSQLDDLParser.Period_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_period_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8730
            self.match(TeradataSQLDDLParser.PERIOD)
            self.state = 8731
            self.match(TeradataSQLDDLParser.PERIOD_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unqualified_table_name = None # Unqualified_nameContext

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)

        def unqualified_column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_column_nameContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = TeradataSQLDDLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_column_name)
        try:
            self.state = 8744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8733
                self.database_name()
                self.state = 8734
                self.match(TeradataSQLDDLParser.DOT_)
                self.state = 8735
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 8736
                self.match(TeradataSQLDDLParser.DOT_)
                self.state = 8737
                self.unqualified_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8739
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 8740
                self.match(TeradataSQLDDLParser.DOT_)
                self.state = 8741
                self.unqualified_column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8743
                self.unqualified_column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def SAMPLEID(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLEID, 0)

        def ROWID(self):
            return self.getToken(TeradataSQLDDLParser.ROWID, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unqualified_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_column_name" ):
                listener.enterUnqualified_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_column_name" ):
                listener.exitUnqualified_column_name(self)




    def unqualified_column_name(self):

        localctx = TeradataSQLDDLParser.Unqualified_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_unqualified_column_name)
        try:
            self.state = 8750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8746
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8747
                self.nonreserved_word()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8748
                self.match(TeradataSQLDDLParser.SAMPLEID)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8749
                self.match(TeradataSQLDDLParser.ROWID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = TeradataSQLDDLParser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_unqualified_name)
        try:
            self.state = 8754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8752
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8753
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = TeradataSQLDDLParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1132,self._ctx)
            if la_ == 1:
                self.state = 8756
                self.database_name()
                self.state = 8757
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 8763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8761
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8762
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TeradataSQLDDLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1134,self._ctx)
            if la_ == 1:
                self.state = 8765
                self.database_name()
                self.state = 8766
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 8772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8770
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8771
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = TeradataSQLDDLParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_procedure_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1136,self._ctx)
            if la_ == 1:
                self.state = 8774
                self.database_name()
                self.state = 8775
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 8781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8779
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8780
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = TeradataSQLDDLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1138,self._ctx)
            if la_ == 1:
                self.state = 8783
                self.database_name()
                self.state = 8784
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 8790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8788
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8789
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_macro_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_name" ):
                listener.enterMacro_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_name" ):
                listener.exitMacro_name(self)




    def macro_name(self):

        localctx = TeradataSQLDDLParser.Macro_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_macro_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1140,self._ctx)
            if la_ == 1:
                self.state = 8792
                self.database_name()
                self.state = 8793
                self.match(TeradataSQLDDLParser.DOT_)


            self.state = 8799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8797
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8798
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = TeradataSQLDDLParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_database_name)
        try:
            self.state = 8803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8801
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8802
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_user_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_name" ):
                listener.enterUser_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_name" ):
                listener.exitUser_name(self)




    def user_name(self):

        localctx = TeradataSQLDDLParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_user_name)
        try:
            self.state = 8807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8805
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8806
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDDLParser.ADMIN, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = TeradataSQLDDLParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_role_name)
        try:
            self.state = 8812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8809
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8810
                self.match(TeradataSQLDDLParser.ADMIN)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8811
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_profile_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_name" ):
                listener.enterProfile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_name" ):
                listener.exitProfile_name(self)




    def profile_name(self):

        localctx = TeradataSQLDDLParser.Profile_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_profile_name)
        try:
            self.state = 8816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8814
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8815
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_name" ):
                listener.enterAlias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_name" ):
                listener.exitAlias_name(self)




    def alias_name(self):

        localctx = TeradataSQLDDLParser.Alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_alias_name)
        try:
            self.state = 8820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8818
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8819
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = TeradataSQLDDLParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_variable_name)
        try:
            self.state = 8824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8822
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8823
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = TeradataSQLDDLParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_parameter_name)
        try:
            self.state = 8828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8826
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8827
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = TeradataSQLDDLParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_label_name)
        try:
            self.state = 8832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8830
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8831
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_condition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_name" ):
                listener.enterCondition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_name" ):
                listener.exitCondition_name(self)




    def condition_name(self):

        localctx = TeradataSQLDDLParser.Condition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_condition_name)
        try:
            self.state = 8836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8834
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8835
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TeradataSQLDDLParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_cursor_name)
        try:
            self.state = 8840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8838
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8839
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = TeradataSQLDDLParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_statement_name)
        try:
            self.state = 8844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8842
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8843
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statistics_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_statistics_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatistics_name" ):
                listener.enterStatistics_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatistics_name" ):
                listener.exitStatistics_name(self)




    def statistics_name(self):

        localctx = TeradataSQLDDLParser.Statistics_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_statistics_name)
        try:
            self.state = 8848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8846
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8847
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_udt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_name" ):
                listener.enterUdt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_name" ):
                listener.exitUdt_name(self)




    def udt_name(self):

        localctx = TeradataSQLDDLParser.Udt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_udt_name)
        try:
            self.state = 8852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8850
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8851
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = TeradataSQLDDLParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_attribute_name)
        try:
            self.state = 8856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8854
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8855
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDDLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = TeradataSQLDDLParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_method_name)
        try:
            self.state = 8860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8858
                self.match(TeradataSQLDDLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8859
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anchor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_SECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_HOUR, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDDLParser.DAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_END, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_END, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDDLParser.QUARTER_END, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDDLParser.YEAR_END, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDDLParser.MONDAY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDDLParser.TUESDAY, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDDLParser.WEDNESDAY, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDDLParser.THURSDAY, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDDLParser.FRIDAY, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDDLParser.SATURDAY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDDLParser.SUNDAY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_anchor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor_name" ):
                listener.enterAnchor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor_name" ):
                listener.exitAnchor_name(self)




    def anchor_name(self):

        localctx = TeradataSQLDDLParser.Anchor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_anchor_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8862
            _la = self._input.LA(1)
            if not(_la==106 or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 15) != 0) or _la==678 or ((((_la - 774)) & ~0x3f) == 0 and ((1 << (_la - 774)) & 49) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 2199023255555) != 0) or ((((_la - 949)) & ~0x3f) == 0 and ((1 << (_la - 949)) & 1152921573326323713) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & 103079215111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSIONS(self):
            return self.getToken(TeradataSQLDDLParser.ABORTSESSIONS, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDDLParser.ABSENT, 0)

        def ACCESS(self):
            return self.getToken(TeradataSQLDDLParser.ACCESS, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDDLParser.ACCORDING, 0)

        def ACCUMULATE(self):
            return self.getToken(TeradataSQLDDLParser.ACCUMULATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLDDLParser.AG, 0)

        def AGGGEOMINTERSECTION(self):
            return self.getToken(TeradataSQLDDLParser.AGGGEOMINTERSECTION, 0)

        def AGGGEOMUNION(self):
            return self.getToken(TeradataSQLDDLParser.AGGGEOMUNION, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLDDLParser.ALLDBQL, 0)

        def ALLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.ALLOCATE, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDDLParser.ALLOCATION, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLDDLParser.ALLOW, 0)

        def ALLPARAMS(self):
            return self.getToken(TeradataSQLDDLParser.ALLPARAMS, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLDDLParser.ALLTDWM, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLDDLParser.ALWAYS, 0)

        def AMPCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.AMPCOUNT, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDDLParser.ANALYSIS, 0)

        def ANCHOR(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_HOUR, 0)

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR_SECOND, 0)

        def APPLNAME(self):
            return self.getToken(TeradataSQLDDLParser.APPLNAME, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLDDLParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_ADD, 0)

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_AGG, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_AVG, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_COMPARE, 0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_CONCAT, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_DIV, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_EQ, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GE, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GET, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_LE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_LT, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MIN, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MOD, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MUL, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_NE, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_SUB, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_SUM, 0)

        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_UPDATE_STRIDE, 0)

        def ASCII(self):
            return self.getToken(TeradataSQLDDLParser.ASCII, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLDDLParser.ASSIGNMENT, 0)

        def ATTR(self):
            return self.getToken(TeradataSQLDDLParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTES, 0)

        def ATTRIBUTION(self):
            return self.getToken(TeradataSQLDDLParser.ATTRIBUTION, 0)

        def ATTRS(self):
            return self.getToken(TeradataSQLDDLParser.ATTRS, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDDLParser.AUTH, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDDLParser.AUTO, 0)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLDDLParser.AUTOTEMP, 0)

        def AVRO(self):
            return self.getToken(TeradataSQLDDLParser.AVRO, 0)

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.BIT_LENGTH, 0)

        def BITAND(self):
            return self.getToken(TeradataSQLDDLParser.BITAND, 0)

        def BITNOT(self):
            return self.getToken(TeradataSQLDDLParser.BITNOT, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDDLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDDLParser.BITXOR, 0)

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLDDLParser.BLOCKCOMPRESSION, 0)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLDDLParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLDDLParser.BLOCKCOMPRESSIONLEVEL, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDDLParser.BOM, 0)

        def BOTTOM(self):
            return self.getToken(TeradataSQLDDLParser.BOTTOM, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDDLParser.BSON, 0)

        def C(self):
            return self.getToken(TeradataSQLDDLParser.C, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.CALENDAR, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDDLParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TeradataSQLDDLParser.CALLER, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDDLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDDLParser.CAMSET_L, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLDDLParser.CAPTURE, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDDLParser.CARDINALITY, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDDLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDDLParser.CEILING, 0)

        def CHANGERATE(self):
            return self.getToken(TeradataSQLDDLParser.CHANGERATE, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTERISTICS, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDDLParser.CHARSET, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLDDLParser.CHARSET_COLL, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDDLParser.CHECKSUM, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDDLParser.CHR, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDDLParser.CLASS_ORIGIN, 0)

        def CLICKLAG(self):
            return self.getToken(TeradataSQLDDLParser.CLICKLAG, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLDDLParser.CLIENT, 0)

        def CNT(self):
            return self.getToken(TeradataSQLDDLParser.CNT, 0)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.COLOCATE, 0)

        def COLUMNMETA(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNMETA, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNS, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNSPERJOININDEX, 0)

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLDDLParser.COMMAND_FUNCTION_CODE, 0)

        def COMPARISON(self):
            return self.getToken(TeradataSQLDDLParser.COMPARISON, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLDDLParser.COMPILE, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDDLParser.CONCAT, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDDLParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.CONDITION_NUMBER, 0)

        def CONTAINED(self):
            return self.getToken(TeradataSQLDDLParser.CONTAINED, 0)

        def CONTAINEDTOKEN(self):
            return self.getToken(TeradataSQLDDLParser.CONTAINEDTOKEN, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDDLParser.CONTENT, 0)

        def CONTIGUOUS(self):
            return self.getToken(TeradataSQLDDLParser.CONTIGUOUS, 0)

        def COST(self):
            return self.getToken(TeradataSQLDDLParser.COST, 0)

        def COSTS(self):
            return self.getToken(TeradataSQLDDLParser.COSTS, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDDLParser.COUNTSET, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDDLParser.CPP, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLDDLParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLDDLParser.CPUTIMENORM, 0)

        def CREATEDATASET(self):
            return self.getToken(TeradataSQLDDLParser.CREATEDATASET, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLDDLParser.CREATOR, 0)

        def CUME_DIST(self):
            return self.getToken(TeradataSQLDDLParser.CUME_DIST, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDDLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDDLParser.CURTIME, 0)

        def DATA(self):
            return self.getToken(TeradataSQLDDLParser.DATA, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDDLParser.DATASET, 0)

        def DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.DAY_OF_CALENDAR, 0)

        def DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAY_OF_MONTH, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDDLParser.DAY_OF_WEEK, 0)

        def DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.DAY_OF_YEAR, 0)

        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def DBA(self):
            return self.getToken(TeradataSQLDDLParser.DBA, 0)

        def DBC(self):
            return self.getToken(TeradataSQLDDLParser.DBC, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLDDLParser.DEBUG, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDDLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDDLParser.DECAMSET_L, 0)

        def DECODE(self):
            return self.getToken(TeradataSQLDDLParser.DECODE, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.DECOMPRESS, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDDLParser.DEFINER, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDDLParser.DELIMITER, 0)

        def DELTA_T(self):
            return self.getToken(TeradataSQLDDLParser.DELTA_T, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDDLParser.DEMOGRAPHICS, 0)

        def DENIALS(self):
            return self.getToken(TeradataSQLDDLParser.DENIALS, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDDLParser.DENSE, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDDLParser.DENSE_RANK, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataSQLDDLParser.DESCRIBE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLDDLParser.DETAILED, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLDDLParser.DIAGNOSTICS, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLDDLParser.DIGITS, 0)

        def DIMENSION(self):
            return self.getToken(TeradataSQLDDLParser.DIMENSION, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDDLParser.DOCUMENT, 0)

        def DOT(self):
            return self.getToken(TeradataSQLDDLParser.DOT, 0)

        def DOWN(self):
            return self.getToken(TeradataSQLDDLParser.DOWN, 0)

        def DR(self):
            return self.getToken(TeradataSQLDDLParser.DR, 0)

        def DUPCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.DUPCOUNT, 0)

        def DUPCOUNTCUM(self):
            return self.getToken(TeradataSQLDDLParser.DUPCOUNTCUM, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLDDLParser.EBCDIC, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDDLParser.EDITDISTANCE, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLDDLParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLDDLParser.ELAPSEDTIME, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDDLParser.ELEMENT, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLDDLParser.ELZS_H, 0)

        def EMITNULL(self):
            return self.getToken(TeradataSQLDDLParser.EMITNULL, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDDLParser.EMPTY, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDDLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDDLParser.EMPTY_CLOB, 0)

        def ENCODE(self):
            return self.getToken(TeradataSQLDDLParser.ENCODE, 0)

        def ENCODING(self):
            return self.getToken(TeradataSQLDDLParser.ENCODING, 0)

        def ENCRYPT(self):
            return self.getToken(TeradataSQLDDLParser.ENCRYPT, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDDLParser.ERRORS, 0)

        def ERRORTBL(self):
            return self.getToken(TeradataSQLDDLParser.ERRORTBL, 0)

        def EVENTCOLUMN(self):
            return self.getToken(TeradataSQLDDLParser.EVENTCOLUMN, 0)

        def EXCEPTION(self):
            return self.getToken(TeradataSQLDDLParser.EXCEPTION, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDDLParser.EXCL, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDDLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDDLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDDLParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLDDLParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDDLParser.EXPORT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLDDLParser.EXPORTWIDTH, 0)

        def FALSE(self):
            return self.getToken(TeradataSQLDDLParser.FALSE, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLDDLParser.FEATUREINFO, 0)

        def FILE(self):
            return self.getToken(TeradataSQLDDLParser.FILE, 0)

        def FILL(self):
            return self.getToken(TeradataSQLDDLParser.FILL, 0)

        def FILTER(self):
            return self.getToken(TeradataSQLDDLParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLDDLParser.FINAL, 0)

        def FIRST_NOTNULL(self):
            return self.getToken(TeradataSQLDDLParser.FIRST_NOTNULL, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDDLParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDDLParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataSQLDDLParser.FOLLOWING, 0)

        def FOREIGNFUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGNFUNCTION, 0)

        def FORTOKEN(self):
            return self.getToken(TeradataSQLDDLParser.FORTOKEN, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDDLParser.FRIDAY, 0)

        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDDLParser.FROM_BYTES, 0)

        def FUNCTIONPARAMETER(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTIONPARAMETER, 0)

        def G(self):
            return self.getToken(TeradataSQLDDLParser.G, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDDLParser.GETBIT, 0)

        def GETPSFVERSION(self):
            return self.getToken(TeradataSQLDDLParser.GETPSFVERSION, 0)

        def GETQUERYBAND(self):
            return self.getToken(TeradataSQLDDLParser.GETQUERYBAND, 0)

        def GETQUERYBANDVALUE(self):
            return self.getToken(TeradataSQLDDLParser.GETQUERYBANDVALUE, 0)

        def GETTIMEZONEDISPLACEMENT(self):
            return self.getToken(TeradataSQLDDLParser.GETTIMEZONEDISPLACEMENT, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLDDLParser.GLOBAL, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def GREATEST(self):
            return self.getToken(TeradataSQLDDLParser.GREATEST, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDDLParser.HIGH, 0)

        def HOST(self):
            return self.getToken(TeradataSQLDDLParser.HOST, 0)

        def IDENTIFYDATABASE(self):
            return self.getToken(TeradataSQLDDLParser.IDENTIFYDATABASE, 0)

        def IDENTIFYSESSION(self):
            return self.getToken(TeradataSQLDDLParser.IDENTIFYSESSION, 0)

        def IDENTIFYTABLE(self):
            return self.getToken(TeradataSQLDDLParser.IDENTIFYTABLE, 0)

        def IDENTIFYUSER(self):
            return self.getToken(TeradataSQLDDLParser.IDENTIFYUSER, 0)

        def IFP(self):
            return self.getToken(TeradataSQLDDLParser.IFP, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDDLParser.IGNORE, 0)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDDLParser.IMMEDIATELY, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLDDLParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(TeradataSQLDDLParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDDLParser.INCREMENTAL, 0)

        def INDENT(self):
            return self.getToken(TeradataSQLDDLParser.INDENT, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLDDLParser.INDEXESPERTABLE, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLDDLParser.INDEXMAINTMODE, 0)

        def INIT(self):
            return self.getToken(TeradataSQLDDLParser.INIT, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDDLParser.INITCAP, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLDDLParser.INLINE, 0)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLDDLParser.INSTANTIABLE, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDDLParser.INSTR, 0)

        def INTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDDLParser.INVOKER, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.IOCOUNT, 0)

        def IPARTITION(self):
            return self.getToken(TeradataSQLDDLParser.IPARTITION, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATED, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLDDLParser.ISOLATION, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDDLParser.JAVA, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLDDLParser.JIS_COLL, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDDLParser.JSON_AGG, 0)

        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDDLParser.JSON_COMPOSE, 0)

        def K(self):
            return self.getToken(TeradataSQLDDLParser.K, 0)

        def KANJI1(self):
            return self.getToken(TeradataSQLDDLParser.KANJI1, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDDLParser.KANJISJIS, 0)

        def KBYTE(self):
            return self.getToken(TeradataSQLDDLParser.KBYTE, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLDDLParser.KBYTES, 0)

        def KEEP(self):
            return self.getToken(TeradataSQLDDLParser.KEEP, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLDDLParser.KILOBYTES, 0)

        def LAG(self):
            return self.getToken(TeradataSQLDDLParser.LAG, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDDLParser.LAST, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDDLParser.LAST_DAY, 0)

        def LAST_NOTNULL(self):
            return self.getToken(TeradataSQLDDLParser.LAST_NOTNULL, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDDLParser.LAST_VALUE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)

        def LDIFF(self):
            return self.getToken(TeradataSQLDDLParser.LDIFF, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDDLParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDDLParser.LEAST, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.LENGTH, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLDDLParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TeradataSQLDDLParser.LIST, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDDLParser.LOAD, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDDLParser.LOCATE, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLDDLParser.LOCKEDUSEREXPIRE, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDDLParser.LOW, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDDLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDDLParser.LTRIM, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDDLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDDLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDDLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDDLParser.LZDECOMP_L, 0)

        def M(self):
            return self.getToken(TeradataSQLDDLParser.M, 0)

        def MAD(self):
            return self.getToken(TeradataSQLDDLParser.MAD, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLDDLParser.MANUAL, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLDDLParser.MAPPING, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDDLParser.MATCHED, 0)

        def MAX_CHOOSE(self):
            return self.getToken(TeradataSQLDDLParser.MAX_CHOOSE, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLDDLParser.MAXCHAR, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLDDLParser.MAXINTERVALS, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLDDLParser.MAXLOGONATTEMPTS, 0)

        def MAXVALUE(self):
            return self.getToken(TeradataSQLDDLParser.MAXVALUE, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLDDLParser.MAXVALUELENGTH, 0)

        def MEDIAN(self):
            return self.getToken(TeradataSQLDDLParser.MEDIAN, 0)

        def MEDIUM(self):
            return self.getToken(TeradataSQLDDLParser.MEDIUM, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDDLParser.MEETS, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLDDLParser.MEMBER, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLDDLParser.MERGEBLOCKRATIO, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLDDLParser.MESSAGE_TEXT, 0)

        def MIN_CHOOSE(self):
            return self.getToken(TeradataSQLDDLParser.MIN_CHOOSE, 0)

        def MINCHAR(self):
            return self.getToken(TeradataSQLDDLParser.MINCHAR, 0)

        def MINVALUE(self):
            return self.getToken(TeradataSQLDDLParser.MINVALUE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDDLParser.MODIFIED, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDDLParser.MONDAY, 0)

        def MONITORQUERYBAND(self):
            return self.getToken(TeradataSQLDDLParser.MONITORQUERYBAND, 0)

        def MONITORSESSIONRATE(self):
            return self.getToken(TeradataSQLDDLParser.MONITORSESSIONRATE, 0)

        def MONITORVERSION(self):
            return self.getToken(TeradataSQLDDLParser.MONITORVERSION, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_END, 0)

        def MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_OF_CALENDAR, 0)

        def MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_OF_QUARTER, 0)

        def MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.MONTH_OF_YEAR, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.MONTHNUMBER_OF_YEAR, 0)

        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDDLParser.MONTHS_BETWEEN, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLDDLParser.MORE_, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLDDLParser.MULTINATIONAL, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDDLParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDDLParser.NAMESPACE, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLDDLParser.NEVER, 0)

        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDDLParser.NEXT_DAY, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDDLParser.NGRAM, 0)

        def NIL(self):
            return self.getToken(TeradataSQLDDLParser.NIL, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDDLParser.NODDLTEXT, 0)

        def NODE(self):
            return self.getToken(TeradataSQLDDLParser.NODE, 0)

        def NONOPTCOST(self):
            return self.getToken(TeradataSQLDDLParser.NONOPTCOST, 0)

        def NONOPTINIT(self):
            return self.getToken(TeradataSQLDDLParser.NONOPTINIT, 0)

        def NONSEQUENCED(self):
            return self.getToken(TeradataSQLDDLParser.NONSEQUENCED, 0)

        def NORIGHT(self):
            return self.getToken(TeradataSQLDDLParser.NORIGHT, 0)

        def NOSEXTRACTVARFROMPATH(self):
            return self.getToken(TeradataSQLDDLParser.NOSEXTRACTVARFROMPATH, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLDDLParser.NOTATION, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDDLParser.NOW, 0)

        def NPATH(self):
            return self.getToken(TeradataSQLDDLParser.NPATH, 0)

        def NTH(self):
            return self.getToken(TeradataSQLDDLParser.NTH, 0)

        def NULLS(self):
            return self.getToken(TeradataSQLDDLParser.NULLS, 0)

        def NUMFPFNS(self):
            return self.getToken(TeradataSQLDDLParser.NUMFPFNS, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.NUMTOYMINTERVAL, 0)

        def NVL(self):
            return self.getToken(TeradataSQLDDLParser.NVL, 0)

        def NVL2(self):
            return self.getToken(TeradataSQLDDLParser.NVL2, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDDLParser.NVP, 0)

        def OA(self):
            return self.getToken(TeradataSQLDDLParser.OA, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDDLParser.OADD_MONTHS, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.OCOUNT, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDDLParser.ODELETE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDDLParser.OEXISTS, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDDLParser.OEXTEND, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDDLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDDLParser.OLAST, 0)

        def OLD_NEW_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.OLD_NEW_TABLE, 0)

        def OLIMIT(self):
            return self.getToken(TeradataSQLDDLParser.OLIMIT, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDDLParser.ONEXT, 0)

        def ONLINE(self):
            return self.getToken(TeradataSQLDDLParser.ONLINE, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDDLParser.OPRIOR, 0)

        def OPTIONS(self):
            return self.getToken(TeradataSQLDDLParser.OPTIONS, 0)

        def ORDERBYVALUES(self):
            return self.getToken(TeradataSQLDDLParser.ORDERBYVALUES, 0)

        def ORDERED_ANALYTIC(self):
            return self.getToken(TeradataSQLDDLParser.ORDERED_ANALYTIC, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDDLParser.ORDINALITY, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDDLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDDLParser.OTRANSLATE, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDDLParser.OTRIM, 0)

        def OVERLAYS(self):
            return self.getToken(TeradataSQLDDLParser.OVERLAYS, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDDLParser.OWNER, 0)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDDLParser.P_INTERSECT, 0)

        def P_NORMALIZE(self):
            return self.getToken(TeradataSQLDDLParser.P_NORMALIZE, 0)

        def PARAMID(self):
            return self.getToken(TeradataSQLDDLParser.PARAMID, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLDDLParser.PARAMINFO, 0)

        def PARENT(self):
            return self.getToken(TeradataSQLDDLParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def PARTITION_L(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION_L, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLDDLParser.PARTITIONED, 0)

        def PARTITIONNAMES(self):
            return self.getToken(TeradataSQLDDLParser.PARTITIONNAMES, 0)

        def PASS(self):
            return self.getToken(TeradataSQLDDLParser.PASS, 0)

        def PASSING(self):
            return self.getToken(TeradataSQLDDLParser.PASSING, 0)

        def PATH_GENERATOR(self):
            return self.getToken(TeradataSQLDDLParser.PATH_GENERATOR, 0)

        def PATH_START(self):
            return self.getToken(TeradataSQLDDLParser.PATH_START, 0)

        def PATH_SUMMARIZER(self):
            return self.getToken(TeradataSQLDDLParser.PATH_SUMMARIZER, 0)

        def PATTERN(self):
            return self.getToken(TeradataSQLDDLParser.PATTERN, 0)

        def PERCENTILE(self):
            return self.getToken(TeradataSQLDDLParser.PERCENTILE, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDDLParser.PERCENTILE_DISC, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def PIVOT(self):
            return self.getToken(TeradataSQLDDLParser.PIVOT, 0)

        def PORTION(self):
            return self.getToken(TeradataSQLDDLParser.PORTION, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDDLParser.POWER, 0)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDDLParser.PRECEDES, 0)

        def PRECEDING(self):
            return self.getToken(TeradataSQLDDLParser.PRECEDING, 0)

        def PREFIX(self):
            return self.getToken(TeradataSQLDDLParser.PREFIX, 0)

        def PRINT(self):
            return self.getToken(TeradataSQLDDLParser.PRINT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDDLParser.PRIOR, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLDDLParser.PROTECTED, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDDLParser.QUARTER_END, 0)

        def QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.QUARTER_OF_CALENDAR, 0)

        def QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.QUARTER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.QUARTERNUMBER_OF_YEAR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDDLParser.QUERY, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDDLParser.QUERY_BAND, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDDLParser.QUOTECHAR, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDDLParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDDLParser.RANGE, 0)

        def RANGE_L(self):
            return self.getToken(TeradataSQLDDLParser.RANGE_L, 0)

        def RAPIDFIRE(self):
            return self.getToken(TeradataSQLDDLParser.RAPIDFIRE, 0)

        def RDIFF(self):
            return self.getToken(TeradataSQLDDLParser.RDIFF, 0)

        def READ(self):
            return self.getToken(TeradataSQLDDLParser.READ, 0)

        def RECALC(self):
            return self.getToken(TeradataSQLDDLParser.RECALC, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_INSTR, 0)

        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_REPLACE, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_SUBSTR, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDDLParser.REPLACEMENT, 0)

        def RESET(self):
            return self.getToken(TeradataSQLDDLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDDLParser.RESPECT, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLDDLParser.RESTRICTWORDS, 0)

        def RETAIN(self):
            return self.getToken(TeradataSQLDDLParser.RETAIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLDDLParser.RETURNED_SQLSTATE, 0)

        def RETURNING(self):
            return self.getToken(TeradataSQLDDLParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLDDLParser.REUSE, 0)

        def ROOT(self):
            return self.getToken(TeradataSQLDDLParser.ROOT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDDLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDDLParser.ROTATERIGHT, 0)

        def ROUND(self):
            return self.getToken(TeradataSQLDDLParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLDDLParser.ROW_COUNT, 0)

        def ROWIDGEN(self):
            return self.getToken(TeradataSQLDDLParser.ROWIDGEN, 0)

        def ROWIDGEN2(self):
            return self.getToken(TeradataSQLDDLParser.ROWIDGEN2, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDDLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDDLParser.RTRIM, 0)

        def RU(self):
            return self.getToken(TeradataSQLDDLParser.RU, 0)

        def RULES(self):
            return self.getToken(TeradataSQLDDLParser.RULES, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLDDLParser.RULESET, 0)

        def SAMPLES(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLES, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDDLParser.SATURDAY, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.SCHEMA, 0)

        def SCRIPT(self):
            return self.getToken(TeradataSQLDDLParser.SCRIPT, 0)

        def SCRIPT_COMMAND(self):
            return self.getToken(TeradataSQLDDLParser.SCRIPT_COMMAND, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLDDLParser.SEARCHSPACE, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLDDLParser.SEARCHUIFDBPATH, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDDLParser.SECURITY, 0)

        def SEED(self):
            return self.getToken(TeradataSQLDDLParser.SEED, 0)

        def SELF(self):
            return self.getToken(TeradataSQLDDLParser.SELF, 0)

        def SEQ(self):
            return self.getToken(TeradataSQLDDLParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCE, 0)

        def SEQUENCED(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCED, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLDDLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)

        def SESSIONIZE(self):
            return self.getToken(TeradataSQLDDLParser.SESSIONIZE, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDDLParser.SETBIT, 0)

        def SETRESOURCERATE(self):
            return self.getToken(TeradataSQLDDLParser.SETRESOURCERATE, 0)

        def SETSESSIONACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.SETSESSIONACCOUNT, 0)

        def SETSESSIONRATE(self):
            return self.getToken(TeradataSQLDDLParser.SETSESSIONRATE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDDLParser.SHARE, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDDLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDDLParser.SHIFTRIGHT, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDDLParser.SIGN, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDDLParser.SIZE, 0)

        def SNAPPY_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.SNAPPY_COMPRESS, 0)

        def SNAPPY_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.SNAPPY_DECOMPRESS, 0)

        def SOURCE(self):
            return self.getToken(TeradataSQLDDLParser.SOURCE, 0)

        def SPARSE(self):
            return self.getToken(TeradataSQLDDLParser.SPARSE, 0)

        def SPECCHAR(self):
            return self.getToken(TeradataSQLDDLParser.SPECCHAR, 0)

        def SPL(self):
            return self.getToken(TeradataSQLDDLParser.SPL, 0)

        def SQLSTATE(self):
            return self.getToken(TeradataSQLDDLParser.SQLSTATE, 0)

        def SR(self):
            return self.getToken(TeradataSQLDDLParser.SR, 0)

        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDDLParser.ST_GEOMETRY, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDDLParser.STAT, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDDLParser.STATIC, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDDLParser.STATS, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLDDLParser.STATSUSAGE, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLDDLParser.STORAGE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDDLParser.STRIP, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDDLParser.STRTOK, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDDLParser.STYLE, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDDLParser.SUBBITSTR, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDDLParser.SUBCLASS_ORIGIN, 0)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDDLParser.SUCCEEDS, 0)

        def SUMMARYONLY(self):
            return self.getToken(TeradataSQLDDLParser.SUMMARYONLY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDDLParser.SUNDAY, 0)

        def SYMBOLS(self):
            return self.getToken(TeradataSQLDDLParser.SYMBOLS, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDDLParser.SYSTEM, 0)

        def SYSTEM_TIME(self):
            return self.getToken(TeradataSQLDDLParser.SYSTEM_TIME, 0)

        def SYSTEMTEST(self):
            return self.getToken(TeradataSQLDDLParser.SYSTEMTEST, 0)

        def TARGET(self):
            return self.getToken(TeradataSQLDDLParser.TARGET, 0)

        def TD_ARRAY2P(self):
            return self.getToken(TeradataSQLDDLParser.TD_ARRAY2P, 0)

        def TD_DATASET(self):
            return self.getToken(TeradataSQLDDLParser.TD_DATASET, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_YEAR, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLDDLParser.TD_GENERAL, 0)

        def TD_GETTIMEBUCKET(self):
            return self.getToken(TeradataSQLDDLParser.TD_GETTIMEBUCKET, 0)

        def TD_INTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.TD_INTERNAL, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TD_LZ_DECOMPRESS, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_TIME_BUCKET_NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.TD_TIME_BUCKET_NUMBER, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_YEAR_OF_CALENDAR, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLDDLParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLDDLParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLDDLParser.TDWMHISTORY, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORAL_TIMESTAMP, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLDDLParser.TEXT, 0)

        def THRESHOLDPERCENT(self):
            return self.getToken(TeradataSQLDDLParser.THRESHOLDPERCENT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDDLParser.THROUGH, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDDLParser.THURSDAY, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDDLParser.TIES, 0)

        def TIMECODE(self):
            return self.getToken(TeradataSQLDDLParser.TIMECODE, 0)

        def TIMECOLUMN(self):
            return self.getToken(TeradataSQLDDLParser.TIMECOLUMN, 0)

        def TIMEOUT(self):
            return self.getToken(TeradataSQLDDLParser.TIMEOUT, 0)

        def TIMESTAMPCOLUMN(self):
            return self.getToken(TeradataSQLDDLParser.TIMESTAMPCOLUMN, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDDLParser.TO_BYTE, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDDLParser.TO_BYTES, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDDLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDDLParser.TO_DATE, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.TO_DSINTERVAL, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.TO_NUMBER, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDDLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.TO_YMINTERVAL, 0)

        def TOTOKEN(self):
            return self.getToken(TeradataSQLDDLParser.TOTOKEN, 0)

        def TPA(self):
            return self.getToken(TeradataSQLDDLParser.TPA, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLDDLParser.TRANSACTION_ACTIVE, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDDLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDDLParser.TRANSUTF8TOUNICODE, 0)

        def TRUE(self):
            return self.getToken(TeradataSQLDDLParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDDLParser.TRUNC, 0)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLDDLParser.TRUST_ONLY, 0)

        def TTGRANULARITY(self):
            return self.getToken(TeradataSQLDDLParser.TTGRANULARITY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDDLParser.TUESDAY, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDDLParser.UBJSON, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDDLParser.UCASE, 0)

        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLDDLParser.UDFSEARCHPATH, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataSQLDDLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLDDLParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDDLParser.UNKNOWN, 0)

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDDLParser.UNPIVOT, 0)

        def USE(self):
            return self.getToken(TeradataSQLDDLParser.USE, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLDDLParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLDDLParser.UTILITYINFO, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLDDLParser.VARRAY, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLDDLParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDDLParser.VERSION, 0)

        def VERSIONING(self):
            return self.getToken(TeradataSQLDDLParser.VERSIONING, 0)

        def WARNING(self):
            return self.getToken(TeradataSQLDDLParser.WARNING, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDDLParser.WEDNESDAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_END, 0)

        def WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_OF_CALENDAR, 0)

        def WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_OF_MONTH, 0)

        def WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.WEEK_OF_YEAR, 0)

        def WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.WEEKDAY_OF_MONTH, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_YEAR, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDDLParser.WHITESPACE, 0)

        def WINDOWSIZE(self):
            return self.getToken(TeradataSQLDDLParser.WINDOWSIZE, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDDLParser.WITHIN, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLDDLParser.WORKLOAD, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDDLParser.WRITE, 0)

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDDLParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDDLParser.XMLATTRIBUTES, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDDLParser.XMLCOMMENT, 0)

        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDDLParser.XMLCONCAT, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDDLParser.XMLDECLARATION, 0)

        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDDLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDDLParser.XMLELEMENT, 0)

        def XMLFOREST(self):
            return self.getToken(TeradataSQLDDLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDDLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDDLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDDLParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(TeradataSQLDDLParser.XMLQUERY, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.XMLSCHEMA, 0)

        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDDLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDDLParser.XMLTABLE, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDDLParser.XMLTEXT, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDDLParser.XMLTYPE, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDDLParser.XMLVALIDATE, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDDLParser.YEAR_END, 0)

        def YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.YEAR_OF_CALENDAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.YEARNUMBER_OF_CALENDAR, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLDDLParser.ZLIB, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDDLParser.BUCKET, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDDLParser.COMMITTED, 0)

        def CREATEXML(self):
            return self.getToken(TeradataSQLDDLParser.CREATEXML, 0)

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDDLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDDLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.CS_GRAPHIC, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDDLParser.CSV, 0)

        def CSVLD(self):
            return self.getToken(TeradataSQLDDLParser.CSVLD, 0)

        def DATASIZE(self):
            return self.getToken(TeradataSQLDDLParser.DATASIZE, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAYOFMONTH, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLDDLParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLDDLParser.DEFINITION, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDDLParser.DELETED, 0)

        def FAST(self):
            return self.getToken(TeradataSQLDDLParser.FAST, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDDLParser.LISTAGG, 0)

        def PATH(self):
            return self.getToken(TeradataSQLDDLParser.PATH, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDDLParser.REVERSE, 0)

        def SAS(self):
            return self.getToken(TeradataSQLDDLParser.SAS, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLDDLParser.SQLTABLE, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def SYSLIB(self):
            return self.getToken(TeradataSQLDDLParser.SYSLIB, 0)

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDDLParser.SYSUDTLIB, 0)

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDDLParser.TD_SERVER_DB, 0)

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDDLParser.TD_SYSFNLIB, 0)

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDDLParser.TD_SYSXML, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLDDLParser.TIMEDATEWZCONTROL, 0)

        def TRUST(self):
            return self.getToken(TeradataSQLDDLParser.TRUST, 0)

        def TRYCAST(self):
            return self.getToken(TeradataSQLDDLParser.TRYCAST, 0)

        def UDT(self):
            return self.getToken(TeradataSQLDDLParser.UDT, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLDDLParser.USAGE, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDDLParser.VARIANT, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDDLParser.WEEK, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDDLParser.WIDTH, 0)

        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDDLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDDLParser.XMLPUBLISH_STREAM, 0)

        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDDLParser.XMLSPLIT, 0)

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE_TO_LOCALE, 0)

        def ASBSON(self):
            return self.getToken(TeradataSQLDDLParser.ASBSON, 0)

        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDDLParser.ASBSONTEXT, 0)

        def COMBINE(self):
            return self.getToken(TeradataSQLDDLParser.COMBINE, 0)

        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDDLParser.EXISTVALUE, 0)

        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDDLParser.JSONEXTRACT, 0)

        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDDLParser.JSONEXTRACTVALUE, 0)

        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDDLParser.JSONEXTRACTLARGEVALUE, 0)

        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.KEYCOUNT, 0)

        def METADATA(self):
            return self.getToken(TeradataSQLDDLParser.METADATA, 0)

        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDDLParser.STORAGE_SIZE, 0)

        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDDLParser.CREATESCHEMABASEDXML, 0)

        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDDLParser.CREATENONSCHEMABASEDXML, 0)

        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDDLParser.EXISTSNODE, 0)

        def ISCONTENT(self):
            return self.getToken(TeradataSQLDDLParser.ISCONTENT, 0)

        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDDLParser.ISDOCUMENT, 0)

        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDDLParser.ISSCHEMAVALID, 0)

        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDDLParser.ISSCHEMAVALIDATED, 0)

        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDDLParser.XMLEXTRACT, 0)

        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.XMLTRANSFORM, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLDDLParser.PROC_ID, 0)

        def LOCATION(self):
            return self.getToken(TeradataSQLDDLParser.LOCATION, 0)

        def PAYLOAD(self):
            return self.getToken(TeradataSQLDDLParser.PAYLOAD, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLDDLParser.TRUSTED, 0)

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLDDLParser.PATHPATTERN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDDLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDDLParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDDLParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDDLParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLDDLParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLDDLParser.STRIP_ENCLOSING_CHAR, 0)

        def RLS(self):
            return self.getToken(TeradataSQLDDLParser.RLS, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLDDLParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLDDLParser.MULTIPLE, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.JSON_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TS_DECOMPRESS, 0)

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDDLParser.CONTIGUOUSMAPAMPS, 0)

        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDDLParser.SPARSEMAPAMPS, 0)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDDLParser.SPARSETABLEAMPS, 0)

        def UNNEST(self):
            return self.getToken(TeradataSQLDDLParser.UNNEST, 0)

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDDLParser.CALCMATRIX, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDDLParser.PHRASE, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDDLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDDLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDDLParser.NULL_HANDLING, 0)

        def READ_NOS(self):
            return self.getToken(TeradataSQLDDLParser.READ_NOS, 0)

        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDDLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDDLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLE_PERC, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDDLParser.FULLSCAN, 0)

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDDLParser.TD_UNPIVOT, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDDLParser.VALUE_COLUMNS, 0)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN_LIST, 0)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE_NULLS, 0)

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDDLParser.WRITE_NOS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDDLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDDLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDDLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDDLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDDLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESSION, 0)

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_TO_JSON, 0)

        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDDLParser.BSON_CHECK, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDDLParser.GEOJSONFROMGEOM, 0)

        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDDLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDDLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDDLParser.JSONGETVALUE, 0)

        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDDLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDDLParser.NVP2JSON, 0)

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDDLParser.TD_JSONSHRED, 0)

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDDLParser.JSON_KEYS, 0)

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.JSON_TABLE, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDDLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDDLParser.QUOTES, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDDLParser.ROWEXPR, 0)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDDLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDDLParser.RETURNTYPES, 0)

        def NOCASE(self):
            return self.getToken(TeradataSQLDDLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDDLParser.TRUNCATE, 0)

        def LINK(self):
            return self.getToken(TeradataSQLDDLParser.LINK, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_nonreserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreserved_word" ):
                listener.enterNonreserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreserved_word" ):
                listener.exitNonreserved_word(self)




    def nonreserved_word(self):

        localctx = TeradataSQLDDLParser.Nonreserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_nonreserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8864
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_termContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def query_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Query_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def UNION(self):
            return self.getToken(TeradataSQLDDLParser.UNION, 0)

        def MINUS(self):
            return self.getToken(TeradataSQLDDLParser.MINUS, 0)

        def EXCEPT(self):
            return self.getToken(TeradataSQLDDLParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TeradataSQLDDLParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expr" ):
                listener.enterQuery_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expr" ):
                listener.exitQuery_expr(self)



    def query_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDDLParser.Query_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 834
        self.enterRecursionRule(localctx, 834, self.RULE_query_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [369, 370]:
                self.state = 8867
                self.query_term()
                pass
            elif token in [1213]:
                self.state = 8868
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 8869
                self.query_expr(0)
                self.state = 8870
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 8882
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLDDLParser.Query_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expr)
                    self.state = 8874
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 8875
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==204 or _la==247 or _la==447):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 8877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 8876
                        self.match(TeradataSQLDDLParser.ALL)


                    self.state = 8879
                    self.query_expr(3) 
                self.state = 8884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Select_listContext,0)


        def SELECT(self):
            return self.getToken(TeradataSQLDDLParser.SELECT, 0)

        def SEL(self):
            return self.getToken(TeradataSQLDDLParser.SEL, 0)

        def with_deleted_rows(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_deleted_rowsContext,0)


        def as_json(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.As_jsonContext,0)


        def from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.From_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.From_clauseContext,i)


        def into_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Into_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Into_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Where_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Group_by_clauseContext,i)


        def sample_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sample_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sample_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_clauseContext,i)


        def with_check_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.With_check_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.With_check_optionContext,i)


        def expand_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Expand_on_clauseContext,0)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Having_clauseContext,i)


        def qualify_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Qualify_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Qualify_clauseContext,i)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.With_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)




    def query_term(self):

        localctx = TeradataSQLDDLParser.Query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_query_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8885
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 8886
                self.with_deleted_rows()


            self.state = 8890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 8889
                self.as_json()


            self.state = 8892
            self.select_list()
            self.state = 8924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8922
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1166,self._ctx)
                    if la_ == 1:
                        self.state = 8893
                        self.from_clause()
                        self.state = 8897
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1162,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 8894
                                self.with_clause() 
                            self.state = 8899
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1162,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 8900
                        self.into_clause()
                        pass

                    elif la_ == 3:
                        self.state = 8901
                        self.where_clause()
                        pass

                    elif la_ == 4:
                        self.state = 8902
                        self.group_by_clause()
                        pass

                    elif la_ == 5:
                        self.state = 8905
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [183]:
                            self.state = 8903
                            self.having_clause()
                            pass
                        elif token in [315]:
                            self.state = 8904
                            self.qualify_clause()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 8907
                        self.sample_clause()
                        pass

                    elif la_ == 7:
                        self.state = 8911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==474:
                            self.state = 8908
                            self.with_clause()
                            self.state = 8913
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 8914
                        self.order_by_clause()
                        self.state = 8918
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1165,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 8915
                                self.with_clause() 
                            self.state = 8920
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1165,self._ctx)

                        pass

                    elif la_ == 8:
                        self.state = 8921
                        self.with_check_option()
                        pass

             
                self.state = 8926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1167,self._ctx)

            self.state = 8928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1168,self._ctx)
            if la_ == 1:
                self.state = 8927
                self.expand_on_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_deleted_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDDLParser.DELETED, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDDLParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_deleted_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_deleted_rows" ):
                listener.enterWith_deleted_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_deleted_rows" ):
                listener.exitWith_deleted_rows(self)




    def with_deleted_rows(self):

        localctx = TeradataSQLDDLParser.With_deleted_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_with_deleted_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8930
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 8931
            self.match(TeradataSQLDDLParser.DELETED)
            self.state = 8932
            self.match(TeradataSQLDDLParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_as_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_json" ):
                listener.enterAs_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_json" ):
                listener.exitAs_json(self)




    def as_json(self):

        localctx = TeradataSQLDDLParser.As_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_as_json)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8934
            self.match(TeradataSQLDDLParser.AS)
            self.state = 8935
            self.match(TeradataSQLDDLParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Selected_columnsContext,0)


        def top_n(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Top_nContext,0)


        def DISTINCT(self):
            return self.getToken(TeradataSQLDDLParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def normalize(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.NormalizeContext,0)


        def all_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.All_operatorContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TeradataSQLDDLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_select_list)
        try:
            self.state = 8948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 121, 271, 448]:
                    self.state = 8941
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 8937
                        self.match(TeradataSQLDDLParser.DISTINCT)
                        pass
                    elif token in [448]:
                        self.state = 8938
                        self.match(TeradataSQLDDLParser.UNIQUE)
                        pass
                    elif token in [13]:
                        self.state = 8939
                        self.match(TeradataSQLDDLParser.ALL)
                        pass
                    elif token in [271]:
                        self.state = 8940
                        self.normalize()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [427]:
                    self.state = 8943
                    self.top_n()
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1219, 1221, 1222]:
                    pass
                else:
                    pass
                self.state = 8946
                self.selected_columns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8947
                self.all_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_nContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TeradataSQLDDLParser.TOP, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Float_literalContext,0)


        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_parameter_referenceContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDDLParser.TIES, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_top_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_n" ):
                listener.enterTop_n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_n" ):
                listener.exitTop_n(self)




    def top_n(self):

        localctx = TeradataSQLDDLParser.Top_nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_top_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8950
            self.match(TeradataSQLDDLParser.TOP)
            self.state = 8954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 8951
                self.integer_literal()
                pass
            elif token in [1197]:
                self.state = 8952
                self.float_literal()
                pass
            elif token in [1207, 1210]:
                self.state = 8953
                self.macro_parameter_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 8956
                self.match(TeradataSQLDDLParser.PERCENT)


            self.state = 8961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 8959
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 8960
                self.match(TeradataSQLDDLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(TeradataSQLDDLParser.NORMALIZE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDDLParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLDDLParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDDLParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_normalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)




    def normalize(self):

        localctx = TeradataSQLDDLParser.NormalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_normalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8963
            self.match(TeradataSQLDDLParser.NORMALIZE)
            self.state = 8974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1176,self._ctx)
            if la_ == 1:
                self.state = 8964
                self.match(TeradataSQLDDLParser.ON)
                self.state = 8965
                self.match(TeradataSQLDDLParser.MEETS)
                self.state = 8966
                self.match(TeradataSQLDDLParser.OR)
                self.state = 8967
                self.match(TeradataSQLDDLParser.OVERLAPS)

            elif la_ == 2:
                self.state = 8968
                self.match(TeradataSQLDDLParser.ON)
                self.state = 8969
                self.match(TeradataSQLDDLParser.OVERLAPS)
                self.state = 8972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 8970
                    self.match(TeradataSQLDDLParser.OR)
                    self.state = 8971
                    self.match(TeradataSQLDDLParser.MEETS)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_all_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_operator" ):
                listener.enterAll_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_operator" ):
                listener.exitAll_operator(self)




    def all_operator(self):

        localctx = TeradataSQLDDLParser.All_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_all_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1177,self._ctx)
            if la_ == 1:
                self.state = 8976
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                pass

            elif la_ == 2:
                self.state = 8977
                self.table_name()
                self.state = 8978
                self.match(TeradataSQLDDLParser.DOT_)
                self.state = 8979
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                pass

            elif la_ == 3:
                self.state = 8981
                self.column_name()
                pass


            self.state = 8984
            self.match(TeradataSQLDDLParser.DOT_)
            self.state = 8985
            self.match(TeradataSQLDDLParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_rows = None # Token

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def selected_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Selected_columnContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Selected_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_selected_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_columns" ):
                listener.enterSelected_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_columns" ):
                listener.exitSelected_columns(self)




    def selected_columns(self):

        localctx = TeradataSQLDDLParser.Selected_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_selected_columns)
        try:
            self.state = 8996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8987
                localctx.all_rows = self.match(TeradataSQLDDLParser.MUL_SIGN)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8988
                self.selected_column()
                self.state = 8993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1178,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 8989
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 8990
                        self.selected_column() 
                    self.state = 8995
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1178,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_selected_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_column" ):
                listener.enterSelected_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_column" ):
                listener.exitSelected_column(self)




    def selected_column(self):

        localctx = TeradataSQLDDLParser.Selected_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_selected_column)
        self._la = 0 # Token type
        try:
            self.state = 9009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8998
                self.scalar_expr(0)
                self.state = 9003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1181,self._ctx)
                if la_ == 1:
                    self.state = 9000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 8999
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 9002
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9005
                self.table_name()
                self.state = 9006
                self.match(TeradataSQLDDLParser.DOT_)
                self.state = 9007
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(TeradataSQLDDLParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,i)


        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = TeradataSQLDDLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9011
            self.match(TeradataSQLDDLParser.INTO)
            self.state = 9014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9012
                self.variable_name()
                pass
            elif token in [1207]:
                self.state = 9013
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9016
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9019
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 9017
                        self.variable_name()
                        pass
                    elif token in [1207]:
                        self.state = 9018
                        self.variable_reference()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 9025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = TeradataSQLDDLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9026
            self.match(TeradataSQLDDLParser.FROM)
            self.state = 9027
            self.from_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Join_source_specContext,0)


        def join_joined_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Join_joined_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Join_joined_specContext,i)


        def from_pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_pivot_specContext,0)


        def from_unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_unpivot_specContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_from_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_spec" ):
                listener.enterFrom_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_spec" ):
                listener.exitFrom_spec(self)




    def from_spec(self):

        localctx = TeradataSQLDDLParser.From_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_from_spec)
        try:
            self.state = 9059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9029
                self.join_source_spec()
                self.state = 9033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1186,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9030
                        self.join_joined_spec() 
                    self.state = 9035
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1186,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9036
                self.from_pivot_spec()
                self.state = 9040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9037
                        self.join_joined_spec() 
                    self.state = 9042
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1187,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9043
                self.from_unpivot_spec()
                self.state = 9047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9044
                        self.join_joined_spec() 
                    self.state = 9049
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1188,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9050
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9051
                self.from_spec()
                self.state = 9052
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 9056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9053
                        self.join_joined_spec() 
                    self.state = 9058
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1189,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_source_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Subquery_referenceContext,0)


        def foreign_table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_table_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_referenceContext,0)


        def foreign_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_join_source_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source_spec" ):
                listener.enterJoin_source_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source_spec" ):
                listener.exitJoin_source_spec(self)




    def join_source_spec(self):

        localctx = TeradataSQLDDLParser.Join_source_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_join_source_spec)
        try:
            self.state = 9067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9061
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9062
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9063
                self.foreign_table_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9064
                self.table_function_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9065
                self.foreign_function_reference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9066
                self.table_operator_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_joined_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Subquery_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_referenceContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_join_joined_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_joined_spec" ):
                listener.enterJoin_joined_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_joined_spec" ):
                listener.exitJoin_joined_spec(self)




    def join_joined_spec(self):

        localctx = TeradataSQLDDLParser.Join_joined_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_join_joined_spec)
        try:
            self.state = 9078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9069
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9070
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9071
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9072
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9073
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9074
                self.table_function_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9075
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9076
                self.table_operator_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9077
                self.join_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.PivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_from_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_pivot_spec" ):
                listener.enterFrom_pivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_pivot_spec" ):
                listener.exitFrom_pivot_spec(self)




    def from_pivot_spec(self):

        localctx = TeradataSQLDDLParser.From_pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_from_pivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9080
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 9081
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9084
            self.pivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivot(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.UnpivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_from_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_unpivot_spec" ):
                listener.enterFrom_unpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_unpivot_spec" ):
                listener.exitFrom_unpivot_spec(self)




    def from_unpivot_spec(self):

        localctx = TeradataSQLDDLParser.From_unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_from_unpivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9086
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 9087
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9090
            self.unpivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_alias = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def foreign_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_returns_clauseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = TeradataSQLDDLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9092
            self.table_name()
            self.state = 9097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1196,self._ctx)
            if la_ == 1:
                self.state = 9093
                self.server_name_reference()
                self.state = 9095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1195,self._ctx)
                if la_ == 1:
                    self.state = 9094
                    self.foreign_returns_clause()




            self.state = 9103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1198,self._ctx)
            if la_ == 1:
                self.state = 9100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 9099
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 9102
                localctx.table_alias = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(TeradataSQLDDLParser.JOIN, 0)

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Join_source_specContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLDDLParser.INNER, 0)

        def join_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Join_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Join_on_clauseContext,i)


        def LEFT(self):
            return self.getToken(TeradataSQLDDLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDDLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataSQLDDLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLDDLParser.OUTER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CROSS(self):
            return self.getToken(TeradataSQLDDLParser.CROSS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = TeradataSQLDDLParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 9157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9110
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 9105
                    self.match(TeradataSQLDDLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 9106
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 9107
                        self.match(TeradataSQLDDLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 9112
                self.match(TeradataSQLDDLParser.JOIN)
                self.state = 9113
                self.join_source_spec()
                self.state = 9117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9114
                        self.join_on_clause() 
                    self.state = 9119
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1201,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9125
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 9120
                    self.match(TeradataSQLDDLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 9121
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 9122
                        self.match(TeradataSQLDDLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 9127
                self.match(TeradataSQLDDLParser.JOIN)
                self.state = 9128
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9129
                self.from_spec()
                self.state = 9130
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 9134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1204,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9131
                        self.join_on_clause() 
                    self.state = 9136
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1204,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9137
                self.match(TeradataSQLDDLParser.CROSS)
                self.state = 9138
                self.match(TeradataSQLDDLParser.JOIN)
                self.state = 9139
                self.join_source_spec()
                self.state = 9143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9140
                        self.join_on_clause() 
                    self.state = 9145
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1205,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9146
                self.match(TeradataSQLDDLParser.CROSS)
                self.state = 9147
                self.match(TeradataSQLDDLParser.JOIN)
                self.state = 9148
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9149
                self.from_spec()
                self.state = 9150
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 9154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9151
                        self.join_on_clause() 
                    self.state = 9156
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1206,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_join_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_clause" ):
                listener.enterJoin_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_clause" ):
                listener.exitJoin_on_clause(self)




    def join_on_clause(self):

        localctx = TeradataSQLDDLParser.Join_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_join_on_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9159
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9160
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_sql = None # Token
            self.table_alias = None # Alias_nameContext

        def FOREIGN(self):
            return self.getToken(TeradataSQLDDLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_termContext,0)


        def EXPORT(self):
            return self.getToken(TeradataSQLDDLParser.EXPORT, 0)

        def exported_data(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Exported_dataContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Exported_dataContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_reference" ):
                listener.enterForeign_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_reference" ):
                listener.exitForeign_table_reference(self)




    def foreign_table_reference(self):

        localctx = TeradataSQLDDLParser.Foreign_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_foreign_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9162
            self.match(TeradataSQLDDLParser.FOREIGN)
            self.state = 9163
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 9164
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1209,self._ctx)
            if la_ == 1:
                self.state = 9165
                self.query_term()
                pass

            elif la_ == 2:
                self.state = 9167 
                self._errHandler.sync(self)
                _alt = 1+1
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1+1:
                        self.state = 9166
                        localctx.foreign_sql = self.matchWildcard()

                    else:
                        raise NoViableAltException(self)
                    self.state = 9169 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1208,self._ctx)

                pass


            self.state = 9173
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9174
            self.server_name_reference()
            self.state = 9187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1211,self._ctx)
            if la_ == 1:
                self.state = 9175
                self.match(TeradataSQLDDLParser.EXPORT)
                self.state = 9176
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9177
                self.exported_data()
                self.state = 9182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9178
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9179
                    self.exported_data()
                    self.state = 9184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9185
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9189
                self.match(TeradataSQLDDLParser.AS)


            self.state = 9192
            localctx.table_alias = self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Server_name_referenceContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def foreign_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_on_clauseContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_function_reference" ):
                listener.enterForeign_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_function_reference" ):
                listener.exitForeign_function_reference(self)




    def foreign_function_reference(self):

        localctx = TeradataSQLDDLParser.Foreign_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_foreign_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9194
            self.function_name()
            self.state = 9195
            self.server_name_reference()
            self.state = 9196
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9198 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9197
                self.foreign_on_clause()
                self.state = 9200 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==286):
                    break

            self.state = 9202
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9203
                self.match(TeradataSQLDDLParser.AS)


            self.state = 9206
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def foreign_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_using_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def hash_or_partition_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Hash_or_partition_byContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Hash_or_partition_byContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_clauseContext,0)


        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_on_clause" ):
                listener.enterForeign_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_on_clause" ):
                listener.exitForeign_on_clause(self)




    def foreign_on_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_foreign_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9208
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9209
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9210
            self.scalar_expr(0)
            self.state = 9215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9211
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9212
                self.scalar_expr(0)
                self.state = 9217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9218
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==840:
                self.state = 9219
                self.hash_or_partition_by()
                self.state = 9224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 9226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 9225
                    self.match(TeradataSQLDDLParser.LOCAL)


                self.state = 9228
                self.order_by_clause()


            self.state = 9231
            self.foreign_using_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exported_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exported_subquery = None # Subquery_referenceContext
            self.exported_table = None # Table_nameContext
            self.table_alias = None # Alias_nameContext

        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Subquery_referenceContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_exported_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExported_data" ):
                listener.enterExported_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExported_data" ):
                listener.exitExported_data(self)




    def exported_data(self):

        localctx = TeradataSQLDDLParser.Exported_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_exported_data)
        self._la = 0 # Token type
        try:
            self.state = 9240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9233
                localctx.exported_subquery = self.subquery_reference()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9234
                localctx.exported_table = self.table_name()
                self.state = 9236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 9235
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 9238
                localctx.table_alias = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def foreign_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Foreign_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Foreign_parameterContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_using_clause" ):
                listener.enterForeign_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_using_clause" ):
                listener.exitForeign_using_clause(self)




    def foreign_using_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_foreign_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9242
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9244 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9243
                self.foreign_parameter()
                self.state = 9246 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_parameter" ):
                listener.enterForeign_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_parameter" ):
                listener.exitForeign_parameter(self)




    def foreign_parameter(self):

        localctx = TeradataSQLDDLParser.Foreign_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_foreign_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9248
            localctx.name = self.unqualified_name()
            self.state = 9249
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9250
            localctx.value = self.scalar_expr(0)
            self.state = 9251
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_foreign_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_returns_clause" ):
                listener.enterForeign_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_returns_clause" ):
                listener.exitForeign_returns_clause(self)




    def foreign_returns_clause(self):

        localctx = TeradataSQLDDLParser.Foreign_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_foreign_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9253
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 9254
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9255
            self.column_spec()
            self.state = 9260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9256
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9257
                self.column_spec()
                self.state = 9262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9263
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Server_name_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.AT_SIGN, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_server_name_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServer_name_reference" ):
                listener.enterServer_name_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServer_name_reference" ):
                listener.exitServer_name_reference(self)




    def server_name_reference(self):

        localctx = TeradataSQLDDLParser.Server_name_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_server_name_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9265
            self.match(TeradataSQLDDLParser.AT_SIGN)
            self.state = 9266
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def udt_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_table_functionContext,0)


        def unnest_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unnest_table_functionContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_reference" ):
                listener.enterTable_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_reference" ):
                listener.exitTable_function_reference(self)




    def table_function_reference(self):

        localctx = TeradataSQLDDLParser.Table_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_table_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9268
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 9269
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1223,self._ctx)
            if la_ == 1:
                self.state = 9270
                self.udt_table_function()
                pass

            elif la_ == 2:
                self.state = 9271
                self.unnest_table_function()
                pass


            self.state = 9274
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9275
                self.match(TeradataSQLDDLParser.AS)


            self.state = 9278
            self.alias_name()
            self.state = 9280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1225,self._ctx)
            if la_ == 1:
                self.state = 9279
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def table_function_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_returns_clauseContext,0)


        def table_function_local_order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_function_local_order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_local_order_by_clauseContext,i)


        def table_function_hash_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_function_hash_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_function_hash_by_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_udt_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_table_function" ):
                listener.enterUdt_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_table_function" ):
                listener.exitUdt_table_function(self)




    def udt_table_function(self):

        localctx = TeradataSQLDDLParser.Udt_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_udt_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9282
            self.function_name()
            self.state = 9286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1226,self._ctx)
            if la_ == 1:
                self.state = 9283
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9284
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 9285
                self.scalar_expr_list_comma_separated()
                pass


            self.state = 9289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 9288
                self.table_function_returns_clause()


            self.state = 9295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==224:
                self.state = 9293
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 9291
                    self.table_function_local_order_by_clause()
                    pass
                elif token in [178]:
                    self.state = 9292
                    self.table_function_hash_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext

        def UNNEST(self):
            return self.getToken(TeradataSQLDDLParser.UNNEST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDDLParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unnest_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_function" ):
                listener.enterUnnest_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_function" ):
                listener.exitUnnest_table_function(self)




    def unnest_table_function(self):

        localctx = TeradataSQLDDLParser.Unnest_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_unnest_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9298
                self.td_sysfnlib()


            self.state = 9301
            self.match(TeradataSQLDDLParser.UNNEST)
            self.state = 9302
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1231,self._ctx)
            if la_ == 1:
                self.state = 9303
                localctx.key_expr = self.scalar_expr(0)
                self.state = 9304
                self.match(TeradataSQLDDLParser.COMMA)


            self.state = 9308
            localctx.array_expr = self.scalar_expr(0)
            self.state = 9309
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 9310
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 9311
                self.match(TeradataSQLDDLParser.ORDINALITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returned_table_name = None # Table_nameContext

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_returns_clause" ):
                listener.enterTable_function_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_returns_clause" ):
                listener.exitTable_function_returns_clause(self)




    def table_function_returns_clause(self):

        localctx = TeradataSQLDDLParser.Table_function_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_table_function_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9314
            self.match(TeradataSQLDDLParser.RETURNS)
            self.state = 9327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9315
                localctx.returned_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 9316
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9317
                self.column_spec()
                self.state = 9322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9318
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9319
                    self.column_spec()
                    self.state = 9324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9325
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [178, 224, 1214]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_local_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_local_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_local_order_by_clause" ):
                listener.enterTable_function_local_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_local_order_by_clause" ):
                listener.exitTable_function_local_order_by_clause(self)




    def table_function_local_order_by_clause(self):

        localctx = TeradataSQLDDLParser.Table_function_local_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_table_function_local_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9329
            self.match(TeradataSQLDDLParser.LOCAL)
            self.state = 9330
            self.match(TeradataSQLDDLParser.ORDER)
            self.state = 9331
            self.match(TeradataSQLDDLParser.BY)
            self.state = 9332
            self.order_by_spec_full()
            self.state = 9337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9333
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9334
                self.order_by_spec_full()
                self.state = 9339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_hash_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_function_hash_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_hash_by_clause" ):
                listener.enterTable_function_hash_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_hash_by_clause" ):
                listener.exitTable_function_hash_by_clause(self)




    def table_function_hash_by_clause(self):

        localctx = TeradataSQLDDLParser.Table_function_hash_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_table_function_hash_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9340
            self.match(TeradataSQLDDLParser.HASH)
            self.state = 9341
            self.match(TeradataSQLDDLParser.BY)
            self.state = 9342
            self.column_name()
            self.state = 9347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9343
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9344
                self.column_name()
                self.state = 9349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def xmltable_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xmltable_operatorContext,0)


        def calcmatrix_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Calcmatrix_table_operatorContext,0)


        def read_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Read_nos_table_operatorContext,0)


        def script_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Script_table_operatorContext,0)


        def td_unpivot_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_unpivot_table_operatorContext,0)


        def write_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Write_nos_table_operatorContext,0)


        def json_keys_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Json_keys_table_operatorContext,0)


        def json_table_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Json_table_table_operatorContext,0)


        def json_shred_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Json_shred_table_operatorContext,0)


        def generic_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Generic_table_operatorContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_operator_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_reference" ):
                listener.enterTable_operator_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_reference" ):
                listener.exitTable_operator_reference(self)




    def table_operator_reference(self):

        localctx = TeradataSQLDDLParser.Table_operator_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_table_operator_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1237,self._ctx)
            if la_ == 1:
                self.state = 9350
                self.xmltable_operator()
                pass

            elif la_ == 2:
                self.state = 9351
                self.calcmatrix_table_operator()
                pass

            elif la_ == 3:
                self.state = 9352
                self.read_nos_table_operator()
                pass

            elif la_ == 4:
                self.state = 9353
                self.script_table_operator()
                pass

            elif la_ == 5:
                self.state = 9354
                self.td_unpivot_table_operator()
                pass

            elif la_ == 6:
                self.state = 9355
                self.write_nos_table_operator()
                pass

            elif la_ == 7:
                self.state = 9356
                self.json_keys_table_operator()
                pass

            elif la_ == 8:
                self.state = 9357
                self.json_table_table_operator()
                pass

            elif la_ == 9:
                self.state = 9358
                self.json_shred_table_operator()
                pass

            elif la_ == 10:
                self.state = 9359
                self.generic_table_operator()
                pass


            self.state = 9363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9362
                self.match(TeradataSQLDDLParser.AS)


            self.state = 9365
            self.alias_name()
            self.state = 9367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1239,self._ctx)
            if la_ == 1:
                self.state = 9366
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_tab_row_pattern = None # Scalar_exprContext

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDDLParser.XMLTABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_namespace_declarationContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_query_argumentContext,0)


        def xml_columns_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_columns_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xmltable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_operator" ):
                listener.enterXmltable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_operator" ):
                listener.exitXmltable_operator(self)




    def xmltable_operator(self):

        localctx = TeradataSQLDDLParser.Xmltable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_xmltable_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9369
            self.match(TeradataSQLDDLParser.XMLTABLE)
            self.state = 9370
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1240,self._ctx)
            if la_ == 1:
                self.state = 9371
                self.xml_namespace_declaration()


            self.state = 9374
            localctx.xml_tab_row_pattern = self.scalar_expr(0)
            self.state = 9376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 9375
                self.xml_query_argument()


            self.state = 9379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==579:
                self.state = 9378
                self.xml_columns_spec()


            self.state = 9381
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calcmatrix_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using_phrase = None # Char_string_literalContext
            self.calc_type = None # Char_string_literalContext
            self.output = None # Char_string_literalContext
            self.null_handling = None # Char_string_literalContext

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDDLParser.CALCMATRIX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDDLParser.PHRASE, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.BY)
            else:
                return self.getToken(TeradataSQLDDLParser.BY, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDDLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDDLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDDLParser.NULL_HANDLING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_calcmatrix_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcmatrix_table_operator" ):
                listener.enterCalcmatrix_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcmatrix_table_operator" ):
                listener.exitCalcmatrix_table_operator(self)




    def calcmatrix_table_operator(self):

        localctx = TeradataSQLDDLParser.Calcmatrix_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_calcmatrix_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9383
                self.td_sysfnlib()


            self.state = 9386
            self.match(TeradataSQLDDLParser.CALCMATRIX)
            self.state = 9387
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9388
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9389
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9390
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 9393
                self.match(TeradataSQLDDLParser.HASH)
                self.state = 9394
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9395
                self.scalar_expr(0)
                self.state = 9400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9396
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9397
                    self.scalar_expr(0)
                    self.state = 9402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 9416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 9405
                self.match(TeradataSQLDDLParser.LOCAL)
                self.state = 9406
                self.match(TeradataSQLDDLParser.ORDER)
                self.state = 9407
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9408
                self.scalar_expr(0)
                self.state = 9413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9409
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9410
                    self.scalar_expr(0)
                    self.state = 9415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 9418
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9419
            self.match(TeradataSQLDDLParser.PHRASE)
            self.state = 9420
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9421
            localctx.using_phrase = self.char_string_literal()
            self.state = 9422
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1249,self._ctx)
            if la_ == 1:
                self.state = 9423
                self.match(TeradataSQLDDLParser.CALCTYPE)
                self.state = 9424
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9425
                localctx.calc_type = self.char_string_literal()
                self.state = 9426
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1250,self._ctx)
            if la_ == 1:
                self.state = 9430
                self.match(TeradataSQLDDLParser.OUTPUT)
                self.state = 9431
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9432
                localctx.output = self.char_string_literal()
                self.state = 9433
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1251,self._ctx)
            if la_ == 1:
                self.state = 9437
                self.match(TeradataSQLDDLParser.NULL_HANDLING)
                self.state = 9438
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9439
                localctx.null_handling = self.char_string_literal()
                self.state = 9440
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_NOS(self):
            return self.getToken(TeradataSQLDDLParser.READ_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def read_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Read_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Read_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_read_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_table_operator" ):
                listener.enterRead_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_table_operator" ):
                listener.exitRead_nos_table_operator(self)




    def read_nos_table_operator(self):

        localctx = TeradataSQLDDLParser.Read_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_read_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9444
            self.match(TeradataSQLDDLParser.READ_NOS)
            self.state = 9445
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9446
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9447
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9448
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9451
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9452
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9453
            self.location()
            self.state = 9457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1132)) & ~0x3f) == 0 and ((1 << (_la - 1132)) & 125829135) != 0):
                self.state = 9454
                self.read_nos_option()
                self.state = 9459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9460
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9461
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.return_spec = list() # of Char_string_literalContexts
            self.delimiter_char = None # Char_string_literalContext
            self.charset = None # Char_string_literalContext
            self.quote_char = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def SCRIPT(self):
            return self.getToken(TeradataSQLDDLParser.SCRIPT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_on_clauseContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDDLParser.DELIMITER, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDDLParser.CHARSET, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDDLParser.QUOTECHAR, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDDLParser.AUTH, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_script_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_table_operator" ):
                listener.enterScript_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_table_operator" ):
                listener.exitScript_table_operator(self)




    def script_table_operator(self):

        localctx = TeradataSQLDDLParser.Script_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_script_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9463
            self.match(TeradataSQLDDLParser.SCRIPT)
            self.state = 9464
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9465
            self.table_operator_on_clause()
            self.state = 9480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 9466
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 9467
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9477
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 9468
                    self.match(TeradataSQLDDLParser.MUL_SIGN)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 9469
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.return_spec.append(localctx._char_string_literal)
                    self.state = 9474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 9470
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 9471
                        localctx._char_string_literal = self.char_string_literal()
                        localctx.return_spec.append(localctx._char_string_literal)
                        self.state = 9476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9479
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==625:
                self.state = 9482
                self.match(TeradataSQLDDLParser.DELIMITER)
                self.state = 9483
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9484
                localctx.delimiter_char = self.char_string_literal()
                self.state = 9485
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 9489
                self.match(TeradataSQLDDLParser.CHARSET)
                self.state = 9490
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9491
                localctx.charset = self.char_string_literal()
                self.state = 9492
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==871:
                self.state = 9496
                self.match(TeradataSQLDDLParser.QUOTECHAR)
                self.state = 9497
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9498
                localctx.quote_char = self.char_string_literal()
                self.state = 9499
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==542:
                self.state = 9503
                self.match(TeradataSQLDDLParser.AUTH)
                self.state = 9504
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9505
                localctx.authorization_name = self.object_name()
                self.state = 9506
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9510
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_unpivot_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.value_columns_value = list() # of Char_string_literalContexts
            self.unpivot_column_value = None # Char_string_literalContext
            self.column_list_value = list() # of Char_string_literalContexts
            self.column_alias_list_value = list() # of Char_string_literalContexts
            self.include_nulls = None # Char_string_literalContext

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDDLParser.TD_UNPIVOT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDDLParser.VALUE_COLUMNS, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDDLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN_LIST, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDDLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE_NULLS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_td_unpivot_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_unpivot_table_operator" ):
                listener.enterTd_unpivot_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_unpivot_table_operator" ):
                listener.exitTd_unpivot_table_operator(self)




    def td_unpivot_table_operator(self):

        localctx = TeradataSQLDDLParser.Td_unpivot_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_td_unpivot_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9512
                self.td_sysfnlib()


            self.state = 9515
            self.match(TeradataSQLDDLParser.TD_UNPIVOT)
            self.state = 9516
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9517
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9518
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9519
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9522
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9523
            self.match(TeradataSQLDDLParser.VALUE_COLUMNS)
            self.state = 9524
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9525
            localctx._char_string_literal = self.char_string_literal()
            localctx.value_columns_value.append(localctx._char_string_literal)
            self.state = 9530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9526
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9527
                localctx._char_string_literal = self.char_string_literal()
                localctx.value_columns_value.append(localctx._char_string_literal)
                self.state = 9532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9533
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9534
            self.match(TeradataSQLDDLParser.UNPIVOT_COLUMN)
            self.state = 9535
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9536
            localctx.unpivot_column_value = self.char_string_literal()
            self.state = 9537
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9538
            self.match(TeradataSQLDDLParser.COLUMN_LIST)
            self.state = 9539
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9540
            localctx._char_string_literal = self.char_string_literal()
            localctx.column_list_value.append(localctx._char_string_literal)
            self.state = 9545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9541
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9542
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_list_value.append(localctx._char_string_literal)
                self.state = 9547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9548
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1266,self._ctx)
            if la_ == 1:
                self.state = 9549
                self.match(TeradataSQLDDLParser.COLUMN_ALIAS_LIST)
                self.state = 9550
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9551
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_alias_list_value.append(localctx._char_string_literal)
                self.state = 9556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9552
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9553
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.column_alias_list_value.append(localctx._char_string_literal)
                    self.state = 9558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9559
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 9560
                self.match(TeradataSQLDDLParser.INCLUDE_NULLS)
                self.state = 9561
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9562
                localctx.include_nulls = self.char_string_literal()
                self.state = 9563
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDDLParser.WRITE_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_on_clauseContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def write_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Write_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Write_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_write_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_table_operator" ):
                listener.enterWrite_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_table_operator" ):
                listener.exitWrite_nos_table_operator(self)




    def write_nos_table_operator(self):

        localctx = TeradataSQLDDLParser.Write_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_write_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9567
            self.match(TeradataSQLDDLParser.WRITE_NOS)
            self.state = 9568
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9569
            self.table_operator_on_clause()
            self.state = 9570
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9571
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9572
            self.location()
            self.state = 9576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1134)) & ~0x3f) == 0 and ((1 << (_la - 1134)) & 1095216660481) != 0):
                self.state = 9573
                self.write_nos_option()
                self.state = 9578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9579
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9580
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_table_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self.col_expr_literal = None # Char_string_literalContext

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.JSON_TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDDLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDDLParser.COLEXPR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_table_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_table_table_operator" ):
                listener.enterJson_table_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_table_table_operator" ):
                listener.exitJson_table_table_operator(self)




    def json_table_table_operator(self):

        localctx = TeradataSQLDDLParser.Json_table_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_json_table_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9582
                self.td_sysfnlib()


            self.state = 9585
            self.match(TeradataSQLDDLParser.JSON_TABLE)
            self.state = 9586
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9587
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9588
            self.subquery()
            self.state = 9589
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9590
            self.match(TeradataSQLDDLParser.ROWEXPR)
            self.state = 9591
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9592
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 9593
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9594
            self.match(TeradataSQLDDLParser.COLEXPR)
            self.state = 9595
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9596
            localctx.col_expr_literal = self.char_string_literal()
            self.state = 9597
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9598
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDDLParser.JSON_KEYS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def json_keys_using_name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Json_keys_using_name_value_pairContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Json_keys_using_name_value_pairContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_keys_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_table_operator" ):
                listener.enterJson_keys_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_table_operator" ):
                listener.exitJson_keys_table_operator(self)




    def json_keys_table_operator(self):

        localctx = TeradataSQLDDLParser.Json_keys_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_json_keys_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9600
                self.td_sysfnlib()


            self.state = 9603
            self.match(TeradataSQLDDLParser.JSON_KEYS)
            self.state = 9604
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9605
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9606
            self.subquery()
            self.state = 9613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 9607
                self.match(TeradataSQLDDLParser.USING)
                self.state = 9609 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 9608
                    self.json_keys_using_name_value_pair()
                    self.state = 9611 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1185 or _la==1186):
                        break



            self.state = 9615
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_shred_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.col_expr_literal = list() # of Char_string_literalContexts
            self.return_type = list() # of Char_string_literalContexts
            self.nocase_value = None # Integer_literalContext
            self.truncate_value = None # Integer_literalContext

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDDLParser.TD_JSONSHRED, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDDLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDDLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDDLParser.RETURNTYPES, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def NOCASE(self):
            return self.getToken(TeradataSQLDDLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDDLParser.TRUNCATE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_shred_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_shred_table_operator" ):
                listener.enterJson_shred_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_shred_table_operator" ):
                listener.exitJson_shred_table_operator(self)




    def json_shred_table_operator(self):

        localctx = TeradataSQLDDLParser.Json_shred_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_json_shred_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9617
                self.td_sysfnlib()


            self.state = 9620
            self.match(TeradataSQLDDLParser.TD_JSONSHRED)
            self.state = 9621
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9622
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9623
            self.subquery()
            self.state = 9624
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9625
            self.match(TeradataSQLDDLParser.ROWEXPR)
            self.state = 9626
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9627
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 9628
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9629
            self.match(TeradataSQLDDLParser.COLEXPR)
            self.state = 9630
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9631
            localctx._char_string_literal = self.char_string_literal()
            localctx.col_expr_literal.append(localctx._char_string_literal)
            self.state = 9636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9632
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9633
                localctx._char_string_literal = self.char_string_literal()
                localctx.col_expr_literal.append(localctx._char_string_literal)
                self.state = 9638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9639
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9640
            self.match(TeradataSQLDDLParser.RETURNTYPES)
            self.state = 9641
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9642
            localctx._char_string_literal = self.char_string_literal()
            localctx.return_type.append(localctx._char_string_literal)
            self.state = 9647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9643
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9644
                localctx._char_string_literal = self.char_string_literal()
                localctx.return_type.append(localctx._char_string_literal)
                self.state = 9649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9650
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 9656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1190:
                self.state = 9651
                self.match(TeradataSQLDDLParser.NOCASE)
                self.state = 9652
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9653
                localctx.nocase_value = self.integer_literal()
                self.state = 9654
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1191:
                self.state = 9658
                self.match(TeradataSQLDDLParser.TRUNCATE)
                self.state = 9659
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9660
                localctx.truncate_value = self.integer_literal()
                self.state = 9661
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 9665
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def table_operator_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_operator_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_on_clauseContext,i)


        def table_operator_execute_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_execute_clauseContext,0)


        def table_operator_out_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_operator_out_table_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_out_table_clauseContext,i)


        def table_operator_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_generic_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_table_operator" ):
                listener.enterGeneric_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_table_operator" ):
                listener.exitGeneric_table_operator(self)




    def generic_table_operator(self):

        localctx = TeradataSQLDDLParser.Generic_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_generic_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9667
            self.table_name()
            self.state = 9668
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==286:
                self.state = 9669
                self.table_operator_on_clause()
                self.state = 9674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 9675
                self.table_operator_execute_clause()


            self.state = 9681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 9678
                self.table_operator_out_table_clause()
                self.state = 9683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 9684
                self.table_operator_using_clause()


            self.state = 9687
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def hash_or_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hash_or_partition_byContext,0)


        def DIMENSION(self):
            return self.getToken(TeradataSQLDDLParser.DIMENSION, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_operator_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_on_clause" ):
                listener.enterTable_operator_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_on_clause" ):
                listener.exitTable_operator_on_clause(self)




    def table_operator_on_clause(self):

        localctx = TeradataSQLDDLParser.Table_operator_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_table_operator_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9689
            self.match(TeradataSQLDDLParser.ON)
            self.state = 9692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9690
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9691
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9694
                self.match(TeradataSQLDDLParser.AS)
                self.state = 9695
                self.alias_name()


            self.state = 9700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 840]:
                self.state = 9698
                self.hash_or_partition_by()
                pass
            elif token in [635]:
                self.state = 9699
                self.match(TeradataSQLDDLParser.DIMENSION)
                pass
            elif token in [144, 224, 286, 291, 293, 352, 457, 542, 569, 625, 871, 1214]:
                pass
            else:
                pass
            self.state = 9715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 9703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 9702
                    self.match(TeradataSQLDDLParser.LOCAL)


                self.state = 9705
                self.match(TeradataSQLDDLParser.ORDER)
                self.state = 9706
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9707
                self.order_by_spec_full()
                self.state = 9712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9708
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9709
                    self.order_by_spec_full()
                    self.state = 9714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext

        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_operator_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_execute_clause" ):
                listener.enterTable_operator_execute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_execute_clause" ):
                listener.exitTable_operator_execute_clause(self)




    def table_operator_execute_clause(self):

        localctx = TeradataSQLDDLParser.Table_operator_execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_table_operator_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9717
            self.match(TeradataSQLDDLParser.EXECUTE)
            self.state = 9718
            self.match(TeradataSQLDDLParser.MAP)
            self.state = 9719
            self.match(TeradataSQLDDLParser.EQUALS_SIGN)
            self.state = 9720
            localctx.map_name = self.char_string_literal()
            self.state = 9725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 9721
                self.match(TeradataSQLDDLParser.COLOCATE)
                self.state = 9722
                self.match(TeradataSQLDDLParser.USING)
                self.state = 9723
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 9724
                localctx.colocation_name = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_out_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def OUT(self):
            return self.getToken(TeradataSQLDDLParser.OUT, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_operator_out_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_out_table_clause" ):
                listener.enterTable_operator_out_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_out_table_clause" ):
                listener.exitTable_operator_out_table_clause(self)




    def table_operator_out_table_clause(self):

        localctx = TeradataSQLDDLParser.Table_operator_out_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_table_operator_out_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9727
            self.match(TeradataSQLDDLParser.OUT)
            self.state = 9728
            self.match(TeradataSQLDDLParser.TABLE)
            self.state = 9729
            localctx.name = self.unqualified_name()
            self.state = 9730
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9731
            self.table_name()
            self.state = 9732
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def table_operator_using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Table_operator_using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Table_operator_using_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_operator_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_clause" ):
                listener.enterTable_operator_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_clause" ):
                listener.exitTable_operator_using_clause(self)




    def table_operator_using_clause(self):

        localctx = TeradataSQLDDLParser.Table_operator_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_table_operator_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9734
            self.match(TeradataSQLDDLParser.USING)
            self.state = 9736 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9735
                self.table_operator_using_spec()
                self.state = 9738 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_table_operator_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_spec" ):
                listener.enterTable_operator_using_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_spec" ):
                listener.exitTable_operator_using_spec(self)




    def table_operator_using_spec(self):

        localctx = TeradataSQLDDLParser.Table_operator_using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_table_operator_using_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9740
            localctx.name = self.unqualified_name()
            self.state = 9743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1289,self._ctx)
            if la_ == 1:
                self.state = 9741
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 9742
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_using_name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDDLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDDLParser.QUOTES, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_keys_using_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_using_name_value_pair" ):
                listener.enterJson_keys_using_name_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_using_name_value_pair" ):
                listener.exitJson_keys_using_name_value_pair(self)




    def json_keys_using_name_value_pair(self):

        localctx = TeradataSQLDDLParser.Json_keys_using_name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_json_keys_using_name_value_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9745
            _la = self._input.LA(1)
            if not(_la==1185 or _la==1186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9746
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9747
            localctx.value = self.scalar_expr(0)
            self.state = 9748
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_or_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def HASH(self):
            return self.getToken(TeradataSQLDDLParser.HASH, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def ANY(self):
            return self.getToken(TeradataSQLDDLParser.ANY, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hash_or_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_or_partition_by" ):
                listener.enterHash_or_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_or_partition_by" ):
                listener.exitHash_or_partition_by(self)




    def hash_or_partition_by(self):

        localctx = TeradataSQLDDLParser.Hash_or_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_hash_or_partition_by)
        self._la = 0 # Token type
        try:
            self.state = 9763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9750
                _la = self._input.LA(1)
                if not(_la==178 or _la==840):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9751
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9752
                self.scalar_expr(0)
                self.state = 9757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9753
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9754
                    self.scalar_expr(0)
                    self.state = 9759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9760
                self.match(TeradataSQLDDLParser.PARTITION)
                self.state = 9761
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9762
                self.match(TeradataSQLDDLParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_subquery_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_reference" ):
                listener.enterSubquery_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_reference" ):
                listener.exitSubquery_reference(self)




    def subquery_reference(self):

        localctx = TeradataSQLDDLParser.Subquery_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_subquery_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9765
            self.subquery()
            self.state = 9767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9766
                self.match(TeradataSQLDDLParser.AS)


            self.state = 9769
            self.alias_name()
            self.state = 9771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1293,self._ctx)
            if la_ == 1:
                self.state = 9770
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_path = None # Token

        def LOCATION(self):
            return self.getToken(TeradataSQLDDLParser.LOCATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDDLParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)




    def location(self):

        localctx = TeradataSQLDDLParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9773
            self.match(TeradataSQLDDLParser.LOCATION)
            self.state = 9774
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9775
            localctx.external_file_path = self.match(TeradataSQLDDLParser.CHAR_STRING)
            self.state = 9776
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.buffer_size = None # Char_string_literalContext
            self.return_type = None # Char_string_literalContext
            self.row_sampling_value = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.fullscan = None # Char_string_literalContext
            self.manifest = None # Char_string_literalContext
            self.row_format = None # Char_string_literalContext
            self.header = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDDLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDDLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLE_PERC, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDDLParser.STOREDAS, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDDLParser.FULLSCAN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDDLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDDLParser.ROWFORMAT, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDDLParser.HEADER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_read_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_option" ):
                listener.enterRead_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_option" ):
                listener.exitRead_nos_option(self)




    def read_nos_option(self):

        localctx = TeradataSQLDDLParser.Read_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_read_nos_option)
        try:
            self.state = 9826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9778
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                self.state = 9779
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1294,self._ctx)
                if la_ == 1:
                    self.state = 9780
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 9781
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 9784
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9786
                self.match(TeradataSQLDDLParser.BUFFERSIZE)
                self.state = 9787
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9788
                localctx.buffer_size = self.char_string_literal()
                self.state = 9789
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9791
                self.match(TeradataSQLDDLParser.RETURNTYPE)
                self.state = 9792
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9793
                localctx.return_type = self.char_string_literal()
                self.state = 9794
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9796
                self.match(TeradataSQLDDLParser.SAMPLE_PERC)
                self.state = 9797
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9798
                localctx.row_sampling_value = self.char_string_literal()
                self.state = 9799
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9801
                self.match(TeradataSQLDDLParser.STOREDAS)
                self.state = 9802
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9803
                localctx.stored_as = self.char_string_literal()
                self.state = 9804
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9806
                self.match(TeradataSQLDDLParser.FULLSCAN)
                self.state = 9807
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9808
                localctx.fullscan = self.char_string_literal()
                self.state = 9809
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9811
                self.match(TeradataSQLDDLParser.MANIFEST)
                self.state = 9812
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9813
                localctx.manifest = self.char_string_literal()
                self.state = 9814
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9816
                self.match(TeradataSQLDDLParser.ROWFORMAT)
                self.state = 9817
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9818
                localctx.row_format = self.char_string_literal()
                self.state = 9819
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9821
                self.match(TeradataSQLDDLParser.HEADER)
                self.state = 9822
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9823
                localctx.header = self.char_string_literal()
                self.state = 9824
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.naming = None # Char_string_literalContext
            self.manifest_name = None # Char_string_literalContext
            self.manifest_only = None # Char_string_literalContext
            self.overwrite = None # Char_string_literalContext
            self.include_ordering = None # Char_string_literalContext
            self.include_hashby = None # Char_string_literalContext
            self.max_object_size = None # Char_string_literalContext
            self.compression = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def STOREDAS(self):
            return self.getToken(TeradataSQLDDLParser.STOREDAS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDDLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDDLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDDLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDDLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDDLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDDLParser.COMPRESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_write_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_option" ):
                listener.enterWrite_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_option" ):
                listener.exitWrite_nos_option(self)




    def write_nos_option(self):

        localctx = TeradataSQLDDLParser.Write_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_write_nos_option)
        try:
            self.state = 9881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9828
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                self.state = 9829
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1296,self._ctx)
                if la_ == 1:
                    self.state = 9830
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 9831
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 9834
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9836
                self.match(TeradataSQLDDLParser.STOREDAS)
                self.state = 9837
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9838
                localctx.stored_as = self.char_string_literal()
                self.state = 9839
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9841
                self.match(TeradataSQLDDLParser.NAMING)
                self.state = 9842
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9843
                localctx.naming = self.char_string_literal()
                self.state = 9844
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9846
                self.match(TeradataSQLDDLParser.MANIFESTFILE)
                self.state = 9847
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9848
                localctx.manifest_name = self.char_string_literal()
                self.state = 9849
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9851
                self.match(TeradataSQLDDLParser.MANIFESTONLY)
                self.state = 9852
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9853
                localctx.manifest_only = self.char_string_literal()
                self.state = 9854
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9856
                self.match(TeradataSQLDDLParser.OVERWRITE)
                self.state = 9857
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9858
                localctx.overwrite = self.char_string_literal()
                self.state = 9859
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9861
                self.match(TeradataSQLDDLParser.INCLUDE_ORDERING)
                self.state = 9862
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9863
                localctx.include_ordering = self.char_string_literal()
                self.state = 9864
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9866
                self.match(TeradataSQLDDLParser.INCLUDE_HASHBY)
                self.state = 9867
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9868
                localctx.include_hashby = self.char_string_literal()
                self.state = 9869
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9871
                self.match(TeradataSQLDDLParser.MAXOBJECTSIZE)
                self.state = 9872
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9873
                localctx.max_object_size = self.char_string_literal()
                self.state = 9874
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1173]:
                self.enterOuterAlt(localctx, 10)
                self.state = 9876
                self.match(TeradataSQLDDLParser.COMPRESSION)
                self.state = 9877
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 9878
                localctx.compression = self.char_string_literal()
                self.state = 9879
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def with_clause_title_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.With_clause_title_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.With_clause_title_phraseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def with_clause_by_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_clause_by_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = TeradataSQLDDLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9883
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 9884
            self.scalar_expr(0)
            self.state = 9886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1298,self._ctx)
            if la_ == 1:
                self.state = 9885
                self.with_clause_title_phrase()


            self.state = 9895
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9888
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9889
                    self.scalar_expr(0)
                    self.state = 9891
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1299,self._ctx)
                    if la_ == 1:
                        self.state = 9890
                        self.with_clause_title_phrase()

             
                self.state = 9897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1300,self._ctx)

            self.state = 9899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1301,self._ctx)
            if la_ == 1:
                self.state = 9898
                self.with_clause_by_phrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_by_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_asc_desc_onlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_clause_by_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_by_phrase" ):
                listener.enterWith_clause_by_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_by_phrase" ):
                listener.exitWith_clause_by_phrase(self)




    def with_clause_by_phrase(self):

        localctx = TeradataSQLDDLParser.With_clause_by_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_with_clause_by_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9901
            self.match(TeradataSQLDDLParser.BY)
            self.state = 9902
            self.order_by_spec_asc_desc_only()
            self.state = 9907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9903
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9904
                    self.order_by_spec_asc_desc_only() 
                self.state = 9909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1302,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDDLParser.TITLE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_clause_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_title_phrase" ):
                listener.enterWith_clause_title_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_title_phrase" ):
                listener.exitWith_clause_title_phrase(self)




    def with_clause_title_phrase(self):

        localctx = TeradataSQLDDLParser.With_clause_title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_with_clause_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9910
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9911
            self.match(TeradataSQLDDLParser.TITLE)
            self.state = 9912
            localctx.title = self.char_string_literal()
            self.state = 9913
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataSQLDDLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = TeradataSQLDDLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9915
            self.match(TeradataSQLDDLParser.WHERE)
            self.state = 9916
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(TeradataSQLDDLParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def group_by_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Group_by_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Group_by_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = TeradataSQLDDLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_group_by_clause)
        try:
            self.state = 9930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9918
                self.match(TeradataSQLDDLParser.GROUP)
                self.state = 9919
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9920
                self.group_by_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9921
                self.match(TeradataSQLDDLParser.GROUP)
                self.state = 9922
                self.match(TeradataSQLDDLParser.BY)
                self.state = 9923
                self.group_by_spec()
                self.state = 9926 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9924
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 9925
                        self.group_by_spec()

                    else:
                        raise NoViableAltException(self)
                    self.state = 9928 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1303,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Ordinary_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_group_by_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_spec" ):
                listener.enterGroup_by_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_spec" ):
                listener.exitGroup_by_spec(self)




    def group_by_spec(self):

        localctx = TeradataSQLDDLParser.Group_by_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_group_by_spec)
        try:
            self.state = 9936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9932
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9933
                self.rollup_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9934
                self.cube_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9935
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def ordinary_grouping_set_parenthesized(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ordinary_grouping_set_parenthesizedContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ordinary_grouping_set_parenthesizedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = TeradataSQLDDLParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1306,self._ctx)
            if la_ == 1:
                self.state = 9938
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 9939
                self.ordinary_grouping_set_parenthesized()
                pass


            self.state = 9949
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9942
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 9945
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1307,self._ctx)
                    if la_ == 1:
                        self.state = 9943
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 9944
                        self.ordinary_grouping_set_parenthesized()
                        pass

             
                self.state = 9951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ordinary_grouping_set_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_parenthesized" ):
                listener.enterOrdinary_grouping_set_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_parenthesized" ):
                listener.exitOrdinary_grouping_set_parenthesized(self)




    def ordinary_grouping_set_parenthesized(self):

        localctx = TeradataSQLDDLParser.Ordinary_grouping_set_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_ordinary_grouping_set_parenthesized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9952
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9953
            self.scalar_expr(0)
            self.state = 9956 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9954
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9955
                self.scalar_expr(0)
                self.state = 9958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 9960
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = TeradataSQLDDLParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9962
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9963
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(TeradataSQLDDLParser.ROLLUP, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_rollup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_option" ):
                listener.enterRollup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_option" ):
                listener.exitRollup_option(self)




    def rollup_option(self):

        localctx = TeradataSQLDDLParser.Rollup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_rollup_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9965
            self.match(TeradataSQLDDLParser.ROLLUP)
            self.state = 9966
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9967
            self.ordinary_grouping_set()
            self.state = 9968
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(TeradataSQLDDLParser.CUBE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_cube_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_option" ):
                listener.enterCube_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_option" ):
                listener.exitCube_option(self)




    def cube_option(self):

        localctx = TeradataSQLDDLParser.Cube_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_cube_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9970
            self.match(TeradataSQLDDLParser.CUBE)
            self.state = 9971
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9972
            self.ordinary_grouping_set()
            self.state = 9973
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(TeradataSQLDDLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TeradataSQLDDLParser.SETS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def grouping_sets_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Grouping_sets_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Grouping_sets_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grouping_sets_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_option" ):
                listener.enterGrouping_sets_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_option" ):
                listener.exitGrouping_sets_option(self)




    def grouping_sets_option(self):

        localctx = TeradataSQLDDLParser.Grouping_sets_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_grouping_sets_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9975
            self.match(TeradataSQLDDLParser.GROUPING)
            self.state = 9976
            self.match(TeradataSQLDDLParser.SETS)
            self.state = 9977
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 9978
            self.grouping_sets_spec()
            self.state = 9983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9979
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 9980
                self.grouping_sets_spec()
                self.state = 9985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9986
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Ordinary_grouping_setContext,0)


        def empty_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Empty_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grouping_sets_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_spec" ):
                listener.enterGrouping_sets_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_spec" ):
                listener.exitGrouping_sets_spec(self)




    def grouping_sets_spec(self):

        localctx = TeradataSQLDDLParser.Grouping_sets_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_grouping_sets_spec)
        try:
            self.state = 9993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1311,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9988
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9989
                self.empty_grouping_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9990
                self.rollup_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9991
                self.cube_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9992
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataSQLDDLParser.HAVING, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = TeradataSQLDDLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9995
            self.match(TeradataSQLDDLParser.HAVING)
            self.state = 9996
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataSQLDDLParser.QUALIFY, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = TeradataSQLDDLParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9998
            self.match(TeradataSQLDDLParser.QUALIFY)
            self.state = 9999
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(TeradataSQLDDLParser.SAMPLE, 0)

        def sample_fraction_description(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Sample_fraction_descriptionContext,0)


        def sample_count_description(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Sample_count_descriptionContext,0)


        def sample_when_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Sample_when_clauseContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDDLParser.REPLACEMENT, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDDLParser.RANDOMIZED, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDDLParser.ALLOCATION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = TeradataSQLDDLParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10001
            self.match(TeradataSQLDDLParser.SAMPLE)
            self.state = 10004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 10002
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 10003
                self.match(TeradataSQLDDLParser.REPLACEMENT)


            self.state = 10008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==872:
                self.state = 10006
                self.match(TeradataSQLDDLParser.RANDOMIZED)
                self.state = 10007
                self.match(TeradataSQLDDLParser.ALLOCATION)


            self.state = 10013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1197]:
                self.state = 10010
                self.sample_fraction_description()
                pass
            elif token in [1194]:
                self.state = 10011
                self.sample_count_description()
                pass
            elif token in [470]:
                self.state = 10012
                self.sample_when_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_fraction_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._float_literal = None # Float_literalContext
            self.fraction_description = list() # of Float_literalContexts

        def float_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Float_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Float_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sample_fraction_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_fraction_description" ):
                listener.enterSample_fraction_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_fraction_description" ):
                listener.exitSample_fraction_description(self)




    def sample_fraction_description(self):

        localctx = TeradataSQLDDLParser.Sample_fraction_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_sample_fraction_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10015
            localctx._float_literal = self.float_literal()
            localctx.fraction_description.append(localctx._float_literal)
            self.state = 10020
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10016
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10017
                    localctx._float_literal = self.float_literal()
                    localctx.fraction_description.append(localctx._float_literal) 
                self.state = 10022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1315,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_count_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.count_description = list() # of Integer_literalContexts

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sample_count_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_count_description" ):
                listener.enterSample_count_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_count_description" ):
                listener.exitSample_count_description(self)




    def sample_count_description(self):

        localctx = TeradataSQLDDLParser.Sample_count_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_sample_count_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10023
            localctx._integer_literal = self.integer_literal()
            localctx.count_description.append(localctx._integer_literal)
            self.state = 10028
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10024
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10025
                    localctx._integer_literal = self.integer_literal()
                    localctx.count_description.append(localctx._integer_literal) 
                self.state = 10030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1316,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_when_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDDLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.THEN)
            else:
                return self.getToken(TeradataSQLDDLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDDLParser.ELSE, 0)

        def sample_fraction_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sample_fraction_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sample_fraction_descriptionContext,i)


        def sample_count_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Sample_count_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Sample_count_descriptionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_sample_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_when_clause" ):
                listener.enterSample_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_when_clause" ):
                listener.exitSample_when_clause(self)




    def sample_when_clause(self):

        localctx = TeradataSQLDDLParser.Sample_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_sample_when_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10038 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10031
                self.match(TeradataSQLDDLParser.WHEN)
                self.state = 10032
                self.logical_expr(0)
                self.state = 10033
                self.match(TeradataSQLDDLParser.THEN)
                self.state = 10036
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 10034
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 10035
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10040 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 10047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 10042
                self.match(TeradataSQLDDLParser.ELSE)
                self.state = 10045
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 10043
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 10044
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 10049
            self.match(TeradataSQLDDLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expand_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expand_expr = None # Scalar_exprContext
            self.expand_column_alias = None # Alias_nameContext
            self.period_expression = None # Scalar_exprContext

        def EXPAND(self):
            return self.getToken(TeradataSQLDDLParser.EXPAND, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_literalContext,0)


        def ANCHOR(self):
            return self.getToken(TeradataSQLDDLParser.ANCHOR, 0)

        def anchor_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Anchor_nameContext,0)


        def PERIOD(self):
            return self.getToken(TeradataSQLDDLParser.PERIOD, 0)

        def AT(self):
            return self.getToken(TeradataSQLDDLParser.AT, 0)

        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Time_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_expand_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpand_on_clause" ):
                listener.enterExpand_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpand_on_clause" ):
                listener.exitExpand_on_clause(self)




    def expand_on_clause(self):

        localctx = TeradataSQLDDLParser.Expand_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_expand_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10051
            self.match(TeradataSQLDDLParser.EXPAND)
            self.state = 10052
            self.match(TeradataSQLDDLParser.ON)
            self.state = 10053
            localctx.expand_expr = self.scalar_expr(0)
            self.state = 10055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 10054
                self.match(TeradataSQLDDLParser.AS)


            self.state = 10057
            localctx.expand_column_alias = self.alias_name()
            self.state = 10071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1325,self._ctx)
            if la_ == 1:
                self.state = 10058
                self.match(TeradataSQLDDLParser.BY)
                self.state = 10069
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 10059
                    self.interval_literal()
                    pass
                elif token in [505]:
                    self.state = 10060
                    self.match(TeradataSQLDDLParser.ANCHOR)
                    self.state = 10062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==853:
                        self.state = 10061
                        self.match(TeradataSQLDDLParser.PERIOD)


                    self.state = 10064
                    self.anchor_name()
                    self.state = 10067
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1323,self._ctx)
                    if la_ == 1:
                        self.state = 10065
                        self.match(TeradataSQLDDLParser.AT)
                        self.state = 10066
                        self.time_literal()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 10075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1326,self._ctx)
            if la_ == 1:
                self.state = 10073
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 10074
                localctx.period_expression = self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TeradataSQLDDLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10077
            self.match(TeradataSQLDDLParser.ORDER)
            self.state = 10078
            self.match(TeradataSQLDDLParser.BY)
            self.state = 10079
            self.order_by_spec_full()
            self.state = 10084
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10080
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10081
                    self.order_by_spec_full() 
                self.state = 10086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_fullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDDLParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDDLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDDLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLDDLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDDLParser.LAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_order_by_spec_full

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_full" ):
                listener.enterOrder_by_spec_full(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_full" ):
                listener.exitOrder_by_spec_full(self)




    def order_by_spec_full(self):

        localctx = TeradataSQLDDLParser.Order_by_spec_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_order_by_spec_full)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10087
            self.scalar_expr(0)
            self.state = 10089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1328,self._ctx)
            if la_ == 1:
                self.state = 10088
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1329,self._ctx)
            if la_ == 1:
                self.state = 10091
                self.match(TeradataSQLDDLParser.NULLS)
                self.state = 10092
                _la = self._input.LA(1)
                if not(_la==156 or _la==731):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_asc_desc_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def ASC(self):
            return self.getToken(TeradataSQLDDLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDDLParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_order_by_spec_asc_desc_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_asc_desc_only" ):
                listener.enterOrder_by_spec_asc_desc_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_asc_desc_only" ):
                listener.exitOrder_by_spec_asc_desc_only(self)




    def order_by_spec_asc_desc_only(self):

        localctx = TeradataSQLDDLParser.Order_by_spec_asc_desc_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_order_by_spec_asc_desc_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10095
            self.scalar_expr(0)
            self.state = 10097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1330,self._ctx)
            if la_ == 1:
                self.state = 10096
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_check_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDDLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_check_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_check_option" ):
                listener.enterWith_check_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_check_option" ):
                listener.exitWith_check_option(self)




    def with_check_option(self):

        localctx = TeradataSQLDDLParser.With_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_with_check_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10099
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 10100
            self.match(TeradataSQLDDLParser.CHECK)
            self.state = 10101
            self.match(TeradataSQLDDLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_logical_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PeriodMeetsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def MEETS(self):
            return self.getToken(TeradataSQLDDLParser.MEETS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodMeets" ):
                listener.enterPeriodMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodMeets" ):
                listener.exitPeriodMeets(self)


    class PeriodImmediatelySucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDDLParser.IMMEDIATELY, 0)
        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDDLParser.SUCCEEDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelySucceeds" ):
                listener.enterPeriodImmediatelySucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelySucceeds" ):
                listener.exitPeriodImmediatelySucceeds(self)


    class PeriodEqualsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def EQUALS(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodEquals" ):
                listener.enterPeriodEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodEquals" ):
                listener.exitPeriodEquals(self)


    class ScalarComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarComparelist" ):
                listener.enterScalarComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarComparelist" ):
                listener.exitScalarComparelist(self)


    class TupleInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.TupleContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)


    class LogicalOrContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,i)

        def OR(self):
            return self.getToken(TeradataSQLDDLParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOr" ):
                listener.enterLogicalOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOr" ):
                listener.exitLogicalOr(self)


    class ScalarInScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInScalar" ):
                listener.enterScalarInScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInScalar" ):
                listener.exitScalarInScalar(self)


    class ScalarCompareScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarCompareScalar" ):
                listener.enterScalarCompareScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarCompareScalar" ):
                listener.exitScalarCompareScalar(self)


    class LogicalNotContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class TupleComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.TupleContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleComparelist" ):
                listener.enterTupleComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleComparelist" ):
                listener.exitTupleComparelist(self)


    class ScalarInListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_listContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInList" ):
                listener.enterScalarInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInList" ):
                listener.exitScalarInList(self)


    class TupleLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.TupleContext,0)

        def LIKE(self):
            return self.getToken(TeradataSQLDDLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDDLParser.ESCAPE, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleLikeList" ):
                listener.enterTupleLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleLikeList" ):
                listener.exitTupleLikeList(self)


    class LogicalAndContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,i)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAnd" ):
                listener.enterLogicalAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAnd" ):
                listener.exitLogicalAnd(self)


    class ScalarInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInSubquery" ):
                listener.enterScalarInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInSubquery" ):
                listener.exitScalarInSubquery(self)


    class PeriodContainsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def CONTAINS(self):
            return self.getToken(TeradataSQLDDLParser.CONTAINS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodContains" ):
                listener.enterPeriodContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodContains" ):
                listener.exitPeriodContains(self)


    class PeriodOverlapsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDDLParser.OVERLAPS, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)
        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodOverlaps" ):
                listener.enterPeriodOverlaps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodOverlaps" ):
                listener.exitPeriodOverlaps(self)


    class BetweenContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDDLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class ParenthesizedLogicalExprContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLogicalExpr" ):
                listener.enterParenthesizedLogicalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLogicalExpr" ):
                listener.exitParenthesizedLogicalExpr(self)


    class PeriodImmediatelyPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDDLParser.IMMEDIATELY, 0)
        def PRECEDES(self):
            return self.getToken(TeradataSQLDDLParser.PRECEDES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelyPrecedes" ):
                listener.enterPeriodImmediatelyPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelyPrecedes" ):
                listener.exitPeriodImmediatelyPrecedes(self)


    class NullCheckContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)
        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCheck" ):
                listener.enterNullCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCheck" ):
                listener.exitNullCheck(self)


    class PeriodPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDDLParser.PRECEDES, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodPrecedes" ):
                listener.enterPeriodPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodPrecedes" ):
                listener.exitPeriodPrecedes(self)


    class ExistsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataSQLDDLParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PeriodSucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDDLParser.SUCCEEDS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodSucceeds" ):
                listener.enterPeriodSucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodSucceeds" ):
                listener.exitPeriodSucceeds(self)


    class ScalarLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDDLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDDLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeList" ):
                listener.enterScalarLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeList" ):
                listener.exitScalarLikeList(self)


    class ScalarLikeScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDDLParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(TeradataSQLDDLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDDLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeScalar" ):
                listener.enterScalarLikeScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeScalar" ):
                listener.exitScalarLikeScalar(self)



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDDLParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 994
        self.enterRecursionRule(localctx, 994, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1369,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDDLParser.ScalarCompareScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 10104
                self.scalar_expr(0)
                self.state = 10105
                localctx.op = self.comparison_operator()
                self.state = 10106
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                localctx = TeradataSQLDDLParser.ScalarComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10108
                self.scalar_expr(0)
                self.state = 10109
                localctx.op = self.comparison_operator()
                self.state = 10110
                self.quantifier()
                self.state = 10111
                self.elements_list()
                self.state = 10115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1331,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10112
                        self.attribute_modification() 
                    self.state = 10117
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1331,self._ctx)

                pass

            elif la_ == 3:
                localctx = TeradataSQLDDLParser.TupleComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10118
                self.tuple_()
                self.state = 10119
                localctx.op = self.comparison_operator()
                self.state = 10120
                self.quantifier()
                self.state = 10121
                self.elements_list()
                self.state = 10125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1332,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10122
                        self.attribute_modification() 
                    self.state = 10127
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1332,self._ctx)

                pass

            elif la_ == 4:
                localctx = TeradataSQLDDLParser.BetweenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10128
                self.scalar_expr(0)
                self.state = 10130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10129
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10132
                self.match(TeradataSQLDDLParser.BETWEEN)
                self.state = 10133
                self.scalar_expr(0)
                self.state = 10134
                self.match(TeradataSQLDDLParser.AND)
                self.state = 10135
                self.scalar_expr(0)
                pass

            elif la_ == 5:
                localctx = TeradataSQLDDLParser.ScalarInListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10137
                self.scalar_expr(0)
                self.state = 10139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10138
                    self.match(TeradataSQLDDLParser.IS)


                self.state = 10142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10141
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10144
                self.match(TeradataSQLDDLParser.IN)
                self.state = 10146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10145
                    self.quantifier()


                self.state = 10148
                self.scalar_expr_list()
                self.state = 10152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1337,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10149
                        self.attribute_modification() 
                    self.state = 10154
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1337,self._ctx)

                pass

            elif la_ == 6:
                localctx = TeradataSQLDDLParser.ScalarInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10155
                self.scalar_expr(0)
                self.state = 10157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10156
                    self.match(TeradataSQLDDLParser.IS)


                self.state = 10160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10159
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10162
                self.match(TeradataSQLDDLParser.IN)
                self.state = 10164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10163
                    self.quantifier()


                self.state = 10166
                self.subquery()
                self.state = 10170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1341,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10167
                        self.attribute_modification() 
                    self.state = 10172
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1341,self._ctx)

                pass

            elif la_ == 7:
                localctx = TeradataSQLDDLParser.ScalarInScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10173
                self.scalar_expr(0)
                self.state = 10175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10174
                    self.match(TeradataSQLDDLParser.IS)


                self.state = 10178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10177
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10180
                self.match(TeradataSQLDDLParser.IN)
                self.state = 10182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10181
                    self.quantifier()


                self.state = 10184
                self.scalar_expr(0)
                self.state = 10188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1345,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10185
                        self.attribute_modification() 
                    self.state = 10190
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1345,self._ctx)

                pass

            elif la_ == 8:
                localctx = TeradataSQLDDLParser.TupleInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10191
                self.tuple_()
                self.state = 10193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10192
                    self.match(TeradataSQLDDLParser.IS)


                self.state = 10196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10195
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10198
                self.match(TeradataSQLDDLParser.IN)
                self.state = 10200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10199
                    self.quantifier()


                self.state = 10202
                self.subquery()
                self.state = 10206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1349,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10203
                        self.attribute_modification() 
                    self.state = 10208
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1349,self._ctx)

                pass

            elif la_ == 9:
                localctx = TeradataSQLDDLParser.ScalarLikeScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10209
                self.scalar_expr(0)
                self.state = 10211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10210
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10213
                self.match(TeradataSQLDDLParser.LIKE)
                self.state = 10214
                self.scalar_expr(0)
                self.state = 10217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1351,self._ctx)
                if la_ == 1:
                    self.state = 10215
                    self.match(TeradataSQLDDLParser.ESCAPE)
                    self.state = 10216
                    self.scalar_expr(0)


                pass

            elif la_ == 10:
                localctx = TeradataSQLDDLParser.ScalarLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10219
                self.scalar_expr(0)
                self.state = 10221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10220
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10223
                self.match(TeradataSQLDDLParser.LIKE)
                self.state = 10224
                self.quantifier()
                self.state = 10225
                self.elements_list()
                self.state = 10229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1353,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10226
                        self.attribute_modification() 
                    self.state = 10231
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1353,self._ctx)

                self.state = 10234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1354,self._ctx)
                if la_ == 1:
                    self.state = 10232
                    self.match(TeradataSQLDDLParser.ESCAPE)
                    self.state = 10233
                    self.scalar_expr(0)


                self.state = 10239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1355,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10236
                        self.attribute_modification() 
                    self.state = 10241
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1355,self._ctx)

                pass

            elif la_ == 11:
                localctx = TeradataSQLDDLParser.TupleLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10242
                self.tuple_()
                self.state = 10244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10243
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10246
                self.match(TeradataSQLDDLParser.LIKE)
                self.state = 10247
                self.quantifier()
                self.state = 10248
                self.elements_list()
                self.state = 10252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1357,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10249
                        self.attribute_modification() 
                    self.state = 10254
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1357,self._ctx)

                self.state = 10257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1358,self._ctx)
                if la_ == 1:
                    self.state = 10255
                    self.match(TeradataSQLDDLParser.ESCAPE)
                    self.state = 10256
                    self.scalar_expr(0)


                self.state = 10262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1359,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10259
                        self.attribute_modification() 
                    self.state = 10264
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1359,self._ctx)

                pass

            elif la_ == 12:
                localctx = TeradataSQLDDLParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10265
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10268
                self.match(TeradataSQLDDLParser.EXISTS)
                self.state = 10269
                self.subquery()
                pass

            elif la_ == 13:
                localctx = TeradataSQLDDLParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10270
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10271
                self.logical_expr(13)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDDLParser.NullCheckContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10272
                self.scalar_expr(0)
                self.state = 10273
                self.match(TeradataSQLDDLParser.IS)
                self.state = 10275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10274
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10277
                self.match(TeradataSQLDDLParser.NULL)
                pass

            elif la_ == 15:
                localctx = TeradataSQLDDLParser.PeriodContainsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10279
                self.scalar_expr(0)
                self.state = 10281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10280
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10283
                self.match(TeradataSQLDDLParser.CONTAINS)
                self.state = 10284
                self.scalar_expr(0)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDDLParser.PeriodEqualsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10286
                self.scalar_expr(0)
                self.state = 10288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10287
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10290
                self.match(TeradataSQLDDLParser.EQUALS)
                self.state = 10291
                self.scalar_expr(0)
                pass

            elif la_ == 17:
                localctx = TeradataSQLDDLParser.PeriodMeetsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10293
                self.scalar_expr(0)
                self.state = 10295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10294
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10297
                self.match(TeradataSQLDDLParser.MEETS)
                self.state = 10298
                self.scalar_expr(0)
                pass

            elif la_ == 18:
                localctx = TeradataSQLDDLParser.PeriodPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10300
                self.scalar_expr(0)
                self.state = 10302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10301
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10304
                self.match(TeradataSQLDDLParser.PRECEDES)
                self.state = 10305
                self.scalar_expr(0)
                pass

            elif la_ == 19:
                localctx = TeradataSQLDDLParser.PeriodSucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10307
                self.scalar_expr(0)
                self.state = 10309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10308
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10311
                self.match(TeradataSQLDDLParser.SUCCEEDS)
                self.state = 10312
                self.scalar_expr(0)
                pass

            elif la_ == 20:
                localctx = TeradataSQLDDLParser.PeriodImmediatelyPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10314
                self.scalar_expr(0)
                self.state = 10315
                self.match(TeradataSQLDDLParser.IMMEDIATELY)
                self.state = 10316
                self.match(TeradataSQLDDLParser.PRECEDES)
                self.state = 10317
                self.scalar_expr(0)
                pass

            elif la_ == 21:
                localctx = TeradataSQLDDLParser.PeriodImmediatelySucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10319
                self.scalar_expr(0)
                self.state = 10320
                self.match(TeradataSQLDDLParser.IMMEDIATELY)
                self.state = 10321
                self.match(TeradataSQLDDLParser.SUCCEEDS)
                self.state = 10322
                self.scalar_expr(0)
                pass

            elif la_ == 22:
                localctx = TeradataSQLDDLParser.PeriodOverlapsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1367,self._ctx)
                if la_ == 1:
                    self.state = 10324
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 10325
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 10326
                    self.scalar_expr(0)
                    self.state = 10327
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10328
                    self.scalar_expr(0)
                    self.state = 10329
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 10331
                    self.subquery()
                    pass


                self.state = 10334
                self.match(TeradataSQLDDLParser.OVERLAPS)
                self.state = 10343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1368,self._ctx)
                if la_ == 1:
                    self.state = 10335
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 10336
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 10337
                    self.scalar_expr(0)
                    self.state = 10338
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10339
                    self.scalar_expr(0)
                    self.state = 10340
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 10342
                    self.subquery()
                    pass


                pass

            elif la_ == 23:
                localctx = TeradataSQLDDLParser.ParenthesizedLogicalExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10345
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10346
                self.logical_expr(0)
                self.state = 10347
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 10359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1371,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 10357
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1370,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDDLParser.LogicalAndContext(self, TeradataSQLDDLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 10351
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 10352
                        self.match(TeradataSQLDDLParser.AND)
                        self.state = 10353
                        self.logical_expr(13)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDDLParser.LogicalOrContext(self, TeradataSQLDDLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 10354
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 10355
                        self.match(TeradataSQLDDLParser.OR)
                        self.state = 10356
                        self.logical_expr(12)
                        pass

             
                self.state = 10361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1371,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Scalar_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_scalar_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JsonMetadataContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.storage_format = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def METADATA(self):
            return self.getToken(TeradataSQLDDLParser.METADATA, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDDLParser.STORAGE_SIZE, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMetadata" ):
                listener.enterJsonMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMetadata" ):
                listener.exitJsonMetadata(self)


    class JsonAsBsonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.validation_specification = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ASBSON(self):
            return self.getToken(TeradataSQLDDLParser.ASBSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBson" ):
                listener.enterJsonAsBson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBson" ):
                listener.exitJsonAsBson(self)


    class VariantTypeConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDDLParser.NEW, 0)
        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDDLParser.VARIANT_TYPE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.AS)
            else:
                return self.getToken(TeradataSQLDDLParser.AS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeConstructor" ):
                listener.enterVariantTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeConstructor" ):
                listener.exitVariantTypeConstructor(self)


    class XMLExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDDLParser.XMLEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExtract" ):
                listener.enterXMLExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExtract" ):
                listener.exitXMLExtract(self)


    class ArrayComparisonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GT, 0)
        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GE, 0)
        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_LT, 0)
        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_LE, 0)
        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_EQ, 0)
        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_NE, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayComparison" ):
                listener.enterArrayComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayComparison" ):
                listener.exitArrayComparison(self)


    class ArrayGetContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_index = None # Scalar_exprContext
            self.other_expr = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GET, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_COMPARE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayGet" ):
                listener.enterArrayGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayGet" ):
                listener.exitArrayGet(self)


    class XMLConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDDLParser.NEW, 0)
        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLConstructor" ):
                listener.enterXMLConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLConstructor" ):
                listener.exitXMLConstructor(self)


    class UDTMethodInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Method_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTMethodInvocation" ):
                listener.enterUDTMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTMethodInvocation" ):
                listener.exitUDTMethodInvocation(self)


    class JsonExtractLargeValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDDLParser.JSONEXTRACTLARGEVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractLargeValue" ):
                listener.enterJsonExtractLargeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractLargeValue" ):
                listener.exitJsonExtractLargeValue(self)


    class JsonRecursiveDescendSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COLON)
            else:
                return self.getToken(TeradataSQLDDLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendSlice" ):
                listener.enterJsonRecursiveDescendSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendSlice" ):
                listener.exitJsonRecursiveDescendSlice(self)


    class FunctionInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_invocation(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_invocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class ScalarSubqueryContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)


    class JsonExistValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDDLParser.EXISTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistValue" ):
                listener.enterJsonExistValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistValue" ):
                listener.exitJsonExistValue(self)


    class ModuloContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def MOD(self):
            return self.getToken(TeradataSQLDDLParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)


    class JsonExtractValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDDLParser.JSONEXTRACTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractValue" ):
                listener.enterJsonExtractValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractValue" ):
                listener.exitJsonExtractValue(self)


    class XMLCreateSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDDLParser.CREATESCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateSchemaBasedXML" ):
                listener.enterXMLCreateSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateSchemaBasedXML" ):
                listener.exitXMLCreateSchemaBasedXML(self)


    class ArrayUpdateContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_UPDATE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdate" ):
                listener.enterArrayUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdate" ):
                listener.exitArrayUpdate(self)


    class JsonExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDDLParser.JSONEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtract" ):
                listener.enterJsonExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtract" ):
                listener.exitJsonExtract(self)


    class MultDivContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)
        def DIV_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.DIV_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)


    class PeriodIntersectContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDDLParser.P_INTERSECT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodIntersect" ):
                listener.enterPeriodIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodIntersect" ):
                listener.exitPeriodIntersect(self)


    class IntervalExprParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval_expr_parenthesized(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_expr_parenthesizedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExprParenthesized" ):
                listener.enterIntervalExprParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExprParenthesized" ):
                listener.exitIntervalExprParenthesized(self)


    class JsonRecursiveDescendAllArrayElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllArrayElements" ):
                listener.enterJsonRecursiveDescendAllArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllArrayElements" ):
                listener.exitJsonRecursiveDescendAllArrayElements(self)


    class UnaryPlusMinusContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusMinus" ):
                listener.enterUnaryPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusMinus" ):
                listener.exitUnaryPlusMinus(self)


    class ConcatenationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def CONCATENATE(self):
            return self.getToken(TeradataSQLDDLParser.CONCATENATE, 0)
        def BROKEN_CONCATENATE(self):
            return self.getToken(TeradataSQLDDLParser.BROKEN_CONCATENATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class PeriodDiffContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def LDIFF(self):
            return self.getToken(TeradataSQLDDLParser.LDIFF, 0)
        def RDIFF(self):
            return self.getToken(TeradataSQLDDLParser.RDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodDiff" ):
                listener.enterPeriodDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodDiff" ):
                listener.exitPeriodDiff(self)


    class ArrayOmethodWithoudArgsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def OCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.OCOUNT, 0)
        def OLIMIT(self):
            return self.getToken(TeradataSQLDDLParser.OLIMIT, 0)
        def OFIRST(self):
            return self.getToken(TeradataSQLDDLParser.OFIRST, 0)
        def OLAST(self):
            return self.getToken(TeradataSQLDDLParser.OLAST, 0)
        def ODELETE(self):
            return self.getToken(TeradataSQLDDLParser.ODELETE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithoudArgs" ):
                listener.enterArrayOmethodWithoudArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithoudArgs" ):
                listener.exitArrayOmethodWithoudArgs(self)


    class PartitioningExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Partitioning_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningExpr" ):
                listener.enterPartitioningExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningExpr" ):
                listener.exitPartitioningExpr(self)


    class XMLExistNodeContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDDLParser.EXISTSNODE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExistNode" ):
                listener.enterXMLExistNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExistNode" ):
                listener.exitXMLExistNode(self)


    class JsonRecursiveDescendArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendArrayElementReference" ):
                listener.enterJsonRecursiveDescendArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendArrayElementReference" ):
                listener.exitJsonRecursiveDescendArrayElementReference(self)


    class DataTypeConversionContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def teradata_type_conversion(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Teradata_type_conversionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeConversion" ):
                listener.enterDataTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeConversion" ):
                listener.exitDataTypeConversion(self)


    class JsonRecursiveDescendObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendObjectMember" ):
                listener.enterJsonRecursiveDescendObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendObjectMember" ):
                listener.exitJsonRecursiveDescendObjectMember(self)


    class IntervalExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)
        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_expr_start_end_phraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)


    class ExponentiationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def EXPONENTIATION(self):
            return self.getToken(TeradataSQLDDLParser.EXPONENTIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)


    class XMLIsSchemaValidatedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDDLParser.ISSCHEMAVALIDATED, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValidated" ):
                listener.enterXMLIsSchemaValidated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValidated" ):
                listener.exitXMLIsSchemaValidated(self)


    class JSONConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_data = None # Scalar_exprContext
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDDLParser.NEW, 0)
        def JSON(self):
            return self.getToken(TeradataSQLDDLParser.JSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def LATIN(self):
            return self.getToken(TeradataSQLDDLParser.LATIN, 0)
        def UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE, 0)
        def BSON(self):
            return self.getToken(TeradataSQLDDLParser.BSON, 0)
        def UBJSON(self):
            return self.getToken(TeradataSQLDDLParser.UBJSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSONConstructor" ):
                listener.enterJSONConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSONConstructor" ):
                listener.exitJSONConstructor(self)


    class JsonSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COLON)
            else:
                return self.getToken(TeradataSQLDDLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonSlice" ):
                listener.enterJsonSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonSlice" ):
                listener.exitJsonSlice(self)


    class XMLIsSchemaValidContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.elem_decl = None # Scalar_exprContext
            self.ns = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDDLParser.ISSCHEMAVALID, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValid" ):
                listener.enterXMLIsSchemaValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValid" ):
                listener.exitXMLIsSchemaValid(self)


    class ArrayAggregationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.matching_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_SUM, 0)
        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_AVG, 0)
        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MAX, 0)
        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MIN, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_COUNT_DISTINCT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAggregation" ):
                listener.enterArrayAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAggregation" ):
                listener.exitArrayAggregation(self)


    class ArrayUpdateStrideContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_UPDATE_STRIDE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)

        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdateStride" ):
                listener.enterArrayUpdateStride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdateStride" ):
                listener.exitArrayUpdateStride(self)


    class LiteralExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)


    class ArrayOmethodWithArgContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def OEXISTS(self):
            return self.getToken(TeradataSQLDDLParser.OEXISTS, 0)
        def OPRIOR(self):
            return self.getToken(TeradataSQLDDLParser.OPRIOR, 0)
        def ONEXT(self):
            return self.getToken(TeradataSQLDDLParser.ONEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithArg" ):
                listener.enterArrayOmethodWithArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithArg" ):
                listener.exitArrayOmethodWithArg(self)


    class JsonRecursiveDescendAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDDLParser.DOT_, i)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllObjectMembers" ):
                listener.enterJsonRecursiveDescendAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllObjectMembers" ):
                listener.exitJsonRecursiveDescendAllObjectMembers(self)


    class XMLCreateNonSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDDLParser.CREATENONSCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateNonSchemaBasedXML" ):
                listener.enterXMLCreateNonSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateNonSchemaBasedXML" ):
                listener.exitXMLCreateNonSchemaBasedXML(self)


    class VariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableReference" ):
                listener.enterVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableReference" ):
                listener.exitVariableReference(self)


    class AddSubContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSub" ):
                listener.enterAddSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSub" ):
                listener.exitAddSub(self)


    class JsonObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)


    class JsonAllElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllElements" ):
                listener.enterJsonAllElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllElements" ):
                listener.exitJsonAllElements(self)


    class ArrayOextendContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OEXTEND(self):
            return self.getToken(TeradataSQLDDLParser.OEXTEND, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOextend" ):
                listener.enterArrayOextend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOextend" ):
                listener.exitArrayOextend(self)


    class ArrayArithmeticContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_ADD, 0)
        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_SUB, 0)
        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MUL, 0)
        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_DIV, 0)
        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MOD, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayArithmetic" ):
                listener.enterArrayArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayArithmetic" ):
                listener.exitArrayArithmetic(self)


    class UDTConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDDLParser.NEW, 0)
        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTConstructor" ):
                listener.enterUDTConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTConstructor" ):
                listener.exitUDTConstructor(self)


    class XMLTransformContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.xsl = None # Scalar_exprContext
            self.parammap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDDLParser.XMLTRANSFORM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLTransform" ):
                listener.enterXMLTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLTransform" ):
                listener.exitXMLTransform(self)


    class DateTimeExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.At_timezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeExpr" ):
                listener.enterDateTimeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeExpr" ):
                listener.exitDateTimeExpr(self)


    class ColumnNameContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)


    class ArrayOtrimContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.num_remove = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def OTRIM(self):
            return self.getToken(TeradataSQLDDLParser.OTRIM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOtrim" ):
                listener.enterArrayOtrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOtrim" ):
                listener.exitArrayOtrim(self)


    class CursorVariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cursor_variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Cursor_variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorVariableReference" ):
                listener.enterCursorVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorVariableReference" ):
                listener.exitCursorVariableReference(self)


    class ParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized" ):
                listener.enterParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized" ):
                listener.exitParenthesized(self)


    class JsonAsBsonTextContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDDLParser.ASBSONTEXT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBsonText" ):
                listener.enterJsonAsBsonText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBsonText" ):
                listener.exitJsonAsBsonText(self)


    class AttributeModificationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeModification" ):
                listener.enterAttributeModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeModification" ):
                listener.exitAttributeModification(self)


    class JsonCombineContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_or_object = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def COMBINE(self):
            return self.getToken(TeradataSQLDDLParser.COMBINE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonCombine" ):
                listener.enterJsonCombine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonCombine" ):
                listener.exitJsonCombine(self)


    class XMLIsDocumentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDDLParser.ISDOCUMENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsDocument" ):
                listener.enterXMLIsDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsDocument" ):
                listener.exitXMLIsDocument(self)


    class MacroParameterReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Macro_parameter_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroParameterReference" ):
                listener.enterMacroParameterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroParameterReference" ):
                listener.exitMacroParameterReference(self)


    class XMLIsContentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def ISCONTENT(self):
            return self.getToken(TeradataSQLDDLParser.ISCONTENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsContent" ):
                listener.enterXMLIsContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsContent" ):
                listener.exitXMLIsContent(self)


    class ArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElementReference" ):
                listener.enterArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElementReference" ):
                listener.exitArrayElementReference(self)


    class ArrayCardinalityContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def CARDINALITY(self):
            return self.getToken(TeradataSQLDDLParser.CARDINALITY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_CONCAT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCardinality" ):
                listener.enterArrayCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCardinality" ):
                listener.exitArrayCardinality(self)


    class CaseExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class JsonKeycountContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.depth = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.KEYCOUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonKeycount" ):
                listener.enterJsonKeycount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonKeycount" ):
                listener.exitJsonKeycount(self)


    class JsonAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllObjectMembers" ):
                listener.enterJsonAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllObjectMembers" ):
                listener.exitJsonAllObjectMembers(self)



    def scalar_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDDLParser.Scalar_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 996
        self.enterRecursionRule(localctx, 996, self.RULE_scalar_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1381,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDDLParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 10363
                self.literal()
                pass

            elif la_ == 2:
                localctx = TeradataSQLDDLParser.UnaryPlusMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10364
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10365
                self.scalar_expr(70)
                pass

            elif la_ == 3:
                localctx = TeradataSQLDDLParser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10366
                self.case_expr()
                pass

            elif la_ == 4:
                localctx = TeradataSQLDDLParser.PartitioningExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10367
                self.partitioning_expr()
                pass

            elif la_ == 5:
                localctx = TeradataSQLDDLParser.ColumnNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10368
                self.column_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLDDLParser.IntervalExprParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10369
                self.interval_expr_parenthesized()
                pass

            elif la_ == 7:
                localctx = TeradataSQLDDLParser.VariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10370
                self.variable_reference()
                pass

            elif la_ == 8:
                localctx = TeradataSQLDDLParser.CursorVariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10371
                self.cursor_variable_reference()
                pass

            elif la_ == 9:
                localctx = TeradataSQLDDLParser.MacroParameterReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10372
                self.macro_parameter_reference()
                pass

            elif la_ == 10:
                localctx = TeradataSQLDDLParser.UDTConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10373
                self.match(TeradataSQLDDLParser.NEW)
                self.state = 10375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1372,self._ctx)
                if la_ == 1:
                    self.state = 10374
                    self.sysudtlib()


                self.state = 10377
                self.udt_name()
                self.state = 10378
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 10379
                    self.scalar_expr(0)
                    self.state = 10384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 10380
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10381
                        self.scalar_expr(0)
                        self.state = 10386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 10389
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                localctx = TeradataSQLDDLParser.JSONConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10391
                self.match(TeradataSQLDDLParser.NEW)
                self.state = 10392
                self.match(TeradataSQLDDLParser.JSON)
                self.state = 10393
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10394
                localctx.json_data = self.scalar_expr(0)
                self.state = 10397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 10395
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10396
                    _la = self._input.LA(1)
                    if not(_la==556 or _la==735 or _la==1010 or _la==1015):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10399
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                localctx = TeradataSQLDDLParser.VariantTypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10401
                self.match(TeradataSQLDDLParser.NEW)
                self.state = 10402
                self.match(TeradataSQLDDLParser.VARIANT_TYPE)
                self.state = 10403
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10404
                self.scalar_expr(0)
                self.state = 10409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 10406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 10405
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 10408
                    self.alias_name()


                self.state = 10421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 10411
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10412
                    self.scalar_expr(0)
                    self.state = 10417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 10414
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==20:
                            self.state = 10413
                            self.match(TeradataSQLDDLParser.AS)


                        self.state = 10416
                        self.alias_name()


                    self.state = 10423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 10424
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                localctx = TeradataSQLDDLParser.XMLConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10426
                self.match(TeradataSQLDDLParser.NEW)
                self.state = 10427
                self.match(TeradataSQLDDLParser.XML)
                self.state = 10428
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10429
                self.scalar_expr(0)
                self.state = 10430
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDDLParser.FunctionInvocationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10432
                self.function_invocation()
                pass

            elif la_ == 15:
                localctx = TeradataSQLDDLParser.ParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10433
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10434
                self.scalar_expr(0)
                self.state = 10435
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDDLParser.ScalarSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10437
                self.subquery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 10845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1407,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 10843
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1406,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDDLParser.ExponentiationContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10440
                        if not self.precpred(self._ctx, 69):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 69)")
                        self.state = 10441
                        self.match(TeradataSQLDDLParser.EXPONENTIATION)
                        self.state = 10442
                        self.scalar_expr(69)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDDLParser.MultDivContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10443
                        if not self.precpred(self._ctx, 68):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 68)")
                        self.state = 10444
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1219 or _la==1220):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10445
                        self.scalar_expr(69)
                        pass

                    elif la_ == 3:
                        localctx = TeradataSQLDDLParser.ModuloContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10446
                        if not self.precpred(self._ctx, 67):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 67)")
                        self.state = 10447
                        self.match(TeradataSQLDDLParser.MOD)
                        self.state = 10448
                        self.scalar_expr(67)
                        pass

                    elif la_ == 4:
                        localctx = TeradataSQLDDLParser.AddSubContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10449
                        if not self.precpred(self._ctx, 66):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 66)")
                        self.state = 10450
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10451
                        self.scalar_expr(67)
                        pass

                    elif la_ == 5:
                        localctx = TeradataSQLDDLParser.ConcatenationContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10452
                        if not self.precpred(self._ctx, 65):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 65)")
                        self.state = 10453
                        _la = self._input.LA(1)
                        if not(_la==1217 or _la==1218):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10454
                        self.scalar_expr(66)
                        pass

                    elif la_ == 6:
                        localctx = TeradataSQLDDLParser.PeriodIntersectContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10455
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 10456
                        self.match(TeradataSQLDDLParser.P_INTERSECT)
                        self.state = 10457
                        self.scalar_expr(58)
                        pass

                    elif la_ == 7:
                        localctx = TeradataSQLDDLParser.PeriodDiffContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10458
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 10459
                        _la = self._input.LA(1)
                        if not(_la==736 or _la==876):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10460
                        self.scalar_expr(57)
                        pass

                    elif la_ == 8:
                        localctx = TeradataSQLDDLParser.DateTimeExprContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10461
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 10462
                        self.at_timezone()
                        pass

                    elif la_ == 9:
                        localctx = TeradataSQLDDLParser.IntervalExprContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10463
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 10464
                        self.match(TeradataSQLDDLParser.MINUS_SIGN)
                        self.state = 10465
                        self.scalar_expr(0)
                        self.state = 10466
                        self.interval_expr_start_end_phrase()
                        pass

                    elif la_ == 10:
                        localctx = TeradataSQLDDLParser.AttributeModificationContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10468
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 10470 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 10469
                                self.attribute_modification()

                            else:
                                raise NoViableAltException(self)
                            self.state = 10472 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1382,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = TeradataSQLDDLParser.JsonObjectMemberContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10474
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 10475
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10476
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 12:
                        localctx = TeradataSQLDDLParser.JsonAllObjectMembersContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10477
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 10478
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10479
                        self.match(TeradataSQLDDLParser.MUL_SIGN)
                        pass

                    elif la_ == 13:
                        localctx = TeradataSQLDDLParser.JsonAllElementsContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10480
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 10481
                        self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
                        self.state = 10482
                        self.match(TeradataSQLDDLParser.MUL_SIGN)
                        self.state = 10483
                        self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = TeradataSQLDDLParser.JsonSliceContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10484
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 10485
                        self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
                        self.state = 10486
                        localctx.from_index = self.integer_literal()
                        self.state = 10487
                        self.match(TeradataSQLDDLParser.COLON)
                        self.state = 10488
                        localctx.to_index = self.integer_literal()
                        self.state = 10491
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 10489
                            self.match(TeradataSQLDDLParser.COLON)
                            self.state = 10490
                            localctx.step_size = self.integer_literal()


                        self.state = 10493
                        self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = TeradataSQLDDLParser.JsonRecursiveDescendObjectMemberContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10495
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 10496
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10497
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10498
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 16:
                        localctx = TeradataSQLDDLParser.JsonRecursiveDescendAllObjectMembersContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10499
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 10500
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10501
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10502
                        self.match(TeradataSQLDDLParser.MUL_SIGN)
                        pass

                    elif la_ == 17:
                        localctx = TeradataSQLDDLParser.JsonRecursiveDescendArrayElementReferenceContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10503
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 10504
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10505
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10506
                        self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
                        self.state = 10507
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 10508
                        self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 18:
                        localctx = TeradataSQLDDLParser.JsonRecursiveDescendAllArrayElementsContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10510
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 10511
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10512
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10513
                        self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
                        self.state = 10514
                        self.match(TeradataSQLDDLParser.MUL_SIGN)
                        self.state = 10515
                        self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 19:
                        localctx = TeradataSQLDDLParser.JsonRecursiveDescendSliceContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10516
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 10517
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10518
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10519
                        self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
                        self.state = 10520
                        localctx.from_index = self.integer_literal()
                        self.state = 10521
                        self.match(TeradataSQLDDLParser.COLON)
                        self.state = 10522
                        localctx.to_index = self.integer_literal()
                        self.state = 10525
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 10523
                            self.match(TeradataSQLDDLParser.COLON)
                            self.state = 10524
                            localctx.step_size = self.integer_literal()


                        self.state = 10527
                        self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 20:
                        localctx = TeradataSQLDDLParser.JsonAsBsonContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10529
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 10530
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10531
                        self.match(TeradataSQLDDLParser.ASBSON)
                        self.state = 10532
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10534
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                            self.state = 10533
                            localctx.validation_specification = self.char_string_literal()


                        self.state = 10536
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 21:
                        localctx = TeradataSQLDDLParser.JsonAsBsonTextContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10537
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 10538
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10539
                        self.match(TeradataSQLDDLParser.ASBSONTEXT)
                        self.state = 10540
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10541
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 22:
                        localctx = TeradataSQLDDLParser.JsonCombineContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10542
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 10543
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10544
                        self.match(TeradataSQLDDLParser.COMBINE)
                        self.state = 10545
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10546
                        self.scalar_expr(0)
                        self.state = 10549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10547
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10548
                            localctx.array_or_object = self.char_string_literal()


                        self.state = 10551
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 23:
                        localctx = TeradataSQLDDLParser.JsonExistValueContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10553
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 10554
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10555
                        self.match(TeradataSQLDDLParser.EXISTVALUE)
                        self.state = 10556
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10557
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10558
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 24:
                        localctx = TeradataSQLDDLParser.JsonExtractContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10560
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 10561
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10562
                        self.match(TeradataSQLDDLParser.JSONEXTRACT)
                        self.state = 10563
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10564
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10565
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 25:
                        localctx = TeradataSQLDDLParser.JsonExtractValueContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10567
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 10568
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10569
                        self.match(TeradataSQLDDLParser.JSONEXTRACTVALUE)
                        self.state = 10570
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10571
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10572
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 26:
                        localctx = TeradataSQLDDLParser.JsonExtractLargeValueContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10574
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 10575
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10576
                        self.match(TeradataSQLDDLParser.JSONEXTRACTLARGEVALUE)
                        self.state = 10577
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10578
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10579
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 27:
                        localctx = TeradataSQLDDLParser.JsonKeycountContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10581
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 10582
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10583
                        self.match(TeradataSQLDDLParser.KEYCOUNT)
                        self.state = 10584
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10585
                        localctx.depth = self.integer_literal()
                        self.state = 10586
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 28:
                        localctx = TeradataSQLDDLParser.JsonMetadataContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10588
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 10589
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10590
                        self.match(TeradataSQLDDLParser.METADATA)
                        self.state = 10591
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10592
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 29:
                        localctx = TeradataSQLDDLParser.JsonMetadataContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10593
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 10594
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10595
                        self.match(TeradataSQLDDLParser.STORAGE_SIZE)
                        self.state = 10596
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10597
                        localctx.storage_format = self.char_string_literal()
                        self.state = 10598
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 30:
                        localctx = TeradataSQLDDLParser.XMLCreateSchemaBasedXMLContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10600
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 10601
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10602
                        self.match(TeradataSQLDDLParser.CREATESCHEMABASEDXML)
                        self.state = 10603
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10604
                        localctx.schema = self.scalar_expr(0)
                        self.state = 10605
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 31:
                        localctx = TeradataSQLDDLParser.XMLCreateNonSchemaBasedXMLContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10607
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 10608
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10609
                        self.match(TeradataSQLDDLParser.CREATENONSCHEMABASEDXML)
                        self.state = 10610
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10611
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 32:
                        localctx = TeradataSQLDDLParser.XMLExistNodeContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10612
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 10613
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10614
                        self.match(TeradataSQLDDLParser.EXISTSNODE)
                        self.state = 10615
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10619
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1387,self._ctx)
                        if la_ == 1:
                            self.state = 10616
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 10617
                            self.match(TeradataSQLDDLParser.COMMA)


                        self.state = 10621
                        localctx.query = self.scalar_expr(0)
                        self.state = 10622
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10623
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 10624
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 33:
                        localctx = TeradataSQLDDLParser.XMLIsContentContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10626
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 10627
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10628
                        self.match(TeradataSQLDDLParser.ISCONTENT)
                        self.state = 10629
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10630
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 34:
                        localctx = TeradataSQLDDLParser.XMLIsDocumentContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10631
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 10632
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10633
                        self.match(TeradataSQLDDLParser.ISDOCUMENT)
                        self.state = 10634
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10635
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 35:
                        localctx = TeradataSQLDDLParser.XMLIsSchemaValidContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10636
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 10637
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10638
                        self.match(TeradataSQLDDLParser.ISSCHEMAVALID)
                        self.state = 10639
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10640
                        localctx.schema = self.scalar_expr(0)
                        self.state = 10641
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10642
                        localctx.elem_decl = self.scalar_expr(0)
                        self.state = 10643
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10644
                        localctx.ns = self.scalar_expr(0)
                        self.state = 10645
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 36:
                        localctx = TeradataSQLDDLParser.XMLIsSchemaValidatedContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10647
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 10648
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10649
                        self.match(TeradataSQLDDLParser.ISSCHEMAVALIDATED)
                        self.state = 10650
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10651
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 37:
                        localctx = TeradataSQLDDLParser.XMLExtractContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10652
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 10653
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10654
                        self.match(TeradataSQLDDLParser.XMLEXTRACT)
                        self.state = 10655
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10659
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1388,self._ctx)
                        if la_ == 1:
                            self.state = 10656
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 10657
                            self.match(TeradataSQLDDLParser.COMMA)


                        self.state = 10661
                        localctx.query = self.scalar_expr(0)
                        self.state = 10662
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10663
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 10664
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 38:
                        localctx = TeradataSQLDDLParser.XMLTransformContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10666
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 10667
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10668
                        self.match(TeradataSQLDDLParser.XMLTRANSFORM)
                        self.state = 10669
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10670
                        localctx.xsl = self.scalar_expr(0)
                        self.state = 10671
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10672
                        localctx.parammap = self.scalar_expr(0)
                        self.state = 10673
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 39:
                        localctx = TeradataSQLDDLParser.ArrayElementReferenceContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10675
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 10676
                        self.match(TeradataSQLDDLParser.OPEN_SQ_BRACKET)
                        self.state = 10677
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 10682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 10678
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10679
                            localctx._integer_literal = self.integer_literal()
                            localctx.index_value.append(localctx._integer_literal)
                            self.state = 10684
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 10685
                        self.match(TeradataSQLDDLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 40:
                        localctx = TeradataSQLDDLParser.ArrayCardinalityContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10687
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 10688
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10689
                        self.match(TeradataSQLDDLParser.CARDINALITY)
                        self.state = 10690
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10692
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10691
                            self.array_scope_reference()


                        self.state = 10694
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 41:
                        localctx = TeradataSQLDDLParser.ArrayCardinalityContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10695
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 10696
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10697
                        self.match(TeradataSQLDDLParser.ARRAY_CONCAT)
                        self.state = 10698
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10699
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 10702
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10700
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10701
                            self.array_scope_reference()


                        self.state = 10704
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 42:
                        localctx = TeradataSQLDDLParser.ArrayComparisonContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10706
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 10707
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10708
                        _la = self._input.LA(1)
                        if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10709
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10710
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 10713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10711
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10712
                            self.array_scope_reference()


                        self.state = 10715
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 43:
                        localctx = TeradataSQLDDLParser.ArrayArithmeticContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10717
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 10718
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10719
                        _la = self._input.LA(1)
                        if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10720
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10721
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 10724
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10722
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10723
                            self.array_scope_reference()


                        self.state = 10726
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 44:
                        localctx = TeradataSQLDDLParser.ArrayAggregationContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10728
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 10729
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10730
                        _la = self._input.LA(1)
                        if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10731
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10733
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10732
                            self.array_scope_reference()


                        self.state = 10735
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 45:
                        localctx = TeradataSQLDDLParser.ArrayAggregationContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10736
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 10737
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10738
                        self.match(TeradataSQLDDLParser.ARRAY_COUNT_DISTINCT)
                        self.state = 10739
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10745
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10740
                            self.array_scope_reference()
                            self.state = 10743
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 10741
                                self.match(TeradataSQLDDLParser.COMMA)
                                self.state = 10742
                                localctx.matching_expr = self.scalar_expr(0)




                        self.state = 10747
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 46:
                        localctx = TeradataSQLDDLParser.ArrayGetContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10748
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 10749
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10750
                        self.match(TeradataSQLDDLParser.ARRAY_GET)
                        self.state = 10751
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10752
                        localctx.array_index = self.scalar_expr(0)
                        self.state = 10753
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 47:
                        localctx = TeradataSQLDDLParser.ArrayGetContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10755
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 10756
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10757
                        self.match(TeradataSQLDDLParser.ARRAY_COMPARE)
                        self.state = 10758
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10759
                        localctx.other_expr = self.scalar_expr(0)
                        self.state = 10766
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10760
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10761
                            self.array_scope_reference()
                            self.state = 10764
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 10762
                                self.match(TeradataSQLDDLParser.COMMA)
                                self.state = 10763
                                localctx.nulls_equal_flag = self.integer_literal()




                        self.state = 10768
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 48:
                        localctx = TeradataSQLDDLParser.ArrayUpdateContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10770
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 10771
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10772
                        self.match(TeradataSQLDDLParser.ARRAY_UPDATE)
                        self.state = 10773
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10774
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 10780
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10775
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10778
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1399,self._ctx)
                            if la_ == 1:
                                self.state = 10776
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 10777
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 10782
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 49:
                        localctx = TeradataSQLDDLParser.ArrayUpdateStrideContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10784
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 10785
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10786
                        self.match(TeradataSQLDDLParser.ARRAY_UPDATE_STRIDE)
                        self.state = 10787
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10788
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 10789
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 10790
                        localctx.stride = self.integer_literal()
                        self.state = 10796
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10791
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 10794
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1401,self._ctx)
                            if la_ == 1:
                                self.state = 10792
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 10793
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 10798
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 50:
                        localctx = TeradataSQLDDLParser.ArrayOmethodWithArgContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10800
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 10801
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10802
                        _la = self._input.LA(1)
                        if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10803
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10804
                        self.scalar_expr(0)
                        self.state = 10805
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 51:
                        localctx = TeradataSQLDDLParser.ArrayOmethodWithoudArgsContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10807
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 10808
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10809
                        _la = self._input.LA(1)
                        if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 179) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10810
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10811
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 52:
                        localctx = TeradataSQLDDLParser.ArrayOextendContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10812
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 10813
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10814
                        self.match(TeradataSQLDDLParser.OEXTEND)
                        self.state = 10815
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10816
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 53:
                        localctx = TeradataSQLDDLParser.ArrayOtrimContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10817
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 10818
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10819
                        self.match(TeradataSQLDDLParser.OTRIM)
                        self.state = 10820
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10822
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10821
                            localctx.num_remove = self.integer_literal()


                        self.state = 10824
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 54:
                        localctx = TeradataSQLDDLParser.UDTMethodInvocationContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10825
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 10826
                        self.match(TeradataSQLDDLParser.DOT_)
                        self.state = 10827
                        self.method_name()
                        self.state = 10828
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 10837
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                            self.state = 10829
                            self.scalar_expr(0)
                            self.state = 10834
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1208:
                                self.state = 10830
                                self.match(TeradataSQLDDLParser.COMMA)
                                self.state = 10831
                                self.scalar_expr(0)
                                self.state = 10836
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 10839
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)
                        pass

                    elif la_ == 55:
                        localctx = TeradataSQLDDLParser.DataTypeConversionContext(self, TeradataSQLDDLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10841
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 10842
                        self.teradata_type_conversion()
                        pass

             
                self.state = 10847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1407,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def tuple_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Tuple_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Tuple_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = TeradataSQLDDLParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10848
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 10849
            self.tuple_attribute()
            self.state = 10852 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10850
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 10851
                self.tuple_attribute()
                self.state = 10854 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 10856
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_tuple_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_attribute" ):
                listener.enterTuple_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_attribute" ):
                listener.exitTuple_attribute(self)




    def tuple_attribute(self):

        localctx = TeradataSQLDDLParser.Tuple_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_tuple_attribute)
        self._la = 0 # Token type
        try:
            self.state = 10873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1412,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10858
                self.scalar_expr(0)
                self.state = 10863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 10860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 10859
                        self.match(TeradataSQLDDLParser.AS)


                    self.state = 10862
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10865
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10866
                self.scalar_expr(0)
                self.state = 10868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 10867
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 10870
                self.alias_name()
                self.state = 10871
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valued_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Valued_case_exprContext,0)


        def searched_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Searched_case_exprContext,0)


        def coalesce_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Coalesce_exprContext,0)


        def nullif_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nullif_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = TeradataSQLDDLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_case_expr)
        try:
            self.state = 10879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1413,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10875
                self.valued_case_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10876
                self.searched_case_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10877
                self.coalesce_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10878
                self.nullif_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valued_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDDLParser.CASE, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDDLParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.THEN)
            else:
                return self.getToken(TeradataSQLDDLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDDLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_valued_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValued_case_expr" ):
                listener.enterValued_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValued_case_expr" ):
                listener.exitValued_case_expr(self)




    def valued_case_expr(self):

        localctx = TeradataSQLDDLParser.Valued_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_valued_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10881
            self.match(TeradataSQLDDLParser.CASE)
            self.state = 10882
            self.scalar_expr(0)
            self.state = 10888 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10883
                self.match(TeradataSQLDDLParser.WHEN)
                self.state = 10884
                self.scalar_expr(0)
                self.state = 10885
                self.match(TeradataSQLDDLParser.THEN)
                self.state = 10886
                self.scalar_expr(0)
                self.state = 10890 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 10894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 10892
                self.match(TeradataSQLDDLParser.ELSE)
                self.state = 10893
                self.scalar_expr(0)


            self.state = 10896
            self.match(TeradataSQLDDLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDDLParser.CASE, 0)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDDLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.THEN)
            else:
                return self.getToken(TeradataSQLDDLParser.THEN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def ELSE(self):
            return self.getToken(TeradataSQLDDLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_searched_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_expr" ):
                listener.enterSearched_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_expr" ):
                listener.exitSearched_case_expr(self)




    def searched_case_expr(self):

        localctx = TeradataSQLDDLParser.Searched_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_searched_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10898
            self.match(TeradataSQLDDLParser.CASE)
            self.state = 10904 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10899
                self.match(TeradataSQLDDLParser.WHEN)
                self.state = 10900
                self.logical_expr(0)
                self.state = 10901
                self.match(TeradataSQLDDLParser.THEN)
                self.state = 10902
                self.scalar_expr(0)
                self.state = 10906 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 10910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 10908
                self.match(TeradataSQLDDLParser.ELSE)
                self.state = 10909
                self.scalar_expr(0)


            self.state = 10912
            self.match(TeradataSQLDDLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coalesce_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(TeradataSQLDDLParser.COALESCE, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_coalesce_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce_expr" ):
                listener.enterCoalesce_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce_expr" ):
                listener.exitCoalesce_expr(self)




    def coalesce_expr(self):

        localctx = TeradataSQLDDLParser.Coalesce_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_coalesce_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10914
            self.match(TeradataSQLDDLParser.COALESCE)
            self.state = 10915
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nullif_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(TeradataSQLDDLParser.NULLIF, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_nullif_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullif_expr" ):
                listener.enterNullif_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullif_expr" ):
                listener.exitNullif_expr(self)




    def nullif_expr(self):

        localctx = TeradataSQLDDLParser.Nullif_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_nullif_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10917
            self.match(TeradataSQLDDLParser.NULLIF)
            self.state = 10918
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 10919
            self.scalar_expr(0)
            self.state = 10920
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 10921
            self.scalar_expr(0)
            self.state = 10922
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MINUS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_interval_expr_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_base" ):
                listener.enterInterval_expr_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_base" ):
                listener.exitInterval_expr_base(self)




    def interval_expr_base(self):

        localctx = TeradataSQLDDLParser.Interval_expr_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_interval_expr_base)
        try:
            self.state = 10934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10924
                self.scalar_expr(0)
                self.state = 10925
                self.match(TeradataSQLDDLParser.MINUS_SIGN)
                self.state = 10926
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10928
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10929
                self.scalar_expr(0)
                self.state = 10930
                self.match(TeradataSQLDDLParser.MINUS_SIGN)
                self.state = 10931
                self.scalar_expr(0)
                self.state = 10932
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def interval_expr_base(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_expr_baseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_expr_start_end_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_interval_expr_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_parenthesized" ):
                listener.enterInterval_expr_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_parenthesized" ):
                listener.exitInterval_expr_parenthesized(self)




    def interval_expr_parenthesized(self):

        localctx = TeradataSQLDDLParser.Interval_expr_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_interval_expr_parenthesized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10936
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 10937
            self.interval_expr_base()
            self.state = 10938
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 10939
            self.interval_expr_start_end_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_start_end_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_seconds_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDDLParser.YEAR, 0)

        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.MONTH)
            else:
                return self.getToken(TeradataSQLDDLParser.MONTH, i)

        def DAY(self):
            return self.getToken(TeradataSQLDDLParser.DAY, 0)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.HOUR)
            else:
                return self.getToken(TeradataSQLDDLParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.MINUTE)
            else:
                return self.getToken(TeradataSQLDDLParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.SECOND)
            else:
                return self.getToken(TeradataSQLDDLParser.SECOND, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_interval_expr_start_end_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_start_end_phrase" ):
                listener.enterInterval_expr_start_end_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_start_end_phrase" ):
                listener.exitInterval_expr_start_end_phrase(self)




    def interval_expr_start_end_phrase(self):

        localctx = TeradataSQLDDLParser.Interval_expr_start_end_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_interval_expr_start_end_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10941
            _la = self._input.LA(1)
            if not(_la==106 or _la==185 or _la==248 or _la==258 or _la==368 or _la==478):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1420,self._ctx)
            if la_ == 1:
                self.state = 10942
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10943
                localctx.precision = self.integer_literal()
                self.state = 10946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 10944
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 10945
                    localctx.fractional_seconds_precision = self.integer_literal()


                self.state = 10948
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 10960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1422,self._ctx)
            if la_ == 1:
                self.state = 10952
                self.match(TeradataSQLDDLParser.TO)
                self.state = 10953
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1421,self._ctx)
                if la_ == 1:
                    self.state = 10954
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 10955
                    localctx.fractional_seconds_precision = self.integer_literal()
                    self.state = 10956
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Aggregate_functionContext,0)


        def analytic_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Analytic_functionContext,0)


        def arithmetic_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Arithmetic_functionContext,0)


        def array_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Array_functionContext,0)


        def attribute_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_functionContext,0)


        def byte_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Byte_functionContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Builtin_functionContext,0)


        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Calendar_functionContext,0)


        def comparison_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Comparison_functionContext,0)


        def compression_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Compression_functionContext,0)


        def conversion_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Conversion_functionContext,0)


        def date_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Date_functionContext,0)


        def hash_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hash_functionContext,0)


        def lob_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Lob_functionContext,0)


        def map_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Map_functionContext,0)


        def nvl_funtion(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Nvl_funtionContext,0)


        def period_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Period_functionContext,0)


        def regexp_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Regexp_functionContext,0)


        def string_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.String_functionContext,0)


        def json_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Json_functionContext,0)


        def xml_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_functionContext,0)


        def other_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Other_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_invocation" ):
                listener.enterFunction_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_invocation" ):
                listener.exitFunction_invocation(self)




    def function_invocation(self):

        localctx = TeradataSQLDDLParser.Function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_function_invocation)
        try:
            self.state = 10984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1423,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10962
                self.aggregate_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10963
                self.analytic_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10964
                self.arithmetic_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10965
                self.array_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10966
                self.attribute_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10967
                self.byte_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10968
                self.builtin_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10969
                self.calendar_function()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10970
                self.comparison_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10971
                self.compression_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10972
                self.conversion_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10973
                self.date_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10974
                self.hash_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10975
                self.lob_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10976
                self.map_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10977
                self.nvl_funtion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 10978
                self.period_function()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 10979
                self.regexp_function()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 10980
                self.string_function()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 10981
                self.json_function()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 10982
                self.xml_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 10983
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_aggregate_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ListAggContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDDLParser.LISTAGG, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAgg" ):
                listener.enterListAgg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAgg" ):
                listener.exitListAgg(self)


    class AggOneArgContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def AVERAGE(self):
            return self.getToken(TeradataSQLDDLParser.AVERAGE, 0)
        def AVG(self):
            return self.getToken(TeradataSQLDDLParser.AVG, 0)
        def AVE(self):
            return self.getToken(TeradataSQLDDLParser.AVE, 0)
        def KURTOSIS(self):
            return self.getToken(TeradataSQLDDLParser.KURTOSIS, 0)
        def MAXIMUM(self):
            return self.getToken(TeradataSQLDDLParser.MAXIMUM, 0)
        def MAX(self):
            return self.getToken(TeradataSQLDDLParser.MAX, 0)
        def MIN(self):
            return self.getToken(TeradataSQLDDLParser.MIN, 0)
        def MINIMUM(self):
            return self.getToken(TeradataSQLDDLParser.MINIMUM, 0)
        def SKEW(self):
            return self.getToken(TeradataSQLDDLParser.SKEW, 0)
        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDDLParser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDDLParser.STDDEV_SAMP, 0)
        def SUM(self):
            return self.getToken(TeradataSQLDDLParser.SUM, 0)
        def VAR_POP(self):
            return self.getToken(TeradataSQLDDLParser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDDLParser.VAR_SAMP, 0)
        def DISTINCT(self):
            return self.getToken(TeradataSQLDDLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggOneArg" ):
                listener.enterAggOneArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggOneArg" ):
                listener.exitAggOneArg(self)


    class AggTwoArgsContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def CORR(self):
            return self.getToken(TeradataSQLDDLParser.CORR, 0)
        def COVAR_POP(self):
            return self.getToken(TeradataSQLDDLParser.COVAR_POP, 0)
        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDDLParser.COVAR_SAMP, 0)
        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDDLParser.REGR_AVGX, 0)
        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDDLParser.REGR_AVGY, 0)
        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDDLParser.REGR_COUNT, 0)
        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDDLParser.REGR_INTERCEPT, 0)
        def REGR_R2(self):
            return self.getToken(TeradataSQLDDLParser.REGR_R2, 0)
        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SLOPE, 0)
        def REGR_SXX(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SXX, 0)
        def REGR_SXY(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SXY, 0)
        def REGR_SYY(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SYY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggTwoArgs" ):
                listener.enterAggTwoArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggTwoArgs" ):
                listener.exitAggTwoArgs(self)


    class GroupingContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(TeradataSQLDDLParser.GROUPING, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping" ):
                listener.enterGrouping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping" ):
                listener.exitGrouping(self)


    class AggCountContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDDLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(TeradataSQLDDLParser.COUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)

        def DISTINCT(self):
            return self.getToken(TeradataSQLDDLParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(TeradataSQLDDLParser.UNIQUE, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggCount" ):
                listener.enterAggCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggCount" ):
                listener.exitAggCount(self)



    def aggregate_function(self):

        localctx = TeradataSQLDDLParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 11021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 213, 238, 239, 244, 246, 380, 396, 397, 403, 461, 462]:
                localctx = TeradataSQLDDLParser.AggOneArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 10986
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 10838081537) != 0) or ((((_la - 380)) & ~0x3f) == 0 and ((1 << (_la - 380)) & 8585217) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10987
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==121:
                    self.state = 10988
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10991
                self.scalar_expr(0)
                self.state = 10992
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [80, 84, 85, 327, 328, 329, 330, 331, 332, 333, 334, 335]:
                localctx = TeradataSQLDDLParser.AggTwoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 10994
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10995
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 10996
                self.scalar_expr(0)
                self.state = 10997
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 10998
                self.scalar_expr(0)
                self.state = 10999
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [83]:
                localctx = TeradataSQLDDLParser.AggCountContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 11001
                self.match(TeradataSQLDDLParser.COUNT)
                self.state = 11002
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11008
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 11003
                    self.match(TeradataSQLDDLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 121, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 448, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 11005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==121 or _la==448:
                        self.state = 11004
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==121 or _la==448):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 11007
                    self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11010
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [175]:
                localctx = TeradataSQLDDLParser.GroupingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 11011
                self.match(TeradataSQLDDLParser.GROUPING)
                self.state = 11012
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11013
                self.scalar_expr(0)
                self.state = 11014
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1081]:
                localctx = TeradataSQLDDLParser.ListAggContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 11016
                self.match(TeradataSQLDDLParser.LISTAGG)
                self.state = 11017
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11018
                self.scalar_expr(0)
                self.state = 11019
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value_expr = None # Scalar_exprContext
            self.offset_value = None # Scalar_exprContext
            self.default_value_expr = None # Scalar_exprContext
            self.width = None # Integer_literalContext
            self.quantile_literal = None # Integer_literalContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_specContext,0)


        def AVERAGE(self):
            return self.getToken(TeradataSQLDDLParser.AVERAGE, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDDLParser.AVG, 0)

        def AVE(self):
            return self.getToken(TeradataSQLDDLParser.AVE, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLDDLParser.MAXIMUM, 0)

        def MAX(self):
            return self.getToken(TeradataSQLDDLParser.MAX, 0)

        def MIN(self):
            return self.getToken(TeradataSQLDDLParser.MIN, 0)

        def MINIMUM(self):
            return self.getToken(TeradataSQLDDLParser.MINIMUM, 0)

        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDDLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDDLParser.STDDEV_SAMP, 0)

        def SUM(self):
            return self.getToken(TeradataSQLDDLParser.SUM, 0)

        def VAR_POP(self):
            return self.getToken(TeradataSQLDDLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDDLParser.VAR_SAMP, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CORR(self):
            return self.getToken(TeradataSQLDDLParser.CORR, 0)

        def COVAR_POP(self):
            return self.getToken(TeradataSQLDDLParser.COVAR_POP, 0)

        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDDLParser.COVAR_SAMP, 0)

        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDDLParser.REGR_AVGX, 0)

        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDDLParser.REGR_AVGY, 0)

        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDDLParser.REGR_COUNT, 0)

        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDDLParser.REGR_INTERCEPT, 0)

        def REGR_R2(self):
            return self.getToken(TeradataSQLDDLParser.REGR_R2, 0)

        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SLOPE, 0)

        def REGR_SXX(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SXX, 0)

        def REGR_SXY(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SXY, 0)

        def REGR_SYY(self):
            return self.getToken(TeradataSQLDDLParser.REGR_SYY, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLDDLParser.COUNT, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def CSUM(self):
            return self.getToken(TeradataSQLDDLParser.CSUM, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_asc_desc_onlyContext,i)


        def window_spec_without_rows(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_spec_without_rowsContext,0)


        def CUME_DIST(self):
            return self.getToken(TeradataSQLDDLParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDDLParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(TeradataSQLDDLParser.PERCENT_RANK, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDDLParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDDLParser.LAST_VALUE, 0)

        def ignore_respect_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Ignore_respect_nullsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Ignore_respect_nullsContext,i)


        def LAG(self):
            return self.getToken(TeradataSQLDDLParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDDLParser.LEAD, 0)

        def MAVG(self):
            return self.getToken(TeradataSQLDDLParser.MAVG, 0)

        def MDIFF(self):
            return self.getToken(TeradataSQLDDLParser.MDIFF, 0)

        def MSUM(self):
            return self.getToken(TeradataSQLDDLParser.MSUM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def MEDIAN(self):
            return self.getToken(TeradataSQLDDLParser.MEDIAN, 0)

        def MLINREG(self):
            return self.getToken(TeradataSQLDDLParser.MLINREG, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDDLParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDDLParser.GROUP, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDDLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDDLParser.PERCENTILE_DISC, 0)

        def QUANTILE(self):
            return self.getToken(TeradataSQLDDLParser.QUANTILE, 0)

        def RANK(self):
            return self.getToken(TeradataSQLDDLParser.RANK, 0)

        def window_spec_with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_spec_with_tiesContext,0)


        def ROW_NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.ROW_NUMBER, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDDLParser.LISTAGG, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_analytic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_function" ):
                listener.enterAnalytic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_function" ):
                listener.exitAnalytic_function(self)




    def analytic_function(self):

        localctx = TeradataSQLDDLParser.Analytic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_analytic_function)
        self._la = 0 # Token type
        try:
            self.state = 11172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1439,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11023
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 323) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & 131) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11024
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11025
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11026
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11027
                self.window_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11029
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11030
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11031
                self.scalar_expr(0)
                self.state = 11032
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11033
                self.scalar_expr(0)
                self.state = 11034
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11035
                self.window_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11037
                self.match(TeradataSQLDDLParser.COUNT)
                self.state = 11038
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11041
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 11039
                    self.match(TeradataSQLDDLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 11040
                    localctx.value_expr = self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11043
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11044
                self.window_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11045
                self.match(TeradataSQLDDLParser.CSUM)
                self.state = 11046
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11047
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11050 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11048
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11049
                    self.order_by_spec_asc_desc_only()
                    self.state = 11052 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11054
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11056
                _la = self._input.LA(1)
                if not(_la==301 or _la==603 or _la==630):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11057
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11058
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11059
                self.window_spec_without_rows()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11060
                _la = self._input.LA(1)
                if not(_la==673 or _la==734):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11061
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11062
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 11063
                    self.ignore_respect_nulls()


                self.state = 11066
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11067
                self.window_spec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11069
                _la = self._input.LA(1)
                if not(_la==730 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11070
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11071
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 11072
                    self.ignore_respect_nulls()


                self.state = 11081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11075
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11076
                    localctx.offset_value = self.scalar_expr(0)
                    self.state = 11079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11077
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11078
                        localctx.default_value_expr = self.scalar_expr(0)




                self.state = 11083
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 11084
                    self.ignore_respect_nulls()


                self.state = 11087
                self.window_spec_without_rows()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11089
                _la = self._input.LA(1)
                if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 8388625) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11090
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11091
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11092
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11093
                localctx.width = self.integer_literal()
                self.state = 11096 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11094
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11095
                    self.order_by_spec_asc_desc_only()
                    self.state = 11098 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11100
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11102
                self.match(TeradataSQLDDLParser.MEDIAN)
                self.state = 11103
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11104
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11105
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11107
                self.match(TeradataSQLDDLParser.MLINREG)
                self.state = 11108
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11109
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11110
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11111
                localctx.width = self.integer_literal()
                self.state = 11112
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11113
                self.order_by_spec_asc_desc_only()
                self.state = 11114
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11116
                _la = self._input.LA(1)
                if not(_la==851 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11117
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11118
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11119
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11120
                self.match(TeradataSQLDDLParser.WITHIN)
                self.state = 11121
                self.match(TeradataSQLDDLParser.GROUP)
                self.state = 11122
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11123
                self.match(TeradataSQLDDLParser.ORDER)
                self.state = 11124
                self.match(TeradataSQLDDLParser.BY)
                self.state = 11125
                self.order_by_spec_full()
                self.state = 11130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11126
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11127
                    self.order_by_spec_full()
                    self.state = 11132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11133
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11135
                self.match(TeradataSQLDDLParser.QUANTILE)
                self.state = 11136
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11137
                localctx.quantile_literal = self.integer_literal()
                self.state = 11140 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11138
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11139
                    self.order_by_spec_asc_desc_only()
                    self.state = 11142 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11144
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11146
                self.match(TeradataSQLDDLParser.RANK)
                self.state = 11147
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11148
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11149
                self.window_spec_with_ties()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 11150
                self.match(TeradataSQLDDLParser.RANK)
                self.state = 11151
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11152
                self.order_by_spec_asc_desc_only()
                self.state = 11157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11153
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11154
                    self.order_by_spec_asc_desc_only()
                    self.state = 11159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11160
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 11162
                self.match(TeradataSQLDDLParser.ROW_NUMBER)
                self.state = 11163
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11164
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11165
                self.window_spec_without_rows()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 11166
                self.match(TeradataSQLDDLParser.LISTAGG)
                self.state = 11167
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11168
                self.scalar_expr(0)
                self.state = 11169
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11170
                self.window_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def ABS(self):
            return self.getToken(TeradataSQLDDLParser.ABS, 0)

        def DEGREES(self):
            return self.getToken(TeradataSQLDDLParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(TeradataSQLDDLParser.RADIANS, 0)

        def EXP(self):
            return self.getToken(TeradataSQLDDLParser.EXP, 0)

        def SQRT(self):
            return self.getToken(TeradataSQLDDLParser.SQRT, 0)

        def COSH(self):
            return self.getToken(TeradataSQLDDLParser.COSH, 0)

        def SINH(self):
            return self.getToken(TeradataSQLDDLParser.SINH, 0)

        def TANH(self):
            return self.getToken(TeradataSQLDDLParser.TANH, 0)

        def ACOSH(self):
            return self.getToken(TeradataSQLDDLParser.ACOSH, 0)

        def ASINH(self):
            return self.getToken(TeradataSQLDDLParser.ASINH, 0)

        def ATANH(self):
            return self.getToken(TeradataSQLDDLParser.ATANH, 0)

        def LN(self):
            return self.getToken(TeradataSQLDDLParser.LN, 0)

        def LOG(self):
            return self.getToken(TeradataSQLDDLParser.LOG, 0)

        def NULLIFZERO(self):
            return self.getToken(TeradataSQLDDLParser.NULLIFZERO, 0)

        def ZEROIFNULL(self):
            return self.getToken(TeradataSQLDDLParser.ZEROIFNULL, 0)

        def COS(self):
            return self.getToken(TeradataSQLDDLParser.COS, 0)

        def SIN(self):
            return self.getToken(TeradataSQLDDLParser.SIN, 0)

        def TAN(self):
            return self.getToken(TeradataSQLDDLParser.TAN, 0)

        def ACOS(self):
            return self.getToken(TeradataSQLDDLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TeradataSQLDDLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TeradataSQLDDLParser.ATAN, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDDLParser.CEILING, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDDLParser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDDLParser.FLOOR, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDDLParser.SIGN, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def MOD(self):
            return self.getToken(TeradataSQLDDLParser.MOD, 0)

        def RANDOM(self):
            return self.getToken(TeradataSQLDDLParser.RANDOM, 0)

        def ATAN2(self):
            return self.getToken(TeradataSQLDDLParser.ATAN2, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDDLParser.POWER, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SyslibContext,0)


        def ROUND(self):
            return self.getToken(TeradataSQLDDLParser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDDLParser.TRUNC, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDDLParser.WIDTH, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDDLParser.BUCKET, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_arithmetic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_function" ):
                listener.enterArithmetic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_function" ):
                listener.exitArithmetic_function(self)




    def arithmetic_function(self):

        localctx = TeradataSQLDDLParser.Arithmetic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_arithmetic_function)
        self._la = 0 # Token type
        try:
            self.state = 11228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1444,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11174
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 180355272) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4294967299) != 0) or _la==147 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482049) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & 3458764513820540929) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 393217) != 0) or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11175
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11176
                self.scalar_expr(0)
                self.state = 11177
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11179
                    self.td_sysfnlib()


                self.state = 11182
                _la = self._input.LA(1)
                if not(_la==565 or _la==566 or _la==674 or _la==926):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11183
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11184
                self.scalar_expr(0)
                self.state = 11185
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11187
                _la = self._input.LA(1)
                if not(_la==26 or _la==251 or _la==319):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11188
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11189
                self.scalar_expr(0)
                self.state = 11190
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11191
                self.scalar_expr(0)
                self.state = 11192
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11194
                    self.syslib()


                self.state = 11197
                self.match(TeradataSQLDDLParser.POWER)
                self.state = 11198
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11199
                self.scalar_expr(0)
                self.state = 11200
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11201
                self.scalar_expr(0)
                self.state = 11202
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11204
                    self.td_sysfnlib()


                self.state = 11207
                _la = self._input.LA(1)
                if not(_la==894 or _la==1006):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11208
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11209
                self.scalar_expr(0)
                self.state = 11212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11210
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11211
                    self.scalar_expr(0)


                self.state = 11214
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11216
                self.match(TeradataSQLDDLParser.WIDTH)
                self.state = 11217
                self.match(TeradataSQLDDLParser.BUCKET)
                self.state = 11218
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11219
                self.scalar_expr(0)
                self.state = 11220
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11221
                self.scalar_expr(0)
                self.state = 11222
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11223
                self.scalar_expr(0)
                self.state = 11224
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11225
                self.scalar_expr(0)
                self.state = 11226
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element_value_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext
            self.array_expr_1 = None # Scalar_exprContext
            self.array_expr_2 = None # Scalar_exprContext
            self.matching_expr = None # Scalar_exprContext
            self.array_index = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.index_value_or_bound = None # Scalar_exprContext
            self.num_spaces = None # Scalar_exprContext
            self.num_elements = None # Scalar_exprContext

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_AGG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDDLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDDLParser.DESC, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDDLParser.CARDINALITY, 0)

        def array_scope_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Array_scope_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Array_scope_referenceContext,i)


        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_CONCAT, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GT, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_LT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_LE, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_EQ, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_NE, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_ADD, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_SUB, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MUL, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_DIV, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MOD, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_SUM, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_AVG, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_MIN, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_GET, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_COMPARE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_UPDATE_STRIDE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDDLParser.OEXISTS, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDDLParser.OPRIOR, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDDLParser.ONEXT, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.OCOUNT, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDDLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDDLParser.OLAST, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDDLParser.ODELETE, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDDLParser.OEXTEND, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDDLParser.OTRIM, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_array_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_function" ):
                listener.enterArray_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_function" ):
                listener.exitArray_function(self)




    def array_function(self):

        localctx = TeradataSQLDDLParser.Array_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_array_function)
        self._la = 0 # Token type
        try:
            self.state = 11443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1469,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11230
                    self.td_sysfnlib()


                self.state = 11233
                self.match(TeradataSQLDDLParser.ARRAY_AGG)
                self.state = 11234
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11235
                localctx.element_value_expr = self.scalar_expr(0)
                self.state = 11242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 11236
                    self.match(TeradataSQLDDLParser.ORDER)
                    self.state = 11237
                    self.match(TeradataSQLDDLParser.BY)
                    self.state = 11238
                    self.scalar_expr(0)
                    self.state = 11240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21 or _la==116:
                        self.state = 11239
                        _la = self._input.LA(1)
                        if not(_la==21 or _la==116):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 11244
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11245
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11246
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11248
                self.match(TeradataSQLDDLParser.CARDINALITY)
                self.state = 11249
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11250
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11251
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11252
                    self.array_scope_reference()
                    self.state = 11257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11258
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11260
                self.match(TeradataSQLDDLParser.ARRAY_CONCAT)
                self.state = 11261
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11262
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11263
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11264
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11265
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11266
                    self.array_scope_reference()
                    self.state = 11271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11272
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11274
                _la = self._input.LA(1)
                if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11275
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11276
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11277
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11278
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11279
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11280
                    self.array_scope_reference()
                    self.state = 11285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11286
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11288
                _la = self._input.LA(1)
                if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11289
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11290
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11291
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11292
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11293
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11294
                    self.array_scope_reference()
                    self.state = 11299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11300
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11302
                _la = self._input.LA(1)
                if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11303
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11304
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11305
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11306
                    self.array_scope_reference()
                    self.state = 11311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11312
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11314
                self.match(TeradataSQLDDLParser.ARRAY_COUNT_DISTINCT)
                self.state = 11315
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11316
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1455,self._ctx)
                if la_ == 1:
                    self.state = 11321
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1453,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 11317
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 11318
                            self.array_scope_reference() 
                        self.state = 11323
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1453,self._ctx)

                    self.state = 11324
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11325
                    localctx.matching_expr = self.scalar_expr(0)

                elif la_ == 2:
                    self.state = 11328 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11326
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11327
                        self.array_scope_reference()
                        self.state = 11330 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break



                self.state = 11334
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11336
                self.match(TeradataSQLDDLParser.ARRAY_GET)
                self.state = 11337
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11338
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11339
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11340
                localctx.array_index = self.scalar_expr(0)
                self.state = 11341
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11343
                self.match(TeradataSQLDDLParser.ARRAY_COMPARE)
                self.state = 11344
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11345
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11346
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11347
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11350 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 11348
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 11349
                            self.array_scope_reference()

                        else:
                            raise NoViableAltException(self)
                        self.state = 11352 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1456,self._ctx)

                    self.state = 11354
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11355
                    localctx.nulls_equal_flag = self.integer_literal()


                self.state = 11359
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11361
                self.match(TeradataSQLDDLParser.ARRAY_UPDATE)
                self.state = 11362
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11363
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11364
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11365
                localctx.new_value = self.scalar_expr(0)
                self.state = 11374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1459,self._ctx)
                if la_ == 1:
                    self.state = 11368 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11366
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11367
                        self.array_scope_reference()
                        self.state = 11370 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 11372
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11373
                    localctx.array_index = self.scalar_expr(0)


                self.state = 11376
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11378
                self.match(TeradataSQLDDLParser.ARRAY_UPDATE_STRIDE)
                self.state = 11379
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11380
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11381
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11382
                localctx.new_value = self.scalar_expr(0)
                self.state = 11383
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11384
                localctx.stride = self.integer_literal()
                self.state = 11393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1461,self._ctx)
                if la_ == 1:
                    self.state = 11387 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11385
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11386
                        self.array_scope_reference()
                        self.state = 11389 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 11391
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11392
                    localctx.array_index = self.scalar_expr(0)


                self.state = 11395
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11397
                    self.td_sysfnlib()


                self.state = 11400
                _la = self._input.LA(1)
                if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11401
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11402
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11403
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11404
                localctx.index_value_or_bound = self.scalar_expr(0)
                self.state = 11405
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11407
                    self.td_sysfnlib()


                self.state = 11410
                _la = self._input.LA(1)
                if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 51) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11411
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11412
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11413
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 11416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11415
                    self.td_sysfnlib()


                self.state = 11418
                self.match(TeradataSQLDDLParser.OEXTEND)
                self.state = 11419
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11420
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11421
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11422
                    localctx.num_spaces = self.scalar_expr(0)
                    self.state = 11425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11423
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11424
                        localctx.index_value_or_bound = self.scalar_expr(0)




                self.state = 11429
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 11432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11431
                    self.td_sysfnlib()


                self.state = 11434
                self.match(TeradataSQLDDLParser.OTRIM)
                self.state = 11435
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11436
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11437
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11438
                    localctx.num_elements = self.scalar_expr(0)


                self.state = 11441
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.character_set_name = None # LiteralContext

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.BIT_LENGTH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def BYTE(self):
            return self.getToken(TeradataSQLDDLParser.BYTE, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLDDLParser.BYTES, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDDLParser.CHAR, 0)

        def CHARS(self):
            return self.getToken(TeradataSQLDDLParser.CHARS, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTER, 0)

        def CHARACTERS(self):
            return self.getToken(TeradataSQLDDLParser.CHARACTERS, 0)

        def MCHARACTERS(self):
            return self.getToken(TeradataSQLDDLParser.MCHARACTERS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def FORMAT(self):
            return self.getToken(TeradataSQLDDLParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDDLParser.TITLE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def OCTET_LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_attribute_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_function" ):
                listener.enterAttribute_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_function" ):
                listener.exitAttribute_function(self)




    def attribute_function(self):

        localctx = TeradataSQLDDLParser.Attribute_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_attribute_function)
        self._la = 0 # Token type
        try:
            self.state = 11485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [546]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11445
                self.match(TeradataSQLDDLParser.BIT_LENGTH)
                self.state = 11446
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11447
                self.scalar_expr(0)
                self.state = 11450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11448
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11449
                    localctx.character_set_name = self.literal()


                self.state = 11452
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [43, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11454
                _la = self._input.LA(1)
                if not(_la==43 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11455
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11456
                self.scalar_expr(0)
                self.state = 11457
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [52, 53, 55, 56, 57, 58, 240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11459
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 553942754166571008) != 0) or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11460
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11461
                self.scalar_expr(0)
                self.state = 11462
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11464
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 11469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1471,self._ctx)
                if la_ == 1:
                    self.state = 11465
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 11466
                    self.column_name()
                    self.state = 11467
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)


                pass
            elif token in [161, 425, 437]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11471
                _la = self._input.LA(1)
                if not(_la==161 or _la==425 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11472
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11473
                self.scalar_expr(0)
                self.state = 11474
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11476
                self.match(TeradataSQLDDLParser.OCTET_LENGTH)
                self.state = 11477
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11478
                self.scalar_expr(0)
                self.state = 11481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11479
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11480
                    localctx.character_set_name = self.literal()


                self.state = 11483
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Byte_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITNOT(self):
            return self.getToken(TeradataSQLDDLParser.BITNOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def BITAND(self):
            return self.getToken(TeradataSQLDDLParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDDLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDDLParser.BITXOR, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDDLParser.GETBIT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDDLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDDLParser.ROTATERIGHT, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDDLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDDLParser.SHIFTRIGHT, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDDLParser.COUNTSET, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDDLParser.SETBIT, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDDLParser.SUBBITSTR, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDDLParser.TO_BYTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_byte_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByte_function" ):
                listener.enterByte_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByte_function" ):
                listener.exitByte_function(self)




    def byte_function(self):

        localctx = TeradataSQLDDLParser.Byte_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_byte_function)
        self._la = 0 # Token type
        try:
            self.state = 11551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11487
                    self.td_sysfnlib()


                self.state = 11490
                self.match(TeradataSQLDDLParser.BITNOT)
                self.state = 11491
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11492
                self.scalar_expr(0)
                self.state = 11493
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11495
                    self.td_sysfnlib()


                self.state = 11498
                _la = self._input.LA(1)
                if not(((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 13) != 0) or _la==682 or ((((_la - 892)) & ~0x3f) == 0 and ((1 << (_la - 892)) & 12884901891) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11499
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11500
                self.scalar_expr(0)
                self.state = 11501
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11502
                self.scalar_expr(0)
                self.state = 11503
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11505
                    self.td_sysfnlib()


                self.state = 11508
                self.match(TeradataSQLDDLParser.COUNTSET)
                self.state = 11509
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11510
                self.scalar_expr(0)
                self.state = 11513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11511
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11512
                    self.scalar_expr(0)


                self.state = 11515
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11517
                    self.td_sysfnlib()


                self.state = 11520
                self.match(TeradataSQLDDLParser.SETBIT)
                self.state = 11521
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11522
                self.scalar_expr(0)
                self.state = 11523
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11524
                self.scalar_expr(0)
                self.state = 11527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11525
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11526
                    self.scalar_expr(0)


                self.state = 11529
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11531
                    self.td_sysfnlib()


                self.state = 11534
                self.match(TeradataSQLDDLParser.SUBBITSTR)
                self.state = 11535
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11536
                self.scalar_expr(0)
                self.state = 11537
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11538
                self.scalar_expr(0)
                self.state = 11539
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11540
                self.scalar_expr(0)
                self.state = 11541
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11543
                    self.td_sysfnlib()


                self.state = 11546
                self.match(TeradataSQLDDLParser.TO_BYTE)
                self.state = 11547
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11548
                self.scalar_expr(0)
                self.state = 11549
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDDLParser.ACCOUNT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT_DATE, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDDLParser.CURDATE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.At_timezoneContext,0)


        def CURRENT_ROLE(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT_TIME, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDDLParser.CURTIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Type_precisionContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(TeradataSQLDDLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDDLParser.DATE, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDDLParser.NOW, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLDDLParser.SESSION, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TEMPORAL_TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = TeradataSQLDDLParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_builtin_function)
        try:
            self.state = 11609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11553
                self.match(TeradataSQLDDLParser.ACCOUNT)
                pass
            elif token in [94, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11562
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 11554
                    self.match(TeradataSQLDDLParser.CURRENT_DATE)
                    self.state = 11557
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1483,self._ctx)
                    if la_ == 1:
                        self.state = 11555
                        self.match(TeradataSQLDDLParser.OPEN_PAR)
                        self.state = 11556
                        self.match(TeradataSQLDDLParser.CLOSE_PAR)


                    pass
                elif token in [604]:
                    self.state = 11559
                    self.match(TeradataSQLDDLParser.CURDATE)
                    self.state = 11560
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 11561
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1485,self._ctx)
                if la_ == 1:
                    self.state = 11564
                    self.at_timezone()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11567
                self.match(TeradataSQLDDLParser.CURRENT_ROLE)
                pass
            elif token in [96, 605]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11575
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 11568
                    self.match(TeradataSQLDDLParser.CURRENT_TIME)
                    self.state = 11570
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1486,self._ctx)
                    if la_ == 1:
                        self.state = 11569
                        self.type_precision()


                    pass
                elif token in [605]:
                    self.state = 11572
                    self.match(TeradataSQLDDLParser.CURTIME)
                    self.state = 11573
                    self.match(TeradataSQLDDLParser.OPEN_PAR)
                    self.state = 11574
                    self.match(TeradataSQLDDLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1488,self._ctx)
                if la_ == 1:
                    self.state = 11577
                    self.at_timezone()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11580
                self.match(TeradataSQLDDLParser.CURRENT_TIMESTAMP)
                self.state = 11582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1489,self._ctx)
                if la_ == 1:
                    self.state = 11581
                    self.type_precision()


                self.state = 11585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1490,self._ctx)
                if la_ == 1:
                    self.state = 11584
                    self.at_timezone()


                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11587
                self.match(TeradataSQLDDLParser.CURRENT_USER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 7)
                self.state = 11588
                self.match(TeradataSQLDDLParser.DATABASE)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 8)
                self.state = 11589
                self.match(TeradataSQLDDLParser.DATE)
                self.state = 11591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1491,self._ctx)
                if la_ == 1:
                    self.state = 11590
                    self.at_timezone()


                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 9)
                self.state = 11593
                self.match(TeradataSQLDDLParser.NOW)
                self.state = 11594
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11595
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 10)
                self.state = 11596
                self.match(TeradataSQLDDLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 11)
                self.state = 11597
                self.match(TeradataSQLDDLParser.ROLE)
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 12)
                self.state = 11598
                self.match(TeradataSQLDDLParser.SESSION)
                pass
            elif token in [980]:
                self.enterOuterAlt(localctx, 13)
                self.state = 11599
                self.match(TeradataSQLDDLParser.TEMPORAL_DATE)
                pass
            elif token in [981]:
                self.enterOuterAlt(localctx, 14)
                self.state = 11600
                self.match(TeradataSQLDDLParser.TEMPORAL_TIMESTAMP)
                self.state = 11602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1492,self._ctx)
                if la_ == 1:
                    self.state = 11601
                    self.type_precision()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 15)
                self.state = 11604
                self.match(TeradataSQLDDLParser.TIME)
                self.state = 11606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1493,self._ctx)
                if la_ == 1:
                    self.state = 11605
                    self.at_timezone()


                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 16)
                self.state = 11608
                self.match(TeradataSQLDDLParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calendar_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.calendar_for_session = None # Token
            self.calendar_name = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_DAY_OF_YEAR, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.TD_YEAR_OF_CALENDAR, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SyslibContext,0)


        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.MONTHNUMBER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.QUARTERNUMBER_OF_YEAR, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDDLParser.WEEKNUMBER_OF_YEAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDDLParser.YEARNUMBER_OF_CALENDAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_calendar_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalendar_function" ):
                listener.enterCalendar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalendar_function" ):
                listener.exitCalendar_function(self)




    def calendar_function(self):

        localctx = TeradataSQLDDLParser.Calendar_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_calendar_function)
        self._la = 0 # Token type
        try:
            self.state = 11634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [957, 958, 959, 960, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 1088]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11611
                    self.syslib()


                self.state = 11614
                _la = self._input.LA(1)
                if not(((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & 1031695) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11615
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11616
                self.scalar_expr(0)
                self.state = 11617
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [612, 613, 614, 615, 616, 783, 784, 785, 867, 868, 1033, 1034, 1035, 1036, 1064, 1091]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11619
                    self.td_sysfnlib()


                self.state = 11622
                _la = self._input.LA(1)
                if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 31) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0) or _la==867 or _la==868 or ((((_la - 1033)) & ~0x3f) == 0 and ((1 << (_la - 1033)) & 2147483663) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11623
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11624
                self.scalar_expr(0)
                self.state = 11626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11625
                    self.match(TeradataSQLDDLParser.COMMA)


                self.state = 11630
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [274]:
                    self.state = 11628
                    localctx.calendar_for_session = self.match(TeradataSQLDDLParser.NULL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 11629
                    localctx.calendar_name = self.char_string_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 11632
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.search_result = None # Scalar_exprContext
            self.default_result = None # Scalar_exprContext

        def DECODE(self):
            return self.getToken(TeradataSQLDDLParser.DECODE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def GREATEST(self):
            return self.getToken(TeradataSQLDDLParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDDLParser.LEAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_comparison_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_function" ):
                listener.enterComparison_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_function" ):
                listener.exitComparison_function(self)




    def comparison_function(self):

        localctx = TeradataSQLDDLParser.Comparison_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_comparison_function)
        self._la = 0 # Token type
        try:
            self.state = 11664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1503,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11636
                    self.td_sysfnlib()


                self.state = 11639
                self.match(TeradataSQLDDLParser.DECODE)
                self.state = 11640
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11641
                localctx.expr = self.scalar_expr(0)
                self.state = 11642
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11643
                localctx.search_result = self.scalar_expr(0)

                self.state = 11644
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11645
                localctx.search_result = self.scalar_expr(0)
                self.state = 11647
                localctx.default_result = self.scalar_expr(0)
                self.state = 11648
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11650
                    self.td_sysfnlib()


                self.state = 11653
                _la = self._input.LA(1)
                if not(_la==689 or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11654
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11655
                self.scalar_expr(0)
                self.state = 11658 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11656
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11657
                    self.scalar_expr(0)
                    self.state = 11660 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11662
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDDLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDDLParser.CAMSET_L, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDDLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDDLParser.DECAMSET_L, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.JSON_DECOMPRESS, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDDLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDDLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDDLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDDLParser.LZDECOMP_L, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TD_LZ_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDDLParser.TS_DECOMPRESS, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDDLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDDLParser.TRANSUTF8TOUNICODE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_compression_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_function" ):
                listener.enterCompression_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_function" ):
                listener.exitCompression_function(self)




    def compression_function(self):

        localctx = TeradataSQLDDLParser.Compression_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_compression_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 11666
                self.td_sysfnlib()


            self.state = 11669
            _la = self._input.LA(1)
            if not(((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & 1729382256910270467) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & 15) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & 1649267441667) != 0) or ((((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11670
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 11671
            self.scalar_expr(0)
            self.state = 11672
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.in_encoding = None # Char_string_literalContext
            self.out_encoding = None # Char_string_literalContext
            self.string_expr = None # Scalar_exprContext
            self.format_arg = None # Char_string_literalContext
            self.nls_param = None # Char_string_literalContext
            self.numeric_value = None # Scalar_exprContext
            self.interval_unit = None # Scalar_exprContext

        def CAST(self):
            return self.getToken(TeradataSQLDDLParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_type_attributeContext,i)


        def TRYCAST(self):
            return self.getToken(TeradataSQLDDLParser.TRYCAST, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDDLParser.TO_BYTES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDDLParser.FROM_BYTES, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDDLParser.TO_NUMBER, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDDLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDDLParser.TO_DATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDDLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDDLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.TO_YMINTERVAL, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.TO_DSINTERVAL, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.NUMTOYMINTERVAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_conversion_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_function" ):
                listener.enterConversion_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_function" ):
                listener.exitConversion_function(self)




    def conversion_function(self):

        localctx = TeradataSQLDDLParser.Conversion_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_conversion_function)
        self._la = 0 # Token type
        try:
            self.state = 11805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1525,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11674
                self.match(TeradataSQLDDLParser.CAST)
                self.state = 11675
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11676
                localctx.expr = self.scalar_expr(0)
                self.state = 11677
                self.match(TeradataSQLDDLParser.AS)
                self.state = 11690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1507,self._ctx)
                if la_ == 1:
                    self.state = 11678
                    self.data_type()
                    self.state = 11682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                        self.state = 11679
                        self.data_type_attribute()
                        self.state = 11684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 11686 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11685
                        self.data_type_attribute()
                        self.state = 11688 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211):
                            break

                    pass


                self.state = 11692
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11694
                self.match(TeradataSQLDDLParser.TRYCAST)
                self.state = 11695
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11696
                localctx.in_string = self.scalar_expr(0)
                self.state = 11697
                self.match(TeradataSQLDDLParser.AS)
                self.state = 11698
                self.data_type()
                self.state = 11699
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11701
                    self.td_sysfnlib()


                self.state = 11704
                self.match(TeradataSQLDDLParser.TO_BYTES)
                self.state = 11705
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11706
                localctx.in_string = self.scalar_expr(0)
                self.state = 11707
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11708
                localctx.in_encoding = self.char_string_literal()
                self.state = 11709
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11711
                    self.td_sysfnlib()


                self.state = 11714
                self.match(TeradataSQLDDLParser.FROM_BYTES)
                self.state = 11715
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11716
                localctx.in_string = self.scalar_expr(0)
                self.state = 11717
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11718
                localctx.out_encoding = self.char_string_literal()
                self.state = 11719
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11721
                    self.td_sysfnlib()


                self.state = 11724
                self.match(TeradataSQLDDLParser.TO_NUMBER)
                self.state = 11725
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11726
                localctx.string_expr = self.scalar_expr(0)
                self.state = 11736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11727
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11728
                    localctx.format_arg = self.char_string_literal()
                    self.state = 11734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11729
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11732
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 11730
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 11731
                            self.match(TeradataSQLDDLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 11738
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11740
                    self.td_sysfnlib()


                self.state = 11743
                self.match(TeradataSQLDDLParser.TO_CHAR)
                self.state = 11744
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11745
                localctx.expr = self.scalar_expr(0)
                self.state = 11755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11746
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11747
                    localctx.format_arg = self.char_string_literal()
                    self.state = 11753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11748
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 11751
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 11749
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 11750
                            self.match(TeradataSQLDDLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 11757
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11759
                    self.td_sysfnlib()


                self.state = 11762
                self.match(TeradataSQLDDLParser.TO_DATE)
                self.state = 11763
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11764
                localctx.in_string = self.scalar_expr(0)
                self.state = 11765
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11768
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 11766
                    localctx.format_arg = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 11767
                    self.match(TeradataSQLDDLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11770
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11772
                    self.td_sysfnlib()


                self.state = 11775
                _la = self._input.LA(1)
                if not(_la==997 or _la==998):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11776
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11777
                localctx.expr = self.scalar_expr(0)
                self.state = 11783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11778
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11781
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1069, 1070, 1071, 1072, 1203]:
                        self.state = 11779
                        localctx.format_arg = self.char_string_literal()
                        pass
                    elif token in [274]:
                        self.state = 11780
                        self.match(TeradataSQLDDLParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 11785
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11787
                    self.td_sysfnlib()


                self.state = 11790
                _la = self._input.LA(1)
                if not(_la==995 or _la==999):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11791
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11792
                self.scalar_expr(0)
                self.state = 11793
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11795
                    self.td_sysfnlib()


                self.state = 11798
                _la = self._input.LA(1)
                if not(_la==808 or _la==809):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11799
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11800
                localctx.numeric_value = self.scalar_expr(0)
                self.state = 11801
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11802
                localctx.interval_unit = self.scalar_expr(0)
                self.state = 11803
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.day_value = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLDDLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDDLParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDDLParser.WEEK, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDDLParser.DAYOFMONTH, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDDLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDDLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDDLParser.SECOND, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDDLParser.LAST_DAY, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDDLParser.NEXT_DAY, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDDLParser.MONTHS_BETWEEN, 0)

        def ADD_MONTHS(self):
            return self.getToken(TeradataSQLDDLParser.ADD_MONTHS, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDDLParser.OADD_MONTHS, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLDDLParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDDLParser.DAY, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(TeradataSQLDDLParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(TeradataSQLDDLParser.TIMEZONE_MINUTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_date_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_function" ):
                listener.enterDate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_function" ):
                listener.exitDate_function(self)




    def date_function(self):

        localctx = TeradataSQLDDLParser.Date_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_date_function)
        self._la = 0 # Token type
        try:
            self.state = 11857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1530,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11807
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368 or _la==478 or _la==1076 or _la==1099):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11808
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11809
                self.scalar_expr(0)
                self.state = 11810
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11812
                    self.td_sysfnlib()


                self.state = 11815
                self.match(TeradataSQLDDLParser.LAST_DAY)
                self.state = 11816
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11817
                self.scalar_expr(0)
                self.state = 11818
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11820
                    self.td_sysfnlib()


                self.state = 11823
                self.match(TeradataSQLDDLParser.NEXT_DAY)
                self.state = 11824
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11825
                self.scalar_expr(0)
                self.state = 11826
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11827
                localctx.day_value = self.char_string_literal()
                self.state = 11828
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11830
                    self.td_sysfnlib()


                self.state = 11833
                self.match(TeradataSQLDDLParser.MONTHS_BETWEEN)
                self.state = 11834
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11835
                self.scalar_expr(0)
                self.state = 11836
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11837
                self.scalar_expr(0)
                self.state = 11838
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11840
                    self.td_sysfnlib()


                self.state = 11843
                _la = self._input.LA(1)
                if not(_la==9 or _la==814):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11844
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11845
                self.scalar_expr(0)
                self.state = 11846
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11847
                self.scalar_expr(0)
                self.state = 11848
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11850
                self.match(TeradataSQLDDLParser.EXTRACT)
                self.state = 11851
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11852
                _la = self._input.LA(1)
                if not(_la==106 or _la==185 or _la==248 or _la==258 or ((((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 108086391056891905) != 0) or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11853
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 11854
                self.scalar_expr(0)
                self.state = 11855
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def HASHAMP(self):
            return self.getToken(TeradataSQLDDLParser.HASHAMP, 0)

        def HASHBAKAMP(self):
            return self.getToken(TeradataSQLDDLParser.HASHBAKAMP, 0)

        def hash_bucket_number_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Hash_bucket_number_exprContext,0)


        def HASHBUCKET(self):
            return self.getToken(TeradataSQLDDLParser.HASHBUCKET, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def HASHROW(self):
            return self.getToken(TeradataSQLDDLParser.HASHROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hash_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_function" ):
                listener.enterHash_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_function" ):
                listener.exitHash_function(self)




    def hash_function(self):

        localctx = TeradataSQLDDLParser.Hash_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_hash_function)
        self._la = 0 # Token type
        try:
            self.state = 11887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11859
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11860
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11861
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11862
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11863
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11864
                self.hash_bucket_number_expr()
                self.state = 11865
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11867
                self.match(TeradataSQLDDLParser.HASHBUCKET)
                self.state = 11868
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11869
                self.scalar_expr(0)
                self.state = 11870
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11872
                self.match(TeradataSQLDDLParser.HASHROW)
                self.state = 11873
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11874
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11875
                self.match(TeradataSQLDDLParser.HASHROW)
                self.state = 11876
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11877
                self.scalar_expr(0)
                self.state = 11882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11878
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 11879
                    self.scalar_expr(0)
                    self.state = 11884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11885
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDDLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDDLParser.EMPTY_CLOB, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_lob_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_function" ):
                listener.enterLob_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_function" ):
                listener.exitLob_function(self)




    def lob_function(self):

        localctx = TeradataSQLDDLParser.Lob_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_lob_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 11889
                self.td_sysfnlib()


            self.state = 11892
            _la = self._input.LA(1)
            if not(_la==650 or _la==651):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11893
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 11894
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name_string = None # Char_string_literalContext
            self.database_name_string = None # Char_string_literalContext
            self.object_name_string = None # Char_string_literalContext
            self.object_kind_string = None # Char_string_literalContext
            self.map_slot_string = None # Char_string_literalContext
            self.number_of_primary_amps_string = None # Char_string_literalContext
            self.colocation_name_string = None # Char_string_literalContext

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDDLParser.CONTIGUOUSMAPAMPS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SyslibContext,0)


        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDDLParser.SPARSEMAPAMPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDDLParser.SPARSETABLEAMPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_map_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_function" ):
                listener.enterMap_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_function" ):
                listener.exitMap_function(self)




    def map_function(self):

        localctx = TeradataSQLDDLParser.Map_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_map_function)
        self._la = 0 # Token type
        try:
            self.state = 11932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1537,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11896
                    self.syslib()


                self.state = 11899
                self.match(TeradataSQLDDLParser.CONTIGUOUSMAPAMPS)
                self.state = 11900
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11901
                localctx.map_name_string = self.char_string_literal()
                self.state = 11902
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11904
                    self.syslib()


                self.state = 11907
                self.match(TeradataSQLDDLParser.SPARSEMAPAMPS)
                self.state = 11908
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11909
                localctx.database_name_string = self.char_string_literal()
                self.state = 11910
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11911
                localctx.object_name_string = self.char_string_literal()
                self.state = 11912
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11913
                localctx.object_kind_string = self.char_string_literal()
                self.state = 11914
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11915
                localctx.map_slot_string = self.char_string_literal()
                self.state = 11916
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11917
                localctx.number_of_primary_amps_string = self.char_string_literal()
                self.state = 11918
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11919
                localctx.colocation_name_string = self.char_string_literal()
                self.state = 11920
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11922
                    self.syslib()


                self.state = 11925
                self.match(TeradataSQLDDLParser.SPARSETABLEAMPS)
                self.state = 11926
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11927
                localctx.database_name_string = self.char_string_literal()
                self.state = 11928
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11929
                localctx.object_name_string = self.char_string_literal()
                self.state = 11930
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nvl_funtionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NVL(self):
            return self.getToken(TeradataSQLDDLParser.NVL, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def NVL2(self):
            return self.getToken(TeradataSQLDDLParser.NVL2, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_nvl_funtion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvl_funtion" ):
                listener.enterNvl_funtion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvl_funtion" ):
                listener.exitNvl_funtion(self)




    def nvl_funtion(self):

        localctx = TeradataSQLDDLParser.Nvl_funtionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_nvl_funtion)
        self._la = 0 # Token type
        try:
            self.state = 11956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1540,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11934
                    self.td_sysfnlib()


                self.state = 11937
                self.match(TeradataSQLDDLParser.NVL)
                self.state = 11938
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11939
                self.scalar_expr(0)
                self.state = 11940
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11941
                self.scalar_expr(0)
                self.state = 11942
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11944
                    self.td_sysfnlib()


                self.state = 11947
                self.match(TeradataSQLDDLParser.NVL2)
                self.state = 11948
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11949
                self.scalar_expr(0)
                self.state = 11950
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11951
                self.scalar_expr(0)
                self.state = 11952
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 11953
                self.scalar_expr(0)
                self.state = 11954
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDDLParser.BEGIN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def END(self):
            return self.getToken(TeradataSQLDDLParser.END, 0)

        def IS(self):
            return self.getToken(TeradataSQLDDLParser.IS, 0)

        def UNTIL_CHANGED(self):
            return self.getToken(TeradataSQLDDLParser.UNTIL_CHANGED, 0)

        def UNTIL_CLOSED(self):
            return self.getToken(TeradataSQLDDLParser.UNTIL_CLOSED, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDDLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Interval_period_specContext,0)


        def LAST(self):
            return self.getToken(TeradataSQLDDLParser.LAST, 0)

        def NEXT(self):
            return self.getToken(TeradataSQLDDLParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDDLParser.PRIOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_period_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_function" ):
                listener.enterPeriod_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_function" ):
                listener.exitPeriod_function(self)




    def period_function(self):

        localctx = TeradataSQLDDLParser.Period_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_period_function)
        self._la = 0 # Token type
        try:
            self.state = 11999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1542,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11958
                self.match(TeradataSQLDDLParser.BEGIN)
                self.state = 11959
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11960
                self.scalar_expr(0)
                self.state = 11961
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11963
                self.match(TeradataSQLDDLParser.END)
                self.state = 11964
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11965
                self.scalar_expr(0)
                self.state = 11966
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11968
                self.match(TeradataSQLDDLParser.END)
                self.state = 11969
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11970
                self.scalar_expr(0)
                self.state = 11971
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11972
                self.match(TeradataSQLDDLParser.IS)
                self.state = 11974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 11973
                    self.match(TeradataSQLDDLParser.NOT)


                self.state = 11976
                _la = self._input.LA(1)
                if not(_la==450 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11978
                self.match(TeradataSQLDDLParser.INTERVAL)
                self.state = 11979
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11980
                self.scalar_expr(0)
                self.state = 11981
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 11982
                self.interval_period_spec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11984
                self.match(TeradataSQLDDLParser.LAST)
                self.state = 11985
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11986
                self.scalar_expr(0)
                self.state = 11987
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11989
                self.match(TeradataSQLDDLParser.NEXT)
                self.state = 11990
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11991
                self.scalar_expr(0)
                self.state = 11992
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11994
                self.match(TeradataSQLDDLParser.PRIOR)
                self.state = 11995
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 11996
                self.scalar_expr(0)
                self.state = 11997
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regexp_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_string = None # Scalar_exprContext
            self.regexp_string = None # Scalar_exprContext
            self.position_arg = None # Scalar_exprContext
            self.occurrence_arg = None # Scalar_exprContext
            self.match_arg = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.return_opt = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_SUBSTR, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_REPLACE, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_INSTR, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_regexp_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexp_function" ):
                listener.enterRegexp_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexp_function" ):
                listener.exitRegexp_function(self)




    def regexp_function(self):

        localctx = TeradataSQLDDLParser.Regexp_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_regexp_function)
        self._la = 0 # Token type
        try:
            self.state = 12090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1552,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12001
                    self.td_sysfnlib()


                self.state = 12004
                self.match(TeradataSQLDDLParser.REGEXP_SUBSTR)
                self.state = 12005
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12006
                localctx.source_string = self.scalar_expr(0)
                self.state = 12007
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12008
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12009
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12010
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 12011
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12012
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 12013
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12014
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12018
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12020
                    self.td_sysfnlib()


                self.state = 12023
                self.match(TeradataSQLDDLParser.REGEXP_REPLACE)
                self.state = 12024
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12025
                localctx.source_string = self.scalar_expr(0)
                self.state = 12026
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12027
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12028
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12029
                    localctx.replace_string = self.scalar_expr(0)
                    self.state = 12030
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12031
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 12032
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12033
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 12034
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12035
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12039
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12041
                    self.td_sysfnlib()


                self.state = 12044
                self.match(TeradataSQLDDLParser.REGEXP_INSTR)
                self.state = 12045
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12046
                localctx.source_string = self.scalar_expr(0)
                self.state = 12047
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12048
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12049
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12050
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 12051
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12052
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 12053
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12054
                    localctx.return_opt = self.scalar_expr(0)
                    self.state = 12055
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12056
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12060
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12062
                    self.td_sysfnlib()


                self.state = 12065
                self.match(TeradataSQLDDLParser.REGEXP_SIMILAR)
                self.state = 12066
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12067
                localctx.source_string = self.scalar_expr(0)
                self.state = 12068
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12069
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12070
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12071
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12074
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12076
                    self.td_sysfnlib()


                self.state = 12079
                self.match(TeradataSQLDDLParser.REGEXP_SPLIT_TO_TABLE)
                self.state = 12080
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12081
                localctx.in_k = self.scalar_expr(0)
                self.state = 12082
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12083
                localctx.source_string = self.scalar_expr(0)
                self.state = 12084
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12085
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12086
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12087
                localctx.match_arg = self.scalar_expr(0)
                self.state = 12088
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delim_string_value = None # Char_string_literalContext
            self.quote_string_value = None # Char_string_literalContext
            self.data_string_value = None # Scalar_exprContext
            self.ci = None # Integer_literalContext
            self.cd = None # Integer_literalContext
            self.cs = None # Integer_literalContext
            self.ct = None # Integer_literalContext
            self.source_string = None # Scalar_exprContext
            self.search_string = None # Scalar_exprContext
            self.position = None # Scalar_exprContext
            self.occurrence = None # Scalar_exprContext
            self.length = None # Scalar_exprContext
            self.fill_string = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.name_to_search = None # Scalar_exprContext
            self.name_delimiters = None # Scalar_exprContext
            self.value_delimiters = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.from_string = None # Scalar_exprContext
            self.to_string = None # Scalar_exprContext
            self.delimiter = None # Scalar_exprContext
            self.token_num = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext
            self.delimiters = None # Scalar_exprContext
            self.out_k = None # Column_specContext
            self.out_token_num = None # Column_specContext
            self.out_token = None # Column_specContext
            self.string_expr = None # Scalar_exprContext
            self.trim_expr = None # Scalar_exprContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.OPEN_PAR, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, i)

        def ASCII(self):
            return self.getToken(TeradataSQLDDLParser.ASCII, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDDLParser.CHR, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDDLParser.INITCAP, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDDLParser.LENGTH, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDDLParser.REVERSE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def CHAR2HEXINT(self):
            return self.getToken(TeradataSQLDDLParser.CHAR2HEXINT, 0)

        def SOUNDEX(self):
            return self.getToken(TeradataSQLDDLParser.SOUNDEX, 0)

        def STRING_CS(self):
            return self.getToken(TeradataSQLDDLParser.STRING_CS, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDDLParser.VARGRAPHIC, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDDLParser.CONCAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def CSV(self):
            return self.getToken(TeradataSQLDDLParser.CSV, 0)

        def NEW(self):
            return self.getToken(TeradataSQLDDLParser.NEW, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDDLParser.VARIANT, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def CSVLD(self):
            return self.getToken(TeradataSQLDDLParser.CSVLD, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDDLParser.EDITDISTANCE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDDLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLDDLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDDLParser.RIGHT, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDDLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(TeradataSQLDDLParser.LOWER, 0)

        def UPPER(self):
            return self.getToken(TeradataSQLDDLParser.UPPER, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDDLParser.UCASE, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDDLParser.LPAD, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDDLParser.RPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDDLParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDDLParser.RTRIM, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDDLParser.NGRAM, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDDLParser.NVP, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDDLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDDLParser.OTRANSLATE, 0)

        def POSITION(self):
            return self.getToken(TeradataSQLDDLParser.POSITION, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDDLParser.STRTOK, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDDLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_specContext,i)


        def SUBSTRING(self):
            return self.getToken(TeradataSQLDDLParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def SUBSTR(self):
            return self.getToken(TeradataSQLDDLParser.SUBSTR, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def translation_mapping(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Translation_mappingContext,0)


        def TRANSLATE(self):
            return self.getToken(TeradataSQLDDLParser.TRANSLATE, 0)

        def TRANSLATE_CHK(self):
            return self.getToken(TeradataSQLDDLParser.TRANSLATE_CHK, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDDLParser.ERROR, 0)

        def TRIM(self):
            return self.getToken(TeradataSQLDDLParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(TeradataSQLDDLParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(TeradataSQLDDLParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(TeradataSQLDDLParser.LEADING, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = TeradataSQLDDLParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 12405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1587,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12092
                    self.td_sysfnlib()


                self.state = 12095
                _la = self._input.LA(1)
                if not(_la==535 or _la==572 or _la==708 or _la==739 or _la==1084):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12096
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12097
                self.scalar_expr(0)
                self.state = 12098
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12100
                _la = self._input.LA(1)
                if not(_la==54 or _la==383 or _la==399 or _la==465):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12101
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12102
                self.scalar_expr(0)
                self.state = 12103
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12105
                self.match(TeradataSQLDDLParser.CONCAT)
                self.state = 12106
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12107
                self.scalar_expr(0)
                self.state = 12108
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12109
                self.scalar_expr(0)
                self.state = 12114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12110
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12111
                    self.scalar_expr(0)
                    self.state = 12116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12117
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12119
                    self.td_sysfnlib()


                self.state = 12122
                self.match(TeradataSQLDDLParser.CSV)
                self.state = 12123
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12124
                self.match(TeradataSQLDDLParser.NEW)
                self.state = 12125
                self.match(TeradataSQLDDLParser.VARIANT)
                self.state = 12126
                self.match(TeradataSQLDDLParser.TYPE)
                self.state = 12127
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12128
                self.scalar_expr(0)
                self.state = 12133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12129
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12130
                    self.scalar_expr(0)
                    self.state = 12135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12136
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12137
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12138
                localctx.delim_string_value = self.char_string_literal()
                self.state = 12139
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12140
                localctx.quote_string_value = self.char_string_literal()
                self.state = 12141
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12143
                    self.td_sysfnlib()


                self.state = 12146
                self.match(TeradataSQLDDLParser.CSVLD)
                self.state = 12147
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12148
                localctx.data_string_value = self.scalar_expr(0)
                self.state = 12149
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12150
                localctx.delim_string_value = self.char_string_literal()
                self.state = 12151
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12152
                localctx.quote_string_value = self.char_string_literal()
                self.state = 12153
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12155
                    self.td_sysfnlib()


                self.state = 12158
                self.match(TeradataSQLDDLParser.EDITDISTANCE)
                self.state = 12159
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12160
                self.scalar_expr(0)
                self.state = 12161
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12162
                self.scalar_expr(0)
                self.state = 12172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12163
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12164
                    localctx.ci = self.integer_literal()
                    self.state = 12165
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12166
                    localctx.cd = self.integer_literal()
                    self.state = 12167
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12168
                    localctx.cs = self.integer_literal()
                    self.state = 12169
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12170
                    localctx.ct = self.integer_literal()


                self.state = 12174
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12176
                self.match(TeradataSQLDDLParser.INDEX)
                self.state = 12177
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12178
                self.scalar_expr(0)
                self.state = 12179
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12180
                self.scalar_expr(0)
                self.state = 12181
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12183
                    self.td_sysfnlib()


                self.state = 12186
                self.match(TeradataSQLDDLParser.INSTR)
                self.state = 12187
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12188
                localctx.source_string = self.scalar_expr(0)
                self.state = 12189
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12190
                localctx.search_string = self.scalar_expr(0)
                self.state = 12197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12191
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12192
                    localctx.position = self.scalar_expr(0)
                    self.state = 12195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12193
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12194
                        localctx.occurrence = self.scalar_expr(0)




                self.state = 12199
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12201
                    self.td_sysfnlib()


                self.state = 12204
                _la = self._input.LA(1)
                if not(_la==219 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12205
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12206
                localctx.source_string = self.scalar_expr(0)
                self.state = 12207
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12208
                localctx.length = self.scalar_expr(0)
                self.state = 12209
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12211
                self.match(TeradataSQLDDLParser.LOCATE)
                self.state = 12212
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12213
                self.scalar_expr(0)
                self.state = 12214
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12215
                self.scalar_expr(0)
                self.state = 12218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12216
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12217
                    self.scalar_expr(0)


                self.state = 12220
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12222
                _la = self._input.LA(1)
                if not(_la==233 or _la==454 or _la==1011):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12223
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12224
                self.scalar_expr(0)
                self.state = 12225
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 12228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12227
                    self.td_sysfnlib()


                self.state = 12230
                _la = self._input.LA(1)
                if not(_la==746 or _la==898):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12231
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12232
                localctx.source_string = self.scalar_expr(0)
                self.state = 12233
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12234
                localctx.length = self.scalar_expr(0)
                self.state = 12237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12235
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12236
                    localctx.fill_string = self.scalar_expr(0)


                self.state = 12239
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 12242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12241
                    self.td_sysfnlib()


                self.state = 12244
                _la = self._input.LA(1)
                if not(_la==747 or _la==899):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12245
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12246
                self.scalar_expr(0)
                self.state = 12249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12247
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12248
                    self.scalar_expr(0)


                self.state = 12251
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 12254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12253
                    self.td_sysfnlib()


                self.state = 12256
                self.match(TeradataSQLDDLParser.NGRAM)
                self.state = 12257
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12258
                self.scalar_expr(0)
                self.state = 12259
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12260
                self.scalar_expr(0)
                self.state = 12261
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12262
                localctx.length = self.scalar_expr(0)
                self.state = 12265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12263
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12264
                    localctx.position = self.scalar_expr(0)


                self.state = 12267
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 12270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12269
                    self.td_sysfnlib()


                self.state = 12272
                self.match(TeradataSQLDDLParser.NVP)
                self.state = 12273
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12274
                localctx.in_string = self.scalar_expr(0)
                self.state = 12275
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12276
                localctx.name_to_search = self.scalar_expr(0)
                self.state = 12287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12277
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12278
                    localctx.name_delimiters = self.scalar_expr(0)
                    self.state = 12285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12279
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12280
                        localctx.value_delimiters = self.scalar_expr(0)
                        self.state = 12283
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 12281
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 12282
                            localctx.occurrence = self.scalar_expr(0)






                self.state = 12289
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 12292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12291
                    self.td_sysfnlib()


                self.state = 12294
                self.match(TeradataSQLDDLParser.OREPLACE)
                self.state = 12295
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12296
                localctx.source_string = self.scalar_expr(0)
                self.state = 12297
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12298
                localctx.search_string = self.scalar_expr(0)
                self.state = 12301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12299
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12300
                    localctx.replace_string = self.scalar_expr(0)


                self.state = 12303
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 12306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12305
                    self.td_sysfnlib()


                self.state = 12308
                self.match(TeradataSQLDDLParser.OTRANSLATE)
                self.state = 12309
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12310
                localctx.source_string = self.scalar_expr(0)
                self.state = 12311
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12312
                localctx.from_string = self.scalar_expr(0)
                self.state = 12313
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12314
                localctx.to_string = self.scalar_expr(0)
                self.state = 12315
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 12317
                self.match(TeradataSQLDDLParser.POSITION)
                self.state = 12318
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12319
                self.scalar_expr(0)
                self.state = 12320
                self.match(TeradataSQLDDLParser.IN)
                self.state = 12321
                self.scalar_expr(0)
                self.state = 12322
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 12325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12324
                    self.td_sysfnlib()


                self.state = 12327
                self.match(TeradataSQLDDLParser.STRTOK)
                self.state = 12328
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12329
                localctx.in_string = self.scalar_expr(0)
                self.state = 12336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12330
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12331
                    localctx.delimiter = self.scalar_expr(0)
                    self.state = 12334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12332
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12333
                        localctx.token_num = self.scalar_expr(0)




                self.state = 12338
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 12341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12340
                    self.td_sysfnlib()


                self.state = 12343
                self.match(TeradataSQLDDLParser.STRTOK_SPLIT_TO_TABLE)
                self.state = 12344
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12345
                localctx.in_k = self.scalar_expr(0)
                self.state = 12346
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12347
                localctx.in_string = self.scalar_expr(0)
                self.state = 12348
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12349
                localctx.delimiters = self.scalar_expr(0)
                self.state = 12350
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12351
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 12352
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12353
                localctx.out_k = self.column_spec()
                self.state = 12354
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12355
                localctx.out_token_num = self.column_spec()
                self.state = 12356
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12357
                localctx.out_token = self.column_spec()
                self.state = 12358
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 12360
                self.match(TeradataSQLDDLParser.SUBSTRING)
                self.state = 12361
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12362
                self.scalar_expr(0)
                self.state = 12363
                self.match(TeradataSQLDDLParser.FROM)
                self.state = 12364
                self.scalar_expr(0)
                self.state = 12367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 12365
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12366
                    self.scalar_expr(0)


                self.state = 12369
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 12371
                _la = self._input.LA(1)
                if not(_la==401 or _la==402):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12372
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12373
                self.scalar_expr(0)
                self.state = 12374
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12375
                self.scalar_expr(0)
                self.state = 12378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 12376
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12377
                    self.scalar_expr(0)


                self.state = 12380
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 12382
                _la = self._input.LA(1)
                if not(_la==433 or _la==434):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12383
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12384
                localctx.string_expr = self.scalar_expr(0)
                self.state = 12385
                self.match(TeradataSQLDDLParser.USING)
                self.state = 12386
                self.translation_mapping()
                self.state = 12389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 12387
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 12388
                    self.match(TeradataSQLDDLParser.ERROR)


                self.state = 12391
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 12393
                self.match(TeradataSQLDDLParser.TRIM)
                self.state = 12394
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==217 or _la==429:
                    self.state = 12395
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==217 or _la==429):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 12396
                        localctx.trim_expr = self.scalar_expr(0)


                    self.state = 12399
                    self.match(TeradataSQLDDLParser.FROM)


                self.state = 12402
                localctx.string_expr = self.scalar_expr(0)
                self.state = 12403
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_expr = None # Scalar_exprContext
            self.bson_data = None # Scalar_exprContext
            self.check_type = None # Char_string_literalContext
            self.geom_expr = None # Scalar_exprContext
            self.precision = None # Integer_literalContext
            self.geojson_expr = None # Scalar_exprContext
            self.asrid = None # Integer_literalContext
            self.json_string = None # Scalar_exprContext
            self.json_object = None # Scalar_exprContext
            self.json_path = None # Scalar_exprContext
            self.nvp_string = None # Scalar_exprContext
            self.name_delimiters = None # Char_string_literalContext
            self.value_delimiters = None # Char_string_literalContext
            self.ignore_characters = None # Char_string_literalContext

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDDLParser.ARRAY_TO_JSON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Returns_clauseContext,0)


        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDDLParser.BSON_CHECK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDDLParser.DATASIZE, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDDLParser.GEOJSONFROMGEOM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDDLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDDLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDDLParser.JSONGETVALUE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDDLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDDLParser.NVP2JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDDLParser.JSON_AGG, 0)

        def json_param_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Json_param_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Json_param_specContext,i)


        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDDLParser.JSON_COMPOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_function" ):
                listener.enterJson_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_function" ):
                listener.exitJson_function(self)




    def json_function(self):

        localctx = TeradataSQLDDLParser.Json_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_json_function)
        self._la = 0 # Token type
        try:
            self.state = 12529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1605,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12407
                    self.td_sysfnlib()


                self.state = 12410
                self.match(TeradataSQLDDLParser.ARRAY_TO_JSON)
                self.state = 12411
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12412
                localctx.array_expr = self.scalar_expr(0)
                self.state = 12413
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1589,self._ctx)
                if la_ == 1:
                    self.state = 12414
                    self.returns_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12417
                    self.td_sysfnlib()


                self.state = 12420
                self.match(TeradataSQLDDLParser.BSON_CHECK)
                self.state = 12421
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12422
                localctx.bson_data = self.scalar_expr(0)
                self.state = 12425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12423
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12424
                    localctx.check_type = self.char_string_literal()


                self.state = 12427
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12429
                    self.td_sysfnlib()


                self.state = 12432
                self.match(TeradataSQLDDLParser.DATASIZE)
                self.state = 12433
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12434
                self.scalar_expr(0)
                self.state = 12435
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12437
                    self.td_sysfnlib()


                self.state = 12440
                self.match(TeradataSQLDDLParser.GEOJSONFROMGEOM)
                self.state = 12441
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12442
                localctx.geom_expr = self.scalar_expr(0)
                self.state = 12445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12443
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12444
                    localctx.precision = self.integer_literal()


                self.state = 12447
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1595,self._ctx)
                if la_ == 1:
                    self.state = 12448
                    self.returns_clause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12451
                    self.td_sysfnlib()


                self.state = 12454
                self.match(TeradataSQLDDLParser.GEOMFROMGEOJSON)
                self.state = 12455
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12456
                localctx.geojson_expr = self.scalar_expr(0)
                self.state = 12457
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12458
                localctx.asrid = self.integer_literal()
                self.state = 12459
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12461
                    self.td_sysfnlib()


                self.state = 12464
                self.match(TeradataSQLDDLParser.JSON_CHECK)
                self.state = 12465
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12466
                localctx.json_string = self.scalar_expr(0)
                self.state = 12467
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12469
                self.match(TeradataSQLDDLParser.JSONGETVALUE)
                self.state = 12470
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12471
                localctx.json_object = self.scalar_expr(0)
                self.state = 12472
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12473
                localctx.json_path = self.scalar_expr(0)
                self.state = 12474
                self.match(TeradataSQLDDLParser.AS)
                self.state = 12475
                self.data_type()
                self.state = 12476
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12478
                self.match(TeradataSQLDDLParser.JSONMETADATA)
                self.state = 12479
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12480
                localctx.json_object = self.scalar_expr(0)
                self.state = 12481
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12483
                    self.td_sysfnlib()


                self.state = 12486
                self.match(TeradataSQLDDLParser.NVP2JSON)
                self.state = 12487
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12488
                localctx.nvp_string = self.scalar_expr(0)
                self.state = 12497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12489
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12490
                    localctx.name_delimiters = self.char_string_literal()
                    self.state = 12491
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12492
                    localctx.value_delimiters = self.char_string_literal()
                    self.state = 12495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12493
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12494
                        localctx.ignore_characters = self.char_string_literal()




                self.state = 12499
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12501
                self.match(TeradataSQLDDLParser.JSON_AGG)
                self.state = 12502
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12503
                self.json_param_spec()
                self.state = 12508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12504
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12505
                    self.json_param_spec()
                    self.state = 12510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12511
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1602,self._ctx)
                if la_ == 1:
                    self.state = 12512
                    self.returns_clause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12515
                self.match(TeradataSQLDDLParser.JSON_COMPOSE)
                self.state = 12516
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12517
                self.json_param_spec()
                self.state = 12522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12518
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12519
                    self.json_param_spec()
                    self.state = 12524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12525
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1604,self._ctx)
                if la_ == 1:
                    self.state = 12526
                    self.returns_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_data = None # Scalar_exprContext
            self.xquery_expr = None # Char_string_literalContext
            self.xml_value_exp = None # Scalar_exprContext
            self.xml_value_expr = None # Scalar_exprContext
            self.xml_comment = None # Scalar_exprContext
            self.xml_text = None # Scalar_exprContext
            self.xml_schema = None # Scalar_exprContext
            self.xml_uri = None # Char_string_literalContext
            self.xml_valid_element_name = None # Scalar_exprContext
            self.doc_id = None # Scalar_exprContext
            self.source_doc = None # Scalar_exprContext
            self.split_size = None # Scalar_exprContext
            self.split_path = None # Scalar_exprContext
            self._scalar_expr = None # Scalar_exprContext
            self.replication_list = list() # of Scalar_exprContexts
            self.query_string = None # Scalar_exprContext
            self.xslt = None # Scalar_exprContext
            self.xml_string = None # Scalar_exprContext
            self.result_code = None # Scalar_exprContext
            self.document_grouping_spec = None # Scalar_exprContext

        def CREATEXML(self):
            return self.getToken(TeradataSQLDDLParser.CREATEXML, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDDLParser.DATASIZE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysfnlibContext,0)


        def XMLQUERY(self):
            return self.getToken(TeradataSQLDDLParser.XMLQUERY, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_query_argumentContext,0)


        def xml_returning_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_returning_specContext,0)


        def xml_query_on_empty(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_query_on_emptyContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDDLParser.XMLSERIALIZE, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDDLParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDDLParser.CONTENT, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def xml_encoding(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_encodingContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDDLParser.BOM, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDDLParser.VERSION, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDDLParser.XMLDECLARATION, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NO)
            else:
                return self.getToken(TeradataSQLDDLParser.NO, i)

        def INDENT(self):
            return self.getToken(TeradataSQLDDLParser.INDENT, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDDLParser.EXCLUDING, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDDLParser.SIZE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDDLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDDLParser.XMLELEMENT, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDDLParser.NAME, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_namespace_declarationContext,0)


        def xml_attribute_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_attribute_declarationContext,0)


        def xml_value_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_value_declarationContext,0)


        def XMLFOREST(self):
            return self.getToken(TeradataSQLDDLParser.XMLFOREST, 0)

        def xml_forest_element_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Xml_forest_element_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_forest_element_specContext,i)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_content_option_specContext,0)


        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDDLParser.XMLCONCAT, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDDLParser.XMLCOMMENT, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDDLParser.XMLPI, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDDLParser.XMLTEXT, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDDLParser.XMLPARSE, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDDLParser.WHITESPACE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLDDLParser.PRESERVE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDDLParser.STRIP, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDDLParser.XMLVALIDATE, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDDLParser.ACCORDING, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.XMLSCHEMA, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDDLParser.VALUE, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCE, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDDLParser.NAMESPACE, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDDLParser.ELEMENT, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDDLParser.XMLAGG, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDDLParser.XMLSPLIT, 0)

        def td_sysxml(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Td_sysxmlContext,0)


        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDDLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDDLParser.XMLPUBLISH_STREAM, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_function" ):
                listener.enterXml_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_function" ):
                listener.exitXml_function(self)




    def xml_function(self):

        localctx = TeradataSQLDDLParser.Xml_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_xml_function)
        self._la = 0 # Token type
        try:
            self.state = 12778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1639,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12531
                self.match(TeradataSQLDDLParser.CREATEXML)
                self.state = 12532
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12533
                localctx.xml_data = self.scalar_expr(0)
                self.state = 12534
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12536
                    self.td_sysfnlib()


                self.state = 12539
                self.match(TeradataSQLDDLParser.DATASIZE)
                self.state = 12540
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12541
                self.scalar_expr(0)
                self.state = 12542
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12544
                self.match(TeradataSQLDDLParser.XMLQUERY)
                self.state = 12545
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12546
                localctx.xquery_expr = self.char_string_literal()
                self.state = 12548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 12547
                    self.xml_query_argument()


                self.state = 12551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12550
                    self.xml_returning_spec()


                self.state = 12554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==649:
                    self.state = 12553
                    self.xml_query_on_empty()


                self.state = 12556
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12558
                self.match(TeradataSQLDDLParser.XMLSERIALIZE)
                self.state = 12559
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12560
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12561
                localctx.xml_value_exp = self.scalar_expr(0)
                self.state = 12564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 12562
                    self.match(TeradataSQLDDLParser.AS)
                    self.state = 12563
                    self.data_type()


                self.state = 12567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==653:
                    self.state = 12566
                    self.xml_encoding()


                self.state = 12574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 12569
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 12571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 12570
                        self.match(TeradataSQLDDLParser.NO)


                    self.state = 12573
                    self.match(TeradataSQLDDLParser.BOM)


                self.state = 12578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1023:
                    self.state = 12576
                    self.match(TeradataSQLDDLParser.VERSION)
                    self.state = 12577
                    self.char_string_literal()


                self.state = 12582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==661 or _la==701:
                    self.state = 12580
                    _la = self._input.LA(1)
                    if not(_la==661 or _la==701):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12581
                    self.match(TeradataSQLDDLParser.XMLDECLARATION)


                self.state = 12590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 12584
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 12585
                    self.match(TeradataSQLDDLParser.INDENT)
                    pass
                elif token in [704]:
                    self.state = 12586
                    self.match(TeradataSQLDDLParser.INDENT)

                    self.state = 12587
                    self.match(TeradataSQLDDLParser.SIZE)
                    self.state = 12588
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 12589
                    self.integer_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 12592
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12594
                self.match(TeradataSQLDDLParser.XMLDOCUMENT)
                self.state = 12595
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12596
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12597
                    self.xml_returning_spec()


                self.state = 12600
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12602
                self.match(TeradataSQLDDLParser.XMLELEMENT)
                self.state = 12603
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12604
                self.match(TeradataSQLDDLParser.NAME)
                self.state = 12605
                self.column_name()
                self.state = 12608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1618,self._ctx)
                if la_ == 1:
                    self.state = 12606
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12607
                    self.xml_namespace_declaration()


                self.state = 12612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1619,self._ctx)
                if la_ == 1:
                    self.state = 12610
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12611
                    self.xml_attribute_declaration()


                self.state = 12616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12614
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12615
                    self.xml_value_declaration()


                self.state = 12619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12618
                    self.xml_returning_spec()


                self.state = 12621
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12623
                self.match(TeradataSQLDDLParser.XMLFOREST)
                self.state = 12624
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1622,self._ctx)
                if la_ == 1:
                    self.state = 12625
                    self.xml_namespace_declaration()


                self.state = 12636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1624,self._ctx)
                if la_ == 1:
                    self.state = 12628
                    self.xml_forest_element_spec()
                    self.state = 12633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 12629
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12630
                        self.xml_forest_element_spec()
                        self.state = 12635
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 12639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 12638
                    self.xml_content_option_spec()


                self.state = 12642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12641
                    self.xml_returning_spec()


                self.state = 12644
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12645
                self.match(TeradataSQLDDLParser.XMLCONCAT)
                self.state = 12646
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12647
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12648
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12649
                    localctx.xml_value_expr = self.scalar_expr(0)
                    self.state = 12654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12655
                    self.xml_returning_spec()


                self.state = 12658
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12660
                self.match(TeradataSQLDDLParser.XMLCOMMENT)
                self.state = 12661
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12662
                localctx.xml_comment = self.scalar_expr(0)
                self.state = 12664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12663
                    self.xml_returning_spec()


                self.state = 12666
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12668
                self.match(TeradataSQLDDLParser.XMLPI)
                self.state = 12669
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12670
                self.match(TeradataSQLDDLParser.NAME)
                self.state = 12671
                self.column_name()
                self.state = 12674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12672
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12673
                    self.scalar_expr(0)


                self.state = 12677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12676
                    self.xml_returning_spec()


                self.state = 12679
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12681
                self.match(TeradataSQLDDLParser.XMLTEXT)
                self.state = 12682
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12683
                localctx.xml_text = self.scalar_expr(0)
                self.state = 12685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12684
                    self.xml_returning_spec()


                self.state = 12687
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 12689
                self.match(TeradataSQLDDLParser.XMLPARSE)
                self.state = 12690
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12691
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12692
                self.scalar_expr(0)
                self.state = 12693
                _la = self._input.LA(1)
                if not(_la==307 or _la==942):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12694
                self.match(TeradataSQLDDLParser.WHITESPACE)
                self.state = 12695
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 12697
                self.match(TeradataSQLDDLParser.XMLVALIDATE)
                self.state = 12698
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12699
                _la = self._input.LA(1)
                if not(_la==593 or _la==636 or _la==914):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12700
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12701
                self.match(TeradataSQLDDLParser.ACCORDING)
                self.state = 12702
                self.match(TeradataSQLDDLParser.TO)
                self.state = 12703
                self.match(TeradataSQLDDLParser.XMLSCHEMA)
                self.state = 12704
                self.match(TeradataSQLDDLParser.VALUE)
                self.state = 12705
                localctx.xml_schema = self.scalar_expr(0)
                self.state = 12710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [790]:
                    self.state = 12706
                    self.match(TeradataSQLDDLParser.NAMESPACE)
                    self.state = 12707
                    localctx.xml_uri = self.char_string_literal()
                    pass
                elif token in [268]:
                    self.state = 12708
                    self.match(TeradataSQLDDLParser.NO)
                    self.state = 12709
                    self.match(TeradataSQLDDLParser.NAMESPACE)
                    pass
                elif token in [646, 1214]:
                    pass
                else:
                    pass
                self.state = 12714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 12712
                    self.match(TeradataSQLDDLParser.ELEMENT)
                    self.state = 12713
                    localctx.xml_valid_element_name = self.scalar_expr(0)


                self.state = 12716
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 12718
                self.match(TeradataSQLDDLParser.XMLAGG)
                self.state = 12719
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12720
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 12721
                    self.match(TeradataSQLDDLParser.ORDER)
                    self.state = 12722
                    self.match(TeradataSQLDDLParser.BY)
                    self.state = 12723
                    self.order_by_spec_full()
                    self.state = 12728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 12724
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12725
                        self.order_by_spec_full()
                        self.state = 12730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 12734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12733
                    self.xml_returning_spec()


                self.state = 12736
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 12738
                self.match(TeradataSQLDDLParser.XMLSPLIT)
                self.state = 12739
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12740
                localctx.doc_id = self.scalar_expr(0)
                self.state = 12741
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12742
                localctx.source_doc = self.scalar_expr(0)
                self.state = 12743
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12744
                localctx.split_size = self.scalar_expr(0)
                self.state = 12745
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12746
                localctx.split_path = self.scalar_expr(0)
                self.state = 12751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12747
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12748
                    localctx._scalar_expr = self.scalar_expr(0)
                    localctx.replication_list.append(localctx._scalar_expr)
                    self.state = 12753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12754
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 12756
                self.td_sysxml()
                self.state = 12757
                self.match(TeradataSQLDDLParser.XMLPUBLISH)
                self.state = 12758
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12759
                localctx.query_string = self.scalar_expr(0)
                self.state = 12760
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12761
                localctx.xslt = self.scalar_expr(0)
                self.state = 12762
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12763
                localctx.xml_string = self.scalar_expr(0)
                self.state = 12764
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12765
                localctx.result_code = self.scalar_expr(0)
                self.state = 12766
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 12768
                self.td_sysxml()
                self.state = 12769
                self.match(TeradataSQLDDLParser.XMLPUBLISH_STREAM)
                self.state = 12770
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12771
                localctx.query_string = self.scalar_expr(0)
                self.state = 12772
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12773
                localctx.xslt = self.scalar_expr(0)
                self.state = 12774
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12775
                localctx.document_grouping_spec = self.scalar_expr(0)
                self.state = 12776
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Returns_clauseContext,0)


        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = TeradataSQLDDLParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 12802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1643,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12780
                self.function_name()
                self.state = 12781
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12782
                self.scalar_expr(0)
                self.state = 12787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12783
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12784
                    self.scalar_expr(0)
                    self.state = 12789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12790
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12793
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1641,self._ctx)
                if la_ == 1:
                    self.state = 12791
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 12792
                    self.window_spec()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12795
                self.function_name()
                self.state = 12796
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12797
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                self.state = 12800
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1642,self._ctx)
                if la_ == 1:
                    self.state = 12798
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 12799
                    self.window_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_N(self):
            return self.getToken(TeradataSQLDDLParser.CASE_N, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def case_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Case_specContext,0)


        def RANGE_N(self):
            return self.getToken(TeradataSQLDDLParser.RANGE_N, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def BETWEEN(self):
            return self.getToken(TeradataSQLDDLParser.BETWEEN, 0)

        def range_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Range_exprContext,0)


        def range_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Range_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_partitioning_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_expr" ):
                listener.enterPartitioning_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_expr" ):
                listener.exitPartitioning_expr(self)




    def partitioning_expr(self):

        localctx = TeradataSQLDDLParser.Partitioning_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_partitioning_expr)
        self._la = 0 # Token type
        try:
            self.state = 12831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12804
                self.match(TeradataSQLDDLParser.CASE_N)
                self.state = 12805
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12806
                self.logical_expr(0)
                self.state = 12811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1644,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 12807
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 12808
                        self.logical_expr(0) 
                    self.state = 12813
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1644,self._ctx)

                self.state = 12816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12814
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12815
                    self.case_spec()


                self.state = 12818
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12820
                self.match(TeradataSQLDDLParser.RANGE_N)
                self.state = 12821
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 12822
                self.scalar_expr(0)
                self.state = 12823
                self.match(TeradataSQLDDLParser.BETWEEN)
                self.state = 12824
                self.range_expr()
                self.state = 12827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12825
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12826
                    self.range_spec()


                self.state = 12829
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysfnlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDDLParser.TD_SYSFNLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_td_sysfnlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysfnlib" ):
                listener.enterTd_sysfnlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysfnlib" ):
                listener.exitTd_sysfnlib(self)




    def td_sysfnlib(self):

        localctx = TeradataSQLDDLParser.Td_sysfnlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_td_sysfnlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12833
            self.match(TeradataSQLDDLParser.TD_SYSFNLIB)
            self.state = 12834
            self.match(TeradataSQLDDLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysxmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDDLParser.TD_SYSXML, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_td_sysxml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysxml" ):
                listener.enterTd_sysxml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysxml" ):
                listener.exitTd_sysxml(self)




    def td_sysxml(self):

        localctx = TeradataSQLDDLParser.Td_sysxmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_td_sysxml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12836
            self.match(TeradataSQLDDLParser.TD_SYSXML)
            self.state = 12837
            self.match(TeradataSQLDDLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyslibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSLIB(self):
            return self.getToken(TeradataSQLDDLParser.SYSLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_syslib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyslib" ):
                listener.enterSyslib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyslib" ):
                listener.exitSyslib(self)




    def syslib(self):

        localctx = TeradataSQLDDLParser.SyslibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_syslib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12839
            self.match(TeradataSQLDDLParser.SYSLIB)
            self.state = 12840
            self.match(TeradataSQLDDLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_server_dbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDDLParser.TD_SERVER_DB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_td_server_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_server_db" ):
                listener.enterTd_server_db(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_server_db" ):
                listener.exitTd_server_db(self)




    def td_server_db(self):

        localctx = TeradataSQLDDLParser.Td_server_dbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_td_server_db)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12842
            self.match(TeradataSQLDDLParser.TD_SERVER_DB)
            self.state = 12843
            self.match(TeradataSQLDDLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Translation_mappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDDLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDDLParser.UNICODE_TO_LOCALE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_translation_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_mapping" ):
                listener.enterTranslation_mapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_mapping" ):
                listener.exitTranslation_mapping(self)




    def translation_mapping(self):

        localctx = TeradataSQLDDLParser.Translation_mappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_translation_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12845
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def attribute_modification_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Attribute_modification_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Attribute_modification_optionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_attribute_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification" ):
                listener.enterAttribute_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification" ):
                listener.exitAttribute_modification(self)




    def attribute_modification(self):

        localctx = TeradataSQLDDLParser.Attribute_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_attribute_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12847
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 12848
            self.attribute_modification_option()
            self.state = 12853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 12849
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12850
                self.attribute_modification_option()
                self.state = 12855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12856
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDDLParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def STYLE(self):
            return self.getToken(TeradataSQLDDLParser.STYLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_clause" ):
                listener.enterReturns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_clause" ):
                listener.exitReturns_clause(self)




    def returns_clause(self):

        localctx = TeradataSQLDDLParser.Returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_returns_clause)
        try:
            self.state = 12863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1649,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12858
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 12859
                self.data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12860
                self.match(TeradataSQLDDLParser.RETURNS)
                self.state = 12861
                self.match(TeradataSQLDDLParser.STYLE)
                self.state = 12862
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modification_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def teradata_type_conversion_data_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Teradata_type_conversion_data_attributeContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Casespecific_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_phraseContext,0)


        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Uppercase_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_attribute_modification_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification_option" ):
                listener.enterAttribute_modification_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification_option" ):
                listener.exitAttribute_modification_option(self)




    def attribute_modification_option(self):

        localctx = TeradataSQLDDLParser.Attribute_modification_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_attribute_modification_option)
        try:
            self.state = 12869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 262, 425]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12865
                self.teradata_type_conversion_data_attribute()
                pass
            elif token in [49, 88, 272, 1211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12866
                self.casespecific_phrase()
                pass
            elif token in [52, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12867
                self.character_set_phrase()
                pass
            elif token in [438, 455]:
                self.enterOuterAlt(localctx, 4)
                self.state = 12868
                self.uppercase_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def teradata_type_conversion_data_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Teradata_type_conversion_data_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Teradata_type_conversion_data_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def character_set_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Character_set_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Character_set_phraseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_teradata_type_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion" ):
                listener.enterTeradata_type_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion" ):
                listener.exitTeradata_type_conversion(self)




    def teradata_type_conversion(self):

        localctx = TeradataSQLDDLParser.Teradata_type_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_teradata_type_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12871
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 12877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==262 or _la==425:
                self.state = 12872
                self.teradata_type_conversion_data_attribute()
                self.state = 12873
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12880
            self.data_type()
            self.state = 12888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 12881
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 12884
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 262, 425]:
                    self.state = 12882
                    self.teradata_type_conversion_data_attribute()
                    pass
                elif token in [52, 55]:
                    self.state = 12883
                    self.character_set_phrase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12891
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversion_data_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Format_phraseContext,0)


        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_teradata_type_conversion_data_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion_data_attribute" ):
                listener.enterTeradata_type_conversion_data_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion_data_attribute" ):
                listener.exitTeradata_type_conversion_data_attribute(self)




    def teradata_type_conversion_data_attribute(self):

        localctx = TeradataSQLDDLParser.Teradata_type_conversion_data_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_teradata_type_conversion_data_attribute)
        try:
            self.state = 12896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12893
                self.format_phrase()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12894
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12895
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def CASE(self):
            return self.getToken(TeradataSQLDDLParser.CASE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDDLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDDLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_case_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_spec" ):
                listener.enterCase_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_spec" ):
                listener.exitCase_spec(self)




    def case_spec(self):

        localctx = TeradataSQLDDLParser.Case_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_case_spec)
        self._la = 0 # Token type
        try:
            self.state = 12905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12898
                self.match(TeradataSQLDDLParser.NO)
                self.state = 12899
                self.match(TeradataSQLDDLParser.CASE)
                self.state = 12902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 12900
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12901
                    self.match(TeradataSQLDDLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12904
                self.match(TeradataSQLDDLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Range_expr_1Context,0)


        def range_expr_2(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Range_expr_2Context,0)


        def range_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Range_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr" ):
                listener.enterRange_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr" ):
                listener.exitRange_expr(self)




    def range_expr(self):

        localctx = TeradataSQLDDLParser.Range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_range_expr)
        try:
            self.state = 12910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1657,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12907
                self.range_expr_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12908
                self.range_expr_2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12909
                self.range_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Range_expr_1Context,0)


        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Range_expr_3Context,i)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_range_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_list" ):
                listener.enterRange_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_list" ):
                listener.exitRange_list(self)




    def range_list(self):

        localctx = TeradataSQLDDLParser.Range_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_range_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 12912
                self.range_expr_3()
                pass
            elif token in [1219]:
                self.state = 12913
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                self.state = 12916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 12914
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 12915
                    self.scalar_expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 12924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1660,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12920
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 12921
                    self.range_expr_3() 
                self.state = 12926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1660,self._ctx)

            self.state = 12927
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 12928
            self.range_expr_1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.MUL_SIGN, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDDLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_range_expr_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_1" ):
                listener.enterRange_expr_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_1" ):
                listener.exitRange_expr_1(self)




    def range_expr_1(self):

        localctx = TeradataSQLDDLParser.Range_expr_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_range_expr_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12930
            self.scalar_expr(0)
            self.state = 12931
            self.match(TeradataSQLDDLParser.AND)
            self.state = 12934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 12932
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 12933
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 12938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 12936
                self.match(TeradataSQLDDLParser.EACH)
                self.state = 12937
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.MUL_SIGN, i)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_range_expr_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_2" ):
                listener.enterRange_expr_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_2" ):
                listener.exitRange_expr_2(self)




    def range_expr_2(self):

        localctx = TeradataSQLDDLParser.Range_expr_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_range_expr_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12940
            self.match(TeradataSQLDDLParser.MUL_SIGN)
            self.state = 12941
            self.match(TeradataSQLDDLParser.AND)
            self.state = 12944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 12942
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 12943
                self.match(TeradataSQLDDLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDDLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_range_expr_3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_3" ):
                listener.enterRange_expr_3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_3" ):
                listener.exitRange_expr_3(self)




    def range_expr_3(self):

        localctx = TeradataSQLDDLParser.Range_expr_3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_range_expr_3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12946
            self.scalar_expr(0)

            self.state = 12947
            self.match(TeradataSQLDDLParser.AND)
            self.state = 12948
            self.scalar_expr(0)
            self.state = 12952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 12950
                self.match(TeradataSQLDDLParser.EACH)
                self.state = 12951
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDDLParser.RANGE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDDLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDDLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_range_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_spec" ):
                listener.enterRange_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_spec" ):
                listener.exitRange_spec(self)




    def range_spec(self):

        localctx = TeradataSQLDDLParser.Range_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_range_spec)
        self._la = 0 # Token type
        try:
            self.state = 12961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12954
                self.match(TeradataSQLDDLParser.NO)
                self.state = 12955
                self.match(TeradataSQLDDLParser.RANGE)
                self.state = 12958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 12956
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12957
                    self.match(TeradataSQLDDLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12960
                self.match(TeradataSQLDDLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_bucket_number_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sparcemap_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext
            self.contiguousmap_name = None # Char_string_literalContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, i)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDDLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_hash_bucket_number_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_bucket_number_expr" ):
                listener.enterHash_bucket_number_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_bucket_number_expr" ):
                listener.exitHash_bucket_number_expr(self)




    def hash_bucket_number_expr(self):

        localctx = TeradataSQLDDLParser.Hash_bucket_number_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_hash_bucket_number_expr)
        self._la = 0 # Token type
        try:
            self.state = 12982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1668,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12963
                self.scalar_expr(0)
                self.state = 12972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 12964
                    self.match(TeradataSQLDDLParser.MAP)
                    self.state = 12965
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 12966
                    localctx.sparcemap_name = self.char_string_literal()
                    self.state = 12967
                    self.match(TeradataSQLDDLParser.COLOCATE)
                    self.state = 12968
                    self.match(TeradataSQLDDLParser.USING)
                    self.state = 12969
                    self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                    self.state = 12970
                    localctx.colocation_name = self.char_string_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12974
                self.scalar_expr(0)
                self.state = 12975
                self.match(TeradataSQLDDLParser.MAP)
                self.state = 12976
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 12977
                localctx.contiguousmap_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12979
                self.match(TeradataSQLDDLParser.MAP)
                self.state = 12980
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                self.state = 12981
                localctx.contiguousmap_name = self.char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDDLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_partition_byContext,0)


        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_order_byContext,0)


        def window_rows(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_rowsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_window_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec" ):
                listener.enterWindow_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec" ):
                listener.exitWindow_spec(self)




    def window_spec(self):

        localctx = TeradataSQLDDLParser.Window_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_window_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12984
            self.match(TeradataSQLDDLParser.OVER)
            self.state = 12985
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 12987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 12986
                self.window_partition_by()


            self.state = 12990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 12989
                self.window_order_by()


            self.state = 12993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==364:
                self.state = 12992
                self.window_rows()


            self.state = 12995
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_without_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDDLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_partition_byContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_window_spec_without_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_without_rows" ):
                listener.enterWindow_spec_without_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_without_rows" ):
                listener.exitWindow_spec_without_rows(self)




    def window_spec_without_rows(self):

        localctx = TeradataSQLDDLParser.Window_spec_without_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_window_spec_without_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12997
            self.match(TeradataSQLDDLParser.OVER)
            self.state = 12998
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 12999
                self.window_partition_by()


            self.state = 13002
            self.window_order_by()
            self.state = 13003
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_with_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDDLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Window_partition_byContext,0)


        def with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_tiesContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_window_spec_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_with_ties" ):
                listener.enterWindow_spec_with_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_with_ties" ):
                listener.exitWindow_spec_with_ties(self)




    def window_spec_with_ties(self):

        localctx = TeradataSQLDDLParser.Window_spec_with_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_window_spec_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13005
            self.match(TeradataSQLDDLParser.OVER)
            self.state = 13006
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 13007
                self.window_partition_by()


            self.state = 13010
            self.window_order_by()
            self.state = 13012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13011
                self.with_ties()


            self.state = 13014
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(TeradataSQLDDLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_window_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_by" ):
                listener.enterWindow_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_by" ):
                listener.exitWindow_partition_by(self)




    def window_partition_by(self):

        localctx = TeradataSQLDDLParser.Window_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_window_partition_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13016
            self.match(TeradataSQLDDLParser.PARTITION)
            self.state = 13017
            self.match(TeradataSQLDDLParser.BY)
            self.state = 13018
            self.scalar_expr(0)
            self.state = 13023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13019
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13020
                self.scalar_expr(0)
                self.state = 13025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDDLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def RESET(self):
            return self.getToken(TeradataSQLDDLParser.RESET, 0)

        def WHEN(self):
            return self.getToken(TeradataSQLDDLParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_window_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_by" ):
                listener.enterWindow_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_by" ):
                listener.exitWindow_order_by(self)




    def window_order_by(self):

        localctx = TeradataSQLDDLParser.Window_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_window_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13026
            self.match(TeradataSQLDDLParser.ORDER)
            self.state = 13027
            self.match(TeradataSQLDDLParser.BY)
            self.state = 13028
            self.order_by_spec_full()
            self.state = 13033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13029
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13030
                self.order_by_spec_full()
                self.state = 13035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==884:
                self.state = 13036
                self.match(TeradataSQLDDLParser.RESET)
                self.state = 13037
                self.match(TeradataSQLDDLParser.WHEN)
                self.state = 13038
                self.logical_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(TeradataSQLDDLParser.ROWS, 0)

        def UNBOUNDED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.UNBOUNDED)
            else:
                return self.getToken(TeradataSQLDDLParser.UNBOUNDED, i)

        def PRECEDING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.PRECEDING)
            else:
                return self.getToken(TeradataSQLDDLParser.PRECEDING, i)

        def number_of_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Number_of_rowsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Number_of_rowsContext,i)


        def CURRENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.CURRENT)
            else:
                return self.getToken(TeradataSQLDDLParser.CURRENT, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ROW)
            else:
                return self.getToken(TeradataSQLDDLParser.ROW, i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDDLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDDLParser.AND, 0)

        def FOLLOWING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOLLOWING)
            else:
                return self.getToken(TeradataSQLDDLParser.FOLLOWING, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_window_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_rows" ):
                listener.enterWindow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_rows" ):
                listener.exitWindow_rows(self)




    def window_rows(self):

        localctx = TeradataSQLDDLParser.Window_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_window_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13041
            self.match(TeradataSQLDDLParser.ROWS)
            self.state = 13126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1013]:
                self.state = 13042
                self.match(TeradataSQLDDLParser.UNBOUNDED)
                self.state = 13043
                self.match(TeradataSQLDDLParser.PRECEDING)
                pass
            elif token in [1194]:
                self.state = 13044
                self.number_of_rows()
                self.state = 13045
                self.match(TeradataSQLDDLParser.PRECEDING)
                pass
            elif token in [93]:
                self.state = 13047
                self.match(TeradataSQLDDLParser.CURRENT)
                self.state = 13048
                self.match(TeradataSQLDDLParser.ROW)
                pass
            elif token in [35]:
                self.state = 13049
                self.match(TeradataSQLDDLParser.BETWEEN)
                self.state = 13124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1678,self._ctx)
                if la_ == 1:
                    self.state = 13050
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13051
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13052
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13053
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13054
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 2:
                    self.state = 13055
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13056
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13057
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13058
                    self.number_of_rows()
                    self.state = 13059
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    pass

                elif la_ == 3:
                    self.state = 13061
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13062
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13063
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13064
                    self.match(TeradataSQLDDLParser.CURRENT)
                    self.state = 13065
                    self.match(TeradataSQLDDLParser.ROW)
                    pass

                elif la_ == 4:
                    self.state = 13066
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13067
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13068
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13069
                    self.number_of_rows()
                    self.state = 13070
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 5:
                    self.state = 13072
                    self.number_of_rows()
                    self.state = 13073
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13074
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13075
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13076
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 6:
                    self.state = 13078
                    self.number_of_rows()
                    self.state = 13079
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13080
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13081
                    self.number_of_rows()
                    self.state = 13082
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    pass

                elif la_ == 7:
                    self.state = 13084
                    self.number_of_rows()
                    self.state = 13085
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13086
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13087
                    self.match(TeradataSQLDDLParser.CURRENT)
                    self.state = 13088
                    self.match(TeradataSQLDDLParser.ROW)
                    pass

                elif la_ == 8:
                    self.state = 13090
                    self.number_of_rows()
                    self.state = 13091
                    self.match(TeradataSQLDDLParser.PRECEDING)
                    self.state = 13092
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13093
                    self.number_of_rows()
                    self.state = 13094
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 9:
                    self.state = 13096
                    self.match(TeradataSQLDDLParser.CURRENT)
                    self.state = 13097
                    self.match(TeradataSQLDDLParser.ROW)
                    self.state = 13098
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13099
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13100
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 10:
                    self.state = 13101
                    self.match(TeradataSQLDDLParser.CURRENT)
                    self.state = 13102
                    self.match(TeradataSQLDDLParser.ROW)
                    self.state = 13103
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13104
                    self.match(TeradataSQLDDLParser.CURRENT)
                    self.state = 13105
                    self.match(TeradataSQLDDLParser.ROW)
                    pass

                elif la_ == 11:
                    self.state = 13106
                    self.match(TeradataSQLDDLParser.CURRENT)
                    self.state = 13107
                    self.match(TeradataSQLDDLParser.ROW)
                    self.state = 13108
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13109
                    self.number_of_rows()
                    self.state = 13110
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 12:
                    self.state = 13112
                    self.number_of_rows()
                    self.state = 13113
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    self.state = 13114
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13115
                    self.match(TeradataSQLDDLParser.UNBOUNDED)
                    self.state = 13116
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass

                elif la_ == 13:
                    self.state = 13118
                    self.number_of_rows()
                    self.state = 13119
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    self.state = 13120
                    self.match(TeradataSQLDDLParser.AND)
                    self.state = 13121
                    self.number_of_rows()
                    self.state = 13122
                    self.match(TeradataSQLDDLParser.FOLLOWING)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_param_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Format_phraseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_json_param_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_param_spec" ):
                listener.enterJson_param_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_param_spec" ):
                listener.exitJson_param_spec(self)




    def json_param_spec(self):

        localctx = TeradataSQLDDLParser.Json_param_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_json_param_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13128
            localctx.param = self.scalar_expr(0)
            self.state = 13133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 13129
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 13130
                self.format_phrase()
                self.state = 13131
                self.match(TeradataSQLDDLParser.CLOSE_PAR)


            self.state = 13137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13135
                self.match(TeradataSQLDDLParser.AS)
                self.state = 13136
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_context_item = None # Column_nameContext

        def PASSING(self):
            return self.getToken(TeradataSQLDDLParser.PASSING, 0)

        def xml_query_variable_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Xml_query_variable_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_query_variable_specContext,i)


        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDDLParser.VALUE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_query_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_argument" ):
                listener.enterXml_query_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_argument" ):
                listener.exitXml_query_argument(self)




    def xml_query_argument(self):

        localctx = TeradataSQLDDLParser.Xml_query_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_xml_query_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13139
            self.match(TeradataSQLDDLParser.PASSING)
            self.state = 13142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 13140
                self.match(TeradataSQLDDLParser.BY)
                self.state = 13141
                self.match(TeradataSQLDDLParser.VALUE)


            self.state = 13153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1684,self._ctx)
            if la_ == 1:
                self.state = 13144
                localctx.xml_query_context_item = self.column_name()
                pass

            elif la_ == 2:
                self.state = 13145
                self.xml_query_variable_spec()
                self.state = 13150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13146
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13147
                    self.xml_query_variable_spec()
                    self.state = 13152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_variable_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_variable = None # Column_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_query_variable_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_variable_spec" ):
                listener.enterXml_query_variable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_variable_spec" ):
                listener.exitXml_query_variable_spec(self)




    def xml_query_variable_spec(self):

        localctx = TeradataSQLDDLParser.Xml_query_variable_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_xml_query_variable_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13155
            localctx.xml_query_variable = self.column_name()
            self.state = 13156
            self.match(TeradataSQLDDLParser.AS)
            self.state = 13157
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDDLParser.XMLATTRIBUTES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def xml_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Xml_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_declaration" ):
                listener.enterXml_attribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_declaration" ):
                listener.exitXml_attribute_declaration(self)




    def xml_attribute_declaration(self):

        localctx = TeradataSQLDDLParser.Xml_attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_xml_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13159
            self.match(TeradataSQLDDLParser.XMLATTRIBUTES)
            self.state = 13160
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13161
            self.xml_attribute_spec()
            self.state = 13166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13162
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13163
                self.xml_attribute_spec()
                self.state = 13168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13169
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_attribute_value = None # Column_nameContext
            self.xml_attribute_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_spec" ):
                listener.enterXml_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_spec" ):
                listener.exitXml_attribute_spec(self)




    def xml_attribute_spec(self):

        localctx = TeradataSQLDDLParser.Xml_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_xml_attribute_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13171
            localctx.xml_attribute_value = self.column_name()
            self.state = 13174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13172
                self.match(TeradataSQLDDLParser.AS)
                self.state = 13173
                localctx.xml_attribute_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_forest_element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_forest_element_value = None # Column_nameContext
            self.xml_forest_element_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_forest_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_forest_element_spec" ):
                listener.enterXml_forest_element_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_forest_element_spec" ):
                listener.exitXml_forest_element_spec(self)




    def xml_forest_element_spec(self):

        localctx = TeradataSQLDDLParser.Xml_forest_element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_xml_forest_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13176
            localctx.xml_forest_element_value = self.column_name()
            self.state = 13179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13177
                self.match(TeradataSQLDDLParser.AS)
                self.state = 13178
                localctx.xml_forest_element_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_value_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_value_expr = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_content_option_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_value_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_value_declaration" ):
                listener.enterXml_value_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_value_declaration" ):
                listener.exitXml_value_declaration(self)




    def xml_value_declaration(self):

        localctx = TeradataSQLDDLParser.Xml_value_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_xml_value_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13181
            localctx.xml_value_expr = self.scalar_expr(0)
            self.state = 13183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 13182
                self.xml_content_option_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDDLParser.XMLNAMESPACES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def xml_namespace_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Xml_namespace_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_namespace_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_declaration" ):
                listener.enterXml_namespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_declaration" ):
                listener.exitXml_namespace_declaration(self)




    def xml_namespace_declaration(self):

        localctx = TeradataSQLDDLParser.Xml_namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_xml_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13185
            self.match(TeradataSQLDDLParser.XMLNAMESPACES)
            self.state = 13186
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13187
            self.xml_namespace_spec()
            self.state = 13192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13188
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13189
                self.xml_namespace_spec()
                self.state = 13194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13195
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Char_string_literalContext
            self.xml_namespace_prefix = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_namespace_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_spec" ):
                listener.enterXml_namespace_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_spec" ):
                listener.exitXml_namespace_spec(self)




    def xml_namespace_spec(self):

        localctx = TeradataSQLDDLParser.Xml_namespace_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_xml_namespace_spec)
        try:
            self.state = 13205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13197
                localctx.xml_namespace_uri = self.char_string_literal()
                self.state = 13198
                self.match(TeradataSQLDDLParser.AS)
                self.state = 13199
                localctx.xml_namespace_prefix = self.alias_name()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13201
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 13202
                localctx.xml_namespace_uri = self.char_string_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13203
                self.match(TeradataSQLDDLParser.NO)
                self.state = 13204
                self.match(TeradataSQLDDLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_columns_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(TeradataSQLDDLParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)


        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.FOR)
            else:
                return self.getToken(TeradataSQLDDLParser.FOR, i)

        def ORDINALITY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ORDINALITY)
            else:
                return self.getToken(TeradataSQLDDLParser.ORDINALITY, i)

        def xml_regular_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Xml_regular_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Xml_regular_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_columns_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_columns_spec" ):
                listener.enterXml_columns_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_columns_spec" ):
                listener.exitXml_columns_spec(self)




    def xml_columns_spec(self):

        localctx = TeradataSQLDDLParser.Xml_columns_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_xml_columns_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13207
            self.match(TeradataSQLDDLParser.COLUMNS)
            self.state = 13213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1691,self._ctx)
            if la_ == 1:
                self.state = 13208
                self.column_name()
                self.state = 13209
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 13210
                self.match(TeradataSQLDDLParser.ORDINALITY)
                pass

            elif la_ == 2:
                self.state = 13212
                self.xml_regular_column_definition()
                pass


            self.state = 13225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13215
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1692,self._ctx)
                if la_ == 1:
                    self.state = 13216
                    self.column_name()
                    self.state = 13217
                    self.match(TeradataSQLDDLParser.FOR)
                    self.state = 13218
                    self.match(TeradataSQLDDLParser.ORDINALITY)
                    pass

                elif la_ == 2:
                    self.state = 13220
                    self.xml_regular_column_definition()
                    pass


                self.state = 13227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_regular_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def PATH(self):
            return self.getToken(TeradataSQLDDLParser.PATH, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_regular_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_regular_column_definition" ):
                listener.enterXml_regular_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_regular_column_definition" ):
                listener.exitXml_regular_column_definition(self)




    def xml_regular_column_definition(self):

        localctx = TeradataSQLDDLParser.Xml_regular_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_xml_regular_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13228
            localctx.name = self.unqualified_name()
            self.state = 13229
            self.data_type()
            self.state = 13232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1082:
                self.state = 13230
                self.match(TeradataSQLDDLParser.PATH)
                self.state = 13231
                self.char_string_literal()


            self.state = 13236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 13234
                self.match(TeradataSQLDDLParser.DEFAULT)
                self.state = 13235
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_encoding_name = None # Char_string_literalContext

        def ENCODING(self):
            return self.getToken(TeradataSQLDDLParser.ENCODING, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_encoding" ):
                listener.enterXml_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_encoding" ):
                listener.exitXml_encoding(self)




    def xml_encoding(self):

        localctx = TeradataSQLDDLParser.Xml_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_xml_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13238
            self.match(TeradataSQLDDLParser.ENCODING)
            self.state = 13239
            localctx.xml_encoding_name = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_on_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.EMPTY)
            else:
                return self.getToken(TeradataSQLDDLParser.EMPTY, i)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_query_on_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_on_empty" ):
                listener.enterXml_query_on_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_on_empty" ):
                listener.exitXml_query_on_empty(self)




    def xml_query_on_empty(self):

        localctx = TeradataSQLDDLParser.Xml_query_on_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_xml_query_on_empty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13241
            _la = self._input.LA(1)
            if not(_la==274 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13242
            self.match(TeradataSQLDDLParser.ON)
            self.state = 13243
            self.match(TeradataSQLDDLParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_returning_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(TeradataSQLDDLParser.RETURNING, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDDLParser.CONTENT, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDDLParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_returning_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_returning_spec" ):
                listener.enterXml_returning_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_returning_spec" ):
                listener.exitXml_returning_spec(self)




    def xml_returning_spec(self):

        localctx = TeradataSQLDDLParser.Xml_returning_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_xml_returning_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13245
            self.match(TeradataSQLDDLParser.RETURNING)
            self.state = 13246
            _la = self._input.LA(1)
            if not(_la==593 or _la==914):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_content_option_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.NULL)
            else:
                return self.getToken(TeradataSQLDDLParser.NULL, i)

        def NIL(self):
            return self.getToken(TeradataSQLDDLParser.NIL, 0)

        def NO(self):
            return self.getToken(TeradataSQLDDLParser.NO, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDDLParser.CONTENT, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDDLParser.EMPTY, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDDLParser.ABSENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_xml_content_option_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content_option_spec" ):
                listener.enterXml_content_option_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content_option_spec" ):
                listener.exitXml_content_option_spec(self)




    def xml_content_option_spec(self):

        localctx = TeradataSQLDDLParser.Xml_content_option_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_xml_content_option_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13248
            self.match(TeradataSQLDDLParser.OPTION)
            self.state = 13256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1696,self._ctx)
            if la_ == 1:
                self.state = 13249
                _la = self._input.LA(1)
                if not(_la==274 or _la==489 or _la==649 or _la==794):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13250
                self.match(TeradataSQLDDLParser.ON)
                self.state = 13251
                self.match(TeradataSQLDDLParser.NULL)
                pass

            elif la_ == 2:
                self.state = 13252
                self.match(TeradataSQLDDLParser.NIL)
                self.state = 13253
                self.match(TeradataSQLDDLParser.ON)
                self.state = 13254
                self.match(TeradataSQLDDLParser.NO)
                self.state = 13255
                self.match(TeradataSQLDDLParser.CONTENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_respect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(TeradataSQLDDLParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDDLParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDDLParser.RESPECT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_ignore_respect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_respect_nulls" ):
                listener.enterIgnore_respect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_respect_nulls" ):
                listener.exitIgnore_respect_nulls(self)




    def ignore_respect_nulls(self):

        localctx = TeradataSQLDDLParser.Ignore_respect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_ignore_respect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13258
            _la = self._input.LA(1)
            if not(_la==697 or _la==885):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13259
            self.match(TeradataSQLDDLParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_of_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_number_of_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_of_rows" ):
                listener.enterNumber_of_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_of_rows" ):
                listener.exitNumber_of_rows(self)




    def number_of_rows(self):

        localctx = TeradataSQLDDLParser.Number_of_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_number_of_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13261
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDDLParser.TIES, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDDLParser.LOW, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDDLParser.HIGH, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDDLParser.AVG, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDDLParser.DENSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_ties" ):
                listener.enterWith_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_ties" ):
                listener.exitWith_ties(self)




    def with_ties(self):

        localctx = TeradataSQLDDLParser.With_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13263
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 13264
            self.match(TeradataSQLDDLParser.TIES)
            self.state = 13265
            _la = self._input.LA(1)
            if not(_la==32 or _la==629 or _la==690 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TeradataSQLDDLParser.PIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def pivot_with_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_with_phraseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TeradataSQLDDLParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_pivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13267
            self.match(TeradataSQLDDLParser.PIVOT)
            self.state = 13268
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13269
            self.pivot_spec()
            self.state = 13270
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 13272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13271
                self.pivot_with_phrase()


            self.state = 13275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13274
                self.match(TeradataSQLDDLParser.AS)


            self.state = 13277
            self.alias_name()
            self.state = 13279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1699,self._ctx)
            if la_ == 1:
                self.state = 13278
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_agg_func_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Pivot_agg_func_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_agg_func_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def pivot_for_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_for_phraseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_spec" ):
                listener.enterPivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_spec" ):
                listener.exitPivot_spec(self)




    def pivot_spec(self):

        localctx = TeradataSQLDDLParser.Pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_pivot_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13281
            self.pivot_agg_func_spec()
            self.state = 13286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13282
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13283
                self.pivot_agg_func_spec()
                self.state = 13288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13289
            self.match(TeradataSQLDDLParser.FOR)
            self.state = 13290
            self.pivot_for_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def pivot_with_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Pivot_with_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_with_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_with_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_phrase" ):
                listener.enterPivot_with_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_phrase" ):
                listener.exitPivot_with_phrase(self)




    def pivot_with_phrase(self):

        localctx = TeradataSQLDDLParser.Pivot_with_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_pivot_with_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13292
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 13293
            self.pivot_with_spec()
            self.state = 13298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13294
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13295
                self.pivot_with_spec()
                self.state = 13300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_agg_func_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_agg_func_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_agg_func_spec" ):
                listener.enterPivot_agg_func_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_agg_func_spec" ):
                listener.exitPivot_agg_func_spec(self)




    def pivot_agg_func_spec(self):

        localctx = TeradataSQLDDLParser.Pivot_agg_func_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_pivot_agg_func_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13301
            self.aggregate_function()
            self.state = 13306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 13303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13302
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 13305
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def pivot_expr_spec_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Pivot_expr_spec_scalarContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_expr_spec_scalarContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def pivot_expr_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Pivot_expr_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Pivot_expr_spec_listContext,i)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_for_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_phrase" ):
                listener.enterPivot_for_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_phrase" ):
                listener.exitPivot_for_phrase(self)




    def pivot_for_phrase(self):

        localctx = TeradataSQLDDLParser.Pivot_for_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_pivot_for_phrase)
        self._la = 0 # Token type
        try:
            self.state = 13351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1707,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13308
                self.column_name()
                self.state = 13309
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13310
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 13311
                self.pivot_expr_spec_scalar()
                self.state = 13316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13312
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13313
                    self.pivot_expr_spec_scalar()
                    self.state = 13318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13319
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13321
                self.column_list()
                self.state = 13322
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13323
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 13324
                self.pivot_expr_spec_scalar()
                self.state = 13329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13325
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13326
                    self.pivot_expr_spec_scalar()
                    self.state = 13331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13332
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13334
                self.column_list()
                self.state = 13335
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13336
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 13337
                self.pivot_expr_spec_list()
                self.state = 13342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13338
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13339
                    self.pivot_expr_spec_list()
                    self.state = 13344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13345
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13347
                self.column_name()
                self.state = 13348
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13349
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_with_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_spec" ):
                listener.enterPivot_with_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_spec" ):
                listener.exitPivot_with_spec(self)




    def pivot_with_spec(self):

        localctx = TeradataSQLDDLParser.Pivot_with_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_pivot_with_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13353
            self.aggregate_function()
            self.state = 13355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13354
                self.match(TeradataSQLDDLParser.AS)


            self.state = 13357
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_expr_spec_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_scalar" ):
                listener.enterPivot_expr_spec_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_scalar" ):
                listener.exitPivot_expr_spec_scalar(self)




    def pivot_expr_spec_scalar(self):

        localctx = TeradataSQLDDLParser.Pivot_expr_spec_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_pivot_expr_spec_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13359
            self.scalar_expr(0)
            self.state = 13364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 13361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13360
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 13363
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_pivot_expr_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_list" ):
                listener.enterPivot_expr_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_list" ):
                listener.exitPivot_expr_spec_list(self)




    def pivot_expr_spec_list(self):

        localctx = TeradataSQLDDLParser.Pivot_expr_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_pivot_expr_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13366
            self.scalar_expr_list_comma_separated()
            self.state = 13368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13367
                self.match(TeradataSQLDDLParser.AS)


            self.state = 13370
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDDLParser.UNPIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unpivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDDLParser.NULLS, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def INCLUDE(self):
            return self.getToken(TeradataSQLDDLParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDDLParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TeradataSQLDDLParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_unpivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13372
            self.match(TeradataSQLDDLParser.UNPIVOT)
            self.state = 13375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==660 or _la==700:
                self.state = 13373
                _la = self._input.LA(1)
                if not(_la==660 or _la==700):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13374
                self.match(TeradataSQLDDLParser.NULLS)


            self.state = 13377
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13378
            self.unpivot_spec()
            self.state = 13379
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
            self.state = 13381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13380
                self.match(TeradataSQLDDLParser.AS)


            self.state = 13383
            self.alias_name()
            self.state = 13385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1714,self._ctx)
            if la_ == 1:
                self.state = 13384
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def unpivot_column_name_spec_single(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unpivot_column_name_spec_singleContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unpivot_column_name_spec_singleContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def unpivot_column_name_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Unpivot_column_name_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Unpivot_column_name_spec_listContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_spec" ):
                listener.enterUnpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_spec" ):
                listener.exitUnpivot_spec(self)




    def unpivot_spec(self):

        localctx = TeradataSQLDDLParser.Unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_unpivot_spec)
        self._la = 0 # Token type
        try:
            self.state = 13417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363, 366, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13387
                self.column_name()
                self.state = 13388
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 13389
                self.column_name()
                self.state = 13390
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13391
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 13392
                self.unpivot_column_name_spec_single()
                self.state = 13397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13393
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13394
                    self.unpivot_column_name_spec_single()
                    self.state = 13399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13400
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13402
                self.column_list()
                self.state = 13403
                self.match(TeradataSQLDDLParser.FOR)
                self.state = 13404
                self.column_name()
                self.state = 13405
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13406
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 13407
                self.unpivot_column_name_spec_list()
                self.state = 13412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13408
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13409
                    self.unpivot_column_name_spec_list()
                    self.state = 13414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13415
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unpivot_column_name_spec_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_single" ):
                listener.enterUnpivot_column_name_spec_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_single" ):
                listener.exitUnpivot_column_name_spec_single(self)




    def unpivot_column_name_spec_single(self):

        localctx = TeradataSQLDDLParser.Unpivot_column_name_spec_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_unpivot_column_name_spec_single)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13419
            self.column_name()
            self.state = 13424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 13421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13420
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 13423
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_unpivot_column_name_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_list" ):
                listener.enterUnpivot_column_name_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_list" ):
                listener.exitUnpivot_column_name_spec_list(self)




    def unpivot_column_name_spec_list(self):

        localctx = TeradataSQLDDLParser.Unpivot_column_name_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_unpivot_column_name_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13426
            self.column_list()
            self.state = 13431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 13428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13427
                    self.match(TeradataSQLDDLParser.AS)


                self.state = 13430
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_timezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(TeradataSQLDDLParser.AT, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDDLParser.LOCAL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDDLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_at_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_timezone" ):
                listener.enterAt_timezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_timezone" ):
                listener.exitAt_timezone(self)




    def at_timezone(self):

        localctx = TeradataSQLDDLParser.At_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_at_timezone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13433
            self.match(TeradataSQLDDLParser.AT)
            self.state = 13440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 13434
                self.match(TeradataSQLDDLParser.LOCAL)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 13437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1722,self._ctx)
                if la_ == 1:
                    self.state = 13435
                    self.match(TeradataSQLDDLParser.TIME)
                    self.state = 13436
                    self.match(TeradataSQLDDLParser.ZONE)


                self.state = 13439
                self.scalar_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elements_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_expr_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_elements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements_list" ):
                listener.enterElements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements_list" ):
                listener.exitElements_list(self)




    def elements_list(self):

        localctx = TeradataSQLDDLParser.Elements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_elements_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1724,self._ctx)
            if la_ == 1:
                self.state = 13442
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 13443
                self.scalar_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.OR)
            else:
                return self.getToken(TeradataSQLDDLParser.OR, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_scalar_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list" ):
                listener.enterScalar_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list" ):
                listener.exitScalar_expr_list(self)




    def scalar_expr_list(self):

        localctx = TeradataSQLDDLParser.Scalar_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_scalar_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13446
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13447
            self.scalar_expr(0)
            self.state = 13452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==1208:
                self.state = 13448
                _la = self._input.LA(1)
                if not(_la==290 or _la==1208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13449
                self.scalar_expr(0)
                self.state = 13454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13455
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_list_comma_separatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_scalar_expr_list_comma_separated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list_comma_separated" ):
                listener.enterScalar_expr_list_comma_separated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list_comma_separated" ):
                listener.exitScalar_expr_list_comma_separated(self)




    def scalar_expr_list_comma_separated(self):

        localctx = TeradataSQLDDLParser.Scalar_expr_list_comma_separatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_scalar_expr_list_comma_separated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13457
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13458
            self.scalar_expr(0)
            self.state = 13463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13459
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13460
                self.scalar_expr(0)
                self.state = 13465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13466
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = TeradataSQLDDLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13468
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13469
            self.column_name()
            self.state = 13474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13470
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13471
                self.column_name()
                self.state = 13476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13477
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TeradataSQLDDLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13479
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13480
                self.with_request_modifier()


            self.state = 13483
            self.query_expr(0)
            self.state = 13484
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = TeradataSQLDDLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13486
            localctx.name = self.unqualified_name()
            self.state = 13487
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TeradataSQLDDLParser.COLON, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = TeradataSQLDDLParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13489
            self.match(TeradataSQLDDLParser.COLON)
            self.state = 13490
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_reference = None # Variable_referenceContext
            self.name = None # Unqualified_nameContext

        def DOT_(self):
            return self.getToken(TeradataSQLDDLParser.DOT_, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_referenceContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_cursor_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_variable_reference" ):
                listener.enterCursor_variable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_variable_reference" ):
                listener.exitCursor_variable_reference(self)




    def cursor_variable_reference(self):

        localctx = TeradataSQLDDLParser.Cursor_variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_cursor_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13492
            localctx.cursor_reference = self.variable_reference()
            self.state = 13493
            self.match(TeradataSQLDDLParser.DOT_)
            self.state = 13494
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameter_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def COLON(self):
            return self.getToken(TeradataSQLDDLParser.COLON, 0)

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_macro_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter_reference" ):
                listener.enterMacro_parameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter_reference" ):
                listener.exitMacro_parameter_reference(self)




    def macro_parameter_reference(self):

        localctx = TeradataSQLDDLParser.Macro_parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_macro_parameter_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13496
            _la = self._input.LA(1)
            if not(_la==1207 or _la==1210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13497
            self.parameter_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_scope_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_lower_bounds = None # Integer_literalContext
            self.array_upper_bounds = None # Integer_literalContext

        def COMMA(self):
            return self.getToken(TeradataSQLDDLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_array_scope_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_scope_reference" ):
                listener.enterArray_scope_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_scope_reference" ):
                listener.exitArray_scope_reference(self)




    def array_scope_reference(self):

        localctx = TeradataSQLDDLParser.Array_scope_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_array_scope_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13499
            localctx.array_lower_bounds = self.integer_literal()
            self.state = 13500
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 13501
            localctx.array_upper_bounds = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.EQUALS_SIGN, 0)

        def EQ(self):
            return self.getToken(TeradataSQLDDLParser.EQ, 0)

        def NOT_EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.NOT_EQUALS_SIGN, 0)

        def NOT_EQUALS_SIGN_TD(self):
            return self.getToken(TeradataSQLDDLParser.NOT_EQUALS_SIGN_TD, 0)

        def NE(self):
            return self.getToken(TeradataSQLDDLParser.NE, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def LT_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.LT_SIGN, 0)

        def GT_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.GT_SIGN, 0)

        def LT(self):
            return self.getToken(TeradataSQLDDLParser.LT, 0)

        def LE_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.LE_SIGN, 0)

        def LE(self):
            return self.getToken(TeradataSQLDDLParser.LE, 0)

        def GT(self):
            return self.getToken(TeradataSQLDDLParser.GT, 0)

        def GE_SIGN(self):
            return self.getToken(TeradataSQLDDLParser.GE_SIGN, 0)

        def GE(self):
            return self.getToken(TeradataSQLDDLParser.GE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TeradataSQLDDLParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_comparison_operator)
        try:
            self.state = 13520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1729,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13503
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13504
                self.match(TeradataSQLDDLParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13505
                self.match(TeradataSQLDDLParser.NOT_EQUALS_SIGN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13506
                self.match(TeradataSQLDDLParser.NOT_EQUALS_SIGN_TD)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13507
                self.match(TeradataSQLDDLParser.NE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13508
                self.match(TeradataSQLDDLParser.NOT)
                self.state = 13509
                self.match(TeradataSQLDDLParser.EQUALS_SIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13510
                self.match(TeradataSQLDDLParser.LT_SIGN)
                self.state = 13511
                self.match(TeradataSQLDDLParser.GT_SIGN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13512
                self.match(TeradataSQLDDLParser.LT_SIGN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 13513
                self.match(TeradataSQLDDLParser.LT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 13514
                self.match(TeradataSQLDDLParser.LE_SIGN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 13515
                self.match(TeradataSQLDDLParser.LE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 13516
                self.match(TeradataSQLDDLParser.GT_SIGN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 13517
                self.match(TeradataSQLDDLParser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 13518
                self.match(TeradataSQLDDLParser.GE_SIGN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 13519
                self.match(TeradataSQLDDLParser.GE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def ANY(self):
            return self.getToken(TeradataSQLDDLParser.ANY, 0)

        def SOME(self):
            return self.getToken(TeradataSQLDDLParser.SOME, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = TeradataSQLDDLParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13522
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==382):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_request_modifierContext,0)


        def using_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Using_request_modifierContext,0)


        def explain_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Explain_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequest_modifier" ):
                listener.enterRequest_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequest_modifier" ):
                listener.exitRequest_modifier(self)




    def request_modifier(self):

        localctx = TeradataSQLDDLParser.Request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_request_modifier)
        try:
            self.state = 13528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13524
                self.locking_request_modifier()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13525
                self.with_request_modifier()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13526
                self.using_request_modifier()
                pass
            elif token in [128, 150, 938]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13527
                self.explain_request_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Locking_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Locking_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_locking_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_request_modifier" ):
                listener.enterLocking_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_request_modifier" ):
                listener.exitLocking_request_modifier(self)




    def locking_request_modifier(self):

        localctx = TeradataSQLDDLParser.Locking_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_locking_request_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13531 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 13530
                    self.locking_spec()

                else:
                    raise NoViableAltException(self)
                self.state = 13533 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1731,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def lock_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Lock_typeContext,0)


        def LOCKING(self):
            return self.getToken(TeradataSQLDDLParser.LOCKING, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDDLParser.LOCK, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Table_nameContext,0)


        def ROW(self):
            return self.getToken(TeradataSQLDDLParser.ROW, 0)

        def MODE(self):
            return self.getToken(TeradataSQLDDLParser.MODE, 0)

        def NOWAIT(self):
            return self.getToken(TeradataSQLDDLParser.NOWAIT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_locking_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_spec" ):
                listener.enterLocking_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_spec" ):
                listener.exitLocking_spec(self)




    def locking_spec(self):

        localctx = TeradataSQLDDLParser.Locking_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_locking_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13535
            _la = self._input.LA(1)
            if not(_la==226 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1735,self._ctx)
            if la_ == 1:
                self.state = 13537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 13536
                    self.match(TeradataSQLDDLParser.DATABASE)


                self.state = 13539
                self.database_name()
                pass

            elif la_ == 2:
                self.state = 13541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 13540
                    self.match(TeradataSQLDDLParser.TABLE)


                self.state = 13543
                self.table_name()
                pass

            elif la_ == 3:
                self.state = 13545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 13544
                    self.match(TeradataSQLDDLParser.VIEW)


                self.state = 13547
                localctx.view_name = self.table_name()
                pass

            elif la_ == 4:
                self.state = 13548
                self.match(TeradataSQLDDLParser.ROW)
                pass


            self.state = 13552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==190:
                self.state = 13551
                _la = self._input.LA(1)
                if not(_la==159 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 13554
            self.lock_type()
            self.state = 13556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 13555
                self.match(TeradataSQLDDLParser.MODE)


            self.state = 13559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 13558
                self.match(TeradataSQLDDLParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(TeradataSQLDDLParser.ACCESS, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDDLParser.EXCL, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDDLParser.EXCLUSIVE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDDLParser.SHARE, 0)

        def READ(self):
            return self.getToken(TeradataSQLDDLParser.READ, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDDLParser.WRITE, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDDLParser.CHECKSUM, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDDLParser.LOAD, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDDLParser.COMMITTED, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = TeradataSQLDDLParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 13572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13561
                self.match(TeradataSQLDDLParser.ACCESS)
                pass
            elif token in [659, 662]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13562
                _la = self._input.LA(1)
                if not(_la==659 or _la==662):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [923]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13563
                self.match(TeradataSQLDDLParser.SHARE)
                pass
            elif token in [877]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13564
                self.match(TeradataSQLDDLParser.READ)
                self.state = 13566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 13565
                    self.match(TeradataSQLDDLParser.OVERRIDE)


                pass
            elif token in [1041]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13568
                self.match(TeradataSQLDDLParser.WRITE)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13569
                self.match(TeradataSQLDDLParser.CHECKSUM)
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 7)
                self.state = 13570
                self.match(TeradataSQLDDLParser.LOAD)
                self.state = 13571
                self.match(TeradataSQLDDLParser.COMMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def cte_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Cte_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Cte_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_request_modifier" ):
                listener.enterWith_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_request_modifier" ):
                listener.exitWith_request_modifier(self)




    def with_request_modifier(self):

        localctx = TeradataSQLDDLParser.With_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_with_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13574
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 13575
            self.cte_spec()
            self.state = 13580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13576
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13577
                self.cte_spec()
                self.state = 13582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Regular_cte_specContext,0)


        def recursive_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Recursive_cte_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_spec" ):
                listener.enterCte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_spec" ):
                listener.exitCte_spec(self)




    def cte_spec(self):

        localctx = TeradataSQLDDLParser.Cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_cte_spec)
        try:
            self.state = 13585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13583
                self.regular_cte_spec()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13584
                self.recursive_cte_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_regular_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_cte_spec" ):
                listener.enterRegular_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_cte_spec" ):
                listener.exitRegular_cte_spec(self)




    def regular_cte_spec(self):

        localctx = TeradataSQLDDLParser.Regular_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_regular_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13587
            localctx.query_name = self.alias_name()
            self.state = 13589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 13588
                self.column_list()


            self.state = 13591
            self.match(TeradataSQLDDLParser.AS)
            self.state = 13592
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def RECURSIVE(self):
            return self.getToken(TeradataSQLDDLParser.RECURSIVE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.UNION)
            else:
                return self.getToken(TeradataSQLDDLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.ALL)
            else:
                return self.getToken(TeradataSQLDDLParser.ALL, i)

        def query_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Query_termContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Query_termContext,i)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_recursive_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte_spec" ):
                listener.enterRecursive_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte_spec" ):
                listener.exitRecursive_cte_spec(self)




    def recursive_cte_spec(self):

        localctx = TeradataSQLDDLParser.Recursive_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_recursive_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13594
            self.match(TeradataSQLDDLParser.RECURSIVE)
            self.state = 13595
            localctx.query_name = self.alias_name()
            self.state = 13597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 13596
                self.column_list()


            self.state = 13599
            self.match(TeradataSQLDDLParser.AS)
            self.state = 13600
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13601
            self.query_expr(0)
            self.state = 13605 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 13602
                self.match(TeradataSQLDDLParser.UNION)
                self.state = 13603
                self.match(TeradataSQLDDLParser.ALL)
                self.state = 13604
                self.query_term()
                self.state = 13607 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==447):
                    break

            self.state = 13609
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDDLParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Using_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_using_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_request_modifier" ):
                listener.enterUsing_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_request_modifier" ):
                listener.exitUsing_request_modifier(self)




    def using_request_modifier(self):

        localctx = TeradataSQLDDLParser.Using_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_using_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13611
            self.match(TeradataSQLDDLParser.USING)
            self.state = 13612
            self.match(TeradataSQLDDLParser.OPEN_PAR)
            self.state = 13613
            self.using_spec()
            self.state = 13618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13614
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13615
                self.using_spec()
                self.state = 13620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13621
            self.match(TeradataSQLDDLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Variable_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Data_type_attributeContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def DEFERRED(self):
            return self.getToken(TeradataSQLDDLParser.DEFERRED, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDDLParser.LOCATOR, 0)

        def BY(self):
            return self.getToken(TeradataSQLDDLParser.BY, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDDLParser.NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_spec" ):
                listener.enterUsing_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_spec" ):
                listener.exitUsing_spec(self)




    def using_spec(self):

        localctx = TeradataSQLDDLParser.Using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_using_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13623
            self.variable_name()
            self.state = 13624
            self.data_type()
            self.state = 13628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 13625
                self.data_type_attribute()
                self.state = 13630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13631
                self.match(TeradataSQLDDLParser.AS)
                self.state = 13638
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 13632
                    self.match(TeradataSQLDDLParser.DEFERRED)
                    self.state = 13635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 13633
                        self.match(TeradataSQLDDLParser.BY)
                        self.state = 13634
                        self.match(TeradataSQLDDLParser.NAME)


                    pass
                elif token in [225]:
                    self.state = 13637
                    self.match(TeradataSQLDDLParser.LOCATOR)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDDLParser.EXPLAIN, 0)

        def IN(self):
            return self.getToken(TeradataSQLDDLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDDLParser.XML, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDDLParser.STATIC, 0)

        def DYNAMIC(self):
            return self.getToken(TeradataSQLDDLParser.DYNAMIC, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDDLParser.NODDLTEXT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_explain_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_request_modifier" ):
                listener.enterExplain_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_request_modifier" ):
                listener.exitExplain_request_modifier(self)




    def explain_request_modifier(self):

        localctx = TeradataSQLDDLParser.Explain_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_explain_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==938:
                self.state = 13642
                _la = self._input.LA(1)
                if not(_la==128 or _la==938):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 13645
            self.match(TeradataSQLDDLParser.EXPLAIN)
            self.state = 13651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 13646
                self.match(TeradataSQLDDLParser.IN)
                self.state = 13647
                self.match(TeradataSQLDDLParser.XML)
                self.state = 13649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 13648
                    self.match(TeradataSQLDDLParser.NODDLTEXT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dcl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def give_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Give_statContext,0)


        def grant_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_statContext,0)


        def revoke_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_dcl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDcl_stat" ):
                listener.enterDcl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDcl_stat" ):
                listener.exitDcl_stat(self)




    def dcl_stat(self):

        localctx = TeradataSQLDDLParser.Dcl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_dcl_stat)
        try:
            self.state = 13656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13653
                self.give_stat()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13654
                self.grant_stat()
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13655
                self.revoke_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Give_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.recipient_name = None # Database_nameContext

        def GIVE(self):
            return self.getToken(TeradataSQLDDLParser.GIVE, 0)

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_give_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGive_stat" ):
                listener.enterGive_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGive_stat" ):
                listener.exitGive_stat(self)




    def give_stat(self):

        localctx = TeradataSQLDDLParser.Give_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_give_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13658
            self.match(TeradataSQLDDLParser.GIVE)
            self.state = 13659
            self.database_name()
            self.state = 13660
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13661
            localctx.recipient_name = self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grant_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_role_statContext,0)


        def grant_monitor_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_monitor_statContext,0)


        def grant_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_sql_form_statContext,0)


        def grant_connect_through_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_connect_through_statContext,0)


        def grant_logon_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_logon_statContext,0)


        def grant_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_map_statContext,0)


        def grant_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_zone_statContext,0)


        def grant_zone_override_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_zone_override_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_stat" ):
                listener.enterGrant_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_stat" ):
                listener.exitGrant_stat(self)




    def grant_stat(self):

        localctx = TeradataSQLDDLParser.Grant_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_grant_stat)
        try:
            self.state = 13671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1755,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13663
                self.grant_role_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13664
                self.grant_monitor_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13665
                self.grant_sql_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13666
                self.grant_connect_through_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13667
                self.grant_logon_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13668
                self.grant_map_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13669
                self.grant_zone_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13670
                self.grant_zone_override_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_monitor_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def MONITOR(self):
            return self.getToken(TeradataSQLDDLParser.MONITOR, 0)

        def monitor_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Monitor_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Monitor_privilegeContext,i)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.GranteeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDDLParser.PUBLIC, 0)

        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDDLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDDLParser.BUT, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_grant_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_monitor_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_monitor_stat" ):
                listener.enterGrant_monitor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_monitor_stat" ):
                listener.exitGrant_monitor_stat(self)




    def grant_monitor_stat(self):

        localctx = TeradataSQLDDLParser.Grant_monitor_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_grant_monitor_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13673
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.state = 13674
                self.match(TeradataSQLDDLParser.MONITOR)
                self.state = 13686
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309]:
                    self.state = 13675
                    self.match(TeradataSQLDDLParser.PRIVILEGES)
                    pass
                elif token in [41]:
                    self.state = 13676
                    self.match(TeradataSQLDDLParser.BUT)
                    self.state = 13677
                    self.match(TeradataSQLDDLParser.NOT)
                    self.state = 13678
                    self.monitor_privilege()
                    self.state = 13683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13679
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 13680
                        self.monitor_privilege()
                        self.state = 13685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [426]:
                    pass
                else:
                    pass
                pass
            elif token in [2, 256, 257, 373, 375]:
                self.state = 13688
                self.monitor_privilege()
                self.state = 13693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13689
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13690
                    self.monitor_privilege()
                    self.state = 13695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 13698
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1764,self._ctx)
            if la_ == 1:
                self.state = 13708
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 13699
                    self.grantee()
                    self.state = 13704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13700
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 13701
                        self.grantee()
                        self.state = 13706
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [313]:
                    self.state = 13707
                    self.match(TeradataSQLDDLParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 13711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13710
                    self.with_grant_option()


                pass

            elif la_ == 2:
                self.state = 13713
                self.role_name()
                self.state = 13718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13714
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13715
                    self.role_name()
                    self.state = 13720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def with_admin_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_admin_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_role_stat" ):
                listener.enterGrant_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_role_stat" ):
                listener.exitGrant_role_stat(self)




    def grant_role_stat(self):

        localctx = TeradataSQLDDLParser.Grant_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_grant_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13723
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13724
            self.role_name()

            self.state = 13725
            self.match(TeradataSQLDDLParser.COMMA)
            self.state = 13726
            self.role_name()
            self.state = 13728
            self.match(TeradataSQLDDLParser.TO)

            self.state = 13729
            localctx.user_or_role = self.role_name()
            self.state = 13734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13730
                self.match(TeradataSQLDDLParser.COMMA)

                self.state = 13731
                localctx.user_or_role = self.role_name()
                self.state = 13736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13737
                self.with_admin_option()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def privilege_object(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Privilege_objectContext,0)


        def map_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Map_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Map_privilegeContext,i)


        def role_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_privilegeContext,i)


        def profile_privilege(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_privilegeContext,0)


        def zone_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Zone_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Zone_privilegeContext,i)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDDLParser.CONSTRAINT, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLDDLParser.ASSIGNMENT, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLDDLParser.DEFINITION, 0)

        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.GranteeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDDLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.PrivilegeContext,i)


        def CTCONTROL(self):
            return self.getToken(TeradataSQLDDLParser.CTCONTROL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_grant_optionContext,0)


        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDDLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDDLParser.BUT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_sql_form_stat" ):
                listener.enterGrant_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_sql_form_stat" ):
                listener.exitGrant_sql_form_stat(self)




    def grant_sql_form_stat(self):

        localctx = TeradataSQLDDLParser.Grant_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_grant_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13740
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1775,self._ctx)
            if la_ == 1:
                self.state = 13758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1770,self._ctx)
                if la_ == 1:
                    self.state = 13741
                    self.match(TeradataSQLDDLParser.ALL)
                    self.state = 13743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 13742
                        self.match(TeradataSQLDDLParser.PRIVILEGES)


                    pass

                elif la_ == 2:
                    self.state = 13747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 13745
                        self.match(TeradataSQLDDLParser.ALL)
                        self.state = 13746
                        self.match(TeradataSQLDDLParser.BUT)


                    self.state = 13749
                    self.privilege()
                    self.state = 13754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13750
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 13751
                        self.privilege()
                        self.state = 13756
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 3:
                    self.state = 13757
                    self.match(TeradataSQLDDLParser.CTCONTROL)
                    pass


                self.state = 13760
                self.match(TeradataSQLDDLParser.ON)
                self.state = 13761
                self.privilege_object()
                pass

            elif la_ == 2:
                self.state = 13762
                self.map_privilege()
                self.state = 13767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13763
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13764
                    self.map_privilege()
                    self.state = 13769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 13770
                self.role_privilege()
                self.state = 13775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13771
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13772
                    self.role_privilege()
                    self.state = 13777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 13778
                self.profile_privilege()
                self.state = 13783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13779
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13780
                    self.role_privilege()
                    self.state = 13785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 13786
                self.zone_privilege()
                self.state = 13791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13787
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13788
                    self.zone_privilege()
                    self.state = 13793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.state = 13794
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 13795
                self.match(TeradataSQLDDLParser.ASSIGNMENT)
                pass

            elif la_ == 7:
                self.state = 13796
                self.match(TeradataSQLDDLParser.CONSTRAINT)
                self.state = 13797
                self.match(TeradataSQLDDLParser.DEFINITION)
                pass


            self.state = 13800
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1780,self._ctx)
            if la_ == 1:
                self.state = 13801
                self.grantee()
                self.state = 13806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13802
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13803
                    self.grantee()
                    self.state = 13808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13809
                    self.with_grant_option()


                pass

            elif la_ == 2:
                self.state = 13812
                self.match(TeradataSQLDDLParser.PUBLIC)
                self.state = 13814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13813
                    self.with_grant_option()


                pass

            elif la_ == 3:
                self.state = 13816
                self.role_name()
                self.state = 13821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13817
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13818
                    self.role_name()
                    self.state = 13823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_connect_through_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trusted_user_name = None # User_nameContext
            self.application_user_name = None # User_nameContext
            self.permanent_user_name = None # User_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def CONNECT(self):
            return self.getToken(TeradataSQLDDLParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDDLParser.THROUGH, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def PERMANENT(self):
            return self.getToken(TeradataSQLDDLParser.PERMANENT, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WITH)
            else:
                return self.getToken(TeradataSQLDDLParser.WITH, i)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLDDLParser.TRUST_ONLY, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def WITHOUT(self):
            return self.getToken(TeradataSQLDDLParser.WITHOUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_connect_through_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_connect_through_stat" ):
                listener.enterGrant_connect_through_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_connect_through_stat" ):
                listener.exitGrant_connect_through_stat(self)




    def grant_connect_through_stat(self):

        localctx = TeradataSQLDDLParser.Grant_connect_through_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_grant_connect_through_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13826
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13827
            self.match(TeradataSQLDDLParser.CONNECT)
            self.state = 13828
            self.match(TeradataSQLDDLParser.THROUGH)
            self.state = 13829
            localctx.trusted_user_name = self.user_name()
            self.state = 13832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13830
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 13831
                self.match(TeradataSQLDDLParser.TRUST_ONLY)


            self.state = 13834
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 13835
                localctx.application_user_name = self.user_name()
                self.state = 13840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13836
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13837
                    localctx.application_user_name = self.user_name()
                    self.state = 13842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1785,self._ctx)
                if la_ == 1:
                    self.state = 13843
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 13844
                    self.match(TeradataSQLDDLParser.ROLE)
                    self.state = 13845
                    self.role_name()
                    self.state = 13850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13846
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 13847
                        self.role_name()
                        self.state = 13852
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 13856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 13853
                        self.match(TeradataSQLDDLParser.WITH)
                        self.state = 13854
                        self.match(TeradataSQLDDLParser.PROFILE)
                        self.state = 13855
                        self.profile_name()


                    pass

                elif la_ == 2:
                    self.state = 13858
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 13859
                    self.match(TeradataSQLDDLParser.PROFILE)
                    self.state = 13860
                    self.profile_name()
                    pass


                pass
            elif token in [303]:
                self.state = 13863
                self.match(TeradataSQLDDLParser.PERMANENT)
                self.state = 13864
                localctx.permanent_user_name = self.user_name()
                self.state = 13869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13865
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13866
                    localctx.permanent_user_name = self.user_name()
                    self.state = 13871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13884
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [474]:
                    self.state = 13872
                    self.match(TeradataSQLDDLParser.WITH)
                    self.state = 13873
                    self.match(TeradataSQLDDLParser.ROLE)
                    self.state = 13874
                    self.role_name()
                    self.state = 13879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13875
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 13876
                        self.role_name()
                        self.state = 13881
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [475]:
                    self.state = 13882
                    self.match(TeradataSQLDDLParser.WITHOUT)
                    self.state = 13883
                    self.match(TeradataSQLDDLParser.ROLE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_logon_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.host_id = list() # of Integer_literalContexts

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def LOGON(self):
            return self.getToken(TeradataSQLDDLParser.LOGON, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDDLParser.NULL, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLDDLParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_logon_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_logon_stat" ):
                listener.enterGrant_logon_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_logon_stat" ):
                listener.exitGrant_logon_stat(self)




    def grant_logon_stat(self):

        localctx = TeradataSQLDDLParser.Grant_logon_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_grant_logon_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13888
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13889
            self.match(TeradataSQLDDLParser.LOGON)
            self.state = 13890
            self.match(TeradataSQLDDLParser.ON)
            self.state = 13900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 13891
                localctx._integer_literal = self.integer_literal()
                localctx.host_id.append(localctx._integer_literal)
                self.state = 13896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13892
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13893
                    localctx._integer_literal = self.integer_literal()
                    localctx.host_id.append(localctx._integer_literal)
                    self.state = 13898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13]:
                self.state = 13899
                self.match(TeradataSQLDDLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 13913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 13902
                self.match(TeradataSQLDDLParser.AS)
                self.state = 13903
                self.match(TeradataSQLDDLParser.DEFAULT)
                pass
            elif token in [164, 426]:
                self.state = 13904
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13905
                self.user_name()
                self.state = 13910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13906
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13907
                    self.user_name()
                    self.state = 13912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 13918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13915
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 13916
                self.match(TeradataSQLDDLParser.NULL)
                self.state = 13917
                self.match(TeradataSQLDDLParser.PASSWORD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDDLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.With_grant_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_map_stat" ):
                listener.enterGrant_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_map_stat" ):
                listener.exitGrant_map_stat(self)




    def grant_map_stat(self):

        localctx = TeradataSQLDDLParser.Grant_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_grant_map_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13920
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13921
            self.match(TeradataSQLDDLParser.MAP)
            self.state = 13922
            localctx.map_name = self.unqualified_name()
            self.state = 13923
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 13924
                localctx.user_or_role = self.role_name()
                self.state = 13929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13925
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13926
                    localctx.user_or_role = self.role_name()
                    self.state = 13931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13932
                    self.with_grant_option()


                pass
            elif token in [313]:
                self.state = 13935
                self.match(TeradataSQLDDLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_zone_stat" ):
                listener.enterGrant_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_zone_stat" ):
                listener.exitGrant_zone_stat(self)




    def grant_zone_stat(self):

        localctx = TeradataSQLDDLParser.Grant_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_grant_zone_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13938
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13939
            self.match(TeradataSQLDDLParser.ZONE)
            self.state = 13940
            localctx.zone_name = self.unqualified_name()
            self.state = 13941
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13942
            localctx.user_or_role = self.role_name()
            self.state = 13947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13943
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13944
                localctx.user_or_role = self.role_name()
                self.state = 13949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_zone_override_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_zone_override_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_zone_override_stat" ):
                listener.enterGrant_zone_override_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_zone_override_stat" ):
                listener.exitGrant_zone_override_stat(self)




    def grant_zone_override_stat(self):

        localctx = TeradataSQLDDLParser.Grant_zone_override_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1242, self.RULE_grant_zone_override_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13950
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 13951
            self.match(TeradataSQLDDLParser.ZONE)
            self.state = 13952
            self.match(TeradataSQLDDLParser.OVERRIDE)
            self.state = 13953
            self.match(TeradataSQLDDLParser.TO)
            self.state = 13954
            self.user_name()
            self.state = 13959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13955
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 13956
                self.user_name()
                self.state = 13961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def revoke_monitor_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_monitor_statContext,0)


        def revoke_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_role_statContext,0)


        def revoke_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_sql_form_statContext,0)


        def revoke_connect_through_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_connect_through_statContext,0)


        def revoke_logon_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_logon_statContext,0)


        def revoke_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_map_statContext,0)


        def revoke_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_zone_statContext,0)


        def revoke_zone_override_stat(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Revoke_zone_override_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_stat" ):
                listener.enterRevoke_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_stat" ):
                listener.exitRevoke_stat(self)




    def revoke_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1244, self.RULE_revoke_stat)
        try:
            self.state = 13970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1800,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13962
                self.revoke_monitor_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13963
                self.revoke_role_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13964
                self.revoke_sql_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13965
                self.revoke_connect_through_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13966
                self.revoke_logon_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13967
                self.revoke_map_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13968
                self.revoke_zone_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13969
                self.revoke_zone_override_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_monitor_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def MONITOR(self):
            return self.getToken(TeradataSQLDDLParser.MONITOR, 0)

        def monitor_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Monitor_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Monitor_privilegeContext,i)


        def revokee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.RevokeeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.RevokeeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDDLParser.PUBLIC, 0)

        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_option_forContext,0)


        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDDLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDDLParser.BUT, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDDLParser.NOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_monitor_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_monitor_stat" ):
                listener.enterRevoke_monitor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_monitor_stat" ):
                listener.exitRevoke_monitor_stat(self)




    def revoke_monitor_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_monitor_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1246, self.RULE_revoke_monitor_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13972
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 13974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 13973
                self.grant_option_for()


            self.state = 13998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.state = 13976
                self.match(TeradataSQLDDLParser.MONITOR)
                self.state = 13988
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309]:
                    self.state = 13977
                    self.match(TeradataSQLDDLParser.PRIVILEGES)
                    pass
                elif token in [41]:
                    self.state = 13978
                    self.match(TeradataSQLDDLParser.BUT)
                    self.state = 13979
                    self.match(TeradataSQLDDLParser.NOT)
                    self.state = 13980
                    self.monitor_privilege()
                    self.state = 13985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13981
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 13982
                        self.monitor_privilege()
                        self.state = 13987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [164, 426]:
                    pass
                else:
                    pass
                pass
            elif token in [2, 256, 257, 373, 375]:
                self.state = 13990
                self.monitor_privilege()
                self.state = 13995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13991
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 13992
                    self.monitor_privilege()
                    self.state = 13997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 14000
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 14001
                self.revokee()
                self.state = 14006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14002
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14003
                    self.revokee()
                    self.state = 14008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [313]:
                self.state = 14009
                self.match(TeradataSQLDDLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDDLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_role_stat" ):
                listener.enterRevoke_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_role_stat" ):
                listener.exitRevoke_role_stat(self)




    def revoke_role_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1248, self.RULE_revoke_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14012
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1808,self._ctx)
            if la_ == 1:
                self.state = 14013
                self.match(TeradataSQLDDLParser.ADMIN)
                self.state = 14014
                self.match(TeradataSQLDDLParser.OPTION)
                self.state = 14015
                self.match(TeradataSQLDDLParser.FOR)


            self.state = 14018
            self.role_name()
            self.state = 14023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14019
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 14020
                self.role_name()
                self.state = 14025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 14026
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 14027
            localctx.user_or_role = self.role_name()
            self.state = 14032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14028
                self.match(TeradataSQLDDLParser.COMMA)

                self.state = 14029
                localctx.user_or_role = self.role_name()
                self.state = 14034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def privilege_object(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Privilege_objectContext,0)


        def map_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Map_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Map_privilegeContext,i)


        def role_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_privilegeContext,i)


        def profile_privilege(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_privilegeContext,0)


        def zone_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Zone_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Zone_privilegeContext,i)


        def revokee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.RevokeeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.RevokeeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDDLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_option_forContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.PrivilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDDLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDDLParser.BUT, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_sql_form_stat" ):
                listener.enterRevoke_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_sql_form_stat" ):
                listener.exitRevoke_sql_form_stat(self)




    def revoke_sql_form_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1250, self.RULE_revoke_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14035
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 14036
                self.grant_option_for()


            self.state = 14091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1820,self._ctx)
            if la_ == 1:
                self.state = 14055
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1815,self._ctx)
                if la_ == 1:
                    self.state = 14039
                    self.match(TeradataSQLDDLParser.ALL)
                    self.state = 14041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 14040
                        self.match(TeradataSQLDDLParser.PRIVILEGES)


                    pass

                elif la_ == 2:
                    self.state = 14045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 14043
                        self.match(TeradataSQLDDLParser.ALL)
                        self.state = 14044
                        self.match(TeradataSQLDDLParser.BUT)


                    self.state = 14047
                    self.privilege()
                    self.state = 14052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14048
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 14049
                        self.privilege()
                        self.state = 14054
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 14057
                self.match(TeradataSQLDDLParser.ON)
                self.state = 14058
                self.privilege_object()
                pass

            elif la_ == 2:
                self.state = 14059
                self.map_privilege()
                self.state = 14064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14060
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14061
                    self.map_privilege()
                    self.state = 14066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 14067
                self.role_privilege()
                self.state = 14072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14068
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14069
                    self.role_privilege()
                    self.state = 14074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 14075
                self.profile_privilege()
                self.state = 14080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14076
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14077
                    self.role_privilege()
                    self.state = 14082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 14083
                self.zone_privilege()
                self.state = 14088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14084
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14085
                    self.zone_privilege()
                    self.state = 14090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 14093
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1823,self._ctx)
            if la_ == 1:
                self.state = 14094
                self.revokee()
                self.state = 14099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14095
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14096
                    self.revokee()
                    self.state = 14101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 14102
                self.match(TeradataSQLDDLParser.PUBLIC)
                pass

            elif la_ == 3:
                self.state = 14103
                self.role_name()
                self.state = 14108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14104
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14105
                    self.role_name()
                    self.state = 14110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_connect_through_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trusted_user_name = None # User_nameContext
            self.application_user_name = None # User_nameContext
            self.permanent_user_name = None # User_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def CONNECT(self):
            return self.getToken(TeradataSQLDDLParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDDLParser.THROUGH, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.WITH)
            else:
                return self.getToken(TeradataSQLDDLParser.WITH, i)

        def TRUST(self):
            return self.getToken(TeradataSQLDDLParser.TRUST, 0)

        def ONLY(self):
            return self.getToken(TeradataSQLDDLParser.ONLY, 0)

        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def PERMANENT(self):
            return self.getToken(TeradataSQLDDLParser.PERMANENT, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Profile_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_connect_through_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_connect_through_stat" ):
                listener.enterRevoke_connect_through_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_connect_through_stat" ):
                listener.exitRevoke_connect_through_stat(self)




    def revoke_connect_through_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_connect_through_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1252, self.RULE_revoke_connect_through_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14113
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14114
            self.match(TeradataSQLDDLParser.CONNECT)
            self.state = 14115
            self.match(TeradataSQLDDLParser.THROUGH)
            self.state = 14116
            localctx.trusted_user_name = self.user_name()
            self.state = 14172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [164, 426]:
                self.state = 14117
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 14167
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 14118
                    localctx.application_user_name = self.user_name()
                    self.state = 14123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14119
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 14120
                        localctx.application_user_name = self.user_name()
                        self.state = 14125
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 14144
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1827,self._ctx)
                    if la_ == 1:
                        self.state = 14126
                        self.match(TeradataSQLDDLParser.WITH)
                        self.state = 14127
                        self.match(TeradataSQLDDLParser.ROLE)
                        self.state = 14128
                        self.role_name()
                        self.state = 14133
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 14129
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 14130
                            self.role_name()
                            self.state = 14135
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 14139
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==474:
                            self.state = 14136
                            self.match(TeradataSQLDDLParser.WITH)
                            self.state = 14137
                            self.match(TeradataSQLDDLParser.PROFILE)
                            self.state = 14138
                            self.profile_name()


                        pass

                    elif la_ == 2:
                        self.state = 14141
                        self.match(TeradataSQLDDLParser.WITH)
                        self.state = 14142
                        self.match(TeradataSQLDDLParser.PROFILE)
                        self.state = 14143
                        self.profile_name()
                        pass


                    pass
                elif token in [303]:
                    self.state = 14146
                    self.match(TeradataSQLDDLParser.PERMANENT)
                    self.state = 14147
                    localctx.permanent_user_name = self.user_name()
                    self.state = 14152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14148
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 14149
                        localctx.permanent_user_name = self.user_name()
                        self.state = 14154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 14165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 14155
                        self.match(TeradataSQLDDLParser.WITH)
                        self.state = 14156
                        self.match(TeradataSQLDDLParser.ROLE)
                        self.state = 14157
                        self.role_name()
                        self.state = 14162
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 14158
                            self.match(TeradataSQLDDLParser.COMMA)
                            self.state = 14159
                            self.role_name()
                            self.state = 14164
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [474]:
                self.state = 14169
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 14170
                self.match(TeradataSQLDDLParser.TRUST)
                self.state = 14171
                self.match(TeradataSQLDDLParser.ONLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_logon_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.host_id = list() # of Integer_literalContexts

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def LOGON(self):
            return self.getToken(TeradataSQLDDLParser.LOGON, 0)

        def ON(self):
            return self.getToken(TeradataSQLDDLParser.ON, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def AS(self):
            return self.getToken(TeradataSQLDDLParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDDLParser.DEFAULT, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Integer_literalContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_logon_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_logon_stat" ):
                listener.enterRevoke_logon_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_logon_stat" ):
                listener.exitRevoke_logon_stat(self)




    def revoke_logon_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_logon_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1254, self.RULE_revoke_logon_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14174
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14175
            self.match(TeradataSQLDDLParser.LOGON)
            self.state = 14176
            self.match(TeradataSQLDDLParser.ON)
            self.state = 14186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 14177
                localctx._integer_literal = self.integer_literal()
                localctx.host_id.append(localctx._integer_literal)
                self.state = 14182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14178
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14179
                    localctx._integer_literal = self.integer_literal()
                    localctx.host_id.append(localctx._integer_literal)
                    self.state = 14184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13]:
                self.state = 14185
                self.match(TeradataSQLDDLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 14199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 14188
                self.match(TeradataSQLDDLParser.AS)
                self.state = 14189
                self.match(TeradataSQLDDLParser.DEFAULT)
                pass
            elif token in [164, 426]:
                self.state = 14190
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 14191
                self.user_name()
                self.state = 14196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14192
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14193
                    self.user_name()
                    self.state = 14198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def PUBLIC(self):
            return self.getToken(TeradataSQLDDLParser.PUBLIC, 0)

        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Grant_option_forContext,0)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_map_stat" ):
                listener.enterRevoke_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_map_stat" ):
                listener.exitRevoke_map_stat(self)




    def revoke_map_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1256, self.RULE_revoke_map_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14201
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 14202
                self.grant_option_for()


            self.state = 14205
            self.match(TeradataSQLDDLParser.MAP)
            self.state = 14206
            localctx.map_name = self.unqualified_name()
            self.state = 14207
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 14208
                localctx.user_or_role = self.role_name()
                self.state = 14213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14209
                    self.match(TeradataSQLDDLParser.COMMA)
                    self.state = 14210
                    localctx.user_or_role = self.role_name()
                    self.state = 14215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [313]:
                self.state = 14216
                self.match(TeradataSQLDDLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Unqualified_nameContext,0)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_zone_stat" ):
                listener.enterRevoke_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_zone_stat" ):
                listener.exitRevoke_zone_stat(self)




    def revoke_zone_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1258, self.RULE_revoke_zone_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14219
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14220
            self.match(TeradataSQLDDLParser.ZONE)
            self.state = 14221
            localctx.zone_name = self.unqualified_name()
            self.state = 14222
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14223
            localctx.user_or_role = self.role_name()
            self.state = 14228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14224
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 14225
                localctx.user_or_role = self.role_name()
                self.state = 14230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_zone_override_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLDDLParser.REVOKE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.User_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDDLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDDLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revoke_zone_override_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_zone_override_stat" ):
                listener.enterRevoke_zone_override_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_zone_override_stat" ):
                listener.exitRevoke_zone_override_stat(self)




    def revoke_zone_override_stat(self):

        localctx = TeradataSQLDDLParser.Revoke_zone_override_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1260, self.RULE_revoke_zone_override_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14231
            self.match(TeradataSQLDDLParser.REVOKE)
            self.state = 14232
            self.match(TeradataSQLDDLParser.ZONE)
            self.state = 14233
            self.match(TeradataSQLDDLParser.OVERRIDE)
            self.state = 14234
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14235
            self.user_name()
            self.state = 14240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14236
                self.match(TeradataSQLDDLParser.COMMA)
                self.state = 14237
                self.user_name()
                self.state = 14242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDDLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TeradataSQLDDLParser.EXTERNAL, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def ANY(self):
            return self.getToken(TeradataSQLDDLParser.ANY, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDDLParser.CHECKPOINT, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDDLParser.AUTHORIZATION, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDDLParser.DATABASE, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDDLParser.DATASET, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDDLParser.SCHEMA, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDDLParser.GLOP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDDLParser.MACRO, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDDLParser.OWNER, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDDLParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDDLParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDDLParser.TRIGGER, 0)

        def USER(self):
            return self.getToken(TeradataSQLDDLParser.USER, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDDLParser.VIEW, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDDLParser.DELETE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def DUMP(self):
            return self.getToken(TeradataSQLDDLParser.DUMP, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLDDLParser.EXECUTE, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLDDLParser.MEMBER, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDDLParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDDLParser.INSERT, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Column_listContext,0)


        def NONTEMPORAL(self):
            return self.getToken(TeradataSQLDDLParser.NONTEMPORAL, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDDLParser.OVERRIDE, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLDDLParser.RESTORE, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLDDLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDDLParser.UPDATE, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLDDLParser.REFERENCES, 0)

        def RETRIEVE(self):
            return self.getToken(TeradataSQLDDLParser.RETRIEVE, 0)

        def SHOW(self):
            return self.getToken(TeradataSQLDDLParser.SHOW, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDDLParser.STATISTICS, 0)

        def UDT(self):
            return self.getToken(TeradataSQLDDLParser.UDT, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDDLParser.METHOD, 0)

        def UDTMETHOD(self):
            return self.getToken(TeradataSQLDDLParser.UDTMETHOD, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def UDTTYPE(self):
            return self.getToken(TeradataSQLDDLParser.UDTTYPE, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLDDLParser.USAGE, 0)

        def UDTUSAGE(self):
            return self.getToken(TeradataSQLDDLParser.UDTUSAGE, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = TeradataSQLDDLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1262, self.RULE_privilege)
        try:
            self.state = 14369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1842,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14243
                self.match(TeradataSQLDDLParser.ALTER)
                self.state = 14244
                self.match(TeradataSQLDDLParser.EXTERNAL)
                self.state = 14245
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14246
                self.match(TeradataSQLDDLParser.ALTER)
                self.state = 14247
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14248
                self.match(TeradataSQLDDLParser.ALTER)
                self.state = 14249
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14250
                self.match(TeradataSQLDDLParser.ANY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14251
                self.match(TeradataSQLDDLParser.CHECKPOINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 14252
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14253
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 14254
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14255
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 14256
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14257
                self.match(TeradataSQLDDLParser.DATASET)
                self.state = 14258
                self.match(TeradataSQLDDLParser.SCHEMA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 14259
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14260
                self.match(TeradataSQLDDLParser.EXTERNAL)
                self.state = 14261
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 14262
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14263
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 14264
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14265
                self.match(TeradataSQLDDLParser.GLOP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 14266
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14267
                self.match(TeradataSQLDDLParser.MACRO)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 14268
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14269
                self.match(TeradataSQLDDLParser.OWNER)
                self.state = 14270
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 14271
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14272
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 14273
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14274
                self.match(TeradataSQLDDLParser.SERVER)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 14275
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14276
                self.match(TeradataSQLDDLParser.TABLE)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 14277
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14278
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 14279
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14280
                self.match(TeradataSQLDDLParser.USER)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 14281
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14282
                self.match(TeradataSQLDDLParser.VIEW)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 14283
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 14284
                self.match(TeradataSQLDDLParser.DELETE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 14285
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14286
                self.match(TeradataSQLDDLParser.AUTHORIZATION)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 14287
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14288
                self.match(TeradataSQLDDLParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 14289
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14290
                self.match(TeradataSQLDDLParser.DATASET)
                self.state = 14291
                self.match(TeradataSQLDDLParser.SCHEMA)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 14292
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14293
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 14294
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14295
                self.match(TeradataSQLDDLParser.GLOP)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 14296
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14297
                self.match(TeradataSQLDDLParser.MACRO)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 14298
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14299
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 14300
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14301
                self.match(TeradataSQLDDLParser.SERVER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 14302
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14303
                self.match(TeradataSQLDDLParser.TABLE)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 14304
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14305
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 14306
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14307
                self.match(TeradataSQLDDLParser.USER)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 14308
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14309
                self.match(TeradataSQLDDLParser.VIEW)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 14310
                self.match(TeradataSQLDDLParser.DUMP)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 14311
                self.match(TeradataSQLDDLParser.EXECUTE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 14312
                self.match(TeradataSQLDDLParser.EXECUTE)
                self.state = 14313
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 14314
                self.match(TeradataSQLDDLParser.EXECUTE)
                self.state = 14315
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 14316
                self.match(TeradataSQLDDLParser.FUNCTION)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 14317
                self.match(TeradataSQLDDLParser.GLOP)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 14318
                self.match(TeradataSQLDDLParser.GLOP)
                self.state = 14319
                self.match(TeradataSQLDDLParser.MEMBER)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 14320
                self.match(TeradataSQLDDLParser.INDEX)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 14321
                self.match(TeradataSQLDDLParser.INSERT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 14322
                self.match(TeradataSQLDDLParser.INSERT)
                self.state = 14323
                self.column_list()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 14324
                self.match(TeradataSQLDDLParser.MACRO)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 14325
                self.match(TeradataSQLDDLParser.NONTEMPORAL)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 14326
                self.match(TeradataSQLDDLParser.OVERRIDE)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 14327
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 14328
                self.match(TeradataSQLDDLParser.DELETE)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 14329
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 14330
                self.match(TeradataSQLDDLParser.DUMP)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 14331
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 14332
                self.match(TeradataSQLDDLParser.INSERT)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 14333
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 14334
                self.match(TeradataSQLDDLParser.RESTORE)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 14335
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 14336
                self.match(TeradataSQLDDLParser.SELECT)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 14337
                self.match(TeradataSQLDDLParser.OVERRIDE)
                self.state = 14338
                self.match(TeradataSQLDDLParser.UPDATE)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 14339
                self.match(TeradataSQLDDLParser.PROCEDURE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 14340
                self.match(TeradataSQLDDLParser.REFERENCES)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 14341
                self.match(TeradataSQLDDLParser.REFERENCES)
                self.state = 14342
                self.column_list()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 14343
                self.match(TeradataSQLDDLParser.RESTORE)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 14344
                self.match(TeradataSQLDDLParser.RETRIEVE)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 14345
                self.match(TeradataSQLDDLParser.SELECT)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 14346
                self.match(TeradataSQLDDLParser.SELECT)
                self.state = 14347
                self.column_list()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 14348
                self.match(TeradataSQLDDLParser.SHOW)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 14349
                self.match(TeradataSQLDDLParser.STATISTICS)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 14350
                self.match(TeradataSQLDDLParser.TABLE)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 14351
                self.match(TeradataSQLDDLParser.TRIGGER)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 14352
                self.match(TeradataSQLDDLParser.UDT)
                self.state = 14353
                self.match(TeradataSQLDDLParser.METHOD)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 14354
                self.match(TeradataSQLDDLParser.UDTMETHOD)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 14355
                self.match(TeradataSQLDDLParser.UDT)
                self.state = 14356
                self.match(TeradataSQLDDLParser.TYPE)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 14357
                self.match(TeradataSQLDDLParser.UDTTYPE)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 14358
                self.match(TeradataSQLDDLParser.UDT)
                self.state = 14359
                self.match(TeradataSQLDDLParser.USAGE)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 14360
                self.match(TeradataSQLDDLParser.UDTUSAGE)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 14361
                self.match(TeradataSQLDDLParser.UPDATE)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 14362
                self.match(TeradataSQLDDLParser.UPDATE)
                self.state = 14363
                self.column_list()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 14364
                self.match(TeradataSQLDDLParser.USER)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 14365
                self.match(TeradataSQLDDLParser.VIEW)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 14366
                self.match(TeradataSQLDDLParser.WITH)
                self.state = 14367
                self.match(TeradataSQLDDLParser.DATASET)
                self.state = 14368
                self.match(TeradataSQLDDLParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Object_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLDDLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Procedure_nameContext,0)


        def SPECIFIC(self):
            return self.getToken(TeradataSQLDDLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDDLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDDLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDDLParser.CLOSE_PAR, 0)

        def function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDDLParser.Function_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDDLParser.Function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDDLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDDLParser.COMMA, i)

        def TYPE(self):
            return self.getToken(TeradataSQLDDLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Udt_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_privilege_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_object" ):
                listener.enterPrivilege_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_object" ):
                listener.exitPrivilege_object(self)




    def privilege_object(self):

        localctx = TeradataSQLDDLParser.Privilege_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1264, self.RULE_privilege_object)
        self._la = 0 # Token type
        try:
            self.state = 14399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1847,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14371
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14372
                self.match(TeradataSQLDDLParser.PROCEDURE)
                self.state = 14373
                self.procedure_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14374
                self.match(TeradataSQLDDLParser.SPECIFIC)
                self.state = 14375
                self.match(TeradataSQLDDLParser.FUNCTION)
                self.state = 14376
                self.function_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 14377
                    self.match(TeradataSQLDDLParser.FUNCTION)


                self.state = 14380
                self.function_name()
                self.state = 14381
                self.match(TeradataSQLDDLParser.OPEN_PAR)
                self.state = 14390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 14382
                    self.function_parameter()
                    self.state = 14387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14383
                        self.match(TeradataSQLDDLParser.COMMA)
                        self.state = 14384
                        self.function_parameter()
                        self.state = 14389
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 14392
                self.match(TeradataSQLDDLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14394
                self.match(TeradataSQLDDLParser.TYPE)
                self.state = 14396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1846,self._ctx)
                if la_ == 1:
                    self.state = 14395
                    self.sysudtlib()


                self.state = 14398
                self.udt_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDDLParser.MAP, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_map_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_privilege" ):
                listener.enterMap_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_privilege" ):
                listener.exitMap_privilege(self)




    def map_privilege(self):

        localctx = TeradataSQLDDLParser.Map_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1266, self.RULE_map_privilege)
        try:
            self.state = 14406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14401
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14402
                self.match(TeradataSQLDDLParser.MAP)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14403
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14404
                self.match(TeradataSQLDDLParser.MAP)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14405
                self.match(TeradataSQLDDLParser.MAP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDDLParser.ROLE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_role_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_privilege" ):
                listener.enterRole_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_privilege" ):
                listener.exitRole_privilege(self)




    def role_privilege(self):

        localctx = TeradataSQLDDLParser.Role_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1268, self.RULE_role_privilege)
        try:
            self.state = 14413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14408
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14409
                self.match(TeradataSQLDDLParser.ROLE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14410
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14411
                self.match(TeradataSQLDDLParser.ROLE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14412
                self.match(TeradataSQLDDLParser.ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDDLParser.PROFILE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_profile_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_privilege" ):
                listener.enterProfile_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_privilege" ):
                listener.exitProfile_privilege(self)




    def profile_privilege(self):

        localctx = TeradataSQLDDLParser.Profile_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1270, self.RULE_profile_privilege)
        try:
            self.state = 14420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14415
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14416
                self.match(TeradataSQLDDLParser.PROFILE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14417
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14418
                self.match(TeradataSQLDDLParser.PROFILE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14419
                self.match(TeradataSQLDDLParser.PROFILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDDLParser.CREATE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDDLParser.ZONE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDDLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_zone_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_privilege" ):
                listener.enterZone_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_privilege" ):
                listener.exitZone_privilege(self)




    def zone_privilege(self):

        localctx = TeradataSQLDDLParser.Zone_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1272, self.RULE_zone_privilege)
        try:
            self.state = 14427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14422
                self.match(TeradataSQLDDLParser.CREATE)
                self.state = 14423
                self.match(TeradataSQLDDLParser.ZONE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14424
                self.match(TeradataSQLDDLParser.DROP)
                self.state = 14425
                self.match(TeradataSQLDDLParser.ZONE)
                pass
            elif token in [480]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14426
                self.match(TeradataSQLDDLParser.ZONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Monitor_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSION(self):
            return self.getToken(TeradataSQLDDLParser.ABORTSESSION, 0)

        def MONRESOURCE(self):
            return self.getToken(TeradataSQLDDLParser.MONRESOURCE, 0)

        def MONSESSION(self):
            return self.getToken(TeradataSQLDDLParser.MONSESSION, 0)

        def SETRESRATE(self):
            return self.getToken(TeradataSQLDDLParser.SETRESRATE, 0)

        def SETSESSRATE(self):
            return self.getToken(TeradataSQLDDLParser.SETSESSRATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_monitor_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonitor_privilege" ):
                listener.enterMonitor_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonitor_privilege" ):
                listener.exitMonitor_privilege(self)




    def monitor_privilege(self):

        localctx = TeradataSQLDDLParser.Monitor_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1274, self.RULE_monitor_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14429
            _la = self._input.LA(1)
            if not(_la==2 or _la==256 or _la==257 or _la==373 or _la==375):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GranteeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee" ):
                listener.enterGrantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee" ):
                listener.exitGrantee(self)




    def grantee(self):

        localctx = TeradataSQLDDLParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1276, self.RULE_grantee)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 14431
                self.match(TeradataSQLDDLParser.ALL)


            self.state = 14434
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Database_nameContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDDLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_revokee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokee" ):
                listener.enterRevokee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokee" ):
                listener.exitRevokee(self)




    def revokee(self):

        localctx = TeradataSQLDDLParser.RevokeeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1278, self.RULE_revokee)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 14436
                self.match(TeradataSQLDDLParser.ALL)


            self.state = 14439
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDDLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_parameter" ):
                listener.enterFunction_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_parameter" ):
                listener.exitFunction_parameter(self)




    def function_parameter(self):

        localctx = TeradataSQLDDLParser.Function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1280, self.RULE_function_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1854,self._ctx)
            if la_ == 1:
                self.state = 14441
                self.parameter_name()


            self.state = 14444
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_admin_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDDLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_admin_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_admin_option" ):
                listener.enterWith_admin_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_admin_option" ):
                listener.exitWith_admin_option(self)




    def with_admin_option(self):

        localctx = TeradataSQLDDLParser.With_admin_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1282, self.RULE_with_admin_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14446
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 14447
            self.match(TeradataSQLDDLParser.ADMIN)
            self.state = 14448
            self.match(TeradataSQLDDLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_grant_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDDLParser.WITH, 0)

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_with_grant_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_grant_option" ):
                listener.enterWith_grant_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_grant_option" ):
                listener.exitWith_grant_option(self)




    def with_grant_option(self):

        localctx = TeradataSQLDDLParser.With_grant_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1284, self.RULE_with_grant_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14450
            self.match(TeradataSQLDDLParser.WITH)
            self.state = 14451
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 14452
            self.match(TeradataSQLDDLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_option_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDDLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDDLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDDLParser.FOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDDLParser.RULE_grant_option_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_option_for" ):
                listener.enterGrant_option_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_option_for" ):
                listener.exitGrant_option_for(self)




    def grant_option_for(self):

        localctx = TeradataSQLDDLParser.Grant_option_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1286, self.RULE_grant_option_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14454
            self.match(TeradataSQLDDLParser.GRANT)
            self.state = 14455
            self.match(TeradataSQLDDLParser.OPTION)
            self.state = 14456
            self.match(TeradataSQLDDLParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[137] = self.ji_joined_table_sempred
        self._predicates[417] = self.query_expr_sempred
        self._predicates[497] = self.logical_expr_sempred
        self._predicates[498] = self.scalar_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def ji_joined_table_sempred(self, localctx:Ji_joined_tableContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def query_expr_sempred(self, localctx:Query_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

    def scalar_expr_sempred(self, localctx:Scalar_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 69)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 68)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 67)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 66)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 65)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 58:
                return self.precpred(self._ctx, 4)
         




