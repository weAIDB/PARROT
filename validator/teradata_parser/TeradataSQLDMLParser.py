# Generated from sql/teradata/TeradataSQLDMLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1233,6930,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,655,
        8,0,1,1,3,1,658,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,669,
        8,2,1,2,1,2,1,2,1,3,3,3,675,8,3,1,3,1,3,3,3,679,8,3,1,3,1,3,1,3,
        1,3,1,3,5,3,686,8,3,10,3,12,3,689,9,3,1,3,1,3,1,3,1,3,1,3,5,3,696,
        8,3,10,3,12,3,699,9,3,3,3,701,8,3,1,3,1,3,3,3,705,8,3,1,4,1,4,3,
        4,709,8,4,1,4,3,4,712,8,4,1,4,1,4,3,4,716,8,4,1,4,1,4,3,4,720,8,
        4,1,5,3,5,723,8,5,1,5,1,5,3,5,727,8,5,1,5,3,5,730,8,5,1,5,1,5,3,
        5,734,8,5,1,5,3,5,737,8,5,1,5,1,5,3,5,741,8,5,1,5,1,5,3,5,745,8,
        5,5,5,747,8,5,10,5,12,5,750,9,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,758,
        8,5,1,5,3,5,761,8,5,1,5,1,5,3,5,765,8,5,1,5,3,5,768,8,5,1,5,3,5,
        771,8,5,1,5,1,5,1,5,3,5,776,8,5,1,5,1,5,3,5,780,8,5,1,6,1,6,1,6,
        1,6,1,6,5,6,787,8,6,10,6,12,6,790,9,6,1,6,3,6,793,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,5,7,801,8,7,10,7,12,7,804,9,7,1,8,1,8,1,8,3,8,809,
        8,8,1,9,3,9,812,8,9,1,9,1,9,3,9,816,8,9,1,9,1,9,3,9,820,8,9,1,9,
        3,9,823,8,9,1,9,1,9,1,9,1,9,5,9,829,8,9,10,9,12,9,832,9,9,1,9,1,
        9,3,9,836,8,9,1,10,3,10,839,8,10,1,10,1,10,3,10,843,8,10,1,10,1,
        10,1,10,1,10,1,10,5,10,850,8,10,10,10,12,10,853,9,10,1,10,1,10,1,
        10,1,10,5,10,859,8,10,10,10,12,10,862,9,10,1,10,1,10,3,10,866,8,
        10,1,11,3,11,869,8,11,1,11,1,11,3,11,873,8,11,1,11,1,11,3,11,877,
        8,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,885,8,11,10,11,12,11,888,
        9,11,1,11,1,11,1,11,1,11,1,11,3,11,895,8,11,1,11,1,11,3,11,899,8,
        11,1,11,1,11,1,11,3,11,904,8,11,1,11,1,11,1,11,1,11,3,11,910,8,11,
        1,12,1,12,3,12,914,8,12,1,12,3,12,917,8,12,1,12,1,12,3,12,921,8,
        12,1,12,1,12,3,12,925,8,12,1,13,3,13,928,8,13,1,13,1,13,3,13,932,
        8,13,1,13,3,13,935,8,13,1,13,1,13,3,13,939,8,13,1,13,3,13,942,8,
        13,1,13,1,13,1,13,1,13,1,13,3,13,949,8,13,1,13,3,13,952,8,13,1,13,
        1,13,3,13,956,8,13,1,13,1,13,1,13,1,13,3,13,962,8,13,1,13,1,13,3,
        13,966,8,13,3,13,968,8,13,1,13,3,13,971,8,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,5,14,981,8,14,10,14,12,14,984,9,14,1,14,3,14,
        987,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,998,8,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,1010,8,
        16,10,16,12,16,1013,9,16,1,16,1,16,3,16,1017,8,16,1,16,1,16,1,16,
        1,16,1,16,1,16,3,16,1025,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        1033,8,17,1,17,1,17,1,17,1,17,1,17,3,17,1040,8,17,1,17,1,17,3,17,
        1044,8,17,1,17,1,17,3,17,1048,8,17,1,17,3,17,1051,8,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1062,8,18,1,18,1,18,1,18,
        3,18,1067,8,18,5,18,1069,8,18,10,18,12,18,1072,9,18,1,18,3,18,1075,
        8,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,1083,8,18,10,18,12,18,1086,
        9,18,1,18,1,18,3,18,1090,8,18,3,18,1092,8,18,1,19,1,19,1,19,1,19,
        1,19,3,19,1099,8,19,1,19,1,19,3,19,1103,8,19,1,20,1,20,1,20,1,20,
        1,20,1,20,3,20,1111,8,20,1,20,3,20,1114,8,20,1,20,1,20,3,20,1118,
        8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,1129,8,21,
        10,21,12,21,1132,9,21,3,21,1134,8,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,5,21,1146,8,21,10,21,12,21,1149,9,21,3,21,
        1151,8,21,1,21,1,21,3,21,1155,8,21,1,21,1,21,1,21,3,21,1160,8,21,
        1,21,1,21,3,21,1164,8,21,1,21,1,21,1,21,1,21,1,21,5,21,1171,8,21,
        10,21,12,21,1174,9,21,3,21,1176,8,21,1,21,1,21,3,21,1180,8,21,1,
        21,3,21,1183,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,5,24,1198,8,24,10,24,12,24,1201,9,24,3,24,1203,
        8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1212,8,24,1,25,1,25,
        1,25,1,25,3,25,1218,8,25,1,25,1,25,1,25,1,25,1,25,3,25,1225,8,25,
        3,25,1227,8,25,3,25,1229,8,25,1,25,1,25,3,25,1233,8,25,1,25,1,25,
        1,25,1,25,5,25,1239,8,25,10,25,12,25,1242,9,25,3,25,1244,8,25,1,
        25,1,25,1,25,1,25,3,25,1250,8,25,1,25,3,25,1253,8,25,1,25,1,25,3,
        25,1257,8,25,1,25,1,25,3,25,1261,8,25,1,25,1,25,1,25,3,25,1266,8,
        25,3,25,1268,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,3,26,1283,8,26,1,26,3,26,1286,8,26,1,27,1,27,1,
        27,1,27,1,27,1,27,5,27,1294,8,27,10,27,12,27,1297,9,27,3,27,1299,
        8,27,1,27,1,27,1,28,1,28,3,28,1305,8,28,1,28,3,28,1308,8,28,1,29,
        1,29,1,29,1,29,1,29,1,29,5,29,1316,8,29,10,29,12,29,1319,9,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,1329,8,29,10,29,12,29,
        1332,9,29,3,29,1334,8,29,1,29,1,29,3,29,1338,8,29,1,30,1,30,1,30,
        3,30,1343,8,30,3,30,1345,8,30,1,31,1,31,3,31,1349,8,31,1,31,3,31,
        1352,8,31,1,31,3,31,1355,8,31,1,31,3,31,1358,8,31,1,32,1,32,3,32,
        1362,8,32,1,32,3,32,1365,8,32,1,32,3,32,1368,8,32,1,33,1,33,1,33,
        3,33,1373,8,33,1,34,1,34,1,34,3,34,1378,8,34,1,35,1,35,1,36,1,36,
        3,36,1384,8,36,1,36,3,36,1387,8,36,1,36,1,36,1,36,1,36,3,36,1393,
        8,36,1,37,1,37,1,37,1,37,1,37,3,37,1400,8,37,1,38,1,38,3,38,1404,
        8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,3,41,1414,8,41,1,41,
        3,41,1417,8,41,1,41,1,41,1,41,1,42,1,42,3,42,1424,8,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,3,42,1433,8,42,3,42,1435,8,42,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,3,43,1453,8,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1461,8,44,
        1,45,1,45,1,45,1,45,3,45,1467,8,45,3,45,1469,8,45,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1482,8,47,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,3,48,1491,8,48,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1503,8,49,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,3,50,1513,8,50,1,50,1,50,3,50,1517,8,50,1,50,3,50,
        1520,8,50,1,50,1,50,1,50,1,50,1,50,3,50,1527,8,50,1,50,1,50,1,50,
        3,50,1532,8,50,1,50,1,50,1,50,1,50,3,50,1538,8,50,1,50,1,50,3,50,
        1542,8,50,1,50,3,50,1545,8,50,3,50,1547,8,50,1,51,1,51,3,51,1551,
        8,51,1,51,3,51,1554,8,51,1,51,1,51,3,51,1558,8,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1565,8,51,1,51,1,51,3,51,1569,8,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1581,8,51,1,51,3,51,1584,
        8,51,1,51,3,51,1587,8,51,3,51,1589,8,51,1,52,1,52,3,52,1593,8,52,
        1,52,1,52,3,52,1597,8,52,3,52,1599,8,52,1,53,1,53,1,53,1,53,3,53,
        1605,8,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1613,8,53,1,53,1,53,
        3,53,1617,8,53,1,54,1,54,3,54,1621,8,54,1,54,1,54,1,54,1,54,1,54,
        1,54,3,54,1629,8,54,1,54,3,54,1632,8,54,3,54,1634,8,54,1,55,1,55,
        1,55,3,55,1639,8,55,1,55,3,55,1642,8,55,1,55,1,55,3,55,1646,8,55,
        1,55,3,55,1649,8,55,1,55,1,55,3,55,1653,8,55,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,3,56,1663,8,56,1,56,3,56,1666,8,56,1,56,1,56,
        1,56,1,56,1,56,3,56,1673,8,56,1,56,3,56,1676,8,56,1,56,3,56,1679,
        8,56,1,57,3,57,1682,8,57,1,57,1,57,3,57,1686,8,57,1,57,3,57,1689,
        8,57,1,57,3,57,1692,8,57,1,57,1,57,3,57,1696,8,57,1,57,3,57,1699,
        8,57,1,57,1,57,3,57,1703,8,57,1,57,3,57,1706,8,57,1,57,1,57,3,57,
        1710,8,57,1,57,3,57,1713,8,57,1,57,3,57,1716,8,57,1,57,1,57,3,57,
        1720,8,57,1,57,3,57,1723,8,57,1,57,1,57,3,57,1727,8,57,1,57,3,57,
        1730,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1740,8,58,
        1,59,3,59,1743,8,59,1,59,1,59,1,59,1,59,1,59,3,59,1750,8,59,1,60,
        1,60,1,60,1,60,1,60,1,60,3,60,1758,8,60,1,61,1,61,3,61,1762,8,61,
        1,62,1,62,1,62,1,63,1,63,3,63,1769,8,63,1,63,1,63,3,63,1773,8,63,
        1,63,1,63,3,63,1777,8,63,1,63,1,63,3,63,1781,8,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,3,63,1790,8,63,3,63,1792,8,63,1,63,1,63,3,63,
        1796,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1803,8,63,3,63,1805,8,63,
        1,63,1,63,3,63,1809,8,63,1,63,1,63,1,63,3,63,1814,8,63,3,63,1816,
        8,63,1,63,1,63,1,63,1,63,1,63,3,63,1823,8,63,1,63,1,63,3,63,1827,
        8,63,3,63,1829,8,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,1838,
        8,65,1,65,1,65,1,66,1,66,1,66,3,66,1845,8,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,68,1,68,1,69,3,69,1856,8,69,1,69,1,69,1,70,1,70,1,70,
        1,70,3,70,1864,8,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,
        1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,
        3,76,1888,8,76,1,77,1,77,1,77,3,77,1893,8,77,3,77,1895,8,77,1,78,
        1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1918,8,80,1,81,1,81,1,82,
        3,82,1923,8,82,1,82,4,82,1926,8,82,11,82,12,82,1927,1,83,3,83,1931,
        8,83,1,83,1,83,5,83,1935,8,83,10,83,12,83,1938,9,83,1,83,1,83,1,
        83,1,84,3,84,1944,8,84,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,
        88,1,88,1,89,3,89,1957,8,89,1,89,1,89,1,90,3,90,1962,8,90,1,90,1,
        90,1,91,3,91,1967,8,91,1,91,1,91,1,92,1,92,3,92,1973,8,92,1,92,1,
        92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,3,93,2005,8,93,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2021,8,95,1,96,1,96,1,96,1,
        96,3,96,2027,8,96,1,97,1,97,3,97,2031,8,97,1,98,1,98,1,98,3,98,2036,
        8,98,1,98,1,98,3,98,2040,8,98,1,99,1,99,1,99,3,99,2045,8,99,1,99,
        1,99,3,99,2049,8,99,1,100,1,100,1,100,3,100,2054,8,100,1,100,1,100,
        3,100,2058,8,100,1,101,1,101,1,101,3,101,2063,8,101,1,101,1,101,
        3,101,2067,8,101,1,102,1,102,1,102,3,102,2072,8,102,1,102,1,102,
        3,102,2076,8,102,1,103,1,103,3,103,2080,8,103,1,104,1,104,3,104,
        2084,8,104,1,105,1,105,1,105,3,105,2089,8,105,1,106,1,106,3,106,
        2093,8,106,1,107,1,107,3,107,2097,8,107,1,108,1,108,3,108,2101,8,
        108,1,109,1,109,3,109,2105,8,109,1,110,1,110,3,110,2109,8,110,1,
        111,1,111,3,111,2113,8,111,1,112,1,112,3,112,2117,8,112,1,113,1,
        113,3,113,2121,8,113,1,114,1,114,3,114,2125,8,114,1,115,1,115,3,
        115,2129,8,115,1,116,1,116,3,116,2133,8,116,1,117,1,117,3,117,2137,
        8,117,1,118,1,118,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,
        3,120,2149,8,120,1,120,1,120,1,120,3,120,2154,8,120,1,120,5,120,
        2157,8,120,10,120,12,120,2160,9,120,1,121,1,121,3,121,2164,8,121,
        1,121,3,121,2167,8,121,1,121,1,121,1,121,5,121,2172,8,121,10,121,
        12,121,2175,9,121,1,121,1,121,1,121,1,121,1,121,3,121,2182,8,121,
        1,121,1,121,5,121,2186,8,121,10,121,12,121,2189,9,121,1,121,1,121,
        5,121,2193,8,121,10,121,12,121,2196,9,121,1,121,5,121,2199,8,121,
        10,121,12,121,2202,9,121,1,121,3,121,2205,8,121,1,122,1,122,1,122,
        1,122,1,123,1,123,1,123,1,124,1,124,1,124,1,124,3,124,2218,8,124,
        1,124,3,124,2221,8,124,1,124,1,124,3,124,2225,8,124,1,125,1,125,
        1,125,1,125,3,125,2231,8,125,1,125,3,125,2234,8,125,1,125,1,125,
        3,125,2238,8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,3,126,2249,8,126,3,126,2251,8,126,1,127,1,127,1,127,1,127,
        1,127,1,127,3,127,2259,8,127,1,127,1,127,1,127,1,128,1,128,1,128,
        1,128,5,128,2268,8,128,10,128,12,128,2271,9,128,3,128,2273,8,128,
        1,129,1,129,3,129,2277,8,129,1,129,3,129,2280,8,129,1,129,1,129,
        1,129,1,129,3,129,2286,8,129,1,130,1,130,1,130,3,130,2291,8,130,
        1,130,1,130,1,130,3,130,2296,8,130,5,130,2298,8,130,10,130,12,130,
        2301,9,130,1,131,1,131,1,131,1,132,1,132,5,132,2308,8,132,10,132,
        12,132,2311,9,132,1,132,1,132,5,132,2315,8,132,10,132,12,132,2318,
        9,132,1,132,1,132,5,132,2322,8,132,10,132,12,132,2325,9,132,1,132,
        1,132,1,132,1,132,5,132,2331,8,132,10,132,12,132,2334,9,132,3,132,
        2336,8,132,1,133,1,133,1,133,1,133,1,133,1,133,3,133,2344,8,133,
        1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,2355,
        8,134,1,135,1,135,3,135,2359,8,135,1,135,1,135,1,136,1,136,3,136,
        2365,8,136,1,136,1,136,1,137,1,137,1,137,3,137,2372,8,137,3,137,
        2374,8,137,1,137,3,137,2377,8,137,1,137,3,137,2380,8,137,1,138,1,
        138,1,138,3,138,2385,8,138,3,138,2387,8,138,1,138,1,138,1,138,5,
        138,2392,8,138,10,138,12,138,2395,9,138,1,138,1,138,1,138,3,138,
        2400,8,138,3,138,2402,8,138,1,138,1,138,1,138,1,138,1,138,5,138,
        2409,8,138,10,138,12,138,2412,9,138,1,138,1,138,1,138,1,138,5,138,
        2418,8,138,10,138,12,138,2421,9,138,1,138,1,138,1,138,1,138,1,138,
        1,138,5,138,2429,8,138,10,138,12,138,2432,9,138,3,138,2434,8,138,
        1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,4,140,2444,8,140,
        11,140,12,140,2445,3,140,2448,8,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,5,140,2457,8,140,10,140,12,140,2460,9,140,1,140,1,140,
        3,140,2464,8,140,1,140,3,140,2467,8,140,1,140,1,140,1,141,1,141,
        1,141,1,141,4,141,2475,8,141,11,141,12,141,2476,1,141,1,141,3,141,
        2481,8,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,5,142,2490,
        8,142,10,142,12,142,2493,9,142,1,142,1,142,5,142,2497,8,142,10,142,
        12,142,2500,9,142,1,142,3,142,2503,8,142,1,142,3,142,2506,8,142,
        1,142,1,142,1,143,1,143,1,143,3,143,2513,8,143,1,143,1,143,3,143,
        2517,8,143,1,144,1,144,4,144,2521,8,144,11,144,12,144,2522,1,145,
        1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,5,146,2535,
        8,146,10,146,12,146,2538,9,146,1,146,1,146,1,147,1,147,1,147,1,148,
        1,148,1,148,1,148,3,148,2549,8,148,1,148,1,148,3,148,2553,8,148,
        1,148,1,148,3,148,2557,8,148,1,149,1,149,1,149,1,149,3,149,2563,
        8,149,1,149,3,149,2566,8,149,1,149,1,149,5,149,2570,8,149,10,149,
        12,149,2573,9,149,1,150,3,150,2576,8,150,1,150,1,150,1,150,1,150,
        1,150,3,150,2583,8,150,1,150,1,150,1,150,1,150,3,150,2589,8,150,
        1,151,1,151,1,151,1,151,1,151,1,151,5,151,2597,8,151,10,151,12,151,
        2600,9,151,1,151,1,151,3,151,2604,8,151,1,152,1,152,1,152,1,152,
        1,152,1,152,5,152,2612,8,152,10,152,12,152,2615,9,152,1,153,1,153,
        1,153,1,153,1,153,5,153,2622,8,153,10,153,12,153,2625,9,153,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,2637,
        8,154,1,154,3,154,2640,8,154,1,154,1,154,3,154,2644,8,154,1,155,
        1,155,1,155,3,155,2649,8,155,1,155,1,155,3,155,2653,8,155,1,155,
        3,155,2656,8,155,1,155,1,155,1,156,3,156,2661,8,156,1,156,1,156,
        1,156,1,156,1,156,3,156,2668,8,156,1,156,1,156,1,156,1,156,1,156,
        5,156,2675,8,156,10,156,12,156,2678,9,156,3,156,2680,8,156,1,156,
        1,156,1,156,1,156,1,156,1,156,5,156,2688,8,156,10,156,12,156,2691,
        9,156,3,156,2693,8,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,3,156,2705,8,156,1,156,1,156,1,156,1,156,1,156,
        3,156,2712,8,156,1,156,1,156,1,156,1,156,1,156,3,156,2719,8,156,
        1,157,1,157,1,157,1,157,1,157,3,157,2726,8,157,1,157,1,157,1,157,
        1,157,5,157,2732,8,157,10,157,12,157,2735,9,157,1,157,1,157,1,157,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,5,158,2749,
        8,158,10,158,12,158,2752,9,158,3,158,2754,8,158,1,158,3,158,2757,
        8,158,1,158,1,158,1,158,1,158,1,158,3,158,2764,8,158,1,158,1,158,
        1,158,1,158,1,158,3,158,2771,8,158,1,158,1,158,1,158,1,158,1,158,
        3,158,2778,8,158,1,158,1,158,1,158,1,158,1,158,3,158,2785,8,158,
        1,158,1,158,1,159,3,159,2790,8,159,1,159,1,159,1,159,1,159,1,159,
        3,159,2797,8,159,1,159,1,159,1,159,1,159,1,159,1,159,5,159,2805,
        8,159,10,159,12,159,2808,9,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,5,159,2820,8,159,10,159,12,159,2823,9,159,
        1,159,1,159,1,159,1,159,1,159,1,159,5,159,2831,8,159,10,159,12,159,
        2834,9,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,2842,8,159,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,5,160,2851,8,160,10,160,
        12,160,2854,9,160,1,160,1,160,1,160,1,161,3,161,2860,8,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,162,3,162,2878,8,162,1,162,1,162,1,162,1,162,
        1,162,1,162,4,162,2886,8,162,11,162,12,162,2887,3,162,2890,8,162,
        1,162,1,162,1,163,3,163,2895,8,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,5,163,2911,
        8,163,10,163,12,163,2914,9,163,1,163,1,163,1,163,1,163,1,163,1,163,
        5,163,2922,8,163,10,163,12,163,2925,9,163,1,163,1,163,1,163,1,163,
        1,163,1,163,3,163,2933,8,163,1,163,1,163,1,163,1,163,1,163,3,163,
        2940,8,163,1,163,1,163,1,164,1,164,1,164,5,164,2947,8,164,10,164,
        12,164,2950,9,164,1,164,3,164,2953,8,164,1,164,5,164,2956,8,164,
        10,164,12,164,2959,9,164,1,164,3,164,2962,8,164,1,164,1,164,1,165,
        1,165,1,165,3,165,2969,8,165,1,165,1,165,3,165,2973,8,165,1,165,
        1,165,3,165,2977,8,165,1,165,3,165,2980,8,165,1,165,1,165,1,165,
        1,165,1,165,5,165,2987,8,165,10,165,12,165,2990,9,165,3,165,2992,
        8,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3002,
        8,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,4,168,
        3013,8,168,11,168,12,168,3014,1,169,1,169,1,169,3,169,3020,8,169,
        1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,5,171,
        3032,8,171,10,171,12,171,3035,9,171,1,171,1,171,1,171,3,171,3040,
        8,171,1,172,1,172,3,172,3044,8,172,1,172,1,172,3,172,3048,8,172,
        1,173,1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,3,174,3059,
        8,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,
        3103,8,174,1,175,1,175,1,175,1,175,3,175,3109,8,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,3,175,3158,8,175,1,176,1,176,1,176,3,176,3163,8,176,1,176,
        1,176,1,176,3,176,3168,8,176,5,176,3170,8,176,10,176,12,176,3173,
        9,176,1,176,3,176,3176,8,176,1,177,1,177,1,177,1,177,5,177,3182,
        8,177,10,177,12,177,3185,9,177,1,178,1,178,1,178,1,178,1,178,1,179,
        1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,4,180,
        3203,8,180,11,180,12,180,3204,3,180,3207,8,180,1,181,1,181,1,181,
        1,181,3,181,3213,8,181,1,182,1,182,3,182,3217,8,182,1,182,1,182,
        1,182,3,182,3222,8,182,5,182,3224,8,182,10,182,12,182,3227,9,182,
        1,183,1,183,1,183,1,183,4,183,3233,8,183,11,183,12,183,3234,1,183,
        1,183,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,186,1,186,
        1,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,1,187,5,187,3258,
        8,187,10,187,12,187,3261,9,187,1,187,1,187,1,188,1,188,1,188,1,188,
        1,188,3,188,3270,8,188,1,189,1,189,1,189,1,190,1,190,1,190,1,191,
        1,191,1,191,3,191,3281,8,191,1,191,1,191,3,191,3285,8,191,1,191,
        1,191,1,191,3,191,3290,8,191,1,192,1,192,1,192,5,192,3295,8,192,
        10,192,12,192,3298,9,192,1,193,1,193,1,193,5,193,3303,8,193,10,193,
        12,193,3306,9,193,1,194,1,194,1,194,1,194,1,194,3,194,3313,8,194,
        4,194,3315,8,194,11,194,12,194,3316,1,194,1,194,1,194,3,194,3322,
        8,194,3,194,3324,8,194,1,194,1,194,1,195,1,195,1,195,1,195,3,195,
        3332,8,195,1,195,1,195,1,195,1,195,1,195,3,195,3339,8,195,1,195,
        1,195,1,195,3,195,3344,8,195,3,195,3346,8,195,3,195,3348,8,195,1,
        195,1,195,3,195,3352,8,195,1,196,1,196,1,196,1,196,1,196,5,196,3359,
        8,196,10,196,12,196,3362,9,196,1,197,1,197,3,197,3366,8,197,1,197,
        1,197,3,197,3370,8,197,1,198,1,198,3,198,3374,8,198,1,199,1,199,
        1,199,1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,5,200,3390,8,200,10,200,12,200,3393,9,200,1,200,1,200,1,200,
        1,200,1,200,5,200,3400,8,200,10,200,12,200,3403,9,200,1,200,1,200,
        3,200,3407,8,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,
        3416,8,200,1,200,3,200,3419,8,200,1,200,1,200,3,200,3423,8,200,1,
        200,1,200,5,200,3427,8,200,10,200,12,200,3430,9,200,1,200,1,200,
        3,200,3434,8,200,1,200,3,200,3437,8,200,1,200,1,200,3,200,3441,8,
        200,1,200,1,200,5,200,3445,8,200,10,200,12,200,3448,9,200,1,200,
        1,200,3,200,3452,8,200,1,200,3,200,3455,8,200,1,200,1,200,3,200,
        3459,8,200,1,200,1,200,5,200,3463,8,200,10,200,12,200,3466,9,200,
        1,200,1,200,3,200,3470,8,200,1,200,3,200,3473,8,200,1,200,1,200,
        3,200,3477,8,200,1,200,1,200,5,200,3481,8,200,10,200,12,200,3484,
        9,200,1,200,1,200,3,200,3488,8,200,1,200,1,200,1,200,1,200,3,200,
        3494,8,200,1,200,1,200,3,200,3498,8,200,1,200,1,200,1,200,1,200,
        5,200,3504,8,200,10,200,12,200,3507,9,200,1,200,1,200,3,200,3511,
        8,200,1,200,5,200,3514,8,200,10,200,12,200,3517,9,200,1,200,1,200,
        3,200,3521,8,200,1,200,1,200,1,200,1,200,5,200,3527,8,200,10,200,
        12,200,3530,9,200,1,200,1,200,3,200,3534,8,200,1,200,5,200,3537,
        8,200,10,200,12,200,3540,9,200,1,200,3,200,3543,8,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,3,200,3552,8,200,1,200,1,200,1,200,
        1,200,3,200,3558,8,200,1,200,1,200,1,200,1,200,1,200,3,200,3565,
        8,200,1,200,1,200,1,200,1,200,1,200,3,200,3572,8,200,1,200,1,200,
        1,200,1,200,1,200,3,200,3579,8,200,1,200,1,200,1,200,1,200,1,200,
        3,200,3586,8,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,3,200,3609,8,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,3,200,3620,8,200,1,200,1,200,1,200,1,200,3,200,
        3626,8,200,1,200,1,200,1,200,1,200,1,200,1,200,5,200,3634,8,200,
        10,200,12,200,3637,9,200,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,3,201,3652,8,201,1,201,1,201,
        1,201,1,201,1,201,5,201,3659,8,201,10,201,12,201,3662,9,201,3,201,
        3664,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,
        3674,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,3683,
        8,201,1,201,3,201,3686,8,201,1,201,1,201,1,201,3,201,3691,8,201,
        1,201,3,201,3694,8,201,5,201,3696,8,201,10,201,12,201,3699,9,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,3,201,3715,8,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,4,201,3747,8,201,11,201,12,201,3748,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,3,201,3768,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,3,201,3802,8,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,3,201,3811,8,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,
        3826,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,3,201,3896,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,3,201,3936,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,5,201,3957,8,201,10,201,12,201,3960,9,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,3,201,3969,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,3,201,3979,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,3,201,3990,8,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,3,201,4001,8,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,3,201,4010,8,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,3,201,4020,8,201,3,201,4022,8,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,3,201,4041,8,201,3,201,4043,
        8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        3,201,4055,8,201,3,201,4057,8,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,4071,8,201,3,201,
        4073,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,3,201,4099,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,5,201,4109,8,201,10,201,12,201,4112,9,201,
        3,201,4114,8,201,1,201,1,201,1,201,1,201,5,201,4120,8,201,10,201,
        12,201,4123,9,201,1,202,1,202,1,202,1,202,4,202,4129,8,202,11,202,
        12,202,4130,1,202,1,202,1,203,1,203,3,203,4137,8,203,1,203,3,203,
        4140,8,203,1,203,1,203,1,203,3,203,4145,8,203,1,203,1,203,1,203,
        3,203,4150,8,203,1,204,1,204,1,204,1,204,3,204,4156,8,204,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,4,205,4165,8,205,11,205,12,205,
        4166,1,205,1,205,3,205,4171,8,205,1,205,1,205,1,206,1,206,1,206,
        1,206,1,206,1,206,4,206,4181,8,206,11,206,12,206,4182,1,206,1,206,
        3,206,4187,8,206,1,206,1,206,1,207,1,207,1,207,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,3,209,4211,8,209,1,210,1,210,1,210,1,210,1,210,
        1,211,1,211,1,211,1,211,1,211,3,211,4223,8,211,1,211,1,211,3,211,
        4227,8,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,4235,8,211,
        3,211,4237,8,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,3,212,4261,8,212,1,213,1,213,1,213,3,213,4266,
        8,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,3,213,4282,8,213,1,213,3,213,4285,8,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        3,213,4298,8,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,
        4318,8,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,4,214,4327,
        8,214,11,214,12,214,4328,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,3,214,4341,8,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,3,214,4350,8,214,1,214,1,214,1,214,1,214,3,214,4356,
        8,214,3,214,4358,8,214,1,214,1,214,3,214,4362,8,214,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,4,214,4373,8,214,11,214,
        12,214,4374,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,5,214,4405,8,214,
        10,214,12,214,4408,9,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        4,214,4417,8,214,11,214,12,214,4418,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,5,214,4432,8,214,10,214,12,214,
        4435,9,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,3,214,4449,8,214,1,215,1,215,1,215,1,215,1,215,
        1,215,3,215,4457,8,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,3,215,4472,8,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,3,215,4482,8,215,1,215,1,215,
        1,215,1,215,1,215,3,215,4489,8,215,1,215,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,4505,
        8,215,1,216,3,216,4508,8,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,4517,8,216,3,216,4519,8,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,5,216,4530,8,216,10,216,12,216,4533,
        9,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,5,216,
        4544,8,216,10,216,12,216,4547,9,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,5,216,4558,8,216,10,216,12,216,4561,9,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,5,216,4572,
        8,216,10,216,12,216,4575,9,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,5,216,4584,8,216,10,216,12,216,4587,9,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,5,216,4596,8,216,10,216,12,216,4599,9,216,
        1,216,1,216,1,216,1,216,4,216,4605,8,216,11,216,12,216,4606,3,216,
        4609,8,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,4,216,4627,8,216,11,216,
        12,216,4628,1,216,1,216,1,216,3,216,4634,8,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,4,216,4645,8,216,11,216,12,216,
        4646,1,216,1,216,3,216,4651,8,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,4,216,4664,8,216,11,216,12,216,
        4665,1,216,1,216,3,216,4670,8,216,1,216,1,216,1,216,3,216,4675,8,
        216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,4685,8,
        216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,4693,8,216,1,216,1,
        216,1,216,1,216,1,216,1,216,1,216,3,216,4702,8,216,3,216,4704,8,
        216,1,216,1,216,1,216,3,216,4709,8,216,1,216,1,216,1,216,1,216,1,
        216,3,216,4716,8,216,1,216,1,216,3,216,4720,8,216,1,217,1,217,1,
        217,1,217,1,217,3,217,4727,8,217,1,217,1,217,1,217,1,217,1,217,1,
        217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,3,217,4746,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,3,217,4758,8,217,1,217,1,217,3,217,4762,8,217,
        1,218,3,218,4765,8,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,
        4773,8,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,
        4783,8,218,1,218,1,218,1,218,1,218,1,218,3,218,4790,8,218,1,218,
        1,218,1,218,3,218,4795,8,218,1,218,1,218,1,218,1,218,1,218,1,218,
        1,218,3,218,4804,8,218,1,218,1,218,1,218,3,218,4809,8,218,1,218,
        1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,4821,
        8,218,1,218,1,218,1,218,1,218,1,218,3,218,4828,8,218,1,219,1,219,
        1,219,1,219,3,219,4834,8,219,1,219,1,219,1,219,3,219,4839,8,219,
        1,219,3,219,4842,8,219,1,219,1,219,1,219,3,219,4847,8,219,1,219,
        1,219,1,219,3,219,4852,8,219,1,219,3,219,4855,8,219,1,219,1,219,
        3,219,4859,8,219,1,219,3,219,4862,8,219,1,219,1,219,1,219,1,219,
        3,219,4868,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,3,219,4879,8,219,1,219,1,219,3,219,4883,8,219,1,219,3,219,
        4886,8,219,1,220,3,220,4889,8,220,1,220,1,220,1,220,1,220,1,220,
        1,220,3,220,4897,8,220,1,220,1,220,1,220,1,220,3,220,4903,8,220,
        1,220,1,220,3,220,4907,8,220,1,220,1,220,3,220,4911,8,220,1,221,
        3,221,4914,8,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,1,221,3,221,4928,8,221,1,221,1,221,1,221,1,221,
        1,221,4,221,4935,8,221,11,221,12,221,4936,1,221,1,221,3,221,4941,
        8,221,1,222,3,222,4944,8,222,1,222,1,222,1,222,1,222,1,222,1,223,
        1,223,1,223,1,223,1,223,1,223,5,223,4957,8,223,10,223,12,223,4960,
        9,223,1,223,4,223,4963,8,223,11,223,12,223,4964,3,223,4967,8,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,
        4979,8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,
        4989,8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,
        4999,8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,
        5009,8,223,3,223,5011,8,223,3,223,5013,8,223,1,223,1,223,1,223,3,
        223,5018,8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,
        223,5028,8,223,3,223,5030,8,223,3,223,5032,8,223,1,223,1,223,1,223,
        3,223,5037,8,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,5045,
        8,223,1,223,1,223,1,223,3,223,5050,8,223,1,223,1,223,1,223,1,223,
        1,223,1,223,3,223,5058,8,223,3,223,5060,8,223,1,223,1,223,1,223,
        3,223,5065,8,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,5073,
        8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,5082,8,223,
        1,224,1,224,1,224,1,224,1,224,1,224,3,224,5090,8,224,1,224,1,224,
        1,224,1,224,1,224,1,224,3,224,5098,8,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,3,224,5108,8,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,3,224,5118,8,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,
        5134,8,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        1,225,5,225,5157,8,225,10,225,12,225,5160,9,225,1,225,1,225,3,225,
        5164,8,225,1,226,3,226,5167,8,226,1,226,1,226,1,226,1,226,1,227,
        3,227,5174,8,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5182,
        8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,3,227,5200,8,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,3,227,5209,8,227,1,228,3,228,5212,
        8,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,3,228,5222,
        8,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,3,228,
        5233,8,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
        1,229,1,229,1,229,1,229,1,229,1,229,1,229,3,229,5251,8,229,1,229,
        1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
        1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
        3,229,5276,8,229,1,230,3,230,5279,8,230,1,230,1,230,1,230,1,230,
        1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5293,8,230,
        1,230,1,230,1,230,3,230,5298,8,230,1,230,1,230,1,230,1,230,1,230,
        1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5314,
        8,230,1,230,1,230,1,230,3,230,5319,8,230,1,230,1,230,1,230,1,230,
        1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,
        5335,8,230,1,230,1,230,1,230,3,230,5340,8,230,1,230,1,230,1,230,
        1,230,1,230,1,230,1,230,3,230,5349,8,230,1,230,1,230,1,230,3,230,
        5354,8,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
        1,230,1,230,3,230,5367,8,230,1,231,3,231,5370,8,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,5,231,5389,8,231,10,231,12,231,5392,9,231,
        1,231,1,231,1,231,3,231,5397,8,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,5,231,5408,8,231,10,231,12,231,5411,9,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5421,8,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,
        5433,8,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,3,231,5449,8,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5461,8,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5472,8,231,
        3,231,5474,8,231,1,231,1,231,1,231,3,231,5479,8,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,3,231,5495,8,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,3,231,5505,8,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        3,231,5514,8,231,1,231,1,231,1,231,3,231,5519,8,231,1,231,1,231,
        1,231,1,231,1,231,3,231,5526,8,231,1,231,1,231,1,231,3,231,5531,
        8,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,
        5542,8,231,1,231,1,231,1,231,3,231,5547,8,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5560,8,231,
        3,231,5562,8,231,3,231,5564,8,231,1,231,1,231,1,231,3,231,5569,8,
        231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,5578,8,231,1,
        231,1,231,1,231,3,231,5583,8,231,1,231,1,231,1,231,1,231,1,231,1,
        231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,3,231,5602,8,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        3,231,5611,8,231,3,231,5613,8,231,1,231,1,231,1,231,3,231,5618,8,
        231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,3,231,5644,8,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,3,231,5655,8,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,1,231,3,231,5666,8,231,1,231,1,231,1,231,
        1,231,1,231,1,231,3,231,5674,8,231,1,231,3,231,5677,8,231,1,231,
        1,231,1,231,3,231,5682,8,231,1,232,3,232,5685,8,232,1,232,1,232,
        1,232,1,232,1,232,3,232,5692,8,232,1,232,3,232,5695,8,232,1,232,
        1,232,1,232,1,232,1,232,3,232,5702,8,232,1,232,1,232,1,232,3,232,
        5707,8,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,5715,8,232,
        1,232,1,232,1,232,1,232,1,232,3,232,5722,8,232,1,232,1,232,3,232,
        5726,8,232,1,232,3,232,5729,8,232,1,232,1,232,1,232,1,232,1,232,
        1,232,1,232,1,232,3,232,5739,8,232,1,232,1,232,1,232,1,232,1,232,
        1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
        1,232,1,232,1,232,1,232,3,232,5761,8,232,1,232,1,232,1,232,1,232,
        1,232,1,232,1,232,1,232,1,232,3,232,5772,8,232,3,232,5774,8,232,
        1,232,1,232,1,232,1,232,1,232,1,232,1,232,5,232,5783,8,232,10,232,
        12,232,5786,9,232,1,232,1,232,3,232,5790,8,232,1,232,1,232,1,232,
        1,232,1,232,5,232,5797,8,232,10,232,12,232,5800,9,232,1,232,1,232,
        3,232,5804,8,232,3,232,5806,8,232,1,233,1,233,1,233,1,233,1,233,
        1,233,3,233,5814,8,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,3,233,5825,8,233,1,233,3,233,5828,8,233,1,233,3,233,
        5831,8,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,
        5841,8,233,1,233,3,233,5844,8,233,1,233,1,233,3,233,5848,8,233,1,
        233,3,233,5851,8,233,1,233,1,233,3,233,5855,8,233,1,233,1,233,3,
        233,5859,8,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5867,8,
        233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5875,8,233,1,233,1,
        233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5885,8,233,1,233,1,
        233,3,233,5889,8,233,1,233,1,233,3,233,5893,8,233,1,233,3,233,5896,
        8,233,1,233,1,233,1,233,1,233,1,233,3,233,5903,8,233,1,233,1,233,
        1,233,5,233,5908,8,233,10,233,12,233,5911,9,233,3,233,5913,8,233,
        1,233,3,233,5916,8,233,1,233,3,233,5919,8,233,1,233,1,233,1,233,
        1,233,1,233,1,233,5,233,5927,8,233,10,233,12,233,5930,9,233,1,233,
        3,233,5933,8,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5941,
        8,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5951,
        8,233,1,233,3,233,5954,8,233,1,233,1,233,1,233,1,233,1,233,1,233,
        3,233,5962,8,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,3,233,5987,8,233,1,233,1,233,3,233,5991,
        8,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        5,233,6003,8,233,10,233,12,233,6006,9,233,3,233,6008,8,233,1,233,
        3,233,6011,8,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,5,233,6026,8,233,10,233,12,233,6029,
        9,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,3,233,6055,8,233,1,234,1,234,1,234,1,234,1,234,
        5,234,6062,8,234,10,234,12,234,6065,9,234,1,234,1,234,1,234,3,234,
        6070,8,234,1,234,1,234,1,234,1,234,1,234,3,234,6077,8,234,3,234,
        6079,8,234,1,235,1,235,1,235,1,235,1,235,5,235,6086,8,235,10,235,
        12,235,6089,9,235,1,235,1,235,3,235,6093,8,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,1,235,3,235,6104,8,235,1,235,1,235,
        3,235,6108,8,235,1,236,1,236,1,236,1,237,1,237,1,237,1,238,1,238,
        1,238,1,239,1,239,1,239,1,240,1,240,1,241,1,241,1,241,1,241,5,241,
        6128,8,241,10,241,12,241,6131,9,241,1,241,1,241,1,242,1,242,1,242,
        1,242,1,242,3,242,6140,8,242,1,243,1,243,1,243,1,243,3,243,6146,
        8,243,1,244,1,244,1,244,1,244,5,244,6152,8,244,10,244,12,244,6155,
        9,244,1,244,1,244,1,244,1,244,3,244,6161,8,244,5,244,6163,8,244,
        10,244,12,244,6166,9,244,1,244,1,244,1,245,1,245,1,245,3,245,6173,
        8,245,1,246,1,246,1,246,1,246,3,246,6179,8,246,1,246,3,246,6182,
        8,246,1,247,1,247,1,247,3,247,6187,8,247,1,248,1,248,1,248,1,248,
        3,248,6193,8,248,3,248,6195,8,248,1,248,1,248,5,248,6199,8,248,10,
        248,12,248,6202,9,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,
        3,249,6211,8,249,1,249,1,249,3,249,6215,8,249,1,250,1,250,1,250,
        1,250,3,250,6221,8,250,1,251,1,251,1,251,1,251,1,251,1,251,3,251,
        6229,8,251,1,252,1,252,1,252,1,252,3,252,6235,8,252,1,252,3,252,
        6238,8,252,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        3,253,6249,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        3,253,6259,8,253,1,254,1,254,1,254,3,254,6264,8,254,1,254,3,254,
        6267,8,254,1,254,3,254,6270,8,254,1,254,1,254,1,255,1,255,1,255,
        3,255,6277,8,255,1,255,1,255,1,255,1,256,1,256,1,256,3,256,6285,
        8,256,1,256,1,256,3,256,6289,8,256,1,256,1,256,1,257,1,257,1,257,
        1,257,1,257,5,257,6298,8,257,10,257,12,257,6301,9,257,1,258,1,258,
        1,258,1,258,1,258,5,258,6308,8,258,10,258,12,258,6311,9,258,1,258,
        1,258,1,258,3,258,6316,8,258,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        3,259,6401,8,259,3,259,6403,8,259,1,260,1,260,1,260,1,260,1,260,
        3,260,6410,8,260,1,260,1,260,3,260,6414,8,260,1,261,1,261,1,261,
        3,261,6419,8,261,1,261,1,261,1,261,1,261,5,261,6425,8,261,10,261,
        12,261,6428,9,261,3,261,6430,8,261,1,262,1,262,1,262,1,262,1,263,
        1,263,1,263,1,263,1,263,5,263,6441,8,263,10,263,12,263,6444,9,263,
        1,263,1,263,1,264,1,264,1,264,3,264,6451,8,264,1,265,1,265,1,265,
        3,265,6456,8,265,1,266,1,266,3,266,6460,8,266,1,267,1,267,1,267,
        1,267,1,267,5,267,6467,8,267,10,267,12,267,6470,9,267,1,267,1,267,
        1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,3,268,6482,8,268,
        1,269,1,269,1,269,1,269,1,269,1,269,3,269,6490,8,269,1,269,1,269,
        1,269,1,269,1,269,1,269,3,269,6498,8,269,5,269,6500,8,269,10,269,
        12,269,6503,9,269,1,270,1,270,1,270,1,270,3,270,6509,8,270,1,270,
        1,270,3,270,6513,8,270,1,271,1,271,1,271,1,272,1,272,1,272,1,272,
        1,273,1,273,1,273,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,
        3,274,6533,8,274,1,275,1,275,1,275,1,276,1,276,1,277,1,277,1,277,
        1,277,1,278,1,278,1,278,1,278,1,278,3,278,6549,8,278,1,278,3,278,
        6552,8,278,1,278,1,278,3,278,6556,8,278,1,279,1,279,1,279,5,279,
        6561,8,279,10,279,12,279,6564,9,279,1,279,1,279,1,279,1,280,1,280,
        1,280,1,280,5,280,6573,8,280,10,280,12,280,6576,9,280,1,281,1,281,
        3,281,6580,8,281,1,281,3,281,6583,8,281,1,282,1,282,1,282,1,282,
        1,282,1,282,5,282,6591,8,282,10,282,12,282,6594,9,282,1,282,1,282,
        1,282,1,282,1,282,1,282,1,282,1,282,5,282,6604,8,282,10,282,12,282,
        6607,9,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,5,282,
        6617,8,282,10,282,12,282,6620,9,282,1,282,1,282,1,282,1,282,1,282,
        1,282,3,282,6628,8,282,1,283,1,283,3,283,6632,8,283,1,283,1,283,
        1,284,1,284,3,284,6638,8,284,1,284,3,284,6641,8,284,1,285,1,285,
        3,285,6645,8,285,1,285,1,285,1,286,1,286,1,286,3,286,6652,8,286,
        1,286,1,286,1,286,1,286,3,286,6658,8,286,1,286,1,286,3,286,6662,
        8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,5,287,6672,
        8,287,10,287,12,287,6675,9,287,1,287,1,287,1,287,1,287,1,287,1,287,
        1,287,1,287,1,287,1,287,5,287,6687,8,287,10,287,12,287,6690,9,287,
        1,287,1,287,3,287,6694,8,287,1,288,1,288,3,288,6698,8,288,1,288,
        3,288,6701,8,288,1,289,1,289,3,289,6705,8,289,1,289,3,289,6708,8,
        289,1,290,1,290,1,290,1,290,3,290,6714,8,290,1,290,3,290,6717,8,
        290,1,291,1,291,3,291,6721,8,291,1,292,1,292,1,292,1,292,5,292,6727,
        8,292,10,292,12,292,6730,9,292,1,292,1,292,1,293,1,293,1,293,1,293,
        5,293,6738,8,293,10,293,12,293,6741,9,293,1,293,1,293,1,294,1,294,
        1,294,1,294,5,294,6749,8,294,10,294,12,294,6752,9,294,1,294,1,294,
        1,295,1,295,3,295,6758,8,295,1,295,1,295,1,295,1,296,1,296,1,296,
        1,297,1,297,1,297,1,298,1,298,1,298,1,298,1,299,1,299,1,299,1,300,
        1,300,1,300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
        1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,6797,
        8,301,1,302,1,302,1,303,1,303,1,303,1,303,3,303,6805,8,303,1,304,
        4,304,6808,8,304,11,304,12,304,6809,1,305,1,305,3,305,6814,8,305,
        1,305,1,305,3,305,6818,8,305,1,305,1,305,3,305,6822,8,305,1,305,
        1,305,3,305,6826,8,305,1,305,3,305,6829,8,305,1,305,1,305,3,305,
        6833,8,305,1,305,3,305,6836,8,305,1,306,1,306,1,306,1,306,1,306,
        3,306,6843,8,306,1,306,1,306,1,306,1,306,3,306,6849,8,306,1,307,
        1,307,1,307,1,307,5,307,6855,8,307,10,307,12,307,6858,9,307,1,308,
        1,308,3,308,6862,8,308,1,309,1,309,3,309,6866,8,309,1,309,1,309,
        1,309,1,310,1,310,1,310,3,310,6874,8,310,1,310,1,310,1,310,1,310,
        1,310,1,310,4,310,6882,8,310,11,310,12,310,6883,1,310,1,310,1,311,
        1,311,1,311,1,311,1,311,5,311,6893,8,311,10,311,12,311,6896,9,311,
        1,311,1,311,1,312,1,312,1,312,5,312,6903,8,312,10,312,12,312,6906,
        9,312,1,312,1,312,1,312,1,312,3,312,6912,8,312,1,312,3,312,6915,
        8,312,3,312,6917,8,312,1,313,3,313,6920,8,313,1,313,1,313,1,313,
        1,313,3,313,6926,8,313,3,313,6928,8,313,1,313,1,2445,3,240,400,402,
        314,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
        284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
        316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
        348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
        380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
        412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
        444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
        476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
        508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,
        540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
        572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
        604,606,608,610,612,614,616,618,620,622,624,626,0,100,1,0,114,115,
        1,0,197,198,1,0,452,453,3,0,395,395,937,937,939,939,4,0,567,567,
        580,581,705,706,908,908,1,0,143,144,2,0,108,109,278,278,2,0,52,52,
        55,55,2,0,1042,1042,1059,1059,1,0,1221,1222,3,0,681,681,723,723,
        752,752,2,0,723,723,752,752,4,0,173,173,725,725,735,735,1015,1015,
        2,0,438,438,455,455,2,0,272,272,1211,1211,2,0,49,49,88,88,2,0,735,
        735,1015,1015,2,0,556,556,1010,1010,1,0,1069,1072,2,0,1198,1200,
        1203,1203,12,0,106,106,506,509,678,678,774,774,778,779,863,864,904,
        904,949,949,985,985,1009,1009,1026,1028,1061,1062,1,0,488,1192,4,
        0,142,142,204,204,247,247,447,447,1,0,369,370,3,0,165,165,219,219,
        355,355,1,0,1185,1186,2,0,178,178,840,840,2,0,21,21,116,116,2,0,
        156,156,731,731,4,0,556,556,735,735,1010,1010,1015,1015,1,0,1219,
        1220,1,0,1217,1218,2,0,736,736,876,876,3,0,520,521,523,525,530,530,
        4,0,513,513,519,519,528,529,531,531,3,0,515,515,526,527,532,532,
        3,0,817,817,823,823,825,825,3,0,815,816,819,820,822,822,6,0,106,
        106,185,185,248,248,258,258,368,368,478,478,4,0,185,185,248,248,
        258,258,368,368,9,0,30,32,213,213,238,239,244,244,246,246,380,380,
        396,397,403,403,461,462,2,0,13,13,121,121,3,0,80,80,84,85,327,335,
        3,0,13,13,121,121,448,448,7,0,30,32,238,239,244,244,246,246,396,
        397,403,403,461,462,3,0,301,301,603,603,630,630,2,0,673,673,734,
        734,2,0,730,730,737,737,3,0,237,237,241,241,260,260,1,0,851,852,
        16,0,3,3,6,7,22,23,25,25,27,27,81,82,113,113,147,147,222,222,228,
        228,276,276,318,318,378,379,390,390,407,408,479,479,3,0,565,566,
        674,674,926,926,3,0,26,26,251,251,319,319,2,0,894,894,1006,1006,
        2,0,815,816,819,820,2,0,43,43,45,45,3,0,52,53,55,58,240,240,3,0,
        161,161,425,425,437,437,5,0,547,547,549,550,682,682,892,893,924,
        925,3,0,957,960,966,970,972,976,5,0,612,616,783,785,867,868,1033,
        1036,1064,1064,2,0,689,689,738,738,6,0,561,562,620,621,748,751,964,
        965,1003,1004,1141,1144,1,0,997,998,2,0,995,995,999,999,1,0,808,
        809,7,0,185,185,248,248,258,258,368,368,478,478,1076,1076,1099,1099,
        2,0,9,9,814,814,7,0,106,106,185,185,248,248,258,258,368,368,423,
        424,478,478,1,0,179,180,1,0,650,651,1,0,450,451,5,0,535,535,572,
        572,708,708,739,739,1084,1084,4,0,54,54,383,383,399,399,465,465,
        2,0,219,219,355,355,3,0,233,233,454,454,1011,1011,2,0,746,746,898,
        898,2,0,747,747,899,899,2,0,159,159,1208,1208,1,0,401,402,1,0,433,
        434,3,0,39,39,217,217,429,429,2,0,593,593,636,636,2,0,661,661,701,
        701,2,0,307,307,942,942,3,0,593,593,636,636,914,914,1,0,1104,1107,
        2,0,290,290,1208,1208,2,0,274,274,649,649,2,0,593,593,914,914,4,
        0,274,274,489,489,649,649,794,794,2,0,697,697,885,885,4,0,32,32,
        629,629,690,690,745,745,2,0,660,660,700,700,2,0,1207,1207,1210,1210,
        3,0,13,13,18,18,382,382,1,0,226,227,2,0,159,159,190,190,2,0,659,
        659,662,662,2,0,128,128,938,938,7967,0,654,1,0,0,0,2,657,1,0,0,0,
        4,661,1,0,0,0,6,674,1,0,0,0,8,719,1,0,0,0,10,722,1,0,0,0,12,781,
        1,0,0,0,14,794,1,0,0,0,16,808,1,0,0,0,18,811,1,0,0,0,20,838,1,0,
        0,0,22,868,1,0,0,0,24,924,1,0,0,0,26,927,1,0,0,0,28,972,1,0,0,0,
        30,988,1,0,0,0,32,1001,1,0,0,0,34,1026,1,0,0,0,36,1091,1,0,0,0,38,
        1093,1,0,0,0,40,1104,1,0,0,0,42,1121,1,0,0,0,44,1184,1,0,0,0,46,
        1188,1,0,0,0,48,1190,1,0,0,0,50,1213,1,0,0,0,52,1271,1,0,0,0,54,
        1287,1,0,0,0,56,1307,1,0,0,0,58,1309,1,0,0,0,60,1339,1,0,0,0,62,
        1346,1,0,0,0,64,1359,1,0,0,0,66,1372,1,0,0,0,68,1377,1,0,0,0,70,
        1379,1,0,0,0,72,1381,1,0,0,0,74,1394,1,0,0,0,76,1401,1,0,0,0,78,
        1405,1,0,0,0,80,1407,1,0,0,0,82,1411,1,0,0,0,84,1421,1,0,0,0,86,
        1452,1,0,0,0,88,1460,1,0,0,0,90,1462,1,0,0,0,92,1470,1,0,0,0,94,
        1481,1,0,0,0,96,1490,1,0,0,0,98,1502,1,0,0,0,100,1546,1,0,0,0,102,
        1588,1,0,0,0,104,1598,1,0,0,0,106,1616,1,0,0,0,108,1633,1,0,0,0,
        110,1652,1,0,0,0,112,1678,1,0,0,0,114,1729,1,0,0,0,116,1739,1,0,
        0,0,118,1749,1,0,0,0,120,1757,1,0,0,0,122,1761,1,0,0,0,124,1763,
        1,0,0,0,126,1828,1,0,0,0,128,1830,1,0,0,0,130,1834,1,0,0,0,132,1841,
        1,0,0,0,134,1848,1,0,0,0,136,1852,1,0,0,0,138,1855,1,0,0,0,140,1859,
        1,0,0,0,142,1865,1,0,0,0,144,1868,1,0,0,0,146,1871,1,0,0,0,148,1875,
        1,0,0,0,150,1879,1,0,0,0,152,1883,1,0,0,0,154,1894,1,0,0,0,156,1896,
        1,0,0,0,158,1900,1,0,0,0,160,1917,1,0,0,0,162,1919,1,0,0,0,164,1922,
        1,0,0,0,166,1930,1,0,0,0,168,1943,1,0,0,0,170,1947,1,0,0,0,172,1949,
        1,0,0,0,174,1951,1,0,0,0,176,1953,1,0,0,0,178,1956,1,0,0,0,180,1961,
        1,0,0,0,182,1966,1,0,0,0,184,1970,1,0,0,0,186,2004,1,0,0,0,188,2006,
        1,0,0,0,190,2020,1,0,0,0,192,2026,1,0,0,0,194,2030,1,0,0,0,196,2035,
        1,0,0,0,198,2044,1,0,0,0,200,2053,1,0,0,0,202,2062,1,0,0,0,204,2071,
        1,0,0,0,206,2079,1,0,0,0,208,2083,1,0,0,0,210,2088,1,0,0,0,212,2092,
        1,0,0,0,214,2096,1,0,0,0,216,2100,1,0,0,0,218,2104,1,0,0,0,220,2108,
        1,0,0,0,222,2112,1,0,0,0,224,2116,1,0,0,0,226,2120,1,0,0,0,228,2124,
        1,0,0,0,230,2128,1,0,0,0,232,2132,1,0,0,0,234,2136,1,0,0,0,236,2138,
        1,0,0,0,238,2140,1,0,0,0,240,2148,1,0,0,0,242,2161,1,0,0,0,244,2206,
        1,0,0,0,246,2210,1,0,0,0,248,2224,1,0,0,0,250,2226,1,0,0,0,252,2239,
        1,0,0,0,254,2258,1,0,0,0,256,2272,1,0,0,0,258,2285,1,0,0,0,260,2287,
        1,0,0,0,262,2302,1,0,0,0,264,2335,1,0,0,0,266,2343,1,0,0,0,268,2354,
        1,0,0,0,270,2358,1,0,0,0,272,2364,1,0,0,0,274,2368,1,0,0,0,276,2433,
        1,0,0,0,278,2435,1,0,0,0,280,2438,1,0,0,0,282,2470,1,0,0,0,284,2484,
        1,0,0,0,286,2516,1,0,0,0,288,2518,1,0,0,0,290,2524,1,0,0,0,292,2529,
        1,0,0,0,294,2541,1,0,0,0,296,2544,1,0,0,0,298,2558,1,0,0,0,300,2575,
        1,0,0,0,302,2590,1,0,0,0,304,2605,1,0,0,0,306,2616,1,0,0,0,308,2636,
        1,0,0,0,310,2645,1,0,0,0,312,2660,1,0,0,0,314,2720,1,0,0,0,316,2739,
        1,0,0,0,318,2789,1,0,0,0,320,2843,1,0,0,0,322,2859,1,0,0,0,324,2877,
        1,0,0,0,326,2894,1,0,0,0,328,2943,1,0,0,0,330,2965,1,0,0,0,332,2993,
        1,0,0,0,334,3003,1,0,0,0,336,3010,1,0,0,0,338,3016,1,0,0,0,340,3021,
        1,0,0,0,342,3039,1,0,0,0,344,3041,1,0,0,0,346,3049,1,0,0,0,348,3102,
        1,0,0,0,350,3157,1,0,0,0,352,3159,1,0,0,0,354,3177,1,0,0,0,356,3186,
        1,0,0,0,358,3191,1,0,0,0,360,3206,1,0,0,0,362,3212,1,0,0,0,364,3216,
        1,0,0,0,366,3228,1,0,0,0,368,3238,1,0,0,0,370,3241,1,0,0,0,372,3246,
        1,0,0,0,374,3251,1,0,0,0,376,3269,1,0,0,0,378,3271,1,0,0,0,380,3274,
        1,0,0,0,382,3277,1,0,0,0,384,3291,1,0,0,0,386,3299,1,0,0,0,388,3314,
        1,0,0,0,390,3327,1,0,0,0,392,3353,1,0,0,0,394,3363,1,0,0,0,396,3371,
        1,0,0,0,398,3375,1,0,0,0,400,3625,1,0,0,0,402,3714,1,0,0,0,404,4124,
        1,0,0,0,406,4149,1,0,0,0,408,4155,1,0,0,0,410,4157,1,0,0,0,412,4174,
        1,0,0,0,414,4190,1,0,0,0,416,4193,1,0,0,0,418,4210,1,0,0,0,420,4212,
        1,0,0,0,422,4217,1,0,0,0,424,4260,1,0,0,0,426,4297,1,0,0,0,428,4448,
        1,0,0,0,430,4504,1,0,0,0,432,4719,1,0,0,0,434,4761,1,0,0,0,436,4827,
        1,0,0,0,438,4885,1,0,0,0,440,4910,1,0,0,0,442,4940,1,0,0,0,444,4943,
        1,0,0,0,446,5081,1,0,0,0,448,5133,1,0,0,0,450,5163,1,0,0,0,452,5166,
        1,0,0,0,454,5208,1,0,0,0,456,5232,1,0,0,0,458,5275,1,0,0,0,460,5366,
        1,0,0,0,462,5681,1,0,0,0,464,5805,1,0,0,0,466,6054,1,0,0,0,468,6078,
        1,0,0,0,470,6107,1,0,0,0,472,6109,1,0,0,0,474,6112,1,0,0,0,476,6115,
        1,0,0,0,478,6118,1,0,0,0,480,6121,1,0,0,0,482,6123,1,0,0,0,484,6139,
        1,0,0,0,486,6145,1,0,0,0,488,6147,1,0,0,0,490,6172,1,0,0,0,492,6181,
        1,0,0,0,494,6186,1,0,0,0,496,6194,1,0,0,0,498,6206,1,0,0,0,500,6216,
        1,0,0,0,502,6222,1,0,0,0,504,6237,1,0,0,0,506,6258,1,0,0,0,508,6260,
        1,0,0,0,510,6273,1,0,0,0,512,6281,1,0,0,0,514,6292,1,0,0,0,516,6302,
        1,0,0,0,518,6317,1,0,0,0,520,6404,1,0,0,0,522,6415,1,0,0,0,524,6431,
        1,0,0,0,526,6435,1,0,0,0,528,6447,1,0,0,0,530,6452,1,0,0,0,532,6457,
        1,0,0,0,534,6461,1,0,0,0,536,6481,1,0,0,0,538,6483,1,0,0,0,540,6504,
        1,0,0,0,542,6514,1,0,0,0,544,6517,1,0,0,0,546,6521,1,0,0,0,548,6524,
        1,0,0,0,550,6534,1,0,0,0,552,6537,1,0,0,0,554,6539,1,0,0,0,556,6543,
        1,0,0,0,558,6557,1,0,0,0,560,6568,1,0,0,0,562,6577,1,0,0,0,564,6627,
        1,0,0,0,566,6629,1,0,0,0,568,6635,1,0,0,0,570,6642,1,0,0,0,572,6648,
        1,0,0,0,574,6693,1,0,0,0,576,6695,1,0,0,0,578,6702,1,0,0,0,580,6709,
        1,0,0,0,582,6720,1,0,0,0,584,6722,1,0,0,0,586,6733,1,0,0,0,588,6744,
        1,0,0,0,590,6755,1,0,0,0,592,6762,1,0,0,0,594,6765,1,0,0,0,596,6768,
        1,0,0,0,598,6772,1,0,0,0,600,6775,1,0,0,0,602,6796,1,0,0,0,604,6798,
        1,0,0,0,606,6804,1,0,0,0,608,6807,1,0,0,0,610,6811,1,0,0,0,612,6848,
        1,0,0,0,614,6850,1,0,0,0,616,6861,1,0,0,0,618,6863,1,0,0,0,620,6870,
        1,0,0,0,622,6887,1,0,0,0,624,6899,1,0,0,0,626,6919,1,0,0,0,628,655,
        3,2,1,0,629,655,3,4,2,0,630,655,3,6,3,0,631,655,3,10,5,0,632,655,
        3,16,8,0,633,655,3,26,13,0,634,655,3,32,16,0,635,655,3,34,17,0,636,
        655,3,38,19,0,637,655,3,40,20,0,638,655,3,42,21,0,639,655,3,48,24,
        0,640,655,3,50,25,0,641,655,3,52,26,0,642,655,3,54,27,0,643,655,
        3,58,29,0,644,655,3,60,30,0,645,655,3,62,31,0,646,655,3,64,32,0,
        647,655,3,66,33,0,648,655,3,68,34,0,649,655,3,70,35,0,650,655,3,
        72,36,0,651,655,3,74,37,0,652,655,3,76,38,0,653,655,3,78,39,0,654,
        628,1,0,0,0,654,629,1,0,0,0,654,630,1,0,0,0,654,631,1,0,0,0,654,
        632,1,0,0,0,654,633,1,0,0,0,654,634,1,0,0,0,654,635,1,0,0,0,654,
        636,1,0,0,0,654,637,1,0,0,0,654,638,1,0,0,0,654,639,1,0,0,0,654,
        640,1,0,0,0,654,641,1,0,0,0,654,642,1,0,0,0,654,643,1,0,0,0,654,
        644,1,0,0,0,654,645,1,0,0,0,654,646,1,0,0,0,654,647,1,0,0,0,654,
        648,1,0,0,0,654,649,1,0,0,0,654,650,1,0,0,0,654,651,1,0,0,0,654,
        652,1,0,0,0,654,653,1,0,0,0,655,1,1,0,0,0,656,658,3,606,303,0,657,
        656,1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,660,3,240,120,0,
        660,3,1,0,0,0,661,662,5,370,0,0,662,663,5,16,0,0,663,664,5,76,0,
        0,664,665,5,427,0,0,665,666,5,1194,0,0,666,668,3,256,128,0,667,669,
        3,260,130,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,
        671,5,164,0,0,671,672,3,198,99,0,672,5,1,0,0,0,673,675,3,608,304,
        0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,678,7,0,0,
        0,677,679,3,82,41,0,678,677,1,0,0,0,678,679,1,0,0,0,679,700,1,0,
        0,0,680,701,3,198,99,0,681,682,5,164,0,0,682,687,3,8,4,0,683,684,
        5,1208,0,0,684,686,3,8,4,0,685,683,1,0,0,0,686,689,1,0,0,0,687,685,
        1,0,0,0,687,688,1,0,0,0,688,701,1,0,0,0,689,687,1,0,0,0,690,691,
        3,198,99,0,691,692,5,164,0,0,692,697,3,8,4,0,693,694,5,1208,0,0,
        694,696,3,8,4,0,695,693,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,0,
        697,698,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,700,680,1,0,0,0,
        700,681,1,0,0,0,700,690,1,0,0,0,701,704,1,0,0,0,702,705,3,358,179,
        0,703,705,5,13,0,0,704,702,1,0,0,0,704,703,1,0,0,0,704,705,1,0,0,
        0,705,7,1,0,0,0,706,711,3,198,99,0,707,709,5,20,0,0,708,707,1,0,
        0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,3,214,107,0,711,708,
        1,0,0,0,711,712,1,0,0,0,712,720,1,0,0,0,713,715,3,590,295,0,714,
        716,5,20,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,
        718,3,214,107,0,718,720,1,0,0,0,719,706,1,0,0,0,719,713,1,0,0,0,
        720,9,1,0,0,0,721,723,3,608,304,0,722,721,1,0,0,0,722,723,1,0,0,
        0,723,724,1,0,0,0,724,726,7,1,0,0,725,727,3,82,41,0,726,725,1,0,
        0,0,726,727,1,0,0,0,727,729,1,0,0,0,728,730,5,206,0,0,729,728,1,
        0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,733,3,198,99,0,732,734,
        3,294,147,0,733,732,1,0,0,0,733,734,1,0,0,0,734,779,1,0,0,0,735,
        737,5,460,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,
        740,5,1213,0,0,739,741,3,402,201,0,740,739,1,0,0,0,740,741,1,0,0,
        0,741,748,1,0,0,0,742,744,5,1208,0,0,743,745,3,402,201,0,744,743,
        1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,742,1,0,0,0,747,750,
        1,0,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,751,1,0,0,0,750,748,
        1,0,0,0,751,780,5,1214,0,0,752,753,3,588,294,0,753,754,5,460,0,0,
        754,755,3,586,293,0,755,780,1,0,0,0,756,758,3,588,294,0,757,756,
        1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,761,3,614,307,0,760,
        759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,3,240,120,0,
        763,765,3,12,6,0,764,763,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,
        766,768,3,14,7,0,767,766,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,
        769,771,3,84,42,0,770,769,1,0,0,0,770,771,1,0,0,0,771,780,1,0,0,
        0,772,775,5,720,0,0,773,776,3,164,82,0,774,776,5,1212,0,0,775,773,
        1,0,0,0,775,774,1,0,0,0,776,780,1,0,0,0,777,778,5,111,0,0,778,780,
        5,460,0,0,779,736,1,0,0,0,779,752,1,0,0,0,779,757,1,0,0,0,779,772,
        1,0,0,0,779,777,1,0,0,0,780,11,1,0,0,0,781,782,5,178,0,0,782,792,
        5,42,0,0,783,788,3,402,201,0,784,785,5,1208,0,0,785,787,3,402,201,
        0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,
        0,789,793,1,0,0,0,790,788,1,0,0,0,791,793,5,319,0,0,792,783,1,0,
        0,0,792,791,1,0,0,0,793,13,1,0,0,0,794,795,5,224,0,0,795,796,5,291,
        0,0,796,797,5,42,0,0,797,802,3,394,197,0,798,799,5,1208,0,0,799,
        801,3,394,197,0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,
        802,803,1,0,0,0,803,15,1,0,0,0,804,802,1,0,0,0,805,809,3,18,9,0,
        806,809,3,20,10,0,807,809,3,22,11,0,808,805,1,0,0,0,808,806,1,0,
        0,0,808,807,1,0,0,0,809,17,1,0,0,0,810,812,3,608,304,0,811,810,1,
        0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,815,7,2,0,0,814,816,3,
        82,41,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,822,
        3,198,99,0,818,820,5,20,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,
        821,1,0,0,0,821,823,3,214,107,0,822,819,1,0,0,0,822,823,1,0,0,0,
        823,824,1,0,0,0,824,825,5,372,0,0,825,830,3,80,40,0,826,827,5,1208,
        0,0,827,829,3,80,40,0,828,826,1,0,0,0,829,832,1,0,0,0,830,828,1,
        0,0,0,830,831,1,0,0,0,831,835,1,0,0,0,832,830,1,0,0,0,833,836,3,
        358,179,0,834,836,5,13,0,0,835,833,1,0,0,0,835,834,1,0,0,0,835,836,
        1,0,0,0,836,19,1,0,0,0,837,839,3,608,304,0,838,837,1,0,0,0,838,839,
        1,0,0,0,839,840,1,0,0,0,840,842,7,2,0,0,841,843,3,82,41,0,842,841,
        1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,3,198,99,0,845,846,
        5,164,0,0,846,851,3,24,12,0,847,848,5,1208,0,0,848,850,3,24,12,0,
        849,847,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,
        852,854,1,0,0,0,853,851,1,0,0,0,854,855,5,372,0,0,855,860,3,80,40,
        0,856,857,5,1208,0,0,857,859,3,80,40,0,858,856,1,0,0,0,859,862,1,
        0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,865,1,0,0,0,862,860,1,
        0,0,0,863,866,3,358,179,0,864,866,5,13,0,0,865,863,1,0,0,0,865,864,
        1,0,0,0,865,866,1,0,0,0,866,21,1,0,0,0,867,869,3,608,304,0,868,867,
        1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,872,7,2,0,0,871,873,
        3,82,41,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,876,
        3,198,99,0,875,877,5,20,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,
        878,1,0,0,0,878,879,3,214,107,0,879,880,1,0,0,0,880,881,5,372,0,
        0,881,886,3,80,40,0,882,883,5,1208,0,0,883,885,3,80,40,0,884,882,
        1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,
        1,0,0,0,888,886,1,0,0,0,889,890,5,471,0,0,890,891,3,400,200,0,891,
        892,5,131,0,0,892,894,7,1,0,0,893,895,5,206,0,0,894,893,1,0,0,0,
        894,895,1,0,0,0,895,896,1,0,0,0,896,909,3,198,99,0,897,899,5,460,
        0,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,910,3,586,
        293,0,901,903,3,588,294,0,902,904,5,460,0,0,903,902,1,0,0,0,903,
        904,1,0,0,0,904,905,1,0,0,0,905,906,3,586,293,0,906,910,1,0,0,0,
        907,908,5,111,0,0,908,910,5,460,0,0,909,898,1,0,0,0,909,901,1,0,
        0,0,909,907,1,0,0,0,910,23,1,0,0,0,911,916,3,198,99,0,912,914,5,
        20,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,917,3,
        214,107,0,916,913,1,0,0,0,916,917,1,0,0,0,917,925,1,0,0,0,918,920,
        3,590,295,0,919,921,5,20,0,0,920,919,1,0,0,0,920,921,1,0,0,0,921,
        922,1,0,0,0,922,923,3,214,107,0,923,925,1,0,0,0,924,911,1,0,0,0,
        924,918,1,0,0,0,925,25,1,0,0,0,926,928,3,608,304,0,927,926,1,0,0,
        0,927,928,1,0,0,0,928,929,1,0,0,0,929,931,5,242,0,0,930,932,3,82,
        41,0,931,930,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,935,5,206,
        0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,941,3,198,
        99,0,937,939,5,20,0,0,938,937,1,0,0,0,938,939,1,0,0,0,939,940,1,
        0,0,0,940,942,3,214,107,0,941,938,1,0,0,0,941,942,1,0,0,0,942,943,
        1,0,0,0,943,948,5,457,0,0,944,945,5,460,0,0,945,949,3,586,293,0,
        946,949,3,590,295,0,947,949,3,198,99,0,948,944,1,0,0,0,948,946,1,
        0,0,0,948,947,1,0,0,0,949,951,1,0,0,0,950,952,5,20,0,0,951,950,1,
        0,0,0,951,952,1,0,0,0,952,953,1,0,0,0,953,955,3,214,107,0,954,956,
        3,588,294,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,
        958,5,286,0,0,958,967,3,400,200,0,959,961,3,28,14,0,960,962,3,30,
        15,0,961,960,1,0,0,0,961,962,1,0,0,0,962,968,1,0,0,0,963,965,3,30,
        15,0,964,966,3,28,14,0,965,964,1,0,0,0,965,966,1,0,0,0,966,968,1,
        0,0,0,967,959,1,0,0,0,967,963,1,0,0,0,968,970,1,0,0,0,969,971,3,
        84,42,0,970,969,1,0,0,0,970,971,1,0,0,0,971,27,1,0,0,0,972,973,5,
        470,0,0,973,974,5,756,0,0,974,986,5,419,0,0,975,976,7,2,0,0,976,
        977,5,372,0,0,977,982,3,80,40,0,978,979,5,1208,0,0,979,981,3,80,
        40,0,980,978,1,0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,
        0,0,983,987,1,0,0,0,984,982,1,0,0,0,985,987,5,115,0,0,986,975,1,
        0,0,0,986,985,1,0,0,0,987,29,1,0,0,0,988,989,5,470,0,0,989,990,5,
        272,0,0,990,991,5,756,0,0,991,992,5,419,0,0,992,997,7,1,0,0,993,
        998,5,460,0,0,994,995,3,588,294,0,995,996,5,460,0,0,996,998,1,0,
        0,0,997,993,1,0,0,0,997,994,1,0,0,0,997,998,1,0,0,0,998,999,1,0,
        0,0,999,1000,3,586,293,0,1000,31,1,0,0,0,1001,1002,5,68,0,0,1002,
        1003,5,627,0,0,1003,1016,5,159,0,0,1004,1017,3,198,99,0,1005,1006,
        5,1213,0,0,1006,1011,3,198,99,0,1007,1008,5,1208,0,0,1008,1010,3,
        198,99,0,1009,1007,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1011,
        1012,1,0,0,0,1012,1014,1,0,0,0,1013,1011,1,0,0,0,1014,1015,5,1214,
        0,0,1015,1017,1,0,0,0,1016,1004,1,0,0,0,1016,1005,1,0,0,0,1017,1018,
        1,0,0,0,1018,1019,5,206,0,0,1019,1024,3,206,103,0,1020,1025,5,13,
        0,0,1021,1022,5,474,0,0,1022,1023,5,268,0,0,1023,1025,5,192,0,0,
        1024,1020,1,0,0,0,1024,1021,1,0,0,0,1024,1025,1,0,0,0,1025,33,1,
        0,0,0,1026,1027,5,68,0,0,1027,1028,7,3,0,0,1028,1029,5,159,0,0,1029,
        1030,5,365,0,0,1030,1032,3,170,85,0,1031,1033,5,300,0,0,1032,1031,
        1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,206,0,0,
        1035,1039,3,206,103,0,1036,1037,5,372,0,0,1037,1038,5,869,0,0,1038,
        1040,3,170,85,0,1039,1036,1,0,0,0,1039,1040,1,0,0,0,1040,1043,1,
        0,0,0,1041,1042,5,366,0,0,1042,1044,3,170,85,0,1043,1041,1,0,0,0,
        1043,1044,1,0,0,0,1044,1047,1,0,0,0,1045,1046,5,453,0,0,1046,1048,
        5,773,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,0,
        1049,1051,5,286,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,
        1,0,0,0,1052,1053,3,198,99,0,1053,1054,3,36,18,0,1054,35,1,0,0,0,
        1055,1074,5,69,0,0,1056,1075,3,190,95,0,1057,1075,5,840,0,0,1058,
        1061,5,1213,0,0,1059,1062,3,190,95,0,1060,1062,5,840,0,0,1061,1059,
        1,0,0,0,1061,1060,1,0,0,0,1062,1070,1,0,0,0,1063,1066,5,1208,0,0,
        1064,1067,3,190,95,0,1065,1067,5,840,0,0,1066,1064,1,0,0,0,1066,
        1065,1,0,0,0,1067,1069,1,0,0,0,1068,1063,1,0,0,0,1069,1072,1,0,0,
        0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1070,
        1,0,0,0,1073,1075,5,1214,0,0,1074,1056,1,0,0,0,1074,1057,1,0,0,0,
        1074,1058,1,0,0,0,1075,1092,1,0,0,0,1076,1089,5,192,0,0,1077,1090,
        3,194,97,0,1078,1079,5,1213,0,0,1079,1084,3,190,95,0,1080,1081,5,
        1208,0,0,1081,1083,3,190,95,0,1082,1080,1,0,0,0,1083,1086,1,0,0,
        0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,1084,
        1,0,0,0,1087,1088,5,1214,0,0,1088,1090,1,0,0,0,1089,1077,1,0,0,0,
        1089,1078,1,0,0,0,1090,1092,1,0,0,0,1091,1055,1,0,0,0,1091,1076,
        1,0,0,0,1092,37,1,0,0,0,1093,1094,5,125,0,0,1094,1095,7,3,0,0,1095,
        1096,5,164,0,0,1096,1098,3,206,103,0,1097,1099,5,286,0,0,1098,1097,
        1,0,0,0,1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,1102,3,198,99,0,
        1101,1103,3,36,18,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,39,
        1,0,0,0,1104,1105,5,127,0,0,1105,1106,5,150,0,0,1106,1107,5,206,
        0,0,1107,1110,3,206,103,0,1108,1109,5,20,0,0,1109,1111,3,194,97,
        0,1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1113,1,0,0,0,1112,1114,
        3,90,45,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1117,1,0,0,0,
        1115,1116,5,59,0,0,1116,1118,5,395,0,0,1117,1115,1,0,0,0,1117,1118,
        1,0,0,0,1118,1119,1,0,0,0,1119,1120,3,88,44,0,1120,41,1,0,0,0,1121,
        1122,5,193,0,0,1122,1123,5,192,0,0,1123,1133,5,504,0,0,1124,1125,
        5,286,0,0,1125,1130,3,198,99,0,1126,1127,5,1208,0,0,1127,1129,3,
        198,99,0,1128,1126,1,0,0,0,1129,1132,1,0,0,0,1130,1128,1,0,0,0,1130,
        1131,1,0,0,0,1131,1134,1,0,0,0,1132,1130,1,0,0,0,1133,1124,1,0,0,
        0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,5,159,0,0,1136,1137,
        3,194,97,0,1137,1138,5,190,0,0,1138,1139,3,206,103,0,1139,1140,5,
        20,0,0,1140,1150,3,214,107,0,1141,1142,5,372,0,0,1142,1147,3,44,
        22,0,1143,1144,5,1208,0,0,1144,1146,3,44,22,0,1145,1143,1,0,0,0,
        1146,1149,1,0,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,1151,
        1,0,0,0,1149,1147,1,0,0,0,1150,1141,1,0,0,0,1150,1151,1,0,0,0,1151,
        1154,1,0,0,0,1152,1153,5,728,0,0,1153,1155,5,192,0,0,1154,1152,1,
        0,0,0,1154,1155,1,0,0,0,1155,1159,1,0,0,0,1156,1157,5,1018,0,0,1157,
        1158,5,773,0,0,1158,1160,7,3,0,0,1159,1156,1,0,0,0,1159,1160,1,0,
        0,0,1160,1175,1,0,0,0,1161,1163,5,474,0,0,1162,1164,5,268,0,0,1163,
        1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1166,5,192,
        0,0,1166,1167,5,437,0,0,1167,1172,3,170,85,0,1168,1169,5,1208,0,
        0,1169,1171,3,170,85,0,1170,1168,1,0,0,0,1171,1174,1,0,0,0,1172,
        1170,1,0,0,0,1172,1173,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,
        0,1175,1161,1,0,0,0,1175,1176,1,0,0,0,1176,1179,1,0,0,0,1177,1178,
        5,60,0,0,1178,1180,3,170,85,0,1179,1177,1,0,0,0,1179,1180,1,0,0,
        0,1180,1182,1,0,0,0,1181,1183,3,92,46,0,1182,1181,1,0,0,0,1182,1183,
        1,0,0,0,1183,43,1,0,0,0,1184,1185,3,46,23,0,1185,1186,5,1224,0,0,
        1186,1187,3,170,85,0,1187,45,1,0,0,0,1188,1189,7,4,0,0,1189,47,1,
        0,0,0,1190,1191,5,193,0,0,1191,1192,5,840,0,0,1192,1202,5,504,0,
        0,1193,1194,5,286,0,0,1194,1199,3,198,99,0,1195,1196,5,1208,0,0,
        1196,1198,3,198,99,0,1197,1195,1,0,0,0,1198,1201,1,0,0,0,1199,1197,
        1,0,0,0,1199,1200,1,0,0,0,1200,1203,1,0,0,0,1201,1199,1,0,0,0,1202,
        1193,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1205,5,159,
        0,0,1205,1206,3,194,97,0,1206,1207,5,190,0,0,1207,1208,3,206,103,
        0,1208,1209,5,20,0,0,1209,1211,3,214,107,0,1210,1212,3,92,46,0,1211,
        1210,1,0,0,0,1211,1212,1,0,0,0,1212,49,1,0,0,0,1213,1214,5,198,0,
        0,1214,1228,5,150,0,0,1215,1217,5,474,0,0,1216,1218,5,268,0,0,1217,
        1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,1226,5,395,
        0,0,1220,1221,5,457,0,0,1221,1222,5,365,0,0,1222,1224,3,170,85,0,
        1223,1225,5,300,0,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1227,
        1,0,0,0,1226,1220,1,0,0,0,1226,1227,1,0,0,0,1227,1229,1,0,0,0,1228,
        1215,1,0,0,0,1228,1229,1,0,0,0,1229,1232,1,0,0,0,1230,1231,5,16,
        0,0,1231,1233,5,627,0,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,
        1243,1,0,0,0,1234,1235,5,159,0,0,1235,1240,3,198,99,0,1236,1237,
        5,1208,0,0,1237,1239,3,198,99,0,1238,1236,1,0,0,0,1239,1242,1,0,
        0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1244,1,0,0,0,1242,1240,
        1,0,0,0,1243,1234,1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,0,0,1245,
        1246,5,206,0,0,1246,1249,3,206,103,0,1247,1248,5,20,0,0,1248,1250,
        3,194,97,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,1252,1,0,0,0,
        1251,1253,3,90,45,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1256,
        1,0,0,0,1254,1255,5,159,0,0,1255,1257,3,170,85,0,1256,1254,1,0,0,
        0,1256,1257,1,0,0,0,1257,1260,1,0,0,0,1258,1259,5,59,0,0,1259,1261,
        5,395,0,0,1260,1258,1,0,0,0,1260,1261,1,0,0,0,1261,1267,1,0,0,0,
        1262,1263,5,190,0,0,1263,1265,5,1042,0,0,1264,1266,5,795,0,0,1265,
        1264,1,0,0,0,1265,1266,1,0,0,0,1266,1268,1,0,0,0,1267,1262,1,0,0,
        0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1270,3,88,44,0,1270,51,
        1,0,0,0,1271,1272,5,345,0,0,1272,1273,5,192,0,0,1273,1274,5,504,
        0,0,1274,1275,5,159,0,0,1275,1276,3,194,97,0,1276,1277,5,190,0,0,
        1277,1278,3,206,103,0,1278,1279,5,20,0,0,1279,1282,3,214,107,0,1280,
        1281,5,60,0,0,1281,1283,3,170,85,0,1282,1280,1,0,0,0,1282,1283,1,
        0,0,0,1283,1285,1,0,0,0,1284,1286,3,92,46,0,1285,1284,1,0,0,0,1285,
        1286,1,0,0,0,1286,53,1,0,0,0,1287,1288,5,46,0,0,1288,1289,3,200,
        100,0,1289,1298,5,1213,0,0,1290,1295,3,56,28,0,1291,1292,5,1208,
        0,0,1292,1294,3,56,28,0,1293,1291,1,0,0,0,1294,1297,1,0,0,0,1295,
        1293,1,0,0,0,1295,1296,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,
        0,1298,1290,1,0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,0,1300,1301,
        5,1214,0,0,1301,55,1,0,0,0,1302,1304,3,402,201,0,1303,1305,3,484,
        242,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1308,1,0,0,0,1306,
        1308,5,1212,0,0,1307,1302,1,0,0,0,1307,1306,1,0,0,0,1308,57,1,0,
        0,0,1309,1310,7,5,0,0,1310,1337,3,204,102,0,1311,1333,5,1213,0,0,
        1312,1317,3,402,201,0,1313,1314,5,1208,0,0,1314,1316,3,402,201,0,
        1315,1313,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,
        1,0,0,0,1318,1334,1,0,0,0,1319,1317,1,0,0,0,1320,1321,3,218,109,
        0,1321,1322,5,1224,0,0,1322,1330,3,402,201,0,1323,1324,5,1208,0,
        0,1324,1325,3,218,109,0,1325,1326,5,1224,0,0,1326,1327,3,402,201,
        0,1327,1329,1,0,0,0,1328,1323,1,0,0,0,1329,1332,1,0,0,0,1330,1328,
        1,0,0,0,1330,1331,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1333,
        1312,1,0,0,0,1333,1320,1,0,0,0,1334,1335,1,0,0,0,1335,1336,5,1214,
        0,0,1336,1338,1,0,0,0,1337,1311,1,0,0,0,1337,1338,1,0,0,0,1338,59,
        1,0,0,0,1339,1344,5,71,0,0,1340,1342,5,476,0,0,1341,1343,5,337,0,
        0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,1340,
        1,0,0,0,1344,1345,1,0,0,0,1345,61,1,0,0,0,1346,1348,5,358,0,0,1347,
        1349,5,476,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1351,1,0,
        0,0,1350,1352,3,164,82,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,
        1354,1,0,0,0,1353,1355,3,262,131,0,1354,1353,1,0,0,0,1354,1355,1,
        0,0,0,1355,1357,1,0,0,0,1356,1358,3,358,179,0,1357,1356,1,0,0,0,
        1357,1358,1,0,0,0,1358,63,1,0,0,0,1359,1361,5,1,0,0,1360,1362,3,
        164,82,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1364,1,0,0,0,1363,
        1365,3,262,131,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,1367,1,
        0,0,0,1366,1368,3,358,179,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,
        1368,65,1,0,0,0,1369,1370,5,34,0,0,1370,1373,5,430,0,0,1371,1373,
        5,40,0,0,1372,1369,1,0,0,0,1372,1371,1,0,0,0,1373,67,1,0,0,0,1374,
        1375,5,134,0,0,1375,1378,5,430,0,0,1376,1378,5,141,0,0,1377,1374,
        1,0,0,0,1377,1376,1,0,0,0,1378,69,1,0,0,0,1379,1380,3,608,304,0,
        1380,71,1,0,0,0,1381,1383,5,70,0,0,1382,1384,5,286,0,0,1383,1382,
        1,0,0,0,1383,1384,1,0,0,0,1384,1392,1,0,0,0,1385,1387,3,86,43,0,
        1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,1393,
        3,196,98,0,1389,1390,5,69,0,0,1390,1393,3,190,95,0,1391,1393,3,190,
        95,0,1392,1386,1,0,0,0,1392,1389,1,0,0,0,1392,1391,1,0,0,0,1393,
        73,1,0,0,0,1394,1395,5,60,0,0,1395,1399,3,198,99,0,1396,1397,5,1208,
        0,0,1397,1398,5,262,0,0,1398,1400,3,216,108,0,1399,1396,1,0,0,0,
        1399,1400,1,0,0,0,1400,75,1,0,0,0,1401,1403,5,130,0,0,1402,1404,
        3,164,82,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,77,1,0,0,0,1405,
        1406,5,1206,0,0,1406,79,1,0,0,0,1407,1408,3,190,95,0,1408,1409,5,
        1224,0,0,1409,1410,3,402,201,0,1410,81,1,0,0,0,1411,1413,5,474,0,
        0,1412,1414,5,268,0,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,1416,
        1,0,0,0,1415,1417,5,587,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,
        1417,1418,1,0,0,0,1418,1419,5,716,0,0,1419,1420,5,223,0,0,1420,83,
        1,0,0,0,1421,1423,5,229,0,0,1422,1424,5,13,0,0,1423,1422,1,0,0,0,
        1423,1424,1,0,0,0,1424,1425,1,0,0,0,1425,1434,5,655,0,0,1426,1432,
        5,474,0,0,1427,1428,5,268,0,0,1428,1433,5,221,0,0,1429,1430,5,221,
        0,0,1430,1431,5,282,0,0,1431,1433,3,170,85,0,1432,1427,1,0,0,0,1432,
        1429,1,0,0,0,1433,1435,1,0,0,0,1434,1426,1,0,0,0,1434,1435,1,0,0,
        0,1435,85,1,0,0,0,1436,1453,5,166,0,0,1437,1438,5,688,0,0,1438,1453,
        5,372,0,0,1439,1453,5,174,0,0,1440,1453,5,235,0,0,1441,1453,5,243,
        0,0,1442,1453,5,310,0,0,1443,1453,5,311,0,0,1444,1453,5,357,0,0,
        1445,1453,5,435,0,0,1446,1453,5,437,0,0,1447,1453,5,468,0,0,1448,
        1453,5,102,0,0,1449,1453,5,406,0,0,1450,1453,5,456,0,0,1451,1453,
        5,668,0,0,1452,1436,1,0,0,0,1452,1437,1,0,0,0,1452,1439,1,0,0,0,
        1452,1440,1,0,0,0,1452,1441,1,0,0,0,1452,1442,1,0,0,0,1452,1443,
        1,0,0,0,1452,1444,1,0,0,0,1452,1445,1,0,0,0,1452,1446,1,0,0,0,1452,
        1447,1,0,0,0,1452,1448,1,0,0,0,1452,1449,1,0,0,0,1452,1450,1,0,0,
        0,1452,1451,1,0,0,0,1453,87,1,0,0,0,1454,1461,3,6,3,0,1455,1461,
        3,58,29,0,1456,1461,3,10,5,0,1457,1461,3,26,13,0,1458,1461,3,2,1,
        0,1459,1461,3,16,8,0,1460,1454,1,0,0,0,1460,1455,1,0,0,0,1460,1456,
        1,0,0,0,1460,1457,1,0,0,0,1460,1458,1,0,0,0,1460,1459,1,0,0,0,1461,
        89,1,0,0,0,1462,1468,5,221,0,0,1463,1466,5,386,0,0,1464,1465,5,1224,
        0,0,1465,1467,3,170,85,0,1466,1464,1,0,0,0,1466,1467,1,0,0,0,1467,
        1469,1,0,0,0,1468,1463,1,0,0,0,1468,1469,1,0,0,0,1469,91,1,0,0,0,
        1470,1471,5,421,0,0,1471,1472,5,221,0,0,1472,1473,5,1224,0,0,1473,
        1474,3,170,85,0,1474,93,1,0,0,0,1475,1482,3,100,50,0,1476,1482,3,
        102,51,0,1477,1482,3,108,54,0,1478,1482,3,110,55,0,1479,1482,3,112,
        56,0,1480,1482,3,114,57,0,1481,1475,1,0,0,0,1481,1476,1,0,0,0,1481,
        1477,1,0,0,0,1481,1478,1,0,0,0,1481,1479,1,0,0,0,1481,1480,1,0,0,
        0,1482,95,1,0,0,0,1483,1491,3,100,50,0,1484,1491,3,102,51,0,1485,
        1491,3,104,52,0,1486,1491,3,108,54,0,1487,1491,3,110,55,0,1488,1491,
        3,112,56,0,1489,1491,3,114,57,0,1490,1483,1,0,0,0,1490,1484,1,0,
        0,0,1490,1485,1,0,0,0,1490,1486,1,0,0,0,1490,1487,1,0,0,0,1490,1488,
        1,0,0,0,1490,1489,1,0,0,0,1491,97,1,0,0,0,1492,1503,3,100,50,0,1493,
        1503,3,102,51,0,1494,1503,3,104,52,0,1495,1503,3,106,53,0,1496,1503,
        3,108,54,0,1497,1503,3,110,55,0,1498,1503,3,112,56,0,1499,1503,3,
        114,57,0,1500,1503,5,410,0,0,1501,1503,5,466,0,0,1502,1492,1,0,0,
        0,1502,1493,1,0,0,0,1502,1494,1,0,0,0,1502,1495,1,0,0,0,1502,1496,
        1,0,0,0,1502,1497,1,0,0,0,1502,1498,1,0,0,0,1502,1499,1,0,0,0,1502,
        1500,1,0,0,0,1502,1501,1,0,0,0,1503,99,1,0,0,0,1504,1547,5,44,0,
        0,1505,1547,5,381,0,0,1506,1547,5,202,0,0,1507,1547,5,201,0,0,1508,
        1547,5,36,0,0,1509,1519,7,6,0,0,1510,1512,5,1213,0,0,1511,1513,3,
        170,85,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1516,1,0,0,0,1514,
        1515,5,1208,0,0,1515,1517,3,170,85,0,1516,1514,1,0,0,0,1516,1517,
        1,0,0,0,1517,1518,1,0,0,0,1518,1520,5,1214,0,0,1519,1510,1,0,0,0,
        1519,1520,1,0,0,0,1520,1547,1,0,0,0,1521,1526,5,157,0,0,1522,1523,
        5,1213,0,0,1523,1524,3,170,85,0,1524,1525,5,1214,0,0,1525,1527,1,
        0,0,0,1526,1522,1,0,0,0,1526,1527,1,0,0,0,1527,1532,1,0,0,0,1528,
        1532,5,323,0,0,1529,1530,5,124,0,0,1530,1532,5,305,0,0,1531,1521,
        1,0,0,0,1531,1528,1,0,0,0,1531,1529,1,0,0,0,1532,1547,1,0,0,0,1533,
        1544,5,277,0,0,1534,1537,5,1213,0,0,1535,1538,3,170,85,0,1536,1538,
        5,1219,0,0,1537,1535,1,0,0,0,1537,1536,1,0,0,0,1538,1541,1,0,0,0,
        1539,1540,5,1208,0,0,1540,1542,3,170,85,0,1541,1539,1,0,0,0,1541,
        1542,1,0,0,0,1542,1543,1,0,0,0,1543,1545,5,1214,0,0,1544,1534,1,
        0,0,0,1544,1545,1,0,0,0,1545,1547,1,0,0,0,1546,1504,1,0,0,0,1546,
        1505,1,0,0,0,1546,1506,1,0,0,0,1546,1507,1,0,0,0,1546,1508,1,0,0,
        0,1546,1509,1,0,0,0,1546,1531,1,0,0,0,1546,1533,1,0,0,0,1547,101,
        1,0,0,0,1548,1550,7,7,0,0,1549,1551,3,128,64,0,1550,1549,1,0,0,0,
        1550,1551,1,0,0,0,1551,1553,1,0,0,0,1552,1554,3,134,67,0,1553,1552,
        1,0,0,0,1553,1554,1,0,0,0,1554,1589,1,0,0,0,1555,1557,5,173,0,0,
        1556,1558,3,128,64,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1589,
        1,0,0,0,1559,1565,5,464,0,0,1560,1561,5,55,0,0,1561,1565,5,467,0,
        0,1562,1563,5,52,0,0,1563,1565,5,467,0,0,1564,1559,1,0,0,0,1564,
        1560,1,0,0,0,1564,1562,1,0,0,0,1565,1566,1,0,0,0,1566,1568,3,128,
        64,0,1567,1569,3,134,67,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,
        1589,1,0,0,0,1570,1571,5,231,0,0,1571,1589,5,464,0,0,1572,1573,5,
        465,0,0,1573,1589,3,128,64,0,1574,1575,5,231,0,0,1575,1589,5,465,
        0,0,1576,1581,5,62,0,0,1577,1578,5,55,0,0,1578,1579,5,215,0,0,1579,
        1581,5,279,0,0,1580,1576,1,0,0,0,1580,1577,1,0,0,0,1581,1583,1,0,
        0,0,1582,1584,3,130,65,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,
        1586,1,0,0,0,1585,1587,3,146,73,0,1586,1585,1,0,0,0,1586,1587,1,
        0,0,0,1587,1589,1,0,0,0,1588,1548,1,0,0,0,1588,1555,1,0,0,0,1588,
        1564,1,0,0,0,1588,1570,1,0,0,0,1588,1572,1,0,0,0,1588,1574,1,0,0,
        0,1588,1580,1,0,0,0,1589,103,1,0,0,0,1590,1592,5,464,0,0,1591,1593,
        3,134,67,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1599,1,0,0,0,
        1594,1596,5,465,0,0,1595,1597,3,134,67,0,1596,1595,1,0,0,0,1596,
        1597,1,0,0,0,1597,1599,1,0,0,0,1598,1590,1,0,0,0,1598,1594,1,0,0,
        0,1599,105,1,0,0,0,1600,1605,5,62,0,0,1601,1602,5,55,0,0,1602,1603,
        5,215,0,0,1603,1605,5,279,0,0,1604,1600,1,0,0,0,1604,1601,1,0,0,
        0,1605,1606,1,0,0,0,1606,1607,5,20,0,0,1607,1617,5,225,0,0,1608,
        1613,5,38,0,0,1609,1610,5,37,0,0,1610,1611,5,215,0,0,1611,1613,5,
        279,0,0,1612,1608,1,0,0,0,1612,1609,1,0,0,0,1613,1614,1,0,0,0,1614,
        1615,5,20,0,0,1615,1617,5,225,0,0,1616,1604,1,0,0,0,1616,1612,1,
        0,0,0,1617,107,1,0,0,0,1618,1620,5,43,0,0,1619,1621,3,128,64,0,1620,
        1619,1,0,0,0,1620,1621,1,0,0,0,1621,1634,1,0,0,0,1622,1623,5,463,
        0,0,1623,1634,3,128,64,0,1624,1629,5,38,0,0,1625,1626,5,37,0,0,1626,
        1627,5,215,0,0,1627,1629,5,279,0,0,1628,1624,1,0,0,0,1628,1625,1,
        0,0,0,1629,1631,1,0,0,0,1630,1632,3,130,65,0,1631,1630,1,0,0,0,1631,
        1632,1,0,0,0,1632,1634,1,0,0,0,1633,1618,1,0,0,0,1633,1622,1,0,0,
        0,1633,1628,1,0,0,0,1634,109,1,0,0,0,1635,1653,5,104,0,0,1636,1638,
        5,421,0,0,1637,1639,3,128,64,0,1638,1637,1,0,0,0,1638,1639,1,0,0,
        0,1639,1641,1,0,0,0,1640,1642,3,158,79,0,1641,1640,1,0,0,0,1641,
        1642,1,0,0,0,1642,1653,1,0,0,0,1643,1645,5,422,0,0,1644,1646,3,128,
        64,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1648,1,0,0,0,1647,
        1649,3,158,79,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1653,1,
        0,0,0,1650,1651,5,205,0,0,1651,1653,3,126,63,0,1652,1635,1,0,0,0,
        1652,1636,1,0,0,0,1652,1643,1,0,0,0,1652,1650,1,0,0,0,1653,111,1,
        0,0,0,1654,1655,5,853,0,0,1655,1656,5,1213,0,0,1656,1657,5,104,0,
        0,1657,1679,5,1214,0,0,1658,1659,5,853,0,0,1659,1660,5,1213,0,0,
        1660,1662,5,421,0,0,1661,1663,3,128,64,0,1662,1661,1,0,0,0,1662,
        1663,1,0,0,0,1663,1665,1,0,0,0,1664,1666,3,158,79,0,1665,1664,1,
        0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1679,5,1214,0,0,1668,
        1669,5,853,0,0,1669,1670,5,1213,0,0,1670,1672,5,422,0,0,1671,1673,
        3,128,64,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1675,1,0,0,0,
        1674,1676,3,158,79,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,
        1,0,0,0,1677,1679,5,1214,0,0,1678,1654,1,0,0,0,1678,1658,1,0,0,0,
        1678,1668,1,0,0,0,1679,113,1,0,0,0,1680,1682,3,124,62,0,1681,1680,
        1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,7,8,0,0,1684,
        1686,3,130,65,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,
        0,0,0,1687,1689,3,148,74,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,
        1730,1,0,0,0,1690,1692,3,124,62,0,1691,1690,1,0,0,0,1691,1692,1,
        0,0,0,1692,1693,1,0,0,0,1693,1695,5,720,0,0,1694,1696,3,132,66,0,
        1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1699,
        3,148,74,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1702,1,0,0,0,
        1700,1703,3,146,73,0,1701,1703,3,150,75,0,1702,1700,1,0,0,0,1702,
        1701,1,0,0,0,1702,1703,1,0,0,0,1703,1730,1,0,0,0,1704,1706,3,124,
        62,0,1705,1704,1,0,0,0,1705,1706,1,0,0,0,1706,1707,1,0,0,0,1707,
        1709,5,936,0,0,1708,1710,3,132,66,0,1709,1708,1,0,0,0,1709,1710,
        1,0,0,0,1710,1712,1,0,0,0,1711,1713,3,148,74,0,1712,1711,1,0,0,0,
        1712,1713,1,0,0,0,1713,1730,1,0,0,0,1714,1716,3,124,62,0,1715,1714,
        1,0,0,0,1715,1716,1,0,0,0,1716,1717,1,0,0,0,1717,1719,5,607,0,0,
        1718,1720,3,132,66,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1722,
        1,0,0,0,1721,1723,3,148,74,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,
        1723,1724,1,0,0,0,1724,1730,3,152,76,0,1725,1727,3,124,62,0,1726,
        1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1730,3,194,
        97,0,1729,1681,1,0,0,0,1729,1691,1,0,0,0,1729,1705,1,0,0,0,1729,
        1715,1,0,0,0,1729,1726,1,0,0,0,1730,115,1,0,0,0,1731,1740,3,136,
        68,0,1732,1740,3,138,69,0,1733,1740,3,140,70,0,1734,1740,3,122,61,
        0,1735,1740,3,158,79,0,1736,1740,3,580,290,0,1737,1740,3,134,67,
        0,1738,1740,3,118,59,0,1739,1731,1,0,0,0,1739,1732,1,0,0,0,1739,
        1733,1,0,0,0,1739,1734,1,0,0,0,1739,1735,1,0,0,0,1739,1736,1,0,0,
        0,1739,1737,1,0,0,0,1739,1738,1,0,0,0,1740,117,1,0,0,0,1741,1743,
        5,272,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,
        1744,1750,5,274,0,0,1745,1746,5,111,0,0,1746,1750,3,120,60,0,1747,
        1748,5,474,0,0,1748,1750,5,111,0,0,1749,1742,1,0,0,0,1749,1745,1,
        0,0,0,1749,1747,1,0,0,0,1750,119,1,0,0,0,1751,1752,7,9,0,0,1752,
        1758,3,174,87,0,1753,1754,7,9,0,0,1754,1758,3,170,85,0,1755,1758,
        3,160,80,0,1756,1758,3,438,219,0,1757,1751,1,0,0,0,1757,1753,1,0,
        0,0,1757,1755,1,0,0,0,1757,1756,1,0,0,0,1758,121,1,0,0,0,1759,1762,
        3,144,72,0,1760,1762,3,142,71,0,1761,1759,1,0,0,0,1761,1760,1,0,
        0,0,1762,123,1,0,0,0,1763,1764,5,1089,0,0,1764,1765,5,1209,0,0,1765,
        125,1,0,0,0,1766,1768,5,478,0,0,1767,1769,3,128,64,0,1768,1767,1,
        0,0,0,1768,1769,1,0,0,0,1769,1772,1,0,0,0,1770,1771,5,426,0,0,1771,
        1773,5,258,0,0,1772,1770,1,0,0,0,1772,1773,1,0,0,0,1773,1829,1,0,
        0,0,1774,1776,5,258,0,0,1775,1777,3,128,64,0,1776,1775,1,0,0,0,1776,
        1777,1,0,0,0,1777,1829,1,0,0,0,1778,1780,5,106,0,0,1779,1781,3,128,
        64,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1791,1,0,0,0,1782,
        1783,5,426,0,0,1783,1792,5,185,0,0,1784,1785,5,426,0,0,1785,1792,
        5,248,0,0,1786,1787,5,426,0,0,1787,1789,5,368,0,0,1788,1790,3,128,
        64,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1792,1,0,0,0,1791,
        1782,1,0,0,0,1791,1784,1,0,0,0,1791,1786,1,0,0,0,1791,1792,1,0,0,
        0,1792,1829,1,0,0,0,1793,1795,5,185,0,0,1794,1796,3,128,64,0,1795,
        1794,1,0,0,0,1795,1796,1,0,0,0,1796,1804,1,0,0,0,1797,1798,5,426,
        0,0,1798,1805,5,248,0,0,1799,1800,5,426,0,0,1800,1802,5,368,0,0,
        1801,1803,3,128,64,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,1803,1805,
        1,0,0,0,1804,1797,1,0,0,0,1804,1799,1,0,0,0,1804,1805,1,0,0,0,1805,
        1829,1,0,0,0,1806,1808,5,248,0,0,1807,1809,3,128,64,0,1808,1807,
        1,0,0,0,1808,1809,1,0,0,0,1809,1815,1,0,0,0,1810,1811,5,426,0,0,
        1811,1813,5,368,0,0,1812,1814,3,128,64,0,1813,1812,1,0,0,0,1813,
        1814,1,0,0,0,1814,1816,1,0,0,0,1815,1810,1,0,0,0,1815,1816,1,0,0,
        0,1816,1829,1,0,0,0,1817,1826,5,368,0,0,1818,1819,5,1213,0,0,1819,
        1822,3,170,85,0,1820,1821,5,1208,0,0,1821,1823,3,170,85,0,1822,1820,
        1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,5,1214,0,0,
        1825,1827,1,0,0,0,1826,1818,1,0,0,0,1826,1827,1,0,0,0,1827,1829,
        1,0,0,0,1828,1766,1,0,0,0,1828,1774,1,0,0,0,1828,1778,1,0,0,0,1828,
        1793,1,0,0,0,1828,1806,1,0,0,0,1828,1817,1,0,0,0,1829,127,1,0,0,
        0,1830,1831,5,1213,0,0,1831,1832,3,170,85,0,1832,1833,5,1214,0,0,
        1833,129,1,0,0,0,1834,1835,5,1213,0,0,1835,1837,3,170,85,0,1836,
        1838,7,10,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,
        0,0,1839,1840,5,1214,0,0,1840,131,1,0,0,0,1841,1842,5,1213,0,0,1842,
        1844,3,170,85,0,1843,1845,7,11,0,0,1844,1843,1,0,0,0,1844,1845,1,
        0,0,0,1845,1846,1,0,0,0,1846,1847,5,1214,0,0,1847,133,1,0,0,0,1848,
        1849,7,7,0,0,1849,1850,5,372,0,0,1850,1851,7,12,0,0,1851,135,1,0,
        0,0,1852,1853,7,13,0,0,1853,137,1,0,0,0,1854,1856,7,14,0,0,1855,
        1854,1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,0,0,0,1857,1858,7,15,
        0,0,1858,139,1,0,0,0,1859,1863,5,161,0,0,1860,1864,3,164,82,0,1861,
        1864,5,1198,0,0,1862,1864,5,1199,0,0,1863,1860,1,0,0,0,1863,1861,
        1,0,0,0,1863,1862,1,0,0,0,1864,141,1,0,0,0,1865,1866,5,425,0,0,1866,
        1867,3,164,82,0,1867,143,1,0,0,0,1868,1869,5,262,0,0,1869,1870,3,
        214,107,0,1870,145,1,0,0,0,1871,1872,7,7,0,0,1872,1873,5,372,0,0,
        1873,1874,7,16,0,0,1874,147,1,0,0,0,1875,1876,5,709,0,0,1876,1877,
        5,739,0,0,1877,1878,3,170,85,0,1878,149,1,0,0,0,1879,1880,5,941,
        0,0,1880,1881,5,161,0,0,1881,1882,7,17,0,0,1882,151,1,0,0,0,1883,
        1884,5,941,0,0,1884,1885,5,161,0,0,1885,1887,3,154,77,0,1886,1888,
        3,156,78,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,153,1,0,0,0,
        1889,1895,5,545,0,0,1890,1892,5,1073,0,0,1891,1893,3,146,73,0,1892,
        1891,1,0,0,0,1892,1893,1,0,0,0,1893,1895,1,0,0,0,1894,1889,1,0,0,
        0,1894,1890,1,0,0,0,1895,155,1,0,0,0,1896,1897,5,474,0,0,1897,1898,
        5,905,0,0,1898,1899,3,198,99,0,1899,157,1,0,0,0,1900,1901,5,474,
        0,0,1901,1902,5,421,0,0,1902,1903,5,480,0,0,1903,159,1,0,0,0,1904,
        1918,3,162,81,0,1905,1918,3,164,82,0,1906,1918,3,166,83,0,1907,1918,
        3,168,84,0,1908,1918,3,170,85,0,1909,1918,3,172,86,0,1910,1918,3,
        174,87,0,1911,1918,3,178,89,0,1912,1918,3,180,90,0,1913,1918,3,182,
        91,0,1914,1918,3,184,92,0,1915,1918,3,188,94,0,1916,1918,5,274,0,
        0,1917,1904,1,0,0,0,1917,1905,1,0,0,0,1917,1906,1,0,0,0,1917,1907,
        1,0,0,0,1917,1908,1,0,0,0,1917,1909,1,0,0,0,1917,1910,1,0,0,0,1917,
        1911,1,0,0,0,1917,1912,1,0,0,0,1917,1913,1,0,0,0,1917,1914,1,0,0,
        0,1917,1915,1,0,0,0,1917,1916,1,0,0,0,1918,161,1,0,0,0,1919,1920,
        5,1195,0,0,1920,163,1,0,0,0,1921,1923,3,176,88,0,1922,1921,1,0,0,
        0,1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1926,5,1203,0,0,1925,
        1924,1,0,0,0,1926,1927,1,0,0,0,1927,1925,1,0,0,0,1927,1928,1,0,0,
        0,1928,165,1,0,0,0,1929,1931,3,176,88,0,1930,1929,1,0,0,0,1930,1931,
        1,0,0,0,1931,1932,1,0,0,0,1932,1936,5,1202,0,0,1933,1935,5,1203,
        0,0,1934,1933,1,0,0,0,1935,1938,1,0,0,0,1936,1934,1,0,0,0,1936,1937,
        1,0,0,0,1937,1939,1,0,0,0,1938,1936,1,0,0,0,1939,1940,5,444,0,0,
        1940,1941,5,1203,0,0,1941,167,1,0,0,0,1942,1944,3,176,88,0,1943,
        1942,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1946,5,1204,
        0,0,1946,169,1,0,0,0,1947,1948,5,1194,0,0,1948,171,1,0,0,0,1949,
        1950,5,1196,0,0,1950,173,1,0,0,0,1951,1952,5,1197,0,0,1952,175,1,
        0,0,0,1953,1954,7,18,0,0,1954,177,1,0,0,0,1955,1957,5,104,0,0,1956,
        1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1959,5,1198,
        0,0,1959,179,1,0,0,0,1960,1962,5,421,0,0,1961,1960,1,0,0,0,1961,
        1962,1,0,0,0,1962,1963,1,0,0,0,1963,1964,5,1199,0,0,1964,181,1,0,
        0,0,1965,1967,5,422,0,0,1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,
        1968,1,0,0,0,1968,1969,5,1200,0,0,1969,183,1,0,0,0,1970,1972,5,205,
        0,0,1971,1973,5,1222,0,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,
        1974,1,0,0,0,1974,1975,7,19,0,0,1975,1976,3,186,93,0,1976,185,1,
        0,0,0,1977,2005,5,478,0,0,1978,1979,5,478,0,0,1979,1980,5,426,0,
        0,1980,2005,5,258,0,0,1981,2005,5,258,0,0,1982,2005,5,106,0,0,1983,
        1984,5,106,0,0,1984,1985,5,426,0,0,1985,2005,5,185,0,0,1986,1987,
        5,106,0,0,1987,1988,5,426,0,0,1988,2005,5,248,0,0,1989,1990,5,106,
        0,0,1990,1991,5,426,0,0,1991,2005,5,368,0,0,1992,2005,5,185,0,0,
        1993,1994,5,185,0,0,1994,1995,5,426,0,0,1995,2005,5,248,0,0,1996,
        1997,5,185,0,0,1997,1998,5,426,0,0,1998,2005,5,368,0,0,1999,2005,
        5,248,0,0,2000,2001,5,248,0,0,2001,2002,5,426,0,0,2002,2005,5,368,
        0,0,2003,2005,5,368,0,0,2004,1977,1,0,0,0,2004,1978,1,0,0,0,2004,
        1981,1,0,0,0,2004,1982,1,0,0,0,2004,1983,1,0,0,0,2004,1986,1,0,0,
        0,2004,1989,1,0,0,0,2004,1992,1,0,0,0,2004,1993,1,0,0,0,2004,1996,
        1,0,0,0,2004,1999,1,0,0,0,2004,2000,1,0,0,0,2004,2003,1,0,0,0,2005,
        187,1,0,0,0,2006,2007,5,853,0,0,2007,2008,5,1201,0,0,2008,189,1,
        0,0,0,2009,2010,3,206,103,0,2010,2011,5,1209,0,0,2011,2012,3,194,
        97,0,2012,2013,5,1209,0,0,2013,2014,3,192,96,0,2014,2021,1,0,0,0,
        2015,2016,3,194,97,0,2016,2017,5,1209,0,0,2017,2018,3,192,96,0,2018,
        2021,1,0,0,0,2019,2021,3,192,96,0,2020,2009,1,0,0,0,2020,2015,1,
        0,0,0,2020,2019,1,0,0,0,2021,191,1,0,0,0,2022,2027,5,1193,0,0,2023,
        2027,3,238,119,0,2024,2027,5,366,0,0,2025,2027,5,363,0,0,2026,2022,
        1,0,0,0,2026,2023,1,0,0,0,2026,2024,1,0,0,0,2026,2025,1,0,0,0,2027,
        193,1,0,0,0,2028,2031,5,1193,0,0,2029,2031,3,238,119,0,2030,2028,
        1,0,0,0,2030,2029,1,0,0,0,2031,195,1,0,0,0,2032,2033,3,206,103,0,
        2033,2034,5,1209,0,0,2034,2036,1,0,0,0,2035,2032,1,0,0,0,2035,2036,
        1,0,0,0,2036,2039,1,0,0,0,2037,2040,5,1193,0,0,2038,2040,3,238,119,
        0,2039,2037,1,0,0,0,2039,2038,1,0,0,0,2040,197,1,0,0,0,2041,2042,
        3,206,103,0,2042,2043,5,1209,0,0,2043,2045,1,0,0,0,2044,2041,1,0,
        0,0,2044,2045,1,0,0,0,2045,2048,1,0,0,0,2046,2049,5,1193,0,0,2047,
        2049,3,238,119,0,2048,2046,1,0,0,0,2048,2047,1,0,0,0,2049,199,1,
        0,0,0,2050,2051,3,206,103,0,2051,2052,5,1209,0,0,2052,2054,1,0,0,
        0,2053,2050,1,0,0,0,2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,2058,
        5,1193,0,0,2056,2058,3,238,119,0,2057,2055,1,0,0,0,2057,2056,1,0,
        0,0,2058,201,1,0,0,0,2059,2060,3,206,103,0,2060,2061,5,1209,0,0,
        2061,2063,1,0,0,0,2062,2059,1,0,0,0,2062,2063,1,0,0,0,2063,2066,
        1,0,0,0,2064,2067,5,1193,0,0,2065,2067,3,238,119,0,2066,2064,1,0,
        0,0,2066,2065,1,0,0,0,2067,203,1,0,0,0,2068,2069,3,206,103,0,2069,
        2070,5,1209,0,0,2070,2072,1,0,0,0,2071,2068,1,0,0,0,2071,2072,1,
        0,0,0,2072,2075,1,0,0,0,2073,2076,5,1193,0,0,2074,2076,3,238,119,
        0,2075,2073,1,0,0,0,2075,2074,1,0,0,0,2076,205,1,0,0,0,2077,2080,
        5,1193,0,0,2078,2080,3,238,119,0,2079,2077,1,0,0,0,2079,2078,1,0,
        0,0,2080,207,1,0,0,0,2081,2084,5,1193,0,0,2082,2084,3,238,119,0,
        2083,2081,1,0,0,0,2083,2082,1,0,0,0,2084,209,1,0,0,0,2085,2089,5,
        1193,0,0,2086,2089,5,10,0,0,2087,2089,3,238,119,0,2088,2085,1,0,
        0,0,2088,2086,1,0,0,0,2088,2087,1,0,0,0,2089,211,1,0,0,0,2090,2093,
        5,1193,0,0,2091,2093,3,238,119,0,2092,2090,1,0,0,0,2092,2091,1,0,
        0,0,2093,213,1,0,0,0,2094,2097,5,1193,0,0,2095,2097,3,238,119,0,
        2096,2094,1,0,0,0,2096,2095,1,0,0,0,2097,215,1,0,0,0,2098,2101,5,
        1193,0,0,2099,2101,3,238,119,0,2100,2098,1,0,0,0,2100,2099,1,0,0,
        0,2101,217,1,0,0,0,2102,2105,5,1193,0,0,2103,2105,3,238,119,0,2104,
        2102,1,0,0,0,2104,2103,1,0,0,0,2105,219,1,0,0,0,2106,2109,5,1193,
        0,0,2107,2109,3,238,119,0,2108,2106,1,0,0,0,2108,2107,1,0,0,0,2109,
        221,1,0,0,0,2110,2113,5,1193,0,0,2111,2113,3,238,119,0,2112,2110,
        1,0,0,0,2112,2111,1,0,0,0,2113,223,1,0,0,0,2114,2117,5,1193,0,0,
        2115,2117,3,238,119,0,2116,2114,1,0,0,0,2116,2115,1,0,0,0,2117,225,
        1,0,0,0,2118,2121,5,1193,0,0,2119,2121,3,238,119,0,2120,2118,1,0,
        0,0,2120,2119,1,0,0,0,2121,227,1,0,0,0,2122,2125,5,1193,0,0,2123,
        2125,3,238,119,0,2124,2122,1,0,0,0,2124,2123,1,0,0,0,2125,229,1,
        0,0,0,2126,2129,5,1193,0,0,2127,2129,3,238,119,0,2128,2126,1,0,0,
        0,2128,2127,1,0,0,0,2129,231,1,0,0,0,2130,2133,5,1193,0,0,2131,2133,
        3,238,119,0,2132,2130,1,0,0,0,2132,2131,1,0,0,0,2133,233,1,0,0,0,
        2134,2137,5,1193,0,0,2135,2137,3,238,119,0,2136,2134,1,0,0,0,2136,
        2135,1,0,0,0,2137,235,1,0,0,0,2138,2139,7,20,0,0,2139,237,1,0,0,
        0,2140,2141,7,21,0,0,2141,239,1,0,0,0,2142,2143,6,120,-1,0,2143,
        2149,3,242,121,0,2144,2145,5,1213,0,0,2145,2146,3,240,120,0,2146,
        2147,5,1214,0,0,2147,2149,1,0,0,0,2148,2142,1,0,0,0,2148,2144,1,
        0,0,0,2149,2158,1,0,0,0,2150,2151,10,2,0,0,2151,2153,7,22,0,0,2152,
        2154,5,13,0,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2155,1,0,
        0,0,2155,2157,3,240,120,3,2156,2150,1,0,0,0,2157,2160,1,0,0,0,2158,
        2156,1,0,0,0,2158,2159,1,0,0,0,2159,241,1,0,0,0,2160,2158,1,0,0,
        0,2161,2163,7,23,0,0,2162,2164,3,244,122,0,2163,2162,1,0,0,0,2163,
        2164,1,0,0,0,2164,2166,1,0,0,0,2165,2167,3,246,123,0,2166,2165,1,
        0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,2200,3,248,124,0,
        2169,2173,3,262,131,0,2170,2172,3,352,176,0,2171,2170,1,0,0,0,2172,
        2175,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,0,2174,2199,1,0,0,
        0,2175,2173,1,0,0,0,2176,2199,3,260,130,0,2177,2199,3,358,179,0,
        2178,2199,3,360,180,0,2179,2182,3,378,189,0,2180,2182,3,380,190,
        0,2181,2179,1,0,0,0,2181,2180,1,0,0,0,2182,2199,1,0,0,0,2183,2199,
        3,382,191,0,2184,2186,3,352,176,0,2185,2184,1,0,0,0,2186,2189,1,
        0,0,0,2187,2185,1,0,0,0,2187,2188,1,0,0,0,2188,2190,1,0,0,0,2189,
        2187,1,0,0,0,2190,2194,3,392,196,0,2191,2193,3,352,176,0,2192,2191,
        1,0,0,0,2193,2196,1,0,0,0,2194,2192,1,0,0,0,2194,2195,1,0,0,0,2195,
        2199,1,0,0,0,2196,2194,1,0,0,0,2197,2199,3,398,199,0,2198,2169,1,
        0,0,0,2198,2176,1,0,0,0,2198,2177,1,0,0,0,2198,2178,1,0,0,0,2198,
        2181,1,0,0,0,2198,2183,1,0,0,0,2198,2187,1,0,0,0,2198,2197,1,0,0,
        0,2199,2202,1,0,0,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,2204,
        1,0,0,0,2202,2200,1,0,0,0,2203,2205,3,390,195,0,2204,2203,1,0,0,
        0,2204,2205,1,0,0,0,2205,243,1,0,0,0,2206,2207,5,474,0,0,2207,2208,
        5,1079,0,0,2208,2209,5,364,0,0,2209,245,1,0,0,0,2210,2211,5,20,0,
        0,2211,2212,5,720,0,0,2212,247,1,0,0,0,2213,2218,5,121,0,0,2214,
        2218,5,448,0,0,2215,2218,5,13,0,0,2216,2218,3,252,126,0,2217,2213,
        1,0,0,0,2217,2214,1,0,0,0,2217,2215,1,0,0,0,2217,2216,1,0,0,0,2218,
        2221,1,0,0,0,2219,2221,3,250,125,0,2220,2217,1,0,0,0,2220,2219,1,
        0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,2222,2225,3,256,128,0,
        2223,2225,3,254,127,0,2224,2220,1,0,0,0,2224,2223,1,0,0,0,2225,249,
        1,0,0,0,2226,2230,5,427,0,0,2227,2231,3,170,85,0,2228,2231,3,174,
        87,0,2229,2231,3,598,299,0,2230,2227,1,0,0,0,2230,2228,1,0,0,0,2230,
        2229,1,0,0,0,2231,2233,1,0,0,0,2232,2234,5,300,0,0,2233,2232,1,0,
        0,0,2233,2234,1,0,0,0,2234,2237,1,0,0,0,2235,2236,5,474,0,0,2236,
        2238,5,986,0,0,2237,2235,1,0,0,0,2237,2238,1,0,0,0,2238,251,1,0,
        0,0,2239,2250,5,271,0,0,2240,2241,5,286,0,0,2241,2242,5,765,0,0,
        2242,2243,5,290,0,0,2243,2251,5,296,0,0,2244,2245,5,286,0,0,2245,
        2248,5,296,0,0,2246,2247,5,290,0,0,2247,2249,5,765,0,0,2248,2246,
        1,0,0,0,2248,2249,1,0,0,0,2249,2251,1,0,0,0,2250,2240,1,0,0,0,2250,
        2244,1,0,0,0,2250,2251,1,0,0,0,2251,253,1,0,0,0,2252,2259,5,1219,
        0,0,2253,2254,3,198,99,0,2254,2255,5,1209,0,0,2255,2256,5,1219,0,
        0,2256,2259,1,0,0,0,2257,2259,3,190,95,0,2258,2252,1,0,0,0,2258,
        2253,1,0,0,0,2258,2257,1,0,0,0,2259,2260,1,0,0,0,2260,2261,5,1209,
        0,0,2261,2262,5,13,0,0,2262,255,1,0,0,0,2263,2273,5,1219,0,0,2264,
        2269,3,258,129,0,2265,2266,5,1208,0,0,2266,2268,3,258,129,0,2267,
        2265,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2269,2270,1,0,0,
        0,2270,2273,1,0,0,0,2271,2269,1,0,0,0,2272,2263,1,0,0,0,2272,2264,
        1,0,0,0,2273,257,1,0,0,0,2274,2279,3,402,201,0,2275,2277,5,20,0,
        0,2276,2275,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,2280,
        3,214,107,0,2279,2276,1,0,0,0,2279,2280,1,0,0,0,2280,2286,1,0,0,
        0,2281,2282,3,198,99,0,2282,2283,5,1209,0,0,2283,2284,5,1219,0,0,
        2284,2286,1,0,0,0,2285,2274,1,0,0,0,2285,2281,1,0,0,0,2286,259,1,
        0,0,0,2287,2290,5,206,0,0,2288,2291,3,216,108,0,2289,2291,3,594,
        297,0,2290,2288,1,0,0,0,2290,2289,1,0,0,0,2291,2299,1,0,0,0,2292,
        2295,5,1208,0,0,2293,2296,3,216,108,0,2294,2296,3,594,297,0,2295,
        2293,1,0,0,0,2295,2294,1,0,0,0,2296,2298,1,0,0,0,2297,2292,1,0,0,
        0,2298,2301,1,0,0,0,2299,2297,1,0,0,0,2299,2300,1,0,0,0,2300,261,
        1,0,0,0,2301,2299,1,0,0,0,2302,2303,5,164,0,0,2303,2304,3,264,132,
        0,2304,263,1,0,0,0,2305,2309,3,266,133,0,2306,2308,3,268,134,0,2307,
        2306,1,0,0,0,2308,2311,1,0,0,0,2309,2307,1,0,0,0,2309,2310,1,0,0,
        0,2310,2336,1,0,0,0,2311,2309,1,0,0,0,2312,2316,3,270,135,0,2313,
        2315,3,268,134,0,2314,2313,1,0,0,0,2315,2318,1,0,0,0,2316,2314,1,
        0,0,0,2316,2317,1,0,0,0,2317,2336,1,0,0,0,2318,2316,1,0,0,0,2319,
        2323,3,272,136,0,2320,2322,3,268,134,0,2321,2320,1,0,0,0,2322,2325,
        1,0,0,0,2323,2321,1,0,0,0,2323,2324,1,0,0,0,2324,2336,1,0,0,0,2325,
        2323,1,0,0,0,2326,2327,5,1213,0,0,2327,2328,3,264,132,0,2328,2332,
        5,1214,0,0,2329,2331,3,268,134,0,2330,2329,1,0,0,0,2331,2334,1,0,
        0,0,2332,2330,1,0,0,0,2332,2333,1,0,0,0,2333,2336,1,0,0,0,2334,2332,
        1,0,0,0,2335,2305,1,0,0,0,2335,2312,1,0,0,0,2335,2319,1,0,0,0,2335,
        2326,1,0,0,0,2336,265,1,0,0,0,2337,2344,3,274,137,0,2338,2344,3,
        344,172,0,2339,2344,3,280,140,0,2340,2344,3,296,148,0,2341,2344,
        3,282,141,0,2342,2344,3,308,154,0,2343,2337,1,0,0,0,2343,2338,1,
        0,0,0,2343,2339,1,0,0,0,2343,2340,1,0,0,0,2343,2341,1,0,0,0,2343,
        2342,1,0,0,0,2344,267,1,0,0,0,2345,2346,5,1208,0,0,2346,2355,3,274,
        137,0,2347,2348,5,1208,0,0,2348,2355,3,344,172,0,2349,2350,5,1208,
        0,0,2350,2355,3,296,148,0,2351,2352,5,1208,0,0,2352,2355,3,308,154,
        0,2353,2355,3,276,138,0,2354,2345,1,0,0,0,2354,2347,1,0,0,0,2354,
        2349,1,0,0,0,2354,2351,1,0,0,0,2354,2353,1,0,0,0,2355,269,1,0,0,
        0,2356,2359,3,274,137,0,2357,2359,3,344,172,0,2358,2356,1,0,0,0,
        2358,2357,1,0,0,0,2359,2360,1,0,0,0,2360,2361,3,556,278,0,2361,271,
        1,0,0,0,2362,2365,3,274,137,0,2363,2365,3,344,172,0,2364,2362,1,
        0,0,0,2364,2363,1,0,0,0,2365,2366,1,0,0,0,2366,2367,3,572,286,0,
        2367,273,1,0,0,0,2368,2373,3,198,99,0,2369,2371,3,294,147,0,2370,
        2372,3,292,146,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,2374,1,
        0,0,0,2373,2369,1,0,0,0,2373,2374,1,0,0,0,2374,2379,1,0,0,0,2375,
        2377,5,20,0,0,2376,2375,1,0,0,0,2376,2377,1,0,0,0,2377,2378,1,0,
        0,0,2378,2380,3,214,107,0,2379,2376,1,0,0,0,2379,2380,1,0,0,0,2380,
        275,1,0,0,0,2381,2387,5,194,0,0,2382,2384,7,24,0,0,2383,2385,5,294,
        0,0,2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2387,1,0,0,0,2386,2381,
        1,0,0,0,2386,2382,1,0,0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,
        2389,5,210,0,0,2389,2393,3,266,133,0,2390,2392,3,278,139,0,2391,
        2390,1,0,0,0,2392,2395,1,0,0,0,2393,2391,1,0,0,0,2393,2394,1,0,0,
        0,2394,2434,1,0,0,0,2395,2393,1,0,0,0,2396,2402,5,194,0,0,2397,2399,
        7,24,0,0,2398,2400,5,294,0,0,2399,2398,1,0,0,0,2399,2400,1,0,0,0,
        2400,2402,1,0,0,0,2401,2396,1,0,0,0,2401,2397,1,0,0,0,2401,2402,
        1,0,0,0,2402,2403,1,0,0,0,2403,2404,5,210,0,0,2404,2405,5,1213,0,
        0,2405,2406,3,264,132,0,2406,2410,5,1214,0,0,2407,2409,3,278,139,
        0,2408,2407,1,0,0,0,2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,
        1,0,0,0,2411,2434,1,0,0,0,2412,2410,1,0,0,0,2413,2414,5,87,0,0,2414,
        2415,5,210,0,0,2415,2419,3,266,133,0,2416,2418,3,278,139,0,2417,
        2416,1,0,0,0,2418,2421,1,0,0,0,2419,2417,1,0,0,0,2419,2420,1,0,0,
        0,2420,2434,1,0,0,0,2421,2419,1,0,0,0,2422,2423,5,87,0,0,2423,2424,
        5,210,0,0,2424,2425,5,1213,0,0,2425,2426,3,264,132,0,2426,2430,5,
        1214,0,0,2427,2429,3,278,139,0,2428,2427,1,0,0,0,2429,2432,1,0,0,
        0,2430,2428,1,0,0,0,2430,2431,1,0,0,0,2431,2434,1,0,0,0,2432,2430,
        1,0,0,0,2433,2386,1,0,0,0,2433,2401,1,0,0,0,2433,2413,1,0,0,0,2433,
        2422,1,0,0,0,2434,277,1,0,0,0,2435,2436,5,286,0,0,2436,2437,3,400,
        200,0,2437,279,1,0,0,0,2438,2439,5,160,0,0,2439,2440,5,406,0,0,2440,
        2447,5,1213,0,0,2441,2448,3,242,121,0,2442,2444,9,0,0,0,2443,2442,
        1,0,0,0,2444,2445,1,0,0,0,2445,2446,1,0,0,0,2445,2443,1,0,0,0,2446,
        2448,1,0,0,0,2447,2441,1,0,0,0,2447,2443,1,0,0,0,2448,2449,1,0,0,
        0,2449,2450,5,1214,0,0,2450,2463,3,294,147,0,2451,2452,5,664,0,0,
        2452,2453,5,1213,0,0,2453,2458,3,286,143,0,2454,2455,5,1208,0,0,
        2455,2457,3,286,143,0,2456,2454,1,0,0,0,2457,2460,1,0,0,0,2458,2456,
        1,0,0,0,2458,2459,1,0,0,0,2459,2461,1,0,0,0,2460,2458,1,0,0,0,2461,
        2462,5,1214,0,0,2462,2464,1,0,0,0,2463,2451,1,0,0,0,2463,2464,1,
        0,0,0,2464,2466,1,0,0,0,2465,2467,5,20,0,0,2466,2465,1,0,0,0,2466,
        2467,1,0,0,0,2467,2468,1,0,0,0,2468,2469,3,214,107,0,2469,281,1,
        0,0,0,2470,2471,3,202,101,0,2471,2472,3,294,147,0,2472,2474,5,1213,
        0,0,2473,2475,3,284,142,0,2474,2473,1,0,0,0,2475,2476,1,0,0,0,2476,
        2474,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,2480,5,1214,
        0,0,2479,2481,5,20,0,0,2480,2479,1,0,0,0,2480,2481,1,0,0,0,2481,
        2482,1,0,0,0,2482,2483,3,214,107,0,2483,283,1,0,0,0,2484,2485,5,
        286,0,0,2485,2486,5,1213,0,0,2486,2491,3,402,201,0,2487,2488,5,1208,
        0,0,2488,2490,3,402,201,0,2489,2487,1,0,0,0,2490,2493,1,0,0,0,2491,
        2489,1,0,0,0,2491,2492,1,0,0,0,2492,2494,1,0,0,0,2493,2491,1,0,0,
        0,2494,2498,5,1214,0,0,2495,2497,3,342,171,0,2496,2495,1,0,0,0,2497,
        2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,2505,1,0,0,
        0,2500,2498,1,0,0,0,2501,2503,5,224,0,0,2502,2501,1,0,0,0,2502,2503,
        1,0,0,0,2503,2504,1,0,0,0,2504,2506,3,392,196,0,2505,2502,1,0,0,
        0,2505,2506,1,0,0,0,2506,2507,1,0,0,0,2507,2508,3,288,144,0,2508,
        285,1,0,0,0,2509,2517,3,344,172,0,2510,2512,3,198,99,0,2511,2513,
        5,20,0,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,
        2515,3,214,107,0,2515,2517,1,0,0,0,2516,2509,1,0,0,0,2516,2510,1,
        0,0,0,2517,287,1,0,0,0,2518,2520,5,457,0,0,2519,2521,3,290,145,0,
        2520,2519,1,0,0,0,2521,2522,1,0,0,0,2522,2520,1,0,0,0,2522,2523,
        1,0,0,0,2523,289,1,0,0,0,2524,2525,3,194,97,0,2525,2526,5,1213,0,
        0,2526,2527,3,402,201,0,2527,2528,5,1214,0,0,2528,291,1,0,0,0,2529,
        2530,5,352,0,0,2530,2531,5,1213,0,0,2531,2536,3,592,296,0,2532,2533,
        5,1208,0,0,2533,2535,3,592,296,0,2534,2532,1,0,0,0,2535,2538,1,0,
        0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,2539,1,0,0,0,2538,2536,
        1,0,0,0,2539,2540,5,1214,0,0,2540,293,1,0,0,0,2541,2542,5,1210,0,
        0,2542,2543,3,214,107,0,2543,295,1,0,0,0,2544,2545,5,406,0,0,2545,
        2548,5,1213,0,0,2546,2549,3,298,149,0,2547,2549,3,300,150,0,2548,
        2546,1,0,0,0,2548,2547,1,0,0,0,2549,2550,1,0,0,0,2550,2552,5,1214,
        0,0,2551,2553,5,20,0,0,2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,
        2554,1,0,0,0,2554,2556,3,214,107,0,2555,2557,3,588,294,0,2556,2555,
        1,0,0,0,2556,2557,1,0,0,0,2557,297,1,0,0,0,2558,2562,3,202,101,0,
        2559,2560,5,1213,0,0,2560,2563,5,1214,0,0,2561,2563,3,586,293,0,
        2562,2559,1,0,0,0,2562,2561,1,0,0,0,2563,2565,1,0,0,0,2564,2566,
        3,302,151,0,2565,2564,1,0,0,0,2565,2566,1,0,0,0,2566,2571,1,0,0,
        0,2567,2570,3,304,152,0,2568,2570,3,306,153,0,2569,2567,1,0,0,0,
        2569,2568,1,0,0,0,2570,2573,1,0,0,0,2571,2569,1,0,0,0,2571,2572,
        1,0,0,0,2572,299,1,0,0,0,2573,2571,1,0,0,0,2574,2576,3,472,236,0,
        2575,2574,1,0,0,0,2575,2576,1,0,0,0,2576,2577,1,0,0,0,2577,2578,
        5,1148,0,0,2578,2582,5,1213,0,0,2579,2580,3,402,201,0,2580,2581,
        5,1208,0,0,2581,2583,1,0,0,0,2582,2579,1,0,0,0,2582,2583,1,0,0,0,
        2583,2584,1,0,0,0,2584,2585,3,402,201,0,2585,2588,5,1214,0,0,2586,
        2587,5,474,0,0,2587,2589,5,829,0,0,2588,2586,1,0,0,0,2588,2589,1,
        0,0,0,2589,301,1,0,0,0,2590,2603,5,352,0,0,2591,2604,3,198,99,0,
        2592,2593,5,1213,0,0,2593,2598,3,592,296,0,2594,2595,5,1208,0,0,
        2595,2597,3,592,296,0,2596,2594,1,0,0,0,2597,2600,1,0,0,0,2598,2596,
        1,0,0,0,2598,2599,1,0,0,0,2599,2601,1,0,0,0,2600,2598,1,0,0,0,2601,
        2602,5,1214,0,0,2602,2604,1,0,0,0,2603,2591,1,0,0,0,2603,2592,1,
        0,0,0,2603,2604,1,0,0,0,2604,303,1,0,0,0,2605,2606,5,224,0,0,2606,
        2607,5,291,0,0,2607,2608,5,42,0,0,2608,2613,3,394,197,0,2609,2610,
        5,1208,0,0,2610,2612,3,394,197,0,2611,2609,1,0,0,0,2612,2615,1,0,
        0,0,2613,2611,1,0,0,0,2613,2614,1,0,0,0,2614,305,1,0,0,0,2615,2613,
        1,0,0,0,2616,2617,5,178,0,0,2617,2618,5,42,0,0,2618,2623,3,190,95,
        0,2619,2620,5,1208,0,0,2620,2622,3,190,95,0,2621,2619,1,0,0,0,2622,
        2625,1,0,0,0,2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,307,1,0,0,
        0,2625,2623,1,0,0,0,2626,2637,3,310,155,0,2627,2637,3,312,156,0,
        2628,2637,3,314,157,0,2629,2637,3,316,158,0,2630,2637,3,318,159,
        0,2631,2637,3,320,160,0,2632,2637,3,324,162,0,2633,2637,3,322,161,
        0,2634,2637,3,326,163,0,2635,2637,3,328,164,0,2636,2626,1,0,0,0,
        2636,2627,1,0,0,0,2636,2628,1,0,0,0,2636,2629,1,0,0,0,2636,2630,
        1,0,0,0,2636,2631,1,0,0,0,2636,2632,1,0,0,0,2636,2633,1,0,0,0,2636,
        2634,1,0,0,0,2636,2635,1,0,0,0,2637,2639,1,0,0,0,2638,2640,5,20,
        0,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,2640,2641,1,0,0,0,2641,2643,
        3,214,107,0,2642,2644,3,588,294,0,2643,2642,1,0,0,0,2643,2644,1,
        0,0,0,2644,309,1,0,0,0,2645,2646,5,1057,0,0,2646,2648,5,1213,0,0,
        2647,2649,3,534,267,0,2648,2647,1,0,0,0,2648,2649,1,0,0,0,2649,2650,
        1,0,0,0,2650,2652,3,402,201,0,2651,2653,3,522,261,0,2652,2651,1,
        0,0,0,2652,2653,1,0,0,0,2653,2655,1,0,0,0,2654,2656,3,538,269,0,
        2655,2654,1,0,0,0,2655,2656,1,0,0,0,2656,2657,1,0,0,0,2657,2658,
        5,1214,0,0,2658,311,1,0,0,0,2659,2661,3,472,236,0,2660,2659,1,0,
        0,0,2660,2661,1,0,0,0,2661,2662,1,0,0,0,2662,2663,5,1149,0,0,2663,
        2664,5,1213,0,0,2664,2667,5,286,0,0,2665,2668,3,198,99,0,2666,2668,
        3,590,295,0,2667,2665,1,0,0,0,2667,2666,1,0,0,0,2668,2679,1,0,0,
        0,2669,2670,5,178,0,0,2670,2671,5,42,0,0,2671,2676,3,402,201,0,2672,
        2673,5,1208,0,0,2673,2675,3,402,201,0,2674,2672,1,0,0,0,2675,2678,
        1,0,0,0,2676,2674,1,0,0,0,2676,2677,1,0,0,0,2677,2680,1,0,0,0,2678,
        2676,1,0,0,0,2679,2669,1,0,0,0,2679,2680,1,0,0,0,2680,2692,1,0,0,
        0,2681,2682,5,224,0,0,2682,2683,5,291,0,0,2683,2684,5,42,0,0,2684,
        2689,3,402,201,0,2685,2686,5,1208,0,0,2686,2688,3,402,201,0,2687,
        2685,1,0,0,0,2688,2691,1,0,0,0,2689,2687,1,0,0,0,2689,2690,1,0,0,
        0,2690,2693,1,0,0,0,2691,2689,1,0,0,0,2692,2681,1,0,0,0,2692,2693,
        1,0,0,0,2693,2694,1,0,0,0,2694,2695,5,457,0,0,2695,2696,5,1150,0,
        0,2696,2697,5,1213,0,0,2697,2698,3,164,82,0,2698,2704,5,1214,0,0,
        2699,2700,5,1151,0,0,2700,2701,5,1213,0,0,2701,2702,3,164,82,0,2702,
        2703,5,1214,0,0,2703,2705,1,0,0,0,2704,2699,1,0,0,0,2704,2705,1,
        0,0,0,2705,2711,1,0,0,0,2706,2707,5,1152,0,0,2707,2708,5,1213,0,
        0,2708,2709,3,164,82,0,2709,2710,5,1214,0,0,2710,2712,1,0,0,0,2711,
        2706,1,0,0,0,2711,2712,1,0,0,0,2712,2718,1,0,0,0,2713,2714,5,1153,
        0,0,2714,2715,5,1213,0,0,2715,2716,3,164,82,0,2716,2717,5,1214,0,
        0,2717,2719,1,0,0,0,2718,2713,1,0,0,0,2718,2719,1,0,0,0,2719,313,
        1,0,0,0,2720,2721,5,1154,0,0,2721,2722,5,1213,0,0,2722,2725,5,286,
        0,0,2723,2726,3,198,99,0,2724,2726,3,590,295,0,2725,2723,1,0,0,0,
        2725,2724,1,0,0,0,2726,2727,1,0,0,0,2727,2728,5,457,0,0,2728,2729,
        5,1213,0,0,2729,2733,3,346,173,0,2730,2732,3,348,174,0,2731,2730,
        1,0,0,0,2732,2735,1,0,0,0,2733,2731,1,0,0,0,2733,2734,1,0,0,0,2734,
        2736,1,0,0,0,2735,2733,1,0,0,0,2736,2737,5,1214,0,0,2737,2738,5,
        1214,0,0,2738,315,1,0,0,0,2739,2740,5,906,0,0,2740,2741,5,1213,0,
        0,2741,2756,3,330,165,0,2742,2743,5,352,0,0,2743,2753,5,1213,0,0,
        2744,2754,5,1219,0,0,2745,2750,3,164,82,0,2746,2747,5,1208,0,0,2747,
        2749,3,164,82,0,2748,2746,1,0,0,0,2749,2752,1,0,0,0,2750,2748,1,
        0,0,0,2750,2751,1,0,0,0,2751,2754,1,0,0,0,2752,2750,1,0,0,0,2753,
        2744,1,0,0,0,2753,2745,1,0,0,0,2754,2755,1,0,0,0,2755,2757,5,1214,
        0,0,2756,2742,1,0,0,0,2756,2757,1,0,0,0,2757,2763,1,0,0,0,2758,2759,
        5,625,0,0,2759,2760,5,1213,0,0,2760,2761,3,164,82,0,2761,2762,5,
        1214,0,0,2762,2764,1,0,0,0,2763,2758,1,0,0,0,2763,2764,1,0,0,0,2764,
        2770,1,0,0,0,2765,2766,5,569,0,0,2766,2767,5,1213,0,0,2767,2768,
        3,164,82,0,2768,2769,5,1214,0,0,2769,2771,1,0,0,0,2770,2765,1,0,
        0,0,2770,2771,1,0,0,0,2771,2777,1,0,0,0,2772,2773,5,871,0,0,2773,
        2774,5,1213,0,0,2774,2775,3,164,82,0,2775,2776,5,1214,0,0,2776,2778,
        1,0,0,0,2777,2772,1,0,0,0,2777,2778,1,0,0,0,2778,2784,1,0,0,0,2779,
        2780,5,542,0,0,2780,2781,5,1213,0,0,2781,2782,3,196,98,0,2782,2783,
        5,1214,0,0,2783,2785,1,0,0,0,2784,2779,1,0,0,0,2784,2785,1,0,0,0,
        2785,2786,1,0,0,0,2786,2787,5,1214,0,0,2787,317,1,0,0,0,2788,2790,
        3,472,236,0,2789,2788,1,0,0,0,2789,2790,1,0,0,0,2790,2791,1,0,0,
        0,2791,2792,5,1159,0,0,2792,2793,5,1213,0,0,2793,2796,5,286,0,0,
        2794,2797,3,198,99,0,2795,2797,3,590,295,0,2796,2794,1,0,0,0,2796,
        2795,1,0,0,0,2797,2798,1,0,0,0,2798,2799,5,457,0,0,2799,2800,5,1160,
        0,0,2800,2801,5,1213,0,0,2801,2806,3,164,82,0,2802,2803,5,1208,0,
        0,2803,2805,3,164,82,0,2804,2802,1,0,0,0,2805,2808,1,0,0,0,2806,
        2804,1,0,0,0,2806,2807,1,0,0,0,2807,2809,1,0,0,0,2808,2806,1,0,0,
        0,2809,2810,5,1214,0,0,2810,2811,5,1161,0,0,2811,2812,5,1213,0,0,
        2812,2813,3,164,82,0,2813,2814,5,1214,0,0,2814,2815,5,1162,0,0,2815,
        2816,5,1213,0,0,2816,2821,3,164,82,0,2817,2818,5,1208,0,0,2818,2820,
        3,164,82,0,2819,2817,1,0,0,0,2820,2823,1,0,0,0,2821,2819,1,0,0,0,
        2821,2822,1,0,0,0,2822,2824,1,0,0,0,2823,2821,1,0,0,0,2824,2841,
        5,1214,0,0,2825,2826,5,1163,0,0,2826,2827,5,1213,0,0,2827,2832,3,
        164,82,0,2828,2829,5,1208,0,0,2829,2831,3,164,82,0,2830,2828,1,0,
        0,0,2831,2834,1,0,0,0,2832,2830,1,0,0,0,2832,2833,1,0,0,0,2833,2835,
        1,0,0,0,2834,2832,1,0,0,0,2835,2836,5,1214,0,0,2836,2837,5,1164,
        0,0,2837,2838,5,1213,0,0,2838,2839,3,164,82,0,2839,2840,5,1214,0,
        0,2840,2842,1,0,0,0,2841,2825,1,0,0,0,2841,2842,1,0,0,0,2842,319,
        1,0,0,0,2843,2844,5,1165,0,0,2844,2845,5,1213,0,0,2845,2846,3,330,
        165,0,2846,2847,5,457,0,0,2847,2848,5,1213,0,0,2848,2852,3,346,173,
        0,2849,2851,3,350,175,0,2850,2849,1,0,0,0,2851,2854,1,0,0,0,2852,
        2850,1,0,0,0,2852,2853,1,0,0,0,2853,2855,1,0,0,0,2854,2852,1,0,0,
        0,2855,2856,5,1214,0,0,2856,2857,5,1214,0,0,2857,321,1,0,0,0,2858,
        2860,3,472,236,0,2859,2858,1,0,0,0,2859,2860,1,0,0,0,2860,2861,1,
        0,0,0,2861,2862,5,1184,0,0,2862,2863,5,1213,0,0,2863,2864,5,286,
        0,0,2864,2865,3,590,295,0,2865,2866,5,457,0,0,2866,2867,5,1187,0,
        0,2867,2868,5,1213,0,0,2868,2869,3,164,82,0,2869,2870,5,1214,0,0,
        2870,2871,5,1188,0,0,2871,2872,5,1213,0,0,2872,2873,3,164,82,0,2873,
        2874,5,1214,0,0,2874,2875,5,1214,0,0,2875,323,1,0,0,0,2876,2878,
        3,472,236,0,2877,2876,1,0,0,0,2877,2878,1,0,0,0,2878,2879,1,0,0,
        0,2879,2880,5,1183,0,0,2880,2881,5,1213,0,0,2881,2882,5,286,0,0,
        2882,2889,3,590,295,0,2883,2885,5,457,0,0,2884,2886,3,340,170,0,
        2885,2884,1,0,0,0,2886,2887,1,0,0,0,2887,2885,1,0,0,0,2887,2888,
        1,0,0,0,2888,2890,1,0,0,0,2889,2883,1,0,0,0,2889,2890,1,0,0,0,2890,
        2891,1,0,0,0,2891,2892,5,1214,0,0,2892,325,1,0,0,0,2893,2895,3,472,
        236,0,2894,2893,1,0,0,0,2894,2895,1,0,0,0,2895,2896,1,0,0,0,2896,
        2897,5,1182,0,0,2897,2898,5,1213,0,0,2898,2899,5,286,0,0,2899,2900,
        3,590,295,0,2900,2901,5,457,0,0,2901,2902,5,1187,0,0,2902,2903,5,
        1213,0,0,2903,2904,3,164,82,0,2904,2905,5,1214,0,0,2905,2906,5,1188,
        0,0,2906,2907,5,1213,0,0,2907,2912,3,164,82,0,2908,2909,5,1208,0,
        0,2909,2911,3,164,82,0,2910,2908,1,0,0,0,2911,2914,1,0,0,0,2912,
        2910,1,0,0,0,2912,2913,1,0,0,0,2913,2915,1,0,0,0,2914,2912,1,0,0,
        0,2915,2916,5,1214,0,0,2916,2917,5,1189,0,0,2917,2918,5,1213,0,0,
        2918,2923,3,164,82,0,2919,2920,5,1208,0,0,2920,2922,3,164,82,0,2921,
        2919,1,0,0,0,2922,2925,1,0,0,0,2923,2921,1,0,0,0,2923,2924,1,0,0,
        0,2924,2926,1,0,0,0,2925,2923,1,0,0,0,2926,2932,5,1214,0,0,2927,
        2928,5,1190,0,0,2928,2929,5,1213,0,0,2929,2930,3,170,85,0,2930,2931,
        5,1214,0,0,2931,2933,1,0,0,0,2932,2927,1,0,0,0,2932,2933,1,0,0,0,
        2933,2939,1,0,0,0,2934,2935,5,1191,0,0,2935,2936,5,1213,0,0,2936,
        2937,3,170,85,0,2937,2938,5,1214,0,0,2938,2940,1,0,0,0,2939,2934,
        1,0,0,0,2939,2940,1,0,0,0,2940,2941,1,0,0,0,2941,2942,5,1214,0,0,
        2942,327,1,0,0,0,2943,2944,3,198,99,0,2944,2948,5,1213,0,0,2945,
        2947,3,330,165,0,2946,2945,1,0,0,0,2947,2950,1,0,0,0,2948,2946,1,
        0,0,0,2948,2949,1,0,0,0,2949,2952,1,0,0,0,2950,2948,1,0,0,0,2951,
        2953,3,332,166,0,2952,2951,1,0,0,0,2952,2953,1,0,0,0,2953,2957,1,
        0,0,0,2954,2956,3,334,167,0,2955,2954,1,0,0,0,2956,2959,1,0,0,0,
        2957,2955,1,0,0,0,2957,2958,1,0,0,0,2958,2961,1,0,0,0,2959,2957,
        1,0,0,0,2960,2962,3,336,168,0,2961,2960,1,0,0,0,2961,2962,1,0,0,
        0,2962,2963,1,0,0,0,2963,2964,5,1214,0,0,2964,329,1,0,0,0,2965,2968,
        5,286,0,0,2966,2969,3,198,99,0,2967,2969,3,590,295,0,2968,2966,1,
        0,0,0,2968,2967,1,0,0,0,2969,2972,1,0,0,0,2970,2971,5,20,0,0,2971,
        2973,3,214,107,0,2972,2970,1,0,0,0,2972,2973,1,0,0,0,2973,2976,1,
        0,0,0,2974,2977,3,342,171,0,2975,2977,5,635,0,0,2976,2974,1,0,0,
        0,2976,2975,1,0,0,0,2976,2977,1,0,0,0,2977,2991,1,0,0,0,2978,2980,
        5,224,0,0,2979,2978,1,0,0,0,2979,2980,1,0,0,0,2980,2981,1,0,0,0,
        2981,2982,5,291,0,0,2982,2983,5,42,0,0,2983,2988,3,394,197,0,2984,
        2985,5,1208,0,0,2985,2987,3,394,197,0,2986,2984,1,0,0,0,2987,2990,
        1,0,0,0,2988,2986,1,0,0,0,2988,2989,1,0,0,0,2989,2992,1,0,0,0,2990,
        2988,1,0,0,0,2991,2979,1,0,0,0,2991,2992,1,0,0,0,2992,331,1,0,0,
        0,2993,2994,5,144,0,0,2994,2995,5,236,0,0,2995,2996,5,1224,0,0,2996,
        3001,3,164,82,0,2997,2998,5,577,0,0,2998,2999,5,457,0,0,2999,3000,
        5,1224,0,0,3000,3002,3,164,82,0,3001,2997,1,0,0,0,3001,3002,1,0,
        0,0,3002,333,1,0,0,0,3003,3004,5,293,0,0,3004,3005,5,406,0,0,3005,
        3006,3,194,97,0,3006,3007,5,1213,0,0,3007,3008,3,198,99,0,3008,3009,
        5,1214,0,0,3009,335,1,0,0,0,3010,3012,5,457,0,0,3011,3013,3,338,
        169,0,3012,3011,1,0,0,0,3013,3014,1,0,0,0,3014,3012,1,0,0,0,3014,
        3015,1,0,0,0,3015,337,1,0,0,0,3016,3019,3,194,97,0,3017,3020,3,586,
        293,0,3018,3020,3,590,295,0,3019,3017,1,0,0,0,3019,3018,1,0,0,0,
        3020,339,1,0,0,0,3021,3022,7,25,0,0,3022,3023,5,1213,0,0,3023,3024,
        3,402,201,0,3024,3025,5,1214,0,0,3025,341,1,0,0,0,3026,3027,7,26,
        0,0,3027,3028,5,42,0,0,3028,3033,3,402,201,0,3029,3030,5,1208,0,
        0,3030,3032,3,402,201,0,3031,3029,1,0,0,0,3032,3035,1,0,0,0,3033,
        3031,1,0,0,0,3033,3034,1,0,0,0,3034,3040,1,0,0,0,3035,3033,1,0,0,
        0,3036,3037,5,840,0,0,3037,3038,5,42,0,0,3038,3040,5,18,0,0,3039,
        3026,1,0,0,0,3039,3036,1,0,0,0,3040,343,1,0,0,0,3041,3043,3,590,
        295,0,3042,3044,5,20,0,0,3043,3042,1,0,0,0,3043,3044,1,0,0,0,3044,
        3045,1,0,0,0,3045,3047,3,214,107,0,3046,3048,3,588,294,0,3047,3046,
        1,0,0,0,3047,3048,1,0,0,0,3048,345,1,0,0,0,3049,3050,5,1128,0,0,
        3050,3051,5,1213,0,0,3051,3052,5,1203,0,0,3052,3053,5,1214,0,0,3053,
        347,1,0,0,0,3054,3055,5,29,0,0,3055,3058,5,1213,0,0,3056,3059,3,
        196,98,0,3057,3059,3,164,82,0,3058,3056,1,0,0,0,3058,3057,1,0,0,
        0,3059,3060,1,0,0,0,3060,3061,5,1214,0,0,3061,3103,1,0,0,0,3062,
        3063,5,1155,0,0,3063,3064,5,1213,0,0,3064,3065,3,164,82,0,3065,3066,
        5,1214,0,0,3066,3103,1,0,0,0,3067,3068,5,1156,0,0,3068,3069,5,1213,
        0,0,3069,3070,3,164,82,0,3070,3071,5,1214,0,0,3071,3103,1,0,0,0,
        3072,3073,5,1157,0,0,3073,3074,5,1213,0,0,3074,3075,3,164,82,0,3075,
        3076,5,1214,0,0,3076,3103,1,0,0,0,3077,3078,5,1134,0,0,3078,3079,
        5,1213,0,0,3079,3080,3,164,82,0,3080,3081,5,1214,0,0,3081,3103,1,
        0,0,0,3082,3083,5,1158,0,0,3083,3084,5,1213,0,0,3084,3085,3,164,
        82,0,3085,3086,5,1214,0,0,3086,3103,1,0,0,0,3087,3088,5,1132,0,0,
        3088,3089,5,1213,0,0,3089,3090,3,164,82,0,3090,3091,5,1214,0,0,3091,
        3103,1,0,0,0,3092,3093,5,1133,0,0,3093,3094,5,1213,0,0,3094,3095,
        3,164,82,0,3095,3096,5,1214,0,0,3096,3103,1,0,0,0,3097,3098,5,1135,
        0,0,3098,3099,5,1213,0,0,3099,3100,3,164,82,0,3100,3101,5,1214,0,
        0,3101,3103,1,0,0,0,3102,3054,1,0,0,0,3102,3062,1,0,0,0,3102,3067,
        1,0,0,0,3102,3072,1,0,0,0,3102,3077,1,0,0,0,3102,3082,1,0,0,0,3102,
        3087,1,0,0,0,3102,3092,1,0,0,0,3102,3097,1,0,0,0,3103,349,1,0,0,
        0,3104,3105,5,29,0,0,3105,3108,5,1213,0,0,3106,3109,3,196,98,0,3107,
        3109,3,164,82,0,3108,3106,1,0,0,0,3108,3107,1,0,0,0,3109,3110,1,
        0,0,0,3110,3111,5,1214,0,0,3111,3158,1,0,0,0,3112,3113,5,1134,0,
        0,3113,3114,5,1213,0,0,3114,3115,3,164,82,0,3115,3116,5,1214,0,0,
        3116,3158,1,0,0,0,3117,3118,5,1166,0,0,3118,3119,5,1213,0,0,3119,
        3120,3,164,82,0,3120,3121,5,1214,0,0,3121,3158,1,0,0,0,3122,3123,
        5,1167,0,0,3123,3124,5,1213,0,0,3124,3125,3,164,82,0,3125,3126,5,
        1214,0,0,3126,3158,1,0,0,0,3127,3128,5,1168,0,0,3128,3129,5,1213,
        0,0,3129,3130,3,164,82,0,3130,3131,5,1214,0,0,3131,3158,1,0,0,0,
        3132,3133,5,1169,0,0,3133,3134,5,1213,0,0,3134,3135,3,164,82,0,3135,
        3136,5,1214,0,0,3136,3158,1,0,0,0,3137,3138,5,1170,0,0,3138,3139,
        5,1213,0,0,3139,3140,3,164,82,0,3140,3141,5,1214,0,0,3141,3158,1,
        0,0,0,3142,3143,5,1171,0,0,3143,3144,5,1213,0,0,3144,3145,3,164,
        82,0,3145,3146,5,1214,0,0,3146,3158,1,0,0,0,3147,3148,5,1172,0,0,
        3148,3149,5,1213,0,0,3149,3150,3,164,82,0,3150,3151,5,1214,0,0,3151,
        3158,1,0,0,0,3152,3153,5,1173,0,0,3153,3154,5,1213,0,0,3154,3155,
        3,164,82,0,3155,3156,5,1214,0,0,3156,3158,1,0,0,0,3157,3104,1,0,
        0,0,3157,3112,1,0,0,0,3157,3117,1,0,0,0,3157,3122,1,0,0,0,3157,3127,
        1,0,0,0,3157,3132,1,0,0,0,3157,3137,1,0,0,0,3157,3142,1,0,0,0,3157,
        3147,1,0,0,0,3157,3152,1,0,0,0,3158,351,1,0,0,0,3159,3160,5,474,
        0,0,3160,3162,3,402,201,0,3161,3163,3,356,178,0,3162,3161,1,0,0,
        0,3162,3163,1,0,0,0,3163,3171,1,0,0,0,3164,3165,5,1208,0,0,3165,
        3167,3,402,201,0,3166,3168,3,356,178,0,3167,3166,1,0,0,0,3167,3168,
        1,0,0,0,3168,3170,1,0,0,0,3169,3164,1,0,0,0,3170,3173,1,0,0,0,3171,
        3169,1,0,0,0,3171,3172,1,0,0,0,3172,3175,1,0,0,0,3173,3171,1,0,0,
        0,3174,3176,3,354,177,0,3175,3174,1,0,0,0,3175,3176,1,0,0,0,3176,
        353,1,0,0,0,3177,3178,5,42,0,0,3178,3183,3,396,198,0,3179,3180,5,
        1208,0,0,3180,3182,3,396,198,0,3181,3179,1,0,0,0,3182,3185,1,0,0,
        0,3183,3181,1,0,0,0,3183,3184,1,0,0,0,3184,355,1,0,0,0,3185,3183,
        1,0,0,0,3186,3187,5,1213,0,0,3187,3188,5,425,0,0,3188,3189,3,164,
        82,0,3189,3190,5,1214,0,0,3190,357,1,0,0,0,3191,3192,5,471,0,0,3192,
        3193,3,400,200,0,3193,359,1,0,0,0,3194,3195,5,174,0,0,3195,3196,
        5,42,0,0,3196,3207,3,362,181,0,3197,3198,5,174,0,0,3198,3199,5,42,
        0,0,3199,3202,3,362,181,0,3200,3201,5,1208,0,0,3201,3203,3,362,181,
        0,3202,3200,1,0,0,0,3203,3204,1,0,0,0,3204,3202,1,0,0,0,3204,3205,
        1,0,0,0,3205,3207,1,0,0,0,3206,3194,1,0,0,0,3206,3197,1,0,0,0,3207,
        361,1,0,0,0,3208,3213,3,364,182,0,3209,3213,3,370,185,0,3210,3213,
        3,372,186,0,3211,3213,3,374,187,0,3212,3208,1,0,0,0,3212,3209,1,
        0,0,0,3212,3210,1,0,0,0,3212,3211,1,0,0,0,3213,363,1,0,0,0,3214,
        3217,3,402,201,0,3215,3217,3,366,183,0,3216,3214,1,0,0,0,3216,3215,
        1,0,0,0,3217,3225,1,0,0,0,3218,3221,5,1208,0,0,3219,3222,3,402,201,
        0,3220,3222,3,366,183,0,3221,3219,1,0,0,0,3221,3220,1,0,0,0,3222,
        3224,1,0,0,0,3223,3218,1,0,0,0,3224,3227,1,0,0,0,3225,3223,1,0,0,
        0,3225,3226,1,0,0,0,3226,365,1,0,0,0,3227,3225,1,0,0,0,3228,3229,
        5,1213,0,0,3229,3232,3,402,201,0,3230,3231,5,1208,0,0,3231,3233,
        3,402,201,0,3232,3230,1,0,0,0,3233,3234,1,0,0,0,3234,3232,1,0,0,
        0,3234,3235,1,0,0,0,3235,3236,1,0,0,0,3236,3237,5,1214,0,0,3237,
        367,1,0,0,0,3238,3239,5,1213,0,0,3239,3240,5,1214,0,0,3240,369,1,
        0,0,0,3241,3242,5,360,0,0,3242,3243,5,1213,0,0,3243,3244,3,364,182,
        0,3244,3245,5,1214,0,0,3245,371,1,0,0,0,3246,3247,5,92,0,0,3247,
        3248,5,1213,0,0,3248,3249,3,364,182,0,3249,3250,5,1214,0,0,3250,
        373,1,0,0,0,3251,3252,5,175,0,0,3252,3253,5,374,0,0,3253,3254,5,
        1213,0,0,3254,3259,3,376,188,0,3255,3256,5,1208,0,0,3256,3258,3,
        376,188,0,3257,3255,1,0,0,0,3258,3261,1,0,0,0,3259,3257,1,0,0,0,
        3259,3260,1,0,0,0,3260,3262,1,0,0,0,3261,3259,1,0,0,0,3262,3263,
        5,1214,0,0,3263,375,1,0,0,0,3264,3270,3,364,182,0,3265,3270,3,368,
        184,0,3266,3270,3,370,185,0,3267,3270,3,372,186,0,3268,3270,3,374,
        187,0,3269,3264,1,0,0,0,3269,3265,1,0,0,0,3269,3266,1,0,0,0,3269,
        3267,1,0,0,0,3269,3268,1,0,0,0,3270,377,1,0,0,0,3271,3272,5,183,
        0,0,3272,3273,3,400,200,0,3273,379,1,0,0,0,3274,3275,5,315,0,0,3275,
        3276,3,400,200,0,3276,381,1,0,0,0,3277,3280,5,365,0,0,3278,3279,
        5,474,0,0,3279,3281,5,883,0,0,3280,3278,1,0,0,0,3280,3281,1,0,0,
        0,3281,3284,1,0,0,0,3282,3283,5,872,0,0,3283,3285,5,498,0,0,3284,
        3282,1,0,0,0,3284,3285,1,0,0,0,3285,3289,1,0,0,0,3286,3290,3,384,
        192,0,3287,3290,3,386,193,0,3288,3290,3,388,194,0,3289,3286,1,0,
        0,0,3289,3287,1,0,0,0,3289,3288,1,0,0,0,3290,383,1,0,0,0,3291,3296,
        3,174,87,0,3292,3293,5,1208,0,0,3293,3295,3,174,87,0,3294,3292,1,
        0,0,0,3295,3298,1,0,0,0,3296,3294,1,0,0,0,3296,3297,1,0,0,0,3297,
        385,1,0,0,0,3298,3296,1,0,0,0,3299,3304,3,170,85,0,3300,3301,5,1208,
        0,0,3301,3303,3,170,85,0,3302,3300,1,0,0,0,3303,3306,1,0,0,0,3304,
        3302,1,0,0,0,3304,3305,1,0,0,0,3305,387,1,0,0,0,3306,3304,1,0,0,
        0,3307,3308,5,470,0,0,3308,3309,3,400,200,0,3309,3312,5,419,0,0,
        3310,3313,3,384,192,0,3311,3313,3,386,193,0,3312,3310,1,0,0,0,3312,
        3311,1,0,0,0,3313,3315,1,0,0,0,3314,3307,1,0,0,0,3315,3316,1,0,0,
        0,3316,3314,1,0,0,0,3316,3317,1,0,0,0,3317,3323,1,0,0,0,3318,3321,
        5,131,0,0,3319,3322,3,384,192,0,3320,3322,3,386,193,0,3321,3319,
        1,0,0,0,3321,3320,1,0,0,0,3322,3324,1,0,0,0,3323,3318,1,0,0,0,3323,
        3324,1,0,0,0,3324,3325,1,0,0,0,3325,3326,5,134,0,0,3326,389,1,0,
        0,0,3327,3328,5,148,0,0,3328,3329,5,286,0,0,3329,3331,3,402,201,
        0,3330,3332,5,20,0,0,3331,3330,1,0,0,0,3331,3332,1,0,0,0,3332,3333,
        1,0,0,0,3333,3347,3,214,107,0,3334,3345,5,42,0,0,3335,3346,3,184,
        92,0,3336,3338,5,505,0,0,3337,3339,5,853,0,0,3338,3337,1,0,0,0,3338,
        3339,1,0,0,0,3339,3340,1,0,0,0,3340,3343,3,236,118,0,3341,3342,5,
        24,0,0,3342,3344,3,180,90,0,3343,3341,1,0,0,0,3343,3344,1,0,0,0,
        3344,3346,1,0,0,0,3345,3335,1,0,0,0,3345,3336,1,0,0,0,3346,3348,
        1,0,0,0,3347,3334,1,0,0,0,3347,3348,1,0,0,0,3348,3351,1,0,0,0,3349,
        3350,5,159,0,0,3350,3352,3,402,201,0,3351,3349,1,0,0,0,3351,3352,
        1,0,0,0,3352,391,1,0,0,0,3353,3354,5,291,0,0,3354,3355,5,42,0,0,
        3355,3360,3,394,197,0,3356,3357,5,1208,0,0,3357,3359,3,394,197,0,
        3358,3356,1,0,0,0,3359,3362,1,0,0,0,3360,3358,1,0,0,0,3360,3361,
        1,0,0,0,3361,393,1,0,0,0,3362,3360,1,0,0,0,3363,3365,3,402,201,0,
        3364,3366,7,27,0,0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,3366,3369,
        1,0,0,0,3367,3368,5,806,0,0,3368,3370,7,28,0,0,3369,3367,1,0,0,0,
        3369,3370,1,0,0,0,3370,395,1,0,0,0,3371,3373,3,402,201,0,3372,3374,
        7,27,0,0,3373,3372,1,0,0,0,3373,3374,1,0,0,0,3374,397,1,0,0,0,3375,
        3376,5,474,0,0,3376,3377,5,59,0,0,3377,3378,5,289,0,0,3378,399,1,
        0,0,0,3379,3380,6,200,-1,0,3380,3381,3,402,201,0,3381,3382,3,602,
        301,0,3382,3383,3,402,201,0,3383,3626,1,0,0,0,3384,3385,3,402,201,
        0,3385,3386,3,602,301,0,3386,3387,3,604,302,0,3387,3391,3,582,291,
        0,3388,3390,3,482,241,0,3389,3388,1,0,0,0,3390,3393,1,0,0,0,3391,
        3389,1,0,0,0,3391,3392,1,0,0,0,3392,3626,1,0,0,0,3393,3391,1,0,0,
        0,3394,3395,3,404,202,0,3395,3396,3,602,301,0,3396,3397,3,604,302,
        0,3397,3401,3,582,291,0,3398,3400,3,482,241,0,3399,3398,1,0,0,0,
        3400,3403,1,0,0,0,3401,3399,1,0,0,0,3401,3402,1,0,0,0,3402,3626,
        1,0,0,0,3403,3401,1,0,0,0,3404,3406,3,402,201,0,3405,3407,7,14,0,
        0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3408,1,0,0,0,3408,3409,
        5,35,0,0,3409,3410,3,402,201,0,3410,3411,5,16,0,0,3411,3412,3,402,
        201,0,3412,3626,1,0,0,0,3413,3415,3,402,201,0,3414,3416,5,207,0,
        0,3415,3414,1,0,0,0,3415,3416,1,0,0,0,3416,3418,1,0,0,0,3417,3419,
        7,14,0,0,3418,3417,1,0,0,0,3418,3419,1,0,0,0,3419,3420,1,0,0,0,3420,
        3422,5,190,0,0,3421,3423,3,604,302,0,3422,3421,1,0,0,0,3422,3423,
        1,0,0,0,3423,3424,1,0,0,0,3424,3428,3,584,292,0,3425,3427,3,482,
        241,0,3426,3425,1,0,0,0,3427,3430,1,0,0,0,3428,3426,1,0,0,0,3428,
        3429,1,0,0,0,3429,3626,1,0,0,0,3430,3428,1,0,0,0,3431,3433,3,402,
        201,0,3432,3434,5,207,0,0,3433,3432,1,0,0,0,3433,3434,1,0,0,0,3434,
        3436,1,0,0,0,3435,3437,7,14,0,0,3436,3435,1,0,0,0,3436,3437,1,0,
        0,0,3437,3438,1,0,0,0,3438,3440,5,190,0,0,3439,3441,3,604,302,0,
        3440,3439,1,0,0,0,3440,3441,1,0,0,0,3441,3442,1,0,0,0,3442,3446,
        3,590,295,0,3443,3445,3,482,241,0,3444,3443,1,0,0,0,3445,3448,1,
        0,0,0,3446,3444,1,0,0,0,3446,3447,1,0,0,0,3447,3626,1,0,0,0,3448,
        3446,1,0,0,0,3449,3451,3,402,201,0,3450,3452,5,207,0,0,3451,3450,
        1,0,0,0,3451,3452,1,0,0,0,3452,3454,1,0,0,0,3453,3455,7,14,0,0,3454,
        3453,1,0,0,0,3454,3455,1,0,0,0,3455,3456,1,0,0,0,3456,3458,5,190,
        0,0,3457,3459,3,604,302,0,3458,3457,1,0,0,0,3458,3459,1,0,0,0,3459,
        3460,1,0,0,0,3460,3464,3,402,201,0,3461,3463,3,482,241,0,3462,3461,
        1,0,0,0,3463,3466,1,0,0,0,3464,3462,1,0,0,0,3464,3465,1,0,0,0,3465,
        3626,1,0,0,0,3466,3464,1,0,0,0,3467,3469,3,404,202,0,3468,3470,5,
        207,0,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,3472,1,0,0,0,3471,
        3473,7,14,0,0,3472,3471,1,0,0,0,3472,3473,1,0,0,0,3473,3474,1,0,
        0,0,3474,3476,5,190,0,0,3475,3477,3,604,302,0,3476,3475,1,0,0,0,
        3476,3477,1,0,0,0,3477,3478,1,0,0,0,3478,3482,3,590,295,0,3479,3481,
        3,482,241,0,3480,3479,1,0,0,0,3481,3484,1,0,0,0,3482,3480,1,0,0,
        0,3482,3483,1,0,0,0,3483,3626,1,0,0,0,3484,3482,1,0,0,0,3485,3487,
        3,402,201,0,3486,3488,7,14,0,0,3487,3486,1,0,0,0,3487,3488,1,0,0,
        0,3488,3489,1,0,0,0,3489,3490,5,220,0,0,3490,3493,3,402,201,0,3491,
        3492,5,140,0,0,3492,3494,3,402,201,0,3493,3491,1,0,0,0,3493,3494,
        1,0,0,0,3494,3626,1,0,0,0,3495,3497,3,402,201,0,3496,3498,7,14,0,
        0,3497,3496,1,0,0,0,3497,3498,1,0,0,0,3498,3499,1,0,0,0,3499,3500,
        5,220,0,0,3500,3501,3,604,302,0,3501,3505,3,582,291,0,3502,3504,
        3,482,241,0,3503,3502,1,0,0,0,3504,3507,1,0,0,0,3505,3503,1,0,0,
        0,3505,3506,1,0,0,0,3506,3510,1,0,0,0,3507,3505,1,0,0,0,3508,3509,
        5,140,0,0,3509,3511,3,402,201,0,3510,3508,1,0,0,0,3510,3511,1,0,
        0,0,3511,3515,1,0,0,0,3512,3514,3,482,241,0,3513,3512,1,0,0,0,3514,
        3517,1,0,0,0,3515,3513,1,0,0,0,3515,3516,1,0,0,0,3516,3626,1,0,0,
        0,3517,3515,1,0,0,0,3518,3520,3,404,202,0,3519,3521,7,14,0,0,3520,
        3519,1,0,0,0,3520,3521,1,0,0,0,3521,3522,1,0,0,0,3522,3523,5,220,
        0,0,3523,3524,3,604,302,0,3524,3528,3,582,291,0,3525,3527,3,482,
        241,0,3526,3525,1,0,0,0,3527,3530,1,0,0,0,3528,3526,1,0,0,0,3528,
        3529,1,0,0,0,3529,3533,1,0,0,0,3530,3528,1,0,0,0,3531,3532,5,140,
        0,0,3532,3534,3,402,201,0,3533,3531,1,0,0,0,3533,3534,1,0,0,0,3534,
        3538,1,0,0,0,3535,3537,3,482,241,0,3536,3535,1,0,0,0,3537,3540,1,
        0,0,0,3538,3536,1,0,0,0,3538,3539,1,0,0,0,3539,3626,1,0,0,0,3540,
        3538,1,0,0,0,3541,3543,7,14,0,0,3542,3541,1,0,0,0,3542,3543,1,0,
        0,0,3543,3544,1,0,0,0,3544,3545,5,145,0,0,3545,3626,3,590,295,0,
        3546,3547,7,14,0,0,3547,3626,3,400,200,13,3548,3549,3,402,201,0,
        3549,3551,5,207,0,0,3550,3552,7,14,0,0,3551,3550,1,0,0,0,3551,3552,
        1,0,0,0,3552,3553,1,0,0,0,3553,3554,5,274,0,0,3554,3626,1,0,0,0,
        3555,3557,3,402,201,0,3556,3558,7,14,0,0,3557,3556,1,0,0,0,3557,
        3558,1,0,0,0,3558,3559,1,0,0,0,3559,3560,5,77,0,0,3560,3561,3,402,
        201,0,3561,3626,1,0,0,0,3562,3564,3,402,201,0,3563,3565,7,14,0,0,
        3564,3563,1,0,0,0,3564,3565,1,0,0,0,3565,3566,1,0,0,0,3566,3567,
        5,136,0,0,3567,3568,3,402,201,0,3568,3626,1,0,0,0,3569,3571,3,402,
        201,0,3570,3572,7,14,0,0,3571,3570,1,0,0,0,3571,3572,1,0,0,0,3572,
        3573,1,0,0,0,3573,3574,5,765,0,0,3574,3575,3,402,201,0,3575,3626,
        1,0,0,0,3576,3578,3,402,201,0,3577,3579,7,14,0,0,3578,3577,1,0,0,
        0,3578,3579,1,0,0,0,3579,3580,1,0,0,0,3580,3581,5,857,0,0,3581,3582,
        3,402,201,0,3582,3626,1,0,0,0,3583,3585,3,402,201,0,3584,3586,7,
        14,0,0,3585,3584,1,0,0,0,3585,3586,1,0,0,0,3586,3587,1,0,0,0,3587,
        3588,5,947,0,0,3588,3589,3,402,201,0,3589,3626,1,0,0,0,3590,3591,
        3,402,201,0,3591,3592,5,698,0,0,3592,3593,5,857,0,0,3593,3594,3,
        402,201,0,3594,3626,1,0,0,0,3595,3596,3,402,201,0,3596,3597,5,698,
        0,0,3597,3598,5,947,0,0,3598,3599,3,402,201,0,3599,3626,1,0,0,0,
        3600,3609,3,402,201,0,3601,3602,5,1213,0,0,3602,3603,3,402,201,0,
        3603,3604,5,1208,0,0,3604,3605,3,402,201,0,3605,3606,5,1214,0,0,
        3606,3609,1,0,0,0,3607,3609,3,590,295,0,3608,3600,1,0,0,0,3608,3601,
        1,0,0,0,3608,3607,1,0,0,0,3609,3610,1,0,0,0,3610,3619,5,296,0,0,
        3611,3620,3,402,201,0,3612,3613,5,1213,0,0,3613,3614,3,402,201,0,
        3614,3615,5,1208,0,0,3615,3616,3,402,201,0,3616,3617,5,1214,0,0,
        3617,3620,1,0,0,0,3618,3620,3,590,295,0,3619,3611,1,0,0,0,3619,3612,
        1,0,0,0,3619,3618,1,0,0,0,3620,3626,1,0,0,0,3621,3622,5,1213,0,0,
        3622,3623,3,400,200,0,3623,3624,5,1214,0,0,3624,3626,1,0,0,0,3625,
        3379,1,0,0,0,3625,3384,1,0,0,0,3625,3394,1,0,0,0,3625,3404,1,0,0,
        0,3625,3413,1,0,0,0,3625,3431,1,0,0,0,3625,3449,1,0,0,0,3625,3467,
        1,0,0,0,3625,3485,1,0,0,0,3625,3495,1,0,0,0,3625,3518,1,0,0,0,3625,
        3542,1,0,0,0,3625,3546,1,0,0,0,3625,3548,1,0,0,0,3625,3555,1,0,0,
        0,3625,3562,1,0,0,0,3625,3569,1,0,0,0,3625,3576,1,0,0,0,3625,3583,
        1,0,0,0,3625,3590,1,0,0,0,3625,3595,1,0,0,0,3625,3608,1,0,0,0,3625,
        3621,1,0,0,0,3626,3635,1,0,0,0,3627,3628,10,12,0,0,3628,3629,5,16,
        0,0,3629,3634,3,400,200,13,3630,3631,10,11,0,0,3631,3632,5,290,0,
        0,3632,3634,3,400,200,12,3633,3627,1,0,0,0,3633,3630,1,0,0,0,3634,
        3637,1,0,0,0,3635,3633,1,0,0,0,3635,3636,1,0,0,0,3636,401,1,0,0,
        0,3637,3635,1,0,0,0,3638,3639,6,201,-1,0,3639,3715,3,160,80,0,3640,
        3641,7,9,0,0,3641,3715,3,402,201,70,3642,3715,3,408,204,0,3643,3715,
        3,470,235,0,3644,3715,3,190,95,0,3645,3715,3,420,210,0,3646,3715,
        3,594,297,0,3647,3715,3,596,298,0,3648,3715,3,598,299,0,3649,3651,
        5,265,0,0,3650,3652,3,124,62,0,3651,3650,1,0,0,0,3651,3652,1,0,0,
        0,3652,3653,1,0,0,0,3653,3654,3,230,115,0,3654,3663,5,1213,0,0,3655,
        3660,3,402,201,0,3656,3657,5,1208,0,0,3657,3659,3,402,201,0,3658,
        3656,1,0,0,0,3659,3662,1,0,0,0,3660,3658,1,0,0,0,3660,3661,1,0,0,
        0,3661,3664,1,0,0,0,3662,3660,1,0,0,0,3663,3655,1,0,0,0,3663,3664,
        1,0,0,0,3664,3665,1,0,0,0,3665,3666,5,1214,0,0,3666,3715,1,0,0,0,
        3667,3668,5,265,0,0,3668,3669,5,720,0,0,3669,3670,5,1213,0,0,3670,
        3673,3,402,201,0,3671,3672,5,1208,0,0,3672,3674,7,29,0,0,3673,3671,
        1,0,0,0,3673,3674,1,0,0,0,3674,3675,1,0,0,0,3675,3676,5,1214,0,0,
        3676,3715,1,0,0,0,3677,3678,5,265,0,0,3678,3679,5,466,0,0,3679,3680,
        5,1213,0,0,3680,3685,3,402,201,0,3681,3683,5,20,0,0,3682,3681,1,
        0,0,0,3682,3683,1,0,0,0,3683,3684,1,0,0,0,3684,3686,3,214,107,0,
        3685,3682,1,0,0,0,3685,3686,1,0,0,0,3686,3697,1,0,0,0,3687,3688,
        5,1208,0,0,3688,3693,3,402,201,0,3689,3691,5,20,0,0,3690,3689,1,
        0,0,0,3690,3691,1,0,0,0,3691,3692,1,0,0,0,3692,3694,3,214,107,0,
        3693,3690,1,0,0,0,3693,3694,1,0,0,0,3694,3696,1,0,0,0,3695,3687,
        1,0,0,0,3696,3699,1,0,0,0,3697,3695,1,0,0,0,3697,3698,1,0,0,0,3698,
        3700,1,0,0,0,3699,3697,1,0,0,0,3700,3701,5,1214,0,0,3701,3715,1,
        0,0,0,3702,3703,5,265,0,0,3703,3704,5,1042,0,0,3704,3705,5,1213,
        0,0,3705,3706,3,402,201,0,3706,3707,5,1214,0,0,3707,3715,1,0,0,0,
        3708,3715,3,424,212,0,3709,3710,5,1213,0,0,3710,3711,3,402,201,0,
        3711,3712,5,1214,0,0,3712,3715,1,0,0,0,3713,3715,3,590,295,0,3714,
        3638,1,0,0,0,3714,3640,1,0,0,0,3714,3642,1,0,0,0,3714,3643,1,0,0,
        0,3714,3644,1,0,0,0,3714,3645,1,0,0,0,3714,3646,1,0,0,0,3714,3647,
        1,0,0,0,3714,3648,1,0,0,0,3714,3649,1,0,0,0,3714,3667,1,0,0,0,3714,
        3677,1,0,0,0,3714,3702,1,0,0,0,3714,3708,1,0,0,0,3714,3709,1,0,0,
        0,3714,3713,1,0,0,0,3715,4121,1,0,0,0,3716,3717,10,69,0,0,3717,3718,
        5,1223,0,0,3718,4120,3,402,201,69,3719,3720,10,68,0,0,3720,3721,
        7,30,0,0,3721,4120,3,402,201,69,3722,3723,10,67,0,0,3723,3724,5,
        251,0,0,3724,4120,3,402,201,67,3725,3726,10,66,0,0,3726,3727,7,9,
        0,0,3727,4120,3,402,201,67,3728,3729,10,65,0,0,3729,3730,7,31,0,
        0,3730,4120,3,402,201,66,3731,3732,10,57,0,0,3732,3733,5,835,0,0,
        3733,4120,3,402,201,58,3734,3735,10,56,0,0,3735,3736,7,32,0,0,3736,
        4120,3,402,201,57,3737,3738,10,61,0,0,3738,4120,3,580,290,0,3739,
        3740,10,60,0,0,3740,3741,5,1222,0,0,3741,3742,3,402,201,0,3742,3743,
        3,422,211,0,3743,4120,1,0,0,0,3744,3746,10,58,0,0,3745,3747,3,482,
        241,0,3746,3745,1,0,0,0,3747,3748,1,0,0,0,3748,3746,1,0,0,0,3748,
        3749,1,0,0,0,3749,4120,1,0,0,0,3750,3751,10,52,0,0,3751,3752,5,1209,
        0,0,3752,4120,3,194,97,0,3753,3754,10,51,0,0,3754,3755,5,1209,0,
        0,3755,4120,5,1219,0,0,3756,3757,10,50,0,0,3757,3758,5,1215,0,0,
        3758,3759,5,1219,0,0,3759,4120,5,1216,0,0,3760,3761,10,49,0,0,3761,
        3762,5,1215,0,0,3762,3763,3,170,85,0,3763,3764,5,1207,0,0,3764,3767,
        3,170,85,0,3765,3766,5,1207,0,0,3766,3768,3,170,85,0,3767,3765,1,
        0,0,0,3767,3768,1,0,0,0,3768,3769,1,0,0,0,3769,3770,5,1216,0,0,3770,
        4120,1,0,0,0,3771,3772,10,48,0,0,3772,3773,5,1209,0,0,3773,3774,
        5,1209,0,0,3774,4120,3,194,97,0,3775,3776,10,47,0,0,3776,3777,5,
        1209,0,0,3777,3778,5,1209,0,0,3778,4120,5,1219,0,0,3779,3780,10,
        46,0,0,3780,3781,5,1209,0,0,3781,3782,5,1209,0,0,3782,3783,5,1215,
        0,0,3783,3784,3,170,85,0,3784,3785,5,1216,0,0,3785,4120,1,0,0,0,
        3786,3787,10,45,0,0,3787,3788,5,1209,0,0,3788,3789,5,1209,0,0,3789,
        3790,5,1215,0,0,3790,3791,5,1219,0,0,3791,4120,5,1216,0,0,3792,3793,
        10,44,0,0,3793,3794,5,1209,0,0,3794,3795,5,1209,0,0,3795,3796,5,
        1215,0,0,3796,3797,3,170,85,0,3797,3798,5,1207,0,0,3798,3801,3,170,
        85,0,3799,3800,5,1207,0,0,3800,3802,3,170,85,0,3801,3799,1,0,0,0,
        3801,3802,1,0,0,0,3802,3803,1,0,0,0,3803,3804,5,1216,0,0,3804,4120,
        1,0,0,0,3805,3806,10,43,0,0,3806,3807,5,1209,0,0,3807,3808,5,1108,
        0,0,3808,3810,5,1213,0,0,3809,3811,3,164,82,0,3810,3809,1,0,0,0,
        3810,3811,1,0,0,0,3811,3812,1,0,0,0,3812,4120,5,1214,0,0,3813,3814,
        10,42,0,0,3814,3815,5,1209,0,0,3815,3816,5,1109,0,0,3816,3817,5,
        1213,0,0,3817,4120,5,1214,0,0,3818,3819,10,41,0,0,3819,3820,5,1209,
        0,0,3820,3821,5,1110,0,0,3821,3822,5,1213,0,0,3822,3825,3,402,201,
        0,3823,3824,5,1208,0,0,3824,3826,3,164,82,0,3825,3823,1,0,0,0,3825,
        3826,1,0,0,0,3826,3827,1,0,0,0,3827,3828,5,1214,0,0,3828,4120,1,
        0,0,0,3829,3830,10,40,0,0,3830,3831,5,1209,0,0,3831,3832,5,1111,
        0,0,3832,3833,5,1213,0,0,3833,3834,3,402,201,0,3834,3835,5,1214,
        0,0,3835,4120,1,0,0,0,3836,3837,10,39,0,0,3837,3838,5,1209,0,0,3838,
        3839,5,1112,0,0,3839,3840,5,1213,0,0,3840,3841,3,402,201,0,3841,
        3842,5,1214,0,0,3842,4120,1,0,0,0,3843,3844,10,38,0,0,3844,3845,
        5,1209,0,0,3845,3846,5,1113,0,0,3846,3847,5,1213,0,0,3847,3848,3,
        402,201,0,3848,3849,5,1214,0,0,3849,4120,1,0,0,0,3850,3851,10,37,
        0,0,3851,3852,5,1209,0,0,3852,3853,5,1114,0,0,3853,3854,5,1213,0,
        0,3854,3855,3,402,201,0,3855,3856,5,1214,0,0,3856,4120,1,0,0,0,3857,
        3858,10,36,0,0,3858,3859,5,1209,0,0,3859,3860,5,1115,0,0,3860,3861,
        5,1213,0,0,3861,3862,3,170,85,0,3862,3863,5,1214,0,0,3863,4120,1,
        0,0,0,3864,3865,10,35,0,0,3865,3866,5,1209,0,0,3866,3867,5,1116,
        0,0,3867,3868,5,1213,0,0,3868,4120,5,1214,0,0,3869,3870,10,34,0,
        0,3870,3871,5,1209,0,0,3871,3872,5,1117,0,0,3872,3873,5,1213,0,0,
        3873,3874,3,164,82,0,3874,3875,5,1214,0,0,3875,4120,1,0,0,0,3876,
        3877,10,33,0,0,3877,3878,5,1209,0,0,3878,3879,5,1118,0,0,3879,3880,
        5,1213,0,0,3880,3881,3,402,201,0,3881,3882,5,1214,0,0,3882,4120,
        1,0,0,0,3883,3884,10,32,0,0,3884,3885,5,1209,0,0,3885,3886,5,1119,
        0,0,3886,3887,5,1213,0,0,3887,4120,5,1214,0,0,3888,3889,10,31,0,
        0,3889,3890,5,1209,0,0,3890,3891,5,1120,0,0,3891,3895,5,1213,0,0,
        3892,3893,3,402,201,0,3893,3894,5,1208,0,0,3894,3896,1,0,0,0,3895,
        3892,1,0,0,0,3895,3896,1,0,0,0,3896,3897,1,0,0,0,3897,3898,3,402,
        201,0,3898,3899,5,1208,0,0,3899,3900,3,402,201,0,3900,3901,5,1214,
        0,0,3901,4120,1,0,0,0,3902,3903,10,30,0,0,3903,3904,5,1209,0,0,3904,
        3905,5,1121,0,0,3905,3906,5,1213,0,0,3906,4120,5,1214,0,0,3907,3908,
        10,29,0,0,3908,3909,5,1209,0,0,3909,3910,5,1122,0,0,3910,3911,5,
        1213,0,0,3911,4120,5,1214,0,0,3912,3913,10,28,0,0,3913,3914,5,1209,
        0,0,3914,3915,5,1123,0,0,3915,3916,5,1213,0,0,3916,3917,3,402,201,
        0,3917,3918,5,1208,0,0,3918,3919,3,402,201,0,3919,3920,5,1208,0,
        0,3920,3921,3,402,201,0,3921,3922,5,1214,0,0,3922,4120,1,0,0,0,3923,
        3924,10,27,0,0,3924,3925,5,1209,0,0,3925,3926,5,1124,0,0,3926,3927,
        5,1213,0,0,3927,4120,5,1214,0,0,3928,3929,10,26,0,0,3929,3930,5,
        1209,0,0,3930,3931,5,1125,0,0,3931,3935,5,1213,0,0,3932,3933,3,402,
        201,0,3933,3934,5,1208,0,0,3934,3936,1,0,0,0,3935,3932,1,0,0,0,3935,
        3936,1,0,0,0,3936,3937,1,0,0,0,3937,3938,3,402,201,0,3938,3939,5,
        1208,0,0,3939,3940,3,402,201,0,3940,3941,5,1214,0,0,3941,4120,1,
        0,0,0,3942,3943,10,25,0,0,3943,3944,5,1209,0,0,3944,3945,5,1126,
        0,0,3945,3946,5,1213,0,0,3946,3947,3,402,201,0,3947,3948,5,1208,
        0,0,3948,3949,3,402,201,0,3949,3950,5,1214,0,0,3950,4120,1,0,0,0,
        3951,3952,10,20,0,0,3952,3953,5,1215,0,0,3953,3958,3,170,85,0,3954,
        3955,5,1208,0,0,3955,3957,3,170,85,0,3956,3954,1,0,0,0,3957,3960,
        1,0,0,0,3958,3956,1,0,0,0,3958,3959,1,0,0,0,3959,3961,1,0,0,0,3960,
        3958,1,0,0,0,3961,3962,5,1216,0,0,3962,4120,1,0,0,0,3963,3964,10,
        19,0,0,3964,3965,5,1209,0,0,3965,3966,5,564,0,0,3966,3968,5,1213,
        0,0,3967,3969,3,600,300,0,3968,3967,1,0,0,0,3968,3969,1,0,0,0,3969,
        3970,1,0,0,0,3970,4120,5,1214,0,0,3971,3972,10,18,0,0,3972,3973,
        5,1209,0,0,3973,3974,5,517,0,0,3974,3975,5,1213,0,0,3975,3978,3,
        402,201,0,3976,3977,5,1208,0,0,3977,3979,3,600,300,0,3978,3976,1,
        0,0,0,3978,3979,1,0,0,0,3979,3980,1,0,0,0,3980,3981,5,1214,0,0,3981,
        4120,1,0,0,0,3982,3983,10,17,0,0,3983,3984,5,1209,0,0,3984,3985,
        7,33,0,0,3985,3986,5,1213,0,0,3986,3989,3,402,201,0,3987,3988,5,
        1208,0,0,3988,3990,3,600,300,0,3989,3987,1,0,0,0,3989,3990,1,0,0,
        0,3990,3991,1,0,0,0,3991,3992,5,1214,0,0,3992,4120,1,0,0,0,3993,
        3994,10,16,0,0,3994,3995,5,1209,0,0,3995,3996,7,34,0,0,3996,3997,
        5,1213,0,0,3997,4000,3,402,201,0,3998,3999,5,1208,0,0,3999,4001,
        3,600,300,0,4000,3998,1,0,0,0,4000,4001,1,0,0,0,4001,4002,1,0,0,
        0,4002,4003,5,1214,0,0,4003,4120,1,0,0,0,4004,4005,10,15,0,0,4005,
        4006,5,1209,0,0,4006,4007,7,35,0,0,4007,4009,5,1213,0,0,4008,4010,
        3,600,300,0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,4011,1,0,0,
        0,4011,4120,5,1214,0,0,4012,4013,10,14,0,0,4013,4014,5,1209,0,0,
        4014,4015,5,518,0,0,4015,4021,5,1213,0,0,4016,4019,3,600,300,0,4017,
        4018,5,1208,0,0,4018,4020,3,402,201,0,4019,4017,1,0,0,0,4019,4020,
        1,0,0,0,4020,4022,1,0,0,0,4021,4016,1,0,0,0,4021,4022,1,0,0,0,4022,
        4023,1,0,0,0,4023,4120,5,1214,0,0,4024,4025,10,13,0,0,4025,4026,
        5,1209,0,0,4026,4027,5,522,0,0,4027,4028,5,1213,0,0,4028,4029,3,
        402,201,0,4029,4030,5,1214,0,0,4030,4120,1,0,0,0,4031,4032,10,12,
        0,0,4032,4033,5,1209,0,0,4033,4034,5,516,0,0,4034,4035,5,1213,0,
        0,4035,4042,3,402,201,0,4036,4037,5,1208,0,0,4037,4040,3,600,300,
        0,4038,4039,5,1208,0,0,4039,4041,3,170,85,0,4040,4038,1,0,0,0,4040,
        4041,1,0,0,0,4041,4043,1,0,0,0,4042,4036,1,0,0,0,4042,4043,1,0,0,
        0,4043,4044,1,0,0,0,4044,4045,5,1214,0,0,4045,4120,1,0,0,0,4046,
        4047,10,11,0,0,4047,4048,5,1209,0,0,4048,4049,5,533,0,0,4049,4050,
        5,1213,0,0,4050,4056,3,402,201,0,4051,4054,5,1208,0,0,4052,4055,
        3,600,300,0,4053,4055,3,170,85,0,4054,4052,1,0,0,0,4054,4053,1,0,
        0,0,4055,4057,1,0,0,0,4056,4051,1,0,0,0,4056,4057,1,0,0,0,4057,4058,
        1,0,0,0,4058,4059,5,1214,0,0,4059,4120,1,0,0,0,4060,4061,10,10,0,
        0,4061,4062,5,1209,0,0,4062,4063,5,534,0,0,4063,4064,5,1213,0,0,
        4064,4065,3,402,201,0,4065,4066,5,1208,0,0,4066,4072,3,170,85,0,
        4067,4070,5,1208,0,0,4068,4071,3,600,300,0,4069,4071,3,170,85,0,
        4070,4068,1,0,0,0,4070,4069,1,0,0,0,4071,4073,1,0,0,0,4072,4067,
        1,0,0,0,4072,4073,1,0,0,0,4073,4074,1,0,0,0,4074,4075,5,1214,0,0,
        4075,4120,1,0,0,0,4076,4077,10,9,0,0,4077,4078,5,1209,0,0,4078,4079,
        7,36,0,0,4079,4080,5,1213,0,0,4080,4081,3,402,201,0,4081,4082,5,
        1214,0,0,4082,4120,1,0,0,0,4083,4084,10,8,0,0,4084,4085,5,1209,0,
        0,4085,4086,7,37,0,0,4086,4087,5,1213,0,0,4087,4120,5,1214,0,0,4088,
        4089,10,7,0,0,4089,4090,5,1209,0,0,4090,4091,5,818,0,0,4091,4092,
        5,1213,0,0,4092,4120,5,1214,0,0,4093,4094,10,6,0,0,4094,4095,5,1209,
        0,0,4095,4096,5,832,0,0,4096,4098,5,1213,0,0,4097,4099,3,170,85,
        0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,4100,1,0,0,0,4100,4120,
        5,1214,0,0,4101,4102,10,5,0,0,4102,4103,5,1209,0,0,4103,4104,3,234,
        117,0,4104,4113,5,1213,0,0,4105,4110,3,402,201,0,4106,4107,5,1208,
        0,0,4107,4109,3,402,201,0,4108,4106,1,0,0,0,4109,4112,1,0,0,0,4110,
        4108,1,0,0,0,4110,4111,1,0,0,0,4111,4114,1,0,0,0,4112,4110,1,0,0,
        0,4113,4105,1,0,0,0,4113,4114,1,0,0,0,4114,4115,1,0,0,0,4115,4116,
        5,1214,0,0,4116,4120,1,0,0,0,4117,4118,10,4,0,0,4118,4120,3,488,
        244,0,4119,3716,1,0,0,0,4119,3719,1,0,0,0,4119,3722,1,0,0,0,4119,
        3725,1,0,0,0,4119,3728,1,0,0,0,4119,3731,1,0,0,0,4119,3734,1,0,0,
        0,4119,3737,1,0,0,0,4119,3739,1,0,0,0,4119,3744,1,0,0,0,4119,3750,
        1,0,0,0,4119,3753,1,0,0,0,4119,3756,1,0,0,0,4119,3760,1,0,0,0,4119,
        3771,1,0,0,0,4119,3775,1,0,0,0,4119,3779,1,0,0,0,4119,3786,1,0,0,
        0,4119,3792,1,0,0,0,4119,3805,1,0,0,0,4119,3813,1,0,0,0,4119,3818,
        1,0,0,0,4119,3829,1,0,0,0,4119,3836,1,0,0,0,4119,3843,1,0,0,0,4119,
        3850,1,0,0,0,4119,3857,1,0,0,0,4119,3864,1,0,0,0,4119,3869,1,0,0,
        0,4119,3876,1,0,0,0,4119,3883,1,0,0,0,4119,3888,1,0,0,0,4119,3902,
        1,0,0,0,4119,3907,1,0,0,0,4119,3912,1,0,0,0,4119,3923,1,0,0,0,4119,
        3928,1,0,0,0,4119,3942,1,0,0,0,4119,3951,1,0,0,0,4119,3963,1,0,0,
        0,4119,3971,1,0,0,0,4119,3982,1,0,0,0,4119,3993,1,0,0,0,4119,4004,
        1,0,0,0,4119,4012,1,0,0,0,4119,4024,1,0,0,0,4119,4031,1,0,0,0,4119,
        4046,1,0,0,0,4119,4060,1,0,0,0,4119,4076,1,0,0,0,4119,4083,1,0,0,
        0,4119,4088,1,0,0,0,4119,4093,1,0,0,0,4119,4101,1,0,0,0,4119,4117,
        1,0,0,0,4120,4123,1,0,0,0,4121,4119,1,0,0,0,4121,4122,1,0,0,0,4122,
        403,1,0,0,0,4123,4121,1,0,0,0,4124,4125,5,1213,0,0,4125,4128,3,406,
        203,0,4126,4127,5,1208,0,0,4127,4129,3,406,203,0,4128,4126,1,0,0,
        0,4129,4130,1,0,0,0,4130,4128,1,0,0,0,4130,4131,1,0,0,0,4131,4132,
        1,0,0,0,4132,4133,5,1214,0,0,4133,405,1,0,0,0,4134,4139,3,402,201,
        0,4135,4137,5,20,0,0,4136,4135,1,0,0,0,4136,4137,1,0,0,0,4137,4138,
        1,0,0,0,4138,4140,3,214,107,0,4139,4136,1,0,0,0,4139,4140,1,0,0,
        0,4140,4150,1,0,0,0,4141,4142,5,1213,0,0,4142,4144,3,402,201,0,4143,
        4145,5,20,0,0,4144,4143,1,0,0,0,4144,4145,1,0,0,0,4145,4146,1,0,
        0,0,4146,4147,3,214,107,0,4147,4148,5,1214,0,0,4148,4150,1,0,0,0,
        4149,4134,1,0,0,0,4149,4141,1,0,0,0,4150,407,1,0,0,0,4151,4156,3,
        410,205,0,4152,4156,3,412,206,0,4153,4156,3,414,207,0,4154,4156,
        3,416,208,0,4155,4151,1,0,0,0,4155,4152,1,0,0,0,4155,4153,1,0,0,
        0,4155,4154,1,0,0,0,4156,409,1,0,0,0,4157,4158,5,47,0,0,4158,4164,
        3,402,201,0,4159,4160,5,470,0,0,4160,4161,3,402,201,0,4161,4162,
        5,419,0,0,4162,4163,3,402,201,0,4163,4165,1,0,0,0,4164,4159,1,0,
        0,0,4165,4166,1,0,0,0,4166,4164,1,0,0,0,4166,4167,1,0,0,0,4167,4170,
        1,0,0,0,4168,4169,5,131,0,0,4169,4171,3,402,201,0,4170,4168,1,0,
        0,0,4170,4171,1,0,0,0,4171,4172,1,0,0,0,4172,4173,5,134,0,0,4173,
        411,1,0,0,0,4174,4180,5,47,0,0,4175,4176,5,470,0,0,4176,4177,3,400,
        200,0,4177,4178,5,419,0,0,4178,4179,3,402,201,0,4179,4181,1,0,0,
        0,4180,4175,1,0,0,0,4181,4182,1,0,0,0,4182,4180,1,0,0,0,4182,4183,
        1,0,0,0,4183,4186,1,0,0,0,4184,4185,5,131,0,0,4185,4187,3,402,201,
        0,4186,4184,1,0,0,0,4186,4187,1,0,0,0,4187,4188,1,0,0,0,4188,4189,
        5,134,0,0,4189,413,1,0,0,0,4190,4191,5,66,0,0,4191,4192,3,586,293,
        0,4192,415,1,0,0,0,4193,4194,5,275,0,0,4194,4195,5,1213,0,0,4195,
        4196,3,402,201,0,4196,4197,5,1208,0,0,4197,4198,3,402,201,0,4198,
        4199,5,1214,0,0,4199,417,1,0,0,0,4200,4201,3,402,201,0,4201,4202,
        5,1222,0,0,4202,4203,3,402,201,0,4203,4211,1,0,0,0,4204,4205,5,1213,
        0,0,4205,4206,3,402,201,0,4206,4207,5,1222,0,0,4207,4208,3,402,201,
        0,4208,4209,5,1214,0,0,4209,4211,1,0,0,0,4210,4200,1,0,0,0,4210,
        4204,1,0,0,0,4211,419,1,0,0,0,4212,4213,5,1213,0,0,4213,4214,3,418,
        209,0,4214,4215,5,1214,0,0,4215,4216,3,422,211,0,4216,421,1,0,0,
        0,4217,4226,7,38,0,0,4218,4219,5,1213,0,0,4219,4222,3,170,85,0,4220,
        4221,5,1208,0,0,4221,4223,3,170,85,0,4222,4220,1,0,0,0,4222,4223,
        1,0,0,0,4223,4224,1,0,0,0,4224,4225,5,1214,0,0,4225,4227,1,0,0,0,
        4226,4218,1,0,0,0,4226,4227,1,0,0,0,4227,4236,1,0,0,0,4228,4229,
        5,426,0,0,4229,4234,7,39,0,0,4230,4231,5,1213,0,0,4231,4232,3,170,
        85,0,4232,4233,5,1214,0,0,4233,4235,1,0,0,0,4234,4230,1,0,0,0,4234,
        4235,1,0,0,0,4235,4237,1,0,0,0,4236,4228,1,0,0,0,4236,4237,1,0,0,
        0,4237,423,1,0,0,0,4238,4261,3,426,213,0,4239,4261,3,428,214,0,4240,
        4261,3,430,215,0,4241,4261,3,432,216,0,4242,4261,3,434,217,0,4243,
        4261,3,436,218,0,4244,4261,3,438,219,0,4245,4261,3,440,220,0,4246,
        4261,3,442,221,0,4247,4261,3,444,222,0,4248,4261,3,446,223,0,4249,
        4261,3,448,224,0,4250,4261,3,450,225,0,4251,4261,3,452,226,0,4252,
        4261,3,454,227,0,4253,4261,3,456,228,0,4254,4261,3,458,229,0,4255,
        4261,3,460,230,0,4256,4261,3,462,231,0,4257,4261,3,464,232,0,4258,
        4261,3,466,233,0,4259,4261,3,468,234,0,4260,4238,1,0,0,0,4260,4239,
        1,0,0,0,4260,4240,1,0,0,0,4260,4241,1,0,0,0,4260,4242,1,0,0,0,4260,
        4243,1,0,0,0,4260,4244,1,0,0,0,4260,4245,1,0,0,0,4260,4246,1,0,0,
        0,4260,4247,1,0,0,0,4260,4248,1,0,0,0,4260,4249,1,0,0,0,4260,4250,
        1,0,0,0,4260,4251,1,0,0,0,4260,4252,1,0,0,0,4260,4253,1,0,0,0,4260,
        4254,1,0,0,0,4260,4255,1,0,0,0,4260,4256,1,0,0,0,4260,4257,1,0,0,
        0,4260,4258,1,0,0,0,4260,4259,1,0,0,0,4261,425,1,0,0,0,4262,4263,
        7,40,0,0,4263,4265,5,1213,0,0,4264,4266,7,41,0,0,4265,4264,1,0,0,
        0,4265,4266,1,0,0,0,4266,4267,1,0,0,0,4267,4268,3,402,201,0,4268,
        4269,5,1214,0,0,4269,4298,1,0,0,0,4270,4271,7,42,0,0,4271,4272,5,
        1213,0,0,4272,4273,3,402,201,0,4273,4274,5,1208,0,0,4274,4275,3,
        402,201,0,4275,4276,5,1214,0,0,4276,4298,1,0,0,0,4277,4278,5,83,
        0,0,4278,4284,5,1213,0,0,4279,4285,5,1219,0,0,4280,4282,7,43,0,0,
        4281,4280,1,0,0,0,4281,4282,1,0,0,0,4282,4283,1,0,0,0,4283,4285,
        3,402,201,0,4284,4279,1,0,0,0,4284,4281,1,0,0,0,4285,4286,1,0,0,
        0,4286,4298,5,1214,0,0,4287,4288,5,175,0,0,4288,4289,5,1213,0,0,
        4289,4290,3,402,201,0,4290,4291,5,1214,0,0,4291,4298,1,0,0,0,4292,
        4293,5,1081,0,0,4293,4294,5,1213,0,0,4294,4295,3,402,201,0,4295,
        4296,5,1214,0,0,4296,4298,1,0,0,0,4297,4262,1,0,0,0,4297,4270,1,
        0,0,0,4297,4277,1,0,0,0,4297,4287,1,0,0,0,4297,4292,1,0,0,0,4298,
        427,1,0,0,0,4299,4300,7,44,0,0,4300,4301,5,1213,0,0,4301,4302,3,
        402,201,0,4302,4303,5,1214,0,0,4303,4304,3,508,254,0,4304,4449,1,
        0,0,0,4305,4306,7,42,0,0,4306,4307,5,1213,0,0,4307,4308,3,402,201,
        0,4308,4309,5,1208,0,0,4309,4310,3,402,201,0,4310,4311,5,1214,0,
        0,4311,4312,3,508,254,0,4312,4449,1,0,0,0,4313,4314,5,83,0,0,4314,
        4317,5,1213,0,0,4315,4318,5,1219,0,0,4316,4318,3,402,201,0,4317,
        4315,1,0,0,0,4317,4316,1,0,0,0,4318,4319,1,0,0,0,4319,4320,5,1214,
        0,0,4320,4449,3,508,254,0,4321,4322,5,89,0,0,4322,4323,5,1213,0,
        0,4323,4326,3,402,201,0,4324,4325,5,1208,0,0,4325,4327,3,396,198,
        0,4326,4324,1,0,0,0,4327,4328,1,0,0,0,4328,4326,1,0,0,0,4328,4329,
        1,0,0,0,4329,4330,1,0,0,0,4330,4331,5,1214,0,0,4331,4449,1,0,0,0,
        4332,4333,7,45,0,0,4333,4334,5,1213,0,0,4334,4335,5,1214,0,0,4335,
        4449,3,510,255,0,4336,4337,7,46,0,0,4337,4338,5,1213,0,0,4338,4340,
        3,402,201,0,4339,4341,3,550,275,0,4340,4339,1,0,0,0,4340,4341,1,
        0,0,0,4341,4342,1,0,0,0,4342,4343,5,1214,0,0,4343,4344,3,508,254,
        0,4344,4449,1,0,0,0,4345,4346,7,47,0,0,4346,4347,5,1213,0,0,4347,
        4349,3,402,201,0,4348,4350,3,550,275,0,4349,4348,1,0,0,0,4349,4350,
        1,0,0,0,4350,4357,1,0,0,0,4351,4352,5,1208,0,0,4352,4355,3,402,201,
        0,4353,4354,5,1208,0,0,4354,4356,3,402,201,0,4355,4353,1,0,0,0,4355,
        4356,1,0,0,0,4356,4358,1,0,0,0,4357,4351,1,0,0,0,4357,4358,1,0,0,
        0,4358,4359,1,0,0,0,4359,4361,5,1214,0,0,4360,4362,3,550,275,0,4361,
        4360,1,0,0,0,4361,4362,1,0,0,0,4362,4363,1,0,0,0,4363,4364,3,510,
        255,0,4364,4449,1,0,0,0,4365,4366,7,48,0,0,4366,4367,5,1213,0,0,
        4367,4368,3,402,201,0,4368,4369,5,1208,0,0,4369,4372,3,170,85,0,
        4370,4371,5,1208,0,0,4371,4373,3,396,198,0,4372,4370,1,0,0,0,4373,
        4374,1,0,0,0,4374,4372,1,0,0,0,4374,4375,1,0,0,0,4375,4376,1,0,0,
        0,4376,4377,5,1214,0,0,4377,4449,1,0,0,0,4378,4379,5,763,0,0,4379,
        4380,5,1213,0,0,4380,4381,3,402,201,0,4381,4382,5,1214,0,0,4382,
        4449,1,0,0,0,4383,4384,5,249,0,0,4384,4385,5,1213,0,0,4385,4386,
        3,402,201,0,4386,4387,5,1208,0,0,4387,4388,3,170,85,0,4388,4389,
        5,1208,0,0,4389,4390,3,396,198,0,4390,4391,5,1214,0,0,4391,4449,
        1,0,0,0,4392,4393,7,49,0,0,4393,4394,5,1213,0,0,4394,4395,3,402,
        201,0,4395,4396,5,1214,0,0,4396,4397,5,1039,0,0,4397,4398,5,174,
        0,0,4398,4399,5,1213,0,0,4399,4400,5,291,0,0,4400,4401,5,42,0,0,
        4401,4406,3,394,197,0,4402,4403,5,1208,0,0,4403,4405,3,394,197,0,
        4404,4402,1,0,0,0,4405,4408,1,0,0,0,4406,4404,1,0,0,0,4406,4407,
        1,0,0,0,4407,4409,1,0,0,0,4408,4406,1,0,0,0,4409,4410,5,1214,0,0,
        4410,4449,1,0,0,0,4411,4412,5,316,0,0,4412,4413,5,1213,0,0,4413,
        4416,3,170,85,0,4414,4415,5,1208,0,0,4415,4417,3,396,198,0,4416,
        4414,1,0,0,0,4417,4418,1,0,0,0,4418,4416,1,0,0,0,4418,4419,1,0,0,
        0,4419,4420,1,0,0,0,4420,4421,5,1214,0,0,4421,4449,1,0,0,0,4422,
        4423,5,321,0,0,4423,4424,5,1213,0,0,4424,4425,5,1214,0,0,4425,4449,
        3,512,256,0,4426,4427,5,321,0,0,4427,4428,5,1213,0,0,4428,4433,3,
        396,198,0,4429,4430,5,1208,0,0,4430,4432,3,396,198,0,4431,4429,1,
        0,0,0,4432,4435,1,0,0,0,4433,4431,1,0,0,0,4433,4434,1,0,0,0,4434,
        4436,1,0,0,0,4435,4433,1,0,0,0,4436,4437,5,1214,0,0,4437,4449,1,
        0,0,0,4438,4439,5,362,0,0,4439,4440,5,1213,0,0,4440,4441,5,1214,
        0,0,4441,4449,3,510,255,0,4442,4443,5,1081,0,0,4443,4444,5,1213,
        0,0,4444,4445,3,402,201,0,4445,4446,5,1214,0,0,4446,4447,3,508,254,
        0,4447,4449,1,0,0,0,4448,4299,1,0,0,0,4448,4305,1,0,0,0,4448,4313,
        1,0,0,0,4448,4321,1,0,0,0,4448,4332,1,0,0,0,4448,4336,1,0,0,0,4448,
        4345,1,0,0,0,4448,4365,1,0,0,0,4448,4378,1,0,0,0,4448,4383,1,0,0,
        0,4448,4392,1,0,0,0,4448,4411,1,0,0,0,4448,4422,1,0,0,0,4448,4426,
        1,0,0,0,4448,4438,1,0,0,0,4448,4442,1,0,0,0,4449,429,1,0,0,0,4450,
        4451,7,50,0,0,4451,4452,5,1213,0,0,4452,4453,3,402,201,0,4453,4454,
        5,1214,0,0,4454,4505,1,0,0,0,4455,4457,3,472,236,0,4456,4455,1,0,
        0,0,4456,4457,1,0,0,0,4457,4458,1,0,0,0,4458,4459,7,51,0,0,4459,
        4460,5,1213,0,0,4460,4461,3,402,201,0,4461,4462,5,1214,0,0,4462,
        4505,1,0,0,0,4463,4464,7,52,0,0,4464,4465,5,1213,0,0,4465,4466,3,
        402,201,0,4466,4467,5,1208,0,0,4467,4468,3,402,201,0,4468,4469,5,
        1214,0,0,4469,4505,1,0,0,0,4470,4472,3,476,238,0,4471,4470,1,0,0,
        0,4471,4472,1,0,0,0,4472,4473,1,0,0,0,4473,4474,5,856,0,0,4474,4475,
        5,1213,0,0,4475,4476,3,402,201,0,4476,4477,5,1208,0,0,4477,4478,
        3,402,201,0,4478,4479,5,1214,0,0,4479,4505,1,0,0,0,4480,4482,3,472,
        236,0,4481,4480,1,0,0,0,4481,4482,1,0,0,0,4482,4483,1,0,0,0,4483,
        4484,7,53,0,0,4484,4485,5,1213,0,0,4485,4488,3,402,201,0,4486,4487,
        5,1208,0,0,4487,4489,3,402,201,0,4488,4486,1,0,0,0,4488,4489,1,0,
        0,0,4489,4490,1,0,0,0,4490,4491,5,1214,0,0,4491,4505,1,0,0,0,4492,
        4493,5,1100,0,0,4493,4494,5,1066,0,0,4494,4495,5,1213,0,0,4495,4496,
        3,402,201,0,4496,4497,5,1208,0,0,4497,4498,3,402,201,0,4498,4499,
        5,1208,0,0,4499,4500,3,402,201,0,4500,4501,5,1208,0,0,4501,4502,
        3,402,201,0,4502,4503,5,1214,0,0,4503,4505,1,0,0,0,4504,4450,1,0,
        0,0,4504,4456,1,0,0,0,4504,4463,1,0,0,0,4504,4471,1,0,0,0,4504,4481,
        1,0,0,0,4504,4492,1,0,0,0,4505,431,1,0,0,0,4506,4508,3,472,236,0,
        4507,4506,1,0,0,0,4507,4508,1,0,0,0,4508,4509,1,0,0,0,4509,4510,
        5,514,0,0,4510,4511,5,1213,0,0,4511,4518,3,402,201,0,4512,4513,5,
        291,0,0,4513,4514,5,42,0,0,4514,4516,3,402,201,0,4515,4517,7,27,
        0,0,4516,4515,1,0,0,0,4516,4517,1,0,0,0,4517,4519,1,0,0,0,4518,4512,
        1,0,0,0,4518,4519,1,0,0,0,4519,4520,1,0,0,0,4520,4521,5,1208,0,0,
        4521,4522,3,402,201,0,4522,4523,5,1214,0,0,4523,4720,1,0,0,0,4524,
        4525,5,564,0,0,4525,4526,5,1213,0,0,4526,4531,3,402,201,0,4527,4528,
        5,1208,0,0,4528,4530,3,600,300,0,4529,4527,1,0,0,0,4530,4533,1,0,
        0,0,4531,4529,1,0,0,0,4531,4532,1,0,0,0,4532,4534,1,0,0,0,4533,4531,
        1,0,0,0,4534,4535,5,1214,0,0,4535,4720,1,0,0,0,4536,4537,5,517,0,
        0,4537,4538,5,1213,0,0,4538,4539,3,402,201,0,4539,4540,5,1208,0,
        0,4540,4545,3,402,201,0,4541,4542,5,1208,0,0,4542,4544,3,600,300,
        0,4543,4541,1,0,0,0,4544,4547,1,0,0,0,4545,4543,1,0,0,0,4545,4546,
        1,0,0,0,4546,4548,1,0,0,0,4547,4545,1,0,0,0,4548,4549,5,1214,0,0,
        4549,4720,1,0,0,0,4550,4551,7,33,0,0,4551,4552,5,1213,0,0,4552,4553,
        3,402,201,0,4553,4554,5,1208,0,0,4554,4559,3,402,201,0,4555,4556,
        5,1208,0,0,4556,4558,3,600,300,0,4557,4555,1,0,0,0,4558,4561,1,0,
        0,0,4559,4557,1,0,0,0,4559,4560,1,0,0,0,4560,4562,1,0,0,0,4561,4559,
        1,0,0,0,4562,4563,5,1214,0,0,4563,4720,1,0,0,0,4564,4565,7,34,0,
        0,4565,4566,5,1213,0,0,4566,4567,3,402,201,0,4567,4568,5,1208,0,
        0,4568,4573,3,402,201,0,4569,4570,5,1208,0,0,4570,4572,3,600,300,
        0,4571,4569,1,0,0,0,4572,4575,1,0,0,0,4573,4571,1,0,0,0,4573,4574,
        1,0,0,0,4574,4576,1,0,0,0,4575,4573,1,0,0,0,4576,4577,5,1214,0,0,
        4577,4720,1,0,0,0,4578,4579,7,35,0,0,4579,4580,5,1213,0,0,4580,4585,
        3,402,201,0,4581,4582,5,1208,0,0,4582,4584,3,600,300,0,4583,4581,
        1,0,0,0,4584,4587,1,0,0,0,4585,4583,1,0,0,0,4585,4586,1,0,0,0,4586,
        4588,1,0,0,0,4587,4585,1,0,0,0,4588,4589,5,1214,0,0,4589,4720,1,
        0,0,0,4590,4591,5,518,0,0,4591,4592,5,1213,0,0,4592,4608,3,402,201,
        0,4593,4594,5,1208,0,0,4594,4596,3,600,300,0,4595,4593,1,0,0,0,4596,
        4599,1,0,0,0,4597,4595,1,0,0,0,4597,4598,1,0,0,0,4598,4600,1,0,0,
        0,4599,4597,1,0,0,0,4600,4601,5,1208,0,0,4601,4609,3,402,201,0,4602,
        4603,5,1208,0,0,4603,4605,3,600,300,0,4604,4602,1,0,0,0,4605,4606,
        1,0,0,0,4606,4604,1,0,0,0,4606,4607,1,0,0,0,4607,4609,1,0,0,0,4608,
        4597,1,0,0,0,4608,4604,1,0,0,0,4608,4609,1,0,0,0,4609,4610,1,0,0,
        0,4610,4611,5,1214,0,0,4611,4720,1,0,0,0,4612,4613,5,522,0,0,4613,
        4614,5,1213,0,0,4614,4615,3,402,201,0,4615,4616,5,1208,0,0,4616,
        4617,3,402,201,0,4617,4618,5,1214,0,0,4618,4720,1,0,0,0,4619,4620,
        5,516,0,0,4620,4621,5,1213,0,0,4621,4622,3,402,201,0,4622,4623,5,
        1208,0,0,4623,4633,3,402,201,0,4624,4625,5,1208,0,0,4625,4627,3,
        600,300,0,4626,4624,1,0,0,0,4627,4628,1,0,0,0,4628,4626,1,0,0,0,
        4628,4629,1,0,0,0,4629,4630,1,0,0,0,4630,4631,5,1208,0,0,4631,4632,
        3,170,85,0,4632,4634,1,0,0,0,4633,4626,1,0,0,0,4633,4634,1,0,0,0,
        4634,4635,1,0,0,0,4635,4636,5,1214,0,0,4636,4720,1,0,0,0,4637,4638,
        5,533,0,0,4638,4639,5,1213,0,0,4639,4640,3,402,201,0,4640,4641,5,
        1208,0,0,4641,4650,3,402,201,0,4642,4643,5,1208,0,0,4643,4645,3,
        600,300,0,4644,4642,1,0,0,0,4645,4646,1,0,0,0,4646,4644,1,0,0,0,
        4646,4647,1,0,0,0,4647,4651,1,0,0,0,4648,4649,5,1208,0,0,4649,4651,
        3,402,201,0,4650,4644,1,0,0,0,4650,4648,1,0,0,0,4650,4651,1,0,0,
        0,4651,4652,1,0,0,0,4652,4653,5,1214,0,0,4653,4720,1,0,0,0,4654,
        4655,5,534,0,0,4655,4656,5,1213,0,0,4656,4657,3,402,201,0,4657,4658,
        5,1208,0,0,4658,4659,3,402,201,0,4659,4660,5,1208,0,0,4660,4669,
        3,170,85,0,4661,4662,5,1208,0,0,4662,4664,3,600,300,0,4663,4661,
        1,0,0,0,4664,4665,1,0,0,0,4665,4663,1,0,0,0,4665,4666,1,0,0,0,4666,
        4670,1,0,0,0,4667,4668,5,1208,0,0,4668,4670,3,402,201,0,4669,4663,
        1,0,0,0,4669,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4671,1,0,0,0,4671,
        4672,5,1214,0,0,4672,4720,1,0,0,0,4673,4675,3,472,236,0,4674,4673,
        1,0,0,0,4674,4675,1,0,0,0,4675,4676,1,0,0,0,4676,4677,7,36,0,0,4677,
        4678,5,1213,0,0,4678,4679,3,402,201,0,4679,4680,5,1208,0,0,4680,
        4681,3,402,201,0,4681,4682,5,1214,0,0,4682,4720,1,0,0,0,4683,4685,
        3,472,236,0,4684,4683,1,0,0,0,4684,4685,1,0,0,0,4685,4686,1,0,0,
        0,4686,4687,7,54,0,0,4687,4688,5,1213,0,0,4688,4689,3,402,201,0,
        4689,4690,5,1214,0,0,4690,4720,1,0,0,0,4691,4693,3,472,236,0,4692,
        4691,1,0,0,0,4692,4693,1,0,0,0,4693,4694,1,0,0,0,4694,4695,5,818,
        0,0,4695,4696,5,1213,0,0,4696,4703,3,402,201,0,4697,4698,5,1208,
        0,0,4698,4701,3,402,201,0,4699,4700,5,1208,0,0,4700,4702,3,402,201,
        0,4701,4699,1,0,0,0,4701,4702,1,0,0,0,4702,4704,1,0,0,0,4703,4697,
        1,0,0,0,4703,4704,1,0,0,0,4704,4705,1,0,0,0,4705,4706,5,1214,0,0,
        4706,4720,1,0,0,0,4707,4709,3,472,236,0,4708,4707,1,0,0,0,4708,4709,
        1,0,0,0,4709,4710,1,0,0,0,4710,4711,5,832,0,0,4711,4712,5,1213,0,
        0,4712,4715,3,402,201,0,4713,4714,5,1208,0,0,4714,4716,3,402,201,
        0,4715,4713,1,0,0,0,4715,4716,1,0,0,0,4716,4717,1,0,0,0,4717,4718,
        5,1214,0,0,4718,4720,1,0,0,0,4719,4507,1,0,0,0,4719,4524,1,0,0,0,
        4719,4536,1,0,0,0,4719,4550,1,0,0,0,4719,4564,1,0,0,0,4719,4578,
        1,0,0,0,4719,4590,1,0,0,0,4719,4612,1,0,0,0,4719,4619,1,0,0,0,4719,
        4637,1,0,0,0,4719,4654,1,0,0,0,4719,4674,1,0,0,0,4719,4684,1,0,0,
        0,4719,4692,1,0,0,0,4719,4708,1,0,0,0,4720,433,1,0,0,0,4721,4722,
        5,546,0,0,4722,4723,5,1213,0,0,4723,4726,3,402,201,0,4724,4725,5,
        1208,0,0,4725,4727,3,160,80,0,4726,4724,1,0,0,0,4726,4727,1,0,0,
        0,4727,4728,1,0,0,0,4728,4729,5,1214,0,0,4729,4762,1,0,0,0,4730,
        4731,7,55,0,0,4731,4732,5,1213,0,0,4732,4733,3,402,201,0,4733,4734,
        5,1214,0,0,4734,4762,1,0,0,0,4735,4736,7,56,0,0,4736,4737,5,1213,
        0,0,4737,4738,3,402,201,0,4738,4739,5,1214,0,0,4739,4762,1,0,0,0,
        4740,4745,5,111,0,0,4741,4742,5,1213,0,0,4742,4743,3,190,95,0,4743,
        4744,5,1214,0,0,4744,4746,1,0,0,0,4745,4741,1,0,0,0,4745,4746,1,
        0,0,0,4746,4762,1,0,0,0,4747,4748,7,57,0,0,4748,4749,5,1213,0,0,
        4749,4750,3,402,201,0,4750,4751,5,1214,0,0,4751,4762,1,0,0,0,4752,
        4753,5,281,0,0,4753,4754,5,1213,0,0,4754,4757,3,402,201,0,4755,4756,
        5,1208,0,0,4756,4758,3,160,80,0,4757,4755,1,0,0,0,4757,4758,1,0,
        0,0,4758,4759,1,0,0,0,4759,4760,5,1214,0,0,4760,4762,1,0,0,0,4761,
        4721,1,0,0,0,4761,4730,1,0,0,0,4761,4735,1,0,0,0,4761,4740,1,0,0,
        0,4761,4747,1,0,0,0,4761,4752,1,0,0,0,4762,435,1,0,0,0,4763,4765,
        3,472,236,0,4764,4763,1,0,0,0,4764,4765,1,0,0,0,4765,4766,1,0,0,
        0,4766,4767,5,548,0,0,4767,4768,5,1213,0,0,4768,4769,3,402,201,0,
        4769,4770,5,1214,0,0,4770,4828,1,0,0,0,4771,4773,3,472,236,0,4772,
        4771,1,0,0,0,4772,4773,1,0,0,0,4773,4774,1,0,0,0,4774,4775,7,58,
        0,0,4775,4776,5,1213,0,0,4776,4777,3,402,201,0,4777,4778,5,1208,
        0,0,4778,4779,3,402,201,0,4779,4780,5,1214,0,0,4780,4828,1,0,0,0,
        4781,4783,3,472,236,0,4782,4781,1,0,0,0,4782,4783,1,0,0,0,4783,4784,
        1,0,0,0,4784,4785,5,597,0,0,4785,4786,5,1213,0,0,4786,4789,3,402,
        201,0,4787,4788,5,1208,0,0,4788,4790,3,402,201,0,4789,4787,1,0,0,
        0,4789,4790,1,0,0,0,4790,4791,1,0,0,0,4791,4792,5,1214,0,0,4792,
        4828,1,0,0,0,4793,4795,3,472,236,0,4794,4793,1,0,0,0,4794,4795,1,
        0,0,0,4795,4796,1,0,0,0,4796,4797,5,919,0,0,4797,4798,5,1213,0,0,
        4798,4799,3,402,201,0,4799,4800,5,1208,0,0,4800,4803,3,402,201,0,
        4801,4802,5,1208,0,0,4802,4804,3,402,201,0,4803,4801,1,0,0,0,4803,
        4804,1,0,0,0,4804,4805,1,0,0,0,4805,4806,5,1214,0,0,4806,4828,1,
        0,0,0,4807,4809,3,472,236,0,4808,4807,1,0,0,0,4808,4809,1,0,0,0,
        4809,4810,1,0,0,0,4810,4811,5,945,0,0,4811,4812,5,1213,0,0,4812,
        4813,3,402,201,0,4813,4814,5,1208,0,0,4814,4815,3,402,201,0,4815,
        4816,5,1208,0,0,4816,4817,3,402,201,0,4817,4818,5,1214,0,0,4818,
        4828,1,0,0,0,4819,4821,3,472,236,0,4820,4819,1,0,0,0,4820,4821,1,
        0,0,0,4821,4822,1,0,0,0,4822,4823,5,991,0,0,4823,4824,5,1213,0,0,
        4824,4825,3,402,201,0,4825,4826,5,1214,0,0,4826,4828,1,0,0,0,4827,
        4764,1,0,0,0,4827,4772,1,0,0,0,4827,4782,1,0,0,0,4827,4794,1,0,0,
        0,4827,4808,1,0,0,0,4827,4820,1,0,0,0,4828,437,1,0,0,0,4829,4886,
        5,5,0,0,4830,4833,5,94,0,0,4831,4832,5,1213,0,0,4832,4834,5,1214,
        0,0,4833,4831,1,0,0,0,4833,4834,1,0,0,0,4834,4839,1,0,0,0,4835,4836,
        5,604,0,0,4836,4837,5,1213,0,0,4837,4839,5,1214,0,0,4838,4830,1,
        0,0,0,4838,4835,1,0,0,0,4839,4841,1,0,0,0,4840,4842,3,580,290,0,
        4841,4840,1,0,0,0,4841,4842,1,0,0,0,4842,4886,1,0,0,0,4843,4886,
        5,95,0,0,4844,4846,5,96,0,0,4845,4847,3,128,64,0,4846,4845,1,0,0,
        0,4846,4847,1,0,0,0,4847,4852,1,0,0,0,4848,4849,5,605,0,0,4849,4850,
        5,1213,0,0,4850,4852,5,1214,0,0,4851,4844,1,0,0,0,4851,4848,1,0,
        0,0,4852,4854,1,0,0,0,4853,4855,3,580,290,0,4854,4853,1,0,0,0,4854,
        4855,1,0,0,0,4855,4886,1,0,0,0,4856,4858,5,97,0,0,4857,4859,3,128,
        64,0,4858,4857,1,0,0,0,4858,4859,1,0,0,0,4859,4861,1,0,0,0,4860,
        4862,3,580,290,0,4861,4860,1,0,0,0,4861,4862,1,0,0,0,4862,4886,1,
        0,0,0,4863,4886,5,98,0,0,4864,4886,5,102,0,0,4865,4867,5,104,0,0,
        4866,4868,3,580,290,0,4867,4866,1,0,0,0,4867,4868,1,0,0,0,4868,4886,
        1,0,0,0,4869,4870,5,803,0,0,4870,4871,5,1213,0,0,4871,4886,5,1214,
        0,0,4872,4886,5,311,0,0,4873,4886,5,357,0,0,4874,4886,5,371,0,0,
        4875,4886,5,980,0,0,4876,4878,5,981,0,0,4877,4879,3,128,64,0,4878,
        4877,1,0,0,0,4878,4879,1,0,0,0,4879,4886,1,0,0,0,4880,4882,5,421,
        0,0,4881,4883,3,580,290,0,4882,4881,1,0,0,0,4882,4883,1,0,0,0,4883,
        4886,1,0,0,0,4884,4886,5,456,0,0,4885,4829,1,0,0,0,4885,4838,1,0,
        0,0,4885,4843,1,0,0,0,4885,4851,1,0,0,0,4885,4856,1,0,0,0,4885,4863,
        1,0,0,0,4885,4864,1,0,0,0,4885,4865,1,0,0,0,4885,4869,1,0,0,0,4885,
        4872,1,0,0,0,4885,4873,1,0,0,0,4885,4874,1,0,0,0,4885,4875,1,0,0,
        0,4885,4876,1,0,0,0,4885,4880,1,0,0,0,4885,4884,1,0,0,0,4886,439,
        1,0,0,0,4887,4889,3,476,238,0,4888,4887,1,0,0,0,4888,4889,1,0,0,
        0,4889,4890,1,0,0,0,4890,4891,7,59,0,0,4891,4892,5,1213,0,0,4892,
        4893,3,402,201,0,4893,4894,5,1214,0,0,4894,4911,1,0,0,0,4895,4897,
        3,472,236,0,4896,4895,1,0,0,0,4896,4897,1,0,0,0,4897,4898,1,0,0,
        0,4898,4899,7,60,0,0,4899,4900,5,1213,0,0,4900,4902,3,402,201,0,
        4901,4903,5,1208,0,0,4902,4901,1,0,0,0,4902,4903,1,0,0,0,4903,4906,
        1,0,0,0,4904,4907,5,274,0,0,4905,4907,3,164,82,0,4906,4904,1,0,0,
        0,4906,4905,1,0,0,0,4906,4907,1,0,0,0,4907,4908,1,0,0,0,4908,4909,
        5,1214,0,0,4909,4911,1,0,0,0,4910,4888,1,0,0,0,4910,4896,1,0,0,0,
        4911,441,1,0,0,0,4912,4914,3,472,236,0,4913,4912,1,0,0,0,4913,4914,
        1,0,0,0,4914,4915,1,0,0,0,4915,4916,5,622,0,0,4916,4917,5,1213,0,
        0,4917,4918,3,402,201,0,4918,4919,5,1208,0,0,4919,4920,3,402,201,
        0,4920,4921,5,1208,0,0,4921,4922,3,402,201,0,4922,4923,1,0,0,0,4923,
        4924,3,402,201,0,4924,4925,5,1214,0,0,4925,4941,1,0,0,0,4926,4928,
        3,472,236,0,4927,4926,1,0,0,0,4927,4928,1,0,0,0,4928,4929,1,0,0,
        0,4929,4930,7,61,0,0,4930,4931,5,1213,0,0,4931,4934,3,402,201,0,
        4932,4933,5,1208,0,0,4933,4935,3,402,201,0,4934,4932,1,0,0,0,4935,
        4936,1,0,0,0,4936,4934,1,0,0,0,4936,4937,1,0,0,0,4937,4938,1,0,0,
        0,4938,4939,5,1214,0,0,4939,4941,1,0,0,0,4940,4913,1,0,0,0,4940,
        4927,1,0,0,0,4941,443,1,0,0,0,4942,4944,3,472,236,0,4943,4942,1,
        0,0,0,4943,4944,1,0,0,0,4944,4945,1,0,0,0,4945,4946,7,62,0,0,4946,
        4947,5,1213,0,0,4947,4948,3,402,201,0,4948,4949,5,1214,0,0,4949,
        445,1,0,0,0,4950,4951,5,50,0,0,4951,4952,5,1213,0,0,4952,4953,3,
        402,201,0,4953,4966,5,20,0,0,4954,4958,3,94,47,0,4955,4957,3,116,
        58,0,4956,4955,1,0,0,0,4957,4960,1,0,0,0,4958,4956,1,0,0,0,4958,
        4959,1,0,0,0,4959,4967,1,0,0,0,4960,4958,1,0,0,0,4961,4963,3,116,
        58,0,4962,4961,1,0,0,0,4963,4964,1,0,0,0,4964,4962,1,0,0,0,4964,
        4965,1,0,0,0,4965,4967,1,0,0,0,4966,4954,1,0,0,0,4966,4962,1,0,0,
        0,4967,4968,1,0,0,0,4968,4969,5,1214,0,0,4969,5082,1,0,0,0,4970,
        4971,5,1095,0,0,4971,4972,5,1213,0,0,4972,4973,3,402,201,0,4973,
        4974,5,20,0,0,4974,4975,3,94,47,0,4975,4976,5,1214,0,0,4976,5082,
        1,0,0,0,4977,4979,3,472,236,0,4978,4977,1,0,0,0,4978,4979,1,0,0,
        0,4979,4980,1,0,0,0,4980,4981,5,992,0,0,4981,4982,5,1213,0,0,4982,
        4983,3,402,201,0,4983,4984,5,1208,0,0,4984,4985,3,164,82,0,4985,
        4986,5,1214,0,0,4986,5082,1,0,0,0,4987,4989,3,472,236,0,4988,4987,
        1,0,0,0,4988,4989,1,0,0,0,4989,4990,1,0,0,0,4990,4991,5,679,0,0,
        4991,4992,5,1213,0,0,4992,4993,3,402,201,0,4993,4994,5,1208,0,0,
        4994,4995,3,164,82,0,4995,4996,5,1214,0,0,4996,5082,1,0,0,0,4997,
        4999,3,472,236,0,4998,4997,1,0,0,0,4998,4999,1,0,0,0,4999,5000,1,
        0,0,0,5000,5001,5,996,0,0,5001,5002,5,1213,0,0,5002,5012,3,402,201,
        0,5003,5004,5,1208,0,0,5004,5010,3,164,82,0,5005,5008,5,1208,0,0,
        5006,5009,3,164,82,0,5007,5009,5,274,0,0,5008,5006,1,0,0,0,5008,
        5007,1,0,0,0,5009,5011,1,0,0,0,5010,5005,1,0,0,0,5010,5011,1,0,0,
        0,5011,5013,1,0,0,0,5012,5003,1,0,0,0,5012,5013,1,0,0,0,5013,5014,
        1,0,0,0,5014,5015,5,1214,0,0,5015,5082,1,0,0,0,5016,5018,3,472,236,
        0,5017,5016,1,0,0,0,5017,5018,1,0,0,0,5018,5019,1,0,0,0,5019,5020,
        5,993,0,0,5020,5021,5,1213,0,0,5021,5031,3,402,201,0,5022,5023,5,
        1208,0,0,5023,5029,3,164,82,0,5024,5027,5,1208,0,0,5025,5028,3,164,
        82,0,5026,5028,5,274,0,0,5027,5025,1,0,0,0,5027,5026,1,0,0,0,5028,
        5030,1,0,0,0,5029,5024,1,0,0,0,5029,5030,1,0,0,0,5030,5032,1,0,0,
        0,5031,5022,1,0,0,0,5031,5032,1,0,0,0,5032,5033,1,0,0,0,5033,5034,
        5,1214,0,0,5034,5082,1,0,0,0,5035,5037,3,472,236,0,5036,5035,1,0,
        0,0,5036,5037,1,0,0,0,5037,5038,1,0,0,0,5038,5039,5,994,0,0,5039,
        5040,5,1213,0,0,5040,5041,3,402,201,0,5041,5044,5,1208,0,0,5042,
        5045,3,164,82,0,5043,5045,5,274,0,0,5044,5042,1,0,0,0,5044,5043,
        1,0,0,0,5045,5046,1,0,0,0,5046,5047,5,1214,0,0,5047,5082,1,0,0,0,
        5048,5050,3,472,236,0,5049,5048,1,0,0,0,5049,5050,1,0,0,0,5050,5051,
        1,0,0,0,5051,5052,7,63,0,0,5052,5053,5,1213,0,0,5053,5059,3,402,
        201,0,5054,5057,5,1208,0,0,5055,5058,3,164,82,0,5056,5058,5,274,
        0,0,5057,5055,1,0,0,0,5057,5056,1,0,0,0,5058,5060,1,0,0,0,5059,5054,
        1,0,0,0,5059,5060,1,0,0,0,5060,5061,1,0,0,0,5061,5062,5,1214,0,0,
        5062,5082,1,0,0,0,5063,5065,3,472,236,0,5064,5063,1,0,0,0,5064,5065,
        1,0,0,0,5065,5066,1,0,0,0,5066,5067,7,64,0,0,5067,5068,5,1213,0,
        0,5068,5069,3,402,201,0,5069,5070,5,1214,0,0,5070,5082,1,0,0,0,5071,
        5073,3,472,236,0,5072,5071,1,0,0,0,5072,5073,1,0,0,0,5073,5074,1,
        0,0,0,5074,5075,7,65,0,0,5075,5076,5,1213,0,0,5076,5077,3,402,201,
        0,5077,5078,5,1208,0,0,5078,5079,3,402,201,0,5079,5080,5,1214,0,
        0,5080,5082,1,0,0,0,5081,4950,1,0,0,0,5081,4970,1,0,0,0,5081,4978,
        1,0,0,0,5081,4988,1,0,0,0,5081,4998,1,0,0,0,5081,5017,1,0,0,0,5081,
        5036,1,0,0,0,5081,5049,1,0,0,0,5081,5064,1,0,0,0,5081,5072,1,0,0,
        0,5082,447,1,0,0,0,5083,5084,7,66,0,0,5084,5085,5,1213,0,0,5085,
        5086,3,402,201,0,5086,5087,5,1214,0,0,5087,5134,1,0,0,0,5088,5090,
        3,472,236,0,5089,5088,1,0,0,0,5089,5090,1,0,0,0,5090,5091,1,0,0,
        0,5091,5092,5,732,0,0,5092,5093,5,1213,0,0,5093,5094,3,402,201,0,
        5094,5095,5,1214,0,0,5095,5134,1,0,0,0,5096,5098,3,472,236,0,5097,
        5096,1,0,0,0,5097,5098,1,0,0,0,5098,5099,1,0,0,0,5099,5100,5,792,
        0,0,5100,5101,5,1213,0,0,5101,5102,3,402,201,0,5102,5103,5,1208,
        0,0,5103,5104,3,164,82,0,5104,5105,5,1214,0,0,5105,5134,1,0,0,0,
        5106,5108,3,472,236,0,5107,5106,1,0,0,0,5107,5108,1,0,0,0,5108,5109,
        1,0,0,0,5109,5110,5,786,0,0,5110,5111,5,1213,0,0,5111,5112,3,402,
        201,0,5112,5113,5,1208,0,0,5113,5114,3,402,201,0,5114,5115,5,1214,
        0,0,5115,5134,1,0,0,0,5116,5118,3,472,236,0,5117,5116,1,0,0,0,5117,
        5118,1,0,0,0,5118,5119,1,0,0,0,5119,5120,7,67,0,0,5120,5121,5,1213,
        0,0,5121,5122,3,402,201,0,5122,5123,5,1208,0,0,5123,5124,3,402,201,
        0,5124,5125,5,1214,0,0,5125,5134,1,0,0,0,5126,5127,5,152,0,0,5127,
        5128,5,1213,0,0,5128,5129,7,68,0,0,5129,5130,5,164,0,0,5130,5131,
        3,402,201,0,5131,5132,5,1214,0,0,5132,5134,1,0,0,0,5133,5083,1,0,
        0,0,5133,5089,1,0,0,0,5133,5097,1,0,0,0,5133,5107,1,0,0,0,5133,5117,
        1,0,0,0,5133,5126,1,0,0,0,5134,449,1,0,0,0,5135,5136,7,69,0,0,5136,
        5137,5,1213,0,0,5137,5164,5,1214,0,0,5138,5139,7,69,0,0,5139,5140,
        5,1213,0,0,5140,5141,3,506,253,0,5141,5142,5,1214,0,0,5142,5164,
        1,0,0,0,5143,5144,5,181,0,0,5144,5145,5,1213,0,0,5145,5146,3,402,
        201,0,5146,5147,5,1214,0,0,5147,5164,1,0,0,0,5148,5149,5,182,0,0,
        5149,5150,5,1213,0,0,5150,5164,5,1214,0,0,5151,5152,5,182,0,0,5152,
        5153,5,1213,0,0,5153,5158,3,402,201,0,5154,5155,5,1208,0,0,5155,
        5157,3,402,201,0,5156,5154,1,0,0,0,5157,5160,1,0,0,0,5158,5156,1,
        0,0,0,5158,5159,1,0,0,0,5159,5161,1,0,0,0,5160,5158,1,0,0,0,5161,
        5162,5,1214,0,0,5162,5164,1,0,0,0,5163,5135,1,0,0,0,5163,5138,1,
        0,0,0,5163,5143,1,0,0,0,5163,5148,1,0,0,0,5163,5151,1,0,0,0,5164,
        451,1,0,0,0,5165,5167,3,472,236,0,5166,5165,1,0,0,0,5166,5167,1,
        0,0,0,5167,5168,1,0,0,0,5168,5169,7,70,0,0,5169,5170,5,1213,0,0,
        5170,5171,5,1214,0,0,5171,453,1,0,0,0,5172,5174,3,476,238,0,5173,
        5172,1,0,0,0,5173,5174,1,0,0,0,5174,5175,1,0,0,0,5175,5176,5,1145,
        0,0,5176,5177,5,1213,0,0,5177,5178,3,164,82,0,5178,5179,5,1214,0,
        0,5179,5209,1,0,0,0,5180,5182,3,476,238,0,5181,5180,1,0,0,0,5181,
        5182,1,0,0,0,5182,5183,1,0,0,0,5183,5184,5,1146,0,0,5184,5185,5,
        1213,0,0,5185,5186,3,164,82,0,5186,5187,5,1208,0,0,5187,5188,3,164,
        82,0,5188,5189,5,1208,0,0,5189,5190,3,164,82,0,5190,5191,5,1208,
        0,0,5191,5192,3,164,82,0,5192,5193,5,1208,0,0,5193,5194,3,164,82,
        0,5194,5195,5,1208,0,0,5195,5196,3,164,82,0,5196,5197,5,1214,0,0,
        5197,5209,1,0,0,0,5198,5200,3,476,238,0,5199,5198,1,0,0,0,5199,5200,
        1,0,0,0,5200,5201,1,0,0,0,5201,5202,5,1147,0,0,5202,5203,5,1213,
        0,0,5203,5204,3,164,82,0,5204,5205,5,1208,0,0,5205,5206,3,164,82,
        0,5206,5207,5,1214,0,0,5207,5209,1,0,0,0,5208,5173,1,0,0,0,5208,
        5181,1,0,0,0,5208,5199,1,0,0,0,5209,455,1,0,0,0,5210,5212,3,472,
        236,0,5211,5210,1,0,0,0,5211,5212,1,0,0,0,5212,5213,1,0,0,0,5213,
        5214,5,810,0,0,5214,5215,5,1213,0,0,5215,5216,3,402,201,0,5216,5217,
        5,1208,0,0,5217,5218,3,402,201,0,5218,5219,5,1214,0,0,5219,5233,
        1,0,0,0,5220,5222,3,472,236,0,5221,5220,1,0,0,0,5221,5222,1,0,0,
        0,5222,5223,1,0,0,0,5223,5224,5,811,0,0,5224,5225,5,1213,0,0,5225,
        5226,3,402,201,0,5226,5227,5,1208,0,0,5227,5228,3,402,201,0,5228,
        5229,5,1208,0,0,5229,5230,3,402,201,0,5230,5231,5,1214,0,0,5231,
        5233,1,0,0,0,5232,5211,1,0,0,0,5232,5221,1,0,0,0,5233,457,1,0,0,
        0,5234,5235,5,34,0,0,5235,5236,5,1213,0,0,5236,5237,3,402,201,0,
        5237,5238,5,1214,0,0,5238,5276,1,0,0,0,5239,5240,5,134,0,0,5240,
        5241,5,1213,0,0,5241,5242,3,402,201,0,5242,5243,5,1214,0,0,5243,
        5276,1,0,0,0,5244,5245,5,134,0,0,5245,5246,5,1213,0,0,5246,5247,
        3,402,201,0,5247,5248,5,1214,0,0,5248,5250,5,207,0,0,5249,5251,5,
        272,0,0,5250,5249,1,0,0,0,5250,5251,1,0,0,0,5251,5252,1,0,0,0,5252,
        5253,7,71,0,0,5253,5276,1,0,0,0,5254,5255,5,205,0,0,5255,5256,5,
        1213,0,0,5256,5257,3,402,201,0,5257,5258,5,1214,0,0,5258,5259,3,
        126,63,0,5259,5276,1,0,0,0,5260,5261,5,731,0,0,5261,5262,5,1213,
        0,0,5262,5263,3,402,201,0,5263,5264,5,1214,0,0,5264,5276,1,0,0,0,
        5265,5266,5,267,0,0,5266,5267,5,1213,0,0,5267,5268,3,402,201,0,5268,
        5269,5,1214,0,0,5269,5276,1,0,0,0,5270,5271,5,861,0,0,5271,5272,
        5,1213,0,0,5272,5273,3,402,201,0,5273,5274,5,1214,0,0,5274,5276,
        1,0,0,0,5275,5234,1,0,0,0,5275,5239,1,0,0,0,5275,5244,1,0,0,0,5275,
        5254,1,0,0,0,5275,5260,1,0,0,0,5275,5265,1,0,0,0,5275,5270,1,0,0,
        0,5276,459,1,0,0,0,5277,5279,3,472,236,0,5278,5277,1,0,0,0,5278,
        5279,1,0,0,0,5279,5280,1,0,0,0,5280,5281,5,882,0,0,5281,5282,5,1213,
        0,0,5282,5283,3,402,201,0,5283,5284,5,1208,0,0,5284,5292,3,402,201,
        0,5285,5286,5,1208,0,0,5286,5287,3,402,201,0,5287,5288,5,1208,0,
        0,5288,5289,3,402,201,0,5289,5290,5,1208,0,0,5290,5291,3,402,201,
        0,5291,5293,1,0,0,0,5292,5285,1,0,0,0,5292,5293,1,0,0,0,5293,5294,
        1,0,0,0,5294,5295,5,1214,0,0,5295,5367,1,0,0,0,5296,5298,3,472,236,
        0,5297,5296,1,0,0,0,5297,5298,1,0,0,0,5298,5299,1,0,0,0,5299,5300,
        5,880,0,0,5300,5301,5,1213,0,0,5301,5302,3,402,201,0,5302,5303,5,
        1208,0,0,5303,5313,3,402,201,0,5304,5305,5,1208,0,0,5305,5306,3,
        402,201,0,5306,5307,5,1208,0,0,5307,5308,3,402,201,0,5308,5309,5,
        1208,0,0,5309,5310,3,402,201,0,5310,5311,5,1208,0,0,5311,5312,3,
        402,201,0,5312,5314,1,0,0,0,5313,5304,1,0,0,0,5313,5314,1,0,0,0,
        5314,5315,1,0,0,0,5315,5316,5,1214,0,0,5316,5367,1,0,0,0,5317,5319,
        3,472,236,0,5318,5317,1,0,0,0,5318,5319,1,0,0,0,5319,5320,1,0,0,
        0,5320,5321,5,879,0,0,5321,5322,5,1213,0,0,5322,5323,3,402,201,0,
        5323,5324,5,1208,0,0,5324,5334,3,402,201,0,5325,5326,5,1208,0,0,
        5326,5327,3,402,201,0,5327,5328,5,1208,0,0,5328,5329,3,402,201,0,
        5329,5330,5,1208,0,0,5330,5331,3,402,201,0,5331,5332,5,1208,0,0,
        5332,5333,3,402,201,0,5333,5335,1,0,0,0,5334,5325,1,0,0,0,5334,5335,
        1,0,0,0,5335,5336,1,0,0,0,5336,5337,5,1214,0,0,5337,5367,1,0,0,0,
        5338,5340,3,472,236,0,5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,5341,
        1,0,0,0,5341,5342,5,881,0,0,5342,5343,5,1213,0,0,5343,5344,3,402,
        201,0,5344,5345,5,1208,0,0,5345,5348,3,402,201,0,5346,5347,5,1208,
        0,0,5347,5349,3,402,201,0,5348,5346,1,0,0,0,5348,5349,1,0,0,0,5349,
        5350,1,0,0,0,5350,5351,5,1214,0,0,5351,5367,1,0,0,0,5352,5354,3,
        472,236,0,5353,5352,1,0,0,0,5353,5354,1,0,0,0,5354,5355,1,0,0,0,
        5355,5356,5,1083,0,0,5356,5357,5,1213,0,0,5357,5358,3,402,201,0,
        5358,5359,5,1208,0,0,5359,5360,3,402,201,0,5360,5361,5,1208,0,0,
        5361,5362,3,402,201,0,5362,5363,5,1208,0,0,5363,5364,3,402,201,0,
        5364,5365,5,1214,0,0,5365,5367,1,0,0,0,5366,5278,1,0,0,0,5366,5297,
        1,0,0,0,5366,5318,1,0,0,0,5366,5339,1,0,0,0,5366,5353,1,0,0,0,5367,
        461,1,0,0,0,5368,5370,3,472,236,0,5369,5368,1,0,0,0,5369,5370,1,
        0,0,0,5370,5371,1,0,0,0,5371,5372,7,72,0,0,5372,5373,5,1213,0,0,
        5373,5374,3,402,201,0,5374,5375,5,1214,0,0,5375,5682,1,0,0,0,5376,
        5377,7,73,0,0,5377,5378,5,1213,0,0,5378,5379,3,402,201,0,5379,5380,
        5,1214,0,0,5380,5682,1,0,0,0,5381,5382,5,586,0,0,5382,5383,5,1213,
        0,0,5383,5384,3,402,201,0,5384,5385,5,1208,0,0,5385,5390,3,402,201,
        0,5386,5387,5,1208,0,0,5387,5389,3,402,201,0,5388,5386,1,0,0,0,5389,
        5392,1,0,0,0,5390,5388,1,0,0,0,5390,5391,1,0,0,0,5391,5393,1,0,0,
        0,5392,5390,1,0,0,0,5393,5394,5,1214,0,0,5394,5682,1,0,0,0,5395,
        5397,3,472,236,0,5396,5395,1,0,0,0,5396,5397,1,0,0,0,5397,5398,1,
        0,0,0,5398,5399,5,1073,0,0,5399,5400,5,1213,0,0,5400,5401,5,265,
        0,0,5401,5402,5,1098,0,0,5402,5403,5,437,0,0,5403,5404,5,1213,0,
        0,5404,5409,3,402,201,0,5405,5406,5,1208,0,0,5406,5408,3,402,201,
        0,5407,5405,1,0,0,0,5408,5411,1,0,0,0,5409,5407,1,0,0,0,5409,5410,
        1,0,0,0,5410,5412,1,0,0,0,5411,5409,1,0,0,0,5412,5413,5,1214,0,0,
        5413,5414,5,1208,0,0,5414,5415,3,164,82,0,5415,5416,5,1208,0,0,5416,
        5417,3,164,82,0,5417,5418,5,1214,0,0,5418,5682,1,0,0,0,5419,5421,
        3,472,236,0,5420,5419,1,0,0,0,5420,5421,1,0,0,0,5421,5422,1,0,0,
        0,5422,5423,5,1074,0,0,5423,5424,5,1213,0,0,5424,5425,3,402,201,
        0,5425,5426,5,1208,0,0,5426,5427,3,164,82,0,5427,5428,5,1208,0,0,
        5428,5429,3,164,82,0,5429,5430,5,1214,0,0,5430,5682,1,0,0,0,5431,
        5433,3,472,236,0,5432,5431,1,0,0,0,5432,5433,1,0,0,0,5433,5434,1,
        0,0,0,5434,5435,5,643,0,0,5435,5436,5,1213,0,0,5436,5437,3,402,201,
        0,5437,5438,5,1208,0,0,5438,5448,3,402,201,0,5439,5440,5,1208,0,
        0,5440,5441,3,170,85,0,5441,5442,5,1208,0,0,5442,5443,3,170,85,0,
        5443,5444,5,1208,0,0,5444,5445,3,170,85,0,5445,5446,5,1208,0,0,5446,
        5447,3,170,85,0,5447,5449,1,0,0,0,5448,5439,1,0,0,0,5448,5449,1,
        0,0,0,5449,5450,1,0,0,0,5450,5451,5,1214,0,0,5451,5682,1,0,0,0,5452,
        5453,5,192,0,0,5453,5454,5,1213,0,0,5454,5455,3,402,201,0,5455,5456,
        5,1208,0,0,5456,5457,3,402,201,0,5457,5458,5,1214,0,0,5458,5682,
        1,0,0,0,5459,5461,3,472,236,0,5460,5459,1,0,0,0,5460,5461,1,0,0,
        0,5461,5462,1,0,0,0,5462,5463,5,711,0,0,5463,5464,5,1213,0,0,5464,
        5465,3,402,201,0,5465,5466,5,1208,0,0,5466,5473,3,402,201,0,5467,
        5468,5,1208,0,0,5468,5471,3,402,201,0,5469,5470,5,1208,0,0,5470,
        5472,3,402,201,0,5471,5469,1,0,0,0,5471,5472,1,0,0,0,5472,5474,1,
        0,0,0,5473,5467,1,0,0,0,5473,5474,1,0,0,0,5474,5475,1,0,0,0,5475,
        5476,5,1214,0,0,5476,5682,1,0,0,0,5477,5479,3,472,236,0,5478,5477,
        1,0,0,0,5478,5479,1,0,0,0,5479,5480,1,0,0,0,5480,5481,7,74,0,0,5481,
        5482,5,1213,0,0,5482,5483,3,402,201,0,5483,5484,5,1208,0,0,5484,
        5485,3,402,201,0,5485,5486,5,1214,0,0,5486,5682,1,0,0,0,5487,5488,
        5,743,0,0,5488,5489,5,1213,0,0,5489,5490,3,402,201,0,5490,5491,5,
        1208,0,0,5491,5494,3,402,201,0,5492,5493,5,1208,0,0,5493,5495,3,
        402,201,0,5494,5492,1,0,0,0,5494,5495,1,0,0,0,5495,5496,1,0,0,0,
        5496,5497,5,1214,0,0,5497,5682,1,0,0,0,5498,5499,7,75,0,0,5499,5500,
        5,1213,0,0,5500,5501,3,402,201,0,5501,5502,5,1214,0,0,5502,5682,
        1,0,0,0,5503,5505,3,472,236,0,5504,5503,1,0,0,0,5504,5505,1,0,0,
        0,5505,5506,1,0,0,0,5506,5507,7,76,0,0,5507,5508,5,1213,0,0,5508,
        5509,3,402,201,0,5509,5510,5,1208,0,0,5510,5513,3,402,201,0,5511,
        5512,5,1208,0,0,5512,5514,3,402,201,0,5513,5511,1,0,0,0,5513,5514,
        1,0,0,0,5514,5515,1,0,0,0,5515,5516,5,1214,0,0,5516,5682,1,0,0,0,
        5517,5519,3,472,236,0,5518,5517,1,0,0,0,5518,5519,1,0,0,0,5519,5520,
        1,0,0,0,5520,5521,7,77,0,0,5521,5522,5,1213,0,0,5522,5525,3,402,
        201,0,5523,5524,5,1208,0,0,5524,5526,3,402,201,0,5525,5523,1,0,0,
        0,5525,5526,1,0,0,0,5526,5527,1,0,0,0,5527,5528,5,1214,0,0,5528,
        5682,1,0,0,0,5529,5531,3,472,236,0,5530,5529,1,0,0,0,5530,5531,1,
        0,0,0,5531,5532,1,0,0,0,5532,5533,5,793,0,0,5533,5534,5,1213,0,0,
        5534,5535,3,402,201,0,5535,5536,5,1208,0,0,5536,5537,3,402,201,0,
        5537,5538,5,1208,0,0,5538,5541,3,402,201,0,5539,5540,5,1208,0,0,
        5540,5542,3,402,201,0,5541,5539,1,0,0,0,5541,5542,1,0,0,0,5542,5543,
        1,0,0,0,5543,5544,5,1214,0,0,5544,5682,1,0,0,0,5545,5547,3,472,236,
        0,5546,5545,1,0,0,0,5546,5547,1,0,0,0,5547,5548,1,0,0,0,5548,5549,
        5,812,0,0,5549,5550,5,1213,0,0,5550,5551,3,402,201,0,5551,5552,5,
        1208,0,0,5552,5563,3,402,201,0,5553,5554,5,1208,0,0,5554,5561,3,
        402,201,0,5555,5556,5,1208,0,0,5556,5559,3,402,201,0,5557,5558,5,
        1208,0,0,5558,5560,3,402,201,0,5559,5557,1,0,0,0,5559,5560,1,0,0,
        0,5560,5562,1,0,0,0,5561,5555,1,0,0,0,5561,5562,1,0,0,0,5562,5564,
        1,0,0,0,5563,5553,1,0,0,0,5563,5564,1,0,0,0,5564,5565,1,0,0,0,5565,
        5566,5,1214,0,0,5566,5682,1,0,0,0,5567,5569,3,472,236,0,5568,5567,
        1,0,0,0,5568,5569,1,0,0,0,5569,5570,1,0,0,0,5570,5571,5,830,0,0,
        5571,5572,5,1213,0,0,5572,5573,3,402,201,0,5573,5574,5,1208,0,0,
        5574,5577,3,402,201,0,5575,5576,5,1208,0,0,5576,5578,3,402,201,0,
        5577,5575,1,0,0,0,5577,5578,1,0,0,0,5578,5579,1,0,0,0,5579,5580,
        5,1214,0,0,5580,5682,1,0,0,0,5581,5583,3,472,236,0,5582,5581,1,0,
        0,0,5582,5583,1,0,0,0,5583,5584,1,0,0,0,5584,5585,5,831,0,0,5585,
        5586,5,1213,0,0,5586,5587,3,402,201,0,5587,5588,5,1208,0,0,5588,
        5589,3,402,201,0,5589,5590,5,1208,0,0,5590,5591,3,402,201,0,5591,
        5592,5,1214,0,0,5592,5682,1,0,0,0,5593,5594,5,304,0,0,5594,5595,
        5,1213,0,0,5595,5596,3,402,201,0,5596,5597,5,190,0,0,5597,5598,3,
        402,201,0,5598,5599,5,1214,0,0,5599,5682,1,0,0,0,5600,5602,3,472,
        236,0,5601,5600,1,0,0,0,5601,5602,1,0,0,0,5602,5603,1,0,0,0,5603,
        5604,5,943,0,0,5604,5605,5,1213,0,0,5605,5612,3,402,201,0,5606,5607,
        5,1208,0,0,5607,5610,3,402,201,0,5608,5609,5,1208,0,0,5609,5611,
        3,402,201,0,5610,5608,1,0,0,0,5610,5611,1,0,0,0,5611,5613,1,0,0,
        0,5612,5606,1,0,0,0,5612,5613,1,0,0,0,5613,5614,1,0,0,0,5614,5615,
        5,1214,0,0,5615,5682,1,0,0,0,5616,5618,3,472,236,0,5617,5616,1,0,
        0,0,5617,5618,1,0,0,0,5618,5619,1,0,0,0,5619,5620,5,1087,0,0,5620,
        5621,5,1213,0,0,5621,5622,3,402,201,0,5622,5623,5,1208,0,0,5623,
        5624,3,402,201,0,5624,5625,5,1208,0,0,5625,5626,3,402,201,0,5626,
        5627,5,1214,0,0,5627,5628,5,352,0,0,5628,5629,5,1213,0,0,5629,5630,
        3,592,296,0,5630,5631,5,1208,0,0,5631,5632,3,592,296,0,5632,5633,
        5,1208,0,0,5633,5634,3,592,296,0,5634,5635,5,1214,0,0,5635,5682,
        1,0,0,0,5636,5637,5,402,0,0,5637,5638,5,1213,0,0,5638,5639,3,402,
        201,0,5639,5640,5,164,0,0,5640,5643,3,402,201,0,5641,5642,7,78,0,
        0,5642,5644,3,402,201,0,5643,5641,1,0,0,0,5643,5644,1,0,0,0,5644,
        5645,1,0,0,0,5645,5646,5,1214,0,0,5646,5682,1,0,0,0,5647,5648,7,
        79,0,0,5648,5649,5,1213,0,0,5649,5650,3,402,201,0,5650,5651,5,1208,
        0,0,5651,5654,3,402,201,0,5652,5653,7,78,0,0,5653,5655,3,402,201,
        0,5654,5652,1,0,0,0,5654,5655,1,0,0,0,5655,5656,1,0,0,0,5656,5657,
        5,1214,0,0,5657,5682,1,0,0,0,5658,5659,7,80,0,0,5659,5660,5,1213,
        0,0,5660,5661,3,402,201,0,5661,5662,5,457,0,0,5662,5665,3,480,240,
        0,5663,5664,5,474,0,0,5664,5666,5,137,0,0,5665,5663,1,0,0,0,5665,
        5666,1,0,0,0,5666,5667,1,0,0,0,5667,5668,5,1214,0,0,5668,5682,1,
        0,0,0,5669,5670,5,436,0,0,5670,5676,5,1213,0,0,5671,5673,7,81,0,
        0,5672,5674,3,402,201,0,5673,5672,1,0,0,0,5673,5674,1,0,0,0,5674,
        5675,1,0,0,0,5675,5677,5,164,0,0,5676,5671,1,0,0,0,5676,5677,1,0,
        0,0,5677,5678,1,0,0,0,5678,5679,3,402,201,0,5679,5680,5,1214,0,0,
        5680,5682,1,0,0,0,5681,5369,1,0,0,0,5681,5376,1,0,0,0,5681,5381,
        1,0,0,0,5681,5396,1,0,0,0,5681,5420,1,0,0,0,5681,5432,1,0,0,0,5681,
        5452,1,0,0,0,5681,5460,1,0,0,0,5681,5478,1,0,0,0,5681,5487,1,0,0,
        0,5681,5498,1,0,0,0,5681,5504,1,0,0,0,5681,5518,1,0,0,0,5681,5530,
        1,0,0,0,5681,5546,1,0,0,0,5681,5568,1,0,0,0,5681,5582,1,0,0,0,5681,
        5593,1,0,0,0,5681,5601,1,0,0,0,5681,5617,1,0,0,0,5681,5636,1,0,0,
        0,5681,5647,1,0,0,0,5681,5658,1,0,0,0,5681,5669,1,0,0,0,5682,463,
        1,0,0,0,5683,5685,3,472,236,0,5684,5683,1,0,0,0,5684,5685,1,0,0,
        0,5685,5686,1,0,0,0,5686,5687,5,1174,0,0,5687,5688,5,1213,0,0,5688,
        5689,3,402,201,0,5689,5691,5,1214,0,0,5690,5692,3,484,242,0,5691,
        5690,1,0,0,0,5691,5692,1,0,0,0,5692,5806,1,0,0,0,5693,5695,3,472,
        236,0,5694,5693,1,0,0,0,5694,5695,1,0,0,0,5695,5696,1,0,0,0,5696,
        5697,5,1175,0,0,5697,5698,5,1213,0,0,5698,5701,3,402,201,0,5699,
        5700,5,1208,0,0,5700,5702,3,164,82,0,5701,5699,1,0,0,0,5701,5702,
        1,0,0,0,5702,5703,1,0,0,0,5703,5704,5,1214,0,0,5704,5806,1,0,0,0,
        5705,5707,3,472,236,0,5706,5705,1,0,0,0,5706,5707,1,0,0,0,5707,5708,
        1,0,0,0,5708,5709,5,1075,0,0,5709,5710,5,1213,0,0,5710,5711,3,402,
        201,0,5711,5712,5,1214,0,0,5712,5806,1,0,0,0,5713,5715,3,472,236,
        0,5714,5713,1,0,0,0,5714,5715,1,0,0,0,5715,5716,1,0,0,0,5716,5717,
        5,1176,0,0,5717,5718,5,1213,0,0,5718,5721,3,402,201,0,5719,5720,
        5,1208,0,0,5720,5722,3,170,85,0,5721,5719,1,0,0,0,5721,5722,1,0,
        0,0,5722,5723,1,0,0,0,5723,5725,5,1214,0,0,5724,5726,3,484,242,0,
        5725,5724,1,0,0,0,5725,5726,1,0,0,0,5726,5806,1,0,0,0,5727,5729,
        3,472,236,0,5728,5727,1,0,0,0,5728,5729,1,0,0,0,5729,5730,1,0,0,
        0,5730,5731,5,1177,0,0,5731,5732,5,1213,0,0,5732,5733,3,402,201,
        0,5733,5734,5,1208,0,0,5734,5735,3,170,85,0,5735,5736,5,1214,0,0,
        5736,5806,1,0,0,0,5737,5739,3,472,236,0,5738,5737,1,0,0,0,5738,5739,
        1,0,0,0,5739,5740,1,0,0,0,5740,5741,5,1178,0,0,5741,5742,5,1213,
        0,0,5742,5743,3,402,201,0,5743,5744,5,1214,0,0,5744,5806,1,0,0,0,
        5745,5746,5,1179,0,0,5746,5747,5,1213,0,0,5747,5748,3,402,201,0,
        5748,5749,5,1208,0,0,5749,5750,3,402,201,0,5750,5751,5,20,0,0,5751,
        5752,3,94,47,0,5752,5753,5,1214,0,0,5753,5806,1,0,0,0,5754,5755,
        5,1180,0,0,5755,5756,5,1213,0,0,5756,5757,3,402,201,0,5757,5758,
        5,1214,0,0,5758,5806,1,0,0,0,5759,5761,3,472,236,0,5760,5759,1,0,
        0,0,5760,5761,1,0,0,0,5761,5762,1,0,0,0,5762,5763,5,1181,0,0,5763,
        5764,5,1213,0,0,5764,5773,3,402,201,0,5765,5766,5,1208,0,0,5766,
        5767,3,164,82,0,5767,5768,5,1208,0,0,5768,5771,3,164,82,0,5769,5770,
        5,1208,0,0,5770,5772,3,164,82,0,5771,5769,1,0,0,0,5771,5772,1,0,
        0,0,5772,5774,1,0,0,0,5773,5765,1,0,0,0,5773,5774,1,0,0,0,5774,5775,
        1,0,0,0,5775,5776,5,1214,0,0,5776,5806,1,0,0,0,5777,5778,5,721,0,
        0,5778,5779,5,1213,0,0,5779,5784,3,520,260,0,5780,5781,5,1208,0,
        0,5781,5783,3,520,260,0,5782,5780,1,0,0,0,5783,5786,1,0,0,0,5784,
        5782,1,0,0,0,5784,5785,1,0,0,0,5785,5787,1,0,0,0,5786,5784,1,0,0,
        0,5787,5789,5,1214,0,0,5788,5790,3,484,242,0,5789,5788,1,0,0,0,5789,
        5790,1,0,0,0,5790,5806,1,0,0,0,5791,5792,5,722,0,0,5792,5793,5,1213,
        0,0,5793,5798,3,520,260,0,5794,5795,5,1208,0,0,5795,5797,3,520,260,
        0,5796,5794,1,0,0,0,5797,5800,1,0,0,0,5798,5796,1,0,0,0,5798,5799,
        1,0,0,0,5799,5801,1,0,0,0,5800,5798,1,0,0,0,5801,5803,5,1214,0,0,
        5802,5804,3,484,242,0,5803,5802,1,0,0,0,5803,5804,1,0,0,0,5804,5806,
        1,0,0,0,5805,5684,1,0,0,0,5805,5694,1,0,0,0,5805,5706,1,0,0,0,5805,
        5714,1,0,0,0,5805,5728,1,0,0,0,5805,5738,1,0,0,0,5805,5745,1,0,0,
        0,5805,5754,1,0,0,0,5805,5760,1,0,0,0,5805,5777,1,0,0,0,5805,5791,
        1,0,0,0,5806,465,1,0,0,0,5807,5808,5,1068,0,0,5808,5809,5,1213,0,
        0,5809,5810,3,402,201,0,5810,5811,5,1214,0,0,5811,6055,1,0,0,0,5812,
        5814,3,472,236,0,5813,5812,1,0,0,0,5813,5814,1,0,0,0,5814,5815,1,
        0,0,0,5815,5816,5,1075,0,0,5816,5817,5,1213,0,0,5817,5818,3,402,
        201,0,5818,5819,5,1214,0,0,5819,6055,1,0,0,0,5820,5821,5,1054,0,
        0,5821,5822,5,1213,0,0,5822,5824,3,164,82,0,5823,5825,3,522,261,
        0,5824,5823,1,0,0,0,5824,5825,1,0,0,0,5825,5827,1,0,0,0,5826,5828,
        3,546,273,0,5827,5826,1,0,0,0,5827,5828,1,0,0,0,5828,5830,1,0,0,
        0,5829,5831,3,544,272,0,5830,5829,1,0,0,0,5830,5831,1,0,0,0,5831,
        5832,1,0,0,0,5832,5833,5,1214,0,0,5833,6055,1,0,0,0,5834,5835,5,
        1056,0,0,5835,5836,5,1213,0,0,5836,5837,7,82,0,0,5837,5840,3,402,
        201,0,5838,5839,5,20,0,0,5839,5841,3,94,47,0,5840,5838,1,0,0,0,5840,
        5841,1,0,0,0,5841,5843,1,0,0,0,5842,5844,3,542,271,0,5843,5842,1,
        0,0,0,5843,5844,1,0,0,0,5844,5850,1,0,0,0,5845,5847,5,474,0,0,5846,
        5848,5,268,0,0,5847,5846,1,0,0,0,5847,5848,1,0,0,0,5848,5849,1,0,
        0,0,5849,5851,5,554,0,0,5850,5845,1,0,0,0,5850,5851,1,0,0,0,5851,
        5854,1,0,0,0,5852,5853,5,1023,0,0,5853,5855,3,164,82,0,5854,5852,
        1,0,0,0,5854,5855,1,0,0,0,5855,5858,1,0,0,0,5856,5857,7,83,0,0,5857,
        5859,5,1047,0,0,5858,5856,1,0,0,0,5858,5859,1,0,0,0,5859,5866,1,
        0,0,0,5860,5861,5,268,0,0,5861,5867,5,704,0,0,5862,5863,5,704,0,
        0,5863,5864,5,927,0,0,5864,5865,5,1224,0,0,5865,5867,3,170,85,0,
        5866,5860,1,0,0,0,5866,5862,1,0,0,0,5866,5867,1,0,0,0,5867,5868,
        1,0,0,0,5868,5869,5,1214,0,0,5869,6055,1,0,0,0,5870,5871,5,1048,
        0,0,5871,5872,5,1213,0,0,5872,5874,3,402,201,0,5873,5875,3,546,273,
        0,5874,5873,1,0,0,0,5874,5875,1,0,0,0,5875,5876,1,0,0,0,5876,5877,
        5,1214,0,0,5877,6055,1,0,0,0,5878,5879,5,1049,0,0,5879,5880,5,1213,
        0,0,5880,5881,5,789,0,0,5881,5884,3,190,95,0,5882,5883,5,1208,0,
        0,5883,5885,3,534,267,0,5884,5882,1,0,0,0,5884,5885,1,0,0,0,5885,
        5888,1,0,0,0,5886,5887,5,1208,0,0,5887,5889,3,526,263,0,5888,5886,
        1,0,0,0,5888,5889,1,0,0,0,5889,5892,1,0,0,0,5890,5891,5,1208,0,0,
        5891,5893,3,532,266,0,5892,5890,1,0,0,0,5892,5893,1,0,0,0,5893,5895,
        1,0,0,0,5894,5896,3,546,273,0,5895,5894,1,0,0,0,5895,5896,1,0,0,
        0,5896,5897,1,0,0,0,5897,5898,5,1214,0,0,5898,6055,1,0,0,0,5899,
        5900,5,1050,0,0,5900,5902,5,1213,0,0,5901,5903,3,534,267,0,5902,
        5901,1,0,0,0,5902,5903,1,0,0,0,5903,5912,1,0,0,0,5904,5909,3,530,
        265,0,5905,5906,5,1208,0,0,5906,5908,3,530,265,0,5907,5905,1,0,0,
        0,5908,5911,1,0,0,0,5909,5907,1,0,0,0,5909,5910,1,0,0,0,5910,5913,
        1,0,0,0,5911,5909,1,0,0,0,5912,5904,1,0,0,0,5912,5913,1,0,0,0,5913,
        5915,1,0,0,0,5914,5916,3,548,274,0,5915,5914,1,0,0,0,5915,5916,1,
        0,0,0,5916,5918,1,0,0,0,5917,5919,3,546,273,0,5918,5917,1,0,0,0,
        5918,5919,1,0,0,0,5919,5920,1,0,0,0,5920,6055,5,1214,0,0,5921,5922,
        5,1046,0,0,5922,5923,5,1213,0,0,5923,5928,3,402,201,0,5924,5925,
        5,1208,0,0,5925,5927,3,402,201,0,5926,5924,1,0,0,0,5927,5930,1,0,
        0,0,5928,5926,1,0,0,0,5928,5929,1,0,0,0,5929,5932,1,0,0,0,5930,5928,
        1,0,0,0,5931,5933,3,546,273,0,5932,5931,1,0,0,0,5932,5933,1,0,0,
        0,5933,5934,1,0,0,0,5934,5935,5,1214,0,0,5935,6055,1,0,0,0,5936,
        5937,5,1045,0,0,5937,5938,5,1213,0,0,5938,5940,3,402,201,0,5939,
        5941,3,546,273,0,5940,5939,1,0,0,0,5940,5941,1,0,0,0,5941,5942,1,
        0,0,0,5942,5943,5,1214,0,0,5943,6055,1,0,0,0,5944,5945,5,1053,0,
        0,5945,5946,5,1213,0,0,5946,5947,5,789,0,0,5947,5950,3,190,95,0,
        5948,5949,5,1208,0,0,5949,5951,3,402,201,0,5950,5948,1,0,0,0,5950,
        5951,1,0,0,0,5951,5953,1,0,0,0,5952,5954,3,546,273,0,5953,5952,1,
        0,0,0,5953,5954,1,0,0,0,5954,5955,1,0,0,0,5955,5956,5,1214,0,0,5956,
        6055,1,0,0,0,5957,5958,5,1058,0,0,5958,5959,5,1213,0,0,5959,5961,
        3,402,201,0,5960,5962,3,546,273,0,5961,5960,1,0,0,0,5961,5962,1,
        0,0,0,5962,5963,1,0,0,0,5963,5964,5,1214,0,0,5964,6055,1,0,0,0,5965,
        5966,5,1052,0,0,5966,5967,5,1213,0,0,5967,5968,7,82,0,0,5968,5969,
        3,402,201,0,5969,5970,7,84,0,0,5970,5971,5,1037,0,0,5971,5972,5,
        1214,0,0,5972,6055,1,0,0,0,5973,5974,5,1060,0,0,5974,5975,5,1213,
        0,0,5975,5976,7,85,0,0,5976,5977,3,402,201,0,5977,5978,5,491,0,0,
        5978,5979,5,426,0,0,5979,5980,5,1055,0,0,5980,5981,5,459,0,0,5981,
        5986,3,402,201,0,5982,5983,5,790,0,0,5983,5987,3,164,82,0,5984,5985,
        5,268,0,0,5985,5987,5,790,0,0,5986,5982,1,0,0,0,5986,5984,1,0,0,
        0,5986,5987,1,0,0,0,5987,5990,1,0,0,0,5988,5989,5,646,0,0,5989,5991,
        3,402,201,0,5990,5988,1,0,0,0,5990,5991,1,0,0,0,5991,5992,1,0,0,
        0,5992,5993,5,1214,0,0,5993,6055,1,0,0,0,5994,5995,5,1043,0,0,5995,
        5996,5,1213,0,0,5996,6007,3,402,201,0,5997,5998,5,291,0,0,5998,5999,
        5,42,0,0,5999,6004,3,394,197,0,6000,6001,5,1208,0,0,6001,6003,3,
        394,197,0,6002,6000,1,0,0,0,6003,6006,1,0,0,0,6004,6002,1,0,0,0,
        6004,6005,1,0,0,0,6005,6008,1,0,0,0,6006,6004,1,0,0,0,6007,5997,
        1,0,0,0,6007,6008,1,0,0,0,6008,6010,1,0,0,0,6009,6011,3,546,273,
        0,6010,6009,1,0,0,0,6010,6011,1,0,0,0,6011,6012,1,0,0,0,6012,6013,
        5,1214,0,0,6013,6055,1,0,0,0,6014,6015,5,1103,0,0,6015,6016,5,1213,
        0,0,6016,6017,3,402,201,0,6017,6018,5,1208,0,0,6018,6019,3,402,201,
        0,6019,6020,5,1208,0,0,6020,6021,3,402,201,0,6021,6022,5,1208,0,
        0,6022,6027,3,402,201,0,6023,6024,5,1208,0,0,6024,6026,3,402,201,
        0,6025,6023,1,0,0,0,6026,6029,1,0,0,0,6027,6025,1,0,0,0,6027,6028,
        1,0,0,0,6028,6030,1,0,0,0,6029,6027,1,0,0,0,6030,6031,5,1214,0,0,
        6031,6055,1,0,0,0,6032,6033,3,474,237,0,6033,6034,5,1101,0,0,6034,
        6035,5,1213,0,0,6035,6036,3,402,201,0,6036,6037,5,1208,0,0,6037,
        6038,3,402,201,0,6038,6039,5,1208,0,0,6039,6040,3,402,201,0,6040,
        6041,5,1208,0,0,6041,6042,3,402,201,0,6042,6043,5,1214,0,0,6043,
        6055,1,0,0,0,6044,6045,3,474,237,0,6045,6046,5,1102,0,0,6046,6047,
        5,1213,0,0,6047,6048,3,402,201,0,6048,6049,5,1208,0,0,6049,6050,
        3,402,201,0,6050,6051,5,1208,0,0,6051,6052,3,402,201,0,6052,6053,
        5,1214,0,0,6053,6055,1,0,0,0,6054,5807,1,0,0,0,6054,5813,1,0,0,0,
        6054,5820,1,0,0,0,6054,5834,1,0,0,0,6054,5870,1,0,0,0,6054,5878,
        1,0,0,0,6054,5899,1,0,0,0,6054,5921,1,0,0,0,6054,5936,1,0,0,0,6054,
        5944,1,0,0,0,6054,5957,1,0,0,0,6054,5965,1,0,0,0,6054,5973,1,0,0,
        0,6054,5994,1,0,0,0,6054,6014,1,0,0,0,6054,6032,1,0,0,0,6054,6044,
        1,0,0,0,6055,467,1,0,0,0,6056,6057,3,202,101,0,6057,6058,5,1213,
        0,0,6058,6063,3,402,201,0,6059,6060,5,1208,0,0,6060,6062,3,402,201,
        0,6061,6059,1,0,0,0,6062,6065,1,0,0,0,6063,6061,1,0,0,0,6063,6064,
        1,0,0,0,6064,6066,1,0,0,0,6065,6063,1,0,0,0,6066,6069,5,1214,0,0,
        6067,6070,3,484,242,0,6068,6070,3,508,254,0,6069,6067,1,0,0,0,6069,
        6068,1,0,0,0,6069,6070,1,0,0,0,6070,6079,1,0,0,0,6071,6072,3,202,
        101,0,6072,6073,5,1213,0,0,6073,6076,5,1214,0,0,6074,6077,3,484,
        242,0,6075,6077,3,508,254,0,6076,6074,1,0,0,0,6076,6075,1,0,0,0,
        6076,6077,1,0,0,0,6077,6079,1,0,0,0,6078,6056,1,0,0,0,6078,6071,
        1,0,0,0,6079,469,1,0,0,0,6080,6081,5,48,0,0,6081,6082,5,1213,0,0,
        6082,6087,3,400,200,0,6083,6084,5,1208,0,0,6084,6086,3,400,200,0,
        6085,6083,1,0,0,0,6086,6089,1,0,0,0,6087,6085,1,0,0,0,6087,6088,
        1,0,0,0,6088,6092,1,0,0,0,6089,6087,1,0,0,0,6090,6091,5,1208,0,0,
        6091,6093,3,492,246,0,6092,6090,1,0,0,0,6092,6093,1,0,0,0,6093,6094,
        1,0,0,0,6094,6095,5,1214,0,0,6095,6108,1,0,0,0,6096,6097,5,320,0,
        0,6097,6098,5,1213,0,0,6098,6099,3,402,201,0,6099,6100,5,35,0,0,
        6100,6103,3,494,247,0,6101,6102,5,1208,0,0,6102,6104,3,504,252,0,
        6103,6101,1,0,0,0,6103,6104,1,0,0,0,6104,6105,1,0,0,0,6105,6106,
        5,1214,0,0,6106,6108,1,0,0,0,6107,6080,1,0,0,0,6107,6096,1,0,0,0,
        6108,471,1,0,0,0,6109,6110,5,1091,0,0,6110,6111,5,1209,0,0,6111,
        473,1,0,0,0,6112,6113,5,1092,0,0,6113,6114,5,1209,0,0,6114,475,1,
        0,0,0,6115,6116,5,1088,0,0,6116,6117,5,1209,0,0,6117,477,1,0,0,0,
        6118,6119,5,1090,0,0,6119,6120,5,1209,0,0,6120,479,1,0,0,0,6121,
        6122,7,86,0,0,6122,481,1,0,0,0,6123,6124,5,1213,0,0,6124,6129,3,
        486,243,0,6125,6126,5,1208,0,0,6126,6128,3,486,243,0,6127,6125,1,
        0,0,0,6128,6131,1,0,0,0,6129,6127,1,0,0,0,6129,6130,1,0,0,0,6130,
        6132,1,0,0,0,6131,6129,1,0,0,0,6132,6133,5,1214,0,0,6133,483,1,0,
        0,0,6134,6135,5,352,0,0,6135,6140,3,94,47,0,6136,6137,5,352,0,0,
        6137,6138,5,944,0,0,6138,6140,3,190,95,0,6139,6134,1,0,0,0,6139,
        6136,1,0,0,0,6140,485,1,0,0,0,6141,6146,3,490,245,0,6142,6146,3,
        138,69,0,6143,6146,3,134,67,0,6144,6146,3,136,68,0,6145,6141,1,0,
        0,0,6145,6142,1,0,0,0,6145,6143,1,0,0,0,6145,6144,1,0,0,0,6146,487,
        1,0,0,0,6147,6153,5,1213,0,0,6148,6149,3,490,245,0,6149,6150,5,1208,
        0,0,6150,6152,1,0,0,0,6151,6148,1,0,0,0,6152,6155,1,0,0,0,6153,6151,
        1,0,0,0,6153,6154,1,0,0,0,6154,6156,1,0,0,0,6155,6153,1,0,0,0,6156,
        6164,3,94,47,0,6157,6160,5,1208,0,0,6158,6161,3,490,245,0,6159,6161,
        3,134,67,0,6160,6158,1,0,0,0,6160,6159,1,0,0,0,6161,6163,1,0,0,0,
        6162,6157,1,0,0,0,6163,6166,1,0,0,0,6164,6162,1,0,0,0,6164,6165,
        1,0,0,0,6165,6167,1,0,0,0,6166,6164,1,0,0,0,6167,6168,5,1214,0,0,
        6168,489,1,0,0,0,6169,6173,3,140,70,0,6170,6173,3,144,72,0,6171,
        6173,3,142,71,0,6172,6169,1,0,0,0,6172,6170,1,0,0,0,6172,6171,1,
        0,0,0,6173,491,1,0,0,0,6174,6175,5,268,0,0,6175,6178,5,47,0,0,6176,
        6177,7,87,0,0,6177,6179,5,1016,0,0,6178,6176,1,0,0,0,6178,6179,1,
        0,0,0,6179,6182,1,0,0,0,6180,6182,5,1016,0,0,6181,6174,1,0,0,0,6181,
        6180,1,0,0,0,6182,493,1,0,0,0,6183,6187,3,498,249,0,6184,6187,3,
        500,250,0,6185,6187,3,496,248,0,6186,6183,1,0,0,0,6186,6184,1,0,
        0,0,6186,6185,1,0,0,0,6187,495,1,0,0,0,6188,6195,3,502,251,0,6189,
        6192,5,1219,0,0,6190,6191,5,16,0,0,6191,6193,3,402,201,0,6192,6190,
        1,0,0,0,6192,6193,1,0,0,0,6193,6195,1,0,0,0,6194,6188,1,0,0,0,6194,
        6189,1,0,0,0,6195,6200,1,0,0,0,6196,6197,5,1208,0,0,6197,6199,3,
        502,251,0,6198,6196,1,0,0,0,6199,6202,1,0,0,0,6200,6198,1,0,0,0,
        6200,6201,1,0,0,0,6201,6203,1,0,0,0,6202,6200,1,0,0,0,6203,6204,
        5,1208,0,0,6204,6205,3,498,249,0,6205,497,1,0,0,0,6206,6207,3,402,
        201,0,6207,6210,5,16,0,0,6208,6211,3,402,201,0,6209,6211,5,1219,
        0,0,6210,6208,1,0,0,0,6210,6209,1,0,0,0,6211,6214,1,0,0,0,6212,6213,
        5,129,0,0,6213,6215,3,402,201,0,6214,6212,1,0,0,0,6214,6215,1,0,
        0,0,6215,499,1,0,0,0,6216,6217,5,1219,0,0,6217,6220,5,16,0,0,6218,
        6221,3,402,201,0,6219,6221,5,1219,0,0,6220,6218,1,0,0,0,6220,6219,
        1,0,0,0,6221,501,1,0,0,0,6222,6223,3,402,201,0,6223,6224,5,16,0,
        0,6224,6225,3,402,201,0,6225,6228,1,0,0,0,6226,6227,5,129,0,0,6227,
        6229,3,402,201,0,6228,6226,1,0,0,0,6228,6229,1,0,0,0,6229,503,1,
        0,0,0,6230,6231,5,268,0,0,6231,6234,5,873,0,0,6232,6233,7,87,0,0,
        6233,6235,5,1016,0,0,6234,6232,1,0,0,0,6234,6235,1,0,0,0,6235,6238,
        1,0,0,0,6236,6238,5,1016,0,0,6237,6230,1,0,0,0,6237,6236,1,0,0,0,
        6238,505,1,0,0,0,6239,6248,3,402,201,0,6240,6241,5,236,0,0,6241,
        6242,5,1224,0,0,6242,6243,3,164,82,0,6243,6244,5,577,0,0,6244,6245,
        5,457,0,0,6245,6246,5,1224,0,0,6246,6247,3,164,82,0,6247,6249,1,
        0,0,0,6248,6240,1,0,0,0,6248,6249,1,0,0,0,6249,6259,1,0,0,0,6250,
        6251,3,402,201,0,6251,6252,5,236,0,0,6252,6253,5,1224,0,0,6253,6254,
        3,164,82,0,6254,6259,1,0,0,0,6255,6256,5,236,0,0,6256,6257,5,1224,
        0,0,6257,6259,3,164,82,0,6258,6239,1,0,0,0,6258,6250,1,0,0,0,6258,
        6255,1,0,0,0,6259,507,1,0,0,0,6260,6261,5,295,0,0,6261,6263,5,1213,
        0,0,6262,6264,3,514,257,0,6263,6262,1,0,0,0,6263,6264,1,0,0,0,6264,
        6266,1,0,0,0,6265,6267,3,516,258,0,6266,6265,1,0,0,0,6266,6267,1,
        0,0,0,6267,6269,1,0,0,0,6268,6270,3,518,259,0,6269,6268,1,0,0,0,
        6269,6270,1,0,0,0,6270,6271,1,0,0,0,6271,6272,5,1214,0,0,6272,509,
        1,0,0,0,6273,6274,5,295,0,0,6274,6276,5,1213,0,0,6275,6277,3,514,
        257,0,6276,6275,1,0,0,0,6276,6277,1,0,0,0,6277,6278,1,0,0,0,6278,
        6279,3,516,258,0,6279,6280,5,1214,0,0,6280,511,1,0,0,0,6281,6282,
        5,295,0,0,6282,6284,5,1213,0,0,6283,6285,3,514,257,0,6284,6283,1,
        0,0,0,6284,6285,1,0,0,0,6285,6286,1,0,0,0,6286,6288,3,516,258,0,
        6287,6289,3,554,277,0,6288,6287,1,0,0,0,6288,6289,1,0,0,0,6289,6290,
        1,0,0,0,6290,6291,5,1214,0,0,6291,513,1,0,0,0,6292,6293,5,840,0,
        0,6293,6294,5,42,0,0,6294,6299,3,402,201,0,6295,6296,5,1208,0,0,
        6296,6298,3,402,201,0,6297,6295,1,0,0,0,6298,6301,1,0,0,0,6299,6297,
        1,0,0,0,6299,6300,1,0,0,0,6300,515,1,0,0,0,6301,6299,1,0,0,0,6302,
        6303,5,291,0,0,6303,6304,5,42,0,0,6304,6309,3,394,197,0,6305,6306,
        5,1208,0,0,6306,6308,3,394,197,0,6307,6305,1,0,0,0,6308,6311,1,0,
        0,0,6309,6307,1,0,0,0,6309,6310,1,0,0,0,6310,6315,1,0,0,0,6311,6309,
        1,0,0,0,6312,6313,5,884,0,0,6313,6314,5,470,0,0,6314,6316,3,400,
        200,0,6315,6312,1,0,0,0,6315,6316,1,0,0,0,6316,517,1,0,0,0,6317,
        6402,5,364,0,0,6318,6319,5,1013,0,0,6319,6403,5,858,0,0,6320,6321,
        3,552,276,0,6321,6322,5,858,0,0,6322,6403,1,0,0,0,6323,6324,5,93,
        0,0,6324,6403,5,361,0,0,6325,6400,5,35,0,0,6326,6327,5,1013,0,0,
        6327,6328,5,858,0,0,6328,6329,5,16,0,0,6329,6330,5,1013,0,0,6330,
        6401,5,675,0,0,6331,6332,5,1013,0,0,6332,6333,5,858,0,0,6333,6334,
        5,16,0,0,6334,6335,3,552,276,0,6335,6336,5,858,0,0,6336,6401,1,0,
        0,0,6337,6338,5,1013,0,0,6338,6339,5,858,0,0,6339,6340,5,16,0,0,
        6340,6341,5,93,0,0,6341,6401,5,361,0,0,6342,6343,5,1013,0,0,6343,
        6344,5,858,0,0,6344,6345,5,16,0,0,6345,6346,3,552,276,0,6346,6347,
        5,675,0,0,6347,6401,1,0,0,0,6348,6349,3,552,276,0,6349,6350,5,858,
        0,0,6350,6351,5,16,0,0,6351,6352,5,1013,0,0,6352,6353,5,675,0,0,
        6353,6401,1,0,0,0,6354,6355,3,552,276,0,6355,6356,5,858,0,0,6356,
        6357,5,16,0,0,6357,6358,3,552,276,0,6358,6359,5,858,0,0,6359,6401,
        1,0,0,0,6360,6361,3,552,276,0,6361,6362,5,858,0,0,6362,6363,5,16,
        0,0,6363,6364,5,93,0,0,6364,6365,5,361,0,0,6365,6401,1,0,0,0,6366,
        6367,3,552,276,0,6367,6368,5,858,0,0,6368,6369,5,16,0,0,6369,6370,
        3,552,276,0,6370,6371,5,675,0,0,6371,6401,1,0,0,0,6372,6373,5,93,
        0,0,6373,6374,5,361,0,0,6374,6375,5,16,0,0,6375,6376,5,1013,0,0,
        6376,6401,5,675,0,0,6377,6378,5,93,0,0,6378,6379,5,361,0,0,6379,
        6380,5,16,0,0,6380,6381,5,93,0,0,6381,6401,5,361,0,0,6382,6383,5,
        93,0,0,6383,6384,5,361,0,0,6384,6385,5,16,0,0,6385,6386,3,552,276,
        0,6386,6387,5,675,0,0,6387,6401,1,0,0,0,6388,6389,3,552,276,0,6389,
        6390,5,675,0,0,6390,6391,5,16,0,0,6391,6392,5,1013,0,0,6392,6393,
        5,675,0,0,6393,6401,1,0,0,0,6394,6395,3,552,276,0,6395,6396,5,675,
        0,0,6396,6397,5,16,0,0,6397,6398,3,552,276,0,6398,6399,5,675,0,0,
        6399,6401,1,0,0,0,6400,6326,1,0,0,0,6400,6331,1,0,0,0,6400,6337,
        1,0,0,0,6400,6342,1,0,0,0,6400,6348,1,0,0,0,6400,6354,1,0,0,0,6400,
        6360,1,0,0,0,6400,6366,1,0,0,0,6400,6372,1,0,0,0,6400,6377,1,0,0,
        0,6400,6382,1,0,0,0,6400,6388,1,0,0,0,6400,6394,1,0,0,0,6401,6403,
        1,0,0,0,6402,6318,1,0,0,0,6402,6320,1,0,0,0,6402,6323,1,0,0,0,6402,
        6325,1,0,0,0,6403,519,1,0,0,0,6404,6409,3,402,201,0,6405,6406,5,
        1213,0,0,6406,6407,3,140,70,0,6407,6408,5,1214,0,0,6408,6410,1,0,
        0,0,6409,6405,1,0,0,0,6409,6410,1,0,0,0,6410,6413,1,0,0,0,6411,6412,
        5,20,0,0,6412,6414,3,214,107,0,6413,6411,1,0,0,0,6413,6414,1,0,0,
        0,6414,521,1,0,0,0,6415,6418,5,845,0,0,6416,6417,5,42,0,0,6417,6419,
        5,459,0,0,6418,6416,1,0,0,0,6418,6419,1,0,0,0,6419,6429,1,0,0,0,
        6420,6430,3,190,95,0,6421,6426,3,524,262,0,6422,6423,5,1208,0,0,
        6423,6425,3,524,262,0,6424,6422,1,0,0,0,6425,6428,1,0,0,0,6426,6424,
        1,0,0,0,6426,6427,1,0,0,0,6427,6430,1,0,0,0,6428,6426,1,0,0,0,6429,
        6420,1,0,0,0,6429,6421,1,0,0,0,6430,523,1,0,0,0,6431,6432,3,190,
        95,0,6432,6433,5,20,0,0,6433,6434,3,216,108,0,6434,525,1,0,0,0,6435,
        6436,5,1044,0,0,6436,6437,5,1213,0,0,6437,6442,3,528,264,0,6438,
        6439,5,1208,0,0,6439,6441,3,528,264,0,6440,6438,1,0,0,0,6441,6444,
        1,0,0,0,6442,6440,1,0,0,0,6442,6443,1,0,0,0,6443,6445,1,0,0,0,6444,
        6442,1,0,0,0,6445,6446,5,1214,0,0,6446,527,1,0,0,0,6447,6450,3,190,
        95,0,6448,6449,5,20,0,0,6449,6451,3,214,107,0,6450,6448,1,0,0,0,
        6450,6451,1,0,0,0,6451,529,1,0,0,0,6452,6455,3,190,95,0,6453,6454,
        5,20,0,0,6454,6456,3,214,107,0,6455,6453,1,0,0,0,6455,6456,1,0,0,
        0,6456,531,1,0,0,0,6457,6459,3,402,201,0,6458,6460,3,548,274,0,6459,
        6458,1,0,0,0,6459,6460,1,0,0,0,6460,533,1,0,0,0,6461,6462,5,1051,
        0,0,6462,6463,5,1213,0,0,6463,6468,3,536,268,0,6464,6465,5,1208,
        0,0,6465,6467,3,536,268,0,6466,6464,1,0,0,0,6467,6470,1,0,0,0,6468,
        6466,1,0,0,0,6468,6469,1,0,0,0,6469,6471,1,0,0,0,6470,6468,1,0,0,
        0,6471,6472,5,1214,0,0,6472,535,1,0,0,0,6473,6474,3,164,82,0,6474,
        6475,5,20,0,0,6475,6476,3,214,107,0,6476,6482,1,0,0,0,6477,6478,
        5,111,0,0,6478,6482,3,164,82,0,6479,6480,5,268,0,0,6480,6482,5,111,
        0,0,6481,6473,1,0,0,0,6481,6477,1,0,0,0,6481,6479,1,0,0,0,6482,537,
        1,0,0,0,6483,6489,5,579,0,0,6484,6485,3,190,95,0,6485,6486,5,159,
        0,0,6486,6487,5,829,0,0,6487,6490,1,0,0,0,6488,6490,3,540,270,0,
        6489,6484,1,0,0,0,6489,6488,1,0,0,0,6490,6501,1,0,0,0,6491,6497,
        5,1208,0,0,6492,6493,3,190,95,0,6493,6494,5,159,0,0,6494,6495,5,
        829,0,0,6495,6498,1,0,0,0,6496,6498,3,540,270,0,6497,6492,1,0,0,
        0,6497,6496,1,0,0,0,6498,6500,1,0,0,0,6499,6491,1,0,0,0,6500,6503,
        1,0,0,0,6501,6499,1,0,0,0,6501,6502,1,0,0,0,6502,539,1,0,0,0,6503,
        6501,1,0,0,0,6504,6505,3,194,97,0,6505,6508,3,94,47,0,6506,6507,
        5,1082,0,0,6507,6509,3,164,82,0,6508,6506,1,0,0,0,6508,6509,1,0,
        0,0,6509,6512,1,0,0,0,6510,6511,5,111,0,0,6511,6513,3,160,80,0,6512,
        6510,1,0,0,0,6512,6513,1,0,0,0,6513,541,1,0,0,0,6514,6515,5,653,
        0,0,6515,6516,3,164,82,0,6516,543,1,0,0,0,6517,6518,7,88,0,0,6518,
        6519,5,286,0,0,6519,6520,5,649,0,0,6520,545,1,0,0,0,6521,6522,5,
        889,0,0,6522,6523,7,89,0,0,6523,547,1,0,0,0,6524,6532,5,289,0,0,
        6525,6526,7,90,0,0,6526,6527,5,286,0,0,6527,6533,5,274,0,0,6528,
        6529,5,794,0,0,6529,6530,5,286,0,0,6530,6531,5,268,0,0,6531,6533,
        5,593,0,0,6532,6525,1,0,0,0,6532,6528,1,0,0,0,6533,549,1,0,0,0,6534,
        6535,7,91,0,0,6535,6536,5,806,0,0,6536,551,1,0,0,0,6537,6538,3,170,
        85,0,6538,553,1,0,0,0,6539,6540,5,474,0,0,6540,6541,5,986,0,0,6541,
        6542,7,92,0,0,6542,555,1,0,0,0,6543,6544,5,854,0,0,6544,6545,5,1213,
        0,0,6545,6546,3,558,279,0,6546,6548,5,1214,0,0,6547,6549,3,560,280,
        0,6548,6547,1,0,0,0,6548,6549,1,0,0,0,6549,6551,1,0,0,0,6550,6552,
        5,20,0,0,6551,6550,1,0,0,0,6551,6552,1,0,0,0,6552,6553,1,0,0,0,6553,
        6555,3,214,107,0,6554,6556,3,588,294,0,6555,6554,1,0,0,0,6555,6556,
        1,0,0,0,6556,557,1,0,0,0,6557,6562,3,562,281,0,6558,6559,5,1208,
        0,0,6559,6561,3,562,281,0,6560,6558,1,0,0,0,6561,6564,1,0,0,0,6562,
        6560,1,0,0,0,6562,6563,1,0,0,0,6563,6565,1,0,0,0,6564,6562,1,0,0,
        0,6565,6566,5,159,0,0,6566,6567,3,564,282,0,6567,559,1,0,0,0,6568,
        6569,5,474,0,0,6569,6574,3,566,283,0,6570,6571,5,1208,0,0,6571,6573,
        3,566,283,0,6572,6570,1,0,0,0,6573,6576,1,0,0,0,6574,6572,1,0,0,
        0,6574,6575,1,0,0,0,6575,561,1,0,0,0,6576,6574,1,0,0,0,6577,6582,
        3,426,213,0,6578,6580,5,20,0,0,6579,6578,1,0,0,0,6579,6580,1,0,0,
        0,6580,6581,1,0,0,0,6581,6583,3,214,107,0,6582,6579,1,0,0,0,6582,
        6583,1,0,0,0,6583,563,1,0,0,0,6584,6585,3,190,95,0,6585,6586,5,190,
        0,0,6586,6587,5,1213,0,0,6587,6592,3,568,284,0,6588,6589,5,1208,
        0,0,6589,6591,3,568,284,0,6590,6588,1,0,0,0,6591,6594,1,0,0,0,6592,
        6590,1,0,0,0,6592,6593,1,0,0,0,6593,6595,1,0,0,0,6594,6592,1,0,0,
        0,6595,6596,5,1214,0,0,6596,6628,1,0,0,0,6597,6598,3,588,294,0,6598,
        6599,5,190,0,0,6599,6600,5,1213,0,0,6600,6605,3,568,284,0,6601,6602,
        5,1208,0,0,6602,6604,3,568,284,0,6603,6601,1,0,0,0,6604,6607,1,0,
        0,0,6605,6603,1,0,0,0,6605,6606,1,0,0,0,6606,6608,1,0,0,0,6607,6605,
        1,0,0,0,6608,6609,5,1214,0,0,6609,6628,1,0,0,0,6610,6611,3,588,294,
        0,6611,6612,5,190,0,0,6612,6613,5,1213,0,0,6613,6618,3,570,285,0,
        6614,6615,5,1208,0,0,6615,6617,3,570,285,0,6616,6614,1,0,0,0,6617,
        6620,1,0,0,0,6618,6616,1,0,0,0,6618,6619,1,0,0,0,6619,6621,1,0,0,
        0,6620,6618,1,0,0,0,6621,6622,5,1214,0,0,6622,6628,1,0,0,0,6623,
        6624,3,190,95,0,6624,6625,5,190,0,0,6625,6626,3,590,295,0,6626,6628,
        1,0,0,0,6627,6584,1,0,0,0,6627,6597,1,0,0,0,6627,6610,1,0,0,0,6627,
        6623,1,0,0,0,6628,565,1,0,0,0,6629,6631,3,426,213,0,6630,6632,5,
        20,0,0,6631,6630,1,0,0,0,6631,6632,1,0,0,0,6632,6633,1,0,0,0,6633,
        6634,3,214,107,0,6634,567,1,0,0,0,6635,6640,3,402,201,0,6636,6638,
        5,20,0,0,6637,6636,1,0,0,0,6637,6638,1,0,0,0,6638,6639,1,0,0,0,6639,
        6641,3,214,107,0,6640,6637,1,0,0,0,6640,6641,1,0,0,0,6641,569,1,
        0,0,0,6642,6644,3,586,293,0,6643,6645,5,20,0,0,6644,6643,1,0,0,0,
        6644,6645,1,0,0,0,6645,6646,1,0,0,0,6646,6647,3,214,107,0,6647,571,
        1,0,0,0,6648,6651,5,1017,0,0,6649,6650,7,93,0,0,6650,6652,5,806,
        0,0,6651,6649,1,0,0,0,6651,6652,1,0,0,0,6652,6653,1,0,0,0,6653,6654,
        5,1213,0,0,6654,6655,3,574,287,0,6655,6657,5,1214,0,0,6656,6658,
        5,20,0,0,6657,6656,1,0,0,0,6657,6658,1,0,0,0,6658,6659,1,0,0,0,6659,
        6661,3,214,107,0,6660,6662,3,588,294,0,6661,6660,1,0,0,0,6661,6662,
        1,0,0,0,6662,573,1,0,0,0,6663,6664,3,190,95,0,6664,6665,5,159,0,
        0,6665,6666,3,190,95,0,6666,6667,5,190,0,0,6667,6668,5,1213,0,0,
        6668,6673,3,576,288,0,6669,6670,5,1208,0,0,6670,6672,3,576,288,0,
        6671,6669,1,0,0,0,6672,6675,1,0,0,0,6673,6671,1,0,0,0,6673,6674,
        1,0,0,0,6674,6676,1,0,0,0,6675,6673,1,0,0,0,6676,6677,5,1214,0,0,
        6677,6694,1,0,0,0,6678,6679,3,588,294,0,6679,6680,5,159,0,0,6680,
        6681,3,190,95,0,6681,6682,5,190,0,0,6682,6683,5,1213,0,0,6683,6688,
        3,578,289,0,6684,6685,5,1208,0,0,6685,6687,3,578,289,0,6686,6684,
        1,0,0,0,6687,6690,1,0,0,0,6688,6686,1,0,0,0,6688,6689,1,0,0,0,6689,
        6691,1,0,0,0,6690,6688,1,0,0,0,6691,6692,5,1214,0,0,6692,6694,1,
        0,0,0,6693,6663,1,0,0,0,6693,6678,1,0,0,0,6694,575,1,0,0,0,6695,
        6700,3,190,95,0,6696,6698,5,20,0,0,6697,6696,1,0,0,0,6697,6698,1,
        0,0,0,6698,6699,1,0,0,0,6699,6701,3,160,80,0,6700,6697,1,0,0,0,6700,
        6701,1,0,0,0,6701,577,1,0,0,0,6702,6707,3,588,294,0,6703,6705,5,
        20,0,0,6704,6703,1,0,0,0,6704,6705,1,0,0,0,6705,6706,1,0,0,0,6706,
        6708,3,160,80,0,6707,6704,1,0,0,0,6707,6708,1,0,0,0,6708,579,1,0,
        0,0,6709,6716,5,24,0,0,6710,6717,5,224,0,0,6711,6712,5,421,0,0,6712,
        6714,5,480,0,0,6713,6711,1,0,0,0,6713,6714,1,0,0,0,6714,6715,1,0,
        0,0,6715,6717,3,402,201,0,6716,6710,1,0,0,0,6716,6713,1,0,0,0,6717,
        581,1,0,0,0,6718,6721,3,590,295,0,6719,6721,3,584,292,0,6720,6718,
        1,0,0,0,6720,6719,1,0,0,0,6721,583,1,0,0,0,6722,6723,5,1213,0,0,
        6723,6728,3,402,201,0,6724,6725,7,87,0,0,6725,6727,3,402,201,0,6726,
        6724,1,0,0,0,6727,6730,1,0,0,0,6728,6726,1,0,0,0,6728,6729,1,0,0,
        0,6729,6731,1,0,0,0,6730,6728,1,0,0,0,6731,6732,5,1214,0,0,6732,
        585,1,0,0,0,6733,6734,5,1213,0,0,6734,6739,3,402,201,0,6735,6736,
        5,1208,0,0,6736,6738,3,402,201,0,6737,6735,1,0,0,0,6738,6741,1,0,
        0,0,6739,6737,1,0,0,0,6739,6740,1,0,0,0,6740,6742,1,0,0,0,6741,6739,
        1,0,0,0,6742,6743,5,1214,0,0,6743,587,1,0,0,0,6744,6745,5,1213,0,
        0,6745,6750,3,190,95,0,6746,6747,5,1208,0,0,6747,6749,3,190,95,0,
        6748,6746,1,0,0,0,6749,6752,1,0,0,0,6750,6748,1,0,0,0,6750,6751,
        1,0,0,0,6751,6753,1,0,0,0,6752,6750,1,0,0,0,6753,6754,5,1214,0,0,
        6754,589,1,0,0,0,6755,6757,5,1213,0,0,6756,6758,3,614,307,0,6757,
        6756,1,0,0,0,6757,6758,1,0,0,0,6758,6759,1,0,0,0,6759,6760,3,240,
        120,0,6760,6761,5,1214,0,0,6761,591,1,0,0,0,6762,6763,3,194,97,0,
        6763,6764,3,94,47,0,6764,593,1,0,0,0,6765,6766,5,1207,0,0,6766,6767,
        3,216,108,0,6767,595,1,0,0,0,6768,6769,3,594,297,0,6769,6770,5,1209,
        0,0,6770,6771,3,194,97,0,6771,597,1,0,0,0,6772,6773,7,94,0,0,6773,
        6774,3,218,109,0,6774,599,1,0,0,0,6775,6776,3,170,85,0,6776,6777,
        5,1208,0,0,6777,6778,3,170,85,0,6778,601,1,0,0,0,6779,6797,5,1224,
        0,0,6780,6797,5,135,0,0,6781,6797,5,1225,0,0,6782,6797,5,1226,0,
        0,6783,6797,5,264,0,0,6784,6785,5,272,0,0,6785,6797,5,1224,0,0,6786,
        6787,5,1227,0,0,6787,6797,5,1229,0,0,6788,6797,5,1227,0,0,6789,6797,
        5,234,0,0,6790,6797,5,1228,0,0,6791,6797,5,216,0,0,6792,6797,5,1229,
        0,0,6793,6797,5,176,0,0,6794,6797,5,1230,0,0,6795,6797,5,168,0,0,
        6796,6779,1,0,0,0,6796,6780,1,0,0,0,6796,6781,1,0,0,0,6796,6782,
        1,0,0,0,6796,6783,1,0,0,0,6796,6784,1,0,0,0,6796,6786,1,0,0,0,6796,
        6788,1,0,0,0,6796,6789,1,0,0,0,6796,6790,1,0,0,0,6796,6791,1,0,0,
        0,6796,6792,1,0,0,0,6796,6793,1,0,0,0,6796,6794,1,0,0,0,6796,6795,
        1,0,0,0,6797,603,1,0,0,0,6798,6799,7,95,0,0,6799,605,1,0,0,0,6800,
        6805,3,608,304,0,6801,6805,3,614,307,0,6802,6805,3,622,311,0,6803,
        6805,3,626,313,0,6804,6800,1,0,0,0,6804,6801,1,0,0,0,6804,6802,1,
        0,0,0,6804,6803,1,0,0,0,6805,607,1,0,0,0,6806,6808,3,610,305,0,6807,
        6806,1,0,0,0,6808,6809,1,0,0,0,6809,6807,1,0,0,0,6809,6810,1,0,0,
        0,6810,609,1,0,0,0,6811,6825,7,96,0,0,6812,6814,5,102,0,0,6813,6812,
        1,0,0,0,6813,6814,1,0,0,0,6814,6815,1,0,0,0,6815,6826,3,206,103,
        0,6816,6818,5,406,0,0,6817,6816,1,0,0,0,6817,6818,1,0,0,0,6818,6819,
        1,0,0,0,6819,6826,3,198,99,0,6820,6822,5,468,0,0,6821,6820,1,0,0,
        0,6821,6822,1,0,0,0,6822,6823,1,0,0,0,6823,6826,3,198,99,0,6824,
        6826,5,361,0,0,6825,6813,1,0,0,0,6825,6817,1,0,0,0,6825,6821,1,0,
        0,0,6825,6824,1,0,0,0,6826,6828,1,0,0,0,6827,6829,7,97,0,0,6828,
        6827,1,0,0,0,6828,6829,1,0,0,0,6829,6830,1,0,0,0,6830,6832,3,612,
        306,0,6831,6833,5,252,0,0,6832,6831,1,0,0,0,6832,6833,1,0,0,0,6833,
        6835,1,0,0,0,6834,6836,5,273,0,0,6835,6834,1,0,0,0,6835,6836,1,0,
        0,0,6836,611,1,0,0,0,6837,6849,5,490,0,0,6838,6849,7,98,0,0,6839,
        6849,5,923,0,0,6840,6842,5,877,0,0,6841,6843,5,297,0,0,6842,6841,
        1,0,0,0,6842,6843,1,0,0,0,6843,6849,1,0,0,0,6844,6849,5,1041,0,0,
        6845,6849,5,571,0,0,6846,6847,5,742,0,0,6847,6849,5,1067,0,0,6848,
        6837,1,0,0,0,6848,6838,1,0,0,0,6848,6839,1,0,0,0,6848,6840,1,0,0,
        0,6848,6844,1,0,0,0,6848,6845,1,0,0,0,6848,6846,1,0,0,0,6849,613,
        1,0,0,0,6850,6851,5,474,0,0,6851,6856,3,616,308,0,6852,6853,5,1208,
        0,0,6853,6855,3,616,308,0,6854,6852,1,0,0,0,6855,6858,1,0,0,0,6856,
        6854,1,0,0,0,6856,6857,1,0,0,0,6857,615,1,0,0,0,6858,6856,1,0,0,
        0,6859,6862,3,618,309,0,6860,6862,3,620,310,0,6861,6859,1,0,0,0,
        6861,6860,1,0,0,0,6862,617,1,0,0,0,6863,6865,3,214,107,0,6864,6866,
        3,588,294,0,6865,6864,1,0,0,0,6865,6866,1,0,0,0,6866,6867,1,0,0,
        0,6867,6868,5,20,0,0,6868,6869,3,590,295,0,6869,619,1,0,0,0,6870,
        6871,5,324,0,0,6871,6873,3,214,107,0,6872,6874,3,588,294,0,6873,
        6872,1,0,0,0,6873,6874,1,0,0,0,6874,6875,1,0,0,0,6875,6876,5,20,
        0,0,6876,6877,5,1213,0,0,6877,6881,3,240,120,0,6878,6879,5,447,0,
        0,6879,6880,5,13,0,0,6880,6882,3,242,121,0,6881,6878,1,0,0,0,6882,
        6883,1,0,0,0,6883,6881,1,0,0,0,6883,6884,1,0,0,0,6884,6885,1,0,0,
        0,6885,6886,5,1214,0,0,6886,621,1,0,0,0,6887,6888,5,457,0,0,6888,
        6889,5,1213,0,0,6889,6894,3,624,312,0,6890,6891,5,1208,0,0,6891,
        6893,3,624,312,0,6892,6890,1,0,0,0,6893,6896,1,0,0,0,6894,6892,1,
        0,0,0,6894,6895,1,0,0,0,6895,6897,1,0,0,0,6896,6894,1,0,0,0,6897,
        6898,5,1214,0,0,6898,623,1,0,0,0,6899,6900,3,216,108,0,6900,6904,
        3,94,47,0,6901,6903,3,116,58,0,6902,6901,1,0,0,0,6903,6906,1,0,0,
        0,6904,6902,1,0,0,0,6904,6905,1,0,0,0,6905,6916,1,0,0,0,6906,6904,
        1,0,0,0,6907,6914,5,20,0,0,6908,6911,5,112,0,0,6909,6910,5,42,0,
        0,6910,6912,5,789,0,0,6911,6909,1,0,0,0,6911,6912,1,0,0,0,6912,6915,
        1,0,0,0,6913,6915,5,225,0,0,6914,6908,1,0,0,0,6914,6913,1,0,0,0,
        6915,6917,1,0,0,0,6916,6907,1,0,0,0,6916,6917,1,0,0,0,6917,625,1,
        0,0,0,6918,6920,7,99,0,0,6919,6918,1,0,0,0,6919,6920,1,0,0,0,6920,
        6921,1,0,0,0,6921,6927,5,150,0,0,6922,6923,5,190,0,0,6923,6925,5,
        1042,0,0,6924,6926,5,795,0,0,6925,6924,1,0,0,0,6925,6926,1,0,0,0,
        6926,6928,1,0,0,0,6927,6922,1,0,0,0,6927,6928,1,0,0,0,6928,627,1,
        0,0,0,871,654,657,668,674,678,687,697,700,704,708,711,715,719,722,
        726,729,733,736,740,744,748,757,760,764,767,770,775,779,788,792,
        802,808,811,815,819,822,830,835,838,842,851,860,865,868,872,876,
        886,894,898,903,909,913,916,920,924,927,931,934,938,941,948,951,
        955,961,965,967,970,982,986,997,1011,1016,1024,1032,1039,1043,1047,
        1050,1061,1066,1070,1074,1084,1089,1091,1098,1102,1110,1113,1117,
        1130,1133,1147,1150,1154,1159,1163,1172,1175,1179,1182,1199,1202,
        1211,1217,1224,1226,1228,1232,1240,1243,1249,1252,1256,1260,1265,
        1267,1282,1285,1295,1298,1304,1307,1317,1330,1333,1337,1342,1344,
        1348,1351,1354,1357,1361,1364,1367,1372,1377,1383,1386,1392,1399,
        1403,1413,1416,1423,1432,1434,1452,1460,1466,1468,1481,1490,1502,
        1512,1516,1519,1526,1531,1537,1541,1544,1546,1550,1553,1557,1564,
        1568,1580,1583,1586,1588,1592,1596,1598,1604,1612,1616,1620,1628,
        1631,1633,1638,1641,1645,1648,1652,1662,1665,1672,1675,1678,1681,
        1685,1688,1691,1695,1698,1702,1705,1709,1712,1715,1719,1722,1726,
        1729,1739,1742,1749,1757,1761,1768,1772,1776,1780,1789,1791,1795,
        1802,1804,1808,1813,1815,1822,1826,1828,1837,1844,1855,1863,1887,
        1892,1894,1917,1922,1927,1930,1936,1943,1956,1961,1966,1972,2004,
        2020,2026,2030,2035,2039,2044,2048,2053,2057,2062,2066,2071,2075,
        2079,2083,2088,2092,2096,2100,2104,2108,2112,2116,2120,2124,2128,
        2132,2136,2148,2153,2158,2163,2166,2173,2181,2187,2194,2198,2200,
        2204,2217,2220,2224,2230,2233,2237,2248,2250,2258,2269,2272,2276,
        2279,2285,2290,2295,2299,2309,2316,2323,2332,2335,2343,2354,2358,
        2364,2371,2373,2376,2379,2384,2386,2393,2399,2401,2410,2419,2430,
        2433,2445,2447,2458,2463,2466,2476,2480,2491,2498,2502,2505,2512,
        2516,2522,2536,2548,2552,2556,2562,2565,2569,2571,2575,2582,2588,
        2598,2603,2613,2623,2636,2639,2643,2648,2652,2655,2660,2667,2676,
        2679,2689,2692,2704,2711,2718,2725,2733,2750,2753,2756,2763,2770,
        2777,2784,2789,2796,2806,2821,2832,2841,2852,2859,2877,2887,2889,
        2894,2912,2923,2932,2939,2948,2952,2957,2961,2968,2972,2976,2979,
        2988,2991,3001,3014,3019,3033,3039,3043,3047,3058,3102,3108,3157,
        3162,3167,3171,3175,3183,3204,3206,3212,3216,3221,3225,3234,3259,
        3269,3280,3284,3289,3296,3304,3312,3316,3321,3323,3331,3338,3343,
        3345,3347,3351,3360,3365,3369,3373,3391,3401,3406,3415,3418,3422,
        3428,3433,3436,3440,3446,3451,3454,3458,3464,3469,3472,3476,3482,
        3487,3493,3497,3505,3510,3515,3520,3528,3533,3538,3542,3551,3557,
        3564,3571,3578,3585,3608,3619,3625,3633,3635,3651,3660,3663,3673,
        3682,3685,3690,3693,3697,3714,3748,3767,3801,3810,3825,3895,3935,
        3958,3968,3978,3989,4000,4009,4019,4021,4040,4042,4054,4056,4070,
        4072,4098,4110,4113,4119,4121,4130,4136,4139,4144,4149,4155,4166,
        4170,4182,4186,4210,4222,4226,4234,4236,4260,4265,4281,4284,4297,
        4317,4328,4340,4349,4355,4357,4361,4374,4406,4418,4433,4448,4456,
        4471,4481,4488,4504,4507,4516,4518,4531,4545,4559,4573,4585,4597,
        4606,4608,4628,4633,4646,4650,4665,4669,4674,4684,4692,4701,4703,
        4708,4715,4719,4726,4745,4757,4761,4764,4772,4782,4789,4794,4803,
        4808,4820,4827,4833,4838,4841,4846,4851,4854,4858,4861,4867,4878,
        4882,4885,4888,4896,4902,4906,4910,4913,4927,4936,4940,4943,4958,
        4964,4966,4978,4988,4998,5008,5010,5012,5017,5027,5029,5031,5036,
        5044,5049,5057,5059,5064,5072,5081,5089,5097,5107,5117,5133,5158,
        5163,5166,5173,5181,5199,5208,5211,5221,5232,5250,5275,5278,5292,
        5297,5313,5318,5334,5339,5348,5353,5366,5369,5390,5396,5409,5420,
        5432,5448,5460,5471,5473,5478,5494,5504,5513,5518,5525,5530,5541,
        5546,5559,5561,5563,5568,5577,5582,5601,5610,5612,5617,5643,5654,
        5665,5673,5676,5681,5684,5691,5694,5701,5706,5714,5721,5725,5728,
        5738,5760,5771,5773,5784,5789,5798,5803,5805,5813,5824,5827,5830,
        5840,5843,5847,5850,5854,5858,5866,5874,5884,5888,5892,5895,5902,
        5909,5912,5915,5918,5928,5932,5940,5950,5953,5961,5986,5990,6004,
        6007,6010,6027,6054,6063,6069,6076,6078,6087,6092,6103,6107,6129,
        6139,6145,6153,6160,6164,6172,6178,6181,6186,6192,6194,6200,6210,
        6214,6220,6228,6234,6237,6248,6258,6263,6266,6269,6276,6284,6288,
        6299,6309,6315,6400,6402,6409,6413,6418,6426,6429,6442,6450,6455,
        6459,6468,6481,6489,6497,6501,6508,6512,6532,6548,6551,6555,6562,
        6574,6579,6582,6592,6605,6618,6627,6631,6637,6640,6644,6651,6657,
        6661,6673,6688,6693,6697,6700,6704,6707,6713,6716,6720,6728,6739,
        6750,6757,6796,6804,6809,6813,6817,6821,6825,6828,6832,6835,6842,
        6848,6856,6861,6865,6873,6883,6894,6904,6911,6914,6916,6919,6925,
        6927
    ]

class TeradataSQLDMLParser ( Parser ):

    grammarFileName = "TeradataSQLDMLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORTSESSION'", "'ABS'", 
                     "'ACCESS_LOCK'", "'ACCOUNT'", "'ACOS'", "'ACOSH'", 
                     "'ADD'", "'ADD_MONTHS'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
                     "'ALL'", "'ALTER'", "'AMP'", "'AND'", "'ANSIDATE'", 
                     "'ANY'", "'ARGLPAREN'", "'AS'", "'ASC'", "'ASIN'", 
                     "'ASINH'", "'AT'", "'ATAN'", "'ATAN2'", "'ATANH'", 
                     "'ATOMIC'", "'AUTHORIZATION'", "'AVE'", "'AVERAGE'", 
                     "'AVG'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BLOB'", "'BOTH'", "'BT'", "'BUT'", "'BY'", 
                     "'BYTE'", "'BYTEINT'", "'BYTES'", "'CALL'", "'CASE'", 
                     "'CASE_N'", "'CASESPECIFIC'", "'CAST'", "'CD'", "'CHAR'", 
                     "'CHAR_LENGTH'", "'CHAR2HEXINT'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERS'", "'CHARS'", "'CHECK'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'CM'", 
                     "'COALESCE'", "'COLLATION'", "'COLLECT'", "'COLUMN'", 
                     "'COMMENT'", "'COMMIT'", "'COMPRESS'", "'CONNECT'", 
                     "'CONSTRAINT'", "'CONSTRUCTOR'", "'CONSUME'", "'CONTAINS'", 
                     "'CONTINUE'", "'CONVERT_TABLE_HEADER'", "'CORR'", "'COS'", 
                     "'COSH'", "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", 
                     "'CREATE'", "'CROSS'", "'CS'", "'CSUM'", "'CT'", "'CTCONTROL'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'CV'", "'CYCLE'", "'DATABASE'", "'DATABLOCKSIZE'", 
                     "'DATE'", "'DATEFORM'", "'DAY'", "'DEALLOCATE'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRED'", 
                     "'DEGREES'", "'DEL'", "'DELETE'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIAGNOSTIC'", "'DICTIONARY'", "'DISABLED'", "'DISTINCT'", 
                     "'DO'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'DUAL'", 
                     "'DUMP'", "'DYNAMIC'", "'EACH'", "'ECHO'", "'ELSE'", 
                     "'ELSEIF'", "'ENABLED'", "'END'", "'EQ'", "'EQUALS'", 
                     "'ERROR'", "'ERRORFILES'", "'ERRORTABLES'", "'ESCAPE'", 
                     "'ET'", "'EXCEPT'", "'EXEC'", "'EXECUTE'", "'EXISTS'", 
                     "'EXIT'", "'EXP'", "'EXPAND'", "'EXPANDING'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALLBACK'", "'FASTEXPORT'", 
                     "'FETCH'", "'FIRST'", "'FLOAT'", "'FLUSH'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FOUND'", "'FREESPACE'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONDESCRIPTOR'", 
                     "'GE'", "'GENERATED'", "'GET'", "'GIVE'", "'GRANT'", 
                     "'GRAPHIC'", "'GROUP'", "'GROUPING'", "'GT'", "'HANDLER'", 
                     "'HASH'", "'HASHAMP'", "'HASHBAKAMP'", "'HASHBUCKET'", 
                     "'HASHROW'", "'HAVING'", "'HELP'", "'HOUR'", "'ID2BIGINT'", 
                     "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IN'", "'INCONSISTENT'", 
                     "'INDEX'", "'INITIATE'", "'INNER'", "'INOUT'", "'INPUT'", 
                     "'INS'", "'INSERT'", "'INSTANCE'", "'INSTEAD'", "'INT'", 
                     "'INTEGER'", "'INTEGERDATE'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JAR'", "'JOIN'", "'JOURNAL'", 
                     "'KEY'", "'KURTOSIS'", "'LANGUAGE'", "'LARGE'", "'LE'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LN'", "'LOADING'", "'LOCAL'", "'LOCATOR'", "'LOCK'", 
                     "'LOCKING'", "'LOG'", "'LOGGING'", "'LOGON'", "'LONG'", 
                     "'LOOP'", "'LOWER'", "'LT'", "'MACRO'", "'MAP'", "'MAVG'", 
                     "'MAX'", "'MAXIMUM'", "'MCHARACTERS'", "'MDIFF'", "'MERGE'", 
                     "'METHOD'", "'MIN'", "'MINDEX'", "'MINIMUM'", "'MINUS'", 
                     "'MINUTE'", "'MLINREG'", "'MLOAD'", "'MOD'", "'MODE'", 
                     "'MODIFIES'", "'MODIFY'", "'MONITOR'", "'MONRESOURCE'", 
                     "'MONSESSION'", "'MONTH'", "'MSUBSTR'", "'MSUM'", "'MULTISET'", 
                     "'NAMED'", "'NATURAL'", "'NE'", "'NEW'", "'NEW_TABLE'", 
                     "'NEXT'", "'NO'", "'NONE'", "'NONTEMPORAL'", "'NORMALIZE'", 
                     "'NOT'", "'NOWAIT'", "'NULL'", "'NULLIF'", "'NULLIFZERO'", 
                     "'NUMBER'", "'NUMERIC'", "'OBJECT'", "'OBJECTS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFF'", "'OLD'", "'OLD_TABLE'", "'ON'", "'ONLY'", 
                     "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", "'ORDERING'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERRIDE'", 
                     "'PARAMETER'", "'PASSWORD'", "'PERCENT'", "'PERCENT_RANK'", 
                     "'PERM'", "'PERMANENT'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIVILEGES'", 
                     "'PROCEDURE'", "'PROFILE'", "'PROTECTION'", "'PUBLIC'", 
                     "'QUALIFIED'", "'QUALIFY'", "'QUANTILE'", "'QUEUE'", 
                     "'RADIANS'", "'RANDOM'", "'RANGE_N'", "'RANK'", "'READS'", 
                     "'REAL'", "'RECURSIVE'", "'REFERENCES'", "'REFERENCING'", 
                     "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
                     "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", 
                     "'REGR_SYY'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REPLCONTROL'", "'REPLICATION'", 
                     "'REQUEST'", "'RESIGNAL'", "'RESTART'", "'RESTORE'", 
                     "'RESULT'", "'RESUME'", "'RET'", "'RETRIEVE'", "'RETURN'", 
                     "'RETURNS'", "'REVALIDATE'", "'REVOKE'", "'RIGHT'", 
                     "'RIGHTS'", "'ROLE'", "'ROLLBACK'", "'ROLLFORWARD'", 
                     "'ROLLUP'", "'ROW'", "'ROW_NUMBER'", "'ROWID'", "'ROWS'", 
                     "'SAMPLE'", "'SAMPLEID'", "'SCROLL'", "'SECOND'", "'SEL'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SETRESRATE'", "'SETS'", 
                     "'SETSESSRATE'", "'SHOW'", "'SIGNAL'", "'SIN'", "'SINH'", 
                     "'SKEW'", "'SMALLINT'", "'SOME'", "'SOUNDEX'", "'SPECIFIC'", 
                     "'SPOOL'", "'SQL'", "'SQLEXCEPTION'", "'SQLTEXT'", 
                     "'SQLWARNING'", "'SQRT'", "'SS'", "'START'", "'STARTUP'", 
                     "'STATEMENT'", "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                     "'STEPINFO'", "'STRING_CS'", "'SUBSCRIBER'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUMMARY'", "'SUSPEND'", "'TABLE'", 
                     "'TAN'", "'TANH'", "'TBL_CS'", "'TD_ANYTYPE'", "'TD_AUTHID'", 
                     "'TD_HOST'", "'TD_ROWLOADID'", "'TD_ROWREVISION'", 
                     "'TD_ROWSIZE'", "'TD_VALIST'", "'TEMPORARY'", "'TERMINATE'", 
                     "'THEN'", "'THRESHOLD'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TITLE'", "'TO'", "'TOP'", "'TRACE'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONTIME'", 
                     "'TRANSFORM'", "'TRANSLATE'", "'TRANSLATE_CHK'", "'TRIGGER'", 
                     "'TRIM'", "'TYPE'", "'UC'", "'UDTCASTAS'", "'UDTCASTLPAREN'", 
                     "'UDTMETHOD'", "'UDTTYPE'", "'UDTUSAGE'", "'UESCAPE'", 
                     "'UNDEFINED'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNTIL'", 
                     "'UNTIL_CHANGED'", "'UNTIL_CLOSED'", "'UPD'", "'UPDATE'", 
                     "'UPPER'", "'UPPERCASE'", "'USER'", "'USING'", "'VALIDTIME'", 
                     "'VALUE'", "'VALUES'", "'VAR_POP'", "'VAR_SAMP'", "'VARBYTE'", 
                     "'VARCHAR'", "'VARGRAPHIC'", "'VARIANT_TYPE'", "'VARYING'", 
                     "'VIEW'", "'VOLATILE'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WIDTH_BUCKET'", "'WITH'", "'WITHOUT'", "'WORK'", 
                     "'XMLPLAN'", "'YEAR'", "'ZEROIFNULL'", "'ZONE'", "'ALIAS'", 
                     "'DESCRIPTOR'", "'GO'", "'GOTO'", "'INDICATOR'", "'PRIVATE'", 
                     "'WAIT'", "'AbortSessions'", "'ABSENT'", "'ACCESS'", 
                     "'ACCORDING'", "'ACCUMULATE'", "'AG'", "'AggGeomIntersection'", 
                     "'AggGeomUnion'", "'ALLDBQL'", "'ALLOCATE'", "'ALLOCATION'", 
                     "'ALLOW'", "'ALLPARAMS'", "'ALLTDWM'", "'ALWAYS'", 
                     "'AMPCOUNT'", "'ANALYSIS'", "'ANCHOR'", "'ANCHOR_HOUR'", 
                     "'ANCHOR_MILLISECOND'", "'ANCHOR_MINUTE'", "'ANCHOR_SECOND'", 
                     "'APPLNAME'", "'ARCHIVE'", "'ARRAY'", "'ARRAY_ADD'", 
                     "'ARRAY_AGG'", "'ARRAY_AVG'", "'ARRAY_COMPARE'", "'ARRAY_CONCAT'", 
                     "'ARRAY_COUNT_DISTINCT'", "'ARRAY_DIV'", "'ARRAY_EQ'", 
                     "'ARRAY_GE'", "'ARRAY_GET'", "'ARRAY_GT'", "'ARRAY_LE'", 
                     "'ARRAY_LT'", "'ARRAY_MAX'", "'ARRAY_MIN'", "'ARRAY_MOD'", 
                     "'ARRAY_MUL'", "'ARRAY_NE'", "'ARRAY_SUB'", "'ARRAY_SUM'", 
                     "'ARRAY_UPDATE'", "'ARRAY_UPDATE_STRIDE'", "'ASCII'", 
                     "'ASSIGNMENT'", "'ATTR'", "'ATTRIBUTE'", "'ATTRIBUTES'", 
                     "'ATTRIBUTION'", "'ATTRS'", "'AUTH'", "'AUTO'", "'AUTOTEMP'", 
                     "'AVRO'", "'BIT_LENGTH'", "'BITAND'", "'BITNOT'", "'BITOR'", 
                     "'BITXOR'", "'BLOCKCOMPRESSION'", "'BLOCKCOMPRESSIONALGORITHM'", 
                     "'BLOCKCOMPRESSIONLEVEL'", "'BOM'", "'BOTTOM'", "'BSON'", 
                     "'C'", "'CALENDAR'", "'CALLED'", "'CALLER'", "'camset'", 
                     "'camset_l'", "'CAPTURE'", "'CARDINALITY'", "'CEIL'", 
                     "'CEILING'", "'CHANGERATE'", "'CHARACTERISTICS'", "'CHARSET'", 
                     "'CHARSET_COLL'", "'CHECKSUM'", "'CHR'", "'CLASS_ORIGIN'", 
                     "'CLICKLAG'", "'CLIENT'", "'CNT'", "'COLOCATE'", "'COLUMNMETA'", 
                     "'COLUMNS'", "'COLUMNSPERINDEX'", "'COLUMNSPERJOININDEX'", 
                     "'COMMAND_FUNCTION'", "'COMMAND_FUNCTION_CODE'", "'COMPARISON'", 
                     "'COMPILE'", "'CONCAT'", "'CONCURRENT'", "'CONDITION'", 
                     "'CONDITION_IDENTIFIER'", "'CONDITION_NUMBER'", "'CONTAINED'", 
                     "'CONTAINEDTOKEN'", "'CONTENT'", "'CONTIGUOUS'", "'COST'", 
                     "'COSTS'", "'COUNTSET'", "'CPP'", "'CPUTIME'", "'CPUTIMENORM'", 
                     "'CREATEDATASET'", "'CREATOR'", "'CUME_DIST'", "'CURDATE'", 
                     "'CURTIME'", "'DATA'", "'DATASET'", "'day_of_calendar'", 
                     "'day_of_month'", "'day_of_week'", "'day_of_year'", 
                     "'DayNumber_Of_Calendar'", "'DayNumber_Of_Month'", 
                     "'DayNumber_Of_Week'", "'DayNumber_Of_Year'", "'DayOccurrence_Of_Month'", 
                     "'DBA'", "'DBC'", "'DEBUG'", "'decamset'", "'decamset_l'", 
                     "'DECODE'", "'DECOMPRESS'", "'DEFINER'", "'DELIMITER'", 
                     "'DELTA_T'", "'DEMOGRAPHICS'", "'DENIALS'", "'DENSE'", 
                     "'DENSE_RANK'", "'DESCRIBE'", "'DETAILED'", "'DIAGNOSTICS'", 
                     "'DIGITS'", "'DIMENSION'", "'DOCUMENT'", "'DOT'", "'DOWN'", 
                     "'DR'", "'DUPCOUNT'", "'DUPCOUNTCUM'", "'EBCDIC'", 
                     "'EDITDISTANCE'", "'ELAPSEDSEC'", "'ELAPSEDTIME'", 
                     "'ELEMENT'", "'ELZS_H'", "'EMITNULL'", "'EMPTY'", "'EMPTY_BLOB'", 
                     "'EMPTY_CLOB'", "'ENCODE'", "'ENCODING'", "'ENCRYPT'", 
                     "'ERRORS'", "'ERRORTBL'", "'EVENTCOLUMN'", "'EXCEPTION'", 
                     "'EXCL'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXPORTWIDTH'", "'FALSE'", 
                     "'FEATUREINFO'", "'FILE'", "'FILL'", "'FILTER'", "'FINAL'", 
                     "'FIRST_NOTNULL'", "'FIRST_VALUE'", "'FLOOR'", "'FOLLOWING'", 
                     "'FOREIGNFUNCTION'", "'FORTOKEN'", "'FRIDAY'", "'FROM_BYTES'", 
                     "'FUNCTIONPARAMETER'", "'G'", "'GETBIT'", "'GetPSFVersion'", 
                     "'GetQueryBand'", "'GetQueryBandValue'", "'GetTimeZoneDisplacement'", 
                     "'GLOBAL'", "'GLOP'", "'Greatest'", "'HIGH'", "'HOST'", 
                     "'IdentifyDatabase'", "'IdentifySession'", "'IdentifyTable'", 
                     "'IdentifyUser'", "'IFP'", "'IGNORE'", "'IMMEDIATELY'", 
                     "'IMPORT'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDENT'", "'INDEXESPERTABLE'", "'INDEXMAINTMODE'", 
                     "'INIT'", "'INITCAP'", "'INLINE'", "'INSTANTIABLE'", 
                     "'INSTR'", "'INTERNAL'", "'INVOKER'", "'IOCOUNT'", 
                     "'IPARTITION'", "'ISOLATED'", "'ISOLATION'", "'JAVA'", 
                     "'JIS_COLL'", "'JSON'", "'JSON_AGG'", "'JSON_COMPOSE'", 
                     "'K'", "'KANJI1'", "'KANJISJIS'", "'KBYTE'", "'KBYTES'", 
                     "'KEEP'", "'KILOBYTES'", "'LAG'", "'LAST'", "'Last_Day'", 
                     "'LAST_NOTNULL'", "'LAST_VALUE'", "'LATIN'", "'LDIFF'", 
                     "'LEAD'", "'Least'", "'LENGTH'", "'LEVEL'", "'LIST'", 
                     "'LOAD'", "'LOCATE'", "'LOCKEDUSEREXPIRE'", "'LOW'", 
                     "'LPAD'", "'LTRIM'", "'lzcomp'", "'lzcomp_L'", "'lzdecomp'", 
                     "'lzdecomp_L'", "'M'", "'MAD'", "'MANUAL'", "'MAPPING'", 
                     "'MATCHED'", "'MAX_CHOOSE'", "'MAXCHAR'", "'MAXINTERVALS'", 
                     "'MAXLOGONATTEMPTS'", "'MAXVALUE'", "'MAXVALUELENGTH'", 
                     "'MEDIAN'", "'MEDIUM'", "'MEETS'", "'MEMBER'", "'MERGEBLOCKRATIO'", 
                     "'MESSAGE_LENGTH'", "'MESSAGE_TEXT'", "'MIN_CHOOSE'", 
                     "'MINCHAR'", "'MINVALUE'", "'MODIFIED'", "'MONDAY'", 
                     "'MonitorQueryBand'", "'MonitorSessionRate'", "'MonitorVersion'", 
                     "'MONTH_BEGIN'", "'MONTH_END'", "'month_of_calendar'", 
                     "'month_of_quarter'", "'month_of_year'", "'MonthNumber_Of_Calendar'", 
                     "'MonthNumber_Of_Quarter'", "'MonthNumber_Of_Year'", 
                     "'Months_Between'", "'MORE'", "'MULTINATIONAL'", "'NAME'", 
                     "'NAMESPACE'", "'NEVER'", "'NEXT_DAY'", "'NGRAM'", 
                     "'NIL'", "'NODDLTEXT'", "'NODE'", "'NONOPTCOST'", "'NONOPTINIT'", 
                     "'NONSEQUENCED'", "'NORIGHT'", "'NOSEXTRACTVARFROMPATH'", 
                     "'NOTATION'", "'NOW'", "'NPATH'", "'NTH'", "'NULLS'", 
                     "'NUMFPFNS'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
                     "'nvl'", "'nvl2'", "'NVP'", "'OA'", "'OAdd_Months'", 
                     "'OCOUNT'", "'ODELETE'", "'OEXISTS'", "'OEXTEND'", 
                     "'OFIRST'", "'OLAST'", "'OLD_NEW_TABLE'", "'OLIMIT'", 
                     "'ONEXT'", "'ONLINE'", "'OPRIOR'", "'OPTIONS'", "'ORDERBYVALUES'", 
                     "'ORDERED_ANALYTIC'", "'ORDINALITY'", "'OREPLACE'", 
                     "'OTRANSLATE'", "'OTRIM'", "'OVERLAYS'", "'OWNER'", 
                     "'P_INTERSECT'", "'P_NORMALIZE'", "'PARAMID'", "'PARAMINFO'", 
                     "'PARENT'", "'PARTITION'", "<INVALID>", "'PARTITIONED'", 
                     "'PARTITIONNAMES'", "'PASS'", "'PASSING'", "'PATH_GENERATOR'", 
                     "'PATH_START'", "'PATH_SUMMARIZER'", "'PATTERN'", "'PERCENTILE'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIOD'", 
                     "'PIVOT'", "'PORTION'", "'POWER'", "'PRECEDES'", "'PRECEDING'", 
                     "'PREFIX'", "'PRINT'", "'PRIOR'", "'PROTECTED'", "'QUARTER_BEGIN'", 
                     "'QUARTER_END'", "'quarter_of_calendar'", "'quarter_of_year'", 
                     "'QuarterNumber_Of_Calendar'", "'QuarterNumber_Of_Year'", 
                     "'QUERY'", "'QUERY_BAND'", "'QUOTECHAR'", "'RANDOMIZED'", 
                     "'RANGE'", "<INVALID>", "'RAPIDFIRE'", "'RDIFF'", "'READ'", 
                     "'RECALC'", "'regexp_instr'", "'regexp_replace'", "'regexp_similar'", 
                     "'regexp_substr'", "'REPLACEMENT'", "'RESET'", "'RESPECT'", 
                     "'RESTRICTWORDS'", "'RETAIN'", "'RETURNED_SQLSTATE'", 
                     "'RETURNING'", "'REUSE'", "'ROOT'", "'ROTATELEFT'", 
                     "'ROTATERIGHT'", "'Round'", "'ROW_COUNT'", "'ROWIDGEN'", 
                     "'ROWIDGEN2'", "'RPAD'", "'RTRIM'", "'RU'", "'RULES'", 
                     "'RULESET'", "'SAMPLES'", "'SATURDAY'", "'SCHEMA'", 
                     "'SCRIPT'", "'SCRIPT_COMMAND'", "'SEARCHSPACE'", "'SEARCHUIFDBPATH'", 
                     "'SECURITY'", "'SEED'", "'SELF'", "'SEQ'", "'SEQUENCE'", 
                     "'SEQUENCED'", "'SERIALIZABLE'", "'SERVER'", "'SESSIONIZE'", 
                     "'SETBIT'", "'SetResourceRate'", "'SetSessionAccount'", 
                     "'SetSessionRate'", "'SHARE'", "'SHIFTLEFT'", "'SHIFTRIGHT'", 
                     "'SIGN'", "'SIZE'", "'SNAPPY_COMPRESS'", "'SNAPPY_DECOMPRESS'", 
                     "'SOURCE'", "'SPARSE'", "'SPECCHAR'", "'SPL'", "'SQLSTATE'", 
                     "'SR'", "'ST_GEOMETRY'", "'STAT'", "'STATIC'", "'STATS'", 
                     "'STATSUSAGE'", "'STORAGE'", "'STRIP'", "'STRTOK'", 
                     "'STYLE'", "'SUBBITSTR'", "'SUBCLASS_ORIGIN'", "'SUCCEEDS'", 
                     "'SUMMARYONLY'", "'SUNDAY'", "'SYMBOLS'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SYSTEMTEST'", "'TARGET'", "'TD_ARRAY2P'", 
                     "'TD_DATASET'", "'td_day_of_calendar'", "'td_day_of_month'", 
                     "'td_day_of_week'", "'td_day_of_year'", "'TD_GENERAL'", 
                     "'TD_GETTIMEBUCKET'", "'TD_INTERNAL'", "'TD_LZ_COMPRESS'", 
                     "'TD_LZ_DECOMPRESS'", "'td_month_of_calendar'", "'td_month_of_quarter'", 
                     "'td_month_of_year'", "'td_quarter_of_calendar'", "'td_quarter_of_year'", 
                     "'TD_TIME_BUCKET_NUMBER'", "'td_week_of_calendar'", 
                     "'td_week_of_month'", "'td_week_of_year'", "'td_weekday_of_month'", 
                     "'td_year_of_calendar'", "'TDWMEVENT'", "'TDWMEXCEPTION'", 
                     "'TDWMHISTORY'", "'TEMPORAL_DATE'", "'TEMPORAL_TIMESTAMP'", 
                     "'TEXT'", "'THRESHOLDPERCENT'", "'THROUGH'", "'THURSDAY'", 
                     "'TIES'", "'TIMECODE'", "'TIMECOLUMN'", "'TIMEOUT'", 
                     "'TIMESTAMPCOLUMN'", "'TO_BYTE'", "'TO_BYTES'", "'TO_CHAR'", 
                     "'TO_DATE'", "'TO_DSINTERVAL'", "'TO_NUMBER'", "'TO_TIMESTAMP'", 
                     "'TO_TIMESTAMP_TZ'", "'TO_YMINTERVAL'", "'TOTOKEN'", 
                     "'TPA'", "'TRANSACTION_ACTIVE'", "'TransUnicodeToUTF8'", 
                     "'TransUTF8ToUnicode'", "'TRUE'", "'Trunc'", "'TRUST_ONLY'", 
                     "'TTGRANULARITY'", "'TUESDAY'", "'UBJSON'", "'UCASE'", 
                     "'UDFSEARCHPATH'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNICODE'", "'UNKNOWN'", "'UNPIVOT'", "'USE'", "'USECOUNT'", 
                     "'UTILITYINFO'", "'VARRAY'", "'VERBOSE'", "'VERSION'", 
                     "'VERSIONING'", "'WARNING'", "'WEDNESDAY'", "'WEEK_BEGIN'", 
                     "'WEEK_END'", "'week_of_calendar'", "'week_of_month'", 
                     "'week_of_year'", "'weekday_of_month'", "'WeekNumber_Of_Calendar'", 
                     "'WeekNumber_Of_Month'", "'WeekNumber_Of_Quarter'", 
                     "'WeekNumber_Of_Year'", "'WHITESPACE'", "'WINDOWSIZE'", 
                     "'WITHIN'", "'WORKLOAD'", "'WRITE'", "'XML'", "'XMLAGG'", 
                     "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDECLARATION'", 
                     "'XMLDOCUMENT'", "'XMLELEMENT'", "'XMLFOREST'", "'XMLNAMESPACES'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLSCHEMA'", 
                     "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTEXT'", "'XMLTYPE'", 
                     "'XMLVALIDATE'", "'YEAR_BEGIN'", "'YEAR_END'", "'year_of_calendar'", 
                     "'YearNumber_Of_Calendar'", "'ZLIB'", "'BUCKET'", "'COMMITTED'", 
                     "'CREATEXML'", "'_LATIN'", "'_UNICODE'", "'_KANJISJIS'", 
                     "'_GRAPHIC'", "'CSV'", "'CSVLD'", "'DATASIZE'", "'DAYOFMONTH'", 
                     "'DAYS'", "'DEFINITION'", "'DELETED'", "'FAST'", "'LISTAGG'", 
                     "'PATH'", "'REGEXP_SPLIT_TO_TABLE'", "'REVERSE'", "'SAS'", 
                     "'SQLTABLE'", "'STRTOK_SPLIT_TO_TABLE'", "'SYSLIB'", 
                     "'SYSUDTLIB'", "'TD_SERVER_DB'", "'TD_SYSFNLIB'", "'TD_SYSXML'", 
                     "'TIMEDATEWZCONTROL'", "'TRUST'", "'TRYCAST'", "'UDT'", 
                     "'USAGE'", "'VARIANT'", "'WEEK'", "'WIDTH'", "'XMLPUBLISH'", 
                     "'XMLPUBLISH_STREAM'", "'XMLSPLIT'", "'LATIN_TO_UNICODE'", 
                     "'UNICODE_TO_LATIN'", "'LOCALE_TO_UNICODE'", "'UNICODE_TO_LOCALE'", 
                     "'ASBSON'", "'ASBSONTEXT'", "'COMBINE'", "'EXISTVALUE'", 
                     "'JSONEXTRACT'", "'JSONEXTRACTVALUE'", "'JSONEXTRACTLARGEVALUE'", 
                     "'KEYCOUNT'", "'METADATA'", "'STORAGE_SIZE'", "'CREATESCHEMABASEDXML'", 
                     "'CREATENONSCHEMABASEDXML'", "'EXISTSNODE'", "'ISCONTENT'", 
                     "'ISDOCUMENT'", "'ISSCHEMAVALID'", "'ISSCHEMAVALIDATED'", 
                     "'XMLEXTRACT'", "'XMLTRANSFORM'", "'PROC_ID'", "'LOCATION'", 
                     "'PAYLOAD'", "'TRUSTED'", "'PATHPATTERN'", "'MANIFEST'", 
                     "'ROWFORMAT'", "'STOREDAS'", "'HEADER'", "'STRIP_EXTERIOR_SPACES'", 
                     "'STRIP_ENCLOSING_CHAR'", "'RLS'", "'SINGLE'", "'MULTIPLE'", 
                     "'JSON_COMPRESS'", "'JSON_DECOMPRESS'", "'TS_COMPRESS'", 
                     "'TS_DECOMPRESS'", "'CONTIGUOUSMAPAMPS'", "'SPARSEMAPAMPS'", 
                     "'SPARSETABLEAMPS'", "'UNNEST'", "'CALCMATRIX'", "'PHRASE'", 
                     "'CALCTYPE'", "'OUTPUT'", "'NULL_HANDLING'", "'READ_NOS'", 
                     "'BUFFERSIZE'", "'RETURNTYPE'", "'SAMPLE_PERC'", "'FULLSCAN'", 
                     "'TD_UNPIVOT'", "'VALUE_COLUMNS'", "'UNPIVOT_COLUMN'", 
                     "'COLUMN_LIST'", "'COLUMN_ALIAS_LIST'", "'INCLUDE_NULLS'", 
                     "'WRITE_NOS'", "'NAMING'", "'MANIFESTFILE'", "'MANIFESTONLY'", 
                     "'OVERWRITE'", "'INCLUDE_ORDERING'", "'INCLUDE_HASHBY'", 
                     "'MAXOBJECTSIZE'", "'COMPRESSION'", "'ARRAY_TO_JSON'", 
                     "'BSON_CHECK'", "'GEOJSONFROMGEOM'", "'GEOMFROMGEOJSON'", 
                     "'JSON_CHECK'", "'JSONGETVALUE'", "'JSONMETADATA'", 
                     "'NVP2JSON'", "'TD_JSONSHRED'", "'JSON_KEYS'", "'JSON_TABLE'", 
                     "'DEPTH'", "'QUOTES'", "'ROWEXPR'", "'COLEXPR'", "'RETURNTYPES'", 
                     "'NOCASE'", "'TRUNCATE'", "'LINK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'.'", "'@'", "'^'", "'?'", "'('", "')'", "'['", 
                     "']'", "'||'", "'\\u00A6\\u00A6'", "'*'", "'/'", "'+'", 
                     "'-'", "'**'", "'='", "'<>'", "'^='", "'<'", "'<='", 
                     "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORTSESSION", "ABS", "ACCESS_LOCK", 
                      "ACCOUNT", "ACOS", "ACOSH", "ADD", "ADD_MONTHS", "ADMIN", 
                      "AFTER", "AGGREGATE", "ALL", "ALTER", "AMP", "AND", 
                      "ANSIDATE", "ANY", "ARGLPAREN", "AS", "ASC", "ASIN", 
                      "ASINH", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", 
                      "AUTHORIZATION", "AVE", "AVERAGE", "AVG", "BEFORE", 
                      "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", 
                      "BT", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CALL", 
                      "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CD", "CHAR", 
                      "CHAR_LENGTH", "CHAR2HEXINT", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", 
                      "CLOB", "CLOSE", "CLUSTER", "CM", "COALESCE", "COLLATION", 
                      "COLLECT", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", 
                      "CONNECT", "CONSTRAINT", "CONSTRUCTOR", "CONSUME", 
                      "CONTAINS", "CONTINUE", "CONVERT_TABLE_HEADER", "CORR", 
                      "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", 
                      "CREATE", "CROSS", "CS", "CSUM", "CT", "CTCONTROL", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "CV", "CYCLE", "DATABASE", "DATABLOCKSIZE", 
                      "DATE", "DATEFORM", "DAY", "DEALLOCATE", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRED", "DEGREES", "DEL", 
                      "DELETE", "DESC", "DETERMINISTIC", "DIAGNOSTIC", "DICTIONARY", 
                      "DISABLED", "DISTINCT", "DO", "DOMAIN", "DOUBLE", 
                      "DROP", "DUAL", "DUMP", "DYNAMIC", "EACH", "ECHO", 
                      "ELSE", "ELSEIF", "ENABLED", "END", "EQ", "EQUALS", 
                      "ERROR", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ET", 
                      "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXPAND", "EXPANDING", "EXPLAIN", "EXTERNAL", "EXTRACT", 
                      "FALLBACK", "FASTEXPORT", "FETCH", "FIRST", "FLOAT", 
                      "FLUSH", "FOR", "FOREIGN", "FORMAT", "FOUND", "FREESPACE", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONDESCRIPTOR", 
                      "GE", "GENERATED", "GET", "GIVE", "GRANT", "GRAPHIC", 
                      "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", 
                      "HASHBAKAMP", "HASHBUCKET", "HASHROW", "HAVING", "HELP", 
                      "HOUR", "ID2BIGINT", "IDENTITY", "IF", "IMMEDIATE", 
                      "IN", "INCONSISTENT", "INDEX", "INITIATE", "INNER", 
                      "INOUT", "INPUT", "INS", "INSERT", "INSTANCE", "INSTEAD", 
                      "INT", "INTEGER", "INTEGERDATE", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JAR", "JOIN", "JOURNAL", 
                      "KEY", "KURTOSIS", "LANGUAGE", "LARGE", "LE", "LEADING", 
                      "LEAVE", "LEFT", "LIKE", "LIMIT", "LN", "LOADING", 
                      "LOCAL", "LOCATOR", "LOCK", "LOCKING", "LOG", "LOGGING", 
                      "LOGON", "LONG", "LOOP", "LOWER", "LT", "MACRO", "MAP", 
                      "MAVG", "MAX", "MAXIMUM", "MCHARACTERS", "MDIFF", 
                      "MERGE", "METHOD", "MIN", "MINDEX", "MINIMUM", "MINUS", 
                      "MINUTE", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", 
                      "MODIFY", "MONITOR", "MONRESOURCE", "MONSESSION", 
                      "MONTH", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NATURAL", 
                      "NE", "NEW", "NEW_TABLE", "NEXT", "NO", "NONE", "NONTEMPORAL", 
                      "NORMALIZE", "NOT", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", 
                      "NUMBER", "NUMERIC", "OBJECT", "OBJECTS", "OCTET_LENGTH", 
                      "OF", "OFF", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "ORDERING", "OUT", "OUTER", 
                      "OVER", "OVERLAPS", "OVERRIDE", "PARAMETER", "PASSWORD", 
                      "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "POSITION", 
                      "PRECISION", "PREPARE", "PRESERVE", "PRIMARY", "PRIVILEGES", 
                      "PROCEDURE", "PROFILE", "PROTECTION", "PUBLIC", "QUALIFIED", 
                      "QUALIFY", "QUANTILE", "QUEUE", "RADIANS", "RANDOM", 
                      "RANGE_N", "RANK", "READS", "REAL", "RECURSIVE", "REFERENCES", 
                      "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
                      "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
                      "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REPLCONTROL", "REPLICATION", 
                      "REQUEST", "RESIGNAL", "RESTART", "RESTORE", "RESULT", 
                      "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNS", 
                      "REVALIDATE", "REVOKE", "RIGHT", "RIGHTS", "ROLE", 
                      "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROW", "ROW_NUMBER", 
                      "ROWID", "ROWS", "SAMPLE", "SAMPLEID", "SCROLL", "SECOND", 
                      "SEL", "SELECT", "SESSION", "SET", "SETRESRATE", "SETS", 
                      "SETSESSRATE", "SHOW", "SIGNAL", "SIN", "SINH", "SKEW", 
                      "SMALLINT", "SOME", "SOUNDEX", "SPECIFIC", "SPOOL", 
                      "SQL", "SQLEXCEPTION", "SQLTEXT", "SQLWARNING", "SQRT", 
                      "SS", "START", "STARTUP", "STATEMENT", "STATISTICS", 
                      "STDDEV_POP", "STDDEV_SAMP", "STEPINFO", "STRING_CS", 
                      "SUBSCRIBER", "SUBSTR", "SUBSTRING", "SUM", "SUMMARY", 
                      "SUSPEND", "TABLE", "TAN", "TANH", "TBL_CS", "TD_ANYTYPE", 
                      "TD_AUTHID", "TD_HOST", "TD_ROWLOADID", "TD_ROWREVISION", 
                      "TD_ROWSIZE", "TD_VALIST", "TEMPORARY", "TERMINATE", 
                      "THEN", "THRESHOLD", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TITLE", "TO", "TOP", "TRACE", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONTIME", "TRANSFORM", 
                      "TRANSLATE", "TRANSLATE_CHK", "TRIGGER", "TRIM", "TYPE", 
                      "UC", "UDTCASTAS", "UDTCASTLPAREN", "UDTMETHOD", "UDTTYPE", 
                      "UDTUSAGE", "UESCAPE", "UNDEFINED", "UNDO", "UNION", 
                      "UNIQUE", "UNTIL", "UNTIL_CHANGED", "UNTIL_CLOSED", 
                      "UPD", "UPDATE", "UPPER", "UPPERCASE", "USER", "USING", 
                      "VALIDTIME", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
                      "VARBYTE", "VARCHAR", "VARGRAPHIC", "VARIANT_TYPE", 
                      "VARYING", "VIEW", "VOLATILE", "WHEN", "WHERE", "WHILE", 
                      "WIDTH_BUCKET", "WITH", "WITHOUT", "WORK", "XMLPLAN", 
                      "YEAR", "ZEROIFNULL", "ZONE", "ALIAS", "DESCRIPTOR", 
                      "GO", "GOTO", "INDICATOR", "PRIVATE", "WAIT", "ABORTSESSIONS", 
                      "ABSENT", "ACCESS", "ACCORDING", "ACCUMULATE", "AG", 
                      "AGGGEOMINTERSECTION", "AGGGEOMUNION", "ALLDBQL", 
                      "ALLOCATE", "ALLOCATION", "ALLOW", "ALLPARAMS", "ALLTDWM", 
                      "ALWAYS", "AMPCOUNT", "ANALYSIS", "ANCHOR", "ANCHOR_HOUR", 
                      "ANCHOR_MILLISECOND", "ANCHOR_MINUTE", "ANCHOR_SECOND", 
                      "APPLNAME", "ARCHIVE", "ARRAY", "ARRAY_ADD", "ARRAY_AGG", 
                      "ARRAY_AVG", "ARRAY_COMPARE", "ARRAY_CONCAT", "ARRAY_COUNT_DISTINCT", 
                      "ARRAY_DIV", "ARRAY_EQ", "ARRAY_GE", "ARRAY_GET", 
                      "ARRAY_GT", "ARRAY_LE", "ARRAY_LT", "ARRAY_MAX", "ARRAY_MIN", 
                      "ARRAY_MOD", "ARRAY_MUL", "ARRAY_NE", "ARRAY_SUB", 
                      "ARRAY_SUM", "ARRAY_UPDATE", "ARRAY_UPDATE_STRIDE", 
                      "ASCII", "ASSIGNMENT", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "ATTRIBUTION", "ATTRS", "AUTH", "AUTO", "AUTOTEMP", 
                      "AVRO", "BIT_LENGTH", "BITAND", "BITNOT", "BITOR", 
                      "BITXOR", "BLOCKCOMPRESSION", "BLOCKCOMPRESSIONALGORITHM", 
                      "BLOCKCOMPRESSIONLEVEL", "BOM", "BOTTOM", "BSON", 
                      "C", "CALENDAR", "CALLED", "CALLER", "CAMSET", "CAMSET_L", 
                      "CAPTURE", "CARDINALITY", "CEIL", "CEILING", "CHANGERATE", 
                      "CHARACTERISTICS", "CHARSET", "CHARSET_COLL", "CHECKSUM", 
                      "CHR", "CLASS_ORIGIN", "CLICKLAG", "CLIENT", "CNT", 
                      "COLOCATE", "COLUMNMETA", "COLUMNS", "COLUMNSPERINDEX", 
                      "COLUMNSPERJOININDEX", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
                      "COMPARISON", "COMPILE", "CONCAT", "CONCURRENT", "CONDITION", 
                      "CONDITION_IDENTIFIER", "CONDITION_NUMBER", "CONTAINED", 
                      "CONTAINEDTOKEN", "CONTENT", "CONTIGUOUS", "COST", 
                      "COSTS", "COUNTSET", "CPP", "CPUTIME", "CPUTIMENORM", 
                      "CREATEDATASET", "CREATOR", "CUME_DIST", "CURDATE", 
                      "CURTIME", "DATA", "DATASET", "DAY_OF_CALENDAR", "DAY_OF_MONTH", 
                      "DAY_OF_WEEK", "DAY_OF_YEAR", "DAYNUMBER_OF_CALENDAR", 
                      "DAYNUMBER_OF_MONTH", "DAYNUMBER_OF_WEEK", "DAYNUMBER_OF_YEAR", 
                      "DAYOCCURRENCE_OF_MONTH", "DBA", "DBC", "DEBUG", "DECAMSET", 
                      "DECAMSET_L", "DECODE", "DECOMPRESS", "DEFINER", "DELIMITER", 
                      "DELTA_T", "DEMOGRAPHICS", "DENIALS", "DENSE", "DENSE_RANK", 
                      "DESCRIBE", "DETAILED", "DIAGNOSTICS", "DIGITS", "DIMENSION", 
                      "DOCUMENT", "DOT", "DOWN", "DR", "DUPCOUNT", "DUPCOUNTCUM", 
                      "EBCDIC", "EDITDISTANCE", "ELAPSEDSEC", "ELAPSEDTIME", 
                      "ELEMENT", "ELZS_H", "EMITNULL", "EMPTY", "EMPTY_BLOB", 
                      "EMPTY_CLOB", "ENCODE", "ENCODING", "ENCRYPT", "ERRORS", 
                      "ERRORTBL", "EVENTCOLUMN", "EXCEPTION", "EXCL", "EXCLUDE", 
                      "EXCLUDING", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXPORTWIDTH", 
                      "FALSE", "FEATUREINFO", "FILE", "FILL", "FILTER", 
                      "FINAL", "FIRST_NOTNULL", "FIRST_VALUE", "FLOOR", 
                      "FOLLOWING", "FOREIGNFUNCTION", "FORTOKEN", "FRIDAY", 
                      "FROM_BYTES", "FUNCTIONPARAMETER", "G", "GETBIT", 
                      "GETPSFVERSION", "GETQUERYBAND", "GETQUERYBANDVALUE", 
                      "GETTIMEZONEDISPLACEMENT", "GLOBAL", "GLOP", "GREATEST", 
                      "HIGH", "HOST", "IDENTIFYDATABASE", "IDENTIFYSESSION", 
                      "IDENTIFYTABLE", "IDENTIFYUSER", "IFP", "IGNORE", 
                      "IMMEDIATELY", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INCREMENTAL", "INDENT", "INDEXESPERTABLE", "INDEXMAINTMODE", 
                      "INIT", "INITCAP", "INLINE", "INSTANTIABLE", "INSTR", 
                      "INTERNAL", "INVOKER", "IOCOUNT", "IPARTITION", "ISOLATED", 
                      "ISOLATION", "JAVA", "JIS_COLL", "JSON", "JSON_AGG", 
                      "JSON_COMPOSE", "K", "KANJI1", "KANJISJIS", "KBYTE", 
                      "KBYTES", "KEEP", "KILOBYTES", "LAG", "LAST", "LAST_DAY", 
                      "LAST_NOTNULL", "LAST_VALUE", "LATIN", "LDIFF", "LEAD", 
                      "LEAST", "LENGTH", "LEVEL", "LIST", "LOAD", "LOCATE", 
                      "LOCKEDUSEREXPIRE", "LOW", "LPAD", "LTRIM", "LZCOMP", 
                      "LZCOMP_L", "LZDECOMP", "LZDECOMP_L", "M", "MAD", 
                      "MANUAL", "MAPPING", "MATCHED", "MAX_CHOOSE", "MAXCHAR", 
                      "MAXINTERVALS", "MAXLOGONATTEMPTS", "MAXVALUE", "MAXVALUELENGTH", 
                      "MEDIAN", "MEDIUM", "MEETS", "MEMBER", "MERGEBLOCKRATIO", 
                      "MESSAGE_LENGTH", "MESSAGE_TEXT", "MIN_CHOOSE", "MINCHAR", 
                      "MINVALUE", "MODIFIED", "MONDAY", "MONITORQUERYBAND", 
                      "MONITORSESSIONRATE", "MONITORVERSION", "MONTH_BEGIN", 
                      "MONTH_END", "MONTH_OF_CALENDAR", "MONTH_OF_QUARTER", 
                      "MONTH_OF_YEAR", "MONTHNUMBER_OF_CALENDAR", "MONTHNUMBER_OF_QUARTER", 
                      "MONTHNUMBER_OF_YEAR", "MONTHS_BETWEEN", "MORE_", 
                      "MULTINATIONAL", "NAME", "NAMESPACE", "NEVER", "NEXT_DAY", 
                      "NGRAM", "NIL", "NODDLTEXT", "NODE", "NONOPTCOST", 
                      "NONOPTINIT", "NONSEQUENCED", "NORIGHT", "NOSEXTRACTVARFROMPATH", 
                      "NOTATION", "NOW", "NPATH", "NTH", "NULLS", "NUMFPFNS", 
                      "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", 
                      "NVP", "OA", "OADD_MONTHS", "OCOUNT", "ODELETE", "OEXISTS", 
                      "OEXTEND", "OFIRST", "OLAST", "OLD_NEW_TABLE", "OLIMIT", 
                      "ONEXT", "ONLINE", "OPRIOR", "OPTIONS", "ORDERBYVALUES", 
                      "ORDERED_ANALYTIC", "ORDINALITY", "OREPLACE", "OTRANSLATE", 
                      "OTRIM", "OVERLAYS", "OWNER", "P_INTERSECT", "P_NORMALIZE", 
                      "PARAMID", "PARAMINFO", "PARENT", "PARTITION", "PARTITION_L", 
                      "PARTITIONED", "PARTITIONNAMES", "PASS", "PASSING", 
                      "PATH_GENERATOR", "PATH_START", "PATH_SUMMARIZER", 
                      "PATTERN", "PERCENTILE", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERIOD", "PIVOT", "PORTION", "POWER", "PRECEDES", 
                      "PRECEDING", "PREFIX", "PRINT", "PRIOR", "PROTECTED", 
                      "QUARTER_BEGIN", "QUARTER_END", "QUARTER_OF_CALENDAR", 
                      "QUARTER_OF_YEAR", "QUARTERNUMBER_OF_CALENDAR", "QUARTERNUMBER_OF_YEAR", 
                      "QUERY", "QUERY_BAND", "QUOTECHAR", "RANDOMIZED", 
                      "RANGE", "RANGE_L", "RAPIDFIRE", "RDIFF", "READ", 
                      "RECALC", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SIMILAR", 
                      "REGEXP_SUBSTR", "REPLACEMENT", "RESET", "RESPECT", 
                      "RESTRICTWORDS", "RETAIN", "RETURNED_SQLSTATE", "RETURNING", 
                      "REUSE", "ROOT", "ROTATELEFT", "ROTATERIGHT", "ROUND", 
                      "ROW_COUNT", "ROWIDGEN", "ROWIDGEN2", "RPAD", "RTRIM", 
                      "RU", "RULES", "RULESET", "SAMPLES", "SATURDAY", "SCHEMA", 
                      "SCRIPT", "SCRIPT_COMMAND", "SEARCHSPACE", "SEARCHUIFDBPATH", 
                      "SECURITY", "SEED", "SELF", "SEQ", "SEQUENCE", "SEQUENCED", 
                      "SERIALIZABLE", "SERVER", "SESSIONIZE", "SETBIT", 
                      "SETRESOURCERATE", "SETSESSIONACCOUNT", "SETSESSIONRATE", 
                      "SHARE", "SHIFTLEFT", "SHIFTRIGHT", "SIGN", "SIZE", 
                      "SNAPPY_COMPRESS", "SNAPPY_DECOMPRESS", "SOURCE", 
                      "SPARSE", "SPECCHAR", "SPL", "SQLSTATE", "SR", "ST_GEOMETRY", 
                      "STAT", "STATIC", "STATS", "STATSUSAGE", "STORAGE", 
                      "STRIP", "STRTOK", "STYLE", "SUBBITSTR", "SUBCLASS_ORIGIN", 
                      "SUCCEEDS", "SUMMARYONLY", "SUNDAY", "SYMBOLS", "SYSTEM", 
                      "SYSTEM_TIME", "SYSTEMTEST", "TARGET", "TD_ARRAY2P", 
                      "TD_DATASET", "TD_DAY_OF_CALENDAR", "TD_DAY_OF_MONTH", 
                      "TD_DAY_OF_WEEK", "TD_DAY_OF_YEAR", "TD_GENERAL", 
                      "TD_GETTIMEBUCKET", "TD_INTERNAL", "TD_LZ_COMPRESS", 
                      "TD_LZ_DECOMPRESS", "TD_MONTH_OF_CALENDAR", "TD_MONTH_OF_QUARTER", 
                      "TD_MONTH_OF_YEAR", "TD_QUARTER_OF_CALENDAR", "TD_QUARTER_OF_YEAR", 
                      "TD_TIME_BUCKET_NUMBER", "TD_WEEK_OF_CALENDAR", "TD_WEEK_OF_MONTH", 
                      "TD_WEEK_OF_YEAR", "TD_WEEKDAY_OF_MONTH", "TD_YEAR_OF_CALENDAR", 
                      "TDWMEVENT", "TDWMEXCEPTION", "TDWMHISTORY", "TEMPORAL_DATE", 
                      "TEMPORAL_TIMESTAMP", "TEXT", "THRESHOLDPERCENT", 
                      "THROUGH", "THURSDAY", "TIES", "TIMECODE", "TIMECOLUMN", 
                      "TIMEOUT", "TIMESTAMPCOLUMN", "TO_BYTE", "TO_BYTES", 
                      "TO_CHAR", "TO_DATE", "TO_DSINTERVAL", "TO_NUMBER", 
                      "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", 
                      "TOTOKEN", "TPA", "TRANSACTION_ACTIVE", "TRANSUNICODETOUTF8", 
                      "TRANSUTF8TOUNICODE", "TRUE", "TRUNC", "TRUST_ONLY", 
                      "TTGRANULARITY", "TUESDAY", "UBJSON", "UCASE", "UDFSEARCHPATH", 
                      "UNBOUNDED", "UNCOMMITTED", "UNICODE", "UNKNOWN", 
                      "UNPIVOT", "USE", "USECOUNT", "UTILITYINFO", "VARRAY", 
                      "VERBOSE", "VERSION", "VERSIONING", "WARNING", "WEDNESDAY", 
                      "WEEK_BEGIN", "WEEK_END", "WEEK_OF_CALENDAR", "WEEK_OF_MONTH", 
                      "WEEK_OF_YEAR", "WEEKDAY_OF_MONTH", "WEEKNUMBER_OF_CALENDAR", 
                      "WEEKNUMBER_OF_MONTH", "WEEKNUMBER_OF_QUARTER", "WEEKNUMBER_OF_YEAR", 
                      "WHITESPACE", "WINDOWSIZE", "WITHIN", "WORKLOAD", 
                      "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCOMMENT", 
                      "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT", "XMLELEMENT", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTEXT", "XMLTYPE", "XMLVALIDATE", "YEAR_BEGIN", 
                      "YEAR_END", "YEAR_OF_CALENDAR", "YEARNUMBER_OF_CALENDAR", 
                      "ZLIB", "BUCKET", "COMMITTED", "CREATEXML", "CS_LATIN", 
                      "CS_UNICODE", "CS_KANJISJIS", "CS_GRAPHIC", "CSV", 
                      "CSVLD", "DATASIZE", "DAYOFMONTH", "DAYS", "DEFINITION", 
                      "DELETED", "FAST", "LISTAGG", "PATH", "REGEXP_SPLIT_TO_TABLE", 
                      "REVERSE", "SAS", "SQLTABLE", "STRTOK_SPLIT_TO_TABLE", 
                      "SYSLIB", "SYSUDTLIB", "TD_SERVER_DB", "TD_SYSFNLIB", 
                      "TD_SYSXML", "TIMEDATEWZCONTROL", "TRUST", "TRYCAST", 
                      "UDT", "USAGE", "VARIANT", "WEEK", "WIDTH", "XMLPUBLISH", 
                      "XMLPUBLISH_STREAM", "XMLSPLIT", "LATIN_TO_UNICODE", 
                      "UNICODE_TO_LATIN", "LOCALE_TO_UNICODE", "UNICODE_TO_LOCALE", 
                      "ASBSON", "ASBSONTEXT", "COMBINE", "EXISTVALUE", "JSONEXTRACT", 
                      "JSONEXTRACTVALUE", "JSONEXTRACTLARGEVALUE", "KEYCOUNT", 
                      "METADATA", "STORAGE_SIZE", "CREATESCHEMABASEDXML", 
                      "CREATENONSCHEMABASEDXML", "EXISTSNODE", "ISCONTENT", 
                      "ISDOCUMENT", "ISSCHEMAVALID", "ISSCHEMAVALIDATED", 
                      "XMLEXTRACT", "XMLTRANSFORM", "PROC_ID", "LOCATION", 
                      "PAYLOAD", "TRUSTED", "PATHPATTERN", "MANIFEST", "ROWFORMAT", 
                      "STOREDAS", "HEADER", "STRIP_EXTERIOR_SPACES", "STRIP_ENCLOSING_CHAR", 
                      "RLS", "SINGLE", "MULTIPLE", "JSON_COMPRESS", "JSON_DECOMPRESS", 
                      "TS_COMPRESS", "TS_DECOMPRESS", "CONTIGUOUSMAPAMPS", 
                      "SPARSEMAPAMPS", "SPARSETABLEAMPS", "UNNEST", "CALCMATRIX", 
                      "PHRASE", "CALCTYPE", "OUTPUT", "NULL_HANDLING", "READ_NOS", 
                      "BUFFERSIZE", "RETURNTYPE", "SAMPLE_PERC", "FULLSCAN", 
                      "TD_UNPIVOT", "VALUE_COLUMNS", "UNPIVOT_COLUMN", "COLUMN_LIST", 
                      "COLUMN_ALIAS_LIST", "INCLUDE_NULLS", "WRITE_NOS", 
                      "NAMING", "MANIFESTFILE", "MANIFESTONLY", "OVERWRITE", 
                      "INCLUDE_ORDERING", "INCLUDE_HASHBY", "MAXOBJECTSIZE", 
                      "COMPRESSION", "ARRAY_TO_JSON", "BSON_CHECK", "GEOJSONFROMGEOM", 
                      "GEOMFROMGEOJSON", "JSON_CHECK", "JSONGETVALUE", "JSONMETADATA", 
                      "NVP2JSON", "TD_JSONSHRED", "JSON_KEYS", "JSON_TABLE", 
                      "DEPTH", "QUOTES", "ROWEXPR", "COLEXPR", "RETURNTYPES", 
                      "NOCASE", "TRUNCATE", "LINK", "OBJECT_NAME", "UNSIGNED_INTEGER", 
                      "HEX_BYTE_LITERAL", "HEX_INTEGER_LITERAL", "FLOAT_LITERAL", 
                      "DATE_STRING", "TIME_STRING", "TIMESTAMP_STRING", 
                      "PERIOD_STRING", "UNICODE_STRING_LEADING", "CHAR_STRING", 
                      "HEX_STRING", "PASSWORD_STRING", "SEMICOLON", "COLON", 
                      "COMMA", "DOT_", "AT_SIGN", "CARET", "QUESTION_MARK", 
                      "OPEN_PAR", "CLOSE_PAR", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
                      "CONCATENATE", "BROKEN_CONCATENATE", "MUL_SIGN", "DIV_SIGN", 
                      "PLUS_SIGN", "MINUS_SIGN", "EXPONENTIATION", "EQUALS_SIGN", 
                      "NOT_EQUALS_SIGN", "NOT_EQUALS_SIGN_TD", "LT_SIGN", 
                      "LE_SIGN", "GT_SIGN", "GE_SIGN", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT", "WS" ]

    RULE_dml_stat = 0
    RULE_select_stat = 1
    RULE_select_and_consume_stat = 2
    RULE_delete_stat = 3
    RULE_delete_table_spec = 4
    RULE_insert_stat = 5
    RULE_hash_by = 6
    RULE_local_order_by = 7
    RULE_update_stat = 8
    RULE_update_basic_form_stat = 9
    RULE_update_with_from_stat = 10
    RULE_update_upsert_form_stat = 11
    RULE_update_table_spec = 12
    RULE_merge_stat = 13
    RULE_when_matched = 14
    RULE_when_not_matched = 15
    RULE_collect_demographics_stat = 16
    RULE_collect_statistics_qcd_form_stat = 17
    RULE_qcd_stats_target_spec = 18
    RULE_drop_statistics_qcd_form_stat = 19
    RULE_dump_explain_stat = 20
    RULE_initiate_index_analysis_stat = 21
    RULE_index_analysis_set_spec = 22
    RULE_index_analysis_boundary_option = 23
    RULE_initiate_partition_analysis_stat = 24
    RULE_insert_explain_stat = 25
    RULE_restart_index_analysis_stat = 26
    RULE_call_stat = 27
    RULE_argument = 28
    RULE_execute_stat = 29
    RULE_commit_stat = 30
    RULE_rollback_stat = 31
    RULE_abort_stat = 32
    RULE_begin_transaction_stat = 33
    RULE_end_transaction_stat = 34
    RULE_locking_stat = 35
    RULE_comment_retrieving_stat = 36
    RULE_checkpoint_stat = 37
    RULE_echo_stat = 38
    RULE_null_stat = 39
    RULE_set_spec = 40
    RULE_with_isolated_loading = 41
    RULE_logging_errors = 42
    RULE_object_kind = 43
    RULE_explained_sql_request = 44
    RULE_limit_sql_clause = 45
    RULE_analysis_time_limit_clause = 46
    RULE_data_type = 47
    RULE_variable_data_type = 48
    RULE_external_function_data_type = 49
    RULE_numeric_data_type = 50
    RULE_char_data_type = 51
    RULE_precisionless_char_data_type = 52
    RULE_lob_as_locator_data_type = 53
    RULE_binary_data_type = 54
    RULE_datetime_type = 55
    RULE_period_type = 56
    RULE_udt_type = 57
    RULE_data_type_attribute = 58
    RULE_default_value_control_phrase = 59
    RULE_default_value = 60
    RULE_column_naming_phrase = 61
    RULE_sysudtlib = 62
    RULE_interval_period_spec = 63
    RULE_type_precision = 64
    RULE_max_length_k_m_g = 65
    RULE_max_length_k_m = 66
    RULE_character_set_phrase = 67
    RULE_uppercase_phrase = 68
    RULE_casespecific_phrase = 69
    RULE_format_phrase = 70
    RULE_title_phrase = 71
    RULE_named_phrase = 72
    RULE_latin_unicode_character_set_phrase = 73
    RULE_inline_length = 74
    RULE_json_storage_format = 75
    RULE_dataset_storage_format_clause = 76
    RULE_dataset_storage_format = 77
    RULE_with_schema = 78
    RULE_with_time_zone = 79
    RULE_literal = 80
    RULE_hex_byte_literal = 81
    RULE_char_string_literal = 82
    RULE_unicode_char_string_literal = 83
    RULE_hex_char_string_literal = 84
    RULE_integer_literal = 85
    RULE_hex_integer_literal = 86
    RULE_float_literal = 87
    RULE_character_set_prefix = 88
    RULE_date_literal = 89
    RULE_time_literal = 90
    RULE_timestamp_literal = 91
    RULE_interval_literal = 92
    RULE_interval_qualifier = 93
    RULE_period_literal = 94
    RULE_column_name = 95
    RULE_unqualified_column_name = 96
    RULE_unqualified_name = 97
    RULE_object_name = 98
    RULE_table_name = 99
    RULE_procedure_name = 100
    RULE_function_name = 101
    RULE_macro_name = 102
    RULE_database_name = 103
    RULE_user_name = 104
    RULE_role_name = 105
    RULE_profile_name = 106
    RULE_alias_name = 107
    RULE_variable_name = 108
    RULE_parameter_name = 109
    RULE_label_name = 110
    RULE_condition_name = 111
    RULE_cursor_name = 112
    RULE_statement_name = 113
    RULE_statistics_name = 114
    RULE_udt_name = 115
    RULE_attribute_name = 116
    RULE_method_name = 117
    RULE_anchor_name = 118
    RULE_nonreserved_word = 119
    RULE_query_expr = 120
    RULE_query_term = 121
    RULE_with_deleted_rows = 122
    RULE_as_json = 123
    RULE_select_list = 124
    RULE_top_n = 125
    RULE_normalize = 126
    RULE_all_operator = 127
    RULE_selected_columns = 128
    RULE_selected_column = 129
    RULE_into_clause = 130
    RULE_from_clause = 131
    RULE_from_spec = 132
    RULE_join_source_spec = 133
    RULE_join_joined_spec = 134
    RULE_from_pivot_spec = 135
    RULE_from_unpivot_spec = 136
    RULE_table_reference = 137
    RULE_join_clause = 138
    RULE_join_on_clause = 139
    RULE_foreign_table_reference = 140
    RULE_foreign_function_reference = 141
    RULE_foreign_on_clause = 142
    RULE_exported_data = 143
    RULE_foreign_using_clause = 144
    RULE_foreign_parameter = 145
    RULE_foreign_returns_clause = 146
    RULE_server_name_reference = 147
    RULE_table_function_reference = 148
    RULE_udt_table_function = 149
    RULE_unnest_table_function = 150
    RULE_table_function_returns_clause = 151
    RULE_table_function_local_order_by_clause = 152
    RULE_table_function_hash_by_clause = 153
    RULE_table_operator_reference = 154
    RULE_xmltable_operator = 155
    RULE_calcmatrix_table_operator = 156
    RULE_read_nos_table_operator = 157
    RULE_script_table_operator = 158
    RULE_td_unpivot_table_operator = 159
    RULE_write_nos_table_operator = 160
    RULE_json_table_table_operator = 161
    RULE_json_keys_table_operator = 162
    RULE_json_shred_table_operator = 163
    RULE_generic_table_operator = 164
    RULE_table_operator_on_clause = 165
    RULE_table_operator_execute_clause = 166
    RULE_table_operator_out_table_clause = 167
    RULE_table_operator_using_clause = 168
    RULE_table_operator_using_spec = 169
    RULE_json_keys_using_name_value_pair = 170
    RULE_hash_or_partition_by = 171
    RULE_subquery_reference = 172
    RULE_location = 173
    RULE_read_nos_option = 174
    RULE_write_nos_option = 175
    RULE_with_clause = 176
    RULE_with_clause_by_phrase = 177
    RULE_with_clause_title_phrase = 178
    RULE_where_clause = 179
    RULE_group_by_clause = 180
    RULE_group_by_spec = 181
    RULE_ordinary_grouping_set = 182
    RULE_ordinary_grouping_set_parenthesized = 183
    RULE_empty_grouping_set = 184
    RULE_rollup_option = 185
    RULE_cube_option = 186
    RULE_grouping_sets_option = 187
    RULE_grouping_sets_spec = 188
    RULE_having_clause = 189
    RULE_qualify_clause = 190
    RULE_sample_clause = 191
    RULE_sample_fraction_description = 192
    RULE_sample_count_description = 193
    RULE_sample_when_clause = 194
    RULE_expand_on_clause = 195
    RULE_order_by_clause = 196
    RULE_order_by_spec_full = 197
    RULE_order_by_spec_asc_desc_only = 198
    RULE_with_check_option = 199
    RULE_logical_expr = 200
    RULE_scalar_expr = 201
    RULE_tuple = 202
    RULE_tuple_attribute = 203
    RULE_case_expr = 204
    RULE_valued_case_expr = 205
    RULE_searched_case_expr = 206
    RULE_coalesce_expr = 207
    RULE_nullif_expr = 208
    RULE_interval_expr_base = 209
    RULE_interval_expr_parenthesized = 210
    RULE_interval_expr_start_end_phrase = 211
    RULE_function_invocation = 212
    RULE_aggregate_function = 213
    RULE_analytic_function = 214
    RULE_arithmetic_function = 215
    RULE_array_function = 216
    RULE_attribute_function = 217
    RULE_byte_function = 218
    RULE_builtin_function = 219
    RULE_calendar_function = 220
    RULE_comparison_function = 221
    RULE_compression_function = 222
    RULE_conversion_function = 223
    RULE_date_function = 224
    RULE_hash_function = 225
    RULE_lob_function = 226
    RULE_map_function = 227
    RULE_nvl_funtion = 228
    RULE_period_function = 229
    RULE_regexp_function = 230
    RULE_string_function = 231
    RULE_json_function = 232
    RULE_xml_function = 233
    RULE_other_function = 234
    RULE_partitioning_expr = 235
    RULE_td_sysfnlib = 236
    RULE_td_sysxml = 237
    RULE_syslib = 238
    RULE_td_server_db = 239
    RULE_translation_mapping = 240
    RULE_attribute_modification = 241
    RULE_returns_clause = 242
    RULE_attribute_modification_option = 243
    RULE_teradata_type_conversion = 244
    RULE_teradata_type_conversion_data_attribute = 245
    RULE_case_spec = 246
    RULE_range_expr = 247
    RULE_range_list = 248
    RULE_range_expr_1 = 249
    RULE_range_expr_2 = 250
    RULE_range_expr_3 = 251
    RULE_range_spec = 252
    RULE_hash_bucket_number_expr = 253
    RULE_window_spec = 254
    RULE_window_spec_without_rows = 255
    RULE_window_spec_with_ties = 256
    RULE_window_partition_by = 257
    RULE_window_order_by = 258
    RULE_window_rows = 259
    RULE_json_param_spec = 260
    RULE_xml_query_argument = 261
    RULE_xml_query_variable_spec = 262
    RULE_xml_attribute_declaration = 263
    RULE_xml_attribute_spec = 264
    RULE_xml_forest_element_spec = 265
    RULE_xml_value_declaration = 266
    RULE_xml_namespace_declaration = 267
    RULE_xml_namespace_spec = 268
    RULE_xml_columns_spec = 269
    RULE_xml_regular_column_definition = 270
    RULE_xml_encoding = 271
    RULE_xml_query_on_empty = 272
    RULE_xml_returning_spec = 273
    RULE_xml_content_option_spec = 274
    RULE_ignore_respect_nulls = 275
    RULE_number_of_rows = 276
    RULE_with_ties = 277
    RULE_pivot = 278
    RULE_pivot_spec = 279
    RULE_pivot_with_phrase = 280
    RULE_pivot_agg_func_spec = 281
    RULE_pivot_for_phrase = 282
    RULE_pivot_with_spec = 283
    RULE_pivot_expr_spec_scalar = 284
    RULE_pivot_expr_spec_list = 285
    RULE_unpivot = 286
    RULE_unpivot_spec = 287
    RULE_unpivot_column_name_spec_single = 288
    RULE_unpivot_column_name_spec_list = 289
    RULE_at_timezone = 290
    RULE_elements_list = 291
    RULE_scalar_expr_list = 292
    RULE_scalar_expr_list_comma_separated = 293
    RULE_column_list = 294
    RULE_subquery = 295
    RULE_column_spec = 296
    RULE_variable_reference = 297
    RULE_cursor_variable_reference = 298
    RULE_macro_parameter_reference = 299
    RULE_array_scope_reference = 300
    RULE_comparison_operator = 301
    RULE_quantifier = 302
    RULE_request_modifier = 303
    RULE_locking_request_modifier = 304
    RULE_locking_spec = 305
    RULE_lock_type = 306
    RULE_with_request_modifier = 307
    RULE_cte_spec = 308
    RULE_regular_cte_spec = 309
    RULE_recursive_cte_spec = 310
    RULE_using_request_modifier = 311
    RULE_using_spec = 312
    RULE_explain_request_modifier = 313

    ruleNames =  [ "dml_stat", "select_stat", "select_and_consume_stat", 
                   "delete_stat", "delete_table_spec", "insert_stat", "hash_by", 
                   "local_order_by", "update_stat", "update_basic_form_stat", 
                   "update_with_from_stat", "update_upsert_form_stat", "update_table_spec", 
                   "merge_stat", "when_matched", "when_not_matched", "collect_demographics_stat", 
                   "collect_statistics_qcd_form_stat", "qcd_stats_target_spec", 
                   "drop_statistics_qcd_form_stat", "dump_explain_stat", 
                   "initiate_index_analysis_stat", "index_analysis_set_spec", 
                   "index_analysis_boundary_option", "initiate_partition_analysis_stat", 
                   "insert_explain_stat", "restart_index_analysis_stat", 
                   "call_stat", "argument", "execute_stat", "commit_stat", 
                   "rollback_stat", "abort_stat", "begin_transaction_stat", 
                   "end_transaction_stat", "locking_stat", "comment_retrieving_stat", 
                   "checkpoint_stat", "echo_stat", "null_stat", "set_spec", 
                   "with_isolated_loading", "logging_errors", "object_kind", 
                   "explained_sql_request", "limit_sql_clause", "analysis_time_limit_clause", 
                   "data_type", "variable_data_type", "external_function_data_type", 
                   "numeric_data_type", "char_data_type", "precisionless_char_data_type", 
                   "lob_as_locator_data_type", "binary_data_type", "datetime_type", 
                   "period_type", "udt_type", "data_type_attribute", "default_value_control_phrase", 
                   "default_value", "column_naming_phrase", "sysudtlib", 
                   "interval_period_spec", "type_precision", "max_length_k_m_g", 
                   "max_length_k_m", "character_set_phrase", "uppercase_phrase", 
                   "casespecific_phrase", "format_phrase", "title_phrase", 
                   "named_phrase", "latin_unicode_character_set_phrase", 
                   "inline_length", "json_storage_format", "dataset_storage_format_clause", 
                   "dataset_storage_format", "with_schema", "with_time_zone", 
                   "literal", "hex_byte_literal", "char_string_literal", 
                   "unicode_char_string_literal", "hex_char_string_literal", 
                   "integer_literal", "hex_integer_literal", "float_literal", 
                   "character_set_prefix", "date_literal", "time_literal", 
                   "timestamp_literal", "interval_literal", "interval_qualifier", 
                   "period_literal", "column_name", "unqualified_column_name", 
                   "unqualified_name", "object_name", "table_name", "procedure_name", 
                   "function_name", "macro_name", "database_name", "user_name", 
                   "role_name", "profile_name", "alias_name", "variable_name", 
                   "parameter_name", "label_name", "condition_name", "cursor_name", 
                   "statement_name", "statistics_name", "udt_name", "attribute_name", 
                   "method_name", "anchor_name", "nonreserved_word", "query_expr", 
                   "query_term", "with_deleted_rows", "as_json", "select_list", 
                   "top_n", "normalize", "all_operator", "selected_columns", 
                   "selected_column", "into_clause", "from_clause", "from_spec", 
                   "join_source_spec", "join_joined_spec", "from_pivot_spec", 
                   "from_unpivot_spec", "table_reference", "join_clause", 
                   "join_on_clause", "foreign_table_reference", "foreign_function_reference", 
                   "foreign_on_clause", "exported_data", "foreign_using_clause", 
                   "foreign_parameter", "foreign_returns_clause", "server_name_reference", 
                   "table_function_reference", "udt_table_function", "unnest_table_function", 
                   "table_function_returns_clause", "table_function_local_order_by_clause", 
                   "table_function_hash_by_clause", "table_operator_reference", 
                   "xmltable_operator", "calcmatrix_table_operator", "read_nos_table_operator", 
                   "script_table_operator", "td_unpivot_table_operator", 
                   "write_nos_table_operator", "json_table_table_operator", 
                   "json_keys_table_operator", "json_shred_table_operator", 
                   "generic_table_operator", "table_operator_on_clause", 
                   "table_operator_execute_clause", "table_operator_out_table_clause", 
                   "table_operator_using_clause", "table_operator_using_spec", 
                   "json_keys_using_name_value_pair", "hash_or_partition_by", 
                   "subquery_reference", "location", "read_nos_option", 
                   "write_nos_option", "with_clause", "with_clause_by_phrase", 
                   "with_clause_title_phrase", "where_clause", "group_by_clause", 
                   "group_by_spec", "ordinary_grouping_set", "ordinary_grouping_set_parenthesized", 
                   "empty_grouping_set", "rollup_option", "cube_option", 
                   "grouping_sets_option", "grouping_sets_spec", "having_clause", 
                   "qualify_clause", "sample_clause", "sample_fraction_description", 
                   "sample_count_description", "sample_when_clause", "expand_on_clause", 
                   "order_by_clause", "order_by_spec_full", "order_by_spec_asc_desc_only", 
                   "with_check_option", "logical_expr", "scalar_expr", "tuple", 
                   "tuple_attribute", "case_expr", "valued_case_expr", "searched_case_expr", 
                   "coalesce_expr", "nullif_expr", "interval_expr_base", 
                   "interval_expr_parenthesized", "interval_expr_start_end_phrase", 
                   "function_invocation", "aggregate_function", "analytic_function", 
                   "arithmetic_function", "array_function", "attribute_function", 
                   "byte_function", "builtin_function", "calendar_function", 
                   "comparison_function", "compression_function", "conversion_function", 
                   "date_function", "hash_function", "lob_function", "map_function", 
                   "nvl_funtion", "period_function", "regexp_function", 
                   "string_function", "json_function", "xml_function", "other_function", 
                   "partitioning_expr", "td_sysfnlib", "td_sysxml", "syslib", 
                   "td_server_db", "translation_mapping", "attribute_modification", 
                   "returns_clause", "attribute_modification_option", "teradata_type_conversion", 
                   "teradata_type_conversion_data_attribute", "case_spec", 
                   "range_expr", "range_list", "range_expr_1", "range_expr_2", 
                   "range_expr_3", "range_spec", "hash_bucket_number_expr", 
                   "window_spec", "window_spec_without_rows", "window_spec_with_ties", 
                   "window_partition_by", "window_order_by", "window_rows", 
                   "json_param_spec", "xml_query_argument", "xml_query_variable_spec", 
                   "xml_attribute_declaration", "xml_attribute_spec", "xml_forest_element_spec", 
                   "xml_value_declaration", "xml_namespace_declaration", 
                   "xml_namespace_spec", "xml_columns_spec", "xml_regular_column_definition", 
                   "xml_encoding", "xml_query_on_empty", "xml_returning_spec", 
                   "xml_content_option_spec", "ignore_respect_nulls", "number_of_rows", 
                   "with_ties", "pivot", "pivot_spec", "pivot_with_phrase", 
                   "pivot_agg_func_spec", "pivot_for_phrase", "pivot_with_spec", 
                   "pivot_expr_spec_scalar", "pivot_expr_spec_list", "unpivot", 
                   "unpivot_spec", "unpivot_column_name_spec_single", "unpivot_column_name_spec_list", 
                   "at_timezone", "elements_list", "scalar_expr_list", "scalar_expr_list_comma_separated", 
                   "column_list", "subquery", "column_spec", "variable_reference", 
                   "cursor_variable_reference", "macro_parameter_reference", 
                   "array_scope_reference", "comparison_operator", "quantifier", 
                   "request_modifier", "locking_request_modifier", "locking_spec", 
                   "lock_type", "with_request_modifier", "cte_spec", "regular_cte_spec", 
                   "recursive_cte_spec", "using_request_modifier", "using_spec", 
                   "explain_request_modifier" ]

    EOF = Token.EOF
    ABORT=1
    ABORTSESSION=2
    ABS=3
    ACCESS_LOCK=4
    ACCOUNT=5
    ACOS=6
    ACOSH=7
    ADD=8
    ADD_MONTHS=9
    ADMIN=10
    AFTER=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    AMP=15
    AND=16
    ANSIDATE=17
    ANY=18
    ARGLPAREN=19
    AS=20
    ASC=21
    ASIN=22
    ASINH=23
    AT=24
    ATAN=25
    ATAN2=26
    ATANH=27
    ATOMIC=28
    AUTHORIZATION=29
    AVE=30
    AVERAGE=31
    AVG=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BIGINT=36
    BINARY=37
    BLOB=38
    BOTH=39
    BT=40
    BUT=41
    BY=42
    BYTE=43
    BYTEINT=44
    BYTES=45
    CALL=46
    CASE=47
    CASE_N=48
    CASESPECIFIC=49
    CAST=50
    CD=51
    CHAR=52
    CHAR_LENGTH=53
    CHAR2HEXINT=54
    CHARACTER=55
    CHARACTER_LENGTH=56
    CHARACTERS=57
    CHARS=58
    CHECK=59
    CHECKPOINT=60
    CLASS=61
    CLOB=62
    CLOSE=63
    CLUSTER=64
    CM=65
    COALESCE=66
    COLLATION=67
    COLLECT=68
    COLUMN=69
    COMMENT=70
    COMMIT=71
    COMPRESS=72
    CONNECT=73
    CONSTRAINT=74
    CONSTRUCTOR=75
    CONSUME=76
    CONTAINS=77
    CONTINUE=78
    CONVERT_TABLE_HEADER=79
    CORR=80
    COS=81
    COSH=82
    COUNT=83
    COVAR_POP=84
    COVAR_SAMP=85
    CREATE=86
    CROSS=87
    CS=88
    CSUM=89
    CT=90
    CTCONTROL=91
    CUBE=92
    CURRENT=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CV=100
    CYCLE=101
    DATABASE=102
    DATABLOCKSIZE=103
    DATE=104
    DATEFORM=105
    DAY=106
    DEALLOCATE=107
    DEC=108
    DECIMAL=109
    DECLARE=110
    DEFAULT=111
    DEFERRED=112
    DEGREES=113
    DEL=114
    DELETE=115
    DESC=116
    DETERMINISTIC=117
    DIAGNOSTIC=118
    DICTIONARY=119
    DISABLED=120
    DISTINCT=121
    DO=122
    DOMAIN=123
    DOUBLE=124
    DROP=125
    DUAL=126
    DUMP=127
    DYNAMIC=128
    EACH=129
    ECHO=130
    ELSE=131
    ELSEIF=132
    ENABLED=133
    END=134
    EQ=135
    EQUALS=136
    ERROR=137
    ERRORFILES=138
    ERRORTABLES=139
    ESCAPE=140
    ET=141
    EXCEPT=142
    EXEC=143
    EXECUTE=144
    EXISTS=145
    EXIT=146
    EXP=147
    EXPAND=148
    EXPANDING=149
    EXPLAIN=150
    EXTERNAL=151
    EXTRACT=152
    FALLBACK=153
    FASTEXPORT=154
    FETCH=155
    FIRST=156
    FLOAT=157
    FLUSH=158
    FOR=159
    FOREIGN=160
    FORMAT=161
    FOUND=162
    FREESPACE=163
    FROM=164
    FULL=165
    FUNCTION=166
    FUNCTIONDESCRIPTOR=167
    GE=168
    GENERATED=169
    GET=170
    GIVE=171
    GRANT=172
    GRAPHIC=173
    GROUP=174
    GROUPING=175
    GT=176
    HANDLER=177
    HASH=178
    HASHAMP=179
    HASHBAKAMP=180
    HASHBUCKET=181
    HASHROW=182
    HAVING=183
    HELP=184
    HOUR=185
    ID2BIGINT=186
    IDENTITY=187
    IF=188
    IMMEDIATE=189
    IN=190
    INCONSISTENT=191
    INDEX=192
    INITIATE=193
    INNER=194
    INOUT=195
    INPUT=196
    INS=197
    INSERT=198
    INSTANCE=199
    INSTEAD=200
    INT=201
    INTEGER=202
    INTEGERDATE=203
    INTERSECT=204
    INTERVAL=205
    INTO=206
    IS=207
    ITERATE=208
    JAR=209
    JOIN=210
    JOURNAL=211
    KEY=212
    KURTOSIS=213
    LANGUAGE=214
    LARGE=215
    LE=216
    LEADING=217
    LEAVE=218
    LEFT=219
    LIKE=220
    LIMIT=221
    LN=222
    LOADING=223
    LOCAL=224
    LOCATOR=225
    LOCK=226
    LOCKING=227
    LOG=228
    LOGGING=229
    LOGON=230
    LONG=231
    LOOP=232
    LOWER=233
    LT=234
    MACRO=235
    MAP=236
    MAVG=237
    MAX=238
    MAXIMUM=239
    MCHARACTERS=240
    MDIFF=241
    MERGE=242
    METHOD=243
    MIN=244
    MINDEX=245
    MINIMUM=246
    MINUS=247
    MINUTE=248
    MLINREG=249
    MLOAD=250
    MOD=251
    MODE=252
    MODIFIES=253
    MODIFY=254
    MONITOR=255
    MONRESOURCE=256
    MONSESSION=257
    MONTH=258
    MSUBSTR=259
    MSUM=260
    MULTISET=261
    NAMED=262
    NATURAL=263
    NE=264
    NEW=265
    NEW_TABLE=266
    NEXT=267
    NO=268
    NONE=269
    NONTEMPORAL=270
    NORMALIZE=271
    NOT=272
    NOWAIT=273
    NULL=274
    NULLIF=275
    NULLIFZERO=276
    NUMBER=277
    NUMERIC=278
    OBJECT=279
    OBJECTS=280
    OCTET_LENGTH=281
    OF=282
    OFF=283
    OLD=284
    OLD_TABLE=285
    ON=286
    ONLY=287
    OPEN=288
    OPTION=289
    OR=290
    ORDER=291
    ORDERING=292
    OUT=293
    OUTER=294
    OVER=295
    OVERLAPS=296
    OVERRIDE=297
    PARAMETER=298
    PASSWORD=299
    PERCENT=300
    PERCENT_RANK=301
    PERM=302
    PERMANENT=303
    POSITION=304
    PRECISION=305
    PREPARE=306
    PRESERVE=307
    PRIMARY=308
    PRIVILEGES=309
    PROCEDURE=310
    PROFILE=311
    PROTECTION=312
    PUBLIC=313
    QUALIFIED=314
    QUALIFY=315
    QUANTILE=316
    QUEUE=317
    RADIANS=318
    RANDOM=319
    RANGE_N=320
    RANK=321
    READS=322
    REAL=323
    RECURSIVE=324
    REFERENCES=325
    REFERENCING=326
    REGR_AVGX=327
    REGR_AVGY=328
    REGR_COUNT=329
    REGR_INTERCEPT=330
    REGR_R2=331
    REGR_SLOPE=332
    REGR_SXX=333
    REGR_SXY=334
    REGR_SYY=335
    RELATIVE=336
    RELEASE=337
    RENAME=338
    REPEAT=339
    REPLACE=340
    REPLCONTROL=341
    REPLICATION=342
    REQUEST=343
    RESIGNAL=344
    RESTART=345
    RESTORE=346
    RESULT=347
    RESUME=348
    RET=349
    RETRIEVE=350
    RETURN=351
    RETURNS=352
    REVALIDATE=353
    REVOKE=354
    RIGHT=355
    RIGHTS=356
    ROLE=357
    ROLLBACK=358
    ROLLFORWARD=359
    ROLLUP=360
    ROW=361
    ROW_NUMBER=362
    ROWID=363
    ROWS=364
    SAMPLE=365
    SAMPLEID=366
    SCROLL=367
    SECOND=368
    SEL=369
    SELECT=370
    SESSION=371
    SET=372
    SETRESRATE=373
    SETS=374
    SETSESSRATE=375
    SHOW=376
    SIGNAL=377
    SIN=378
    SINH=379
    SKEW=380
    SMALLINT=381
    SOME=382
    SOUNDEX=383
    SPECIFIC=384
    SPOOL=385
    SQL=386
    SQLEXCEPTION=387
    SQLTEXT=388
    SQLWARNING=389
    SQRT=390
    SS=391
    START=392
    STARTUP=393
    STATEMENT=394
    STATISTICS=395
    STDDEV_POP=396
    STDDEV_SAMP=397
    STEPINFO=398
    STRING_CS=399
    SUBSCRIBER=400
    SUBSTR=401
    SUBSTRING=402
    SUM=403
    SUMMARY=404
    SUSPEND=405
    TABLE=406
    TAN=407
    TANH=408
    TBL_CS=409
    TD_ANYTYPE=410
    TD_AUTHID=411
    TD_HOST=412
    TD_ROWLOADID=413
    TD_ROWREVISION=414
    TD_ROWSIZE=415
    TD_VALIST=416
    TEMPORARY=417
    TERMINATE=418
    THEN=419
    THRESHOLD=420
    TIME=421
    TIMESTAMP=422
    TIMEZONE_HOUR=423
    TIMEZONE_MINUTE=424
    TITLE=425
    TO=426
    TOP=427
    TRACE=428
    TRAILING=429
    TRANSACTION=430
    TRANSACTIONTIME=431
    TRANSFORM=432
    TRANSLATE=433
    TRANSLATE_CHK=434
    TRIGGER=435
    TRIM=436
    TYPE=437
    UC=438
    UDTCASTAS=439
    UDTCASTLPAREN=440
    UDTMETHOD=441
    UDTTYPE=442
    UDTUSAGE=443
    UESCAPE=444
    UNDEFINED=445
    UNDO=446
    UNION=447
    UNIQUE=448
    UNTIL=449
    UNTIL_CHANGED=450
    UNTIL_CLOSED=451
    UPD=452
    UPDATE=453
    UPPER=454
    UPPERCASE=455
    USER=456
    USING=457
    VALIDTIME=458
    VALUE=459
    VALUES=460
    VAR_POP=461
    VAR_SAMP=462
    VARBYTE=463
    VARCHAR=464
    VARGRAPHIC=465
    VARIANT_TYPE=466
    VARYING=467
    VIEW=468
    VOLATILE=469
    WHEN=470
    WHERE=471
    WHILE=472
    WIDTH_BUCKET=473
    WITH=474
    WITHOUT=475
    WORK=476
    XMLPLAN=477
    YEAR=478
    ZEROIFNULL=479
    ZONE=480
    ALIAS=481
    DESCRIPTOR=482
    GO=483
    GOTO=484
    INDICATOR=485
    PRIVATE=486
    WAIT=487
    ABORTSESSIONS=488
    ABSENT=489
    ACCESS=490
    ACCORDING=491
    ACCUMULATE=492
    AG=493
    AGGGEOMINTERSECTION=494
    AGGGEOMUNION=495
    ALLDBQL=496
    ALLOCATE=497
    ALLOCATION=498
    ALLOW=499
    ALLPARAMS=500
    ALLTDWM=501
    ALWAYS=502
    AMPCOUNT=503
    ANALYSIS=504
    ANCHOR=505
    ANCHOR_HOUR=506
    ANCHOR_MILLISECOND=507
    ANCHOR_MINUTE=508
    ANCHOR_SECOND=509
    APPLNAME=510
    ARCHIVE=511
    ARRAY=512
    ARRAY_ADD=513
    ARRAY_AGG=514
    ARRAY_AVG=515
    ARRAY_COMPARE=516
    ARRAY_CONCAT=517
    ARRAY_COUNT_DISTINCT=518
    ARRAY_DIV=519
    ARRAY_EQ=520
    ARRAY_GE=521
    ARRAY_GET=522
    ARRAY_GT=523
    ARRAY_LE=524
    ARRAY_LT=525
    ARRAY_MAX=526
    ARRAY_MIN=527
    ARRAY_MOD=528
    ARRAY_MUL=529
    ARRAY_NE=530
    ARRAY_SUB=531
    ARRAY_SUM=532
    ARRAY_UPDATE=533
    ARRAY_UPDATE_STRIDE=534
    ASCII=535
    ASSIGNMENT=536
    ATTR=537
    ATTRIBUTE=538
    ATTRIBUTES=539
    ATTRIBUTION=540
    ATTRS=541
    AUTH=542
    AUTO=543
    AUTOTEMP=544
    AVRO=545
    BIT_LENGTH=546
    BITAND=547
    BITNOT=548
    BITOR=549
    BITXOR=550
    BLOCKCOMPRESSION=551
    BLOCKCOMPRESSIONALGORITHM=552
    BLOCKCOMPRESSIONLEVEL=553
    BOM=554
    BOTTOM=555
    BSON=556
    C=557
    CALENDAR=558
    CALLED=559
    CALLER=560
    CAMSET=561
    CAMSET_L=562
    CAPTURE=563
    CARDINALITY=564
    CEIL=565
    CEILING=566
    CHANGERATE=567
    CHARACTERISTICS=568
    CHARSET=569
    CHARSET_COLL=570
    CHECKSUM=571
    CHR=572
    CLASS_ORIGIN=573
    CLICKLAG=574
    CLIENT=575
    CNT=576
    COLOCATE=577
    COLUMNMETA=578
    COLUMNS=579
    COLUMNSPERINDEX=580
    COLUMNSPERJOININDEX=581
    COMMAND_FUNCTION=582
    COMMAND_FUNCTION_CODE=583
    COMPARISON=584
    COMPILE=585
    CONCAT=586
    CONCURRENT=587
    CONDITION=588
    CONDITION_IDENTIFIER=589
    CONDITION_NUMBER=590
    CONTAINED=591
    CONTAINEDTOKEN=592
    CONTENT=593
    CONTIGUOUS=594
    COST=595
    COSTS=596
    COUNTSET=597
    CPP=598
    CPUTIME=599
    CPUTIMENORM=600
    CREATEDATASET=601
    CREATOR=602
    CUME_DIST=603
    CURDATE=604
    CURTIME=605
    DATA=606
    DATASET=607
    DAY_OF_CALENDAR=608
    DAY_OF_MONTH=609
    DAY_OF_WEEK=610
    DAY_OF_YEAR=611
    DAYNUMBER_OF_CALENDAR=612
    DAYNUMBER_OF_MONTH=613
    DAYNUMBER_OF_WEEK=614
    DAYNUMBER_OF_YEAR=615
    DAYOCCURRENCE_OF_MONTH=616
    DBA=617
    DBC=618
    DEBUG=619
    DECAMSET=620
    DECAMSET_L=621
    DECODE=622
    DECOMPRESS=623
    DEFINER=624
    DELIMITER=625
    DELTA_T=626
    DEMOGRAPHICS=627
    DENIALS=628
    DENSE=629
    DENSE_RANK=630
    DESCRIBE=631
    DETAILED=632
    DIAGNOSTICS=633
    DIGITS=634
    DIMENSION=635
    DOCUMENT=636
    DOT=637
    DOWN=638
    DR=639
    DUPCOUNT=640
    DUPCOUNTCUM=641
    EBCDIC=642
    EDITDISTANCE=643
    ELAPSEDSEC=644
    ELAPSEDTIME=645
    ELEMENT=646
    ELZS_H=647
    EMITNULL=648
    EMPTY=649
    EMPTY_BLOB=650
    EMPTY_CLOB=651
    ENCODE=652
    ENCODING=653
    ENCRYPT=654
    ERRORS=655
    ERRORTBL=656
    EVENTCOLUMN=657
    EXCEPTION=658
    EXCL=659
    EXCLUDE=660
    EXCLUDING=661
    EXCLUSIVE=662
    EXPIRE=663
    EXPORT=664
    EXPORTWIDTH=665
    FALSE=666
    FEATUREINFO=667
    FILE=668
    FILL=669
    FILTER=670
    FINAL=671
    FIRST_NOTNULL=672
    FIRST_VALUE=673
    FLOOR=674
    FOLLOWING=675
    FOREIGNFUNCTION=676
    FORTOKEN=677
    FRIDAY=678
    FROM_BYTES=679
    FUNCTIONPARAMETER=680
    G=681
    GETBIT=682
    GETPSFVERSION=683
    GETQUERYBAND=684
    GETQUERYBANDVALUE=685
    GETTIMEZONEDISPLACEMENT=686
    GLOBAL=687
    GLOP=688
    GREATEST=689
    HIGH=690
    HOST=691
    IDENTIFYDATABASE=692
    IDENTIFYSESSION=693
    IDENTIFYTABLE=694
    IDENTIFYUSER=695
    IFP=696
    IGNORE=697
    IMMEDIATELY=698
    IMPORT=699
    INCLUDE=700
    INCLUDING=701
    INCREMENT=702
    INCREMENTAL=703
    INDENT=704
    INDEXESPERTABLE=705
    INDEXMAINTMODE=706
    INIT=707
    INITCAP=708
    INLINE=709
    INSTANTIABLE=710
    INSTR=711
    INTERNAL=712
    INVOKER=713
    IOCOUNT=714
    IPARTITION=715
    ISOLATED=716
    ISOLATION=717
    JAVA=718
    JIS_COLL=719
    JSON=720
    JSON_AGG=721
    JSON_COMPOSE=722
    K=723
    KANJI1=724
    KANJISJIS=725
    KBYTE=726
    KBYTES=727
    KEEP=728
    KILOBYTES=729
    LAG=730
    LAST=731
    LAST_DAY=732
    LAST_NOTNULL=733
    LAST_VALUE=734
    LATIN=735
    LDIFF=736
    LEAD=737
    LEAST=738
    LENGTH=739
    LEVEL=740
    LIST=741
    LOAD=742
    LOCATE=743
    LOCKEDUSEREXPIRE=744
    LOW=745
    LPAD=746
    LTRIM=747
    LZCOMP=748
    LZCOMP_L=749
    LZDECOMP=750
    LZDECOMP_L=751
    M=752
    MAD=753
    MANUAL=754
    MAPPING=755
    MATCHED=756
    MAX_CHOOSE=757
    MAXCHAR=758
    MAXINTERVALS=759
    MAXLOGONATTEMPTS=760
    MAXVALUE=761
    MAXVALUELENGTH=762
    MEDIAN=763
    MEDIUM=764
    MEETS=765
    MEMBER=766
    MERGEBLOCKRATIO=767
    MESSAGE_LENGTH=768
    MESSAGE_TEXT=769
    MIN_CHOOSE=770
    MINCHAR=771
    MINVALUE=772
    MODIFIED=773
    MONDAY=774
    MONITORQUERYBAND=775
    MONITORSESSIONRATE=776
    MONITORVERSION=777
    MONTH_BEGIN=778
    MONTH_END=779
    MONTH_OF_CALENDAR=780
    MONTH_OF_QUARTER=781
    MONTH_OF_YEAR=782
    MONTHNUMBER_OF_CALENDAR=783
    MONTHNUMBER_OF_QUARTER=784
    MONTHNUMBER_OF_YEAR=785
    MONTHS_BETWEEN=786
    MORE_=787
    MULTINATIONAL=788
    NAME=789
    NAMESPACE=790
    NEVER=791
    NEXT_DAY=792
    NGRAM=793
    NIL=794
    NODDLTEXT=795
    NODE=796
    NONOPTCOST=797
    NONOPTINIT=798
    NONSEQUENCED=799
    NORIGHT=800
    NOSEXTRACTVARFROMPATH=801
    NOTATION=802
    NOW=803
    NPATH=804
    NTH=805
    NULLS=806
    NUMFPFNS=807
    NUMTODSINTERVAL=808
    NUMTOYMINTERVAL=809
    NVL=810
    NVL2=811
    NVP=812
    OA=813
    OADD_MONTHS=814
    OCOUNT=815
    ODELETE=816
    OEXISTS=817
    OEXTEND=818
    OFIRST=819
    OLAST=820
    OLD_NEW_TABLE=821
    OLIMIT=822
    ONEXT=823
    ONLINE=824
    OPRIOR=825
    OPTIONS=826
    ORDERBYVALUES=827
    ORDERED_ANALYTIC=828
    ORDINALITY=829
    OREPLACE=830
    OTRANSLATE=831
    OTRIM=832
    OVERLAYS=833
    OWNER=834
    P_INTERSECT=835
    P_NORMALIZE=836
    PARAMID=837
    PARAMINFO=838
    PARENT=839
    PARTITION=840
    PARTITION_L=841
    PARTITIONED=842
    PARTITIONNAMES=843
    PASS=844
    PASSING=845
    PATH_GENERATOR=846
    PATH_START=847
    PATH_SUMMARIZER=848
    PATTERN=849
    PERCENTILE=850
    PERCENTILE_CONT=851
    PERCENTILE_DISC=852
    PERIOD=853
    PIVOT=854
    PORTION=855
    POWER=856
    PRECEDES=857
    PRECEDING=858
    PREFIX=859
    PRINT=860
    PRIOR=861
    PROTECTED=862
    QUARTER_BEGIN=863
    QUARTER_END=864
    QUARTER_OF_CALENDAR=865
    QUARTER_OF_YEAR=866
    QUARTERNUMBER_OF_CALENDAR=867
    QUARTERNUMBER_OF_YEAR=868
    QUERY=869
    QUERY_BAND=870
    QUOTECHAR=871
    RANDOMIZED=872
    RANGE=873
    RANGE_L=874
    RAPIDFIRE=875
    RDIFF=876
    READ=877
    RECALC=878
    REGEXP_INSTR=879
    REGEXP_REPLACE=880
    REGEXP_SIMILAR=881
    REGEXP_SUBSTR=882
    REPLACEMENT=883
    RESET=884
    RESPECT=885
    RESTRICTWORDS=886
    RETAIN=887
    RETURNED_SQLSTATE=888
    RETURNING=889
    REUSE=890
    ROOT=891
    ROTATELEFT=892
    ROTATERIGHT=893
    ROUND=894
    ROW_COUNT=895
    ROWIDGEN=896
    ROWIDGEN2=897
    RPAD=898
    RTRIM=899
    RU=900
    RULES=901
    RULESET=902
    SAMPLES=903
    SATURDAY=904
    SCHEMA=905
    SCRIPT=906
    SCRIPT_COMMAND=907
    SEARCHSPACE=908
    SEARCHUIFDBPATH=909
    SECURITY=910
    SEED=911
    SELF=912
    SEQ=913
    SEQUENCE=914
    SEQUENCED=915
    SERIALIZABLE=916
    SERVER=917
    SESSIONIZE=918
    SETBIT=919
    SETRESOURCERATE=920
    SETSESSIONACCOUNT=921
    SETSESSIONRATE=922
    SHARE=923
    SHIFTLEFT=924
    SHIFTRIGHT=925
    SIGN=926
    SIZE=927
    SNAPPY_COMPRESS=928
    SNAPPY_DECOMPRESS=929
    SOURCE=930
    SPARSE=931
    SPECCHAR=932
    SPL=933
    SQLSTATE=934
    SR=935
    ST_GEOMETRY=936
    STAT=937
    STATIC=938
    STATS=939
    STATSUSAGE=940
    STORAGE=941
    STRIP=942
    STRTOK=943
    STYLE=944
    SUBBITSTR=945
    SUBCLASS_ORIGIN=946
    SUCCEEDS=947
    SUMMARYONLY=948
    SUNDAY=949
    SYMBOLS=950
    SYSTEM=951
    SYSTEM_TIME=952
    SYSTEMTEST=953
    TARGET=954
    TD_ARRAY2P=955
    TD_DATASET=956
    TD_DAY_OF_CALENDAR=957
    TD_DAY_OF_MONTH=958
    TD_DAY_OF_WEEK=959
    TD_DAY_OF_YEAR=960
    TD_GENERAL=961
    TD_GETTIMEBUCKET=962
    TD_INTERNAL=963
    TD_LZ_COMPRESS=964
    TD_LZ_DECOMPRESS=965
    TD_MONTH_OF_CALENDAR=966
    TD_MONTH_OF_QUARTER=967
    TD_MONTH_OF_YEAR=968
    TD_QUARTER_OF_CALENDAR=969
    TD_QUARTER_OF_YEAR=970
    TD_TIME_BUCKET_NUMBER=971
    TD_WEEK_OF_CALENDAR=972
    TD_WEEK_OF_MONTH=973
    TD_WEEK_OF_YEAR=974
    TD_WEEKDAY_OF_MONTH=975
    TD_YEAR_OF_CALENDAR=976
    TDWMEVENT=977
    TDWMEXCEPTION=978
    TDWMHISTORY=979
    TEMPORAL_DATE=980
    TEMPORAL_TIMESTAMP=981
    TEXT=982
    THRESHOLDPERCENT=983
    THROUGH=984
    THURSDAY=985
    TIES=986
    TIMECODE=987
    TIMECOLUMN=988
    TIMEOUT=989
    TIMESTAMPCOLUMN=990
    TO_BYTE=991
    TO_BYTES=992
    TO_CHAR=993
    TO_DATE=994
    TO_DSINTERVAL=995
    TO_NUMBER=996
    TO_TIMESTAMP=997
    TO_TIMESTAMP_TZ=998
    TO_YMINTERVAL=999
    TOTOKEN=1000
    TPA=1001
    TRANSACTION_ACTIVE=1002
    TRANSUNICODETOUTF8=1003
    TRANSUTF8TOUNICODE=1004
    TRUE=1005
    TRUNC=1006
    TRUST_ONLY=1007
    TTGRANULARITY=1008
    TUESDAY=1009
    UBJSON=1010
    UCASE=1011
    UDFSEARCHPATH=1012
    UNBOUNDED=1013
    UNCOMMITTED=1014
    UNICODE=1015
    UNKNOWN=1016
    UNPIVOT=1017
    USE=1018
    USECOUNT=1019
    UTILITYINFO=1020
    VARRAY=1021
    VERBOSE=1022
    VERSION=1023
    VERSIONING=1024
    WARNING=1025
    WEDNESDAY=1026
    WEEK_BEGIN=1027
    WEEK_END=1028
    WEEK_OF_CALENDAR=1029
    WEEK_OF_MONTH=1030
    WEEK_OF_YEAR=1031
    WEEKDAY_OF_MONTH=1032
    WEEKNUMBER_OF_CALENDAR=1033
    WEEKNUMBER_OF_MONTH=1034
    WEEKNUMBER_OF_QUARTER=1035
    WEEKNUMBER_OF_YEAR=1036
    WHITESPACE=1037
    WINDOWSIZE=1038
    WITHIN=1039
    WORKLOAD=1040
    WRITE=1041
    XML=1042
    XMLAGG=1043
    XMLATTRIBUTES=1044
    XMLCOMMENT=1045
    XMLCONCAT=1046
    XMLDECLARATION=1047
    XMLDOCUMENT=1048
    XMLELEMENT=1049
    XMLFOREST=1050
    XMLNAMESPACES=1051
    XMLPARSE=1052
    XMLPI=1053
    XMLQUERY=1054
    XMLSCHEMA=1055
    XMLSERIALIZE=1056
    XMLTABLE=1057
    XMLTEXT=1058
    XMLTYPE=1059
    XMLVALIDATE=1060
    YEAR_BEGIN=1061
    YEAR_END=1062
    YEAR_OF_CALENDAR=1063
    YEARNUMBER_OF_CALENDAR=1064
    ZLIB=1065
    BUCKET=1066
    COMMITTED=1067
    CREATEXML=1068
    CS_LATIN=1069
    CS_UNICODE=1070
    CS_KANJISJIS=1071
    CS_GRAPHIC=1072
    CSV=1073
    CSVLD=1074
    DATASIZE=1075
    DAYOFMONTH=1076
    DAYS=1077
    DEFINITION=1078
    DELETED=1079
    FAST=1080
    LISTAGG=1081
    PATH=1082
    REGEXP_SPLIT_TO_TABLE=1083
    REVERSE=1084
    SAS=1085
    SQLTABLE=1086
    STRTOK_SPLIT_TO_TABLE=1087
    SYSLIB=1088
    SYSUDTLIB=1089
    TD_SERVER_DB=1090
    TD_SYSFNLIB=1091
    TD_SYSXML=1092
    TIMEDATEWZCONTROL=1093
    TRUST=1094
    TRYCAST=1095
    UDT=1096
    USAGE=1097
    VARIANT=1098
    WEEK=1099
    WIDTH=1100
    XMLPUBLISH=1101
    XMLPUBLISH_STREAM=1102
    XMLSPLIT=1103
    LATIN_TO_UNICODE=1104
    UNICODE_TO_LATIN=1105
    LOCALE_TO_UNICODE=1106
    UNICODE_TO_LOCALE=1107
    ASBSON=1108
    ASBSONTEXT=1109
    COMBINE=1110
    EXISTVALUE=1111
    JSONEXTRACT=1112
    JSONEXTRACTVALUE=1113
    JSONEXTRACTLARGEVALUE=1114
    KEYCOUNT=1115
    METADATA=1116
    STORAGE_SIZE=1117
    CREATESCHEMABASEDXML=1118
    CREATENONSCHEMABASEDXML=1119
    EXISTSNODE=1120
    ISCONTENT=1121
    ISDOCUMENT=1122
    ISSCHEMAVALID=1123
    ISSCHEMAVALIDATED=1124
    XMLEXTRACT=1125
    XMLTRANSFORM=1126
    PROC_ID=1127
    LOCATION=1128
    PAYLOAD=1129
    TRUSTED=1130
    PATHPATTERN=1131
    MANIFEST=1132
    ROWFORMAT=1133
    STOREDAS=1134
    HEADER=1135
    STRIP_EXTERIOR_SPACES=1136
    STRIP_ENCLOSING_CHAR=1137
    RLS=1138
    SINGLE=1139
    MULTIPLE=1140
    JSON_COMPRESS=1141
    JSON_DECOMPRESS=1142
    TS_COMPRESS=1143
    TS_DECOMPRESS=1144
    CONTIGUOUSMAPAMPS=1145
    SPARSEMAPAMPS=1146
    SPARSETABLEAMPS=1147
    UNNEST=1148
    CALCMATRIX=1149
    PHRASE=1150
    CALCTYPE=1151
    OUTPUT=1152
    NULL_HANDLING=1153
    READ_NOS=1154
    BUFFERSIZE=1155
    RETURNTYPE=1156
    SAMPLE_PERC=1157
    FULLSCAN=1158
    TD_UNPIVOT=1159
    VALUE_COLUMNS=1160
    UNPIVOT_COLUMN=1161
    COLUMN_LIST=1162
    COLUMN_ALIAS_LIST=1163
    INCLUDE_NULLS=1164
    WRITE_NOS=1165
    NAMING=1166
    MANIFESTFILE=1167
    MANIFESTONLY=1168
    OVERWRITE=1169
    INCLUDE_ORDERING=1170
    INCLUDE_HASHBY=1171
    MAXOBJECTSIZE=1172
    COMPRESSION=1173
    ARRAY_TO_JSON=1174
    BSON_CHECK=1175
    GEOJSONFROMGEOM=1176
    GEOMFROMGEOJSON=1177
    JSON_CHECK=1178
    JSONGETVALUE=1179
    JSONMETADATA=1180
    NVP2JSON=1181
    TD_JSONSHRED=1182
    JSON_KEYS=1183
    JSON_TABLE=1184
    DEPTH=1185
    QUOTES=1186
    ROWEXPR=1187
    COLEXPR=1188
    RETURNTYPES=1189
    NOCASE=1190
    TRUNCATE=1191
    LINK=1192
    OBJECT_NAME=1193
    UNSIGNED_INTEGER=1194
    HEX_BYTE_LITERAL=1195
    HEX_INTEGER_LITERAL=1196
    FLOAT_LITERAL=1197
    DATE_STRING=1198
    TIME_STRING=1199
    TIMESTAMP_STRING=1200
    PERIOD_STRING=1201
    UNICODE_STRING_LEADING=1202
    CHAR_STRING=1203
    HEX_STRING=1204
    PASSWORD_STRING=1205
    SEMICOLON=1206
    COLON=1207
    COMMA=1208
    DOT_=1209
    AT_SIGN=1210
    CARET=1211
    QUESTION_MARK=1212
    OPEN_PAR=1213
    CLOSE_PAR=1214
    OPEN_SQ_BRACKET=1215
    CLOSE_SQ_BRACKET=1216
    CONCATENATE=1217
    BROKEN_CONCATENATE=1218
    MUL_SIGN=1219
    DIV_SIGN=1220
    PLUS_SIGN=1221
    MINUS_SIGN=1222
    EXPONENTIATION=1223
    EQUALS_SIGN=1224
    NOT_EQUALS_SIGN=1225
    NOT_EQUALS_SIGN_TD=1226
    LT_SIGN=1227
    LE_SIGN=1228
    GT_SIGN=1229
    GE_SIGN=1230
    SINGLE_LINE_COMMENT=1231
    MULTI_LINE_COMMENT=1232
    WS=1233

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Dml_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Select_statContext,0)


        def select_and_consume_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Select_and_consume_statContext,0)


        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Delete_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Insert_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Update_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Merge_statContext,0)


        def collect_demographics_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Collect_demographics_statContext,0)


        def collect_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Collect_statistics_qcd_form_statContext,0)


        def drop_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Drop_statistics_qcd_form_statContext,0)


        def dump_explain_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Dump_explain_statContext,0)


        def initiate_index_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Initiate_index_analysis_statContext,0)


        def initiate_partition_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Initiate_partition_analysis_statContext,0)


        def insert_explain_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Insert_explain_statContext,0)


        def restart_index_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Restart_index_analysis_statContext,0)


        def call_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Call_statContext,0)


        def execute_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Execute_statContext,0)


        def commit_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Commit_statContext,0)


        def rollback_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Rollback_statContext,0)


        def abort_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Abort_statContext,0)


        def begin_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Begin_transaction_statContext,0)


        def end_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.End_transaction_statContext,0)


        def locking_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_statContext,0)


        def comment_retrieving_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Comment_retrieving_statContext,0)


        def checkpoint_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Checkpoint_statContext,0)


        def echo_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Echo_statContext,0)


        def null_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Null_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_dml_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_stat" ):
                listener.enterDml_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_stat" ):
                listener.exitDml_stat(self)




    def dml_stat(self):

        localctx = TeradataSQLDMLParser.Dml_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dml_stat)
        try:
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.select_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.select_and_consume_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 630
                self.delete_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 631
                self.insert_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 632
                self.update_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.merge_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 634
                self.collect_demographics_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 635
                self.collect_statistics_qcd_form_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 636
                self.drop_statistics_qcd_form_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 637
                self.dump_explain_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 638
                self.initiate_index_analysis_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 639
                self.initiate_partition_analysis_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 640
                self.insert_explain_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 641
                self.restart_index_analysis_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 642
                self.call_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 643
                self.execute_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 644
                self.commit_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 645
                self.rollback_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 646
                self.abort_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 647
                self.begin_transaction_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 648
                self.end_transaction_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 649
                self.locking_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 650
                self.comment_retrieving_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 651
                self.checkpoint_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 652
                self.echo_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 653
                self.null_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Query_exprContext,0)


        def request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_select_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stat" ):
                listener.enterSelect_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stat" ):
                listener.exitSelect_stat(self)




    def select_stat(self):

        localctx = TeradataSQLDMLParser.Select_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_select_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==150 or _la==226 or _la==227 or _la==457 or _la==474 or _la==938:
                self.state = 656
                self.request_modifier()


            self.state = 659
            self.query_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_and_consume_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token
            self.queue_table_name = None # Table_nameContext

        def SELECT(self):
            return self.getToken(TeradataSQLDMLParser.SELECT, 0)

        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def CONSUME(self):
            return self.getToken(TeradataSQLDMLParser.CONSUME, 0)

        def TOP(self):
            return self.getToken(TeradataSQLDMLParser.TOP, 0)

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Selected_columnsContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDMLParser.UNSIGNED_INTEGER, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Into_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_select_and_consume_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_and_consume_stat" ):
                listener.enterSelect_and_consume_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_and_consume_stat" ):
                listener.exitSelect_and_consume_stat(self)




    def select_and_consume_stat(self):

        localctx = TeradataSQLDMLParser.Select_and_consume_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_select_and_consume_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(TeradataSQLDMLParser.SELECT)
            self.state = 662
            self.match(TeradataSQLDMLParser.AND)
            self.state = 663
            self.match(TeradataSQLDMLParser.CONSUME)
            self.state = 664
            self.match(TeradataSQLDMLParser.TOP)
            self.state = 665
            localctx.count = self.match(TeradataSQLDMLParser.UNSIGNED_INTEGER)
            self.state = 666
            self.selected_columns()
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 667
                self.into_clause()


            self.state = 670
            self.match(TeradataSQLDMLParser.FROM)
            self.state = 671
            localctx.queue_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext

        def DELETE(self):
            return self.getToken(TeradataSQLDMLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLDMLParser.DEL, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def delete_table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Delete_table_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Delete_table_specContext,i)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_isolated_loadingContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_delete_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stat" ):
                listener.enterDelete_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stat" ):
                listener.exitDelete_stat(self)




    def delete_stat(self):

        localctx = TeradataSQLDMLParser.Delete_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_delete_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 673
                self.locking_request_modifier()


            self.state = 676
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 677
                self.with_isolated_loading()


            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 680
                localctx.target_table_name = self.table_name()
                pass

            elif la_ == 2:
                self.state = 681
                self.match(TeradataSQLDMLParser.FROM)
                self.state = 682
                self.delete_table_spec()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 683
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 684
                    self.delete_table_spec()
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 690
                localctx.target_table_name = self.table_name()
                self.state = 691
                self.match(TeradataSQLDMLParser.FROM)
                self.state = 692
                self.delete_table_spec()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 693
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 694
                    self.delete_table_spec()
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 702
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 703
                self.match(TeradataSQLDMLParser.ALL)
                pass
            elif token in [-1]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.correlation_name = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_delete_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_table_spec" ):
                listener.enterDelete_table_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_table_spec" ):
                listener.exitDelete_table_spec(self)




    def delete_table_spec(self):

        localctx = TeradataSQLDMLParser.Delete_table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_delete_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.table_name()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 707
                        self.match(TeradataSQLDMLParser.AS)


                    self.state = 710
                    localctx.correlation_name = self.alias_name()


                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 713
                self.subquery()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 714
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 717
                localctx.correlation_name = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.select_query = None # Query_exprContext
            self.json_string = None # Char_string_literalContext
            self.parametrized_sql = None # Token

        def INSERT(self):
            return self.getToken(TeradataSQLDMLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLDMLParser.INS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def VALUES(self):
            return self.getToken(TeradataSQLDMLParser.VALUES, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDMLParser.JSON, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDMLParser.DEFAULT, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_isolated_loadingContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Server_name_referenceContext,0)


        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Query_exprContext,0)


        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_request_modifierContext,0)


        def hash_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hash_byContext,0)


        def local_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Local_order_byContext,0)


        def logging_errors(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logging_errorsContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def QUESTION_MARK(self):
            return self.getToken(TeradataSQLDMLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_insert_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stat" ):
                listener.enterInsert_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stat" ):
                listener.exitInsert_stat(self)




    def insert_stat(self):

        localctx = TeradataSQLDMLParser.Insert_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_insert_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 721
                self.locking_request_modifier()


            self.state = 724
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 725
                self.with_isolated_loading()


            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 728
                self.match(TeradataSQLDMLParser.INTO)


            self.state = 731
            localctx.target_table_name = self.table_name()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1210:
                self.state = 732
                self.server_name_reference()


            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 735
                    self.match(TeradataSQLDMLParser.VALUES)


                self.state = 738
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 739
                    self.scalar_expr(0)


                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 742
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 743
                        self.scalar_expr(0)


                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 751
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 752
                self.column_list()
                self.state = 753
                self.match(TeradataSQLDMLParser.VALUES)
                self.state = 754
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 3:
                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 756
                    self.column_list()


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 759
                    self.with_request_modifier()


                self.state = 762
                localctx.select_query = self.query_expr(0)
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 763
                    self.hash_by()


                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 766
                    self.local_order_by()


                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 769
                    self.logging_errors()


                pass

            elif la_ == 4:
                self.state = 772
                self.match(TeradataSQLDMLParser.JSON)
                self.state = 775
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 773
                    localctx.json_string = self.char_string_literal()
                    pass
                elif token in [1212]:
                    self.state = 774
                    localctx.parametrized_sql = self.match(TeradataSQLDMLParser.QUESTION_MARK)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.state = 777
                self.match(TeradataSQLDMLParser.DEFAULT)
                self.state = 778
                self.match(TeradataSQLDMLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLDMLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def RANDOM(self):
            return self.getToken(TeradataSQLDMLParser.RANDOM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hash_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_by" ):
                listener.enterHash_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_by" ):
                listener.exitHash_by(self)




    def hash_by(self):

        localctx = TeradataSQLDMLParser.Hash_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_hash_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(TeradataSQLDMLParser.HASH)
            self.state = 782
            self.match(TeradataSQLDMLParser.BY)
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 783
                self.scalar_expr(0)
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 784
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 785
                    self.scalar_expr(0)
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 791
                self.match(TeradataSQLDMLParser.RANDOM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLDMLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_local_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_order_by" ):
                listener.enterLocal_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_order_by" ):
                listener.exitLocal_order_by(self)




    def local_order_by(self):

        localctx = TeradataSQLDMLParser.Local_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_local_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(TeradataSQLDMLParser.LOCAL)
            self.state = 795
            self.match(TeradataSQLDMLParser.ORDER)
            self.state = 796
            self.match(TeradataSQLDMLParser.BY)
            self.state = 797
            self.order_by_spec_full()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 798
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 799
                self.order_by_spec_full()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def update_basic_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Update_basic_form_statContext,0)


        def update_with_from_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Update_with_from_statContext,0)


        def update_upsert_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Update_upsert_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_update_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stat" ):
                listener.enterUpdate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stat" ):
                listener.exitUpdate_stat(self)




    def update_stat(self):

        localctx = TeradataSQLDMLParser.Update_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_update_stat)
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.update_basic_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.update_with_from_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 807
                self.update_upsert_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_basic_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.correlation_name = None # Alias_nameContext

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Set_specContext,i)


        def UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDMLParser.UPD, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_isolated_loadingContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_update_basic_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_basic_form_stat" ):
                listener.enterUpdate_basic_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_basic_form_stat" ):
                listener.exitUpdate_basic_form_stat(self)




    def update_basic_form_stat(self):

        localctx = TeradataSQLDMLParser.Update_basic_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_update_basic_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 810
                self.locking_request_modifier()


            self.state = 813
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 814
                self.with_isolated_loading()


            self.state = 817
            localctx.target_table_name = self.table_name()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 818
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 821
                localctx.correlation_name = self.alias_name()


            self.state = 824
            self.match(TeradataSQLDMLParser.SET)
            self.state = 825
            self.set_spec()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 826
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 827
                self.set_spec()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 833
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 834
                self.match(TeradataSQLDMLParser.ALL)
                pass
            elif token in [-1]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_with_from_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext

        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def update_table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Update_table_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Update_table_specContext,i)


        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Set_specContext,i)


        def UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDMLParser.UPD, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_isolated_loadingContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_update_with_from_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_with_from_stat" ):
                listener.enterUpdate_with_from_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_with_from_stat" ):
                listener.exitUpdate_with_from_stat(self)




    def update_with_from_stat(self):

        localctx = TeradataSQLDMLParser.Update_with_from_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_update_with_from_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 837
                self.locking_request_modifier()


            self.state = 840
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 841
                self.with_isolated_loading()


            self.state = 844
            localctx.target_table_name = self.table_name()
            self.state = 845
            self.match(TeradataSQLDMLParser.FROM)
            self.state = 846
            self.update_table_spec()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 847
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 848
                self.update_table_spec()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 854
            self.match(TeradataSQLDMLParser.SET)
            self.state = 855
            self.set_spec()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 856
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 857
                self.set_spec()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 863
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 864
                self.match(TeradataSQLDMLParser.ALL)
                pass
            elif token in [-1]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_upsert_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.correlation_name = None # Alias_nameContext
            self.insert_table_name = None # Table_nameContext

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Set_specContext,i)


        def WHERE(self):
            return self.getToken(TeradataSQLDMLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def ELSE(self):
            return self.getToken(TeradataSQLDMLParser.ELSE, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDMLParser.UPD, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,i)


        def INSERT(self):
            return self.getToken(TeradataSQLDMLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLDMLParser.INS, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDMLParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDMLParser.VALUES, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_isolated_loadingContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_update_upsert_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_upsert_form_stat" ):
                listener.enterUpdate_upsert_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_upsert_form_stat" ):
                listener.exitUpdate_upsert_form_stat(self)




    def update_upsert_form_stat(self):

        localctx = TeradataSQLDMLParser.Update_upsert_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_update_upsert_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 867
                self.locking_request_modifier()


            self.state = 870
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 871
                self.with_isolated_loading()


            self.state = 874
            localctx.target_table_name = self.table_name()

            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 875
                self.match(TeradataSQLDMLParser.AS)


            self.state = 878
            localctx.correlation_name = self.alias_name()
            self.state = 880
            self.match(TeradataSQLDMLParser.SET)
            self.state = 881
            self.set_spec()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 882
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 883
                self.set_spec()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.match(TeradataSQLDMLParser.WHERE)
            self.state = 890
            self.logical_expr(0)
            self.state = 891
            self.match(TeradataSQLDMLParser.ELSE)
            self.state = 892
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 893
                self.match(TeradataSQLDMLParser.INTO)


            self.state = 896
            localctx.insert_table_name = self.table_name()
            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 897
                    self.match(TeradataSQLDMLParser.VALUES)


                self.state = 900
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 901
                self.column_list()
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 902
                    self.match(TeradataSQLDMLParser.VALUES)


                self.state = 905
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 3:
                self.state = 907
                self.match(TeradataSQLDMLParser.DEFAULT)
                self.state = 908
                self.match(TeradataSQLDMLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.correlation_name = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_update_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_table_spec" ):
                listener.enterUpdate_table_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_table_spec" ):
                listener.exitUpdate_table_spec(self)




    def update_table_spec(self):

        localctx = TeradataSQLDMLParser.Update_table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_update_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.table_name()
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 912
                        self.match(TeradataSQLDMLParser.AS)


                    self.state = 915
                    localctx.correlation_name = self.alias_name()


                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.subquery()
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 919
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 922
                localctx.correlation_name = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.target_correlation_name = None # Alias_nameContext
            self.source_table_name = None # Table_nameContext
            self.source_correlation_name = None # Alias_nameContext
            self.match_condition = None # Logical_exprContext

        def MERGE(self):
            return self.getToken(TeradataSQLDMLParser.MERGE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,i)


        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,i)


        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def VALUES(self):
            return self.getToken(TeradataSQLDMLParser.VALUES, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def when_matched(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.When_matchedContext,0)


        def when_not_matched(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.When_not_matchedContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_isolated_loadingContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.AS)
            else:
                return self.getToken(TeradataSQLDMLParser.AS, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def logging_errors(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logging_errorsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_merge_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_stat" ):
                listener.enterMerge_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_stat" ):
                listener.exitMerge_stat(self)




    def merge_stat(self):

        localctx = TeradataSQLDMLParser.Merge_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_merge_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 926
                self.locking_request_modifier()


            self.state = 929
            self.match(TeradataSQLDMLParser.MERGE)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 930
                self.with_isolated_loading()


            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 933
                self.match(TeradataSQLDMLParser.INTO)


            self.state = 936
            localctx.target_table_name = self.table_name()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 937
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 940
                localctx.target_correlation_name = self.alias_name()


            self.state = 943
            self.match(TeradataSQLDMLParser.USING)
            self.state = 948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [460]:
                self.state = 944
                self.match(TeradataSQLDMLParser.VALUES)
                self.state = 945
                self.scalar_expr_list_comma_separated()
                pass
            elif token in [1213]:
                self.state = 946
                self.subquery()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 947
                localctx.source_table_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 950
                self.match(TeradataSQLDMLParser.AS)


            self.state = 953
            localctx.source_correlation_name = self.alias_name()
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 954
                self.column_list()


            self.state = 957
            self.match(TeradataSQLDMLParser.ON)
            self.state = 958
            localctx.match_condition = self.logical_expr(0)
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 959
                self.when_matched()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 960
                    self.when_not_matched()


                pass

            elif la_ == 2:
                self.state = 963
                self.when_not_matched()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 964
                    self.when_matched()


                pass


            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==229:
                self.state = 969
                self.logging_errors()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLDMLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDMLParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(TeradataSQLDMLParser.THEN, 0)

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Set_specContext,i)


        def DELETE(self):
            return self.getToken(TeradataSQLDMLParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLDMLParser.UPD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_when_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_matched" ):
                listener.enterWhen_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_matched" ):
                listener.exitWhen_matched(self)




    def when_matched(self):

        localctx = TeradataSQLDMLParser.When_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_when_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(TeradataSQLDMLParser.WHEN)
            self.state = 973
            self.match(TeradataSQLDMLParser.MATCHED)
            self.state = 974
            self.match(TeradataSQLDMLParser.THEN)
            self.state = 986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [452, 453]:
                self.state = 975
                _la = self._input.LA(1)
                if not(_la==452 or _la==453):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 976
                self.match(TeradataSQLDMLParser.SET)
                self.state = 977
                self.set_spec()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 978
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 979
                    self.set_spec()
                    self.state = 984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [115]:
                self.state = 985
                self.match(TeradataSQLDMLParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_not_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLDMLParser.WHEN, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDMLParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(TeradataSQLDMLParser.THEN, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def INSERT(self):
            return self.getToken(TeradataSQLDMLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLDMLParser.INS, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLDMLParser.VALUES, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_when_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_not_matched" ):
                listener.enterWhen_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_not_matched" ):
                listener.exitWhen_not_matched(self)




    def when_not_matched(self):

        localctx = TeradataSQLDMLParser.When_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_when_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(TeradataSQLDMLParser.WHEN)
            self.state = 989
            self.match(TeradataSQLDMLParser.NOT)
            self.state = 990
            self.match(TeradataSQLDMLParser.MATCHED)
            self.state = 991
            self.match(TeradataSQLDMLParser.THEN)
            self.state = 992
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 993
                self.match(TeradataSQLDMLParser.VALUES)

            elif la_ == 2:
                self.state = 994
                self.column_list()
                self.state = 995
                self.match(TeradataSQLDMLParser.VALUES)


            self.state = 999
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_demographics_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext

        def COLLECT(self):
            return self.getToken(TeradataSQLDMLParser.COLLECT, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDMLParser.DEMOGRAPHICS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDMLParser.INDEX, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_collect_demographics_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_demographics_stat" ):
                listener.enterCollect_demographics_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_demographics_stat" ):
                listener.exitCollect_demographics_stat(self)




    def collect_demographics_stat(self):

        localctx = TeradataSQLDMLParser.Collect_demographics_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_collect_demographics_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(TeradataSQLDMLParser.COLLECT)
            self.state = 1002
            self.match(TeradataSQLDMLParser.DEMOGRAPHICS)
            self.state = 1003
            self.match(TeradataSQLDMLParser.FOR)
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1004
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1005
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 1006
                self.table_name()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1007
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1008
                    self.table_name()
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1014
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1018
            self.match(TeradataSQLDMLParser.INTO)
            self.state = 1019
            localctx.qcd_name = self.database_name()
            self.state = 1024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 1020
                self.match(TeradataSQLDMLParser.ALL)
                pass
            elif token in [474]:
                self.state = 1021
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 1022
                self.match(TeradataSQLDMLParser.NO)
                self.state = 1023
                self.match(TeradataSQLDMLParser.INDEX)
                pass
            elif token in [-1]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sample_percentage = None # Integer_literalContext
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def COLLECT(self):
            return self.getToken(TeradataSQLDMLParser.COLLECT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def SAMPLE(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def qcd_stats_target_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Qcd_stats_target_specContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDMLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDMLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDMLParser.STAT, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDMLParser.PERCENT, 0)

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDMLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLEID, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.UPDATE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDMLParser.MODIFIED, 0)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_collect_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_statistics_qcd_form_stat" ):
                listener.enterCollect_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_statistics_qcd_form_stat" ):
                listener.exitCollect_statistics_qcd_form_stat(self)




    def collect_statistics_qcd_form_stat(self):

        localctx = TeradataSQLDMLParser.Collect_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_collect_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(TeradataSQLDMLParser.COLLECT)
            self.state = 1027
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1028
            self.match(TeradataSQLDMLParser.FOR)
            self.state = 1029
            self.match(TeradataSQLDMLParser.SAMPLE)
            self.state = 1030
            localctx.sample_percentage = self.integer_literal()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 1031
                self.match(TeradataSQLDMLParser.PERCENT)


            self.state = 1034
            self.match(TeradataSQLDMLParser.INTO)
            self.state = 1035
            localctx.qcd_name = self.database_name()
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 1036
                self.match(TeradataSQLDMLParser.SET)
                self.state = 1037
                self.match(TeradataSQLDMLParser.QUERY)
                self.state = 1038
                localctx.query_id = self.integer_literal()


            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 1041
                self.match(TeradataSQLDMLParser.SAMPLEID)
                self.state = 1042
                localctx.statistics_id = self.integer_literal()


            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 1045
                self.match(TeradataSQLDMLParser.UPDATE)
                self.state = 1046
                self.match(TeradataSQLDMLParser.MODIFIED)


            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 1049
                self.match(TeradataSQLDMLParser.ON)


            self.state = 1052
            self.table_name()
            self.state = 1053
            self.qcd_stats_target_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qcd_stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext

        def COLUMN(self):
            return self.getToken(TeradataSQLDMLParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,i)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLDMLParser.PARTITION, i)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def INDEX(self):
            return self.getToken(TeradataSQLDMLParser.INDEX, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_qcd_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQcd_stats_target_spec" ):
                listener.enterQcd_stats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQcd_stats_target_spec" ):
                listener.exitQcd_stats_target_spec(self)




    def qcd_stats_target_spec(self):

        localctx = TeradataSQLDMLParser.Qcd_stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_qcd_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 1091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.match(TeradataSQLDMLParser.COLUMN)
                self.state = 1074
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 1056
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1057
                    self.match(TeradataSQLDMLParser.PARTITION)
                    pass

                elif la_ == 3:
                    self.state = 1058
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 1061
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 1059
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1060
                        self.match(TeradataSQLDMLParser.PARTITION)
                        pass


                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1063
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1066
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                        if la_ == 1:
                            self.state = 1064
                            self.column_name()
                            pass

                        elif la_ == 2:
                            self.state = 1065
                            self.match(TeradataSQLDMLParser.PARTITION)
                            pass


                        self.state = 1072
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1073
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)
                    pass


                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1076
                self.match(TeradataSQLDMLParser.INDEX)
                self.state = 1089
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 1077
                    localctx.index_name = self.unqualified_name()
                    pass
                elif token in [1213]:
                    self.state = 1078
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 1079
                    self.column_name()
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1080
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1081
                        self.column_name()
                        self.state = 1086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1087
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLDMLParser.DROP, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDMLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDMLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDMLParser.STAT, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def qcd_stats_target_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Qcd_stats_target_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_drop_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_qcd_form_stat" ):
                listener.enterDrop_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_qcd_form_stat" ):
                listener.exitDrop_statistics_qcd_form_stat(self)




    def drop_statistics_qcd_form_stat(self):

        localctx = TeradataSQLDMLParser.Drop_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(TeradataSQLDMLParser.DROP)
            self.state = 1094
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1095
            self.match(TeradataSQLDMLParser.FROM)
            self.state = 1096
            localctx.qcd_name = self.database_name()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 1097
                self.match(TeradataSQLDMLParser.ON)


            self.state = 1100
            self.table_name()
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192:
                self.state = 1101
                self.qcd_stats_target_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dump_explain_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_plan_name = None # Unqualified_nameContext

        def DUMP(self):
            return self.getToken(TeradataSQLDMLParser.DUMP, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDMLParser.EXPLAIN, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def explained_sql_request(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Explained_sql_requestContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def limit_sql_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Limit_sql_clauseContext,0)


        def CHECK(self):
            return self.getToken(TeradataSQLDMLParser.CHECK, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDMLParser.STATISTICS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_dump_explain_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDump_explain_stat" ):
                listener.enterDump_explain_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDump_explain_stat" ):
                listener.exitDump_explain_stat(self)




    def dump_explain_stat(self):

        localctx = TeradataSQLDMLParser.Dump_explain_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_dump_explain_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(TeradataSQLDMLParser.DUMP)
            self.state = 1105
            self.match(TeradataSQLDMLParser.EXPLAIN)
            self.state = 1106
            self.match(TeradataSQLDMLParser.INTO)
            self.state = 1107
            localctx.qcd_name = self.database_name()
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1108
                self.match(TeradataSQLDMLParser.AS)
                self.state = 1109
                localctx.query_plan_name = self.unqualified_name()


            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 1112
                self.limit_sql_clause()


            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1115
                self.match(TeradataSQLDMLParser.CHECK)
                self.state = 1116
                self.match(TeradataSQLDMLParser.STATISTICS)


            self.state = 1119
            self.explained_sql_request()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initiate_index_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.index_name_tag = None # Alias_nameContext
            self._integer_literal = None # Integer_literalContext
            self.index_type_number = list() # of Integer_literalContexts
            self.checkpoint_trigger = None # Integer_literalContext

        def INITIATE(self):
            return self.getToken(TeradataSQLDMLParser.INITIATE, 0)

        def INDEX(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.INDEX)
            else:
                return self.getToken(TeradataSQLDMLParser.INDEX, i)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDMLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def index_analysis_set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Index_analysis_set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Index_analysis_set_specContext,i)


        def KEEP(self):
            return self.getToken(TeradataSQLDMLParser.KEEP, 0)

        def USE(self):
            return self.getToken(TeradataSQLDMLParser.USE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDMLParser.MODIFIED, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDMLParser.TYPE, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDMLParser.CHECKPOINT, 0)

        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Analysis_time_limit_clauseContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLDMLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDMLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDMLParser.STAT, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_initiate_index_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiate_index_analysis_stat" ):
                listener.enterInitiate_index_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiate_index_analysis_stat" ):
                listener.exitInitiate_index_analysis_stat(self)




    def initiate_index_analysis_stat(self):

        localctx = TeradataSQLDMLParser.Initiate_index_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_initiate_index_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(TeradataSQLDMLParser.INITIATE)
            self.state = 1122
            self.match(TeradataSQLDMLParser.INDEX)
            self.state = 1123
            self.match(TeradataSQLDMLParser.ANALYSIS)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 1124
                self.match(TeradataSQLDMLParser.ON)
                self.state = 1125
                self.table_name()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1126
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1127
                    self.table_name()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1135
            self.match(TeradataSQLDMLParser.FOR)
            self.state = 1136
            localctx.workload_name = self.unqualified_name()
            self.state = 1137
            self.match(TeradataSQLDMLParser.IN)
            self.state = 1138
            localctx.qcd_name = self.database_name()
            self.state = 1139
            self.match(TeradataSQLDMLParser.AS)
            self.state = 1140
            localctx.index_name_tag = self.alias_name()
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 1141
                self.match(TeradataSQLDMLParser.SET)
                self.state = 1142
                self.index_analysis_set_spec()
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1143
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1144
                    self.index_analysis_set_spec()
                    self.state = 1149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==728:
                self.state = 1152
                self.match(TeradataSQLDMLParser.KEEP)
                self.state = 1153
                self.match(TeradataSQLDMLParser.INDEX)


            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1018:
                self.state = 1156
                self.match(TeradataSQLDMLParser.USE)
                self.state = 1157
                self.match(TeradataSQLDMLParser.MODIFIED)
                self.state = 1158
                _la = self._input.LA(1)
                if not(_la==395 or _la==937 or _la==939):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1161
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 1162
                    self.match(TeradataSQLDMLParser.NO)


                self.state = 1165
                self.match(TeradataSQLDMLParser.INDEX)
                self.state = 1166
                self.match(TeradataSQLDMLParser.TYPE)
                self.state = 1167
                localctx._integer_literal = self.integer_literal()
                localctx.index_type_number.append(localctx._integer_literal)
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1168
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1169
                    localctx._integer_literal = self.integer_literal()
                    localctx.index_type_number.append(localctx._integer_literal)
                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1177
                self.match(TeradataSQLDMLParser.CHECKPOINT)
                self.state = 1178
                localctx.checkpoint_trigger = self.integer_literal()


            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1181
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_analysis_set_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Integer_literalContext

        def index_analysis_boundary_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Index_analysis_boundary_optionContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_index_analysis_set_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_analysis_set_spec" ):
                listener.enterIndex_analysis_set_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_analysis_set_spec" ):
                listener.exitIndex_analysis_set_spec(self)




    def index_analysis_set_spec(self):

        localctx = TeradataSQLDMLParser.Index_analysis_set_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_index_analysis_set_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.index_analysis_boundary_option()
            self.state = 1185
            self.match(TeradataSQLDMLParser.EQUALS_SIGN)
            self.state = 1186
            localctx.value = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_analysis_boundary_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGERATE(self):
            return self.getToken(TeradataSQLDMLParser.CHANGERATE, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNSPERJOININDEX, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLDMLParser.INDEXMAINTMODE, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLDMLParser.INDEXESPERTABLE, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLDMLParser.SEARCHSPACE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_index_analysis_boundary_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_analysis_boundary_option" ):
                listener.enterIndex_analysis_boundary_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_analysis_boundary_option" ):
                listener.exitIndex_analysis_boundary_option(self)




    def index_analysis_boundary_option(self):

        localctx = TeradataSQLDMLParser.Index_analysis_boundary_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_index_analysis_boundary_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            _la = self._input.LA(1)
            if not(((((_la - 567)) & ~0x3f) == 0 and ((1 << (_la - 567)) & 24577) != 0) or _la==705 or _la==706 or _la==908):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initiate_partition_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.result_name_tag = None # Alias_nameContext

        def INITIATE(self):
            return self.getToken(TeradataSQLDMLParser.INITIATE, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDMLParser.PARTITION, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDMLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,i)


        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Analysis_time_limit_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_initiate_partition_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiate_partition_analysis_stat" ):
                listener.enterInitiate_partition_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiate_partition_analysis_stat" ):
                listener.exitInitiate_partition_analysis_stat(self)




    def initiate_partition_analysis_stat(self):

        localctx = TeradataSQLDMLParser.Initiate_partition_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_initiate_partition_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(TeradataSQLDMLParser.INITIATE)
            self.state = 1191
            self.match(TeradataSQLDMLParser.PARTITION)
            self.state = 1192
            self.match(TeradataSQLDMLParser.ANALYSIS)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 1193
                self.match(TeradataSQLDMLParser.ON)
                self.state = 1194
                self.table_name()
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1195
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1196
                    self.table_name()
                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1204
            self.match(TeradataSQLDMLParser.FOR)
            self.state = 1205
            localctx.workload_name = self.unqualified_name()
            self.state = 1206
            self.match(TeradataSQLDMLParser.IN)
            self.state = 1207
            localctx.qcd_name = self.database_name()
            self.state = 1208
            self.match(TeradataSQLDMLParser.AS)
            self.state = 1209
            localctx.result_name_tag = self.alias_name()
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1210
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_explain_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sample_percentage = None # Integer_literalContext
            self.qcd_name = None # Database_nameContext
            self.query_plan_name = None # Unqualified_nameContext
            self.frequency = None # Integer_literalContext

        def INSERT(self):
            return self.getToken(TeradataSQLDMLParser.INSERT, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDMLParser.EXPLAIN, 0)

        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def explained_sql_request(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Explained_sql_requestContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def STATISTICS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.STATISTICS)
            else:
                return self.getToken(TeradataSQLDMLParser.STATISTICS, i)

        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDMLParser.DEMOGRAPHICS, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.FOR)
            else:
                return self.getToken(TeradataSQLDMLParser.FOR, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def limit_sql_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Limit_sql_clauseContext,0)


        def CHECK(self):
            return self.getToken(TeradataSQLDMLParser.CHECK, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDMLParser.XML, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def SAMPLE(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDMLParser.NODDLTEXT, 0)

        def PERCENT(self):
            return self.getToken(TeradataSQLDMLParser.PERCENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_insert_explain_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_explain_stat" ):
                listener.enterInsert_explain_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_explain_stat" ):
                listener.exitInsert_explain_stat(self)




    def insert_explain_stat(self):

        localctx = TeradataSQLDMLParser.Insert_explain_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insert_explain_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(TeradataSQLDMLParser.INSERT)
            self.state = 1214
            self.match(TeradataSQLDMLParser.EXPLAIN)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1215
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 1216
                    self.match(TeradataSQLDMLParser.NO)


                self.state = 1219
                self.match(TeradataSQLDMLParser.STATISTICS)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==457:
                    self.state = 1220
                    self.match(TeradataSQLDMLParser.USING)
                    self.state = 1221
                    self.match(TeradataSQLDMLParser.SAMPLE)
                    self.state = 1222
                    localctx.sample_percentage = self.integer_literal()
                    self.state = 1224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==300:
                        self.state = 1223
                        self.match(TeradataSQLDMLParser.PERCENT)






            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 1230
                self.match(TeradataSQLDMLParser.AND)
                self.state = 1231
                self.match(TeradataSQLDMLParser.DEMOGRAPHICS)


            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1234
                self.match(TeradataSQLDMLParser.FOR)
                self.state = 1235
                self.table_name()
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1236
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1237
                    self.table_name()
                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1245
            self.match(TeradataSQLDMLParser.INTO)
            self.state = 1246
            localctx.qcd_name = self.database_name()
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1247
                self.match(TeradataSQLDMLParser.AS)
                self.state = 1248
                localctx.query_plan_name = self.unqualified_name()


            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 1251
                self.limit_sql_clause()


            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1254
                self.match(TeradataSQLDMLParser.FOR)
                self.state = 1255
                localctx.frequency = self.integer_literal()


            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1258
                self.match(TeradataSQLDMLParser.CHECK)
                self.state = 1259
                self.match(TeradataSQLDMLParser.STATISTICS)


            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 1262
                self.match(TeradataSQLDMLParser.IN)
                self.state = 1263
                self.match(TeradataSQLDMLParser.XML)
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 1264
                    self.match(TeradataSQLDMLParser.NODDLTEXT)




            self.state = 1269
            self.explained_sql_request()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_index_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.index_name_tag = None # Alias_nameContext
            self.checkpoint_trigger = None # Integer_literalContext

        def RESTART(self):
            return self.getToken(TeradataSQLDMLParser.RESTART, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDMLParser.INDEX, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDMLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDMLParser.CHECKPOINT, 0)

        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Analysis_time_limit_clauseContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_restart_index_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestart_index_analysis_stat" ):
                listener.enterRestart_index_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestart_index_analysis_stat" ):
                listener.exitRestart_index_analysis_stat(self)




    def restart_index_analysis_stat(self):

        localctx = TeradataSQLDMLParser.Restart_index_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restart_index_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(TeradataSQLDMLParser.RESTART)
            self.state = 1272
            self.match(TeradataSQLDMLParser.INDEX)
            self.state = 1273
            self.match(TeradataSQLDMLParser.ANALYSIS)
            self.state = 1274
            self.match(TeradataSQLDMLParser.FOR)
            self.state = 1275
            localctx.workload_name = self.unqualified_name()
            self.state = 1276
            self.match(TeradataSQLDMLParser.IN)
            self.state = 1277
            localctx.qcd_name = self.database_name()
            self.state = 1278
            self.match(TeradataSQLDMLParser.AS)
            self.state = 1279
            localctx.index_name_tag = self.alias_name()
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1280
                self.match(TeradataSQLDMLParser.CHECKPOINT)
                self.state = 1281
                localctx.checkpoint_trigger = self.integer_literal()


            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1284
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(TeradataSQLDMLParser.CALL, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Procedure_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_call_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_stat" ):
                listener.enterCall_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_stat" ):
                listener.exitCall_stat(self)




    def call_stat(self):

        localctx = TeradataSQLDMLParser.Call_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_call_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(TeradataSQLDMLParser.CALL)
            self.state = 1288
            self.procedure_name()
            self.state = 1289
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1614061055) != 0):
                self.state = 1290
                self.argument()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1291
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 1292
                    self.argument()
                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1300
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Returns_clauseContext,0)


        def QUESTION_MARK(self):
            return self.getToken(TeradataSQLDMLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = TeradataSQLDMLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.scalar_expr(0)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==352:
                    self.state = 1303
                    self.returns_clause()


                pass
            elif token in [1212]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.match(TeradataSQLDMLParser.QUESTION_MARK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Macro_nameContext,0)


        def EXECUTE(self):
            return self.getToken(TeradataSQLDMLParser.EXECUTE, 0)

        def EXEC(self):
            return self.getToken(TeradataSQLDMLParser.EXEC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def parameter_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Parameter_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Parameter_nameContext,i)


        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_execute_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_stat" ):
                listener.enterExecute_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_stat" ):
                listener.exitExecute_stat(self)




    def execute_stat(self):

        localctx = TeradataSQLDMLParser.Execute_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_execute_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            _la = self._input.LA(1)
            if not(_la==143 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1310
            self.macro_name()
            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 1311
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 1333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1312
                    self.scalar_expr(0)
                    self.state = 1317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1313
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1314
                        self.scalar_expr(0)
                        self.state = 1319
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1320
                    self.parameter_name()
                    self.state = 1321
                    self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                    self.state = 1322
                    self.scalar_expr(0)
                    self.state = 1330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1323
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1324
                        self.parameter_name()
                        self.state = 1325
                        self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                        self.state = 1326
                        self.scalar_expr(0)
                        self.state = 1332
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 1335
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(TeradataSQLDMLParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(TeradataSQLDMLParser.WORK, 0)

        def RELEASE(self):
            return self.getToken(TeradataSQLDMLParser.RELEASE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_commit_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stat" ):
                listener.enterCommit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stat" ):
                listener.exitCommit_stat(self)




    def commit_stat(self):

        localctx = TeradataSQLDMLParser.Commit_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_commit_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(TeradataSQLDMLParser.COMMIT)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==476:
                self.state = 1340
                self.match(TeradataSQLDMLParser.WORK)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==337:
                    self.state = 1341
                    self.match(TeradataSQLDMLParser.RELEASE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.abort_message = None # Char_string_literalContext

        def ROLLBACK(self):
            return self.getToken(TeradataSQLDMLParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(TeradataSQLDMLParser.WORK, 0)

        def from_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Where_clauseContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_rollback_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stat" ):
                listener.enterRollback_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stat" ):
                listener.exitRollback_stat(self)




    def rollback_stat(self):

        localctx = TeradataSQLDMLParser.Rollback_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_rollback_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(TeradataSQLDMLParser.ROLLBACK)
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==476:
                self.state = 1347
                self.match(TeradataSQLDMLParser.WORK)


            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 1350
                localctx.abort_message = self.char_string_literal()


            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 1353
                self.from_clause()


            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==471:
                self.state = 1356
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abort_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.abort_message = None # Char_string_literalContext

        def ABORT(self):
            return self.getToken(TeradataSQLDMLParser.ABORT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Where_clauseContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_abort_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbort_stat" ):
                listener.enterAbort_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbort_stat" ):
                listener.exitAbort_stat(self)




    def abort_stat(self):

        localctx = TeradataSQLDMLParser.Abort_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_abort_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(TeradataSQLDMLParser.ABORT)
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 1360
                localctx.abort_message = self.char_string_literal()


            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 1363
                self.from_clause()


            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==471:
                self.state = 1366
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_transaction_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLDMLParser.TRANSACTION, 0)

        def BT(self):
            return self.getToken(TeradataSQLDMLParser.BT, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_begin_transaction_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_transaction_stat" ):
                listener.enterBegin_transaction_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_transaction_stat" ):
                listener.exitBegin_transaction_stat(self)




    def begin_transaction_stat(self):

        localctx = TeradataSQLDMLParser.Begin_transaction_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_begin_transaction_stat)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1369
                self.match(TeradataSQLDMLParser.BEGIN)
                self.state = 1370
                self.match(TeradataSQLDMLParser.TRANSACTION)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.match(TeradataSQLDMLParser.BT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_transaction_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDMLParser.END, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLDMLParser.TRANSACTION, 0)

        def ET(self):
            return self.getToken(TeradataSQLDMLParser.ET, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_end_transaction_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_transaction_stat" ):
                listener.enterEnd_transaction_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_transaction_stat" ):
                listener.exitEnd_transaction_stat(self)




    def end_transaction_stat(self):

        localctx = TeradataSQLDMLParser.End_transaction_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_end_transaction_stat)
        try:
            self.state = 1377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1374
                self.match(TeradataSQLDMLParser.END)
                self.state = 1375
                self.match(TeradataSQLDMLParser.TRANSACTION)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1376
                self.match(TeradataSQLDMLParser.ET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_locking_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_stat" ):
                listener.enterLocking_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_stat" ):
                listener.exitLocking_stat(self)




    def locking_stat(self):

        localctx = TeradataSQLDMLParser.Locking_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_locking_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.locking_request_modifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_retrieving_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(TeradataSQLDMLParser.COMMENT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Object_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLDMLParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def object_kind(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Object_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_comment_retrieving_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_retrieving_stat" ):
                listener.enterComment_retrieving_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_retrieving_stat" ):
                listener.exitComment_retrieving_stat(self)




    def comment_retrieving_stat(self):

        localctx = TeradataSQLDMLParser.Comment_retrieving_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_comment_retrieving_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.match(TeradataSQLDMLParser.COMMENT)
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 1382
                self.match(TeradataSQLDMLParser.ON)


            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1385
                    self.object_kind()


                self.state = 1388
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 1389
                self.match(TeradataSQLDMLParser.COLUMN)
                self.state = 1390
                self.column_name()
                pass

            elif la_ == 3:
                self.state = 1391
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checkpoint_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table = None # Table_nameContext

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDMLParser.CHECKPOINT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def NAMED(self):
            return self.getToken(TeradataSQLDMLParser.NAMED, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_checkpoint_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpoint_stat" ):
                listener.enterCheckpoint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpoint_stat" ):
                listener.exitCheckpoint_stat(self)




    def checkpoint_stat(self):

        localctx = TeradataSQLDMLParser.Checkpoint_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_checkpoint_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(TeradataSQLDMLParser.CHECKPOINT)
            self.state = 1395
            localctx.journal_table = self.table_name()
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 1396
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 1397
                self.match(TeradataSQLDMLParser.NAMED)
                self.state = 1398
                self.variable_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Echo_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.string = None # Char_string_literalContext

        def ECHO(self):
            return self.getToken(TeradataSQLDMLParser.ECHO, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_echo_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEcho_stat" ):
                listener.enterEcho_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEcho_stat" ):
                listener.exitEcho_stat(self)




    def echo_stat(self):

        localctx = TeradataSQLDMLParser.Echo_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_echo_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(TeradataSQLDMLParser.ECHO)
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 1402
                localctx.string = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(TeradataSQLDMLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_null_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_stat" ):
                listener.enterNull_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_stat" ):
                listener.exitNull_stat(self)




    def null_stat(self):

        localctx = TeradataSQLDMLParser.Null_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_null_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(TeradataSQLDMLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_set_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_spec" ):
                listener.enterSet_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_spec" ):
                listener.exitSet_spec(self)




    def set_spec(self):

        localctx = TeradataSQLDMLParser.Set_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_set_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.column_name()
            self.state = 1408
            self.match(TeradataSQLDMLParser.EQUALS_SIGN)
            self.state = 1409
            self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_isolated_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDMLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLDMLParser.LOADING, 0)

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDMLParser.CONCURRENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_isolated_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_isolated_loading" ):
                listener.enterWith_isolated_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_isolated_loading" ):
                listener.exitWith_isolated_loading(self)




    def with_isolated_loading(self):

        localctx = TeradataSQLDMLParser.With_isolated_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_with_isolated_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 1412
                self.match(TeradataSQLDMLParser.NO)


            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 1415
                self.match(TeradataSQLDMLParser.CONCURRENT)


            self.state = 1418
            self.match(TeradataSQLDMLParser.ISOLATED)
            self.state = 1419
            self.match(TeradataSQLDMLParser.LOADING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_errorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_limit = None # Integer_literalContext

        def LOGGING(self):
            return self.getToken(TeradataSQLDMLParser.LOGGING, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDMLParser.ERRORS, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLDMLParser.LIMIT, 0)

        def OF(self):
            return self.getToken(TeradataSQLDMLParser.OF, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_logging_errors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_errors" ):
                listener.enterLogging_errors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_errors" ):
                listener.exitLogging_errors(self)




    def logging_errors(self):

        localctx = TeradataSQLDMLParser.Logging_errorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_logging_errors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(TeradataSQLDMLParser.LOGGING)
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1422
                self.match(TeradataSQLDMLParser.ALL)


            self.state = 1425
            self.match(TeradataSQLDMLParser.ERRORS)
            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1426
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 1432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 1427
                    self.match(TeradataSQLDMLParser.NO)
                    self.state = 1428
                    self.match(TeradataSQLDMLParser.LIMIT)
                    pass
                elif token in [221]:
                    self.state = 1429
                    self.match(TeradataSQLDMLParser.LIMIT)
                    self.state = 1430
                    self.match(TeradataSQLDMLParser.OF)
                    self.state = 1431
                    localctx.error_limit = self.integer_literal()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(TeradataSQLDMLParser.FUNCTION, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDMLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDMLParser.GROUP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDMLParser.MACRO, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDMLParser.METHOD, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDMLParser.PROCEDURE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDMLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDMLParser.ROLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDMLParser.TRIGGER, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDMLParser.TYPE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDMLParser.VIEW, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDMLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDMLParser.TABLE, 0)

        def USER(self):
            return self.getToken(TeradataSQLDMLParser.USER, 0)

        def FILE(self):
            return self.getToken(TeradataSQLDMLParser.FILE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_object_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_kind" ):
                listener.enterObject_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_kind" ):
                listener.exitObject_kind(self)




    def object_kind(self):

        localctx = TeradataSQLDMLParser.Object_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_object_kind)
        try:
            self.state = 1452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [166]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.match(TeradataSQLDMLParser.FUNCTION)
                pass
            elif token in [688]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.match(TeradataSQLDMLParser.GLOP)
                self.state = 1438
                self.match(TeradataSQLDMLParser.SET)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1439
                self.match(TeradataSQLDMLParser.GROUP)
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1440
                self.match(TeradataSQLDMLParser.MACRO)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1441
                self.match(TeradataSQLDMLParser.METHOD)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1442
                self.match(TeradataSQLDMLParser.PROCEDURE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1443
                self.match(TeradataSQLDMLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1444
                self.match(TeradataSQLDMLParser.ROLE)
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1445
                self.match(TeradataSQLDMLParser.TRIGGER)
                pass
            elif token in [437]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1446
                self.match(TeradataSQLDMLParser.TYPE)
                pass
            elif token in [468]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1447
                self.match(TeradataSQLDMLParser.VIEW)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1448
                self.match(TeradataSQLDMLParser.DATABASE)
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1449
                self.match(TeradataSQLDMLParser.TABLE)
                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1450
                self.match(TeradataSQLDMLParser.USER)
                pass
            elif token in [668]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1451
                self.match(TeradataSQLDMLParser.FILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explained_sql_requestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Delete_statContext,0)


        def execute_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Execute_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Insert_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Merge_statContext,0)


        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Select_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Update_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_explained_sql_request

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplained_sql_request" ):
                listener.enterExplained_sql_request(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplained_sql_request" ):
                listener.exitExplained_sql_request(self)




    def explained_sql_request(self):

        localctx = TeradataSQLDMLParser.Explained_sql_requestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_explained_sql_request)
        try:
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1454
                self.delete_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1455
                self.execute_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1456
                self.insert_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1457
                self.merge_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1458
                self.select_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1459
                self.update_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_sql_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sql_length = None # Integer_literalContext

        def LIMIT(self):
            return self.getToken(TeradataSQLDMLParser.LIMIT, 0)

        def SQL(self):
            return self.getToken(TeradataSQLDMLParser.SQL, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_limit_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sql_clause" ):
                listener.enterLimit_sql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sql_clause" ):
                listener.exitLimit_sql_clause(self)




    def limit_sql_clause(self):

        localctx = TeradataSQLDMLParser.Limit_sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_limit_sql_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(TeradataSQLDMLParser.LIMIT)
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 1463
                self.match(TeradataSQLDMLParser.SQL)
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1224:
                    self.state = 1464
                    self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                    self.state = 1465
                    localctx.sql_length = self.integer_literal()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analysis_time_limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.elapsed_time = None # Integer_literalContext

        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLDMLParser.LIMIT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_analysis_time_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalysis_time_limit_clause" ):
                listener.enterAnalysis_time_limit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalysis_time_limit_clause" ):
                listener.exitAnalysis_time_limit_clause(self)




    def analysis_time_limit_clause(self):

        localctx = TeradataSQLDMLParser.Analysis_time_limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_analysis_time_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.match(TeradataSQLDMLParser.TIME)
            self.state = 1471
            self.match(TeradataSQLDMLParser.LIMIT)
            self.state = 1472
            self.match(TeradataSQLDMLParser.EQUALS_SIGN)
            self.state = 1473
            localctx.elapsed_time = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TeradataSQLDMLParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_data_type)
        try:
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1475
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1477
                self.binary_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1478
                self.datetime_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1479
                self.period_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1480
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Precisionless_char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_variable_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_data_type" ):
                listener.enterVariable_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_data_type" ):
                listener.exitVariable_data_type(self)




    def variable_data_type(self):

        localctx = TeradataSQLDMLParser.Variable_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_variable_data_type)
        try:
            self.state = 1490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1483
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1484
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1485
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1486
                self.binary_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1487
                self.datetime_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1488
                self.period_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1489
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Precisionless_char_data_typeContext,0)


        def lob_as_locator_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Lob_as_locator_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Udt_typeContext,0)


        def TD_ANYTYPE(self):
            return self.getToken(TeradataSQLDMLParser.TD_ANYTYPE, 0)

        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDMLParser.VARIANT_TYPE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_external_function_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_data_type" ):
                listener.enterExternal_function_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_data_type" ):
                listener.exitExternal_function_data_type(self)




    def external_function_data_type(self):

        localctx = TeradataSQLDMLParser.External_function_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_external_function_data_type)
        try:
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1492
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1493
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1494
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1495
                self.lob_as_locator_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1496
                self.binary_data_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1497
                self.datetime_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1498
                self.period_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1499
                self.udt_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1500
                self.match(TeradataSQLDMLParser.TD_ANYTYPE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1501
                self.match(TeradataSQLDMLParser.VARIANT_TYPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.scale = None # Integer_literalContext

        def BYTEINT(self):
            return self.getToken(TeradataSQLDMLParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataSQLDMLParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLDMLParser.INTEGER, 0)

        def INT(self):
            return self.getToken(TeradataSQLDMLParser.INT, 0)

        def BIGINT(self):
            return self.getToken(TeradataSQLDMLParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataSQLDMLParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataSQLDMLParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataSQLDMLParser.NUMERIC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def FLOAT(self):
            return self.getToken(TeradataSQLDMLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataSQLDMLParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(TeradataSQLDMLParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TeradataSQLDMLParser.PRECISION, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLDMLParser.NUMBER, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_numeric_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_data_type" ):
                listener.enterNumeric_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_data_type" ):
                listener.exitNumeric_data_type(self)




    def numeric_data_type(self):

        localctx = TeradataSQLDMLParser.Numeric_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_numeric_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1504
                self.match(TeradataSQLDMLParser.BYTEINT)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.match(TeradataSQLDMLParser.SMALLINT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1506
                self.match(TeradataSQLDMLParser.INTEGER)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1507
                self.match(TeradataSQLDMLParser.INT)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1508
                self.match(TeradataSQLDMLParser.BIGINT)
                pass
            elif token in [108, 109, 278]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1509
                _la = self._input.LA(1)
                if not(_la==108 or _la==109 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 1512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 1511
                        localctx.precision = self.integer_literal()


                    self.state = 1516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 1514
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1515
                        localctx.scale = self.integer_literal()


                    self.state = 1518
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)


                pass
            elif token in [124, 157, 323]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1531
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157]:
                    self.state = 1521
                    self.match(TeradataSQLDMLParser.FLOAT)
                    self.state = 1526
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1522
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 1523
                        localctx.precision = self.integer_literal()
                        self.state = 1524
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)


                    pass
                elif token in [323]:
                    self.state = 1528
                    self.match(TeradataSQLDMLParser.REAL)
                    pass
                elif token in [124]:
                    self.state = 1529
                    self.match(TeradataSQLDMLParser.DOUBLE)
                    self.state = 1530
                    self.match(TeradataSQLDMLParser.PRECISION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1533
                self.match(TeradataSQLDMLParser.NUMBER)
                self.state = 1544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1534
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 1537
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1194]:
                        self.state = 1535
                        localctx.precision = self.integer_literal()
                        pass
                    elif token in [1219]:
                        self.state = 1536
                        self.match(TeradataSQLDMLParser.MUL_SIGN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 1539
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1540
                        localctx.scale = self.integer_literal()


                    self.state = 1543
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDMLParser.CHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Type_precisionContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_phraseContext,0)


        def GRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.GRAPHIC, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLDMLParser.VARCHAR, 0)

        def VARYING(self):
            return self.getToken(TeradataSQLDMLParser.VARYING, 0)

        def LONG(self):
            return self.getToken(TeradataSQLDMLParser.LONG, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.VARGRAPHIC, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDMLParser.CLOB, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDMLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Max_length_k_m_gContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_data_type" ):
                listener.enterChar_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_data_type" ):
                listener.exitChar_data_type(self)




    def char_data_type(self):

        localctx = TeradataSQLDMLParser.Char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                _la = self._input.LA(1)
                if not(_la==52 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1549
                    self.type_precision()


                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    self.character_set_phrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1555
                self.match(TeradataSQLDMLParser.GRAPHIC)
                self.state = 1557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1556
                    self.type_precision()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [464]:
                    self.state = 1559
                    self.match(TeradataSQLDMLParser.VARCHAR)
                    pass
                elif token in [55]:
                    self.state = 1560
                    self.match(TeradataSQLDMLParser.CHARACTER)
                    self.state = 1561
                    self.match(TeradataSQLDMLParser.VARYING)
                    pass
                elif token in [52]:
                    self.state = 1562
                    self.match(TeradataSQLDMLParser.CHAR)
                    self.state = 1563
                    self.match(TeradataSQLDMLParser.VARYING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1566
                self.type_precision()
                self.state = 1568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.character_set_phrase()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1570
                self.match(TeradataSQLDMLParser.LONG)
                self.state = 1571
                self.match(TeradataSQLDMLParser.VARCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1572
                self.match(TeradataSQLDMLParser.VARGRAPHIC)
                self.state = 1573
                self.type_precision()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1574
                self.match(TeradataSQLDMLParser.LONG)
                self.state = 1575
                self.match(TeradataSQLDMLParser.VARGRAPHIC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1580
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 1576
                    self.match(TeradataSQLDMLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 1577
                    self.match(TeradataSQLDMLParser.CHARACTER)
                    self.state = 1578
                    self.match(TeradataSQLDMLParser.LARGE)
                    self.state = 1579
                    self.match(TeradataSQLDMLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1582
                    self.max_length_k_m_g()


                self.state = 1586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1585
                    self.latin_unicode_character_set_phrase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precisionless_char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(TeradataSQLDMLParser.VARCHAR, 0)

        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_phraseContext,0)


        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.VARGRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_precisionless_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecisionless_char_data_type" ):
                listener.enterPrecisionless_char_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecisionless_char_data_type" ):
                listener.exitPrecisionless_char_data_type(self)




    def precisionless_char_data_type(self):

        localctx = TeradataSQLDMLParser.Precisionless_char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_precisionless_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1590
                self.match(TeradataSQLDMLParser.VARCHAR)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 1591
                    self.character_set_phrase()


                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1594
                self.match(TeradataSQLDMLParser.VARGRAPHIC)
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 1595
                    self.character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_as_locator_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDMLParser.LOCATOR, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDMLParser.CLOB, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTER, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDMLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDMLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDMLParser.BINARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_lob_as_locator_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_as_locator_data_type" ):
                listener.enterLob_as_locator_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_as_locator_data_type" ):
                listener.exitLob_as_locator_data_type(self)




    def lob_as_locator_data_type(self):

        localctx = TeradataSQLDMLParser.Lob_as_locator_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lob_as_locator_data_type)
        try:
            self.state = 1616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 1600
                    self.match(TeradataSQLDMLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 1601
                    self.match(TeradataSQLDMLParser.CHARACTER)
                    self.state = 1602
                    self.match(TeradataSQLDMLParser.LARGE)
                    self.state = 1603
                    self.match(TeradataSQLDMLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1606
                self.match(TeradataSQLDMLParser.AS)
                self.state = 1607
                self.match(TeradataSQLDMLParser.LOCATOR)
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 1608
                    self.match(TeradataSQLDMLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 1609
                    self.match(TeradataSQLDMLParser.BINARY)
                    self.state = 1610
                    self.match(TeradataSQLDMLParser.LARGE)
                    self.state = 1611
                    self.match(TeradataSQLDMLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1614
                self.match(TeradataSQLDMLParser.AS)
                self.state = 1615
                self.match(TeradataSQLDMLParser.LOCATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(TeradataSQLDMLParser.BYTE, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Type_precisionContext,0)


        def VARBYTE(self):
            return self.getToken(TeradataSQLDMLParser.VARBYTE, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDMLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDMLParser.BINARY, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDMLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Max_length_k_m_gContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_binary_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_data_type" ):
                listener.enterBinary_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_data_type" ):
                listener.exitBinary_data_type(self)




    def binary_data_type(self):

        localctx = TeradataSQLDMLParser.Binary_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_binary_data_type)
        try:
            self.state = 1633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1618
                self.match(TeradataSQLDMLParser.BYTE)
                self.state = 1620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1619
                    self.type_precision()


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1622
                self.match(TeradataSQLDMLParser.VARBYTE)
                self.state = 1623
                self.type_precision()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 1624
                    self.match(TeradataSQLDMLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 1625
                    self.match(TeradataSQLDMLParser.BINARY)
                    self.state = 1626
                    self.match(TeradataSQLDMLParser.LARGE)
                    self.state = 1627
                    self.match(TeradataSQLDMLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1630
                    self.max_length_k_m_g()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(TeradataSQLDMLParser.DATE, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_period_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_datetime_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_type" ):
                listener.enterDatetime_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_type" ):
                listener.exitDatetime_type(self)




    def datetime_type(self):

        localctx = TeradataSQLDMLParser.Datetime_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_datetime_type)
        try:
            self.state = 1652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1635
                self.match(TeradataSQLDMLParser.DATE)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1636
                self.match(TeradataSQLDMLParser.TIME)
                self.state = 1638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1637
                    self.type_precision()


                self.state = 1641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1640
                    self.with_time_zone()


                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1643
                self.match(TeradataSQLDMLParser.TIMESTAMP)
                self.state = 1645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1644
                    self.type_precision()


                self.state = 1648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1647
                    self.with_time_zone()


                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1650
                self.match(TeradataSQLDMLParser.INTERVAL)
                self.state = 1651
                self.interval_period_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDMLParser.PERIOD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDMLParser.DATE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_period_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_type" ):
                listener.enterPeriod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_type" ):
                listener.exitPeriod_type(self)




    def period_type(self):

        localctx = TeradataSQLDMLParser.Period_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_period_type)
        self._la = 0 # Token type
        try:
            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.match(TeradataSQLDMLParser.PERIOD)
                self.state = 1655
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 1656
                self.match(TeradataSQLDMLParser.DATE)
                self.state = 1657
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.match(TeradataSQLDMLParser.PERIOD)
                self.state = 1659
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 1660
                self.match(TeradataSQLDMLParser.TIME)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1661
                    self.type_precision()


                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1664
                    self.with_time_zone()


                self.state = 1667
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1668
                self.match(TeradataSQLDMLParser.PERIOD)
                self.state = 1669
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 1670
                self.match(TeradataSQLDMLParser.TIMESTAMP)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1671
                    self.type_precision()


                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1674
                    self.with_time_zone()


                self.state = 1677
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TeradataSQLDMLParser.XML, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDMLParser.XMLTYPE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SysudtlibContext,0)


        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Max_length_k_m_gContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Inline_lengthContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDMLParser.JSON, 0)

        def max_length_k_m(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Max_length_k_mContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Latin_unicode_character_set_phraseContext,0)


        def json_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Json_storage_formatContext,0)


        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDMLParser.ST_GEOMETRY, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDMLParser.DATASET, 0)

        def dataset_storage_format_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Dataset_storage_format_clauseContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_udt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_type" ):
                listener.enterUdt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_type" ):
                listener.exitUdt_type(self)




    def udt_type(self):

        localctx = TeradataSQLDMLParser.Udt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_udt_type)
        self._la = 0 # Token type
        try:
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1680
                    self.sysudtlib()


                self.state = 1683
                _la = self._input.LA(1)
                if not(_la==1042 or _la==1059):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1685
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1684
                    self.max_length_k_m_g()


                self.state = 1688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1687
                    self.inline_length()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1690
                    self.sysudtlib()


                self.state = 1693
                self.match(TeradataSQLDMLParser.JSON)
                self.state = 1695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1694
                    self.max_length_k_m()


                self.state = 1698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self.inline_length()


                self.state = 1702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1700
                    self.latin_unicode_character_set_phrase()

                elif la_ == 2:
                    self.state = 1701
                    self.json_storage_format()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1704
                    self.sysudtlib()


                self.state = 1707
                self.match(TeradataSQLDMLParser.ST_GEOMETRY)
                self.state = 1709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1708
                    self.max_length_k_m()


                self.state = 1712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1711
                    self.inline_length()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1714
                    self.sysudtlib()


                self.state = 1717
                self.match(TeradataSQLDMLParser.DATASET)
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1718
                    self.max_length_k_m()


                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709:
                    self.state = 1721
                    self.inline_length()


                self.state = 1724
                self.dataset_storage_format_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.sysudtlib()


                self.state = 1728
                self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Format_phraseContext,0)


        def column_naming_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_naming_phraseContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_time_zoneContext,0)


        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.At_timezoneContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Default_value_control_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_data_type_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_attribute" ):
                listener.enterData_type_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_attribute" ):
                listener.exitData_type_attribute(self)




    def data_type_attribute(self):

        localctx = TeradataSQLDMLParser.Data_type_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_data_type_attribute)
        try:
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1731
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1732
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1733
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1734
                self.column_naming_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1735
                self.with_time_zone()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1736
                self.at_timezone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1737
                self.character_set_phrase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1738
                self.default_value_control_phrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_control_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TeradataSQLDMLParser.NULL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDMLParser.DEFAULT, 0)

        def default_value(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Default_valueContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_default_value_control_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_control_phrase" ):
                listener.enterDefault_value_control_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_control_phrase" ):
                listener.exitDefault_value_control_phrase(self)




    def default_value_control_phrase(self):

        localctx = TeradataSQLDMLParser.Default_value_control_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_default_value_control_phrase)
        self._la = 0 # Token type
        try:
            self.state = 1749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1741
                    self.match(TeradataSQLDMLParser.NOT)


                self.state = 1744
                self.match(TeradataSQLDMLParser.NULL)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1745
                self.match(TeradataSQLDMLParser.DEFAULT)
                self.state = 1746
                self.default_value()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1747
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 1748
                self.match(TeradataSQLDMLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Float_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.PLUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LiteralContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Builtin_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TeradataSQLDMLParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 1757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1751
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1752
                self.float_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1754
                self.integer_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1755
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1756
                self.builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_naming_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_column_naming_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_naming_phrase" ):
                listener.enterColumn_naming_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_naming_phrase" ):
                listener.exitColumn_naming_phrase(self)




    def column_naming_phrase(self):

        localctx = TeradataSQLDMLParser.Column_naming_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_column_naming_phrase)
        try:
            self.state = 1761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [262]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1759
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1760
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysudtlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDMLParser.SYSUDTLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_sysudtlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysudtlib" ):
                listener.enterSysudtlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysudtlib" ):
                listener.exitSysudtlib(self)




    def sysudtlib(self):

        localctx = TeradataSQLDMLParser.SysudtlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_sysudtlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.match(TeradataSQLDMLParser.SYSUDTLIB)
            self.state = 1764
            self.match(TeradataSQLDMLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_period_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDMLParser.YEAR, 0)

        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Type_precisionContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDMLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDMLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDMLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDMLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDMLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDMLParser.SECOND, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_interval_period_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_period_spec" ):
                listener.enterInterval_period_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_period_spec" ):
                listener.exitInterval_period_spec(self)




    def interval_period_spec(self):

        localctx = TeradataSQLDMLParser.Interval_period_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_interval_period_spec)
        self._la = 0 # Token type
        try:
            self.state = 1828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [478]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.match(TeradataSQLDMLParser.YEAR)
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.type_precision()


                self.state = 1772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1770
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1771
                    self.match(TeradataSQLDMLParser.MONTH)


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1774
                self.match(TeradataSQLDMLParser.MONTH)
                self.state = 1776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1775
                    self.type_precision()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1778
                self.match(TeradataSQLDMLParser.DAY)
                self.state = 1780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1779
                    self.type_precision()


                self.state = 1791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1782
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1783
                    self.match(TeradataSQLDMLParser.HOUR)

                elif la_ == 2:
                    self.state = 1784
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1785
                    self.match(TeradataSQLDMLParser.MINUTE)

                elif la_ == 3:
                    self.state = 1786
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1787
                    self.match(TeradataSQLDMLParser.SECOND)
                    self.state = 1789
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                    if la_ == 1:
                        self.state = 1788
                        self.type_precision()




                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1793
                self.match(TeradataSQLDMLParser.HOUR)
                self.state = 1795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1794
                    self.type_precision()


                self.state = 1804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1797
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1798
                    self.match(TeradataSQLDMLParser.MINUTE)

                elif la_ == 2:
                    self.state = 1799
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1800
                    self.match(TeradataSQLDMLParser.SECOND)
                    self.state = 1802
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                    if la_ == 1:
                        self.state = 1801
                        self.type_precision()




                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1806
                self.match(TeradataSQLDMLParser.MINUTE)
                self.state = 1808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1807
                    self.type_precision()


                self.state = 1815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1810
                    self.match(TeradataSQLDMLParser.TO)
                    self.state = 1811
                    self.match(TeradataSQLDMLParser.SECOND)
                    self.state = 1813
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 1812
                        self.type_precision()




                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1817
                self.match(TeradataSQLDMLParser.SECOND)
                self.state = 1826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1818
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 1819
                    localctx.precision = self.integer_literal()
                    self.state = 1822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 1820
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 1821
                        localctx.fractional_precision = self.integer_literal()


                    self.state = 1824
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_precisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_type_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_precision" ):
                listener.enterType_precision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_precision" ):
                listener.exitType_precision(self)




    def type_precision(self):

        localctx = TeradataSQLDMLParser.Type_precisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_type_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 1831
            localctx.precision = self.integer_literal()
            self.state = 1832
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_m_gContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDMLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDMLParser.M, 0)

        def G(self):
            return self.getToken(TeradataSQLDMLParser.G, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_max_length_k_m_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m_g" ):
                listener.enterMax_length_k_m_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m_g" ):
                listener.exitMax_length_k_m_g(self)




    def max_length_k_m_g(self):

        localctx = TeradataSQLDMLParser.Max_length_k_m_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_max_length_k_m_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 1835
            localctx.max_length = self.integer_literal()
            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==681 or _la==723 or _la==752:
                self.state = 1836
                _la = self._input.LA(1)
                if not(_la==681 or _la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1839
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_mContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDMLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDMLParser.M, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_max_length_k_m

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m" ):
                listener.enterMax_length_k_m(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m" ):
                listener.exitMax_length_k_m(self)




    def max_length_k_m(self):

        localctx = TeradataSQLDMLParser.Max_length_k_mContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_max_length_k_m)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 1842
            localctx.max_length = self.integer_literal()
            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==723 or _la==752:
                self.state = 1843
                _la = self._input.LA(1)
                if not(_la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1846
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDMLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDMLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE, 0)

        def GRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.GRAPHIC, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDMLParser.KANJISJIS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_phrase" ):
                listener.enterCharacter_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_phrase" ):
                listener.exitCharacter_set_phrase(self)




    def character_set_phrase(self):

        localctx = TeradataSQLDMLParser.Character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1849
            self.match(TeradataSQLDMLParser.SET)
            self.state = 1850
            _la = self._input.LA(1)
            if not(_la==173 or _la==725 or _la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uppercase_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPPERCASE(self):
            return self.getToken(TeradataSQLDMLParser.UPPERCASE, 0)

        def UC(self):
            return self.getToken(TeradataSQLDMLParser.UC, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_uppercase_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUppercase_phrase" ):
                listener.enterUppercase_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUppercase_phrase" ):
                listener.exitUppercase_phrase(self)




    def uppercase_phrase(self):

        localctx = TeradataSQLDMLParser.Uppercase_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_uppercase_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            _la = self._input.LA(1)
            if not(_la==438 or _la==455):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Casespecific_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.not_ = None # Token

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLDMLParser.CASESPECIFIC, 0)

        def CS(self):
            return self.getToken(TeradataSQLDMLParser.CS, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)

        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_casespecific_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasespecific_phrase" ):
                listener.enterCasespecific_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasespecific_phrase" ):
                listener.exitCasespecific_phrase(self)




    def casespecific_phrase(self):

        localctx = TeradataSQLDMLParser.Casespecific_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_casespecific_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==1211:
                self.state = 1854
                localctx.not_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    localctx.not_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1857
            _la = self._input.LA(1)
            if not(_la==49 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Char_string_literalContext
            self.date_format = None # Token
            self.time_format = None # Token

        def FORMAT(self):
            return self.getToken(TeradataSQLDMLParser.FORMAT, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def DATE_STRING(self):
            return self.getToken(TeradataSQLDMLParser.DATE_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDMLParser.TIME_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_format_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_phrase" ):
                listener.enterFormat_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_phrase" ):
                listener.exitFormat_phrase(self)




    def format_phrase(self):

        localctx = TeradataSQLDMLParser.Format_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_format_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(TeradataSQLDMLParser.FORMAT)
            self.state = 1863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 1860
                localctx.format_ = self.char_string_literal()
                pass
            elif token in [1198]:
                self.state = 1861
                localctx.date_format = self.match(TeradataSQLDMLParser.DATE_STRING)
                pass
            elif token in [1199]:
                self.state = 1862
                localctx.time_format = self.match(TeradataSQLDMLParser.TIME_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def TITLE(self):
            return self.getToken(TeradataSQLDMLParser.TITLE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle_phrase" ):
                listener.enterTitle_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle_phrase" ):
                listener.exitTitle_phrase(self)




    def title_phrase(self):

        localctx = TeradataSQLDMLParser.Title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            self.match(TeradataSQLDMLParser.TITLE)
            self.state = 1866
            localctx.title = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMED(self):
            return self.getToken(TeradataSQLDMLParser.NAMED, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_named_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_phrase" ):
                listener.enterNamed_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_phrase" ):
                listener.exitNamed_phrase(self)




    def named_phrase(self):

        localctx = TeradataSQLDMLParser.Named_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_named_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(TeradataSQLDMLParser.NAMED)
            self.state = 1869
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_unicode_character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDMLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDMLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDMLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_latin_unicode_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLatin_unicode_character_set_phrase" ):
                listener.enterLatin_unicode_character_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLatin_unicode_character_set_phrase" ):
                listener.exitLatin_unicode_character_set_phrase(self)




    def latin_unicode_character_set_phrase(self):

        localctx = TeradataSQLDMLParser.Latin_unicode_character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_latin_unicode_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1872
            self.match(TeradataSQLDMLParser.SET)
            self.state = 1873
            _la = self._input.LA(1)
            if not(_la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.length = None # Integer_literalContext

        def INLINE(self):
            return self.getToken(TeradataSQLDMLParser.INLINE, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.LENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_inline_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_length" ):
                listener.enterInline_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_length" ):
                listener.exitInline_length(self)




    def inline_length(self):

        localctx = TeradataSQLDMLParser.Inline_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_inline_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.match(TeradataSQLDMLParser.INLINE)
            self.state = 1876
            self.match(TeradataSQLDMLParser.LENGTH)
            self.state = 1877
            localctx.length = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDMLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDMLParser.FORMAT, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDMLParser.BSON, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDMLParser.UBJSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_storage_format" ):
                listener.enterJson_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_storage_format" ):
                listener.exitJson_storage_format(self)




    def json_storage_format(self):

        localctx = TeradataSQLDMLParser.Json_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_json_storage_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.match(TeradataSQLDMLParser.STORAGE)
            self.state = 1880
            self.match(TeradataSQLDMLParser.FORMAT)
            self.state = 1881
            _la = self._input.LA(1)
            if not(_la==556 or _la==1010):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDMLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDMLParser.FORMAT, 0)

        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Dataset_storage_formatContext,0)


        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_schemaContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_dataset_storage_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format_clause" ):
                listener.enterDataset_storage_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format_clause" ):
                listener.exitDataset_storage_format_clause(self)




    def dataset_storage_format_clause(self):

        localctx = TeradataSQLDMLParser.Dataset_storage_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dataset_storage_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.match(TeradataSQLDMLParser.STORAGE)
            self.state = 1884
            self.match(TeradataSQLDMLParser.FORMAT)
            self.state = 1885
            self.dataset_storage_format()
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1886
                self.with_schema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVRO(self):
            return self.getToken(TeradataSQLDMLParser.AVRO, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDMLParser.CSV, 0)

        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_dataset_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format" ):
                listener.enterDataset_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format" ):
                listener.exitDataset_storage_format(self)




    def dataset_storage_format(self):

        localctx = TeradataSQLDMLParser.Dataset_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dataset_storage_format)
        try:
            self.state = 1894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1889
                self.match(TeradataSQLDMLParser.AVRO)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1890
                self.match(TeradataSQLDMLParser.CSV)
                self.state = 1892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1891
                    self.latin_unicode_character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Table_nameContext

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDMLParser.SCHEMA, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_schema" ):
                listener.enterWith_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_schema" ):
                listener.exitWith_schema(self)




    def with_schema(self):

        localctx = TeradataSQLDMLParser.With_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_with_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 1897
            self.match(TeradataSQLDMLParser.SCHEMA)
            self.state = 1898
            localctx.schema_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDMLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_time_zone" ):
                listener.enterWith_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_time_zone" ):
                listener.exitWith_time_zone(self)




    def with_time_zone(self):

        localctx = TeradataSQLDMLParser.With_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_with_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 1901
            self.match(TeradataSQLDMLParser.TIME)
            self.state = 1902
            self.match(TeradataSQLDMLParser.ZONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hex_byte_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hex_byte_literalContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hex_char_string_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def hex_integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hex_integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Float_literalContext,0)


        def date_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Date_literalContext,0)


        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Time_literalContext,0)


        def timestamp_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Timestamp_literalContext,0)


        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_literalContext,0)


        def period_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Period_literalContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLDMLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = TeradataSQLDMLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_literal)
        try:
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1904
                self.hex_byte_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1906
                self.unicode_char_string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1907
                self.hex_char_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1908
                self.integer_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1909
                self.hex_integer_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1910
                self.float_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1911
                self.date_literal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1912
                self.time_literal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1913
                self.timestamp_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1914
                self.interval_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1915
                self.period_literal()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1916
                self.match(TeradataSQLDMLParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_byte_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_BYTE_LITERAL(self):
            return self.getToken(TeradataSQLDMLParser.HEX_BYTE_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hex_byte_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_byte_literal" ):
                listener.enterHex_byte_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_byte_literal" ):
                listener.exitHex_byte_literal(self)




    def hex_byte_literal(self):

        localctx = TeradataSQLDMLParser.Hex_byte_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_hex_byte_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            self.match(TeradataSQLDMLParser.HEX_BYTE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_prefixContext,0)


        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDMLParser.CHAR_STRING, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_string_literal" ):
                listener.enterChar_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_string_literal" ):
                listener.exitChar_string_literal(self)




    def char_string_literal(self):

        localctx = TeradataSQLDMLParser.Char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1921
                self.character_set_prefix()


            self.state = 1925 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1924
                    self.match(TeradataSQLDMLParser.CHAR_STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 1927 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_STRING_LEADING(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE_STRING_LEADING, 0)

        def UESCAPE(self):
            return self.getToken(TeradataSQLDMLParser.UESCAPE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDMLParser.CHAR_STRING, i)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unicode_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_char_string_literal" ):
                listener.enterUnicode_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_char_string_literal" ):
                listener.exitUnicode_char_string_literal(self)




    def unicode_char_string_literal(self):

        localctx = TeradataSQLDMLParser.Unicode_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unicode_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1929
                self.character_set_prefix()


            self.state = 1932
            self.match(TeradataSQLDMLParser.UNICODE_STRING_LEADING)
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1203:
                self.state = 1933
                self.match(TeradataSQLDMLParser.CHAR_STRING)
                self.state = 1938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1939
            self.match(TeradataSQLDMLParser.UESCAPE)
            self.state = 1940
            self.match(TeradataSQLDMLParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(TeradataSQLDMLParser.HEX_STRING, 0)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hex_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_char_string_literal" ):
                listener.enterHex_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_char_string_literal" ):
                listener.exitHex_char_string_literal(self)




    def hex_char_string_literal(self):

        localctx = TeradataSQLDMLParser.Hex_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_hex_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1942
                self.character_set_prefix()


            self.state = 1945
            self.match(TeradataSQLDMLParser.HEX_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDMLParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = TeradataSQLDMLParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(TeradataSQLDMLParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(TeradataSQLDMLParser.HEX_INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hex_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_integer_literal" ):
                listener.enterHex_integer_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_integer_literal" ):
                listener.exitHex_integer_literal(self)




    def hex_integer_literal(self):

        localctx = TeradataSQLDMLParser.Hex_integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_hex_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(TeradataSQLDMLParser.HEX_INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(TeradataSQLDMLParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)




    def float_literal(self):

        localctx = TeradataSQLDMLParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.match(TeradataSQLDMLParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDMLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDMLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.CS_GRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_character_set_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_prefix" ):
                listener.enterCharacter_set_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_prefix" ):
                listener.exitCharacter_set_prefix(self)




    def character_set_prefix(self):

        localctx = TeradataSQLDMLParser.Character_set_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_character_set_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            _la = self._input.LA(1)
            if not(((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDMLParser.DATE_STRING, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDMLParser.DATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_date_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_literal" ):
                listener.enterDate_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_literal" ):
                listener.exitDate_literal(self)




    def date_literal(self):

        localctx = TeradataSQLDMLParser.Date_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_date_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 1955
                self.match(TeradataSQLDMLParser.DATE)


            self.state = 1958
            self.match(TeradataSQLDMLParser.DATE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDMLParser.TIME_STRING, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_time_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_literal" ):
                listener.enterTime_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_literal" ):
                listener.exitTime_literal(self)




    def time_literal(self):

        localctx = TeradataSQLDMLParser.Time_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_time_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1960
                self.match(TeradataSQLDMLParser.TIME)


            self.state = 1963
            self.match(TeradataSQLDMLParser.TIME_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timestamp_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDMLParser.TIMESTAMP_STRING, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_timestamp_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp_literal" ):
                listener.enterTimestamp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp_literal" ):
                listener.exitTimestamp_literal(self)




    def timestamp_literal(self):

        localctx = TeradataSQLDMLParser.Timestamp_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_timestamp_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 1965
                self.match(TeradataSQLDMLParser.TIMESTAMP)


            self.state = 1968
            self.match(TeradataSQLDMLParser.TIMESTAMP_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.INTERVAL, 0)

        def interval_qualifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_qualifierContext,0)


        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDMLParser.CHAR_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDMLParser.TIME_STRING, 0)

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDMLParser.DATE_STRING, 0)

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDMLParser.TIMESTAMP_STRING, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_interval_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_literal" ):
                listener.enterInterval_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_literal" ):
                listener.exitInterval_literal(self)




    def interval_literal(self):

        localctx = TeradataSQLDMLParser.Interval_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_interval_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.match(TeradataSQLDMLParser.INTERVAL)
            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 1971
                self.match(TeradataSQLDMLParser.MINUS_SIGN)


            self.state = 1974
            _la = self._input.LA(1)
            if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 39) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1975
            self.interval_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TeradataSQLDMLParser.YEAR, 0)

        def TO(self):
            return self.getToken(TeradataSQLDMLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDMLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDMLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDMLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDMLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDMLParser.SECOND, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_interval_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_qualifier" ):
                listener.enterInterval_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_qualifier" ):
                listener.exitInterval_qualifier(self)




    def interval_qualifier(self):

        localctx = TeradataSQLDMLParser.Interval_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_interval_qualifier)
        try:
            self.state = 2004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1977
                self.match(TeradataSQLDMLParser.YEAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1978
                self.match(TeradataSQLDMLParser.YEAR)
                self.state = 1979
                self.match(TeradataSQLDMLParser.TO)
                self.state = 1980
                self.match(TeradataSQLDMLParser.MONTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1981
                self.match(TeradataSQLDMLParser.MONTH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1982
                self.match(TeradataSQLDMLParser.DAY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1983
                self.match(TeradataSQLDMLParser.DAY)
                self.state = 1984
                self.match(TeradataSQLDMLParser.TO)
                self.state = 1985
                self.match(TeradataSQLDMLParser.HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1986
                self.match(TeradataSQLDMLParser.DAY)
                self.state = 1987
                self.match(TeradataSQLDMLParser.TO)
                self.state = 1988
                self.match(TeradataSQLDMLParser.MINUTE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1989
                self.match(TeradataSQLDMLParser.DAY)
                self.state = 1990
                self.match(TeradataSQLDMLParser.TO)
                self.state = 1991
                self.match(TeradataSQLDMLParser.SECOND)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1992
                self.match(TeradataSQLDMLParser.HOUR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1993
                self.match(TeradataSQLDMLParser.HOUR)
                self.state = 1994
                self.match(TeradataSQLDMLParser.TO)
                self.state = 1995
                self.match(TeradataSQLDMLParser.MINUTE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1996
                self.match(TeradataSQLDMLParser.HOUR)
                self.state = 1997
                self.match(TeradataSQLDMLParser.TO)
                self.state = 1998
                self.match(TeradataSQLDMLParser.SECOND)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1999
                self.match(TeradataSQLDMLParser.MINUTE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2000
                self.match(TeradataSQLDMLParser.MINUTE)
                self.state = 2001
                self.match(TeradataSQLDMLParser.TO)
                self.state = 2002
                self.match(TeradataSQLDMLParser.SECOND)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2003
                self.match(TeradataSQLDMLParser.SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDMLParser.PERIOD, 0)

        def PERIOD_STRING(self):
            return self.getToken(TeradataSQLDMLParser.PERIOD_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_period_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_literal" ):
                listener.enterPeriod_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_literal" ):
                listener.exitPeriod_literal(self)




    def period_literal(self):

        localctx = TeradataSQLDMLParser.Period_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_period_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.match(TeradataSQLDMLParser.PERIOD)
            self.state = 2007
            self.match(TeradataSQLDMLParser.PERIOD_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unqualified_table_name = None # Unqualified_nameContext

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)

        def unqualified_column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_column_nameContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = TeradataSQLDMLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_column_name)
        try:
            self.state = 2020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2009
                self.database_name()
                self.state = 2010
                self.match(TeradataSQLDMLParser.DOT_)
                self.state = 2011
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 2012
                self.match(TeradataSQLDMLParser.DOT_)
                self.state = 2013
                self.unqualified_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 2016
                self.match(TeradataSQLDMLParser.DOT_)
                self.state = 2017
                self.unqualified_column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2019
                self.unqualified_column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def SAMPLEID(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLEID, 0)

        def ROWID(self):
            return self.getToken(TeradataSQLDMLParser.ROWID, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unqualified_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_column_name" ):
                listener.enterUnqualified_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_column_name" ):
                listener.exitUnqualified_column_name(self)




    def unqualified_column_name(self):

        localctx = TeradataSQLDMLParser.Unqualified_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_unqualified_column_name)
        try:
            self.state = 2026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2022
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2023
                self.nonreserved_word()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2024
                self.match(TeradataSQLDMLParser.SAMPLEID)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2025
                self.match(TeradataSQLDMLParser.ROWID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = TeradataSQLDMLParser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unqualified_name)
        try:
            self.state = 2030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2029
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = TeradataSQLDMLParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 2032
                self.database_name()
                self.state = 2033
                self.match(TeradataSQLDMLParser.DOT_)


            self.state = 2039
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 2037
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 2038
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TeradataSQLDMLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 2041
                self.database_name()
                self.state = 2042
                self.match(TeradataSQLDMLParser.DOT_)


            self.state = 2048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 2046
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 2047
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = TeradataSQLDMLParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_procedure_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2050
                self.database_name()
                self.state = 2051
                self.match(TeradataSQLDMLParser.DOT_)


            self.state = 2057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 2055
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 2056
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = TeradataSQLDMLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2059
                self.database_name()
                self.state = 2060
                self.match(TeradataSQLDMLParser.DOT_)


            self.state = 2066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 2064
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 2065
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_macro_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_name" ):
                listener.enterMacro_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_name" ):
                listener.exitMacro_name(self)




    def macro_name(self):

        localctx = TeradataSQLDMLParser.Macro_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_macro_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 2068
                self.database_name()
                self.state = 2069
                self.match(TeradataSQLDMLParser.DOT_)


            self.state = 2075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 2073
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 2074
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = TeradataSQLDMLParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_database_name)
        try:
            self.state = 2079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2077
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2078
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_user_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_name" ):
                listener.enterUser_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_name" ):
                listener.exitUser_name(self)




    def user_name(self):

        localctx = TeradataSQLDMLParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_user_name)
        try:
            self.state = 2083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2081
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2082
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDMLParser.ADMIN, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = TeradataSQLDMLParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_role_name)
        try:
            self.state = 2088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.match(TeradataSQLDMLParser.ADMIN)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2087
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_profile_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_name" ):
                listener.enterProfile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_name" ):
                listener.exitProfile_name(self)




    def profile_name(self):

        localctx = TeradataSQLDMLParser.Profile_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_profile_name)
        try:
            self.state = 2092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2090
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2091
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_name" ):
                listener.enterAlias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_name" ):
                listener.exitAlias_name(self)




    def alias_name(self):

        localctx = TeradataSQLDMLParser.Alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_alias_name)
        try:
            self.state = 2096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2094
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = TeradataSQLDMLParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_variable_name)
        try:
            self.state = 2100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2098
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2099
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = TeradataSQLDMLParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_parameter_name)
        try:
            self.state = 2104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2102
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2103
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = TeradataSQLDMLParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_label_name)
        try:
            self.state = 2108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2106
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2107
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_condition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_name" ):
                listener.enterCondition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_name" ):
                listener.exitCondition_name(self)




    def condition_name(self):

        localctx = TeradataSQLDMLParser.Condition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_condition_name)
        try:
            self.state = 2112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2110
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2111
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TeradataSQLDMLParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_cursor_name)
        try:
            self.state = 2116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2114
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2115
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = TeradataSQLDMLParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_statement_name)
        try:
            self.state = 2120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2118
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2119
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statistics_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_statistics_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatistics_name" ):
                listener.enterStatistics_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatistics_name" ):
                listener.exitStatistics_name(self)




    def statistics_name(self):

        localctx = TeradataSQLDMLParser.Statistics_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_statistics_name)
        try:
            self.state = 2124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2122
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2123
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_udt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_name" ):
                listener.enterUdt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_name" ):
                listener.exitUdt_name(self)




    def udt_name(self):

        localctx = TeradataSQLDMLParser.Udt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_udt_name)
        try:
            self.state = 2128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2126
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2127
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = TeradataSQLDMLParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_attribute_name)
        try:
            self.state = 2132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2130
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2131
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDMLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = TeradataSQLDMLParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_method_name)
        try:
            self.state = 2136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2134
                self.match(TeradataSQLDMLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2135
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anchor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_SECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_HOUR, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDMLParser.DAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_END, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_END, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDMLParser.QUARTER_END, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDMLParser.YEAR_END, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDMLParser.MONDAY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDMLParser.TUESDAY, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDMLParser.WEDNESDAY, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDMLParser.THURSDAY, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDMLParser.FRIDAY, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDMLParser.SATURDAY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDMLParser.SUNDAY, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_anchor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor_name" ):
                listener.enterAnchor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor_name" ):
                listener.exitAnchor_name(self)




    def anchor_name(self):

        localctx = TeradataSQLDMLParser.Anchor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_anchor_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            _la = self._input.LA(1)
            if not(_la==106 or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 15) != 0) or _la==678 or ((((_la - 774)) & ~0x3f) == 0 and ((1 << (_la - 774)) & 49) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 2199023255555) != 0) or ((((_la - 949)) & ~0x3f) == 0 and ((1 << (_la - 949)) & 1152921573326323713) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & 103079215111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSIONS(self):
            return self.getToken(TeradataSQLDMLParser.ABORTSESSIONS, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDMLParser.ABSENT, 0)

        def ACCESS(self):
            return self.getToken(TeradataSQLDMLParser.ACCESS, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDMLParser.ACCORDING, 0)

        def ACCUMULATE(self):
            return self.getToken(TeradataSQLDMLParser.ACCUMULATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLDMLParser.AG, 0)

        def AGGGEOMINTERSECTION(self):
            return self.getToken(TeradataSQLDMLParser.AGGGEOMINTERSECTION, 0)

        def AGGGEOMUNION(self):
            return self.getToken(TeradataSQLDMLParser.AGGGEOMUNION, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLDMLParser.ALLDBQL, 0)

        def ALLOCATE(self):
            return self.getToken(TeradataSQLDMLParser.ALLOCATE, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDMLParser.ALLOCATION, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLDMLParser.ALLOW, 0)

        def ALLPARAMS(self):
            return self.getToken(TeradataSQLDMLParser.ALLPARAMS, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLDMLParser.ALLTDWM, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLDMLParser.ALWAYS, 0)

        def AMPCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.AMPCOUNT, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDMLParser.ANALYSIS, 0)

        def ANCHOR(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_HOUR, 0)

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR_SECOND, 0)

        def APPLNAME(self):
            return self.getToken(TeradataSQLDMLParser.APPLNAME, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLDMLParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_ADD, 0)

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_AGG, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_AVG, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_COMPARE, 0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_CONCAT, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_DIV, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_EQ, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GE, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GET, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_LE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_LT, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MIN, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MOD, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MUL, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_NE, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_SUB, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_SUM, 0)

        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_UPDATE_STRIDE, 0)

        def ASCII(self):
            return self.getToken(TeradataSQLDMLParser.ASCII, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLDMLParser.ASSIGNMENT, 0)

        def ATTR(self):
            return self.getToken(TeradataSQLDMLParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDMLParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLDMLParser.ATTRIBUTES, 0)

        def ATTRIBUTION(self):
            return self.getToken(TeradataSQLDMLParser.ATTRIBUTION, 0)

        def ATTRS(self):
            return self.getToken(TeradataSQLDMLParser.ATTRS, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDMLParser.AUTH, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDMLParser.AUTO, 0)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLDMLParser.AUTOTEMP, 0)

        def AVRO(self):
            return self.getToken(TeradataSQLDMLParser.AVRO, 0)

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.BIT_LENGTH, 0)

        def BITAND(self):
            return self.getToken(TeradataSQLDMLParser.BITAND, 0)

        def BITNOT(self):
            return self.getToken(TeradataSQLDMLParser.BITNOT, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDMLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDMLParser.BITXOR, 0)

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLDMLParser.BLOCKCOMPRESSION, 0)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLDMLParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLDMLParser.BLOCKCOMPRESSIONLEVEL, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDMLParser.BOM, 0)

        def BOTTOM(self):
            return self.getToken(TeradataSQLDMLParser.BOTTOM, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDMLParser.BSON, 0)

        def C(self):
            return self.getToken(TeradataSQLDMLParser.C, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.CALENDAR, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDMLParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TeradataSQLDMLParser.CALLER, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDMLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDMLParser.CAMSET_L, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLDMLParser.CAPTURE, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDMLParser.CARDINALITY, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDMLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDMLParser.CEILING, 0)

        def CHANGERATE(self):
            return self.getToken(TeradataSQLDMLParser.CHANGERATE, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTERISTICS, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDMLParser.CHARSET, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLDMLParser.CHARSET_COLL, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDMLParser.CHECKSUM, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDMLParser.CHR, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDMLParser.CLASS_ORIGIN, 0)

        def CLICKLAG(self):
            return self.getToken(TeradataSQLDMLParser.CLICKLAG, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLDMLParser.CLIENT, 0)

        def CNT(self):
            return self.getToken(TeradataSQLDMLParser.CNT, 0)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDMLParser.COLOCATE, 0)

        def COLUMNMETA(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNMETA, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNS, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNSPERJOININDEX, 0)

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLDMLParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLDMLParser.COMMAND_FUNCTION_CODE, 0)

        def COMPARISON(self):
            return self.getToken(TeradataSQLDMLParser.COMPARISON, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLDMLParser.COMPILE, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDMLParser.CONCAT, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDMLParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(TeradataSQLDMLParser.CONDITION, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLDMLParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLDMLParser.CONDITION_NUMBER, 0)

        def CONTAINED(self):
            return self.getToken(TeradataSQLDMLParser.CONTAINED, 0)

        def CONTAINEDTOKEN(self):
            return self.getToken(TeradataSQLDMLParser.CONTAINEDTOKEN, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDMLParser.CONTENT, 0)

        def CONTIGUOUS(self):
            return self.getToken(TeradataSQLDMLParser.CONTIGUOUS, 0)

        def COST(self):
            return self.getToken(TeradataSQLDMLParser.COST, 0)

        def COSTS(self):
            return self.getToken(TeradataSQLDMLParser.COSTS, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDMLParser.COUNTSET, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDMLParser.CPP, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLDMLParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLDMLParser.CPUTIMENORM, 0)

        def CREATEDATASET(self):
            return self.getToken(TeradataSQLDMLParser.CREATEDATASET, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLDMLParser.CREATOR, 0)

        def CUME_DIST(self):
            return self.getToken(TeradataSQLDMLParser.CUME_DIST, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDMLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDMLParser.CURTIME, 0)

        def DATA(self):
            return self.getToken(TeradataSQLDMLParser.DATA, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDMLParser.DATASET, 0)

        def DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.DAY_OF_CALENDAR, 0)

        def DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAY_OF_MONTH, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDMLParser.DAY_OF_WEEK, 0)

        def DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.DAY_OF_YEAR, 0)

        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def DBA(self):
            return self.getToken(TeradataSQLDMLParser.DBA, 0)

        def DBC(self):
            return self.getToken(TeradataSQLDMLParser.DBC, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLDMLParser.DEBUG, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDMLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDMLParser.DECAMSET_L, 0)

        def DECODE(self):
            return self.getToken(TeradataSQLDMLParser.DECODE, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.DECOMPRESS, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDMLParser.DEFINER, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDMLParser.DELIMITER, 0)

        def DELTA_T(self):
            return self.getToken(TeradataSQLDMLParser.DELTA_T, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDMLParser.DEMOGRAPHICS, 0)

        def DENIALS(self):
            return self.getToken(TeradataSQLDMLParser.DENIALS, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDMLParser.DENSE, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDMLParser.DENSE_RANK, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataSQLDMLParser.DESCRIBE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLDMLParser.DETAILED, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLDMLParser.DIAGNOSTICS, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLDMLParser.DIGITS, 0)

        def DIMENSION(self):
            return self.getToken(TeradataSQLDMLParser.DIMENSION, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDMLParser.DOCUMENT, 0)

        def DOT(self):
            return self.getToken(TeradataSQLDMLParser.DOT, 0)

        def DOWN(self):
            return self.getToken(TeradataSQLDMLParser.DOWN, 0)

        def DR(self):
            return self.getToken(TeradataSQLDMLParser.DR, 0)

        def DUPCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.DUPCOUNT, 0)

        def DUPCOUNTCUM(self):
            return self.getToken(TeradataSQLDMLParser.DUPCOUNTCUM, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLDMLParser.EBCDIC, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDMLParser.EDITDISTANCE, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLDMLParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLDMLParser.ELAPSEDTIME, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDMLParser.ELEMENT, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLDMLParser.ELZS_H, 0)

        def EMITNULL(self):
            return self.getToken(TeradataSQLDMLParser.EMITNULL, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDMLParser.EMPTY, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDMLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDMLParser.EMPTY_CLOB, 0)

        def ENCODE(self):
            return self.getToken(TeradataSQLDMLParser.ENCODE, 0)

        def ENCODING(self):
            return self.getToken(TeradataSQLDMLParser.ENCODING, 0)

        def ENCRYPT(self):
            return self.getToken(TeradataSQLDMLParser.ENCRYPT, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDMLParser.ERRORS, 0)

        def ERRORTBL(self):
            return self.getToken(TeradataSQLDMLParser.ERRORTBL, 0)

        def EVENTCOLUMN(self):
            return self.getToken(TeradataSQLDMLParser.EVENTCOLUMN, 0)

        def EXCEPTION(self):
            return self.getToken(TeradataSQLDMLParser.EXCEPTION, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDMLParser.EXCL, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDMLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDMLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDMLParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLDMLParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDMLParser.EXPORT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLDMLParser.EXPORTWIDTH, 0)

        def FALSE(self):
            return self.getToken(TeradataSQLDMLParser.FALSE, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLDMLParser.FEATUREINFO, 0)

        def FILE(self):
            return self.getToken(TeradataSQLDMLParser.FILE, 0)

        def FILL(self):
            return self.getToken(TeradataSQLDMLParser.FILL, 0)

        def FILTER(self):
            return self.getToken(TeradataSQLDMLParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLDMLParser.FINAL, 0)

        def FIRST_NOTNULL(self):
            return self.getToken(TeradataSQLDMLParser.FIRST_NOTNULL, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDMLParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDMLParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataSQLDMLParser.FOLLOWING, 0)

        def FOREIGNFUNCTION(self):
            return self.getToken(TeradataSQLDMLParser.FOREIGNFUNCTION, 0)

        def FORTOKEN(self):
            return self.getToken(TeradataSQLDMLParser.FORTOKEN, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDMLParser.FRIDAY, 0)

        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDMLParser.FROM_BYTES, 0)

        def FUNCTIONPARAMETER(self):
            return self.getToken(TeradataSQLDMLParser.FUNCTIONPARAMETER, 0)

        def G(self):
            return self.getToken(TeradataSQLDMLParser.G, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDMLParser.GETBIT, 0)

        def GETPSFVERSION(self):
            return self.getToken(TeradataSQLDMLParser.GETPSFVERSION, 0)

        def GETQUERYBAND(self):
            return self.getToken(TeradataSQLDMLParser.GETQUERYBAND, 0)

        def GETQUERYBANDVALUE(self):
            return self.getToken(TeradataSQLDMLParser.GETQUERYBANDVALUE, 0)

        def GETTIMEZONEDISPLACEMENT(self):
            return self.getToken(TeradataSQLDMLParser.GETTIMEZONEDISPLACEMENT, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLDMLParser.GLOBAL, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDMLParser.GLOP, 0)

        def GREATEST(self):
            return self.getToken(TeradataSQLDMLParser.GREATEST, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDMLParser.HIGH, 0)

        def HOST(self):
            return self.getToken(TeradataSQLDMLParser.HOST, 0)

        def IDENTIFYDATABASE(self):
            return self.getToken(TeradataSQLDMLParser.IDENTIFYDATABASE, 0)

        def IDENTIFYSESSION(self):
            return self.getToken(TeradataSQLDMLParser.IDENTIFYSESSION, 0)

        def IDENTIFYTABLE(self):
            return self.getToken(TeradataSQLDMLParser.IDENTIFYTABLE, 0)

        def IDENTIFYUSER(self):
            return self.getToken(TeradataSQLDMLParser.IDENTIFYUSER, 0)

        def IFP(self):
            return self.getToken(TeradataSQLDMLParser.IFP, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDMLParser.IGNORE, 0)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDMLParser.IMMEDIATELY, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLDMLParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(TeradataSQLDMLParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDMLParser.INCREMENTAL, 0)

        def INDENT(self):
            return self.getToken(TeradataSQLDMLParser.INDENT, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLDMLParser.INDEXESPERTABLE, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLDMLParser.INDEXMAINTMODE, 0)

        def INIT(self):
            return self.getToken(TeradataSQLDMLParser.INIT, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDMLParser.INITCAP, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLDMLParser.INLINE, 0)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLDMLParser.INSTANTIABLE, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDMLParser.INSTR, 0)

        def INTERNAL(self):
            return self.getToken(TeradataSQLDMLParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDMLParser.INVOKER, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.IOCOUNT, 0)

        def IPARTITION(self):
            return self.getToken(TeradataSQLDMLParser.IPARTITION, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDMLParser.ISOLATED, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLDMLParser.ISOLATION, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDMLParser.JAVA, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLDMLParser.JIS_COLL, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDMLParser.JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDMLParser.JSON_AGG, 0)

        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDMLParser.JSON_COMPOSE, 0)

        def K(self):
            return self.getToken(TeradataSQLDMLParser.K, 0)

        def KANJI1(self):
            return self.getToken(TeradataSQLDMLParser.KANJI1, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDMLParser.KANJISJIS, 0)

        def KBYTE(self):
            return self.getToken(TeradataSQLDMLParser.KBYTE, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLDMLParser.KBYTES, 0)

        def KEEP(self):
            return self.getToken(TeradataSQLDMLParser.KEEP, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLDMLParser.KILOBYTES, 0)

        def LAG(self):
            return self.getToken(TeradataSQLDMLParser.LAG, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDMLParser.LAST, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDMLParser.LAST_DAY, 0)

        def LAST_NOTNULL(self):
            return self.getToken(TeradataSQLDMLParser.LAST_NOTNULL, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDMLParser.LAST_VALUE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDMLParser.LATIN, 0)

        def LDIFF(self):
            return self.getToken(TeradataSQLDMLParser.LDIFF, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDMLParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDMLParser.LEAST, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.LENGTH, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLDMLParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TeradataSQLDMLParser.LIST, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDMLParser.LOAD, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDMLParser.LOCATE, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLDMLParser.LOCKEDUSEREXPIRE, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDMLParser.LOW, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDMLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDMLParser.LTRIM, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDMLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDMLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDMLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDMLParser.LZDECOMP_L, 0)

        def M(self):
            return self.getToken(TeradataSQLDMLParser.M, 0)

        def MAD(self):
            return self.getToken(TeradataSQLDMLParser.MAD, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLDMLParser.MANUAL, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLDMLParser.MAPPING, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDMLParser.MATCHED, 0)

        def MAX_CHOOSE(self):
            return self.getToken(TeradataSQLDMLParser.MAX_CHOOSE, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLDMLParser.MAXCHAR, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLDMLParser.MAXINTERVALS, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLDMLParser.MAXLOGONATTEMPTS, 0)

        def MAXVALUE(self):
            return self.getToken(TeradataSQLDMLParser.MAXVALUE, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLDMLParser.MAXVALUELENGTH, 0)

        def MEDIAN(self):
            return self.getToken(TeradataSQLDMLParser.MEDIAN, 0)

        def MEDIUM(self):
            return self.getToken(TeradataSQLDMLParser.MEDIUM, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDMLParser.MEETS, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLDMLParser.MEMBER, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLDMLParser.MERGEBLOCKRATIO, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLDMLParser.MESSAGE_TEXT, 0)

        def MIN_CHOOSE(self):
            return self.getToken(TeradataSQLDMLParser.MIN_CHOOSE, 0)

        def MINCHAR(self):
            return self.getToken(TeradataSQLDMLParser.MINCHAR, 0)

        def MINVALUE(self):
            return self.getToken(TeradataSQLDMLParser.MINVALUE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDMLParser.MODIFIED, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDMLParser.MONDAY, 0)

        def MONITORQUERYBAND(self):
            return self.getToken(TeradataSQLDMLParser.MONITORQUERYBAND, 0)

        def MONITORSESSIONRATE(self):
            return self.getToken(TeradataSQLDMLParser.MONITORSESSIONRATE, 0)

        def MONITORVERSION(self):
            return self.getToken(TeradataSQLDMLParser.MONITORVERSION, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_END, 0)

        def MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_OF_CALENDAR, 0)

        def MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_OF_QUARTER, 0)

        def MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.MONTH_OF_YEAR, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.MONTHNUMBER_OF_YEAR, 0)

        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDMLParser.MONTHS_BETWEEN, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLDMLParser.MORE_, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLDMLParser.MULTINATIONAL, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDMLParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDMLParser.NAMESPACE, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLDMLParser.NEVER, 0)

        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDMLParser.NEXT_DAY, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDMLParser.NGRAM, 0)

        def NIL(self):
            return self.getToken(TeradataSQLDMLParser.NIL, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDMLParser.NODDLTEXT, 0)

        def NODE(self):
            return self.getToken(TeradataSQLDMLParser.NODE, 0)

        def NONOPTCOST(self):
            return self.getToken(TeradataSQLDMLParser.NONOPTCOST, 0)

        def NONOPTINIT(self):
            return self.getToken(TeradataSQLDMLParser.NONOPTINIT, 0)

        def NONSEQUENCED(self):
            return self.getToken(TeradataSQLDMLParser.NONSEQUENCED, 0)

        def NORIGHT(self):
            return self.getToken(TeradataSQLDMLParser.NORIGHT, 0)

        def NOSEXTRACTVARFROMPATH(self):
            return self.getToken(TeradataSQLDMLParser.NOSEXTRACTVARFROMPATH, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLDMLParser.NOTATION, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDMLParser.NOW, 0)

        def NPATH(self):
            return self.getToken(TeradataSQLDMLParser.NPATH, 0)

        def NTH(self):
            return self.getToken(TeradataSQLDMLParser.NTH, 0)

        def NULLS(self):
            return self.getToken(TeradataSQLDMLParser.NULLS, 0)

        def NUMFPFNS(self):
            return self.getToken(TeradataSQLDMLParser.NUMFPFNS, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.NUMTOYMINTERVAL, 0)

        def NVL(self):
            return self.getToken(TeradataSQLDMLParser.NVL, 0)

        def NVL2(self):
            return self.getToken(TeradataSQLDMLParser.NVL2, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDMLParser.NVP, 0)

        def OA(self):
            return self.getToken(TeradataSQLDMLParser.OA, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDMLParser.OADD_MONTHS, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.OCOUNT, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDMLParser.ODELETE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDMLParser.OEXISTS, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDMLParser.OEXTEND, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDMLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDMLParser.OLAST, 0)

        def OLD_NEW_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.OLD_NEW_TABLE, 0)

        def OLIMIT(self):
            return self.getToken(TeradataSQLDMLParser.OLIMIT, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDMLParser.ONEXT, 0)

        def ONLINE(self):
            return self.getToken(TeradataSQLDMLParser.ONLINE, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDMLParser.OPRIOR, 0)

        def OPTIONS(self):
            return self.getToken(TeradataSQLDMLParser.OPTIONS, 0)

        def ORDERBYVALUES(self):
            return self.getToken(TeradataSQLDMLParser.ORDERBYVALUES, 0)

        def ORDERED_ANALYTIC(self):
            return self.getToken(TeradataSQLDMLParser.ORDERED_ANALYTIC, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDMLParser.ORDINALITY, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDMLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDMLParser.OTRANSLATE, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDMLParser.OTRIM, 0)

        def OVERLAYS(self):
            return self.getToken(TeradataSQLDMLParser.OVERLAYS, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDMLParser.OWNER, 0)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDMLParser.P_INTERSECT, 0)

        def P_NORMALIZE(self):
            return self.getToken(TeradataSQLDMLParser.P_NORMALIZE, 0)

        def PARAMID(self):
            return self.getToken(TeradataSQLDMLParser.PARAMID, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLDMLParser.PARAMINFO, 0)

        def PARENT(self):
            return self.getToken(TeradataSQLDMLParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDMLParser.PARTITION, 0)

        def PARTITION_L(self):
            return self.getToken(TeradataSQLDMLParser.PARTITION_L, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLDMLParser.PARTITIONED, 0)

        def PARTITIONNAMES(self):
            return self.getToken(TeradataSQLDMLParser.PARTITIONNAMES, 0)

        def PASS(self):
            return self.getToken(TeradataSQLDMLParser.PASS, 0)

        def PASSING(self):
            return self.getToken(TeradataSQLDMLParser.PASSING, 0)

        def PATH_GENERATOR(self):
            return self.getToken(TeradataSQLDMLParser.PATH_GENERATOR, 0)

        def PATH_START(self):
            return self.getToken(TeradataSQLDMLParser.PATH_START, 0)

        def PATH_SUMMARIZER(self):
            return self.getToken(TeradataSQLDMLParser.PATH_SUMMARIZER, 0)

        def PATTERN(self):
            return self.getToken(TeradataSQLDMLParser.PATTERN, 0)

        def PERCENTILE(self):
            return self.getToken(TeradataSQLDMLParser.PERCENTILE, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDMLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDMLParser.PERCENTILE_DISC, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLDMLParser.PERIOD, 0)

        def PIVOT(self):
            return self.getToken(TeradataSQLDMLParser.PIVOT, 0)

        def PORTION(self):
            return self.getToken(TeradataSQLDMLParser.PORTION, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDMLParser.POWER, 0)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDMLParser.PRECEDES, 0)

        def PRECEDING(self):
            return self.getToken(TeradataSQLDMLParser.PRECEDING, 0)

        def PREFIX(self):
            return self.getToken(TeradataSQLDMLParser.PREFIX, 0)

        def PRINT(self):
            return self.getToken(TeradataSQLDMLParser.PRINT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDMLParser.PRIOR, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLDMLParser.PROTECTED, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDMLParser.QUARTER_END, 0)

        def QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.QUARTER_OF_CALENDAR, 0)

        def QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.QUARTER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.QUARTERNUMBER_OF_YEAR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDMLParser.QUERY, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDMLParser.QUERY_BAND, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDMLParser.QUOTECHAR, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDMLParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDMLParser.RANGE, 0)

        def RANGE_L(self):
            return self.getToken(TeradataSQLDMLParser.RANGE_L, 0)

        def RAPIDFIRE(self):
            return self.getToken(TeradataSQLDMLParser.RAPIDFIRE, 0)

        def RDIFF(self):
            return self.getToken(TeradataSQLDMLParser.RDIFF, 0)

        def READ(self):
            return self.getToken(TeradataSQLDMLParser.READ, 0)

        def RECALC(self):
            return self.getToken(TeradataSQLDMLParser.RECALC, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_INSTR, 0)

        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_REPLACE, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_SUBSTR, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDMLParser.REPLACEMENT, 0)

        def RESET(self):
            return self.getToken(TeradataSQLDMLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDMLParser.RESPECT, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLDMLParser.RESTRICTWORDS, 0)

        def RETAIN(self):
            return self.getToken(TeradataSQLDMLParser.RETAIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLDMLParser.RETURNED_SQLSTATE, 0)

        def RETURNING(self):
            return self.getToken(TeradataSQLDMLParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLDMLParser.REUSE, 0)

        def ROOT(self):
            return self.getToken(TeradataSQLDMLParser.ROOT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDMLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDMLParser.ROTATERIGHT, 0)

        def ROUND(self):
            return self.getToken(TeradataSQLDMLParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLDMLParser.ROW_COUNT, 0)

        def ROWIDGEN(self):
            return self.getToken(TeradataSQLDMLParser.ROWIDGEN, 0)

        def ROWIDGEN2(self):
            return self.getToken(TeradataSQLDMLParser.ROWIDGEN2, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDMLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDMLParser.RTRIM, 0)

        def RU(self):
            return self.getToken(TeradataSQLDMLParser.RU, 0)

        def RULES(self):
            return self.getToken(TeradataSQLDMLParser.RULES, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLDMLParser.RULESET, 0)

        def SAMPLES(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLES, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDMLParser.SATURDAY, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDMLParser.SCHEMA, 0)

        def SCRIPT(self):
            return self.getToken(TeradataSQLDMLParser.SCRIPT, 0)

        def SCRIPT_COMMAND(self):
            return self.getToken(TeradataSQLDMLParser.SCRIPT_COMMAND, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLDMLParser.SEARCHSPACE, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLDMLParser.SEARCHUIFDBPATH, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDMLParser.SECURITY, 0)

        def SEED(self):
            return self.getToken(TeradataSQLDMLParser.SEED, 0)

        def SELF(self):
            return self.getToken(TeradataSQLDMLParser.SELF, 0)

        def SEQ(self):
            return self.getToken(TeradataSQLDMLParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDMLParser.SEQUENCE, 0)

        def SEQUENCED(self):
            return self.getToken(TeradataSQLDMLParser.SEQUENCED, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLDMLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDMLParser.SERVER, 0)

        def SESSIONIZE(self):
            return self.getToken(TeradataSQLDMLParser.SESSIONIZE, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDMLParser.SETBIT, 0)

        def SETRESOURCERATE(self):
            return self.getToken(TeradataSQLDMLParser.SETRESOURCERATE, 0)

        def SETSESSIONACCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.SETSESSIONACCOUNT, 0)

        def SETSESSIONRATE(self):
            return self.getToken(TeradataSQLDMLParser.SETSESSIONRATE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDMLParser.SHARE, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDMLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDMLParser.SHIFTRIGHT, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDMLParser.SIGN, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDMLParser.SIZE, 0)

        def SNAPPY_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.SNAPPY_COMPRESS, 0)

        def SNAPPY_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.SNAPPY_DECOMPRESS, 0)

        def SOURCE(self):
            return self.getToken(TeradataSQLDMLParser.SOURCE, 0)

        def SPARSE(self):
            return self.getToken(TeradataSQLDMLParser.SPARSE, 0)

        def SPECCHAR(self):
            return self.getToken(TeradataSQLDMLParser.SPECCHAR, 0)

        def SPL(self):
            return self.getToken(TeradataSQLDMLParser.SPL, 0)

        def SQLSTATE(self):
            return self.getToken(TeradataSQLDMLParser.SQLSTATE, 0)

        def SR(self):
            return self.getToken(TeradataSQLDMLParser.SR, 0)

        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDMLParser.ST_GEOMETRY, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDMLParser.STAT, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDMLParser.STATIC, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDMLParser.STATS, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLDMLParser.STATSUSAGE, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLDMLParser.STORAGE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDMLParser.STRIP, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDMLParser.STRTOK, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDMLParser.STYLE, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDMLParser.SUBBITSTR, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDMLParser.SUBCLASS_ORIGIN, 0)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDMLParser.SUCCEEDS, 0)

        def SUMMARYONLY(self):
            return self.getToken(TeradataSQLDMLParser.SUMMARYONLY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDMLParser.SUNDAY, 0)

        def SYMBOLS(self):
            return self.getToken(TeradataSQLDMLParser.SYMBOLS, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDMLParser.SYSTEM, 0)

        def SYSTEM_TIME(self):
            return self.getToken(TeradataSQLDMLParser.SYSTEM_TIME, 0)

        def SYSTEMTEST(self):
            return self.getToken(TeradataSQLDMLParser.SYSTEMTEST, 0)

        def TARGET(self):
            return self.getToken(TeradataSQLDMLParser.TARGET, 0)

        def TD_ARRAY2P(self):
            return self.getToken(TeradataSQLDMLParser.TD_ARRAY2P, 0)

        def TD_DATASET(self):
            return self.getToken(TeradataSQLDMLParser.TD_DATASET, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_YEAR, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLDMLParser.TD_GENERAL, 0)

        def TD_GETTIMEBUCKET(self):
            return self.getToken(TeradataSQLDMLParser.TD_GETTIMEBUCKET, 0)

        def TD_INTERNAL(self):
            return self.getToken(TeradataSQLDMLParser.TD_INTERNAL, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TD_LZ_DECOMPRESS, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_TIME_BUCKET_NUMBER(self):
            return self.getToken(TeradataSQLDMLParser.TD_TIME_BUCKET_NUMBER, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_YEAR_OF_CALENDAR, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLDMLParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLDMLParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLDMLParser.TDWMHISTORY, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDMLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TEMPORAL_TIMESTAMP, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLDMLParser.TEXT, 0)

        def THRESHOLDPERCENT(self):
            return self.getToken(TeradataSQLDMLParser.THRESHOLDPERCENT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDMLParser.THROUGH, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDMLParser.THURSDAY, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDMLParser.TIES, 0)

        def TIMECODE(self):
            return self.getToken(TeradataSQLDMLParser.TIMECODE, 0)

        def TIMECOLUMN(self):
            return self.getToken(TeradataSQLDMLParser.TIMECOLUMN, 0)

        def TIMEOUT(self):
            return self.getToken(TeradataSQLDMLParser.TIMEOUT, 0)

        def TIMESTAMPCOLUMN(self):
            return self.getToken(TeradataSQLDMLParser.TIMESTAMPCOLUMN, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDMLParser.TO_BYTE, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDMLParser.TO_BYTES, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDMLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDMLParser.TO_DATE, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.TO_DSINTERVAL, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDMLParser.TO_NUMBER, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDMLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.TO_YMINTERVAL, 0)

        def TOTOKEN(self):
            return self.getToken(TeradataSQLDMLParser.TOTOKEN, 0)

        def TPA(self):
            return self.getToken(TeradataSQLDMLParser.TPA, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLDMLParser.TRANSACTION_ACTIVE, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDMLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDMLParser.TRANSUTF8TOUNICODE, 0)

        def TRUE(self):
            return self.getToken(TeradataSQLDMLParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDMLParser.TRUNC, 0)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLDMLParser.TRUST_ONLY, 0)

        def TTGRANULARITY(self):
            return self.getToken(TeradataSQLDMLParser.TTGRANULARITY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDMLParser.TUESDAY, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDMLParser.UBJSON, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDMLParser.UCASE, 0)

        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLDMLParser.UDFSEARCHPATH, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataSQLDMLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLDMLParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDMLParser.UNKNOWN, 0)

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDMLParser.UNPIVOT, 0)

        def USE(self):
            return self.getToken(TeradataSQLDMLParser.USE, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLDMLParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLDMLParser.UTILITYINFO, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLDMLParser.VARRAY, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLDMLParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDMLParser.VERSION, 0)

        def VERSIONING(self):
            return self.getToken(TeradataSQLDMLParser.VERSIONING, 0)

        def WARNING(self):
            return self.getToken(TeradataSQLDMLParser.WARNING, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDMLParser.WEDNESDAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_END, 0)

        def WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_OF_CALENDAR, 0)

        def WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_OF_MONTH, 0)

        def WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.WEEK_OF_YEAR, 0)

        def WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.WEEKDAY_OF_MONTH, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_YEAR, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDMLParser.WHITESPACE, 0)

        def WINDOWSIZE(self):
            return self.getToken(TeradataSQLDMLParser.WINDOWSIZE, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDMLParser.WITHIN, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLDMLParser.WORKLOAD, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDMLParser.WRITE, 0)

        def XML(self):
            return self.getToken(TeradataSQLDMLParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDMLParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDMLParser.XMLATTRIBUTES, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDMLParser.XMLCOMMENT, 0)

        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDMLParser.XMLCONCAT, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDMLParser.XMLDECLARATION, 0)

        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDMLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDMLParser.XMLELEMENT, 0)

        def XMLFOREST(self):
            return self.getToken(TeradataSQLDMLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDMLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDMLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDMLParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(TeradataSQLDMLParser.XMLQUERY, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDMLParser.XMLSCHEMA, 0)

        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDMLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDMLParser.XMLTABLE, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDMLParser.XMLTEXT, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDMLParser.XMLTYPE, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDMLParser.XMLVALIDATE, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDMLParser.YEAR_END, 0)

        def YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.YEAR_OF_CALENDAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.YEARNUMBER_OF_CALENDAR, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLDMLParser.ZLIB, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDMLParser.BUCKET, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDMLParser.COMMITTED, 0)

        def CREATEXML(self):
            return self.getToken(TeradataSQLDMLParser.CREATEXML, 0)

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDMLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDMLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.CS_GRAPHIC, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDMLParser.CSV, 0)

        def CSVLD(self):
            return self.getToken(TeradataSQLDMLParser.CSVLD, 0)

        def DATASIZE(self):
            return self.getToken(TeradataSQLDMLParser.DATASIZE, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAYOFMONTH, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLDMLParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLDMLParser.DEFINITION, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDMLParser.DELETED, 0)

        def FAST(self):
            return self.getToken(TeradataSQLDMLParser.FAST, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDMLParser.LISTAGG, 0)

        def PATH(self):
            return self.getToken(TeradataSQLDMLParser.PATH, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDMLParser.REVERSE, 0)

        def SAS(self):
            return self.getToken(TeradataSQLDMLParser.SAS, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLDMLParser.SQLTABLE, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def SYSLIB(self):
            return self.getToken(TeradataSQLDMLParser.SYSLIB, 0)

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDMLParser.SYSUDTLIB, 0)

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDMLParser.TD_SERVER_DB, 0)

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDMLParser.TD_SYSFNLIB, 0)

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDMLParser.TD_SYSXML, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLDMLParser.TIMEDATEWZCONTROL, 0)

        def TRUST(self):
            return self.getToken(TeradataSQLDMLParser.TRUST, 0)

        def TRYCAST(self):
            return self.getToken(TeradataSQLDMLParser.TRYCAST, 0)

        def UDT(self):
            return self.getToken(TeradataSQLDMLParser.UDT, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLDMLParser.USAGE, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDMLParser.VARIANT, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDMLParser.WEEK, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDMLParser.WIDTH, 0)

        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDMLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDMLParser.XMLPUBLISH_STREAM, 0)

        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDMLParser.XMLSPLIT, 0)

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE_TO_LOCALE, 0)

        def ASBSON(self):
            return self.getToken(TeradataSQLDMLParser.ASBSON, 0)

        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDMLParser.ASBSONTEXT, 0)

        def COMBINE(self):
            return self.getToken(TeradataSQLDMLParser.COMBINE, 0)

        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDMLParser.EXISTVALUE, 0)

        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDMLParser.JSONEXTRACT, 0)

        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDMLParser.JSONEXTRACTVALUE, 0)

        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDMLParser.JSONEXTRACTLARGEVALUE, 0)

        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.KEYCOUNT, 0)

        def METADATA(self):
            return self.getToken(TeradataSQLDMLParser.METADATA, 0)

        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDMLParser.STORAGE_SIZE, 0)

        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDMLParser.CREATESCHEMABASEDXML, 0)

        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDMLParser.CREATENONSCHEMABASEDXML, 0)

        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDMLParser.EXISTSNODE, 0)

        def ISCONTENT(self):
            return self.getToken(TeradataSQLDMLParser.ISCONTENT, 0)

        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDMLParser.ISDOCUMENT, 0)

        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDMLParser.ISSCHEMAVALID, 0)

        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDMLParser.ISSCHEMAVALIDATED, 0)

        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDMLParser.XMLEXTRACT, 0)

        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDMLParser.XMLTRANSFORM, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLDMLParser.PROC_ID, 0)

        def LOCATION(self):
            return self.getToken(TeradataSQLDMLParser.LOCATION, 0)

        def PAYLOAD(self):
            return self.getToken(TeradataSQLDMLParser.PAYLOAD, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLDMLParser.TRUSTED, 0)

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLDMLParser.PATHPATTERN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDMLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDMLParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDMLParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDMLParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLDMLParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLDMLParser.STRIP_ENCLOSING_CHAR, 0)

        def RLS(self):
            return self.getToken(TeradataSQLDMLParser.RLS, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLDMLParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLDMLParser.MULTIPLE, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.JSON_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TS_DECOMPRESS, 0)

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDMLParser.CONTIGUOUSMAPAMPS, 0)

        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDMLParser.SPARSEMAPAMPS, 0)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDMLParser.SPARSETABLEAMPS, 0)

        def UNNEST(self):
            return self.getToken(TeradataSQLDMLParser.UNNEST, 0)

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDMLParser.CALCMATRIX, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDMLParser.PHRASE, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDMLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDMLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDMLParser.NULL_HANDLING, 0)

        def READ_NOS(self):
            return self.getToken(TeradataSQLDMLParser.READ_NOS, 0)

        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDMLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDMLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLE_PERC, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDMLParser.FULLSCAN, 0)

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDMLParser.TD_UNPIVOT, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDMLParser.VALUE_COLUMNS, 0)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDMLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDMLParser.COLUMN_LIST, 0)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDMLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE_NULLS, 0)

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDMLParser.WRITE_NOS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDMLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDMLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDMLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDMLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDMLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDMLParser.COMPRESSION, 0)

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_TO_JSON, 0)

        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDMLParser.BSON_CHECK, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDMLParser.GEOJSONFROMGEOM, 0)

        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDMLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDMLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDMLParser.JSONGETVALUE, 0)

        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDMLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDMLParser.NVP2JSON, 0)

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDMLParser.TD_JSONSHRED, 0)

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDMLParser.JSON_KEYS, 0)

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.JSON_TABLE, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDMLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDMLParser.QUOTES, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDMLParser.ROWEXPR, 0)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDMLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDMLParser.RETURNTYPES, 0)

        def NOCASE(self):
            return self.getToken(TeradataSQLDMLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDMLParser.TRUNCATE, 0)

        def LINK(self):
            return self.getToken(TeradataSQLDMLParser.LINK, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_nonreserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreserved_word" ):
                listener.enterNonreserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreserved_word" ):
                listener.exitNonreserved_word(self)




    def nonreserved_word(self):

        localctx = TeradataSQLDMLParser.Nonreserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_nonreserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Query_termContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def query_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Query_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Query_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def UNION(self):
            return self.getToken(TeradataSQLDMLParser.UNION, 0)

        def MINUS(self):
            return self.getToken(TeradataSQLDMLParser.MINUS, 0)

        def EXCEPT(self):
            return self.getToken(TeradataSQLDMLParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TeradataSQLDMLParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_query_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expr" ):
                listener.enterQuery_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expr" ):
                listener.exitQuery_expr(self)



    def query_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDMLParser.Query_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_query_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [369, 370]:
                self.state = 2143
                self.query_term()
                pass
            elif token in [1213]:
                self.state = 2144
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2145
                self.query_expr(0)
                self.state = 2146
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2158
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLDMLParser.Query_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expr)
                    self.state = 2150
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2151
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==204 or _la==247 or _la==447):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 2152
                        self.match(TeradataSQLDMLParser.ALL)


                    self.state = 2155
                    self.query_expr(3) 
                self.state = 2160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Select_listContext,0)


        def SELECT(self):
            return self.getToken(TeradataSQLDMLParser.SELECT, 0)

        def SEL(self):
            return self.getToken(TeradataSQLDMLParser.SEL, 0)

        def with_deleted_rows(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_deleted_rowsContext,0)


        def as_json(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.As_jsonContext,0)


        def from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.From_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.From_clauseContext,i)


        def into_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Into_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Into_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Where_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Group_by_clauseContext,i)


        def sample_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Sample_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Sample_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_clauseContext,i)


        def with_check_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.With_check_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.With_check_optionContext,i)


        def expand_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Expand_on_clauseContext,0)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Having_clauseContext,i)


        def qualify_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Qualify_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Qualify_clauseContext,i)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.With_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)




    def query_term(self):

        localctx = TeradataSQLDMLParser.Query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_query_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2162
                self.with_deleted_rows()


            self.state = 2166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2165
                self.as_json()


            self.state = 2168
            self.select_list()
            self.state = 2200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2198
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                    if la_ == 1:
                        self.state = 2169
                        self.from_clause()
                        self.state = 2173
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2170
                                self.with_clause() 
                            self.state = 2175
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 2176
                        self.into_clause()
                        pass

                    elif la_ == 3:
                        self.state = 2177
                        self.where_clause()
                        pass

                    elif la_ == 4:
                        self.state = 2178
                        self.group_by_clause()
                        pass

                    elif la_ == 5:
                        self.state = 2181
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [183]:
                            self.state = 2179
                            self.having_clause()
                            pass
                        elif token in [315]:
                            self.state = 2180
                            self.qualify_clause()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 2183
                        self.sample_clause()
                        pass

                    elif la_ == 7:
                        self.state = 2187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==474:
                            self.state = 2184
                            self.with_clause()
                            self.state = 2189
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2190
                        self.order_by_clause()
                        self.state = 2194
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2191
                                self.with_clause() 
                            self.state = 2196
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

                        pass

                    elif la_ == 8:
                        self.state = 2197
                        self.with_check_option()
                        pass

             
                self.state = 2202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

            self.state = 2204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 2203
                self.expand_on_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_deleted_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDMLParser.DELETED, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDMLParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_deleted_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_deleted_rows" ):
                listener.enterWith_deleted_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_deleted_rows" ):
                listener.exitWith_deleted_rows(self)




    def with_deleted_rows(self):

        localctx = TeradataSQLDMLParser.With_deleted_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_with_deleted_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 2207
            self.match(TeradataSQLDMLParser.DELETED)
            self.state = 2208
            self.match(TeradataSQLDMLParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDMLParser.JSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_as_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_json" ):
                listener.enterAs_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_json" ):
                listener.exitAs_json(self)




    def as_json(self):

        localctx = TeradataSQLDMLParser.As_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_as_json)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.match(TeradataSQLDMLParser.AS)
            self.state = 2211
            self.match(TeradataSQLDMLParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Selected_columnsContext,0)


        def top_n(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Top_nContext,0)


        def DISTINCT(self):
            return self.getToken(TeradataSQLDMLParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLDMLParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def normalize(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.NormalizeContext,0)


        def all_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.All_operatorContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TeradataSQLDMLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_select_list)
        try:
            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 121, 271, 448]:
                    self.state = 2217
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 2213
                        self.match(TeradataSQLDMLParser.DISTINCT)
                        pass
                    elif token in [448]:
                        self.state = 2214
                        self.match(TeradataSQLDMLParser.UNIQUE)
                        pass
                    elif token in [13]:
                        self.state = 2215
                        self.match(TeradataSQLDMLParser.ALL)
                        pass
                    elif token in [271]:
                        self.state = 2216
                        self.normalize()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [427]:
                    self.state = 2219
                    self.top_n()
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1219, 1221, 1222]:
                    pass
                else:
                    pass
                self.state = 2222
                self.selected_columns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2223
                self.all_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_nContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TeradataSQLDMLParser.TOP, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Float_literalContext,0)


        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Macro_parameter_referenceContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDMLParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDMLParser.TIES, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_top_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_n" ):
                listener.enterTop_n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_n" ):
                listener.exitTop_n(self)




    def top_n(self):

        localctx = TeradataSQLDMLParser.Top_nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_top_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(TeradataSQLDMLParser.TOP)
            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 2227
                self.integer_literal()
                pass
            elif token in [1197]:
                self.state = 2228
                self.float_literal()
                pass
            elif token in [1207, 1210]:
                self.state = 2229
                self.macro_parameter_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 2232
                self.match(TeradataSQLDMLParser.PERCENT)


            self.state = 2237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2235
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 2236
                self.match(TeradataSQLDMLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(TeradataSQLDMLParser.NORMALIZE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDMLParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLDMLParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDMLParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_normalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)




    def normalize(self):

        localctx = TeradataSQLDMLParser.NormalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_normalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.match(TeradataSQLDMLParser.NORMALIZE)
            self.state = 2250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2240
                self.match(TeradataSQLDMLParser.ON)
                self.state = 2241
                self.match(TeradataSQLDMLParser.MEETS)
                self.state = 2242
                self.match(TeradataSQLDMLParser.OR)
                self.state = 2243
                self.match(TeradataSQLDMLParser.OVERLAPS)

            elif la_ == 2:
                self.state = 2244
                self.match(TeradataSQLDMLParser.ON)
                self.state = 2245
                self.match(TeradataSQLDMLParser.OVERLAPS)
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 2246
                    self.match(TeradataSQLDMLParser.OR)
                    self.state = 2247
                    self.match(TeradataSQLDMLParser.MEETS)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)

        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_all_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_operator" ):
                listener.enterAll_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_operator" ):
                listener.exitAll_operator(self)




    def all_operator(self):

        localctx = TeradataSQLDMLParser.All_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_all_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2252
                self.match(TeradataSQLDMLParser.MUL_SIGN)
                pass

            elif la_ == 2:
                self.state = 2253
                self.table_name()
                self.state = 2254
                self.match(TeradataSQLDMLParser.DOT_)
                self.state = 2255
                self.match(TeradataSQLDMLParser.MUL_SIGN)
                pass

            elif la_ == 3:
                self.state = 2257
                self.column_name()
                pass


            self.state = 2260
            self.match(TeradataSQLDMLParser.DOT_)
            self.state = 2261
            self.match(TeradataSQLDMLParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_rows = None # Token

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def selected_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Selected_columnContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Selected_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_selected_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_columns" ):
                listener.enterSelected_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_columns" ):
                listener.exitSelected_columns(self)




    def selected_columns(self):

        localctx = TeradataSQLDMLParser.Selected_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_selected_columns)
        try:
            self.state = 2272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2263
                localctx.all_rows = self.match(TeradataSQLDMLParser.MUL_SIGN)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2264
                self.selected_column()
                self.state = 2269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2265
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 2266
                        self.selected_column() 
                    self.state = 2271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_selected_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_column" ):
                listener.enterSelected_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_column" ):
                listener.exitSelected_column(self)




    def selected_column(self):

        localctx = TeradataSQLDMLParser.Selected_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_selected_column)
        self._la = 0 # Token type
        try:
            self.state = 2285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2274
                self.scalar_expr(0)
                self.state = 2279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2275
                        self.match(TeradataSQLDMLParser.AS)


                    self.state = 2278
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2281
                self.table_name()
                self.state = 2282
                self.match(TeradataSQLDMLParser.DOT_)
                self.state = 2283
                self.match(TeradataSQLDMLParser.MUL_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(TeradataSQLDMLParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_nameContext,i)


        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = TeradataSQLDMLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(TeradataSQLDMLParser.INTO)
            self.state = 2290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2288
                self.variable_name()
                pass
            elif token in [1207]:
                self.state = 2289
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2292
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2295
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 2293
                        self.variable_name()
                        pass
                    elif token in [1207]:
                        self.state = 2294
                        self.variable_reference()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = TeradataSQLDMLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302
            self.match(TeradataSQLDMLParser.FROM)
            self.state = 2303
            self.from_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Join_source_specContext,0)


        def join_joined_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Join_joined_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Join_joined_specContext,i)


        def from_pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_pivot_specContext,0)


        def from_unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_unpivot_specContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_from_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_spec" ):
                listener.enterFrom_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_spec" ):
                listener.exitFrom_spec(self)




    def from_spec(self):

        localctx = TeradataSQLDMLParser.From_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_from_spec)
        try:
            self.state = 2335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2305
                self.join_source_spec()
                self.state = 2309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2306
                        self.join_joined_spec() 
                    self.state = 2311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2312
                self.from_pivot_spec()
                self.state = 2316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2313
                        self.join_joined_spec() 
                    self.state = 2318
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2319
                self.from_unpivot_spec()
                self.state = 2323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2320
                        self.join_joined_spec() 
                    self.state = 2325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2326
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2327
                self.from_spec()
                self.state = 2328
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 2332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2329
                        self.join_joined_spec() 
                    self.state = 2334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_source_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Subquery_referenceContext,0)


        def foreign_table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Foreign_table_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_function_referenceContext,0)


        def foreign_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Foreign_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_join_source_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source_spec" ):
                listener.enterJoin_source_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source_spec" ):
                listener.exitJoin_source_spec(self)




    def join_source_spec(self):

        localctx = TeradataSQLDMLParser.Join_source_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_join_source_spec)
        try:
            self.state = 2343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2337
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2339
                self.foreign_table_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2340
                self.table_function_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2341
                self.foreign_function_reference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2342
                self.table_operator_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_joined_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Subquery_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_referenceContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_join_joined_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_joined_spec" ):
                listener.enterJoin_joined_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_joined_spec" ):
                listener.exitJoin_joined_spec(self)




    def join_joined_spec(self):

        localctx = TeradataSQLDMLParser.Join_joined_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_join_joined_spec)
        try:
            self.state = 2354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2345
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2346
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2348
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2349
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2350
                self.table_function_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2351
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2352
                self.table_operator_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2353
                self.join_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.PivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_from_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_pivot_spec" ):
                listener.enterFrom_pivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_pivot_spec" ):
                listener.exitFrom_pivot_spec(self)




    def from_pivot_spec(self):

        localctx = TeradataSQLDMLParser.From_pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_from_pivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2356
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 2357
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2360
            self.pivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivot(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.UnpivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_from_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_unpivot_spec" ):
                listener.enterFrom_unpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_unpivot_spec" ):
                listener.exitFrom_unpivot_spec(self)




    def from_unpivot_spec(self):

        localctx = TeradataSQLDMLParser.From_unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_from_unpivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2362
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 2363
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2366
            self.unpivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_alias = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def foreign_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Foreign_returns_clauseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = TeradataSQLDMLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2368
            self.table_name()
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2369
                self.server_name_reference()
                self.state = 2371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                if la_ == 1:
                    self.state = 2370
                    self.foreign_returns_clause()




            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2375
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 2378
                localctx.table_alias = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(TeradataSQLDMLParser.JOIN, 0)

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Join_source_specContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLDMLParser.INNER, 0)

        def join_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Join_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Join_on_clauseContext,i)


        def LEFT(self):
            return self.getToken(TeradataSQLDMLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDMLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataSQLDMLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLDMLParser.OUTER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def CROSS(self):
            return self.getToken(TeradataSQLDMLParser.CROSS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = TeradataSQLDMLParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 2433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2386
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 2381
                    self.match(TeradataSQLDMLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 2382
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 2383
                        self.match(TeradataSQLDMLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 2388
                self.match(TeradataSQLDMLParser.JOIN)
                self.state = 2389
                self.join_source_spec()
                self.state = 2393
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2390
                        self.join_on_clause() 
                    self.state = 2395
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2401
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 2396
                    self.match(TeradataSQLDMLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 2397
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 2398
                        self.match(TeradataSQLDMLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 2403
                self.match(TeradataSQLDMLParser.JOIN)
                self.state = 2404
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2405
                self.from_spec()
                self.state = 2406
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 2410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2407
                        self.join_on_clause() 
                    self.state = 2412
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2413
                self.match(TeradataSQLDMLParser.CROSS)
                self.state = 2414
                self.match(TeradataSQLDMLParser.JOIN)
                self.state = 2415
                self.join_source_spec()
                self.state = 2419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2416
                        self.join_on_clause() 
                    self.state = 2421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2422
                self.match(TeradataSQLDMLParser.CROSS)
                self.state = 2423
                self.match(TeradataSQLDMLParser.JOIN)
                self.state = 2424
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2425
                self.from_spec()
                self.state = 2426
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 2430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2427
                        self.join_on_clause() 
                    self.state = 2432
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_join_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_clause" ):
                listener.enterJoin_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_clause" ):
                listener.exitJoin_on_clause(self)




    def join_on_clause(self):

        localctx = TeradataSQLDMLParser.Join_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_join_on_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2436
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_sql = None # Token
            self.table_alias = None # Alias_nameContext

        def FOREIGN(self):
            return self.getToken(TeradataSQLDMLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDMLParser.TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Query_termContext,0)


        def EXPORT(self):
            return self.getToken(TeradataSQLDMLParser.EXPORT, 0)

        def exported_data(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Exported_dataContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Exported_dataContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_foreign_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_reference" ):
                listener.enterForeign_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_reference" ):
                listener.exitForeign_table_reference(self)




    def foreign_table_reference(self):

        localctx = TeradataSQLDMLParser.Foreign_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_foreign_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.match(TeradataSQLDMLParser.FOREIGN)
            self.state = 2439
            self.match(TeradataSQLDMLParser.TABLE)
            self.state = 2440
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2441
                self.query_term()
                pass

            elif la_ == 2:
                self.state = 2443 
                self._errHandler.sync(self)
                _alt = 1+1
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1+1:
                        self.state = 2442
                        localctx.foreign_sql = self.matchWildcard()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2445 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

                pass


            self.state = 2449
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2450
            self.server_name_reference()
            self.state = 2463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2451
                self.match(TeradataSQLDMLParser.EXPORT)
                self.state = 2452
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2453
                self.exported_data()
                self.state = 2458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2454
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2455
                    self.exported_data()
                    self.state = 2460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2461
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2465
                self.match(TeradataSQLDMLParser.AS)


            self.state = 2468
            localctx.table_alias = self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Function_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Server_name_referenceContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def foreign_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Foreign_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Foreign_on_clauseContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_foreign_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_function_reference" ):
                listener.enterForeign_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_function_reference" ):
                listener.exitForeign_function_reference(self)




    def foreign_function_reference(self):

        localctx = TeradataSQLDMLParser.Foreign_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_foreign_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2470
            self.function_name()
            self.state = 2471
            self.server_name_reference()
            self.state = 2472
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2474 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2473
                self.foreign_on_clause()
                self.state = 2476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==286):
                    break

            self.state = 2478
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2479
                self.match(TeradataSQLDMLParser.AS)


            self.state = 2482
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def foreign_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Foreign_using_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def hash_or_partition_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Hash_or_partition_byContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Hash_or_partition_byContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_clauseContext,0)


        def LOCAL(self):
            return self.getToken(TeradataSQLDMLParser.LOCAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_foreign_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_on_clause" ):
                listener.enterForeign_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_on_clause" ):
                listener.exitForeign_on_clause(self)




    def foreign_on_clause(self):

        localctx = TeradataSQLDMLParser.Foreign_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_foreign_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2484
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2485
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2486
            self.scalar_expr(0)
            self.state = 2491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2487
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2488
                self.scalar_expr(0)
                self.state = 2493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2494
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==840:
                self.state = 2495
                self.hash_or_partition_by()
                self.state = 2500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 2502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 2501
                    self.match(TeradataSQLDMLParser.LOCAL)


                self.state = 2504
                self.order_by_clause()


            self.state = 2507
            self.foreign_using_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exported_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exported_subquery = None # Subquery_referenceContext
            self.exported_table = None # Table_nameContext
            self.table_alias = None # Alias_nameContext

        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Subquery_referenceContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_exported_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExported_data" ):
                listener.enterExported_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExported_data" ):
                listener.exitExported_data(self)




    def exported_data(self):

        localctx = TeradataSQLDMLParser.Exported_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_exported_data)
        self._la = 0 # Token type
        try:
            self.state = 2516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2509
                localctx.exported_subquery = self.subquery_reference()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2510
                localctx.exported_table = self.table_name()
                self.state = 2512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2511
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 2514
                localctx.table_alias = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def foreign_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Foreign_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Foreign_parameterContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_foreign_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_using_clause" ):
                listener.enterForeign_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_using_clause" ):
                listener.exitForeign_using_clause(self)




    def foreign_using_clause(self):

        localctx = TeradataSQLDMLParser.Foreign_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_foreign_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2520 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2519
                self.foreign_parameter()
                self.state = 2522 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_foreign_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_parameter" ):
                listener.enterForeign_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_parameter" ):
                listener.exitForeign_parameter(self)




    def foreign_parameter(self):

        localctx = TeradataSQLDMLParser.Foreign_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_foreign_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            localctx.name = self.unqualified_name()
            self.state = 2525
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2526
            localctx.value = self.scalar_expr(0)
            self.state = 2527
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDMLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_foreign_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_returns_clause" ):
                listener.enterForeign_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_returns_clause" ):
                listener.exitForeign_returns_clause(self)




    def foreign_returns_clause(self):

        localctx = TeradataSQLDMLParser.Foreign_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_foreign_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self.match(TeradataSQLDMLParser.RETURNS)
            self.state = 2530
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2531
            self.column_spec()
            self.state = 2536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2532
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2533
                self.column_spec()
                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2539
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Server_name_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.AT_SIGN, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_server_name_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServer_name_reference" ):
                listener.enterServer_name_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServer_name_reference" ):
                listener.exitServer_name_reference(self)




    def server_name_reference(self):

        localctx = TeradataSQLDMLParser.Server_name_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_server_name_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2541
            self.match(TeradataSQLDMLParser.AT_SIGN)
            self.state = 2542
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TeradataSQLDMLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def udt_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Udt_table_functionContext,0)


        def unnest_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unnest_table_functionContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_reference" ):
                listener.enterTable_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_reference" ):
                listener.exitTable_function_reference(self)




    def table_function_reference(self):

        localctx = TeradataSQLDMLParser.Table_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_table_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self.match(TeradataSQLDMLParser.TABLE)
            self.state = 2545
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2546
                self.udt_table_function()
                pass

            elif la_ == 2:
                self.state = 2547
                self.unnest_table_function()
                pass


            self.state = 2550
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2551
                self.match(TeradataSQLDMLParser.AS)


            self.state = 2554
            self.alias_name()
            self.state = 2556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2555
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def table_function_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_function_returns_clauseContext,0)


        def table_function_local_order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_function_local_order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_function_local_order_by_clauseContext,i)


        def table_function_hash_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_function_hash_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_function_hash_by_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_udt_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_table_function" ):
                listener.enterUdt_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_table_function" ):
                listener.exitUdt_table_function(self)




    def udt_table_function(self):

        localctx = TeradataSQLDMLParser.Udt_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_udt_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.function_name()
            self.state = 2562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2559
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2560
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 2561
                self.scalar_expr_list_comma_separated()
                pass


            self.state = 2565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 2564
                self.table_function_returns_clause()


            self.state = 2571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==224:
                self.state = 2569
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 2567
                    self.table_function_local_order_by_clause()
                    pass
                elif token in [178]:
                    self.state = 2568
                    self.table_function_hash_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext

        def UNNEST(self):
            return self.getToken(TeradataSQLDMLParser.UNNEST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDMLParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unnest_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_function" ):
                listener.enterUnnest_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_function" ):
                listener.exitUnnest_table_function(self)




    def unnest_table_function(self):

        localctx = TeradataSQLDMLParser.Unnest_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_unnest_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2574
                self.td_sysfnlib()


            self.state = 2577
            self.match(TeradataSQLDMLParser.UNNEST)
            self.state = 2578
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2579
                localctx.key_expr = self.scalar_expr(0)
                self.state = 2580
                self.match(TeradataSQLDMLParser.COMMA)


            self.state = 2584
            localctx.array_expr = self.scalar_expr(0)
            self.state = 2585
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2586
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 2587
                self.match(TeradataSQLDMLParser.ORDINALITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returned_table_name = None # Table_nameContext

        def RETURNS(self):
            return self.getToken(TeradataSQLDMLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_function_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_returns_clause" ):
                listener.enterTable_function_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_returns_clause" ):
                listener.exitTable_function_returns_clause(self)




    def table_function_returns_clause(self):

        localctx = TeradataSQLDMLParser.Table_function_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_table_function_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(TeradataSQLDMLParser.RETURNS)
            self.state = 2603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2591
                localctx.returned_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 2592
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2593
                self.column_spec()
                self.state = 2598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2594
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2595
                    self.column_spec()
                    self.state = 2600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2601
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [178, 224, 1214]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_local_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLDMLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_function_local_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_local_order_by_clause" ):
                listener.enterTable_function_local_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_local_order_by_clause" ):
                listener.exitTable_function_local_order_by_clause(self)




    def table_function_local_order_by_clause(self):

        localctx = TeradataSQLDMLParser.Table_function_local_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_table_function_local_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2605
            self.match(TeradataSQLDMLParser.LOCAL)
            self.state = 2606
            self.match(TeradataSQLDMLParser.ORDER)
            self.state = 2607
            self.match(TeradataSQLDMLParser.BY)
            self.state = 2608
            self.order_by_spec_full()
            self.state = 2613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2609
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2610
                self.order_by_spec_full()
                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_hash_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLDMLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_function_hash_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_hash_by_clause" ):
                listener.enterTable_function_hash_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_hash_by_clause" ):
                listener.exitTable_function_hash_by_clause(self)




    def table_function_hash_by_clause(self):

        localctx = TeradataSQLDMLParser.Table_function_hash_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_table_function_hash_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.match(TeradataSQLDMLParser.HASH)
            self.state = 2617
            self.match(TeradataSQLDMLParser.BY)
            self.state = 2618
            self.column_name()
            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2619
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2620
                self.column_name()
                self.state = 2625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def xmltable_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xmltable_operatorContext,0)


        def calcmatrix_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Calcmatrix_table_operatorContext,0)


        def read_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Read_nos_table_operatorContext,0)


        def script_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Script_table_operatorContext,0)


        def td_unpivot_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_unpivot_table_operatorContext,0)


        def write_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Write_nos_table_operatorContext,0)


        def json_keys_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Json_keys_table_operatorContext,0)


        def json_table_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Json_table_table_operatorContext,0)


        def json_shred_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Json_shred_table_operatorContext,0)


        def generic_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Generic_table_operatorContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_operator_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_reference" ):
                listener.enterTable_operator_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_reference" ):
                listener.exitTable_operator_reference(self)




    def table_operator_reference(self):

        localctx = TeradataSQLDMLParser.Table_operator_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_table_operator_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.state = 2626
                self.xmltable_operator()
                pass

            elif la_ == 2:
                self.state = 2627
                self.calcmatrix_table_operator()
                pass

            elif la_ == 3:
                self.state = 2628
                self.read_nos_table_operator()
                pass

            elif la_ == 4:
                self.state = 2629
                self.script_table_operator()
                pass

            elif la_ == 5:
                self.state = 2630
                self.td_unpivot_table_operator()
                pass

            elif la_ == 6:
                self.state = 2631
                self.write_nos_table_operator()
                pass

            elif la_ == 7:
                self.state = 2632
                self.json_keys_table_operator()
                pass

            elif la_ == 8:
                self.state = 2633
                self.json_table_table_operator()
                pass

            elif la_ == 9:
                self.state = 2634
                self.json_shred_table_operator()
                pass

            elif la_ == 10:
                self.state = 2635
                self.generic_table_operator()
                pass


            self.state = 2639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2638
                self.match(TeradataSQLDMLParser.AS)


            self.state = 2641
            self.alias_name()
            self.state = 2643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.state = 2642
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_tab_row_pattern = None # Scalar_exprContext

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDMLParser.XMLTABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_namespace_declarationContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_query_argumentContext,0)


        def xml_columns_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_columns_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xmltable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_operator" ):
                listener.enterXmltable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_operator" ):
                listener.exitXmltable_operator(self)




    def xmltable_operator(self):

        localctx = TeradataSQLDMLParser.Xmltable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_xmltable_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.match(TeradataSQLDMLParser.XMLTABLE)
            self.state = 2646
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2647
                self.xml_namespace_declaration()


            self.state = 2650
            localctx.xml_tab_row_pattern = self.scalar_expr(0)
            self.state = 2652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 2651
                self.xml_query_argument()


            self.state = 2655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==579:
                self.state = 2654
                self.xml_columns_spec()


            self.state = 2657
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calcmatrix_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using_phrase = None # Char_string_literalContext
            self.calc_type = None # Char_string_literalContext
            self.output = None # Char_string_literalContext
            self.null_handling = None # Char_string_literalContext

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDMLParser.CALCMATRIX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDMLParser.PHRASE, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def HASH(self):
            return self.getToken(TeradataSQLDMLParser.HASH, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.BY)
            else:
                return self.getToken(TeradataSQLDMLParser.BY, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDMLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDMLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDMLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDMLParser.NULL_HANDLING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_calcmatrix_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcmatrix_table_operator" ):
                listener.enterCalcmatrix_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcmatrix_table_operator" ):
                listener.exitCalcmatrix_table_operator(self)




    def calcmatrix_table_operator(self):

        localctx = TeradataSQLDMLParser.Calcmatrix_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_calcmatrix_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2659
                self.td_sysfnlib()


            self.state = 2662
            self.match(TeradataSQLDMLParser.CALCMATRIX)
            self.state = 2663
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2664
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2665
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2666
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 2669
                self.match(TeradataSQLDMLParser.HASH)
                self.state = 2670
                self.match(TeradataSQLDMLParser.BY)
                self.state = 2671
                self.scalar_expr(0)
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2672
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2673
                    self.scalar_expr(0)
                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 2681
                self.match(TeradataSQLDMLParser.LOCAL)
                self.state = 2682
                self.match(TeradataSQLDMLParser.ORDER)
                self.state = 2683
                self.match(TeradataSQLDMLParser.BY)
                self.state = 2684
                self.scalar_expr(0)
                self.state = 2689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2685
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2686
                    self.scalar_expr(0)
                    self.state = 2691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2694
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2695
            self.match(TeradataSQLDMLParser.PHRASE)
            self.state = 2696
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2697
            localctx.using_phrase = self.char_string_literal()
            self.state = 2698
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.state = 2699
                self.match(TeradataSQLDMLParser.CALCTYPE)
                self.state = 2700
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2701
                localctx.calc_type = self.char_string_literal()
                self.state = 2702
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 2706
                self.match(TeradataSQLDMLParser.OUTPUT)
                self.state = 2707
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2708
                localctx.output = self.char_string_literal()
                self.state = 2709
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2713
                self.match(TeradataSQLDMLParser.NULL_HANDLING)
                self.state = 2714
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2715
                localctx.null_handling = self.char_string_literal()
                self.state = 2716
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_NOS(self):
            return self.getToken(TeradataSQLDMLParser.READ_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def read_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Read_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Read_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_read_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_table_operator" ):
                listener.enterRead_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_table_operator" ):
                listener.exitRead_nos_table_operator(self)




    def read_nos_table_operator(self):

        localctx = TeradataSQLDMLParser.Read_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_read_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            self.match(TeradataSQLDMLParser.READ_NOS)
            self.state = 2721
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2722
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2723
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2724
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2727
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2728
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2729
            self.location()
            self.state = 2733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1132)) & ~0x3f) == 0 and ((1 << (_la - 1132)) & 125829135) != 0):
                self.state = 2730
                self.read_nos_option()
                self.state = 2735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2736
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2737
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.return_spec = list() # of Char_string_literalContexts
            self.delimiter_char = None # Char_string_literalContext
            self.charset = None # Char_string_literalContext
            self.quote_char = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def SCRIPT(self):
            return self.getToken(TeradataSQLDMLParser.SCRIPT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_on_clauseContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def RETURNS(self):
            return self.getToken(TeradataSQLDMLParser.RETURNS, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDMLParser.DELIMITER, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDMLParser.CHARSET, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDMLParser.QUOTECHAR, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDMLParser.AUTH, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Object_nameContext,0)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_script_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_table_operator" ):
                listener.enterScript_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_table_operator" ):
                listener.exitScript_table_operator(self)




    def script_table_operator(self):

        localctx = TeradataSQLDMLParser.Script_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_script_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.match(TeradataSQLDMLParser.SCRIPT)
            self.state = 2740
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2741
            self.table_operator_on_clause()
            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 2742
                self.match(TeradataSQLDMLParser.RETURNS)
                self.state = 2743
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2753
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 2744
                    self.match(TeradataSQLDMLParser.MUL_SIGN)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 2745
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.return_spec.append(localctx._char_string_literal)
                    self.state = 2750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2746
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 2747
                        localctx._char_string_literal = self.char_string_literal()
                        localctx.return_spec.append(localctx._char_string_literal)
                        self.state = 2752
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2755
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==625:
                self.state = 2758
                self.match(TeradataSQLDMLParser.DELIMITER)
                self.state = 2759
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2760
                localctx.delimiter_char = self.char_string_literal()
                self.state = 2761
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 2765
                self.match(TeradataSQLDMLParser.CHARSET)
                self.state = 2766
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2767
                localctx.charset = self.char_string_literal()
                self.state = 2768
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==871:
                self.state = 2772
                self.match(TeradataSQLDMLParser.QUOTECHAR)
                self.state = 2773
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2774
                localctx.quote_char = self.char_string_literal()
                self.state = 2775
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==542:
                self.state = 2779
                self.match(TeradataSQLDMLParser.AUTH)
                self.state = 2780
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2781
                localctx.authorization_name = self.object_name()
                self.state = 2782
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2786
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_unpivot_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.value_columns_value = list() # of Char_string_literalContexts
            self.unpivot_column_value = None # Char_string_literalContext
            self.column_list_value = list() # of Char_string_literalContexts
            self.column_alias_list_value = list() # of Char_string_literalContexts
            self.include_nulls = None # Char_string_literalContext

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDMLParser.TD_UNPIVOT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDMLParser.VALUE_COLUMNS, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDMLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDMLParser.COLUMN_LIST, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDMLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE_NULLS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_td_unpivot_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_unpivot_table_operator" ):
                listener.enterTd_unpivot_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_unpivot_table_operator" ):
                listener.exitTd_unpivot_table_operator(self)




    def td_unpivot_table_operator(self):

        localctx = TeradataSQLDMLParser.Td_unpivot_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_td_unpivot_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2788
                self.td_sysfnlib()


            self.state = 2791
            self.match(TeradataSQLDMLParser.TD_UNPIVOT)
            self.state = 2792
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2793
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2794
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2795
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2798
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2799
            self.match(TeradataSQLDMLParser.VALUE_COLUMNS)
            self.state = 2800
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2801
            localctx._char_string_literal = self.char_string_literal()
            localctx.value_columns_value.append(localctx._char_string_literal)
            self.state = 2806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2802
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2803
                localctx._char_string_literal = self.char_string_literal()
                localctx.value_columns_value.append(localctx._char_string_literal)
                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2809
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2810
            self.match(TeradataSQLDMLParser.UNPIVOT_COLUMN)
            self.state = 2811
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2812
            localctx.unpivot_column_value = self.char_string_literal()
            self.state = 2813
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2814
            self.match(TeradataSQLDMLParser.COLUMN_LIST)
            self.state = 2815
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2816
            localctx._char_string_literal = self.char_string_literal()
            localctx.column_list_value.append(localctx._char_string_literal)
            self.state = 2821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2817
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2818
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_list_value.append(localctx._char_string_literal)
                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2824
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.state = 2825
                self.match(TeradataSQLDMLParser.COLUMN_ALIAS_LIST)
                self.state = 2826
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2827
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_alias_list_value.append(localctx._char_string_literal)
                self.state = 2832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2828
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2829
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.column_alias_list_value.append(localctx._char_string_literal)
                    self.state = 2834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2835
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 2836
                self.match(TeradataSQLDMLParser.INCLUDE_NULLS)
                self.state = 2837
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2838
                localctx.include_nulls = self.char_string_literal()
                self.state = 2839
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDMLParser.WRITE_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_on_clauseContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def write_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Write_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Write_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_write_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_table_operator" ):
                listener.enterWrite_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_table_operator" ):
                listener.exitWrite_nos_table_operator(self)




    def write_nos_table_operator(self):

        localctx = TeradataSQLDMLParser.Write_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_write_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2843
            self.match(TeradataSQLDMLParser.WRITE_NOS)
            self.state = 2844
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2845
            self.table_operator_on_clause()
            self.state = 2846
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2847
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2848
            self.location()
            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1134)) & ~0x3f) == 0 and ((1 << (_la - 1134)) & 1095216660481) != 0):
                self.state = 2849
                self.write_nos_option()
                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2855
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2856
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_table_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self.col_expr_literal = None # Char_string_literalContext

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.JSON_TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDMLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDMLParser.COLEXPR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_table_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_table_table_operator" ):
                listener.enterJson_table_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_table_table_operator" ):
                listener.exitJson_table_table_operator(self)




    def json_table_table_operator(self):

        localctx = TeradataSQLDMLParser.Json_table_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_json_table_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2858
                self.td_sysfnlib()


            self.state = 2861
            self.match(TeradataSQLDMLParser.JSON_TABLE)
            self.state = 2862
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2863
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2864
            self.subquery()
            self.state = 2865
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2866
            self.match(TeradataSQLDMLParser.ROWEXPR)
            self.state = 2867
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2868
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 2869
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2870
            self.match(TeradataSQLDMLParser.COLEXPR)
            self.state = 2871
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2872
            localctx.col_expr_literal = self.char_string_literal()
            self.state = 2873
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2874
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDMLParser.JSON_KEYS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def json_keys_using_name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Json_keys_using_name_value_pairContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Json_keys_using_name_value_pairContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_keys_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_table_operator" ):
                listener.enterJson_keys_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_table_operator" ):
                listener.exitJson_keys_table_operator(self)




    def json_keys_table_operator(self):

        localctx = TeradataSQLDMLParser.Json_keys_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_json_keys_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2876
                self.td_sysfnlib()


            self.state = 2879
            self.match(TeradataSQLDMLParser.JSON_KEYS)
            self.state = 2880
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2881
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2882
            self.subquery()
            self.state = 2889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2883
                self.match(TeradataSQLDMLParser.USING)
                self.state = 2885 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2884
                    self.json_keys_using_name_value_pair()
                    self.state = 2887 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1185 or _la==1186):
                        break



            self.state = 2891
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_shred_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.col_expr_literal = list() # of Char_string_literalContexts
            self.return_type = list() # of Char_string_literalContexts
            self.nocase_value = None # Integer_literalContext
            self.truncate_value = None # Integer_literalContext

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDMLParser.TD_JSONSHRED, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDMLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDMLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDMLParser.RETURNTYPES, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def NOCASE(self):
            return self.getToken(TeradataSQLDMLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDMLParser.TRUNCATE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_shred_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_shred_table_operator" ):
                listener.enterJson_shred_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_shred_table_operator" ):
                listener.exitJson_shred_table_operator(self)




    def json_shred_table_operator(self):

        localctx = TeradataSQLDMLParser.Json_shred_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_json_shred_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2893
                self.td_sysfnlib()


            self.state = 2896
            self.match(TeradataSQLDMLParser.TD_JSONSHRED)
            self.state = 2897
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2898
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2899
            self.subquery()
            self.state = 2900
            self.match(TeradataSQLDMLParser.USING)
            self.state = 2901
            self.match(TeradataSQLDMLParser.ROWEXPR)
            self.state = 2902
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2903
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 2904
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2905
            self.match(TeradataSQLDMLParser.COLEXPR)
            self.state = 2906
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2907
            localctx._char_string_literal = self.char_string_literal()
            localctx.col_expr_literal.append(localctx._char_string_literal)
            self.state = 2912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2908
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2909
                localctx._char_string_literal = self.char_string_literal()
                localctx.col_expr_literal.append(localctx._char_string_literal)
                self.state = 2914
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2915
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2916
            self.match(TeradataSQLDMLParser.RETURNTYPES)
            self.state = 2917
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2918
            localctx._char_string_literal = self.char_string_literal()
            localctx.return_type.append(localctx._char_string_literal)
            self.state = 2923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2919
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 2920
                localctx._char_string_literal = self.char_string_literal()
                localctx.return_type.append(localctx._char_string_literal)
                self.state = 2925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2926
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1190:
                self.state = 2927
                self.match(TeradataSQLDMLParser.NOCASE)
                self.state = 2928
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2929
                localctx.nocase_value = self.integer_literal()
                self.state = 2930
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1191:
                self.state = 2934
                self.match(TeradataSQLDMLParser.TRUNCATE)
                self.state = 2935
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 2936
                localctx.truncate_value = self.integer_literal()
                self.state = 2937
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 2941
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def table_operator_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_operator_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_on_clauseContext,i)


        def table_operator_execute_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_execute_clauseContext,0)


        def table_operator_out_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_operator_out_table_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_out_table_clauseContext,i)


        def table_operator_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_generic_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_table_operator" ):
                listener.enterGeneric_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_table_operator" ):
                listener.exitGeneric_table_operator(self)




    def generic_table_operator(self):

        localctx = TeradataSQLDMLParser.Generic_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_generic_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2943
            self.table_name()
            self.state = 2944
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 2948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==286:
                self.state = 2945
                self.table_operator_on_clause()
                self.state = 2950
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 2951
                self.table_operator_execute_clause()


            self.state = 2957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2954
                self.table_operator_out_table_clause()
                self.state = 2959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2960
                self.table_operator_using_clause()


            self.state = 2963
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def hash_or_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hash_or_partition_byContext,0)


        def DIMENSION(self):
            return self.getToken(TeradataSQLDMLParser.DIMENSION, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDMLParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_operator_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_on_clause" ):
                listener.enterTable_operator_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_on_clause" ):
                listener.exitTable_operator_on_clause(self)




    def table_operator_on_clause(self):

        localctx = TeradataSQLDMLParser.Table_operator_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_table_operator_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2965
            self.match(TeradataSQLDMLParser.ON)
            self.state = 2968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2966
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2967
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2970
                self.match(TeradataSQLDMLParser.AS)
                self.state = 2971
                self.alias_name()


            self.state = 2976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 840]:
                self.state = 2974
                self.hash_or_partition_by()
                pass
            elif token in [635]:
                self.state = 2975
                self.match(TeradataSQLDMLParser.DIMENSION)
                pass
            elif token in [144, 224, 286, 291, 293, 352, 457, 542, 569, 625, 871, 1214]:
                pass
            else:
                pass
            self.state = 2991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 2979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 2978
                    self.match(TeradataSQLDMLParser.LOCAL)


                self.state = 2981
                self.match(TeradataSQLDMLParser.ORDER)
                self.state = 2982
                self.match(TeradataSQLDMLParser.BY)
                self.state = 2983
                self.order_by_spec_full()
                self.state = 2988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2984
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 2985
                    self.order_by_spec_full()
                    self.state = 2990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext

        def EXECUTE(self):
            return self.getToken(TeradataSQLDMLParser.EXECUTE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDMLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLDMLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_operator_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_execute_clause" ):
                listener.enterTable_operator_execute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_execute_clause" ):
                listener.exitTable_operator_execute_clause(self)




    def table_operator_execute_clause(self):

        localctx = TeradataSQLDMLParser.Table_operator_execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_table_operator_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2993
            self.match(TeradataSQLDMLParser.EXECUTE)
            self.state = 2994
            self.match(TeradataSQLDMLParser.MAP)
            self.state = 2995
            self.match(TeradataSQLDMLParser.EQUALS_SIGN)
            self.state = 2996
            localctx.map_name = self.char_string_literal()
            self.state = 3001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 2997
                self.match(TeradataSQLDMLParser.COLOCATE)
                self.state = 2998
                self.match(TeradataSQLDMLParser.USING)
                self.state = 2999
                self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                self.state = 3000
                localctx.colocation_name = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_out_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def OUT(self):
            return self.getToken(TeradataSQLDMLParser.OUT, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDMLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_operator_out_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_out_table_clause" ):
                listener.enterTable_operator_out_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_out_table_clause" ):
                listener.exitTable_operator_out_table_clause(self)




    def table_operator_out_table_clause(self):

        localctx = TeradataSQLDMLParser.Table_operator_out_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_table_operator_out_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3003
            self.match(TeradataSQLDMLParser.OUT)
            self.state = 3004
            self.match(TeradataSQLDMLParser.TABLE)
            self.state = 3005
            localctx.name = self.unqualified_name()
            self.state = 3006
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3007
            self.table_name()
            self.state = 3008
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def table_operator_using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Table_operator_using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Table_operator_using_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_operator_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_clause" ):
                listener.enterTable_operator_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_clause" ):
                listener.exitTable_operator_using_clause(self)




    def table_operator_using_clause(self):

        localctx = TeradataSQLDMLParser.Table_operator_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_table_operator_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3010
            self.match(TeradataSQLDMLParser.USING)
            self.state = 3012 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3011
                self.table_operator_using_spec()
                self.state = 3014 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_table_operator_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_spec" ):
                listener.enterTable_operator_using_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_spec" ):
                listener.exitTable_operator_using_spec(self)




    def table_operator_using_spec(self):

        localctx = TeradataSQLDMLParser.Table_operator_using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_table_operator_using_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3016
            localctx.name = self.unqualified_name()
            self.state = 3019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 3017
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 3018
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_using_name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDMLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDMLParser.QUOTES, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_keys_using_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_using_name_value_pair" ):
                listener.enterJson_keys_using_name_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_using_name_value_pair" ):
                listener.exitJson_keys_using_name_value_pair(self)




    def json_keys_using_name_value_pair(self):

        localctx = TeradataSQLDMLParser.Json_keys_using_name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_json_keys_using_name_value_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            _la = self._input.LA(1)
            if not(_la==1185 or _la==1186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3022
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3023
            localctx.value = self.scalar_expr(0)
            self.state = 3024
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_or_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def HASH(self):
            return self.getToken(TeradataSQLDMLParser.HASH, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDMLParser.PARTITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def ANY(self):
            return self.getToken(TeradataSQLDMLParser.ANY, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hash_or_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_or_partition_by" ):
                listener.enterHash_or_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_or_partition_by" ):
                listener.exitHash_or_partition_by(self)




    def hash_or_partition_by(self):

        localctx = TeradataSQLDMLParser.Hash_or_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_hash_or_partition_by)
        self._la = 0 # Token type
        try:
            self.state = 3039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3026
                _la = self._input.LA(1)
                if not(_la==178 or _la==840):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3027
                self.match(TeradataSQLDMLParser.BY)
                self.state = 3028
                self.scalar_expr(0)
                self.state = 3033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3029
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3030
                    self.scalar_expr(0)
                    self.state = 3035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3036
                self.match(TeradataSQLDMLParser.PARTITION)
                self.state = 3037
                self.match(TeradataSQLDMLParser.BY)
                self.state = 3038
                self.match(TeradataSQLDMLParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_subquery_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_reference" ):
                listener.enterSubquery_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_reference" ):
                listener.exitSubquery_reference(self)




    def subquery_reference(self):

        localctx = TeradataSQLDMLParser.Subquery_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_subquery_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3041
            self.subquery()
            self.state = 3043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 3042
                self.match(TeradataSQLDMLParser.AS)


            self.state = 3045
            self.alias_name()
            self.state = 3047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.state = 3046
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_path = None # Token

        def LOCATION(self):
            return self.getToken(TeradataSQLDMLParser.LOCATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDMLParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)




    def location(self):

        localctx = TeradataSQLDMLParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self.match(TeradataSQLDMLParser.LOCATION)
            self.state = 3050
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3051
            localctx.external_file_path = self.match(TeradataSQLDMLParser.CHAR_STRING)
            self.state = 3052
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.buffer_size = None # Char_string_literalContext
            self.return_type = None # Char_string_literalContext
            self.row_sampling_value = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.fullscan = None # Char_string_literalContext
            self.manifest = None # Char_string_literalContext
            self.row_format = None # Char_string_literalContext
            self.header = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDMLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDMLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDMLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLE_PERC, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDMLParser.STOREDAS, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDMLParser.FULLSCAN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDMLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDMLParser.ROWFORMAT, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDMLParser.HEADER, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_read_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_option" ):
                listener.enterRead_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_option" ):
                listener.exitRead_nos_option(self)




    def read_nos_option(self):

        localctx = TeradataSQLDMLParser.Read_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_read_nos_option)
        try:
            self.state = 3102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3054
                self.match(TeradataSQLDMLParser.AUTHORIZATION)
                self.state = 3055
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3058
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 3056
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 3057
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 3060
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3062
                self.match(TeradataSQLDMLParser.BUFFERSIZE)
                self.state = 3063
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3064
                localctx.buffer_size = self.char_string_literal()
                self.state = 3065
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3067
                self.match(TeradataSQLDMLParser.RETURNTYPE)
                self.state = 3068
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3069
                localctx.return_type = self.char_string_literal()
                self.state = 3070
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3072
                self.match(TeradataSQLDMLParser.SAMPLE_PERC)
                self.state = 3073
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3074
                localctx.row_sampling_value = self.char_string_literal()
                self.state = 3075
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3077
                self.match(TeradataSQLDMLParser.STOREDAS)
                self.state = 3078
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3079
                localctx.stored_as = self.char_string_literal()
                self.state = 3080
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3082
                self.match(TeradataSQLDMLParser.FULLSCAN)
                self.state = 3083
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3084
                localctx.fullscan = self.char_string_literal()
                self.state = 3085
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3087
                self.match(TeradataSQLDMLParser.MANIFEST)
                self.state = 3088
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3089
                localctx.manifest = self.char_string_literal()
                self.state = 3090
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3092
                self.match(TeradataSQLDMLParser.ROWFORMAT)
                self.state = 3093
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3094
                localctx.row_format = self.char_string_literal()
                self.state = 3095
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3097
                self.match(TeradataSQLDMLParser.HEADER)
                self.state = 3098
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3099
                localctx.header = self.char_string_literal()
                self.state = 3100
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.naming = None # Char_string_literalContext
            self.manifest_name = None # Char_string_literalContext
            self.manifest_only = None # Char_string_literalContext
            self.overwrite = None # Char_string_literalContext
            self.include_ordering = None # Char_string_literalContext
            self.include_hashby = None # Char_string_literalContext
            self.max_object_size = None # Char_string_literalContext
            self.compression = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDMLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def STOREDAS(self):
            return self.getToken(TeradataSQLDMLParser.STOREDAS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDMLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDMLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDMLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDMLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDMLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDMLParser.COMPRESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_write_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_option" ):
                listener.enterWrite_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_option" ):
                listener.exitWrite_nos_option(self)




    def write_nos_option(self):

        localctx = TeradataSQLDMLParser.Write_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_write_nos_option)
        try:
            self.state = 3157
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3104
                self.match(TeradataSQLDMLParser.AUTHORIZATION)
                self.state = 3105
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3106
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 3107
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 3110
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3112
                self.match(TeradataSQLDMLParser.STOREDAS)
                self.state = 3113
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3114
                localctx.stored_as = self.char_string_literal()
                self.state = 3115
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3117
                self.match(TeradataSQLDMLParser.NAMING)
                self.state = 3118
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3119
                localctx.naming = self.char_string_literal()
                self.state = 3120
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3122
                self.match(TeradataSQLDMLParser.MANIFESTFILE)
                self.state = 3123
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3124
                localctx.manifest_name = self.char_string_literal()
                self.state = 3125
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3127
                self.match(TeradataSQLDMLParser.MANIFESTONLY)
                self.state = 3128
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3129
                localctx.manifest_only = self.char_string_literal()
                self.state = 3130
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3132
                self.match(TeradataSQLDMLParser.OVERWRITE)
                self.state = 3133
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3134
                localctx.overwrite = self.char_string_literal()
                self.state = 3135
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3137
                self.match(TeradataSQLDMLParser.INCLUDE_ORDERING)
                self.state = 3138
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3139
                localctx.include_ordering = self.char_string_literal()
                self.state = 3140
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3142
                self.match(TeradataSQLDMLParser.INCLUDE_HASHBY)
                self.state = 3143
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3144
                localctx.include_hashby = self.char_string_literal()
                self.state = 3145
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3147
                self.match(TeradataSQLDMLParser.MAXOBJECTSIZE)
                self.state = 3148
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3149
                localctx.max_object_size = self.char_string_literal()
                self.state = 3150
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1173]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3152
                self.match(TeradataSQLDMLParser.COMPRESSION)
                self.state = 3153
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3154
                localctx.compression = self.char_string_literal()
                self.state = 3155
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def with_clause_title_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.With_clause_title_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.With_clause_title_phraseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def with_clause_by_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_clause_by_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = TeradataSQLDMLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3159
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 3160
            self.scalar_expr(0)
            self.state = 3162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3161
                self.with_clause_title_phrase()


            self.state = 3171
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,417,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3164
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3165
                    self.scalar_expr(0)
                    self.state = 3167
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                    if la_ == 1:
                        self.state = 3166
                        self.with_clause_title_phrase()

             
                self.state = 3173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

            self.state = 3175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 3174
                self.with_clause_by_phrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_by_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_asc_desc_onlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_clause_by_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_by_phrase" ):
                listener.enterWith_clause_by_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_by_phrase" ):
                listener.exitWith_clause_by_phrase(self)




    def with_clause_by_phrase(self):

        localctx = TeradataSQLDMLParser.With_clause_by_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_with_clause_by_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3177
            self.match(TeradataSQLDMLParser.BY)
            self.state = 3178
            self.order_by_spec_asc_desc_only()
            self.state = 3183
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3179
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3180
                    self.order_by_spec_asc_desc_only() 
                self.state = 3185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDMLParser.TITLE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_clause_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_title_phrase" ):
                listener.enterWith_clause_title_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_title_phrase" ):
                listener.exitWith_clause_title_phrase(self)




    def with_clause_title_phrase(self):

        localctx = TeradataSQLDMLParser.With_clause_title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_with_clause_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3186
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3187
            self.match(TeradataSQLDMLParser.TITLE)
            self.state = 3188
            localctx.title = self.char_string_literal()
            self.state = 3189
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataSQLDMLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = TeradataSQLDMLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3191
            self.match(TeradataSQLDMLParser.WHERE)
            self.state = 3192
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(TeradataSQLDMLParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def group_by_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Group_by_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Group_by_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = TeradataSQLDMLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_group_by_clause)
        try:
            self.state = 3206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3194
                self.match(TeradataSQLDMLParser.GROUP)
                self.state = 3195
                self.match(TeradataSQLDMLParser.BY)
                self.state = 3196
                self.group_by_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3197
                self.match(TeradataSQLDMLParser.GROUP)
                self.state = 3198
                self.match(TeradataSQLDMLParser.BY)
                self.state = 3199
                self.group_by_spec()
                self.state = 3202 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3200
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3201
                        self.group_by_spec()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3204 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Ordinary_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_group_by_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_spec" ):
                listener.enterGroup_by_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_spec" ):
                listener.exitGroup_by_spec(self)




    def group_by_spec(self):

        localctx = TeradataSQLDMLParser.Group_by_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_group_by_spec)
        try:
            self.state = 3212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3208
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3209
                self.rollup_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3210
                self.cube_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3211
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def ordinary_grouping_set_parenthesized(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Ordinary_grouping_set_parenthesizedContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Ordinary_grouping_set_parenthesizedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = TeradataSQLDMLParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 3214
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 3215
                self.ordinary_grouping_set_parenthesized()
                pass


            self.state = 3225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,425,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3218
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3221
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                    if la_ == 1:
                        self.state = 3219
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 3220
                        self.ordinary_grouping_set_parenthesized()
                        pass

             
                self.state = 3227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,425,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_ordinary_grouping_set_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_parenthesized" ):
                listener.enterOrdinary_grouping_set_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_parenthesized" ):
                listener.exitOrdinary_grouping_set_parenthesized(self)




    def ordinary_grouping_set_parenthesized(self):

        localctx = TeradataSQLDMLParser.Ordinary_grouping_set_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_ordinary_grouping_set_parenthesized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3228
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3229
            self.scalar_expr(0)
            self.state = 3232 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3230
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 3231
                self.scalar_expr(0)
                self.state = 3234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 3236
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = TeradataSQLDMLParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3238
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3239
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(TeradataSQLDMLParser.ROLLUP, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_rollup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_option" ):
                listener.enterRollup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_option" ):
                listener.exitRollup_option(self)




    def rollup_option(self):

        localctx = TeradataSQLDMLParser.Rollup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_rollup_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3241
            self.match(TeradataSQLDMLParser.ROLLUP)
            self.state = 3242
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3243
            self.ordinary_grouping_set()
            self.state = 3244
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(TeradataSQLDMLParser.CUBE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_cube_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_option" ):
                listener.enterCube_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_option" ):
                listener.exitCube_option(self)




    def cube_option(self):

        localctx = TeradataSQLDMLParser.Cube_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_cube_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3246
            self.match(TeradataSQLDMLParser.CUBE)
            self.state = 3247
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3248
            self.ordinary_grouping_set()
            self.state = 3249
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(TeradataSQLDMLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TeradataSQLDMLParser.SETS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def grouping_sets_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Grouping_sets_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Grouping_sets_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_grouping_sets_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_option" ):
                listener.enterGrouping_sets_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_option" ):
                listener.exitGrouping_sets_option(self)




    def grouping_sets_option(self):

        localctx = TeradataSQLDMLParser.Grouping_sets_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_grouping_sets_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3251
            self.match(TeradataSQLDMLParser.GROUPING)
            self.state = 3252
            self.match(TeradataSQLDMLParser.SETS)
            self.state = 3253
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 3254
            self.grouping_sets_spec()
            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3255
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 3256
                self.grouping_sets_spec()
                self.state = 3261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3262
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Ordinary_grouping_setContext,0)


        def empty_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Empty_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_grouping_sets_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_spec" ):
                listener.enterGrouping_sets_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_spec" ):
                listener.exitGrouping_sets_spec(self)




    def grouping_sets_spec(self):

        localctx = TeradataSQLDMLParser.Grouping_sets_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_grouping_sets_spec)
        try:
            self.state = 3269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3264
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3265
                self.empty_grouping_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3266
                self.rollup_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3267
                self.cube_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3268
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataSQLDMLParser.HAVING, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = TeradataSQLDMLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3271
            self.match(TeradataSQLDMLParser.HAVING)
            self.state = 3272
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataSQLDMLParser.QUALIFY, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = TeradataSQLDMLParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3274
            self.match(TeradataSQLDMLParser.QUALIFY)
            self.state = 3275
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(TeradataSQLDMLParser.SAMPLE, 0)

        def sample_fraction_description(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Sample_fraction_descriptionContext,0)


        def sample_count_description(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Sample_count_descriptionContext,0)


        def sample_when_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Sample_when_clauseContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDMLParser.REPLACEMENT, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDMLParser.RANDOMIZED, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDMLParser.ALLOCATION, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = TeradataSQLDMLParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3277
            self.match(TeradataSQLDMLParser.SAMPLE)
            self.state = 3280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3278
                self.match(TeradataSQLDMLParser.WITH)
                self.state = 3279
                self.match(TeradataSQLDMLParser.REPLACEMENT)


            self.state = 3284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==872:
                self.state = 3282
                self.match(TeradataSQLDMLParser.RANDOMIZED)
                self.state = 3283
                self.match(TeradataSQLDMLParser.ALLOCATION)


            self.state = 3289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1197]:
                self.state = 3286
                self.sample_fraction_description()
                pass
            elif token in [1194]:
                self.state = 3287
                self.sample_count_description()
                pass
            elif token in [470]:
                self.state = 3288
                self.sample_when_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_fraction_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._float_literal = None # Float_literalContext
            self.fraction_description = list() # of Float_literalContexts

        def float_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Float_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Float_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_sample_fraction_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_fraction_description" ):
                listener.enterSample_fraction_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_fraction_description" ):
                listener.exitSample_fraction_description(self)




    def sample_fraction_description(self):

        localctx = TeradataSQLDMLParser.Sample_fraction_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_sample_fraction_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3291
            localctx._float_literal = self.float_literal()
            localctx.fraction_description.append(localctx._float_literal)
            self.state = 3296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,432,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3292
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3293
                    localctx._float_literal = self.float_literal()
                    localctx.fraction_description.append(localctx._float_literal) 
                self.state = 3298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,432,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_count_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.count_description = list() # of Integer_literalContexts

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_sample_count_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_count_description" ):
                listener.enterSample_count_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_count_description" ):
                listener.exitSample_count_description(self)




    def sample_count_description(self):

        localctx = TeradataSQLDMLParser.Sample_count_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_sample_count_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3299
            localctx._integer_literal = self.integer_literal()
            localctx.count_description.append(localctx._integer_literal)
            self.state = 3304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,433,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3300
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3301
                    localctx._integer_literal = self.integer_literal()
                    localctx.count_description.append(localctx._integer_literal) 
                self.state = 3306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,433,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_when_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDMLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDMLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.THEN)
            else:
                return self.getToken(TeradataSQLDMLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDMLParser.ELSE, 0)

        def sample_fraction_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Sample_fraction_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Sample_fraction_descriptionContext,i)


        def sample_count_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Sample_count_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Sample_count_descriptionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_sample_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_when_clause" ):
                listener.enterSample_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_when_clause" ):
                listener.exitSample_when_clause(self)




    def sample_when_clause(self):

        localctx = TeradataSQLDMLParser.Sample_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_sample_when_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3307
                self.match(TeradataSQLDMLParser.WHEN)
                self.state = 3308
                self.logical_expr(0)
                self.state = 3309
                self.match(TeradataSQLDMLParser.THEN)
                self.state = 3312
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 3310
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 3311
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 3323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3318
                self.match(TeradataSQLDMLParser.ELSE)
                self.state = 3321
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 3319
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 3320
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3325
            self.match(TeradataSQLDMLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expand_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expand_expr = None # Scalar_exprContext
            self.expand_column_alias = None # Alias_nameContext
            self.period_expression = None # Scalar_exprContext

        def EXPAND(self):
            return self.getToken(TeradataSQLDMLParser.EXPAND, 0)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_literalContext,0)


        def ANCHOR(self):
            return self.getToken(TeradataSQLDMLParser.ANCHOR, 0)

        def anchor_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Anchor_nameContext,0)


        def PERIOD(self):
            return self.getToken(TeradataSQLDMLParser.PERIOD, 0)

        def AT(self):
            return self.getToken(TeradataSQLDMLParser.AT, 0)

        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Time_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_expand_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpand_on_clause" ):
                listener.enterExpand_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpand_on_clause" ):
                listener.exitExpand_on_clause(self)




    def expand_on_clause(self):

        localctx = TeradataSQLDMLParser.Expand_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_expand_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3327
            self.match(TeradataSQLDMLParser.EXPAND)
            self.state = 3328
            self.match(TeradataSQLDMLParser.ON)
            self.state = 3329
            localctx.expand_expr = self.scalar_expr(0)
            self.state = 3331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 3330
                self.match(TeradataSQLDMLParser.AS)


            self.state = 3333
            localctx.expand_column_alias = self.alias_name()
            self.state = 3347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3334
                self.match(TeradataSQLDMLParser.BY)
                self.state = 3345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 3335
                    self.interval_literal()
                    pass
                elif token in [505]:
                    self.state = 3336
                    self.match(TeradataSQLDMLParser.ANCHOR)
                    self.state = 3338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==853:
                        self.state = 3337
                        self.match(TeradataSQLDMLParser.PERIOD)


                    self.state = 3340
                    self.anchor_name()
                    self.state = 3343
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                    if la_ == 1:
                        self.state = 3341
                        self.match(TeradataSQLDMLParser.AT)
                        self.state = 3342
                        self.time_literal()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3349
                self.match(TeradataSQLDMLParser.FOR)
                self.state = 3350
                localctx.period_expression = self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TeradataSQLDMLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3353
            self.match(TeradataSQLDMLParser.ORDER)
            self.state = 3354
            self.match(TeradataSQLDMLParser.BY)
            self.state = 3355
            self.order_by_spec_full()
            self.state = 3360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3356
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3357
                    self.order_by_spec_full() 
                self.state = 3362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_fullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDMLParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDMLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDMLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLDMLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDMLParser.LAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_order_by_spec_full

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_full" ):
                listener.enterOrder_by_spec_full(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_full" ):
                listener.exitOrder_by_spec_full(self)




    def order_by_spec_full(self):

        localctx = TeradataSQLDMLParser.Order_by_spec_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_order_by_spec_full)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3363
            self.scalar_expr(0)
            self.state = 3365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 3364
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 3367
                self.match(TeradataSQLDMLParser.NULLS)
                self.state = 3368
                _la = self._input.LA(1)
                if not(_la==156 or _la==731):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_asc_desc_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def ASC(self):
            return self.getToken(TeradataSQLDMLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDMLParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_order_by_spec_asc_desc_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_asc_desc_only" ):
                listener.enterOrder_by_spec_asc_desc_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_asc_desc_only" ):
                listener.exitOrder_by_spec_asc_desc_only(self)




    def order_by_spec_asc_desc_only(self):

        localctx = TeradataSQLDMLParser.Order_by_spec_asc_desc_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_order_by_spec_asc_desc_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3371
            self.scalar_expr(0)
            self.state = 3373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.state = 3372
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_check_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDMLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDMLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_check_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_check_option" ):
                listener.enterWith_check_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_check_option" ):
                listener.exitWith_check_option(self)




    def with_check_option(self):

        localctx = TeradataSQLDMLParser.With_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_with_check_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3375
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 3376
            self.match(TeradataSQLDMLParser.CHECK)
            self.state = 3377
            self.match(TeradataSQLDMLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_logical_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PeriodMeetsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def MEETS(self):
            return self.getToken(TeradataSQLDMLParser.MEETS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodMeets" ):
                listener.enterPeriodMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodMeets" ):
                listener.exitPeriodMeets(self)


    class PeriodImmediatelySucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDMLParser.IMMEDIATELY, 0)
        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDMLParser.SUCCEEDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelySucceeds" ):
                listener.enterPeriodImmediatelySucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelySucceeds" ):
                listener.exitPeriodImmediatelySucceeds(self)


    class PeriodEqualsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def EQUALS(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodEquals" ):
                listener.enterPeriodEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodEquals" ):
                listener.exitPeriodEquals(self)


    class ScalarComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarComparelist" ):
                listener.enterScalarComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarComparelist" ):
                listener.exitScalarComparelist(self)


    class TupleInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.TupleContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDMLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)


    class LogicalOrContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,i)

        def OR(self):
            return self.getToken(TeradataSQLDMLParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOr" ):
                listener.enterLogicalOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOr" ):
                listener.exitLogicalOr(self)


    class ScalarInScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)
        def IS(self):
            return self.getToken(TeradataSQLDMLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInScalar" ):
                listener.enterScalarInScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInScalar" ):
                listener.exitScalarInScalar(self)


    class ScalarCompareScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarCompareScalar" ):
                listener.enterScalarCompareScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarCompareScalar" ):
                listener.exitScalarCompareScalar(self)


    class LogicalNotContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class TupleComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.TupleContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleComparelist" ):
                listener.enterTupleComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleComparelist" ):
                listener.exitTupleComparelist(self)


    class ScalarInListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)
        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_listContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDMLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInList" ):
                listener.enterScalarInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInList" ):
                listener.exitScalarInList(self)


    class TupleLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.TupleContext,0)

        def LIKE(self):
            return self.getToken(TeradataSQLDMLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDMLParser.ESCAPE, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleLikeList" ):
                listener.enterTupleLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleLikeList" ):
                listener.exitTupleLikeList(self)


    class LogicalAndContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,i)

        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAnd" ):
                listener.enterLogicalAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAnd" ):
                listener.exitLogicalAnd(self)


    class ScalarInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDMLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInSubquery" ):
                listener.enterScalarInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInSubquery" ):
                listener.exitScalarInSubquery(self)


    class PeriodContainsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def CONTAINS(self):
            return self.getToken(TeradataSQLDMLParser.CONTAINS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodContains" ):
                listener.enterPeriodContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodContains" ):
                listener.exitPeriodContains(self)


    class PeriodOverlapsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDMLParser.OVERLAPS, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)
        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodOverlaps" ):
                listener.enterPeriodOverlaps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodOverlaps" ):
                listener.exitPeriodOverlaps(self)


    class BetweenContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDMLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class ParenthesizedLogicalExprContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLogicalExpr" ):
                listener.enterParenthesizedLogicalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLogicalExpr" ):
                listener.exitParenthesizedLogicalExpr(self)


    class PeriodImmediatelyPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDMLParser.IMMEDIATELY, 0)
        def PRECEDES(self):
            return self.getToken(TeradataSQLDMLParser.PRECEDES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelyPrecedes" ):
                listener.enterPeriodImmediatelyPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelyPrecedes" ):
                listener.exitPeriodImmediatelyPrecedes(self)


    class NullCheckContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDMLParser.IS, 0)
        def NULL(self):
            return self.getToken(TeradataSQLDMLParser.NULL, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCheck" ):
                listener.enterNullCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCheck" ):
                listener.exitNullCheck(self)


    class PeriodPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDMLParser.PRECEDES, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodPrecedes" ):
                listener.enterPeriodPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodPrecedes" ):
                listener.exitPeriodPrecedes(self)


    class ExistsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataSQLDMLParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PeriodSucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDMLParser.SUCCEEDS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodSucceeds" ):
                listener.enterPeriodSucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodSucceeds" ):
                listener.exitPeriodSucceeds(self)


    class ScalarLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDMLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDMLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeList" ):
                listener.enterScalarLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeList" ):
                listener.exitScalarLikeList(self)


    class ScalarLikeScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDMLParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(TeradataSQLDMLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDMLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeScalar" ):
                listener.enterScalarLikeScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeScalar" ):
                listener.exitScalarLikeScalar(self)



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDMLParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 400
        self.enterRecursionRule(localctx, 400, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDMLParser.ScalarCompareScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3380
                self.scalar_expr(0)
                self.state = 3381
                localctx.op = self.comparison_operator()
                self.state = 3382
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                localctx = TeradataSQLDMLParser.ScalarComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3384
                self.scalar_expr(0)
                self.state = 3385
                localctx.op = self.comparison_operator()
                self.state = 3386
                self.quantifier()
                self.state = 3387
                self.elements_list()
                self.state = 3391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,448,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3388
                        self.attribute_modification() 
                    self.state = 3393
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,448,self._ctx)

                pass

            elif la_ == 3:
                localctx = TeradataSQLDMLParser.TupleComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3394
                self.tuple_()
                self.state = 3395
                localctx.op = self.comparison_operator()
                self.state = 3396
                self.quantifier()
                self.state = 3397
                self.elements_list()
                self.state = 3401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,449,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3398
                        self.attribute_modification() 
                    self.state = 3403
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,449,self._ctx)

                pass

            elif la_ == 4:
                localctx = TeradataSQLDMLParser.BetweenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3404
                self.scalar_expr(0)
                self.state = 3406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3405
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3408
                self.match(TeradataSQLDMLParser.BETWEEN)
                self.state = 3409
                self.scalar_expr(0)
                self.state = 3410
                self.match(TeradataSQLDMLParser.AND)
                self.state = 3411
                self.scalar_expr(0)
                pass

            elif la_ == 5:
                localctx = TeradataSQLDMLParser.ScalarInListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3413
                self.scalar_expr(0)
                self.state = 3415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3414
                    self.match(TeradataSQLDMLParser.IS)


                self.state = 3418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3417
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3420
                self.match(TeradataSQLDMLParser.IN)
                self.state = 3422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3421
                    self.quantifier()


                self.state = 3424
                self.scalar_expr_list()
                self.state = 3428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,454,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3425
                        self.attribute_modification() 
                    self.state = 3430
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,454,self._ctx)

                pass

            elif la_ == 6:
                localctx = TeradataSQLDMLParser.ScalarInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3431
                self.scalar_expr(0)
                self.state = 3433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3432
                    self.match(TeradataSQLDMLParser.IS)


                self.state = 3436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3435
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3438
                self.match(TeradataSQLDMLParser.IN)
                self.state = 3440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3439
                    self.quantifier()


                self.state = 3442
                self.subquery()
                self.state = 3446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,458,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3443
                        self.attribute_modification() 
                    self.state = 3448
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,458,self._ctx)

                pass

            elif la_ == 7:
                localctx = TeradataSQLDMLParser.ScalarInScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3449
                self.scalar_expr(0)
                self.state = 3451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3450
                    self.match(TeradataSQLDMLParser.IS)


                self.state = 3454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3453
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3456
                self.match(TeradataSQLDMLParser.IN)
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3457
                    self.quantifier()


                self.state = 3460
                self.scalar_expr(0)
                self.state = 3464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,462,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3461
                        self.attribute_modification() 
                    self.state = 3466
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,462,self._ctx)

                pass

            elif la_ == 8:
                localctx = TeradataSQLDMLParser.TupleInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3467
                self.tuple_()
                self.state = 3469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3468
                    self.match(TeradataSQLDMLParser.IS)


                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3471
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3474
                self.match(TeradataSQLDMLParser.IN)
                self.state = 3476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3475
                    self.quantifier()


                self.state = 3478
                self.subquery()
                self.state = 3482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3479
                        self.attribute_modification() 
                    self.state = 3484
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

                pass

            elif la_ == 9:
                localctx = TeradataSQLDMLParser.ScalarLikeScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3485
                self.scalar_expr(0)
                self.state = 3487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3486
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3489
                self.match(TeradataSQLDMLParser.LIKE)
                self.state = 3490
                self.scalar_expr(0)
                self.state = 3493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
                if la_ == 1:
                    self.state = 3491
                    self.match(TeradataSQLDMLParser.ESCAPE)
                    self.state = 3492
                    self.scalar_expr(0)


                pass

            elif la_ == 10:
                localctx = TeradataSQLDMLParser.ScalarLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3495
                self.scalar_expr(0)
                self.state = 3497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3496
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3499
                self.match(TeradataSQLDMLParser.LIKE)
                self.state = 3500
                self.quantifier()
                self.state = 3501
                self.elements_list()
                self.state = 3505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,470,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3502
                        self.attribute_modification() 
                    self.state = 3507
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,470,self._ctx)

                self.state = 3510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                if la_ == 1:
                    self.state = 3508
                    self.match(TeradataSQLDMLParser.ESCAPE)
                    self.state = 3509
                    self.scalar_expr(0)


                self.state = 3515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3512
                        self.attribute_modification() 
                    self.state = 3517
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

                pass

            elif la_ == 11:
                localctx = TeradataSQLDMLParser.TupleLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3518
                self.tuple_()
                self.state = 3520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3519
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3522
                self.match(TeradataSQLDMLParser.LIKE)
                self.state = 3523
                self.quantifier()
                self.state = 3524
                self.elements_list()
                self.state = 3528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,474,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3525
                        self.attribute_modification() 
                    self.state = 3530
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,474,self._ctx)

                self.state = 3533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                if la_ == 1:
                    self.state = 3531
                    self.match(TeradataSQLDMLParser.ESCAPE)
                    self.state = 3532
                    self.scalar_expr(0)


                self.state = 3538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3535
                        self.attribute_modification() 
                    self.state = 3540
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,476,self._ctx)

                pass

            elif la_ == 12:
                localctx = TeradataSQLDMLParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3541
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3544
                self.match(TeradataSQLDMLParser.EXISTS)
                self.state = 3545
                self.subquery()
                pass

            elif la_ == 13:
                localctx = TeradataSQLDMLParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3546
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3547
                self.logical_expr(13)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDMLParser.NullCheckContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3548
                self.scalar_expr(0)
                self.state = 3549
                self.match(TeradataSQLDMLParser.IS)
                self.state = 3551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3550
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3553
                self.match(TeradataSQLDMLParser.NULL)
                pass

            elif la_ == 15:
                localctx = TeradataSQLDMLParser.PeriodContainsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3555
                self.scalar_expr(0)
                self.state = 3557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3556
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3559
                self.match(TeradataSQLDMLParser.CONTAINS)
                self.state = 3560
                self.scalar_expr(0)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDMLParser.PeriodEqualsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3562
                self.scalar_expr(0)
                self.state = 3564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3563
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3566
                self.match(TeradataSQLDMLParser.EQUALS)
                self.state = 3567
                self.scalar_expr(0)
                pass

            elif la_ == 17:
                localctx = TeradataSQLDMLParser.PeriodMeetsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3569
                self.scalar_expr(0)
                self.state = 3571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3570
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3573
                self.match(TeradataSQLDMLParser.MEETS)
                self.state = 3574
                self.scalar_expr(0)
                pass

            elif la_ == 18:
                localctx = TeradataSQLDMLParser.PeriodPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3576
                self.scalar_expr(0)
                self.state = 3578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3577
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3580
                self.match(TeradataSQLDMLParser.PRECEDES)
                self.state = 3581
                self.scalar_expr(0)
                pass

            elif la_ == 19:
                localctx = TeradataSQLDMLParser.PeriodSucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3583
                self.scalar_expr(0)
                self.state = 3585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3584
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3587
                self.match(TeradataSQLDMLParser.SUCCEEDS)
                self.state = 3588
                self.scalar_expr(0)
                pass

            elif la_ == 20:
                localctx = TeradataSQLDMLParser.PeriodImmediatelyPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3590
                self.scalar_expr(0)
                self.state = 3591
                self.match(TeradataSQLDMLParser.IMMEDIATELY)
                self.state = 3592
                self.match(TeradataSQLDMLParser.PRECEDES)
                self.state = 3593
                self.scalar_expr(0)
                pass

            elif la_ == 21:
                localctx = TeradataSQLDMLParser.PeriodImmediatelySucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3595
                self.scalar_expr(0)
                self.state = 3596
                self.match(TeradataSQLDMLParser.IMMEDIATELY)
                self.state = 3597
                self.match(TeradataSQLDMLParser.SUCCEEDS)
                self.state = 3598
                self.scalar_expr(0)
                pass

            elif la_ == 22:
                localctx = TeradataSQLDMLParser.PeriodOverlapsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
                if la_ == 1:
                    self.state = 3600
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 3601
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 3602
                    self.scalar_expr(0)
                    self.state = 3603
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3604
                    self.scalar_expr(0)
                    self.state = 3605
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 3607
                    self.subquery()
                    pass


                self.state = 3610
                self.match(TeradataSQLDMLParser.OVERLAPS)
                self.state = 3619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                if la_ == 1:
                    self.state = 3611
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 3612
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 3613
                    self.scalar_expr(0)
                    self.state = 3614
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3615
                    self.scalar_expr(0)
                    self.state = 3616
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 3618
                    self.subquery()
                    pass


                pass

            elif la_ == 23:
                localctx = TeradataSQLDMLParser.ParenthesizedLogicalExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3621
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3622
                self.logical_expr(0)
                self.state = 3623
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,488,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3633
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDMLParser.LogicalAndContext(self, TeradataSQLDMLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 3627
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3628
                        self.match(TeradataSQLDMLParser.AND)
                        self.state = 3629
                        self.logical_expr(13)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDMLParser.LogicalOrContext(self, TeradataSQLDMLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 3630
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3631
                        self.match(TeradataSQLDMLParser.OR)
                        self.state = 3632
                        self.logical_expr(12)
                        pass

             
                self.state = 3637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,488,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Scalar_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_scalar_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JsonMetadataContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.storage_format = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def METADATA(self):
            return self.getToken(TeradataSQLDMLParser.METADATA, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDMLParser.STORAGE_SIZE, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMetadata" ):
                listener.enterJsonMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMetadata" ):
                listener.exitJsonMetadata(self)


    class JsonAsBsonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.validation_specification = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ASBSON(self):
            return self.getToken(TeradataSQLDMLParser.ASBSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBson" ):
                listener.enterJsonAsBson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBson" ):
                listener.exitJsonAsBson(self)


    class VariantTypeConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDMLParser.NEW, 0)
        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDMLParser.VARIANT_TYPE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.AS)
            else:
                return self.getToken(TeradataSQLDMLParser.AS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeConstructor" ):
                listener.enterVariantTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeConstructor" ):
                listener.exitVariantTypeConstructor(self)


    class XMLExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDMLParser.XMLEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExtract" ):
                listener.enterXMLExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExtract" ):
                listener.exitXMLExtract(self)


    class ArrayComparisonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GT, 0)
        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GE, 0)
        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_LT, 0)
        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_LE, 0)
        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_EQ, 0)
        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_NE, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayComparison" ):
                listener.enterArrayComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayComparison" ):
                listener.exitArrayComparison(self)


    class ArrayGetContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_index = None # Scalar_exprContext
            self.other_expr = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GET, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_COMPARE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayGet" ):
                listener.enterArrayGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayGet" ):
                listener.exitArrayGet(self)


    class XMLConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDMLParser.NEW, 0)
        def XML(self):
            return self.getToken(TeradataSQLDMLParser.XML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLConstructor" ):
                listener.enterXMLConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLConstructor" ):
                listener.exitXMLConstructor(self)


    class UDTMethodInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Method_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTMethodInvocation" ):
                listener.enterUDTMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTMethodInvocation" ):
                listener.exitUDTMethodInvocation(self)


    class JsonExtractLargeValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDMLParser.JSONEXTRACTLARGEVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractLargeValue" ):
                listener.enterJsonExtractLargeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractLargeValue" ):
                listener.exitJsonExtractLargeValue(self)


    class JsonRecursiveDescendSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COLON)
            else:
                return self.getToken(TeradataSQLDMLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendSlice" ):
                listener.enterJsonRecursiveDescendSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendSlice" ):
                listener.exitJsonRecursiveDescendSlice(self)


    class FunctionInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_invocation(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Function_invocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class ScalarSubqueryContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)


    class JsonExistValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDMLParser.EXISTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistValue" ):
                listener.enterJsonExistValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistValue" ):
                listener.exitJsonExistValue(self)


    class ModuloContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def MOD(self):
            return self.getToken(TeradataSQLDMLParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)


    class JsonExtractValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDMLParser.JSONEXTRACTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractValue" ):
                listener.enterJsonExtractValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractValue" ):
                listener.exitJsonExtractValue(self)


    class XMLCreateSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDMLParser.CREATESCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateSchemaBasedXML" ):
                listener.enterXMLCreateSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateSchemaBasedXML" ):
                listener.exitXMLCreateSchemaBasedXML(self)


    class ArrayUpdateContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_UPDATE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdate" ):
                listener.enterArrayUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdate" ):
                listener.exitArrayUpdate(self)


    class JsonExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDMLParser.JSONEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtract" ):
                listener.enterJsonExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtract" ):
                listener.exitJsonExtract(self)


    class MultDivContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)
        def DIV_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.DIV_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)


    class PeriodIntersectContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDMLParser.P_INTERSECT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodIntersect" ):
                listener.enterPeriodIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodIntersect" ):
                listener.exitPeriodIntersect(self)


    class IntervalExprParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval_expr_parenthesized(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_expr_parenthesizedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExprParenthesized" ):
                listener.enterIntervalExprParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExprParenthesized" ):
                listener.exitIntervalExprParenthesized(self)


    class JsonRecursiveDescendAllArrayElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllArrayElements" ):
                listener.enterJsonRecursiveDescendAllArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllArrayElements" ):
                listener.exitJsonRecursiveDescendAllArrayElements(self)


    class UnaryPlusMinusContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusMinus" ):
                listener.enterUnaryPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusMinus" ):
                listener.exitUnaryPlusMinus(self)


    class ConcatenationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def CONCATENATE(self):
            return self.getToken(TeradataSQLDMLParser.CONCATENATE, 0)
        def BROKEN_CONCATENATE(self):
            return self.getToken(TeradataSQLDMLParser.BROKEN_CONCATENATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class PeriodDiffContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def LDIFF(self):
            return self.getToken(TeradataSQLDMLParser.LDIFF, 0)
        def RDIFF(self):
            return self.getToken(TeradataSQLDMLParser.RDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodDiff" ):
                listener.enterPeriodDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodDiff" ):
                listener.exitPeriodDiff(self)


    class ArrayOmethodWithoudArgsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def OCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.OCOUNT, 0)
        def OLIMIT(self):
            return self.getToken(TeradataSQLDMLParser.OLIMIT, 0)
        def OFIRST(self):
            return self.getToken(TeradataSQLDMLParser.OFIRST, 0)
        def OLAST(self):
            return self.getToken(TeradataSQLDMLParser.OLAST, 0)
        def ODELETE(self):
            return self.getToken(TeradataSQLDMLParser.ODELETE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithoudArgs" ):
                listener.enterArrayOmethodWithoudArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithoudArgs" ):
                listener.exitArrayOmethodWithoudArgs(self)


    class PartitioningExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Partitioning_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningExpr" ):
                listener.enterPartitioningExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningExpr" ):
                listener.exitPartitioningExpr(self)


    class XMLExistNodeContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDMLParser.EXISTSNODE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExistNode" ):
                listener.enterXMLExistNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExistNode" ):
                listener.exitXMLExistNode(self)


    class JsonRecursiveDescendArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendArrayElementReference" ):
                listener.enterJsonRecursiveDescendArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendArrayElementReference" ):
                listener.exitJsonRecursiveDescendArrayElementReference(self)


    class DataTypeConversionContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def teradata_type_conversion(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Teradata_type_conversionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeConversion" ):
                listener.enterDataTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeConversion" ):
                listener.exitDataTypeConversion(self)


    class JsonRecursiveDescendObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendObjectMember" ):
                listener.enterJsonRecursiveDescendObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendObjectMember" ):
                listener.exitJsonRecursiveDescendObjectMember(self)


    class IntervalExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MINUS_SIGN, 0)
        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_expr_start_end_phraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)


    class ExponentiationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def EXPONENTIATION(self):
            return self.getToken(TeradataSQLDMLParser.EXPONENTIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)


    class XMLIsSchemaValidatedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDMLParser.ISSCHEMAVALIDATED, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValidated" ):
                listener.enterXMLIsSchemaValidated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValidated" ):
                listener.exitXMLIsSchemaValidated(self)


    class JSONConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_data = None # Scalar_exprContext
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDMLParser.NEW, 0)
        def JSON(self):
            return self.getToken(TeradataSQLDMLParser.JSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def LATIN(self):
            return self.getToken(TeradataSQLDMLParser.LATIN, 0)
        def UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE, 0)
        def BSON(self):
            return self.getToken(TeradataSQLDMLParser.BSON, 0)
        def UBJSON(self):
            return self.getToken(TeradataSQLDMLParser.UBJSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSONConstructor" ):
                listener.enterJSONConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSONConstructor" ):
                listener.exitJSONConstructor(self)


    class JsonSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COLON)
            else:
                return self.getToken(TeradataSQLDMLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonSlice" ):
                listener.enterJsonSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonSlice" ):
                listener.exitJsonSlice(self)


    class XMLIsSchemaValidContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.elem_decl = None # Scalar_exprContext
            self.ns = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDMLParser.ISSCHEMAVALID, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValid" ):
                listener.enterXMLIsSchemaValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValid" ):
                listener.exitXMLIsSchemaValid(self)


    class ArrayAggregationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.matching_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_SUM, 0)
        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_AVG, 0)
        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MAX, 0)
        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MIN, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_COUNT_DISTINCT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAggregation" ):
                listener.enterArrayAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAggregation" ):
                listener.exitArrayAggregation(self)


    class ArrayUpdateStrideContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_UPDATE_STRIDE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)

        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdateStride" ):
                listener.enterArrayUpdateStride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdateStride" ):
                listener.exitArrayUpdateStride(self)


    class LiteralExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)


    class ArrayOmethodWithArgContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def OEXISTS(self):
            return self.getToken(TeradataSQLDMLParser.OEXISTS, 0)
        def OPRIOR(self):
            return self.getToken(TeradataSQLDMLParser.OPRIOR, 0)
        def ONEXT(self):
            return self.getToken(TeradataSQLDMLParser.ONEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithArg" ):
                listener.enterArrayOmethodWithArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithArg" ):
                listener.exitArrayOmethodWithArg(self)


    class JsonRecursiveDescendAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDMLParser.DOT_, i)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllObjectMembers" ):
                listener.enterJsonRecursiveDescendAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllObjectMembers" ):
                listener.exitJsonRecursiveDescendAllObjectMembers(self)


    class XMLCreateNonSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDMLParser.CREATENONSCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateNonSchemaBasedXML" ):
                listener.enterXMLCreateNonSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateNonSchemaBasedXML" ):
                listener.exitXMLCreateNonSchemaBasedXML(self)


    class VariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableReference" ):
                listener.enterVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableReference" ):
                listener.exitVariableReference(self)


    class AddSubContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSub" ):
                listener.enterAddSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSub" ):
                listener.exitAddSub(self)


    class JsonObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)


    class JsonAllElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllElements" ):
                listener.enterJsonAllElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllElements" ):
                listener.exitJsonAllElements(self)


    class ArrayOextendContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OEXTEND(self):
            return self.getToken(TeradataSQLDMLParser.OEXTEND, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOextend" ):
                listener.enterArrayOextend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOextend" ):
                listener.exitArrayOextend(self)


    class ArrayArithmeticContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_ADD, 0)
        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_SUB, 0)
        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MUL, 0)
        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_DIV, 0)
        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MOD, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayArithmetic" ):
                listener.enterArrayArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayArithmetic" ):
                listener.exitArrayArithmetic(self)


    class UDTConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDMLParser.NEW, 0)
        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Udt_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SysudtlibContext,0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTConstructor" ):
                listener.enterUDTConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTConstructor" ):
                listener.exitUDTConstructor(self)


    class XMLTransformContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.xsl = None # Scalar_exprContext
            self.parammap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDMLParser.XMLTRANSFORM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLTransform" ):
                listener.enterXMLTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLTransform" ):
                listener.exitXMLTransform(self)


    class DateTimeExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.At_timezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeExpr" ):
                listener.enterDateTimeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeExpr" ):
                listener.exitDateTimeExpr(self)


    class ColumnNameContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)


    class ArrayOtrimContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.num_remove = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def OTRIM(self):
            return self.getToken(TeradataSQLDMLParser.OTRIM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOtrim" ):
                listener.enterArrayOtrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOtrim" ):
                listener.exitArrayOtrim(self)


    class CursorVariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cursor_variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Cursor_variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorVariableReference" ):
                listener.enterCursorVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorVariableReference" ):
                listener.exitCursorVariableReference(self)


    class ParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized" ):
                listener.enterParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized" ):
                listener.exitParenthesized(self)


    class JsonAsBsonTextContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDMLParser.ASBSONTEXT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBsonText" ):
                listener.enterJsonAsBsonText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBsonText" ):
                listener.exitJsonAsBsonText(self)


    class AttributeModificationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeModification" ):
                listener.enterAttributeModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeModification" ):
                listener.exitAttributeModification(self)


    class JsonCombineContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_or_object = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def COMBINE(self):
            return self.getToken(TeradataSQLDMLParser.COMBINE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonCombine" ):
                listener.enterJsonCombine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonCombine" ):
                listener.exitJsonCombine(self)


    class XMLIsDocumentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDMLParser.ISDOCUMENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsDocument" ):
                listener.enterXMLIsDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsDocument" ):
                listener.exitXMLIsDocument(self)


    class MacroParameterReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Macro_parameter_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroParameterReference" ):
                listener.enterMacroParameterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroParameterReference" ):
                listener.exitMacroParameterReference(self)


    class XMLIsContentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def ISCONTENT(self):
            return self.getToken(TeradataSQLDMLParser.ISCONTENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsContent" ):
                listener.enterXMLIsContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsContent" ):
                listener.exitXMLIsContent(self)


    class ArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElementReference" ):
                listener.enterArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElementReference" ):
                listener.exitArrayElementReference(self)


    class ArrayCardinalityContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def CARDINALITY(self):
            return self.getToken(TeradataSQLDMLParser.CARDINALITY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_CONCAT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCardinality" ):
                listener.enterArrayCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCardinality" ):
                listener.exitArrayCardinality(self)


    class CaseExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class JsonKeycountContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.depth = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.KEYCOUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonKeycount" ):
                listener.enterJsonKeycount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonKeycount" ):
                listener.exitJsonKeycount(self)


    class JsonAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllObjectMembers" ):
                listener.enterJsonAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllObjectMembers" ):
                listener.exitJsonAllObjectMembers(self)



    def scalar_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDMLParser.Scalar_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 402
        self.enterRecursionRule(localctx, 402, self.RULE_scalar_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDMLParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3639
                self.literal()
                pass

            elif la_ == 2:
                localctx = TeradataSQLDMLParser.UnaryPlusMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3640
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3641
                self.scalar_expr(70)
                pass

            elif la_ == 3:
                localctx = TeradataSQLDMLParser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3642
                self.case_expr()
                pass

            elif la_ == 4:
                localctx = TeradataSQLDMLParser.PartitioningExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3643
                self.partitioning_expr()
                pass

            elif la_ == 5:
                localctx = TeradataSQLDMLParser.ColumnNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3644
                self.column_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLDMLParser.IntervalExprParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3645
                self.interval_expr_parenthesized()
                pass

            elif la_ == 7:
                localctx = TeradataSQLDMLParser.VariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3646
                self.variable_reference()
                pass

            elif la_ == 8:
                localctx = TeradataSQLDMLParser.CursorVariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3647
                self.cursor_variable_reference()
                pass

            elif la_ == 9:
                localctx = TeradataSQLDMLParser.MacroParameterReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3648
                self.macro_parameter_reference()
                pass

            elif la_ == 10:
                localctx = TeradataSQLDMLParser.UDTConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3649
                self.match(TeradataSQLDMLParser.NEW)
                self.state = 3651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
                if la_ == 1:
                    self.state = 3650
                    self.sysudtlib()


                self.state = 3653
                self.udt_name()
                self.state = 3654
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 3655
                    self.scalar_expr(0)
                    self.state = 3660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 3656
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3657
                        self.scalar_expr(0)
                        self.state = 3662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3665
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                localctx = TeradataSQLDMLParser.JSONConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3667
                self.match(TeradataSQLDMLParser.NEW)
                self.state = 3668
                self.match(TeradataSQLDMLParser.JSON)
                self.state = 3669
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3670
                localctx.json_data = self.scalar_expr(0)
                self.state = 3673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3671
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3672
                    _la = self._input.LA(1)
                    if not(_la==556 or _la==735 or _la==1010 or _la==1015):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3675
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                localctx = TeradataSQLDMLParser.VariantTypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3677
                self.match(TeradataSQLDMLParser.NEW)
                self.state = 3678
                self.match(TeradataSQLDMLParser.VARIANT_TYPE)
                self.state = 3679
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3680
                self.scalar_expr(0)
                self.state = 3685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 3681
                        self.match(TeradataSQLDMLParser.AS)


                    self.state = 3684
                    self.alias_name()


                self.state = 3697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3687
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 3688
                    self.scalar_expr(0)
                    self.state = 3693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 3690
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==20:
                            self.state = 3689
                            self.match(TeradataSQLDMLParser.AS)


                        self.state = 3692
                        self.alias_name()


                    self.state = 3699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3700
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                localctx = TeradataSQLDMLParser.XMLConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3702
                self.match(TeradataSQLDMLParser.NEW)
                self.state = 3703
                self.match(TeradataSQLDMLParser.XML)
                self.state = 3704
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3705
                self.scalar_expr(0)
                self.state = 3706
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDMLParser.FunctionInvocationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3708
                self.function_invocation()
                pass

            elif la_ == 15:
                localctx = TeradataSQLDMLParser.ParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3709
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 3710
                self.scalar_expr(0)
                self.state = 3711
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDMLParser.ScalarSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3713
                self.subquery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 4121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,524,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4119
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDMLParser.ExponentiationContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3716
                        if not self.precpred(self._ctx, 69):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 69)")
                        self.state = 3717
                        self.match(TeradataSQLDMLParser.EXPONENTIATION)
                        self.state = 3718
                        self.scalar_expr(69)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDMLParser.MultDivContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3719
                        if not self.precpred(self._ctx, 68):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 68)")
                        self.state = 3720
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1219 or _la==1220):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3721
                        self.scalar_expr(69)
                        pass

                    elif la_ == 3:
                        localctx = TeradataSQLDMLParser.ModuloContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3722
                        if not self.precpred(self._ctx, 67):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 67)")
                        self.state = 3723
                        self.match(TeradataSQLDMLParser.MOD)
                        self.state = 3724
                        self.scalar_expr(67)
                        pass

                    elif la_ == 4:
                        localctx = TeradataSQLDMLParser.AddSubContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3725
                        if not self.precpred(self._ctx, 66):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 66)")
                        self.state = 3726
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3727
                        self.scalar_expr(67)
                        pass

                    elif la_ == 5:
                        localctx = TeradataSQLDMLParser.ConcatenationContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3728
                        if not self.precpred(self._ctx, 65):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 65)")
                        self.state = 3729
                        _la = self._input.LA(1)
                        if not(_la==1217 or _la==1218):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3730
                        self.scalar_expr(66)
                        pass

                    elif la_ == 6:
                        localctx = TeradataSQLDMLParser.PeriodIntersectContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3731
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 3732
                        self.match(TeradataSQLDMLParser.P_INTERSECT)
                        self.state = 3733
                        self.scalar_expr(58)
                        pass

                    elif la_ == 7:
                        localctx = TeradataSQLDMLParser.PeriodDiffContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3734
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 3735
                        _la = self._input.LA(1)
                        if not(_la==736 or _la==876):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3736
                        self.scalar_expr(57)
                        pass

                    elif la_ == 8:
                        localctx = TeradataSQLDMLParser.DateTimeExprContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3737
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 3738
                        self.at_timezone()
                        pass

                    elif la_ == 9:
                        localctx = TeradataSQLDMLParser.IntervalExprContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3739
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 3740
                        self.match(TeradataSQLDMLParser.MINUS_SIGN)
                        self.state = 3741
                        self.scalar_expr(0)
                        self.state = 3742
                        self.interval_expr_start_end_phrase()
                        pass

                    elif la_ == 10:
                        localctx = TeradataSQLDMLParser.AttributeModificationContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3744
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 3746 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 3745
                                self.attribute_modification()

                            else:
                                raise NoViableAltException(self)
                            self.state = 3748 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,499,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = TeradataSQLDMLParser.JsonObjectMemberContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3750
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 3751
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3752
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 12:
                        localctx = TeradataSQLDMLParser.JsonAllObjectMembersContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3753
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 3754
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3755
                        self.match(TeradataSQLDMLParser.MUL_SIGN)
                        pass

                    elif la_ == 13:
                        localctx = TeradataSQLDMLParser.JsonAllElementsContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3756
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 3757
                        self.match(TeradataSQLDMLParser.OPEN_SQ_BRACKET)
                        self.state = 3758
                        self.match(TeradataSQLDMLParser.MUL_SIGN)
                        self.state = 3759
                        self.match(TeradataSQLDMLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = TeradataSQLDMLParser.JsonSliceContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3760
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 3761
                        self.match(TeradataSQLDMLParser.OPEN_SQ_BRACKET)
                        self.state = 3762
                        localctx.from_index = self.integer_literal()
                        self.state = 3763
                        self.match(TeradataSQLDMLParser.COLON)
                        self.state = 3764
                        localctx.to_index = self.integer_literal()
                        self.state = 3767
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 3765
                            self.match(TeradataSQLDMLParser.COLON)
                            self.state = 3766
                            localctx.step_size = self.integer_literal()


                        self.state = 3769
                        self.match(TeradataSQLDMLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = TeradataSQLDMLParser.JsonRecursiveDescendObjectMemberContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3771
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 3772
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3773
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3774
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 16:
                        localctx = TeradataSQLDMLParser.JsonRecursiveDescendAllObjectMembersContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3775
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 3776
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3777
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3778
                        self.match(TeradataSQLDMLParser.MUL_SIGN)
                        pass

                    elif la_ == 17:
                        localctx = TeradataSQLDMLParser.JsonRecursiveDescendArrayElementReferenceContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3779
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 3780
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3781
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3782
                        self.match(TeradataSQLDMLParser.OPEN_SQ_BRACKET)
                        self.state = 3783
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 3784
                        self.match(TeradataSQLDMLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 18:
                        localctx = TeradataSQLDMLParser.JsonRecursiveDescendAllArrayElementsContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3786
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 3787
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3788
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3789
                        self.match(TeradataSQLDMLParser.OPEN_SQ_BRACKET)
                        self.state = 3790
                        self.match(TeradataSQLDMLParser.MUL_SIGN)
                        self.state = 3791
                        self.match(TeradataSQLDMLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 19:
                        localctx = TeradataSQLDMLParser.JsonRecursiveDescendSliceContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3792
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 3793
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3794
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3795
                        self.match(TeradataSQLDMLParser.OPEN_SQ_BRACKET)
                        self.state = 3796
                        localctx.from_index = self.integer_literal()
                        self.state = 3797
                        self.match(TeradataSQLDMLParser.COLON)
                        self.state = 3798
                        localctx.to_index = self.integer_literal()
                        self.state = 3801
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 3799
                            self.match(TeradataSQLDMLParser.COLON)
                            self.state = 3800
                            localctx.step_size = self.integer_literal()


                        self.state = 3803
                        self.match(TeradataSQLDMLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 20:
                        localctx = TeradataSQLDMLParser.JsonAsBsonContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3805
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 3806
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3807
                        self.match(TeradataSQLDMLParser.ASBSON)
                        self.state = 3808
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3810
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                            self.state = 3809
                            localctx.validation_specification = self.char_string_literal()


                        self.state = 3812
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 21:
                        localctx = TeradataSQLDMLParser.JsonAsBsonTextContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3813
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 3814
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3815
                        self.match(TeradataSQLDMLParser.ASBSONTEXT)
                        self.state = 3816
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3817
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 22:
                        localctx = TeradataSQLDMLParser.JsonCombineContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3818
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 3819
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3820
                        self.match(TeradataSQLDMLParser.COMBINE)
                        self.state = 3821
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3822
                        self.scalar_expr(0)
                        self.state = 3825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3823
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 3824
                            localctx.array_or_object = self.char_string_literal()


                        self.state = 3827
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 23:
                        localctx = TeradataSQLDMLParser.JsonExistValueContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3829
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 3830
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3831
                        self.match(TeradataSQLDMLParser.EXISTVALUE)
                        self.state = 3832
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3833
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3834
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 24:
                        localctx = TeradataSQLDMLParser.JsonExtractContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3836
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 3837
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3838
                        self.match(TeradataSQLDMLParser.JSONEXTRACT)
                        self.state = 3839
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3840
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3841
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 25:
                        localctx = TeradataSQLDMLParser.JsonExtractValueContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3843
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 3844
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3845
                        self.match(TeradataSQLDMLParser.JSONEXTRACTVALUE)
                        self.state = 3846
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3847
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3848
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 26:
                        localctx = TeradataSQLDMLParser.JsonExtractLargeValueContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3850
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 3851
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3852
                        self.match(TeradataSQLDMLParser.JSONEXTRACTLARGEVALUE)
                        self.state = 3853
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3854
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3855
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 27:
                        localctx = TeradataSQLDMLParser.JsonKeycountContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3857
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 3858
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3859
                        self.match(TeradataSQLDMLParser.KEYCOUNT)
                        self.state = 3860
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3861
                        localctx.depth = self.integer_literal()
                        self.state = 3862
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 28:
                        localctx = TeradataSQLDMLParser.JsonMetadataContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3864
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 3865
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3866
                        self.match(TeradataSQLDMLParser.METADATA)
                        self.state = 3867
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3868
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 29:
                        localctx = TeradataSQLDMLParser.JsonMetadataContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3869
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 3870
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3871
                        self.match(TeradataSQLDMLParser.STORAGE_SIZE)
                        self.state = 3872
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3873
                        localctx.storage_format = self.char_string_literal()
                        self.state = 3874
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 30:
                        localctx = TeradataSQLDMLParser.XMLCreateSchemaBasedXMLContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3876
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 3877
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3878
                        self.match(TeradataSQLDMLParser.CREATESCHEMABASEDXML)
                        self.state = 3879
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3880
                        localctx.schema = self.scalar_expr(0)
                        self.state = 3881
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 31:
                        localctx = TeradataSQLDMLParser.XMLCreateNonSchemaBasedXMLContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3883
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 3884
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3885
                        self.match(TeradataSQLDMLParser.CREATENONSCHEMABASEDXML)
                        self.state = 3886
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3887
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 32:
                        localctx = TeradataSQLDMLParser.XMLExistNodeContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3888
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 3889
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3890
                        self.match(TeradataSQLDMLParser.EXISTSNODE)
                        self.state = 3891
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3895
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
                        if la_ == 1:
                            self.state = 3892
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 3893
                            self.match(TeradataSQLDMLParser.COMMA)


                        self.state = 3897
                        localctx.query = self.scalar_expr(0)
                        self.state = 3898
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3899
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 3900
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 33:
                        localctx = TeradataSQLDMLParser.XMLIsContentContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3902
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 3903
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3904
                        self.match(TeradataSQLDMLParser.ISCONTENT)
                        self.state = 3905
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3906
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 34:
                        localctx = TeradataSQLDMLParser.XMLIsDocumentContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3907
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 3908
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3909
                        self.match(TeradataSQLDMLParser.ISDOCUMENT)
                        self.state = 3910
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3911
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 35:
                        localctx = TeradataSQLDMLParser.XMLIsSchemaValidContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3912
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 3913
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3914
                        self.match(TeradataSQLDMLParser.ISSCHEMAVALID)
                        self.state = 3915
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3916
                        localctx.schema = self.scalar_expr(0)
                        self.state = 3917
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3918
                        localctx.elem_decl = self.scalar_expr(0)
                        self.state = 3919
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3920
                        localctx.ns = self.scalar_expr(0)
                        self.state = 3921
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 36:
                        localctx = TeradataSQLDMLParser.XMLIsSchemaValidatedContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3923
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 3924
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3925
                        self.match(TeradataSQLDMLParser.ISSCHEMAVALIDATED)
                        self.state = 3926
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3927
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 37:
                        localctx = TeradataSQLDMLParser.XMLExtractContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3928
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 3929
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3930
                        self.match(TeradataSQLDMLParser.XMLEXTRACT)
                        self.state = 3931
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3935
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
                        if la_ == 1:
                            self.state = 3932
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 3933
                            self.match(TeradataSQLDMLParser.COMMA)


                        self.state = 3937
                        localctx.query = self.scalar_expr(0)
                        self.state = 3938
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3939
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 3940
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 38:
                        localctx = TeradataSQLDMLParser.XMLTransformContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3942
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 3943
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3944
                        self.match(TeradataSQLDMLParser.XMLTRANSFORM)
                        self.state = 3945
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3946
                        localctx.xsl = self.scalar_expr(0)
                        self.state = 3947
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 3948
                        localctx.parammap = self.scalar_expr(0)
                        self.state = 3949
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 39:
                        localctx = TeradataSQLDMLParser.ArrayElementReferenceContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3951
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 3952
                        self.match(TeradataSQLDMLParser.OPEN_SQ_BRACKET)
                        self.state = 3953
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 3958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 3954
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 3955
                            localctx._integer_literal = self.integer_literal()
                            localctx.index_value.append(localctx._integer_literal)
                            self.state = 3960
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3961
                        self.match(TeradataSQLDMLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 40:
                        localctx = TeradataSQLDMLParser.ArrayCardinalityContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3963
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 3964
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3965
                        self.match(TeradataSQLDMLParser.CARDINALITY)
                        self.state = 3966
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3968
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3967
                            self.array_scope_reference()


                        self.state = 3970
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 41:
                        localctx = TeradataSQLDMLParser.ArrayCardinalityContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3971
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 3972
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3973
                        self.match(TeradataSQLDMLParser.ARRAY_CONCAT)
                        self.state = 3974
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3975
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3978
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3976
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 3977
                            self.array_scope_reference()


                        self.state = 3980
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 42:
                        localctx = TeradataSQLDMLParser.ArrayComparisonContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3982
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 3983
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3984
                        _la = self._input.LA(1)
                        if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3985
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3986
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3989
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3987
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 3988
                            self.array_scope_reference()


                        self.state = 3991
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 43:
                        localctx = TeradataSQLDMLParser.ArrayArithmeticContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3993
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 3994
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 3995
                        _la = self._input.LA(1)
                        if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3996
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 3997
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 4000
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3998
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 3999
                            self.array_scope_reference()


                        self.state = 4002
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 44:
                        localctx = TeradataSQLDMLParser.ArrayAggregationContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4004
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 4005
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4006
                        _la = self._input.LA(1)
                        if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4007
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4009
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4008
                            self.array_scope_reference()


                        self.state = 4011
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 45:
                        localctx = TeradataSQLDMLParser.ArrayAggregationContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4012
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 4013
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4014
                        self.match(TeradataSQLDMLParser.ARRAY_COUNT_DISTINCT)
                        self.state = 4015
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4021
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4016
                            self.array_scope_reference()
                            self.state = 4019
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 4017
                                self.match(TeradataSQLDMLParser.COMMA)
                                self.state = 4018
                                localctx.matching_expr = self.scalar_expr(0)




                        self.state = 4023
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 46:
                        localctx = TeradataSQLDMLParser.ArrayGetContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4024
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 4025
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4026
                        self.match(TeradataSQLDMLParser.ARRAY_GET)
                        self.state = 4027
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4028
                        localctx.array_index = self.scalar_expr(0)
                        self.state = 4029
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 47:
                        localctx = TeradataSQLDMLParser.ArrayGetContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4031
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 4032
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4033
                        self.match(TeradataSQLDMLParser.ARRAY_COMPARE)
                        self.state = 4034
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4035
                        localctx.other_expr = self.scalar_expr(0)
                        self.state = 4042
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 4036
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 4037
                            self.array_scope_reference()
                            self.state = 4040
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 4038
                                self.match(TeradataSQLDMLParser.COMMA)
                                self.state = 4039
                                localctx.nulls_equal_flag = self.integer_literal()




                        self.state = 4044
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 48:
                        localctx = TeradataSQLDMLParser.ArrayUpdateContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4046
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 4047
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4048
                        self.match(TeradataSQLDMLParser.ARRAY_UPDATE)
                        self.state = 4049
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4050
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 4056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 4051
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 4054
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                            if la_ == 1:
                                self.state = 4052
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 4053
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 4058
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 49:
                        localctx = TeradataSQLDMLParser.ArrayUpdateStrideContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4060
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 4061
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4062
                        self.match(TeradataSQLDMLParser.ARRAY_UPDATE_STRIDE)
                        self.state = 4063
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4064
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 4065
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 4066
                        localctx.stride = self.integer_literal()
                        self.state = 4072
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 4067
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 4070
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                            if la_ == 1:
                                self.state = 4068
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 4069
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 4074
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 50:
                        localctx = TeradataSQLDMLParser.ArrayOmethodWithArgContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4076
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 4077
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4078
                        _la = self._input.LA(1)
                        if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4079
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4080
                        self.scalar_expr(0)
                        self.state = 4081
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 51:
                        localctx = TeradataSQLDMLParser.ArrayOmethodWithoudArgsContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4083
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 4084
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4085
                        _la = self._input.LA(1)
                        if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 179) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4086
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4087
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 52:
                        localctx = TeradataSQLDMLParser.ArrayOextendContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4088
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 4089
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4090
                        self.match(TeradataSQLDMLParser.OEXTEND)
                        self.state = 4091
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4092
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 53:
                        localctx = TeradataSQLDMLParser.ArrayOtrimContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4093
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 4094
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4095
                        self.match(TeradataSQLDMLParser.OTRIM)
                        self.state = 4096
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4098
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4097
                            localctx.num_remove = self.integer_literal()


                        self.state = 4100
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 54:
                        localctx = TeradataSQLDMLParser.UDTMethodInvocationContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4101
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 4102
                        self.match(TeradataSQLDMLParser.DOT_)
                        self.state = 4103
                        self.method_name()
                        self.state = 4104
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4113
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                            self.state = 4105
                            self.scalar_expr(0)
                            self.state = 4110
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1208:
                                self.state = 4106
                                self.match(TeradataSQLDMLParser.COMMA)
                                self.state = 4107
                                self.scalar_expr(0)
                                self.state = 4112
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 4115
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)
                        pass

                    elif la_ == 55:
                        localctx = TeradataSQLDMLParser.DataTypeConversionContext(self, TeradataSQLDMLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4117
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 4118
                        self.teradata_type_conversion()
                        pass

             
                self.state = 4123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,524,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def tuple_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Tuple_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Tuple_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = TeradataSQLDMLParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4124
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 4125
            self.tuple_attribute()
            self.state = 4128 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4126
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4127
                self.tuple_attribute()
                self.state = 4130 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 4132
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_tuple_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_attribute" ):
                listener.enterTuple_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_attribute" ):
                listener.exitTuple_attribute(self)




    def tuple_attribute(self):

        localctx = TeradataSQLDMLParser.Tuple_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_tuple_attribute)
        self._la = 0 # Token type
        try:
            self.state = 4149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4134
                self.scalar_expr(0)
                self.state = 4139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4136
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 4135
                        self.match(TeradataSQLDMLParser.AS)


                    self.state = 4138
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4141
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4142
                self.scalar_expr(0)
                self.state = 4144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4143
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 4146
                self.alias_name()
                self.state = 4147
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valued_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Valued_case_exprContext,0)


        def searched_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Searched_case_exprContext,0)


        def coalesce_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Coalesce_exprContext,0)


        def nullif_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nullif_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = TeradataSQLDMLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_case_expr)
        try:
            self.state = 4155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4151
                self.valued_case_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4152
                self.searched_case_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4153
                self.coalesce_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4154
                self.nullif_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valued_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDMLParser.CASE, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def END(self):
            return self.getToken(TeradataSQLDMLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDMLParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.THEN)
            else:
                return self.getToken(TeradataSQLDMLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDMLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_valued_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValued_case_expr" ):
                listener.enterValued_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValued_case_expr" ):
                listener.exitValued_case_expr(self)




    def valued_case_expr(self):

        localctx = TeradataSQLDMLParser.Valued_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_valued_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4157
            self.match(TeradataSQLDMLParser.CASE)
            self.state = 4158
            self.scalar_expr(0)
            self.state = 4164 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4159
                self.match(TeradataSQLDMLParser.WHEN)
                self.state = 4160
                self.scalar_expr(0)
                self.state = 4161
                self.match(TeradataSQLDMLParser.THEN)
                self.state = 4162
                self.scalar_expr(0)
                self.state = 4166 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 4170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 4168
                self.match(TeradataSQLDMLParser.ELSE)
                self.state = 4169
                self.scalar_expr(0)


            self.state = 4172
            self.match(TeradataSQLDMLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDMLParser.CASE, 0)

        def END(self):
            return self.getToken(TeradataSQLDMLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDMLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.THEN)
            else:
                return self.getToken(TeradataSQLDMLParser.THEN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def ELSE(self):
            return self.getToken(TeradataSQLDMLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_searched_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_expr" ):
                listener.enterSearched_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_expr" ):
                listener.exitSearched_case_expr(self)




    def searched_case_expr(self):

        localctx = TeradataSQLDMLParser.Searched_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_searched_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4174
            self.match(TeradataSQLDMLParser.CASE)
            self.state = 4180 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4175
                self.match(TeradataSQLDMLParser.WHEN)
                self.state = 4176
                self.logical_expr(0)
                self.state = 4177
                self.match(TeradataSQLDMLParser.THEN)
                self.state = 4178
                self.scalar_expr(0)
                self.state = 4182 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 4186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 4184
                self.match(TeradataSQLDMLParser.ELSE)
                self.state = 4185
                self.scalar_expr(0)


            self.state = 4188
            self.match(TeradataSQLDMLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coalesce_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(TeradataSQLDMLParser.COALESCE, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_coalesce_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce_expr" ):
                listener.enterCoalesce_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce_expr" ):
                listener.exitCoalesce_expr(self)




    def coalesce_expr(self):

        localctx = TeradataSQLDMLParser.Coalesce_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_coalesce_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4190
            self.match(TeradataSQLDMLParser.COALESCE)
            self.state = 4191
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nullif_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(TeradataSQLDMLParser.NULLIF, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_nullif_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullif_expr" ):
                listener.enterNullif_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullif_expr" ):
                listener.exitNullif_expr(self)




    def nullif_expr(self):

        localctx = TeradataSQLDMLParser.Nullif_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_nullif_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4193
            self.match(TeradataSQLDMLParser.NULLIF)
            self.state = 4194
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 4195
            self.scalar_expr(0)
            self.state = 4196
            self.match(TeradataSQLDMLParser.COMMA)
            self.state = 4197
            self.scalar_expr(0)
            self.state = 4198
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MINUS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_interval_expr_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_base" ):
                listener.enterInterval_expr_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_base" ):
                listener.exitInterval_expr_base(self)




    def interval_expr_base(self):

        localctx = TeradataSQLDMLParser.Interval_expr_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_interval_expr_base)
        try:
            self.state = 4210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4200
                self.scalar_expr(0)
                self.state = 4201
                self.match(TeradataSQLDMLParser.MINUS_SIGN)
                self.state = 4202
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4204
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4205
                self.scalar_expr(0)
                self.state = 4206
                self.match(TeradataSQLDMLParser.MINUS_SIGN)
                self.state = 4207
                self.scalar_expr(0)
                self.state = 4208
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def interval_expr_base(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_expr_baseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_expr_start_end_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_interval_expr_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_parenthesized" ):
                listener.enterInterval_expr_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_parenthesized" ):
                listener.exitInterval_expr_parenthesized(self)




    def interval_expr_parenthesized(self):

        localctx = TeradataSQLDMLParser.Interval_expr_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_interval_expr_parenthesized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4212
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 4213
            self.interval_expr_base()
            self.state = 4214
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 4215
            self.interval_expr_start_end_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_start_end_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_seconds_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDMLParser.YEAR, 0)

        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.MONTH)
            else:
                return self.getToken(TeradataSQLDMLParser.MONTH, i)

        def DAY(self):
            return self.getToken(TeradataSQLDMLParser.DAY, 0)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.HOUR)
            else:
                return self.getToken(TeradataSQLDMLParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.MINUTE)
            else:
                return self.getToken(TeradataSQLDMLParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.SECOND)
            else:
                return self.getToken(TeradataSQLDMLParser.SECOND, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def TO(self):
            return self.getToken(TeradataSQLDMLParser.TO, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_interval_expr_start_end_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_start_end_phrase" ):
                listener.enterInterval_expr_start_end_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_start_end_phrase" ):
                listener.exitInterval_expr_start_end_phrase(self)




    def interval_expr_start_end_phrase(self):

        localctx = TeradataSQLDMLParser.Interval_expr_start_end_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_interval_expr_start_end_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4217
            _la = self._input.LA(1)
            if not(_la==106 or _la==185 or _la==248 or _la==258 or _la==368 or _la==478):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
            if la_ == 1:
                self.state = 4218
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4219
                localctx.precision = self.integer_literal()
                self.state = 4222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4220
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4221
                    localctx.fractional_seconds_precision = self.integer_literal()


                self.state = 4224
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 4236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
            if la_ == 1:
                self.state = 4228
                self.match(TeradataSQLDMLParser.TO)
                self.state = 4229
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 4230
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 4231
                    localctx.fractional_seconds_precision = self.integer_literal()
                    self.state = 4232
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Aggregate_functionContext,0)


        def analytic_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Analytic_functionContext,0)


        def arithmetic_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Arithmetic_functionContext,0)


        def array_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Array_functionContext,0)


        def attribute_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_functionContext,0)


        def byte_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Byte_functionContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Builtin_functionContext,0)


        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Calendar_functionContext,0)


        def comparison_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Comparison_functionContext,0)


        def compression_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Compression_functionContext,0)


        def conversion_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Conversion_functionContext,0)


        def date_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Date_functionContext,0)


        def hash_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hash_functionContext,0)


        def lob_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Lob_functionContext,0)


        def map_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Map_functionContext,0)


        def nvl_funtion(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Nvl_funtionContext,0)


        def period_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Period_functionContext,0)


        def regexp_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Regexp_functionContext,0)


        def string_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.String_functionContext,0)


        def json_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Json_functionContext,0)


        def xml_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_functionContext,0)


        def other_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Other_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_invocation" ):
                listener.enterFunction_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_invocation" ):
                listener.exitFunction_invocation(self)




    def function_invocation(self):

        localctx = TeradataSQLDMLParser.Function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_function_invocation)
        try:
            self.state = 4260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4238
                self.aggregate_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4239
                self.analytic_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4240
                self.arithmetic_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4241
                self.array_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4242
                self.attribute_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4243
                self.byte_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4244
                self.builtin_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4245
                self.calendar_function()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4246
                self.comparison_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4247
                self.compression_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4248
                self.conversion_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4249
                self.date_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4250
                self.hash_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4251
                self.lob_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4252
                self.map_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4253
                self.nvl_funtion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4254
                self.period_function()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4255
                self.regexp_function()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 4256
                self.string_function()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4257
                self.json_function()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4258
                self.xml_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4259
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_aggregate_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ListAggContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDMLParser.LISTAGG, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAgg" ):
                listener.enterListAgg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAgg" ):
                listener.exitListAgg(self)


    class AggOneArgContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def AVERAGE(self):
            return self.getToken(TeradataSQLDMLParser.AVERAGE, 0)
        def AVG(self):
            return self.getToken(TeradataSQLDMLParser.AVG, 0)
        def AVE(self):
            return self.getToken(TeradataSQLDMLParser.AVE, 0)
        def KURTOSIS(self):
            return self.getToken(TeradataSQLDMLParser.KURTOSIS, 0)
        def MAXIMUM(self):
            return self.getToken(TeradataSQLDMLParser.MAXIMUM, 0)
        def MAX(self):
            return self.getToken(TeradataSQLDMLParser.MAX, 0)
        def MIN(self):
            return self.getToken(TeradataSQLDMLParser.MIN, 0)
        def MINIMUM(self):
            return self.getToken(TeradataSQLDMLParser.MINIMUM, 0)
        def SKEW(self):
            return self.getToken(TeradataSQLDMLParser.SKEW, 0)
        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDMLParser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDMLParser.STDDEV_SAMP, 0)
        def SUM(self):
            return self.getToken(TeradataSQLDMLParser.SUM, 0)
        def VAR_POP(self):
            return self.getToken(TeradataSQLDMLParser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDMLParser.VAR_SAMP, 0)
        def DISTINCT(self):
            return self.getToken(TeradataSQLDMLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggOneArg" ):
                listener.enterAggOneArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggOneArg" ):
                listener.exitAggOneArg(self)


    class AggTwoArgsContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def CORR(self):
            return self.getToken(TeradataSQLDMLParser.CORR, 0)
        def COVAR_POP(self):
            return self.getToken(TeradataSQLDMLParser.COVAR_POP, 0)
        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDMLParser.COVAR_SAMP, 0)
        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDMLParser.REGR_AVGX, 0)
        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDMLParser.REGR_AVGY, 0)
        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDMLParser.REGR_COUNT, 0)
        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDMLParser.REGR_INTERCEPT, 0)
        def REGR_R2(self):
            return self.getToken(TeradataSQLDMLParser.REGR_R2, 0)
        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SLOPE, 0)
        def REGR_SXX(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SXX, 0)
        def REGR_SXY(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SXY, 0)
        def REGR_SYY(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SYY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggTwoArgs" ):
                listener.enterAggTwoArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggTwoArgs" ):
                listener.exitAggTwoArgs(self)


    class GroupingContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(TeradataSQLDMLParser.GROUPING, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping" ):
                listener.enterGrouping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping" ):
                listener.exitGrouping(self)


    class AggCountContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDMLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(TeradataSQLDMLParser.COUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)

        def DISTINCT(self):
            return self.getToken(TeradataSQLDMLParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(TeradataSQLDMLParser.UNIQUE, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggCount" ):
                listener.enterAggCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggCount" ):
                listener.exitAggCount(self)



    def aggregate_function(self):

        localctx = TeradataSQLDMLParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 4297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 213, 238, 239, 244, 246, 380, 396, 397, 403, 461, 462]:
                localctx = TeradataSQLDMLParser.AggOneArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4262
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 10838081537) != 0) or ((((_la - 380)) & ~0x3f) == 0 and ((1 << (_la - 380)) & 8585217) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4263
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==121:
                    self.state = 4264
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4267
                self.scalar_expr(0)
                self.state = 4268
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [80, 84, 85, 327, 328, 329, 330, 331, 332, 333, 334, 335]:
                localctx = TeradataSQLDMLParser.AggTwoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4270
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4271
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4272
                self.scalar_expr(0)
                self.state = 4273
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4274
                self.scalar_expr(0)
                self.state = 4275
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [83]:
                localctx = TeradataSQLDMLParser.AggCountContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4277
                self.match(TeradataSQLDMLParser.COUNT)
                self.state = 4278
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 4279
                    self.match(TeradataSQLDMLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 121, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 448, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 4281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==121 or _la==448:
                        self.state = 4280
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==121 or _la==448):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4283
                    self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4286
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [175]:
                localctx = TeradataSQLDMLParser.GroupingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4287
                self.match(TeradataSQLDMLParser.GROUPING)
                self.state = 4288
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4289
                self.scalar_expr(0)
                self.state = 4290
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1081]:
                localctx = TeradataSQLDMLParser.ListAggContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4292
                self.match(TeradataSQLDMLParser.LISTAGG)
                self.state = 4293
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4294
                self.scalar_expr(0)
                self.state = 4295
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value_expr = None # Scalar_exprContext
            self.offset_value = None # Scalar_exprContext
            self.default_value_expr = None # Scalar_exprContext
            self.width = None # Integer_literalContext
            self.quantile_literal = None # Integer_literalContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_specContext,0)


        def AVERAGE(self):
            return self.getToken(TeradataSQLDMLParser.AVERAGE, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDMLParser.AVG, 0)

        def AVE(self):
            return self.getToken(TeradataSQLDMLParser.AVE, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLDMLParser.MAXIMUM, 0)

        def MAX(self):
            return self.getToken(TeradataSQLDMLParser.MAX, 0)

        def MIN(self):
            return self.getToken(TeradataSQLDMLParser.MIN, 0)

        def MINIMUM(self):
            return self.getToken(TeradataSQLDMLParser.MINIMUM, 0)

        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDMLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDMLParser.STDDEV_SAMP, 0)

        def SUM(self):
            return self.getToken(TeradataSQLDMLParser.SUM, 0)

        def VAR_POP(self):
            return self.getToken(TeradataSQLDMLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDMLParser.VAR_SAMP, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def CORR(self):
            return self.getToken(TeradataSQLDMLParser.CORR, 0)

        def COVAR_POP(self):
            return self.getToken(TeradataSQLDMLParser.COVAR_POP, 0)

        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDMLParser.COVAR_SAMP, 0)

        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDMLParser.REGR_AVGX, 0)

        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDMLParser.REGR_AVGY, 0)

        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDMLParser.REGR_COUNT, 0)

        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDMLParser.REGR_INTERCEPT, 0)

        def REGR_R2(self):
            return self.getToken(TeradataSQLDMLParser.REGR_R2, 0)

        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SLOPE, 0)

        def REGR_SXX(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SXX, 0)

        def REGR_SXY(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SXY, 0)

        def REGR_SYY(self):
            return self.getToken(TeradataSQLDMLParser.REGR_SYY, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLDMLParser.COUNT, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def CSUM(self):
            return self.getToken(TeradataSQLDMLParser.CSUM, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_asc_desc_onlyContext,i)


        def window_spec_without_rows(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_spec_without_rowsContext,0)


        def CUME_DIST(self):
            return self.getToken(TeradataSQLDMLParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDMLParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(TeradataSQLDMLParser.PERCENT_RANK, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDMLParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDMLParser.LAST_VALUE, 0)

        def ignore_respect_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Ignore_respect_nullsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Ignore_respect_nullsContext,i)


        def LAG(self):
            return self.getToken(TeradataSQLDMLParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDMLParser.LEAD, 0)

        def MAVG(self):
            return self.getToken(TeradataSQLDMLParser.MAVG, 0)

        def MDIFF(self):
            return self.getToken(TeradataSQLDMLParser.MDIFF, 0)

        def MSUM(self):
            return self.getToken(TeradataSQLDMLParser.MSUM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def MEDIAN(self):
            return self.getToken(TeradataSQLDMLParser.MEDIAN, 0)

        def MLINREG(self):
            return self.getToken(TeradataSQLDMLParser.MLINREG, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDMLParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDMLParser.GROUP, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDMLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDMLParser.PERCENTILE_DISC, 0)

        def QUANTILE(self):
            return self.getToken(TeradataSQLDMLParser.QUANTILE, 0)

        def RANK(self):
            return self.getToken(TeradataSQLDMLParser.RANK, 0)

        def window_spec_with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_spec_with_tiesContext,0)


        def ROW_NUMBER(self):
            return self.getToken(TeradataSQLDMLParser.ROW_NUMBER, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDMLParser.LISTAGG, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_analytic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_function" ):
                listener.enterAnalytic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_function" ):
                listener.exitAnalytic_function(self)




    def analytic_function(self):

        localctx = TeradataSQLDMLParser.Analytic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_analytic_function)
        self._la = 0 # Token type
        try:
            self.state = 4448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4299
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 323) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & 131) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4300
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4301
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4302
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4303
                self.window_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4305
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4306
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4307
                self.scalar_expr(0)
                self.state = 4308
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4309
                self.scalar_expr(0)
                self.state = 4310
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4311
                self.window_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4313
                self.match(TeradataSQLDMLParser.COUNT)
                self.state = 4314
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4317
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 4315
                    self.match(TeradataSQLDMLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 4316
                    localctx.value_expr = self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4319
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4320
                self.window_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4321
                self.match(TeradataSQLDMLParser.CSUM)
                self.state = 4322
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4323
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4326 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4324
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4325
                    self.order_by_spec_asc_desc_only()
                    self.state = 4328 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4330
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4332
                _la = self._input.LA(1)
                if not(_la==301 or _la==603 or _la==630):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4333
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4334
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4335
                self.window_spec_without_rows()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4336
                _la = self._input.LA(1)
                if not(_la==673 or _la==734):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4337
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4338
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 4339
                    self.ignore_respect_nulls()


                self.state = 4342
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4343
                self.window_spec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4345
                _la = self._input.LA(1)
                if not(_la==730 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4346
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4347
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 4348
                    self.ignore_respect_nulls()


                self.state = 4357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4351
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4352
                    localctx.offset_value = self.scalar_expr(0)
                    self.state = 4355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4353
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 4354
                        localctx.default_value_expr = self.scalar_expr(0)




                self.state = 4359
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 4360
                    self.ignore_respect_nulls()


                self.state = 4363
                self.window_spec_without_rows()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4365
                _la = self._input.LA(1)
                if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 8388625) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4366
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4367
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4368
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4369
                localctx.width = self.integer_literal()
                self.state = 4372 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4370
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4371
                    self.order_by_spec_asc_desc_only()
                    self.state = 4374 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4376
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4378
                self.match(TeradataSQLDMLParser.MEDIAN)
                self.state = 4379
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4380
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4381
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4383
                self.match(TeradataSQLDMLParser.MLINREG)
                self.state = 4384
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4385
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4386
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4387
                localctx.width = self.integer_literal()
                self.state = 4388
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4389
                self.order_by_spec_asc_desc_only()
                self.state = 4390
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4392
                _la = self._input.LA(1)
                if not(_la==851 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4393
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4394
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4395
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4396
                self.match(TeradataSQLDMLParser.WITHIN)
                self.state = 4397
                self.match(TeradataSQLDMLParser.GROUP)
                self.state = 4398
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4399
                self.match(TeradataSQLDMLParser.ORDER)
                self.state = 4400
                self.match(TeradataSQLDMLParser.BY)
                self.state = 4401
                self.order_by_spec_full()
                self.state = 4406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4402
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4403
                    self.order_by_spec_full()
                    self.state = 4408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4409
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4411
                self.match(TeradataSQLDMLParser.QUANTILE)
                self.state = 4412
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4413
                localctx.quantile_literal = self.integer_literal()
                self.state = 4416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4414
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4415
                    self.order_by_spec_asc_desc_only()
                    self.state = 4418 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4420
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4422
                self.match(TeradataSQLDMLParser.RANK)
                self.state = 4423
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4424
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4425
                self.window_spec_with_ties()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4426
                self.match(TeradataSQLDMLParser.RANK)
                self.state = 4427
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4428
                self.order_by_spec_asc_desc_only()
                self.state = 4433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4429
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4430
                    self.order_by_spec_asc_desc_only()
                    self.state = 4435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4436
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4438
                self.match(TeradataSQLDMLParser.ROW_NUMBER)
                self.state = 4439
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4440
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4441
                self.window_spec_without_rows()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4442
                self.match(TeradataSQLDMLParser.LISTAGG)
                self.state = 4443
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4444
                self.scalar_expr(0)
                self.state = 4445
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 4446
                self.window_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def ABS(self):
            return self.getToken(TeradataSQLDMLParser.ABS, 0)

        def DEGREES(self):
            return self.getToken(TeradataSQLDMLParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(TeradataSQLDMLParser.RADIANS, 0)

        def EXP(self):
            return self.getToken(TeradataSQLDMLParser.EXP, 0)

        def SQRT(self):
            return self.getToken(TeradataSQLDMLParser.SQRT, 0)

        def COSH(self):
            return self.getToken(TeradataSQLDMLParser.COSH, 0)

        def SINH(self):
            return self.getToken(TeradataSQLDMLParser.SINH, 0)

        def TANH(self):
            return self.getToken(TeradataSQLDMLParser.TANH, 0)

        def ACOSH(self):
            return self.getToken(TeradataSQLDMLParser.ACOSH, 0)

        def ASINH(self):
            return self.getToken(TeradataSQLDMLParser.ASINH, 0)

        def ATANH(self):
            return self.getToken(TeradataSQLDMLParser.ATANH, 0)

        def LN(self):
            return self.getToken(TeradataSQLDMLParser.LN, 0)

        def LOG(self):
            return self.getToken(TeradataSQLDMLParser.LOG, 0)

        def NULLIFZERO(self):
            return self.getToken(TeradataSQLDMLParser.NULLIFZERO, 0)

        def ZEROIFNULL(self):
            return self.getToken(TeradataSQLDMLParser.ZEROIFNULL, 0)

        def COS(self):
            return self.getToken(TeradataSQLDMLParser.COS, 0)

        def SIN(self):
            return self.getToken(TeradataSQLDMLParser.SIN, 0)

        def TAN(self):
            return self.getToken(TeradataSQLDMLParser.TAN, 0)

        def ACOS(self):
            return self.getToken(TeradataSQLDMLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TeradataSQLDMLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TeradataSQLDMLParser.ATAN, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDMLParser.CEILING, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDMLParser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDMLParser.FLOOR, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDMLParser.SIGN, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def MOD(self):
            return self.getToken(TeradataSQLDMLParser.MOD, 0)

        def RANDOM(self):
            return self.getToken(TeradataSQLDMLParser.RANDOM, 0)

        def ATAN2(self):
            return self.getToken(TeradataSQLDMLParser.ATAN2, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDMLParser.POWER, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SyslibContext,0)


        def ROUND(self):
            return self.getToken(TeradataSQLDMLParser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDMLParser.TRUNC, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDMLParser.WIDTH, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDMLParser.BUCKET, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_arithmetic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_function" ):
                listener.enterArithmetic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_function" ):
                listener.exitArithmetic_function(self)




    def arithmetic_function(self):

        localctx = TeradataSQLDMLParser.Arithmetic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_arithmetic_function)
        self._la = 0 # Token type
        try:
            self.state = 4504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4450
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 180355272) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4294967299) != 0) or _la==147 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482049) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & 3458764513820540929) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 393217) != 0) or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4451
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4452
                self.scalar_expr(0)
                self.state = 4453
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4455
                    self.td_sysfnlib()


                self.state = 4458
                _la = self._input.LA(1)
                if not(_la==565 or _la==566 or _la==674 or _la==926):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4459
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4460
                self.scalar_expr(0)
                self.state = 4461
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4463
                _la = self._input.LA(1)
                if not(_la==26 or _la==251 or _la==319):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4464
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4465
                self.scalar_expr(0)
                self.state = 4466
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4467
                self.scalar_expr(0)
                self.state = 4468
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4470
                    self.syslib()


                self.state = 4473
                self.match(TeradataSQLDMLParser.POWER)
                self.state = 4474
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4475
                self.scalar_expr(0)
                self.state = 4476
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4477
                self.scalar_expr(0)
                self.state = 4478
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4480
                    self.td_sysfnlib()


                self.state = 4483
                _la = self._input.LA(1)
                if not(_la==894 or _la==1006):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4484
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4485
                self.scalar_expr(0)
                self.state = 4488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4486
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4487
                    self.scalar_expr(0)


                self.state = 4490
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4492
                self.match(TeradataSQLDMLParser.WIDTH)
                self.state = 4493
                self.match(TeradataSQLDMLParser.BUCKET)
                self.state = 4494
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4495
                self.scalar_expr(0)
                self.state = 4496
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4497
                self.scalar_expr(0)
                self.state = 4498
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4499
                self.scalar_expr(0)
                self.state = 4500
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4501
                self.scalar_expr(0)
                self.state = 4502
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element_value_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext
            self.array_expr_1 = None # Scalar_exprContext
            self.array_expr_2 = None # Scalar_exprContext
            self.matching_expr = None # Scalar_exprContext
            self.array_index = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.index_value_or_bound = None # Scalar_exprContext
            self.num_spaces = None # Scalar_exprContext
            self.num_elements = None # Scalar_exprContext

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_AGG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDMLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDMLParser.DESC, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDMLParser.CARDINALITY, 0)

        def array_scope_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Array_scope_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Array_scope_referenceContext,i)


        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_CONCAT, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GT, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_LT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_LE, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_EQ, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_NE, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_ADD, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_SUB, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MUL, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_DIV, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MOD, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_SUM, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_AVG, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_MIN, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_GET, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_COMPARE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_UPDATE_STRIDE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDMLParser.OEXISTS, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDMLParser.OPRIOR, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDMLParser.ONEXT, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.OCOUNT, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDMLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDMLParser.OLAST, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDMLParser.ODELETE, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDMLParser.OEXTEND, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDMLParser.OTRIM, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_array_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_function" ):
                listener.enterArray_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_function" ):
                listener.exitArray_function(self)




    def array_function(self):

        localctx = TeradataSQLDMLParser.Array_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_array_function)
        self._la = 0 # Token type
        try:
            self.state = 4719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,586,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4506
                    self.td_sysfnlib()


                self.state = 4509
                self.match(TeradataSQLDMLParser.ARRAY_AGG)
                self.state = 4510
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4511
                localctx.element_value_expr = self.scalar_expr(0)
                self.state = 4518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 4512
                    self.match(TeradataSQLDMLParser.ORDER)
                    self.state = 4513
                    self.match(TeradataSQLDMLParser.BY)
                    self.state = 4514
                    self.scalar_expr(0)
                    self.state = 4516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21 or _la==116:
                        self.state = 4515
                        _la = self._input.LA(1)
                        if not(_la==21 or _la==116):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 4520
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4521
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4522
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4524
                self.match(TeradataSQLDMLParser.CARDINALITY)
                self.state = 4525
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4526
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4527
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4528
                    self.array_scope_reference()
                    self.state = 4533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4534
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4536
                self.match(TeradataSQLDMLParser.ARRAY_CONCAT)
                self.state = 4537
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4538
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4539
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4540
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4541
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4542
                    self.array_scope_reference()
                    self.state = 4547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4548
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4550
                _la = self._input.LA(1)
                if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4551
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4552
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4553
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4554
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4555
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4556
                    self.array_scope_reference()
                    self.state = 4561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4562
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4564
                _la = self._input.LA(1)
                if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4565
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4566
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4567
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4568
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4569
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4570
                    self.array_scope_reference()
                    self.state = 4575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4576
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4578
                _la = self._input.LA(1)
                if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4579
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4580
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4581
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4582
                    self.array_scope_reference()
                    self.state = 4587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4588
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4590
                self.match(TeradataSQLDMLParser.ARRAY_COUNT_DISTINCT)
                self.state = 4591
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4592
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
                if la_ == 1:
                    self.state = 4597
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,570,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4593
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 4594
                            self.array_scope_reference() 
                        self.state = 4599
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,570,self._ctx)

                    self.state = 4600
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4601
                    localctx.matching_expr = self.scalar_expr(0)

                elif la_ == 2:
                    self.state = 4604 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4602
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 4603
                        self.array_scope_reference()
                        self.state = 4606 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break



                self.state = 4610
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4612
                self.match(TeradataSQLDMLParser.ARRAY_GET)
                self.state = 4613
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4614
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4615
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4616
                localctx.array_index = self.scalar_expr(0)
                self.state = 4617
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4619
                self.match(TeradataSQLDMLParser.ARRAY_COMPARE)
                self.state = 4620
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4621
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4622
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4623
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4626 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 4624
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 4625
                            self.array_scope_reference()

                        else:
                            raise NoViableAltException(self)
                        self.state = 4628 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,573,self._ctx)

                    self.state = 4630
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4631
                    localctx.nulls_equal_flag = self.integer_literal()


                self.state = 4635
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4637
                self.match(TeradataSQLDMLParser.ARRAY_UPDATE)
                self.state = 4638
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4639
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4640
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4641
                localctx.new_value = self.scalar_expr(0)
                self.state = 4650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
                if la_ == 1:
                    self.state = 4644 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4642
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 4643
                        self.array_scope_reference()
                        self.state = 4646 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 4648
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4649
                    localctx.array_index = self.scalar_expr(0)


                self.state = 4652
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4654
                self.match(TeradataSQLDMLParser.ARRAY_UPDATE_STRIDE)
                self.state = 4655
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4656
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4657
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4658
                localctx.new_value = self.scalar_expr(0)
                self.state = 4659
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4660
                localctx.stride = self.integer_literal()
                self.state = 4669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
                if la_ == 1:
                    self.state = 4663 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4661
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 4662
                        self.array_scope_reference()
                        self.state = 4665 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 4667
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4668
                    localctx.array_index = self.scalar_expr(0)


                self.state = 4671
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4673
                    self.td_sysfnlib()


                self.state = 4676
                _la = self._input.LA(1)
                if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4677
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4678
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4679
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4680
                localctx.index_value_or_bound = self.scalar_expr(0)
                self.state = 4681
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4683
                    self.td_sysfnlib()


                self.state = 4686
                _la = self._input.LA(1)
                if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 51) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4687
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4688
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4689
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4691
                    self.td_sysfnlib()


                self.state = 4694
                self.match(TeradataSQLDMLParser.OEXTEND)
                self.state = 4695
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4696
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4697
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4698
                    localctx.num_spaces = self.scalar_expr(0)
                    self.state = 4701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4699
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 4700
                        localctx.index_value_or_bound = self.scalar_expr(0)




                self.state = 4705
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4707
                    self.td_sysfnlib()


                self.state = 4710
                self.match(TeradataSQLDMLParser.OTRIM)
                self.state = 4711
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4712
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4713
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4714
                    localctx.num_elements = self.scalar_expr(0)


                self.state = 4717
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.character_set_name = None # LiteralContext

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.BIT_LENGTH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LiteralContext,0)


        def BYTE(self):
            return self.getToken(TeradataSQLDMLParser.BYTE, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLDMLParser.BYTES, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTER_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDMLParser.CHAR, 0)

        def CHARS(self):
            return self.getToken(TeradataSQLDMLParser.CHARS, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTER, 0)

        def CHARACTERS(self):
            return self.getToken(TeradataSQLDMLParser.CHARACTERS, 0)

        def MCHARACTERS(self):
            return self.getToken(TeradataSQLDMLParser.MCHARACTERS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDMLParser.DEFAULT, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def FORMAT(self):
            return self.getToken(TeradataSQLDMLParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDMLParser.TITLE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDMLParser.TYPE, 0)

        def OCTET_LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_attribute_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_function" ):
                listener.enterAttribute_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_function" ):
                listener.exitAttribute_function(self)




    def attribute_function(self):

        localctx = TeradataSQLDMLParser.Attribute_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_attribute_function)
        self._la = 0 # Token type
        try:
            self.state = 4761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [546]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4721
                self.match(TeradataSQLDMLParser.BIT_LENGTH)
                self.state = 4722
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4723
                self.scalar_expr(0)
                self.state = 4726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4724
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4725
                    localctx.character_set_name = self.literal()


                self.state = 4728
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [43, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4730
                _la = self._input.LA(1)
                if not(_la==43 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4731
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4732
                self.scalar_expr(0)
                self.state = 4733
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [52, 53, 55, 56, 57, 58, 240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4735
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 553942754166571008) != 0) or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4736
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4737
                self.scalar_expr(0)
                self.state = 4738
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4740
                self.match(TeradataSQLDMLParser.DEFAULT)
                self.state = 4745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
                if la_ == 1:
                    self.state = 4741
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 4742
                    self.column_name()
                    self.state = 4743
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)


                pass
            elif token in [161, 425, 437]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4747
                _la = self._input.LA(1)
                if not(_la==161 or _la==425 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4748
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4749
                self.scalar_expr(0)
                self.state = 4750
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4752
                self.match(TeradataSQLDMLParser.OCTET_LENGTH)
                self.state = 4753
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4754
                self.scalar_expr(0)
                self.state = 4757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4755
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4756
                    localctx.character_set_name = self.literal()


                self.state = 4759
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Byte_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITNOT(self):
            return self.getToken(TeradataSQLDMLParser.BITNOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def BITAND(self):
            return self.getToken(TeradataSQLDMLParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDMLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDMLParser.BITXOR, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDMLParser.GETBIT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDMLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDMLParser.ROTATERIGHT, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDMLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDMLParser.SHIFTRIGHT, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDMLParser.COUNTSET, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDMLParser.SETBIT, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDMLParser.SUBBITSTR, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDMLParser.TO_BYTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_byte_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByte_function" ):
                listener.enterByte_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByte_function" ):
                listener.exitByte_function(self)




    def byte_function(self):

        localctx = TeradataSQLDMLParser.Byte_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_byte_function)
        self._la = 0 # Token type
        try:
            self.state = 4827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,599,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4763
                    self.td_sysfnlib()


                self.state = 4766
                self.match(TeradataSQLDMLParser.BITNOT)
                self.state = 4767
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4768
                self.scalar_expr(0)
                self.state = 4769
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4771
                    self.td_sysfnlib()


                self.state = 4774
                _la = self._input.LA(1)
                if not(((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 13) != 0) or _la==682 or ((((_la - 892)) & ~0x3f) == 0 and ((1 << (_la - 892)) & 12884901891) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4775
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4776
                self.scalar_expr(0)
                self.state = 4777
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4778
                self.scalar_expr(0)
                self.state = 4779
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4781
                    self.td_sysfnlib()


                self.state = 4784
                self.match(TeradataSQLDMLParser.COUNTSET)
                self.state = 4785
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4786
                self.scalar_expr(0)
                self.state = 4789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4787
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4788
                    self.scalar_expr(0)


                self.state = 4791
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4793
                    self.td_sysfnlib()


                self.state = 4796
                self.match(TeradataSQLDMLParser.SETBIT)
                self.state = 4797
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4798
                self.scalar_expr(0)
                self.state = 4799
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4800
                self.scalar_expr(0)
                self.state = 4803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4801
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4802
                    self.scalar_expr(0)


                self.state = 4805
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4807
                    self.td_sysfnlib()


                self.state = 4810
                self.match(TeradataSQLDMLParser.SUBBITSTR)
                self.state = 4811
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4812
                self.scalar_expr(0)
                self.state = 4813
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4814
                self.scalar_expr(0)
                self.state = 4815
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4816
                self.scalar_expr(0)
                self.state = 4817
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4819
                    self.td_sysfnlib()


                self.state = 4822
                self.match(TeradataSQLDMLParser.TO_BYTE)
                self.state = 4823
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4824
                self.scalar_expr(0)
                self.state = 4825
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDMLParser.ACCOUNT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataSQLDMLParser.CURRENT_DATE, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDMLParser.CURDATE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.At_timezoneContext,0)


        def CURRENT_ROLE(self):
            return self.getToken(TeradataSQLDMLParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(TeradataSQLDMLParser.CURRENT_TIME, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDMLParser.CURTIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Type_precisionContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(TeradataSQLDMLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDMLParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDMLParser.DATE, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDMLParser.NOW, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDMLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDMLParser.ROLE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLDMLParser.SESSION, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDMLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TEMPORAL_TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def USER(self):
            return self.getToken(TeradataSQLDMLParser.USER, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = TeradataSQLDMLParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_builtin_function)
        try:
            self.state = 4885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4829
                self.match(TeradataSQLDMLParser.ACCOUNT)
                pass
            elif token in [94, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 4830
                    self.match(TeradataSQLDMLParser.CURRENT_DATE)
                    self.state = 4833
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,600,self._ctx)
                    if la_ == 1:
                        self.state = 4831
                        self.match(TeradataSQLDMLParser.OPEN_PAR)
                        self.state = 4832
                        self.match(TeradataSQLDMLParser.CLOSE_PAR)


                    pass
                elif token in [604]:
                    self.state = 4835
                    self.match(TeradataSQLDMLParser.CURDATE)
                    self.state = 4836
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 4837
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
                if la_ == 1:
                    self.state = 4840
                    self.at_timezone()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4843
                self.match(TeradataSQLDMLParser.CURRENT_ROLE)
                pass
            elif token in [96, 605]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4851
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 4844
                    self.match(TeradataSQLDMLParser.CURRENT_TIME)
                    self.state = 4846
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
                    if la_ == 1:
                        self.state = 4845
                        self.type_precision()


                    pass
                elif token in [605]:
                    self.state = 4848
                    self.match(TeradataSQLDMLParser.CURTIME)
                    self.state = 4849
                    self.match(TeradataSQLDMLParser.OPEN_PAR)
                    self.state = 4850
                    self.match(TeradataSQLDMLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,605,self._ctx)
                if la_ == 1:
                    self.state = 4853
                    self.at_timezone()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4856
                self.match(TeradataSQLDMLParser.CURRENT_TIMESTAMP)
                self.state = 4858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
                if la_ == 1:
                    self.state = 4857
                    self.type_precision()


                self.state = 4861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,607,self._ctx)
                if la_ == 1:
                    self.state = 4860
                    self.at_timezone()


                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4863
                self.match(TeradataSQLDMLParser.CURRENT_USER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4864
                self.match(TeradataSQLDMLParser.DATABASE)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4865
                self.match(TeradataSQLDMLParser.DATE)
                self.state = 4867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
                if la_ == 1:
                    self.state = 4866
                    self.at_timezone()


                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4869
                self.match(TeradataSQLDMLParser.NOW)
                self.state = 4870
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4871
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4872
                self.match(TeradataSQLDMLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4873
                self.match(TeradataSQLDMLParser.ROLE)
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4874
                self.match(TeradataSQLDMLParser.SESSION)
                pass
            elif token in [980]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4875
                self.match(TeradataSQLDMLParser.TEMPORAL_DATE)
                pass
            elif token in [981]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4876
                self.match(TeradataSQLDMLParser.TEMPORAL_TIMESTAMP)
                self.state = 4878
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,609,self._ctx)
                if la_ == 1:
                    self.state = 4877
                    self.type_precision()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4880
                self.match(TeradataSQLDMLParser.TIME)
                self.state = 4882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
                if la_ == 1:
                    self.state = 4881
                    self.at_timezone()


                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4884
                self.match(TeradataSQLDMLParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calendar_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.calendar_for_session = None # Token
            self.calendar_name = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_DAY_OF_YEAR, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.TD_YEAR_OF_CALENDAR, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SyslibContext,0)


        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.MONTHNUMBER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.QUARTERNUMBER_OF_YEAR, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDMLParser.WEEKNUMBER_OF_YEAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDMLParser.YEARNUMBER_OF_CALENDAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDMLParser.NULL, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_calendar_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalendar_function" ):
                listener.enterCalendar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalendar_function" ):
                listener.exitCalendar_function(self)




    def calendar_function(self):

        localctx = TeradataSQLDMLParser.Calendar_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_calendar_function)
        self._la = 0 # Token type
        try:
            self.state = 4910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [957, 958, 959, 960, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 1088]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4887
                    self.syslib()


                self.state = 4890
                _la = self._input.LA(1)
                if not(((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & 1031695) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4891
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4892
                self.scalar_expr(0)
                self.state = 4893
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [612, 613, 614, 615, 616, 783, 784, 785, 867, 868, 1033, 1034, 1035, 1036, 1064, 1091]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4895
                    self.td_sysfnlib()


                self.state = 4898
                _la = self._input.LA(1)
                if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 31) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0) or _la==867 or _la==868 or ((((_la - 1033)) & ~0x3f) == 0 and ((1 << (_la - 1033)) & 2147483663) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4899
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4900
                self.scalar_expr(0)
                self.state = 4902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4901
                    self.match(TeradataSQLDMLParser.COMMA)


                self.state = 4906
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [274]:
                    self.state = 4904
                    localctx.calendar_for_session = self.match(TeradataSQLDMLParser.NULL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 4905
                    localctx.calendar_name = self.char_string_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 4908
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.search_result = None # Scalar_exprContext
            self.default_result = None # Scalar_exprContext

        def DECODE(self):
            return self.getToken(TeradataSQLDMLParser.DECODE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def GREATEST(self):
            return self.getToken(TeradataSQLDMLParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDMLParser.LEAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_comparison_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_function" ):
                listener.enterComparison_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_function" ):
                listener.exitComparison_function(self)




    def comparison_function(self):

        localctx = TeradataSQLDMLParser.Comparison_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_comparison_function)
        self._la = 0 # Token type
        try:
            self.state = 4940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4912
                    self.td_sysfnlib()


                self.state = 4915
                self.match(TeradataSQLDMLParser.DECODE)
                self.state = 4916
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4917
                localctx.expr = self.scalar_expr(0)
                self.state = 4918
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4919
                localctx.search_result = self.scalar_expr(0)

                self.state = 4920
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4921
                localctx.search_result = self.scalar_expr(0)
                self.state = 4923
                localctx.default_result = self.scalar_expr(0)
                self.state = 4924
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4926
                    self.td_sysfnlib()


                self.state = 4929
                _la = self._input.LA(1)
                if not(_la==689 or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4930
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4931
                self.scalar_expr(0)
                self.state = 4934 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4932
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 4933
                    self.scalar_expr(0)
                    self.state = 4936 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4938
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDMLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDMLParser.CAMSET_L, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDMLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDMLParser.DECAMSET_L, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.JSON_DECOMPRESS, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDMLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDMLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDMLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDMLParser.LZDECOMP_L, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TD_LZ_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDMLParser.TS_DECOMPRESS, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDMLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDMLParser.TRANSUTF8TOUNICODE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_compression_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_function" ):
                listener.enterCompression_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_function" ):
                listener.exitCompression_function(self)




    def compression_function(self):

        localctx = TeradataSQLDMLParser.Compression_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_compression_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 4942
                self.td_sysfnlib()


            self.state = 4945
            _la = self._input.LA(1)
            if not(((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & 1729382256910270467) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & 15) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & 1649267441667) != 0) or ((((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4946
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 4947
            self.scalar_expr(0)
            self.state = 4948
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.in_encoding = None # Char_string_literalContext
            self.out_encoding = None # Char_string_literalContext
            self.string_expr = None # Scalar_exprContext
            self.format_arg = None # Char_string_literalContext
            self.nls_param = None # Char_string_literalContext
            self.numeric_value = None # Scalar_exprContext
            self.interval_unit = None # Scalar_exprContext

        def CAST(self):
            return self.getToken(TeradataSQLDMLParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Data_type_attributeContext,i)


        def TRYCAST(self):
            return self.getToken(TeradataSQLDMLParser.TRYCAST, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDMLParser.TO_BYTES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDMLParser.FROM_BYTES, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDMLParser.TO_NUMBER, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDMLParser.NULL, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDMLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDMLParser.TO_DATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDMLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDMLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.TO_YMINTERVAL, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.TO_DSINTERVAL, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.NUMTOYMINTERVAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_conversion_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_function" ):
                listener.enterConversion_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_function" ):
                listener.exitConversion_function(self)




    def conversion_function(self):

        localctx = TeradataSQLDMLParser.Conversion_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_conversion_function)
        self._la = 0 # Token type
        try:
            self.state = 5081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4950
                self.match(TeradataSQLDMLParser.CAST)
                self.state = 4951
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4952
                localctx.expr = self.scalar_expr(0)
                self.state = 4953
                self.match(TeradataSQLDMLParser.AS)
                self.state = 4966
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,624,self._ctx)
                if la_ == 1:
                    self.state = 4954
                    self.data_type()
                    self.state = 4958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                        self.state = 4955
                        self.data_type_attribute()
                        self.state = 4960
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 4962 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4961
                        self.data_type_attribute()
                        self.state = 4964 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211):
                            break

                    pass


                self.state = 4968
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4970
                self.match(TeradataSQLDMLParser.TRYCAST)
                self.state = 4971
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4972
                localctx.in_string = self.scalar_expr(0)
                self.state = 4973
                self.match(TeradataSQLDMLParser.AS)
                self.state = 4974
                self.data_type()
                self.state = 4975
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4977
                    self.td_sysfnlib()


                self.state = 4980
                self.match(TeradataSQLDMLParser.TO_BYTES)
                self.state = 4981
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4982
                localctx.in_string = self.scalar_expr(0)
                self.state = 4983
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4984
                localctx.in_encoding = self.char_string_literal()
                self.state = 4985
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4987
                    self.td_sysfnlib()


                self.state = 4990
                self.match(TeradataSQLDMLParser.FROM_BYTES)
                self.state = 4991
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 4992
                localctx.in_string = self.scalar_expr(0)
                self.state = 4993
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 4994
                localctx.out_encoding = self.char_string_literal()
                self.state = 4995
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4997
                    self.td_sysfnlib()


                self.state = 5000
                self.match(TeradataSQLDMLParser.TO_NUMBER)
                self.state = 5001
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5002
                localctx.string_expr = self.scalar_expr(0)
                self.state = 5012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5003
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5004
                    localctx.format_arg = self.char_string_literal()
                    self.state = 5010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5005
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5008
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 5006
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 5007
                            self.match(TeradataSQLDMLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 5014
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5016
                    self.td_sysfnlib()


                self.state = 5019
                self.match(TeradataSQLDMLParser.TO_CHAR)
                self.state = 5020
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5021
                localctx.expr = self.scalar_expr(0)
                self.state = 5031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5022
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5023
                    localctx.format_arg = self.char_string_literal()
                    self.state = 5029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5024
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5027
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 5025
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 5026
                            self.match(TeradataSQLDMLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 5033
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5035
                    self.td_sysfnlib()


                self.state = 5038
                self.match(TeradataSQLDMLParser.TO_DATE)
                self.state = 5039
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5040
                localctx.in_string = self.scalar_expr(0)
                self.state = 5041
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 5042
                    localctx.format_arg = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 5043
                    self.match(TeradataSQLDMLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5046
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5048
                    self.td_sysfnlib()


                self.state = 5051
                _la = self._input.LA(1)
                if not(_la==997 or _la==998):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5052
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5053
                localctx.expr = self.scalar_expr(0)
                self.state = 5059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5054
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5057
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1069, 1070, 1071, 1072, 1203]:
                        self.state = 5055
                        localctx.format_arg = self.char_string_literal()
                        pass
                    elif token in [274]:
                        self.state = 5056
                        self.match(TeradataSQLDMLParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 5061
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5063
                    self.td_sysfnlib()


                self.state = 5066
                _la = self._input.LA(1)
                if not(_la==995 or _la==999):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5067
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5068
                self.scalar_expr(0)
                self.state = 5069
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5071
                    self.td_sysfnlib()


                self.state = 5074
                _la = self._input.LA(1)
                if not(_la==808 or _la==809):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5075
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5076
                localctx.numeric_value = self.scalar_expr(0)
                self.state = 5077
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5078
                localctx.interval_unit = self.scalar_expr(0)
                self.state = 5079
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.day_value = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLDMLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDMLParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDMLParser.WEEK, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDMLParser.DAYOFMONTH, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDMLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDMLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDMLParser.SECOND, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDMLParser.LAST_DAY, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDMLParser.NEXT_DAY, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDMLParser.MONTHS_BETWEEN, 0)

        def ADD_MONTHS(self):
            return self.getToken(TeradataSQLDMLParser.ADD_MONTHS, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDMLParser.OADD_MONTHS, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLDMLParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDMLParser.DAY, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(TeradataSQLDMLParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(TeradataSQLDMLParser.TIMEZONE_MINUTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_date_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_function" ):
                listener.enterDate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_function" ):
                listener.exitDate_function(self)




    def date_function(self):

        localctx = TeradataSQLDMLParser.Date_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_date_function)
        self._la = 0 # Token type
        try:
            self.state = 5133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5083
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368 or _la==478 or _la==1076 or _la==1099):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5084
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5085
                self.scalar_expr(0)
                self.state = 5086
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5088
                    self.td_sysfnlib()


                self.state = 5091
                self.match(TeradataSQLDMLParser.LAST_DAY)
                self.state = 5092
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5093
                self.scalar_expr(0)
                self.state = 5094
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5096
                    self.td_sysfnlib()


                self.state = 5099
                self.match(TeradataSQLDMLParser.NEXT_DAY)
                self.state = 5100
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5101
                self.scalar_expr(0)
                self.state = 5102
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5103
                localctx.day_value = self.char_string_literal()
                self.state = 5104
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5106
                    self.td_sysfnlib()


                self.state = 5109
                self.match(TeradataSQLDMLParser.MONTHS_BETWEEN)
                self.state = 5110
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5111
                self.scalar_expr(0)
                self.state = 5112
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5113
                self.scalar_expr(0)
                self.state = 5114
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5116
                    self.td_sysfnlib()


                self.state = 5119
                _la = self._input.LA(1)
                if not(_la==9 or _la==814):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5120
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5121
                self.scalar_expr(0)
                self.state = 5122
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5123
                self.scalar_expr(0)
                self.state = 5124
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5126
                self.match(TeradataSQLDMLParser.EXTRACT)
                self.state = 5127
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5128
                _la = self._input.LA(1)
                if not(_la==106 or _la==185 or _la==248 or _la==258 or ((((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 108086391056891905) != 0) or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5129
                self.match(TeradataSQLDMLParser.FROM)
                self.state = 5130
                self.scalar_expr(0)
                self.state = 5131
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def HASHAMP(self):
            return self.getToken(TeradataSQLDMLParser.HASHAMP, 0)

        def HASHBAKAMP(self):
            return self.getToken(TeradataSQLDMLParser.HASHBAKAMP, 0)

        def hash_bucket_number_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Hash_bucket_number_exprContext,0)


        def HASHBUCKET(self):
            return self.getToken(TeradataSQLDMLParser.HASHBUCKET, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def HASHROW(self):
            return self.getToken(TeradataSQLDMLParser.HASHROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hash_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_function" ):
                listener.enterHash_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_function" ):
                listener.exitHash_function(self)




    def hash_function(self):

        localctx = TeradataSQLDMLParser.Hash_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_hash_function)
        self._la = 0 # Token type
        try:
            self.state = 5163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5135
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5136
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5137
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5138
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5139
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5140
                self.hash_bucket_number_expr()
                self.state = 5141
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5143
                self.match(TeradataSQLDMLParser.HASHBUCKET)
                self.state = 5144
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5145
                self.scalar_expr(0)
                self.state = 5146
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5148
                self.match(TeradataSQLDMLParser.HASHROW)
                self.state = 5149
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5150
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5151
                self.match(TeradataSQLDMLParser.HASHROW)
                self.state = 5152
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5153
                self.scalar_expr(0)
                self.state = 5158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5154
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5155
                    self.scalar_expr(0)
                    self.state = 5160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5161
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDMLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDMLParser.EMPTY_CLOB, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_lob_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_function" ):
                listener.enterLob_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_function" ):
                listener.exitLob_function(self)




    def lob_function(self):

        localctx = TeradataSQLDMLParser.Lob_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_lob_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 5165
                self.td_sysfnlib()


            self.state = 5168
            _la = self._input.LA(1)
            if not(_la==650 or _la==651):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5169
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 5170
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name_string = None # Char_string_literalContext
            self.database_name_string = None # Char_string_literalContext
            self.object_name_string = None # Char_string_literalContext
            self.object_kind_string = None # Char_string_literalContext
            self.map_slot_string = None # Char_string_literalContext
            self.number_of_primary_amps_string = None # Char_string_literalContext
            self.colocation_name_string = None # Char_string_literalContext

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDMLParser.CONTIGUOUSMAPAMPS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SyslibContext,0)


        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDMLParser.SPARSEMAPAMPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDMLParser.SPARSETABLEAMPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_map_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_function" ):
                listener.enterMap_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_function" ):
                listener.exitMap_function(self)




    def map_function(self):

        localctx = TeradataSQLDMLParser.Map_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_map_function)
        self._la = 0 # Token type
        try:
            self.state = 5208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 5172
                    self.syslib()


                self.state = 5175
                self.match(TeradataSQLDMLParser.CONTIGUOUSMAPAMPS)
                self.state = 5176
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5177
                localctx.map_name_string = self.char_string_literal()
                self.state = 5178
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 5180
                    self.syslib()


                self.state = 5183
                self.match(TeradataSQLDMLParser.SPARSEMAPAMPS)
                self.state = 5184
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5185
                localctx.database_name_string = self.char_string_literal()
                self.state = 5186
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5187
                localctx.object_name_string = self.char_string_literal()
                self.state = 5188
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5189
                localctx.object_kind_string = self.char_string_literal()
                self.state = 5190
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5191
                localctx.map_slot_string = self.char_string_literal()
                self.state = 5192
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5193
                localctx.number_of_primary_amps_string = self.char_string_literal()
                self.state = 5194
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5195
                localctx.colocation_name_string = self.char_string_literal()
                self.state = 5196
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 5198
                    self.syslib()


                self.state = 5201
                self.match(TeradataSQLDMLParser.SPARSETABLEAMPS)
                self.state = 5202
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5203
                localctx.database_name_string = self.char_string_literal()
                self.state = 5204
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5205
                localctx.object_name_string = self.char_string_literal()
                self.state = 5206
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nvl_funtionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NVL(self):
            return self.getToken(TeradataSQLDMLParser.NVL, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def NVL2(self):
            return self.getToken(TeradataSQLDMLParser.NVL2, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_nvl_funtion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvl_funtion" ):
                listener.enterNvl_funtion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvl_funtion" ):
                listener.exitNvl_funtion(self)




    def nvl_funtion(self):

        localctx = TeradataSQLDMLParser.Nvl_funtionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_nvl_funtion)
        self._la = 0 # Token type
        try:
            self.state = 5232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5210
                    self.td_sysfnlib()


                self.state = 5213
                self.match(TeradataSQLDMLParser.NVL)
                self.state = 5214
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5215
                self.scalar_expr(0)
                self.state = 5216
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5217
                self.scalar_expr(0)
                self.state = 5218
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5220
                    self.td_sysfnlib()


                self.state = 5223
                self.match(TeradataSQLDMLParser.NVL2)
                self.state = 5224
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5225
                self.scalar_expr(0)
                self.state = 5226
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5227
                self.scalar_expr(0)
                self.state = 5228
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5229
                self.scalar_expr(0)
                self.state = 5230
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDMLParser.BEGIN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def END(self):
            return self.getToken(TeradataSQLDMLParser.END, 0)

        def IS(self):
            return self.getToken(TeradataSQLDMLParser.IS, 0)

        def UNTIL_CHANGED(self):
            return self.getToken(TeradataSQLDMLParser.UNTIL_CHANGED, 0)

        def UNTIL_CLOSED(self):
            return self.getToken(TeradataSQLDMLParser.UNTIL_CLOSED, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDMLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Interval_period_specContext,0)


        def LAST(self):
            return self.getToken(TeradataSQLDMLParser.LAST, 0)

        def NEXT(self):
            return self.getToken(TeradataSQLDMLParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDMLParser.PRIOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_period_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_function" ):
                listener.enterPeriod_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_function" ):
                listener.exitPeriod_function(self)




    def period_function(self):

        localctx = TeradataSQLDMLParser.Period_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_period_function)
        self._la = 0 # Token type
        try:
            self.state = 5275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5234
                self.match(TeradataSQLDMLParser.BEGIN)
                self.state = 5235
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5236
                self.scalar_expr(0)
                self.state = 5237
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5239
                self.match(TeradataSQLDMLParser.END)
                self.state = 5240
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5241
                self.scalar_expr(0)
                self.state = 5242
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5244
                self.match(TeradataSQLDMLParser.END)
                self.state = 5245
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5246
                self.scalar_expr(0)
                self.state = 5247
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5248
                self.match(TeradataSQLDMLParser.IS)
                self.state = 5250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 5249
                    self.match(TeradataSQLDMLParser.NOT)


                self.state = 5252
                _la = self._input.LA(1)
                if not(_la==450 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5254
                self.match(TeradataSQLDMLParser.INTERVAL)
                self.state = 5255
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5256
                self.scalar_expr(0)
                self.state = 5257
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5258
                self.interval_period_spec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5260
                self.match(TeradataSQLDMLParser.LAST)
                self.state = 5261
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5262
                self.scalar_expr(0)
                self.state = 5263
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5265
                self.match(TeradataSQLDMLParser.NEXT)
                self.state = 5266
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5267
                self.scalar_expr(0)
                self.state = 5268
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5270
                self.match(TeradataSQLDMLParser.PRIOR)
                self.state = 5271
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5272
                self.scalar_expr(0)
                self.state = 5273
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regexp_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_string = None # Scalar_exprContext
            self.regexp_string = None # Scalar_exprContext
            self.position_arg = None # Scalar_exprContext
            self.occurrence_arg = None # Scalar_exprContext
            self.match_arg = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.return_opt = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_SUBSTR, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_REPLACE, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_INSTR, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_regexp_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexp_function" ):
                listener.enterRegexp_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexp_function" ):
                listener.exitRegexp_function(self)




    def regexp_function(self):

        localctx = TeradataSQLDMLParser.Regexp_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_regexp_function)
        self._la = 0 # Token type
        try:
            self.state = 5366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5277
                    self.td_sysfnlib()


                self.state = 5280
                self.match(TeradataSQLDMLParser.REGEXP_SUBSTR)
                self.state = 5281
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5282
                localctx.source_string = self.scalar_expr(0)
                self.state = 5283
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5284
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5285
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5286
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 5287
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5288
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 5289
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5290
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5294
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5296
                    self.td_sysfnlib()


                self.state = 5299
                self.match(TeradataSQLDMLParser.REGEXP_REPLACE)
                self.state = 5300
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5301
                localctx.source_string = self.scalar_expr(0)
                self.state = 5302
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5303
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5304
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5305
                    localctx.replace_string = self.scalar_expr(0)
                    self.state = 5306
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5307
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 5308
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5309
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 5310
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5311
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5315
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5317
                    self.td_sysfnlib()


                self.state = 5320
                self.match(TeradataSQLDMLParser.REGEXP_INSTR)
                self.state = 5321
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5322
                localctx.source_string = self.scalar_expr(0)
                self.state = 5323
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5324
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5325
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5326
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 5327
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5328
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 5329
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5330
                    localctx.return_opt = self.scalar_expr(0)
                    self.state = 5331
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5332
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5336
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5338
                    self.td_sysfnlib()


                self.state = 5341
                self.match(TeradataSQLDMLParser.REGEXP_SIMILAR)
                self.state = 5342
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5343
                localctx.source_string = self.scalar_expr(0)
                self.state = 5344
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5345
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5346
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5347
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5350
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5352
                    self.td_sysfnlib()


                self.state = 5355
                self.match(TeradataSQLDMLParser.REGEXP_SPLIT_TO_TABLE)
                self.state = 5356
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5357
                localctx.in_k = self.scalar_expr(0)
                self.state = 5358
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5359
                localctx.source_string = self.scalar_expr(0)
                self.state = 5360
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5361
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5362
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5363
                localctx.match_arg = self.scalar_expr(0)
                self.state = 5364
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delim_string_value = None # Char_string_literalContext
            self.quote_string_value = None # Char_string_literalContext
            self.data_string_value = None # Scalar_exprContext
            self.ci = None # Integer_literalContext
            self.cd = None # Integer_literalContext
            self.cs = None # Integer_literalContext
            self.ct = None # Integer_literalContext
            self.source_string = None # Scalar_exprContext
            self.search_string = None # Scalar_exprContext
            self.position = None # Scalar_exprContext
            self.occurrence = None # Scalar_exprContext
            self.length = None # Scalar_exprContext
            self.fill_string = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.name_to_search = None # Scalar_exprContext
            self.name_delimiters = None # Scalar_exprContext
            self.value_delimiters = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.from_string = None # Scalar_exprContext
            self.to_string = None # Scalar_exprContext
            self.delimiter = None # Scalar_exprContext
            self.token_num = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext
            self.delimiters = None # Scalar_exprContext
            self.out_k = None # Column_specContext
            self.out_token_num = None # Column_specContext
            self.out_token = None # Column_specContext
            self.string_expr = None # Scalar_exprContext
            self.trim_expr = None # Scalar_exprContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.OPEN_PAR, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, i)

        def ASCII(self):
            return self.getToken(TeradataSQLDMLParser.ASCII, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDMLParser.CHR, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDMLParser.INITCAP, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDMLParser.LENGTH, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDMLParser.REVERSE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def CHAR2HEXINT(self):
            return self.getToken(TeradataSQLDMLParser.CHAR2HEXINT, 0)

        def SOUNDEX(self):
            return self.getToken(TeradataSQLDMLParser.SOUNDEX, 0)

        def STRING_CS(self):
            return self.getToken(TeradataSQLDMLParser.STRING_CS, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDMLParser.VARGRAPHIC, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDMLParser.CONCAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def CSV(self):
            return self.getToken(TeradataSQLDMLParser.CSV, 0)

        def NEW(self):
            return self.getToken(TeradataSQLDMLParser.NEW, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDMLParser.VARIANT, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDMLParser.TYPE, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def CSVLD(self):
            return self.getToken(TeradataSQLDMLParser.CSVLD, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDMLParser.EDITDISTANCE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def INDEX(self):
            return self.getToken(TeradataSQLDMLParser.INDEX, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDMLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLDMLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDMLParser.RIGHT, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDMLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(TeradataSQLDMLParser.LOWER, 0)

        def UPPER(self):
            return self.getToken(TeradataSQLDMLParser.UPPER, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDMLParser.UCASE, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDMLParser.LPAD, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDMLParser.RPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDMLParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDMLParser.RTRIM, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDMLParser.NGRAM, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDMLParser.NVP, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDMLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDMLParser.OTRANSLATE, 0)

        def POSITION(self):
            return self.getToken(TeradataSQLDMLParser.POSITION, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDMLParser.STRTOK, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDMLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDMLParser.RETURNS, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_specContext,i)


        def SUBSTRING(self):
            return self.getToken(TeradataSQLDMLParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDMLParser.FROM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def SUBSTR(self):
            return self.getToken(TeradataSQLDMLParser.SUBSTR, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def translation_mapping(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Translation_mappingContext,0)


        def TRANSLATE(self):
            return self.getToken(TeradataSQLDMLParser.TRANSLATE, 0)

        def TRANSLATE_CHK(self):
            return self.getToken(TeradataSQLDMLParser.TRANSLATE_CHK, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDMLParser.ERROR, 0)

        def TRIM(self):
            return self.getToken(TeradataSQLDMLParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(TeradataSQLDMLParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(TeradataSQLDMLParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(TeradataSQLDMLParser.LEADING, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = TeradataSQLDMLParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 5681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5368
                    self.td_sysfnlib()


                self.state = 5371
                _la = self._input.LA(1)
                if not(_la==535 or _la==572 or _la==708 or _la==739 or _la==1084):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5372
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5373
                self.scalar_expr(0)
                self.state = 5374
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5376
                _la = self._input.LA(1)
                if not(_la==54 or _la==383 or _la==399 or _la==465):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5377
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5378
                self.scalar_expr(0)
                self.state = 5379
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5381
                self.match(TeradataSQLDMLParser.CONCAT)
                self.state = 5382
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5383
                self.scalar_expr(0)
                self.state = 5384
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5385
                self.scalar_expr(0)
                self.state = 5390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5386
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5387
                    self.scalar_expr(0)
                    self.state = 5392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5393
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5395
                    self.td_sysfnlib()


                self.state = 5398
                self.match(TeradataSQLDMLParser.CSV)
                self.state = 5399
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5400
                self.match(TeradataSQLDMLParser.NEW)
                self.state = 5401
                self.match(TeradataSQLDMLParser.VARIANT)
                self.state = 5402
                self.match(TeradataSQLDMLParser.TYPE)
                self.state = 5403
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5404
                self.scalar_expr(0)
                self.state = 5409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5405
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5406
                    self.scalar_expr(0)
                    self.state = 5411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5412
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5413
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5414
                localctx.delim_string_value = self.char_string_literal()
                self.state = 5415
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5416
                localctx.quote_string_value = self.char_string_literal()
                self.state = 5417
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5419
                    self.td_sysfnlib()


                self.state = 5422
                self.match(TeradataSQLDMLParser.CSVLD)
                self.state = 5423
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5424
                localctx.data_string_value = self.scalar_expr(0)
                self.state = 5425
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5426
                localctx.delim_string_value = self.char_string_literal()
                self.state = 5427
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5428
                localctx.quote_string_value = self.char_string_literal()
                self.state = 5429
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5431
                    self.td_sysfnlib()


                self.state = 5434
                self.match(TeradataSQLDMLParser.EDITDISTANCE)
                self.state = 5435
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5436
                self.scalar_expr(0)
                self.state = 5437
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5438
                self.scalar_expr(0)
                self.state = 5448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5439
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5440
                    localctx.ci = self.integer_literal()
                    self.state = 5441
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5442
                    localctx.cd = self.integer_literal()
                    self.state = 5443
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5444
                    localctx.cs = self.integer_literal()
                    self.state = 5445
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5446
                    localctx.ct = self.integer_literal()


                self.state = 5450
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5452
                self.match(TeradataSQLDMLParser.INDEX)
                self.state = 5453
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5454
                self.scalar_expr(0)
                self.state = 5455
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5456
                self.scalar_expr(0)
                self.state = 5457
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5459
                    self.td_sysfnlib()


                self.state = 5462
                self.match(TeradataSQLDMLParser.INSTR)
                self.state = 5463
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5464
                localctx.source_string = self.scalar_expr(0)
                self.state = 5465
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5466
                localctx.search_string = self.scalar_expr(0)
                self.state = 5473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5467
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5468
                    localctx.position = self.scalar_expr(0)
                    self.state = 5471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5469
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5470
                        localctx.occurrence = self.scalar_expr(0)




                self.state = 5475
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5477
                    self.td_sysfnlib()


                self.state = 5480
                _la = self._input.LA(1)
                if not(_la==219 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5481
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5482
                localctx.source_string = self.scalar_expr(0)
                self.state = 5483
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5484
                localctx.length = self.scalar_expr(0)
                self.state = 5485
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5487
                self.match(TeradataSQLDMLParser.LOCATE)
                self.state = 5488
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5489
                self.scalar_expr(0)
                self.state = 5490
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5491
                self.scalar_expr(0)
                self.state = 5494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5492
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5493
                    self.scalar_expr(0)


                self.state = 5496
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5498
                _la = self._input.LA(1)
                if not(_la==233 or _la==454 or _la==1011):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5499
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5500
                self.scalar_expr(0)
                self.state = 5501
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5503
                    self.td_sysfnlib()


                self.state = 5506
                _la = self._input.LA(1)
                if not(_la==746 or _la==898):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5507
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5508
                localctx.source_string = self.scalar_expr(0)
                self.state = 5509
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5510
                localctx.length = self.scalar_expr(0)
                self.state = 5513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5511
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5512
                    localctx.fill_string = self.scalar_expr(0)


                self.state = 5515
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5517
                    self.td_sysfnlib()


                self.state = 5520
                _la = self._input.LA(1)
                if not(_la==747 or _la==899):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5521
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5522
                self.scalar_expr(0)
                self.state = 5525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5523
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5524
                    self.scalar_expr(0)


                self.state = 5527
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5529
                    self.td_sysfnlib()


                self.state = 5532
                self.match(TeradataSQLDMLParser.NGRAM)
                self.state = 5533
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5534
                self.scalar_expr(0)
                self.state = 5535
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5536
                self.scalar_expr(0)
                self.state = 5537
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5538
                localctx.length = self.scalar_expr(0)
                self.state = 5541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5539
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5540
                    localctx.position = self.scalar_expr(0)


                self.state = 5543
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5545
                    self.td_sysfnlib()


                self.state = 5548
                self.match(TeradataSQLDMLParser.NVP)
                self.state = 5549
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5550
                localctx.in_string = self.scalar_expr(0)
                self.state = 5551
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5552
                localctx.name_to_search = self.scalar_expr(0)
                self.state = 5563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5553
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5554
                    localctx.name_delimiters = self.scalar_expr(0)
                    self.state = 5561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5555
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5556
                        localctx.value_delimiters = self.scalar_expr(0)
                        self.state = 5559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 5557
                            self.match(TeradataSQLDMLParser.COMMA)
                            self.state = 5558
                            localctx.occurrence = self.scalar_expr(0)






                self.state = 5565
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5567
                    self.td_sysfnlib()


                self.state = 5570
                self.match(TeradataSQLDMLParser.OREPLACE)
                self.state = 5571
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5572
                localctx.source_string = self.scalar_expr(0)
                self.state = 5573
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5574
                localctx.search_string = self.scalar_expr(0)
                self.state = 5577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5575
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5576
                    localctx.replace_string = self.scalar_expr(0)


                self.state = 5579
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5581
                    self.td_sysfnlib()


                self.state = 5584
                self.match(TeradataSQLDMLParser.OTRANSLATE)
                self.state = 5585
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5586
                localctx.source_string = self.scalar_expr(0)
                self.state = 5587
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5588
                localctx.from_string = self.scalar_expr(0)
                self.state = 5589
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5590
                localctx.to_string = self.scalar_expr(0)
                self.state = 5591
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5593
                self.match(TeradataSQLDMLParser.POSITION)
                self.state = 5594
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5595
                self.scalar_expr(0)
                self.state = 5596
                self.match(TeradataSQLDMLParser.IN)
                self.state = 5597
                self.scalar_expr(0)
                self.state = 5598
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5600
                    self.td_sysfnlib()


                self.state = 5603
                self.match(TeradataSQLDMLParser.STRTOK)
                self.state = 5604
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5605
                localctx.in_string = self.scalar_expr(0)
                self.state = 5612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5606
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5607
                    localctx.delimiter = self.scalar_expr(0)
                    self.state = 5610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5608
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5609
                        localctx.token_num = self.scalar_expr(0)




                self.state = 5614
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5616
                    self.td_sysfnlib()


                self.state = 5619
                self.match(TeradataSQLDMLParser.STRTOK_SPLIT_TO_TABLE)
                self.state = 5620
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5621
                localctx.in_k = self.scalar_expr(0)
                self.state = 5622
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5623
                localctx.in_string = self.scalar_expr(0)
                self.state = 5624
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5625
                localctx.delimiters = self.scalar_expr(0)
                self.state = 5626
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5627
                self.match(TeradataSQLDMLParser.RETURNS)
                self.state = 5628
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5629
                localctx.out_k = self.column_spec()
                self.state = 5630
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5631
                localctx.out_token_num = self.column_spec()
                self.state = 5632
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5633
                localctx.out_token = self.column_spec()
                self.state = 5634
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5636
                self.match(TeradataSQLDMLParser.SUBSTRING)
                self.state = 5637
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5638
                self.scalar_expr(0)
                self.state = 5639
                self.match(TeradataSQLDMLParser.FROM)
                self.state = 5640
                self.scalar_expr(0)
                self.state = 5643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 5641
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5642
                    self.scalar_expr(0)


                self.state = 5645
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5647
                _la = self._input.LA(1)
                if not(_la==401 or _la==402):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5648
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5649
                self.scalar_expr(0)
                self.state = 5650
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5651
                self.scalar_expr(0)
                self.state = 5654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 5652
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5653
                    self.scalar_expr(0)


                self.state = 5656
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 5658
                _la = self._input.LA(1)
                if not(_la==433 or _la==434):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5659
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5660
                localctx.string_expr = self.scalar_expr(0)
                self.state = 5661
                self.match(TeradataSQLDMLParser.USING)
                self.state = 5662
                self.translation_mapping()
                self.state = 5665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 5663
                    self.match(TeradataSQLDMLParser.WITH)
                    self.state = 5664
                    self.match(TeradataSQLDMLParser.ERROR)


                self.state = 5667
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 5669
                self.match(TeradataSQLDMLParser.TRIM)
                self.state = 5670
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==217 or _la==429:
                    self.state = 5671
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==217 or _la==429):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 5672
                        localctx.trim_expr = self.scalar_expr(0)


                    self.state = 5675
                    self.match(TeradataSQLDMLParser.FROM)


                self.state = 5678
                localctx.string_expr = self.scalar_expr(0)
                self.state = 5679
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_expr = None # Scalar_exprContext
            self.bson_data = None # Scalar_exprContext
            self.check_type = None # Char_string_literalContext
            self.geom_expr = None # Scalar_exprContext
            self.precision = None # Integer_literalContext
            self.geojson_expr = None # Scalar_exprContext
            self.asrid = None # Integer_literalContext
            self.json_string = None # Scalar_exprContext
            self.json_object = None # Scalar_exprContext
            self.json_path = None # Scalar_exprContext
            self.nvp_string = None # Scalar_exprContext
            self.name_delimiters = None # Char_string_literalContext
            self.value_delimiters = None # Char_string_literalContext
            self.ignore_characters = None # Char_string_literalContext

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDMLParser.ARRAY_TO_JSON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Returns_clauseContext,0)


        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDMLParser.BSON_CHECK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDMLParser.DATASIZE, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDMLParser.GEOJSONFROMGEOM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDMLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDMLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDMLParser.JSONGETVALUE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDMLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDMLParser.NVP2JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDMLParser.JSON_AGG, 0)

        def json_param_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Json_param_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Json_param_specContext,i)


        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDMLParser.JSON_COMPOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_function" ):
                listener.enterJson_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_function" ):
                listener.exitJson_function(self)




    def json_function(self):

        localctx = TeradataSQLDMLParser.Json_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_json_function)
        self._la = 0 # Token type
        try:
            self.state = 5805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5683
                    self.td_sysfnlib()


                self.state = 5686
                self.match(TeradataSQLDMLParser.ARRAY_TO_JSON)
                self.state = 5687
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5688
                localctx.array_expr = self.scalar_expr(0)
                self.state = 5689
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
                if la_ == 1:
                    self.state = 5690
                    self.returns_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5693
                    self.td_sysfnlib()


                self.state = 5696
                self.match(TeradataSQLDMLParser.BSON_CHECK)
                self.state = 5697
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5698
                localctx.bson_data = self.scalar_expr(0)
                self.state = 5701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5699
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5700
                    localctx.check_type = self.char_string_literal()


                self.state = 5703
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5705
                    self.td_sysfnlib()


                self.state = 5708
                self.match(TeradataSQLDMLParser.DATASIZE)
                self.state = 5709
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5710
                self.scalar_expr(0)
                self.state = 5711
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5713
                    self.td_sysfnlib()


                self.state = 5716
                self.match(TeradataSQLDMLParser.GEOJSONFROMGEOM)
                self.state = 5717
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5718
                localctx.geom_expr = self.scalar_expr(0)
                self.state = 5721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5719
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5720
                    localctx.precision = self.integer_literal()


                self.state = 5723
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,712,self._ctx)
                if la_ == 1:
                    self.state = 5724
                    self.returns_clause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5727
                    self.td_sysfnlib()


                self.state = 5730
                self.match(TeradataSQLDMLParser.GEOMFROMGEOJSON)
                self.state = 5731
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5732
                localctx.geojson_expr = self.scalar_expr(0)
                self.state = 5733
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5734
                localctx.asrid = self.integer_literal()
                self.state = 5735
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5737
                    self.td_sysfnlib()


                self.state = 5740
                self.match(TeradataSQLDMLParser.JSON_CHECK)
                self.state = 5741
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5742
                localctx.json_string = self.scalar_expr(0)
                self.state = 5743
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5745
                self.match(TeradataSQLDMLParser.JSONGETVALUE)
                self.state = 5746
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5747
                localctx.json_object = self.scalar_expr(0)
                self.state = 5748
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 5749
                localctx.json_path = self.scalar_expr(0)
                self.state = 5750
                self.match(TeradataSQLDMLParser.AS)
                self.state = 5751
                self.data_type()
                self.state = 5752
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5754
                self.match(TeradataSQLDMLParser.JSONMETADATA)
                self.state = 5755
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5756
                localctx.json_object = self.scalar_expr(0)
                self.state = 5757
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5759
                    self.td_sysfnlib()


                self.state = 5762
                self.match(TeradataSQLDMLParser.NVP2JSON)
                self.state = 5763
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5764
                localctx.nvp_string = self.scalar_expr(0)
                self.state = 5773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5765
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5766
                    localctx.name_delimiters = self.char_string_literal()
                    self.state = 5767
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5768
                    localctx.value_delimiters = self.char_string_literal()
                    self.state = 5771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5769
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5770
                        localctx.ignore_characters = self.char_string_literal()




                self.state = 5775
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5777
                self.match(TeradataSQLDMLParser.JSON_AGG)
                self.state = 5778
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5779
                self.json_param_spec()
                self.state = 5784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5780
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5781
                    self.json_param_spec()
                    self.state = 5786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5787
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,719,self._ctx)
                if la_ == 1:
                    self.state = 5788
                    self.returns_clause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5791
                self.match(TeradataSQLDMLParser.JSON_COMPOSE)
                self.state = 5792
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5793
                self.json_param_spec()
                self.state = 5798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5794
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5795
                    self.json_param_spec()
                    self.state = 5800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5801
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 5803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
                if la_ == 1:
                    self.state = 5802
                    self.returns_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_data = None # Scalar_exprContext
            self.xquery_expr = None # Char_string_literalContext
            self.xml_value_exp = None # Scalar_exprContext
            self.xml_value_expr = None # Scalar_exprContext
            self.xml_comment = None # Scalar_exprContext
            self.xml_text = None # Scalar_exprContext
            self.xml_schema = None # Scalar_exprContext
            self.xml_uri = None # Char_string_literalContext
            self.xml_valid_element_name = None # Scalar_exprContext
            self.doc_id = None # Scalar_exprContext
            self.source_doc = None # Scalar_exprContext
            self.split_size = None # Scalar_exprContext
            self.split_path = None # Scalar_exprContext
            self._scalar_expr = None # Scalar_exprContext
            self.replication_list = list() # of Scalar_exprContexts
            self.query_string = None # Scalar_exprContext
            self.xslt = None # Scalar_exprContext
            self.xml_string = None # Scalar_exprContext
            self.result_code = None # Scalar_exprContext
            self.document_grouping_spec = None # Scalar_exprContext

        def CREATEXML(self):
            return self.getToken(TeradataSQLDMLParser.CREATEXML, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDMLParser.DATASIZE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysfnlibContext,0)


        def XMLQUERY(self):
            return self.getToken(TeradataSQLDMLParser.XMLQUERY, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_query_argumentContext,0)


        def xml_returning_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_returning_specContext,0)


        def xml_query_on_empty(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_query_on_emptyContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDMLParser.XMLSERIALIZE, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDMLParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDMLParser.CONTENT, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def xml_encoding(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_encodingContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDMLParser.BOM, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDMLParser.VERSION, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDMLParser.XMLDECLARATION, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.NO)
            else:
                return self.getToken(TeradataSQLDMLParser.NO, i)

        def INDENT(self):
            return self.getToken(TeradataSQLDMLParser.INDENT, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDMLParser.EXCLUDING, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDMLParser.SIZE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDMLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDMLParser.XMLELEMENT, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDMLParser.NAME, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_namespace_declarationContext,0)


        def xml_attribute_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_attribute_declarationContext,0)


        def xml_value_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_value_declarationContext,0)


        def XMLFOREST(self):
            return self.getToken(TeradataSQLDMLParser.XMLFOREST, 0)

        def xml_forest_element_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Xml_forest_element_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_forest_element_specContext,i)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_content_option_specContext,0)


        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDMLParser.XMLCONCAT, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDMLParser.XMLCOMMENT, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDMLParser.XMLPI, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDMLParser.XMLTEXT, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDMLParser.XMLPARSE, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDMLParser.WHITESPACE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLDMLParser.PRESERVE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDMLParser.STRIP, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDMLParser.XMLVALIDATE, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDMLParser.ACCORDING, 0)

        def TO(self):
            return self.getToken(TeradataSQLDMLParser.TO, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDMLParser.XMLSCHEMA, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDMLParser.VALUE, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDMLParser.SEQUENCE, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDMLParser.NAMESPACE, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDMLParser.ELEMENT, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDMLParser.XMLAGG, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDMLParser.XMLSPLIT, 0)

        def td_sysxml(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Td_sysxmlContext,0)


        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDMLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDMLParser.XMLPUBLISH_STREAM, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_function" ):
                listener.enterXml_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_function" ):
                listener.exitXml_function(self)




    def xml_function(self):

        localctx = TeradataSQLDMLParser.Xml_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_xml_function)
        self._la = 0 # Token type
        try:
            self.state = 6054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5807
                self.match(TeradataSQLDMLParser.CREATEXML)
                self.state = 5808
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5809
                localctx.xml_data = self.scalar_expr(0)
                self.state = 5810
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5812
                    self.td_sysfnlib()


                self.state = 5815
                self.match(TeradataSQLDMLParser.DATASIZE)
                self.state = 5816
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5817
                self.scalar_expr(0)
                self.state = 5818
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5820
                self.match(TeradataSQLDMLParser.XMLQUERY)
                self.state = 5821
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5822
                localctx.xquery_expr = self.char_string_literal()
                self.state = 5824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 5823
                    self.xml_query_argument()


                self.state = 5827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5826
                    self.xml_returning_spec()


                self.state = 5830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==649:
                    self.state = 5829
                    self.xml_query_on_empty()


                self.state = 5832
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5834
                self.match(TeradataSQLDMLParser.XMLSERIALIZE)
                self.state = 5835
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5836
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5837
                localctx.xml_value_exp = self.scalar_expr(0)
                self.state = 5840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5838
                    self.match(TeradataSQLDMLParser.AS)
                    self.state = 5839
                    self.data_type()


                self.state = 5843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==653:
                    self.state = 5842
                    self.xml_encoding()


                self.state = 5850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 5845
                    self.match(TeradataSQLDMLParser.WITH)
                    self.state = 5847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5846
                        self.match(TeradataSQLDMLParser.NO)


                    self.state = 5849
                    self.match(TeradataSQLDMLParser.BOM)


                self.state = 5854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1023:
                    self.state = 5852
                    self.match(TeradataSQLDMLParser.VERSION)
                    self.state = 5853
                    self.char_string_literal()


                self.state = 5858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==661 or _la==701:
                    self.state = 5856
                    _la = self._input.LA(1)
                    if not(_la==661 or _la==701):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5857
                    self.match(TeradataSQLDMLParser.XMLDECLARATION)


                self.state = 5866
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 5860
                    self.match(TeradataSQLDMLParser.NO)
                    self.state = 5861
                    self.match(TeradataSQLDMLParser.INDENT)
                    pass
                elif token in [704]:
                    self.state = 5862
                    self.match(TeradataSQLDMLParser.INDENT)

                    self.state = 5863
                    self.match(TeradataSQLDMLParser.SIZE)
                    self.state = 5864
                    self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                    self.state = 5865
                    self.integer_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 5868
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5870
                self.match(TeradataSQLDMLParser.XMLDOCUMENT)
                self.state = 5871
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5872
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5873
                    self.xml_returning_spec()


                self.state = 5876
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5878
                self.match(TeradataSQLDMLParser.XMLELEMENT)
                self.state = 5879
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5880
                self.match(TeradataSQLDMLParser.NAME)
                self.state = 5881
                self.column_name()
                self.state = 5884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,735,self._ctx)
                if la_ == 1:
                    self.state = 5882
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5883
                    self.xml_namespace_declaration()


                self.state = 5888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
                if la_ == 1:
                    self.state = 5886
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5887
                    self.xml_attribute_declaration()


                self.state = 5892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5890
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5891
                    self.xml_value_declaration()


                self.state = 5895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5894
                    self.xml_returning_spec()


                self.state = 5897
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5899
                self.match(TeradataSQLDMLParser.XMLFOREST)
                self.state = 5900
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
                if la_ == 1:
                    self.state = 5901
                    self.xml_namespace_declaration()


                self.state = 5912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                if la_ == 1:
                    self.state = 5904
                    self.xml_forest_element_spec()
                    self.state = 5909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 5905
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 5906
                        self.xml_forest_element_spec()
                        self.state = 5911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 5914
                    self.xml_content_option_spec()


                self.state = 5918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5917
                    self.xml_returning_spec()


                self.state = 5920
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5921
                self.match(TeradataSQLDMLParser.XMLCONCAT)
                self.state = 5922
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5923
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5924
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5925
                    localctx.xml_value_expr = self.scalar_expr(0)
                    self.state = 5930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5931
                    self.xml_returning_spec()


                self.state = 5934
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5936
                self.match(TeradataSQLDMLParser.XMLCOMMENT)
                self.state = 5937
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5938
                localctx.xml_comment = self.scalar_expr(0)
                self.state = 5940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5939
                    self.xml_returning_spec()


                self.state = 5942
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5944
                self.match(TeradataSQLDMLParser.XMLPI)
                self.state = 5945
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5946
                self.match(TeradataSQLDMLParser.NAME)
                self.state = 5947
                self.column_name()
                self.state = 5950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5948
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 5949
                    self.scalar_expr(0)


                self.state = 5953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5952
                    self.xml_returning_spec()


                self.state = 5955
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5957
                self.match(TeradataSQLDMLParser.XMLTEXT)
                self.state = 5958
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5959
                localctx.xml_text = self.scalar_expr(0)
                self.state = 5961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5960
                    self.xml_returning_spec()


                self.state = 5963
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5965
                self.match(TeradataSQLDMLParser.XMLPARSE)
                self.state = 5966
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5967
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5968
                self.scalar_expr(0)
                self.state = 5969
                _la = self._input.LA(1)
                if not(_la==307 or _la==942):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5970
                self.match(TeradataSQLDMLParser.WHITESPACE)
                self.state = 5971
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5973
                self.match(TeradataSQLDMLParser.XMLVALIDATE)
                self.state = 5974
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5975
                _la = self._input.LA(1)
                if not(_la==593 or _la==636 or _la==914):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5976
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5977
                self.match(TeradataSQLDMLParser.ACCORDING)
                self.state = 5978
                self.match(TeradataSQLDMLParser.TO)
                self.state = 5979
                self.match(TeradataSQLDMLParser.XMLSCHEMA)
                self.state = 5980
                self.match(TeradataSQLDMLParser.VALUE)
                self.state = 5981
                localctx.xml_schema = self.scalar_expr(0)
                self.state = 5986
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [790]:
                    self.state = 5982
                    self.match(TeradataSQLDMLParser.NAMESPACE)
                    self.state = 5983
                    localctx.xml_uri = self.char_string_literal()
                    pass
                elif token in [268]:
                    self.state = 5984
                    self.match(TeradataSQLDMLParser.NO)
                    self.state = 5985
                    self.match(TeradataSQLDMLParser.NAMESPACE)
                    pass
                elif token in [646, 1214]:
                    pass
                else:
                    pass
                self.state = 5990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 5988
                    self.match(TeradataSQLDMLParser.ELEMENT)
                    self.state = 5989
                    localctx.xml_valid_element_name = self.scalar_expr(0)


                self.state = 5992
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5994
                self.match(TeradataSQLDMLParser.XMLAGG)
                self.state = 5995
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 5996
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 6007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 5997
                    self.match(TeradataSQLDMLParser.ORDER)
                    self.state = 5998
                    self.match(TeradataSQLDMLParser.BY)
                    self.state = 5999
                    self.order_by_spec_full()
                    self.state = 6004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6000
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 6001
                        self.order_by_spec_full()
                        self.state = 6006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 6009
                    self.xml_returning_spec()


                self.state = 6012
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6014
                self.match(TeradataSQLDMLParser.XMLSPLIT)
                self.state = 6015
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6016
                localctx.doc_id = self.scalar_expr(0)
                self.state = 6017
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6018
                localctx.source_doc = self.scalar_expr(0)
                self.state = 6019
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6020
                localctx.split_size = self.scalar_expr(0)
                self.state = 6021
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6022
                localctx.split_path = self.scalar_expr(0)
                self.state = 6027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6023
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6024
                    localctx._scalar_expr = self.scalar_expr(0)
                    localctx.replication_list.append(localctx._scalar_expr)
                    self.state = 6029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6030
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6032
                self.td_sysxml()
                self.state = 6033
                self.match(TeradataSQLDMLParser.XMLPUBLISH)
                self.state = 6034
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6035
                localctx.query_string = self.scalar_expr(0)
                self.state = 6036
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6037
                localctx.xslt = self.scalar_expr(0)
                self.state = 6038
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6039
                localctx.xml_string = self.scalar_expr(0)
                self.state = 6040
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6041
                localctx.result_code = self.scalar_expr(0)
                self.state = 6042
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6044
                self.td_sysxml()
                self.state = 6045
                self.match(TeradataSQLDMLParser.XMLPUBLISH_STREAM)
                self.state = 6046
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6047
                localctx.query_string = self.scalar_expr(0)
                self.state = 6048
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6049
                localctx.xslt = self.scalar_expr(0)
                self.state = 6050
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6051
                localctx.document_grouping_spec = self.scalar_expr(0)
                self.state = 6052
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Returns_clauseContext,0)


        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = TeradataSQLDMLParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 6078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6056
                self.function_name()
                self.state = 6057
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6058
                self.scalar_expr(0)
                self.state = 6063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6059
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6060
                    self.scalar_expr(0)
                    self.state = 6065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6066
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 6069
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
                if la_ == 1:
                    self.state = 6067
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 6068
                    self.window_spec()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6071
                self.function_name()
                self.state = 6072
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6073
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                self.state = 6076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,759,self._ctx)
                if la_ == 1:
                    self.state = 6074
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 6075
                    self.window_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_N(self):
            return self.getToken(TeradataSQLDMLParser.CASE_N, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def case_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Case_specContext,0)


        def RANGE_N(self):
            return self.getToken(TeradataSQLDMLParser.RANGE_N, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def BETWEEN(self):
            return self.getToken(TeradataSQLDMLParser.BETWEEN, 0)

        def range_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Range_exprContext,0)


        def range_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Range_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_partitioning_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_expr" ):
                listener.enterPartitioning_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_expr" ):
                listener.exitPartitioning_expr(self)




    def partitioning_expr(self):

        localctx = TeradataSQLDMLParser.Partitioning_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_partitioning_expr)
        self._la = 0 # Token type
        try:
            self.state = 6107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6080
                self.match(TeradataSQLDMLParser.CASE_N)
                self.state = 6081
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6082
                self.logical_expr(0)
                self.state = 6087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,761,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6083
                        self.match(TeradataSQLDMLParser.COMMA)
                        self.state = 6084
                        self.logical_expr(0) 
                    self.state = 6089
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,761,self._ctx)

                self.state = 6092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 6090
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6091
                    self.case_spec()


                self.state = 6094
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6096
                self.match(TeradataSQLDMLParser.RANGE_N)
                self.state = 6097
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6098
                self.scalar_expr(0)
                self.state = 6099
                self.match(TeradataSQLDMLParser.BETWEEN)
                self.state = 6100
                self.range_expr()
                self.state = 6103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 6101
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6102
                    self.range_spec()


                self.state = 6105
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysfnlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDMLParser.TD_SYSFNLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_td_sysfnlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysfnlib" ):
                listener.enterTd_sysfnlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysfnlib" ):
                listener.exitTd_sysfnlib(self)




    def td_sysfnlib(self):

        localctx = TeradataSQLDMLParser.Td_sysfnlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_td_sysfnlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6109
            self.match(TeradataSQLDMLParser.TD_SYSFNLIB)
            self.state = 6110
            self.match(TeradataSQLDMLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysxmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDMLParser.TD_SYSXML, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_td_sysxml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysxml" ):
                listener.enterTd_sysxml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysxml" ):
                listener.exitTd_sysxml(self)




    def td_sysxml(self):

        localctx = TeradataSQLDMLParser.Td_sysxmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_td_sysxml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6112
            self.match(TeradataSQLDMLParser.TD_SYSXML)
            self.state = 6113
            self.match(TeradataSQLDMLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyslibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSLIB(self):
            return self.getToken(TeradataSQLDMLParser.SYSLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_syslib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyslib" ):
                listener.enterSyslib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyslib" ):
                listener.exitSyslib(self)




    def syslib(self):

        localctx = TeradataSQLDMLParser.SyslibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_syslib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6115
            self.match(TeradataSQLDMLParser.SYSLIB)
            self.state = 6116
            self.match(TeradataSQLDMLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_server_dbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDMLParser.TD_SERVER_DB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_td_server_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_server_db" ):
                listener.enterTd_server_db(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_server_db" ):
                listener.exitTd_server_db(self)




    def td_server_db(self):

        localctx = TeradataSQLDMLParser.Td_server_dbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_td_server_db)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6118
            self.match(TeradataSQLDMLParser.TD_SERVER_DB)
            self.state = 6119
            self.match(TeradataSQLDMLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Translation_mappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDMLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDMLParser.UNICODE_TO_LOCALE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_translation_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_mapping" ):
                listener.enterTranslation_mapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_mapping" ):
                listener.exitTranslation_mapping(self)




    def translation_mapping(self):

        localctx = TeradataSQLDMLParser.Translation_mappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_translation_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6121
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def attribute_modification_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Attribute_modification_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Attribute_modification_optionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_attribute_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification" ):
                listener.enterAttribute_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification" ):
                listener.exitAttribute_modification(self)




    def attribute_modification(self):

        localctx = TeradataSQLDMLParser.Attribute_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_attribute_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6123
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6124
            self.attribute_modification_option()
            self.state = 6129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6125
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6126
                self.attribute_modification_option()
                self.state = 6131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6132
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDMLParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def STYLE(self):
            return self.getToken(TeradataSQLDMLParser.STYLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_clause" ):
                listener.enterReturns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_clause" ):
                listener.exitReturns_clause(self)




    def returns_clause(self):

        localctx = TeradataSQLDMLParser.Returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_returns_clause)
        try:
            self.state = 6139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6134
                self.match(TeradataSQLDMLParser.RETURNS)
                self.state = 6135
                self.data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6136
                self.match(TeradataSQLDMLParser.RETURNS)
                self.state = 6137
                self.match(TeradataSQLDMLParser.STYLE)
                self.state = 6138
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modification_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def teradata_type_conversion_data_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Teradata_type_conversion_data_attributeContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Casespecific_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_phraseContext,0)


        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Uppercase_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_attribute_modification_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification_option" ):
                listener.enterAttribute_modification_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification_option" ):
                listener.exitAttribute_modification_option(self)




    def attribute_modification_option(self):

        localctx = TeradataSQLDMLParser.Attribute_modification_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_attribute_modification_option)
        try:
            self.state = 6145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 262, 425]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6141
                self.teradata_type_conversion_data_attribute()
                pass
            elif token in [49, 88, 272, 1211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6142
                self.casespecific_phrase()
                pass
            elif token in [52, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6143
                self.character_set_phrase()
                pass
            elif token in [438, 455]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6144
                self.uppercase_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def teradata_type_conversion_data_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Teradata_type_conversion_data_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Teradata_type_conversion_data_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def character_set_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Character_set_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Character_set_phraseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_teradata_type_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion" ):
                listener.enterTeradata_type_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion" ):
                listener.exitTeradata_type_conversion(self)




    def teradata_type_conversion(self):

        localctx = TeradataSQLDMLParser.Teradata_type_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_teradata_type_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6147
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==262 or _la==425:
                self.state = 6148
                self.teradata_type_conversion_data_attribute()
                self.state = 6149
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6156
            self.data_type()
            self.state = 6164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6157
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 262, 425]:
                    self.state = 6158
                    self.teradata_type_conversion_data_attribute()
                    pass
                elif token in [52, 55]:
                    self.state = 6159
                    self.character_set_phrase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6167
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversion_data_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Format_phraseContext,0)


        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_teradata_type_conversion_data_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion_data_attribute" ):
                listener.enterTeradata_type_conversion_data_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion_data_attribute" ):
                listener.exitTeradata_type_conversion_data_attribute(self)




    def teradata_type_conversion_data_attribute(self):

        localctx = TeradataSQLDMLParser.Teradata_type_conversion_data_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_teradata_type_conversion_data_attribute)
        try:
            self.state = 6172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6169
                self.format_phrase()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6170
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6171
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def CASE(self):
            return self.getToken(TeradataSQLDMLParser.CASE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDMLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDMLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_case_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_spec" ):
                listener.enterCase_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_spec" ):
                listener.exitCase_spec(self)




    def case_spec(self):

        localctx = TeradataSQLDMLParser.Case_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_case_spec)
        self._la = 0 # Token type
        try:
            self.state = 6181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6174
                self.match(TeradataSQLDMLParser.NO)
                self.state = 6175
                self.match(TeradataSQLDMLParser.CASE)
                self.state = 6178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 6176
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6177
                    self.match(TeradataSQLDMLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6180
                self.match(TeradataSQLDMLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Range_expr_1Context,0)


        def range_expr_2(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Range_expr_2Context,0)


        def range_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Range_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr" ):
                listener.enterRange_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr" ):
                listener.exitRange_expr(self)




    def range_expr(self):

        localctx = TeradataSQLDMLParser.Range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_range_expr)
        try:
            self.state = 6186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6183
                self.range_expr_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6184
                self.range_expr_2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6185
                self.range_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Range_expr_1Context,0)


        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Range_expr_3Context,i)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_range_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_list" ):
                listener.enterRange_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_list" ):
                listener.exitRange_list(self)




    def range_list(self):

        localctx = TeradataSQLDMLParser.Range_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_range_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6188
                self.range_expr_3()
                pass
            elif token in [1219]:
                self.state = 6189
                self.match(TeradataSQLDMLParser.MUL_SIGN)
                self.state = 6192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 6190
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6191
                    self.scalar_expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,777,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6196
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6197
                    self.range_expr_3() 
                self.state = 6202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,777,self._ctx)

            self.state = 6203
            self.match(TeradataSQLDMLParser.COMMA)
            self.state = 6204
            self.range_expr_1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.MUL_SIGN, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDMLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_range_expr_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_1" ):
                listener.enterRange_expr_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_1" ):
                listener.exitRange_expr_1(self)




    def range_expr_1(self):

        localctx = TeradataSQLDMLParser.Range_expr_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_range_expr_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6206
            self.scalar_expr(0)
            self.state = 6207
            self.match(TeradataSQLDMLParser.AND)
            self.state = 6210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6208
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 6209
                self.match(TeradataSQLDMLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 6212
                self.match(TeradataSQLDMLParser.EACH)
                self.state = 6213
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLDMLParser.MUL_SIGN, i)

        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_range_expr_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_2" ):
                listener.enterRange_expr_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_2" ):
                listener.exitRange_expr_2(self)




    def range_expr_2(self):

        localctx = TeradataSQLDMLParser.Range_expr_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_range_expr_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6216
            self.match(TeradataSQLDMLParser.MUL_SIGN)
            self.state = 6217
            self.match(TeradataSQLDMLParser.AND)
            self.state = 6220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6218
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 6219
                self.match(TeradataSQLDMLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDMLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_range_expr_3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_3" ):
                listener.enterRange_expr_3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_3" ):
                listener.exitRange_expr_3(self)




    def range_expr_3(self):

        localctx = TeradataSQLDMLParser.Range_expr_3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_range_expr_3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6222
            self.scalar_expr(0)

            self.state = 6223
            self.match(TeradataSQLDMLParser.AND)
            self.state = 6224
            self.scalar_expr(0)
            self.state = 6228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 6226
                self.match(TeradataSQLDMLParser.EACH)
                self.state = 6227
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDMLParser.RANGE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDMLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDMLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_range_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_spec" ):
                listener.enterRange_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_spec" ):
                listener.exitRange_spec(self)




    def range_spec(self):

        localctx = TeradataSQLDMLParser.Range_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_range_spec)
        self._la = 0 # Token type
        try:
            self.state = 6237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6230
                self.match(TeradataSQLDMLParser.NO)
                self.state = 6231
                self.match(TeradataSQLDMLParser.RANGE)
                self.state = 6234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 6232
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6233
                    self.match(TeradataSQLDMLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6236
                self.match(TeradataSQLDMLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_bucket_number_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sparcemap_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext
            self.contiguousmap_name = None # Char_string_literalContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def MAP(self):
            return self.getToken(TeradataSQLDMLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, i)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDMLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_hash_bucket_number_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_bucket_number_expr" ):
                listener.enterHash_bucket_number_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_bucket_number_expr" ):
                listener.exitHash_bucket_number_expr(self)




    def hash_bucket_number_expr(self):

        localctx = TeradataSQLDMLParser.Hash_bucket_number_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_hash_bucket_number_expr)
        self._la = 0 # Token type
        try:
            self.state = 6258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6239
                self.scalar_expr(0)
                self.state = 6248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 6240
                    self.match(TeradataSQLDMLParser.MAP)
                    self.state = 6241
                    self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                    self.state = 6242
                    localctx.sparcemap_name = self.char_string_literal()
                    self.state = 6243
                    self.match(TeradataSQLDMLParser.COLOCATE)
                    self.state = 6244
                    self.match(TeradataSQLDMLParser.USING)
                    self.state = 6245
                    self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                    self.state = 6246
                    localctx.colocation_name = self.char_string_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6250
                self.scalar_expr(0)
                self.state = 6251
                self.match(TeradataSQLDMLParser.MAP)
                self.state = 6252
                self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                self.state = 6253
                localctx.contiguousmap_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6255
                self.match(TeradataSQLDMLParser.MAP)
                self.state = 6256
                self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                self.state = 6257
                localctx.contiguousmap_name = self.char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDMLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_partition_byContext,0)


        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_order_byContext,0)


        def window_rows(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_rowsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_window_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec" ):
                listener.enterWindow_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec" ):
                listener.exitWindow_spec(self)




    def window_spec(self):

        localctx = TeradataSQLDMLParser.Window_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_window_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6260
            self.match(TeradataSQLDMLParser.OVER)
            self.state = 6261
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 6262
                self.window_partition_by()


            self.state = 6266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 6265
                self.window_order_by()


            self.state = 6269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==364:
                self.state = 6268
                self.window_rows()


            self.state = 6271
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_without_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDMLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_partition_byContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_window_spec_without_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_without_rows" ):
                listener.enterWindow_spec_without_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_without_rows" ):
                listener.exitWindow_spec_without_rows(self)




    def window_spec_without_rows(self):

        localctx = TeradataSQLDMLParser.Window_spec_without_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_window_spec_without_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6273
            self.match(TeradataSQLDMLParser.OVER)
            self.state = 6274
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 6275
                self.window_partition_by()


            self.state = 6278
            self.window_order_by()
            self.state = 6279
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_with_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDMLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Window_partition_byContext,0)


        def with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_tiesContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_window_spec_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_with_ties" ):
                listener.enterWindow_spec_with_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_with_ties" ):
                listener.exitWindow_spec_with_ties(self)




    def window_spec_with_ties(self):

        localctx = TeradataSQLDMLParser.Window_spec_with_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_window_spec_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6281
            self.match(TeradataSQLDMLParser.OVER)
            self.state = 6282
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 6283
                self.window_partition_by()


            self.state = 6286
            self.window_order_by()
            self.state = 6288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6287
                self.with_ties()


            self.state = 6290
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(TeradataSQLDMLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_window_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_by" ):
                listener.enterWindow_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_by" ):
                listener.exitWindow_partition_by(self)




    def window_partition_by(self):

        localctx = TeradataSQLDMLParser.Window_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_window_partition_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6292
            self.match(TeradataSQLDMLParser.PARTITION)
            self.state = 6293
            self.match(TeradataSQLDMLParser.BY)
            self.state = 6294
            self.scalar_expr(0)
            self.state = 6299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6295
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6296
                self.scalar_expr(0)
                self.state = 6301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDMLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def RESET(self):
            return self.getToken(TeradataSQLDMLParser.RESET, 0)

        def WHEN(self):
            return self.getToken(TeradataSQLDMLParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_window_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_by" ):
                listener.enterWindow_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_by" ):
                listener.exitWindow_order_by(self)




    def window_order_by(self):

        localctx = TeradataSQLDMLParser.Window_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_window_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6302
            self.match(TeradataSQLDMLParser.ORDER)
            self.state = 6303
            self.match(TeradataSQLDMLParser.BY)
            self.state = 6304
            self.order_by_spec_full()
            self.state = 6309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6305
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6306
                self.order_by_spec_full()
                self.state = 6311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==884:
                self.state = 6312
                self.match(TeradataSQLDMLParser.RESET)
                self.state = 6313
                self.match(TeradataSQLDMLParser.WHEN)
                self.state = 6314
                self.logical_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(TeradataSQLDMLParser.ROWS, 0)

        def UNBOUNDED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.UNBOUNDED)
            else:
                return self.getToken(TeradataSQLDMLParser.UNBOUNDED, i)

        def PRECEDING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.PRECEDING)
            else:
                return self.getToken(TeradataSQLDMLParser.PRECEDING, i)

        def number_of_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Number_of_rowsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Number_of_rowsContext,i)


        def CURRENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.CURRENT)
            else:
                return self.getToken(TeradataSQLDMLParser.CURRENT, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.ROW)
            else:
                return self.getToken(TeradataSQLDMLParser.ROW, i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDMLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDMLParser.AND, 0)

        def FOLLOWING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.FOLLOWING)
            else:
                return self.getToken(TeradataSQLDMLParser.FOLLOWING, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_window_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_rows" ):
                listener.enterWindow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_rows" ):
                listener.exitWindow_rows(self)




    def window_rows(self):

        localctx = TeradataSQLDMLParser.Window_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_window_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6317
            self.match(TeradataSQLDMLParser.ROWS)
            self.state = 6402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1013]:
                self.state = 6318
                self.match(TeradataSQLDMLParser.UNBOUNDED)
                self.state = 6319
                self.match(TeradataSQLDMLParser.PRECEDING)
                pass
            elif token in [1194]:
                self.state = 6320
                self.number_of_rows()
                self.state = 6321
                self.match(TeradataSQLDMLParser.PRECEDING)
                pass
            elif token in [93]:
                self.state = 6323
                self.match(TeradataSQLDMLParser.CURRENT)
                self.state = 6324
                self.match(TeradataSQLDMLParser.ROW)
                pass
            elif token in [35]:
                self.state = 6325
                self.match(TeradataSQLDMLParser.BETWEEN)
                self.state = 6400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
                if la_ == 1:
                    self.state = 6326
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6327
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6328
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6329
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6330
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 2:
                    self.state = 6331
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6332
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6333
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6334
                    self.number_of_rows()
                    self.state = 6335
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    pass

                elif la_ == 3:
                    self.state = 6337
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6338
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6339
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6340
                    self.match(TeradataSQLDMLParser.CURRENT)
                    self.state = 6341
                    self.match(TeradataSQLDMLParser.ROW)
                    pass

                elif la_ == 4:
                    self.state = 6342
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6343
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6344
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6345
                    self.number_of_rows()
                    self.state = 6346
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 5:
                    self.state = 6348
                    self.number_of_rows()
                    self.state = 6349
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6350
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6351
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6352
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 6:
                    self.state = 6354
                    self.number_of_rows()
                    self.state = 6355
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6356
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6357
                    self.number_of_rows()
                    self.state = 6358
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    pass

                elif la_ == 7:
                    self.state = 6360
                    self.number_of_rows()
                    self.state = 6361
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6362
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6363
                    self.match(TeradataSQLDMLParser.CURRENT)
                    self.state = 6364
                    self.match(TeradataSQLDMLParser.ROW)
                    pass

                elif la_ == 8:
                    self.state = 6366
                    self.number_of_rows()
                    self.state = 6367
                    self.match(TeradataSQLDMLParser.PRECEDING)
                    self.state = 6368
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6369
                    self.number_of_rows()
                    self.state = 6370
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 9:
                    self.state = 6372
                    self.match(TeradataSQLDMLParser.CURRENT)
                    self.state = 6373
                    self.match(TeradataSQLDMLParser.ROW)
                    self.state = 6374
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6375
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6376
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 10:
                    self.state = 6377
                    self.match(TeradataSQLDMLParser.CURRENT)
                    self.state = 6378
                    self.match(TeradataSQLDMLParser.ROW)
                    self.state = 6379
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6380
                    self.match(TeradataSQLDMLParser.CURRENT)
                    self.state = 6381
                    self.match(TeradataSQLDMLParser.ROW)
                    pass

                elif la_ == 11:
                    self.state = 6382
                    self.match(TeradataSQLDMLParser.CURRENT)
                    self.state = 6383
                    self.match(TeradataSQLDMLParser.ROW)
                    self.state = 6384
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6385
                    self.number_of_rows()
                    self.state = 6386
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 12:
                    self.state = 6388
                    self.number_of_rows()
                    self.state = 6389
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    self.state = 6390
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6391
                    self.match(TeradataSQLDMLParser.UNBOUNDED)
                    self.state = 6392
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass

                elif la_ == 13:
                    self.state = 6394
                    self.number_of_rows()
                    self.state = 6395
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    self.state = 6396
                    self.match(TeradataSQLDMLParser.AND)
                    self.state = 6397
                    self.number_of_rows()
                    self.state = 6398
                    self.match(TeradataSQLDMLParser.FOLLOWING)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_param_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Format_phraseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_json_param_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_param_spec" ):
                listener.enterJson_param_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_param_spec" ):
                listener.exitJson_param_spec(self)




    def json_param_spec(self):

        localctx = TeradataSQLDMLParser.Json_param_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_json_param_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6404
            localctx.param = self.scalar_expr(0)
            self.state = 6409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 6405
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6406
                self.format_phrase()
                self.state = 6407
                self.match(TeradataSQLDMLParser.CLOSE_PAR)


            self.state = 6413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6411
                self.match(TeradataSQLDMLParser.AS)
                self.state = 6412
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_context_item = None # Column_nameContext

        def PASSING(self):
            return self.getToken(TeradataSQLDMLParser.PASSING, 0)

        def xml_query_variable_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Xml_query_variable_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_query_variable_specContext,i)


        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDMLParser.VALUE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_query_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_argument" ):
                listener.enterXml_query_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_argument" ):
                listener.exitXml_query_argument(self)




    def xml_query_argument(self):

        localctx = TeradataSQLDMLParser.Xml_query_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_xml_query_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6415
            self.match(TeradataSQLDMLParser.PASSING)
            self.state = 6418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 6416
                self.match(TeradataSQLDMLParser.BY)
                self.state = 6417
                self.match(TeradataSQLDMLParser.VALUE)


            self.state = 6429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,801,self._ctx)
            if la_ == 1:
                self.state = 6420
                localctx.xml_query_context_item = self.column_name()
                pass

            elif la_ == 2:
                self.state = 6421
                self.xml_query_variable_spec()
                self.state = 6426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6422
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6423
                    self.xml_query_variable_spec()
                    self.state = 6428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_variable_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_variable = None # Column_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_query_variable_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_variable_spec" ):
                listener.enterXml_query_variable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_variable_spec" ):
                listener.exitXml_query_variable_spec(self)




    def xml_query_variable_spec(self):

        localctx = TeradataSQLDMLParser.Xml_query_variable_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_xml_query_variable_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6431
            localctx.xml_query_variable = self.column_name()
            self.state = 6432
            self.match(TeradataSQLDMLParser.AS)
            self.state = 6433
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDMLParser.XMLATTRIBUTES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def xml_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Xml_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_declaration" ):
                listener.enterXml_attribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_declaration" ):
                listener.exitXml_attribute_declaration(self)




    def xml_attribute_declaration(self):

        localctx = TeradataSQLDMLParser.Xml_attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_xml_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6435
            self.match(TeradataSQLDMLParser.XMLATTRIBUTES)
            self.state = 6436
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6437
            self.xml_attribute_spec()
            self.state = 6442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6438
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6439
                self.xml_attribute_spec()
                self.state = 6444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6445
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_attribute_value = None # Column_nameContext
            self.xml_attribute_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_spec" ):
                listener.enterXml_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_spec" ):
                listener.exitXml_attribute_spec(self)




    def xml_attribute_spec(self):

        localctx = TeradataSQLDMLParser.Xml_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_xml_attribute_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6447
            localctx.xml_attribute_value = self.column_name()
            self.state = 6450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6448
                self.match(TeradataSQLDMLParser.AS)
                self.state = 6449
                localctx.xml_attribute_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_forest_element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_forest_element_value = None # Column_nameContext
            self.xml_forest_element_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_forest_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_forest_element_spec" ):
                listener.enterXml_forest_element_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_forest_element_spec" ):
                listener.exitXml_forest_element_spec(self)




    def xml_forest_element_spec(self):

        localctx = TeradataSQLDMLParser.Xml_forest_element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_xml_forest_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6452
            localctx.xml_forest_element_value = self.column_name()
            self.state = 6455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6453
                self.match(TeradataSQLDMLParser.AS)
                self.state = 6454
                localctx.xml_forest_element_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_value_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_value_expr = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_content_option_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_value_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_value_declaration" ):
                listener.enterXml_value_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_value_declaration" ):
                listener.exitXml_value_declaration(self)




    def xml_value_declaration(self):

        localctx = TeradataSQLDMLParser.Xml_value_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_xml_value_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6457
            localctx.xml_value_expr = self.scalar_expr(0)
            self.state = 6459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 6458
                self.xml_content_option_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDMLParser.XMLNAMESPACES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def xml_namespace_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Xml_namespace_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_namespace_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_declaration" ):
                listener.enterXml_namespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_declaration" ):
                listener.exitXml_namespace_declaration(self)




    def xml_namespace_declaration(self):

        localctx = TeradataSQLDMLParser.Xml_namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_xml_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6461
            self.match(TeradataSQLDMLParser.XMLNAMESPACES)
            self.state = 6462
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6463
            self.xml_namespace_spec()
            self.state = 6468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6464
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6465
                self.xml_namespace_spec()
                self.state = 6470
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6471
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Char_string_literalContext
            self.xml_namespace_prefix = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDMLParser.DEFAULT, 0)

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_namespace_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_spec" ):
                listener.enterXml_namespace_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_spec" ):
                listener.exitXml_namespace_spec(self)




    def xml_namespace_spec(self):

        localctx = TeradataSQLDMLParser.Xml_namespace_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_xml_namespace_spec)
        try:
            self.state = 6481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6473
                localctx.xml_namespace_uri = self.char_string_literal()
                self.state = 6474
                self.match(TeradataSQLDMLParser.AS)
                self.state = 6475
                localctx.xml_namespace_prefix = self.alias_name()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6477
                self.match(TeradataSQLDMLParser.DEFAULT)
                self.state = 6478
                localctx.xml_namespace_uri = self.char_string_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6479
                self.match(TeradataSQLDMLParser.NO)
                self.state = 6480
                self.match(TeradataSQLDMLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_columns_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(TeradataSQLDMLParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,i)


        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.FOR)
            else:
                return self.getToken(TeradataSQLDMLParser.FOR, i)

        def ORDINALITY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.ORDINALITY)
            else:
                return self.getToken(TeradataSQLDMLParser.ORDINALITY, i)

        def xml_regular_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Xml_regular_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Xml_regular_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_columns_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_columns_spec" ):
                listener.enterXml_columns_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_columns_spec" ):
                listener.exitXml_columns_spec(self)




    def xml_columns_spec(self):

        localctx = TeradataSQLDMLParser.Xml_columns_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_xml_columns_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6483
            self.match(TeradataSQLDMLParser.COLUMNS)
            self.state = 6489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.state = 6484
                self.column_name()
                self.state = 6485
                self.match(TeradataSQLDMLParser.FOR)
                self.state = 6486
                self.match(TeradataSQLDMLParser.ORDINALITY)
                pass

            elif la_ == 2:
                self.state = 6488
                self.xml_regular_column_definition()
                pass


            self.state = 6501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6491
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
                if la_ == 1:
                    self.state = 6492
                    self.column_name()
                    self.state = 6493
                    self.match(TeradataSQLDMLParser.FOR)
                    self.state = 6494
                    self.match(TeradataSQLDMLParser.ORDINALITY)
                    pass

                elif la_ == 2:
                    self.state = 6496
                    self.xml_regular_column_definition()
                    pass


                self.state = 6503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_regular_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def PATH(self):
            return self.getToken(TeradataSQLDMLParser.PATH, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDMLParser.DEFAULT, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LiteralContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_regular_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_regular_column_definition" ):
                listener.enterXml_regular_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_regular_column_definition" ):
                listener.exitXml_regular_column_definition(self)




    def xml_regular_column_definition(self):

        localctx = TeradataSQLDMLParser.Xml_regular_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_xml_regular_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6504
            localctx.name = self.unqualified_name()
            self.state = 6505
            self.data_type()
            self.state = 6508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1082:
                self.state = 6506
                self.match(TeradataSQLDMLParser.PATH)
                self.state = 6507
                self.char_string_literal()


            self.state = 6512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 6510
                self.match(TeradataSQLDMLParser.DEFAULT)
                self.state = 6511
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_encoding_name = None # Char_string_literalContext

        def ENCODING(self):
            return self.getToken(TeradataSQLDMLParser.ENCODING, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_encoding" ):
                listener.enterXml_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_encoding" ):
                listener.exitXml_encoding(self)




    def xml_encoding(self):

        localctx = TeradataSQLDMLParser.Xml_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_xml_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6514
            self.match(TeradataSQLDMLParser.ENCODING)
            self.state = 6515
            localctx.xml_encoding_name = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_on_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.EMPTY)
            else:
                return self.getToken(TeradataSQLDMLParser.EMPTY, i)

        def NULL(self):
            return self.getToken(TeradataSQLDMLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_query_on_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_on_empty" ):
                listener.enterXml_query_on_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_on_empty" ):
                listener.exitXml_query_on_empty(self)




    def xml_query_on_empty(self):

        localctx = TeradataSQLDMLParser.Xml_query_on_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_xml_query_on_empty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6517
            _la = self._input.LA(1)
            if not(_la==274 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6518
            self.match(TeradataSQLDMLParser.ON)
            self.state = 6519
            self.match(TeradataSQLDMLParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_returning_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(TeradataSQLDMLParser.RETURNING, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDMLParser.CONTENT, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDMLParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_returning_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_returning_spec" ):
                listener.enterXml_returning_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_returning_spec" ):
                listener.exitXml_returning_spec(self)




    def xml_returning_spec(self):

        localctx = TeradataSQLDMLParser.Xml_returning_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_xml_returning_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6521
            self.match(TeradataSQLDMLParser.RETURNING)
            self.state = 6522
            _la = self._input.LA(1)
            if not(_la==593 or _la==914):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_content_option_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TeradataSQLDMLParser.OPTION, 0)

        def ON(self):
            return self.getToken(TeradataSQLDMLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.NULL)
            else:
                return self.getToken(TeradataSQLDMLParser.NULL, i)

        def NIL(self):
            return self.getToken(TeradataSQLDMLParser.NIL, 0)

        def NO(self):
            return self.getToken(TeradataSQLDMLParser.NO, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDMLParser.CONTENT, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDMLParser.EMPTY, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDMLParser.ABSENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_xml_content_option_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content_option_spec" ):
                listener.enterXml_content_option_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content_option_spec" ):
                listener.exitXml_content_option_spec(self)




    def xml_content_option_spec(self):

        localctx = TeradataSQLDMLParser.Xml_content_option_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_xml_content_option_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6524
            self.match(TeradataSQLDMLParser.OPTION)
            self.state = 6532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.state = 6525
                _la = self._input.LA(1)
                if not(_la==274 or _la==489 or _la==649 or _la==794):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6526
                self.match(TeradataSQLDMLParser.ON)
                self.state = 6527
                self.match(TeradataSQLDMLParser.NULL)
                pass

            elif la_ == 2:
                self.state = 6528
                self.match(TeradataSQLDMLParser.NIL)
                self.state = 6529
                self.match(TeradataSQLDMLParser.ON)
                self.state = 6530
                self.match(TeradataSQLDMLParser.NO)
                self.state = 6531
                self.match(TeradataSQLDMLParser.CONTENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_respect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(TeradataSQLDMLParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDMLParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDMLParser.RESPECT, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_ignore_respect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_respect_nulls" ):
                listener.enterIgnore_respect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_respect_nulls" ):
                listener.exitIgnore_respect_nulls(self)




    def ignore_respect_nulls(self):

        localctx = TeradataSQLDMLParser.Ignore_respect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_ignore_respect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6534
            _la = self._input.LA(1)
            if not(_la==697 or _la==885):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6535
            self.match(TeradataSQLDMLParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_of_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_number_of_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_of_rows" ):
                listener.enterNumber_of_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_of_rows" ):
                listener.exitNumber_of_rows(self)




    def number_of_rows(self):

        localctx = TeradataSQLDMLParser.Number_of_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_number_of_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6537
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDMLParser.TIES, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDMLParser.LOW, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDMLParser.HIGH, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDMLParser.AVG, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDMLParser.DENSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_ties" ):
                listener.enterWith_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_ties" ):
                listener.exitWith_ties(self)




    def with_ties(self):

        localctx = TeradataSQLDMLParser.With_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6539
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 6540
            self.match(TeradataSQLDMLParser.TIES)
            self.state = 6541
            _la = self._input.LA(1)
            if not(_la==32 or _la==629 or _la==690 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TeradataSQLDMLParser.PIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def pivot_with_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_with_phraseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TeradataSQLDMLParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_pivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6543
            self.match(TeradataSQLDMLParser.PIVOT)
            self.state = 6544
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6545
            self.pivot_spec()
            self.state = 6546
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 6548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6547
                self.pivot_with_phrase()


            self.state = 6551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6550
                self.match(TeradataSQLDMLParser.AS)


            self.state = 6553
            self.alias_name()
            self.state = 6555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
            if la_ == 1:
                self.state = 6554
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_agg_func_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Pivot_agg_func_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_agg_func_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def pivot_for_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_for_phraseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_spec" ):
                listener.enterPivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_spec" ):
                listener.exitPivot_spec(self)




    def pivot_spec(self):

        localctx = TeradataSQLDMLParser.Pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_pivot_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6557
            self.pivot_agg_func_spec()
            self.state = 6562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6558
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6559
                self.pivot_agg_func_spec()
                self.state = 6564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6565
            self.match(TeradataSQLDMLParser.FOR)
            self.state = 6566
            self.pivot_for_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def pivot_with_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Pivot_with_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_with_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_with_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_phrase" ):
                listener.enterPivot_with_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_phrase" ):
                listener.exitPivot_with_phrase(self)




    def pivot_with_phrase(self):

        localctx = TeradataSQLDMLParser.Pivot_with_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_pivot_with_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6568
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 6569
            self.pivot_with_spec()
            self.state = 6574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6570
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6571
                self.pivot_with_spec()
                self.state = 6576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_agg_func_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_agg_func_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_agg_func_spec" ):
                listener.enterPivot_agg_func_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_agg_func_spec" ):
                listener.exitPivot_agg_func_spec(self)




    def pivot_agg_func_spec(self):

        localctx = TeradataSQLDMLParser.Pivot_agg_func_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_pivot_agg_func_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6577
            self.aggregate_function()
            self.state = 6582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 6579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6578
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 6581
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def pivot_expr_spec_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Pivot_expr_spec_scalarContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_expr_spec_scalarContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def pivot_expr_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Pivot_expr_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Pivot_expr_spec_listContext,i)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_for_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_phrase" ):
                listener.enterPivot_for_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_phrase" ):
                listener.exitPivot_for_phrase(self)




    def pivot_for_phrase(self):

        localctx = TeradataSQLDMLParser.Pivot_for_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_pivot_for_phrase)
        self._la = 0 # Token type
        try:
            self.state = 6627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6584
                self.column_name()
                self.state = 6585
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6586
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6587
                self.pivot_expr_spec_scalar()
                self.state = 6592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6588
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6589
                    self.pivot_expr_spec_scalar()
                    self.state = 6594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6595
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6597
                self.column_list()
                self.state = 6598
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6599
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6600
                self.pivot_expr_spec_scalar()
                self.state = 6605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6601
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6602
                    self.pivot_expr_spec_scalar()
                    self.state = 6607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6608
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6610
                self.column_list()
                self.state = 6611
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6612
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6613
                self.pivot_expr_spec_list()
                self.state = 6618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6614
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6615
                    self.pivot_expr_spec_list()
                    self.state = 6620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6621
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6623
                self.column_name()
                self.state = 6624
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6625
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_with_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_spec" ):
                listener.enterPivot_with_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_spec" ):
                listener.exitPivot_with_spec(self)




    def pivot_with_spec(self):

        localctx = TeradataSQLDMLParser.Pivot_with_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_pivot_with_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6629
            self.aggregate_function()
            self.state = 6631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6630
                self.match(TeradataSQLDMLParser.AS)


            self.state = 6633
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_expr_spec_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_scalar" ):
                listener.enterPivot_expr_spec_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_scalar" ):
                listener.exitPivot_expr_spec_scalar(self)




    def pivot_expr_spec_scalar(self):

        localctx = TeradataSQLDMLParser.Pivot_expr_spec_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_pivot_expr_spec_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6635
            self.scalar_expr(0)
            self.state = 6640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 6637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6636
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 6639
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_pivot_expr_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_list" ):
                listener.enterPivot_expr_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_list" ):
                listener.exitPivot_expr_spec_list(self)




    def pivot_expr_spec_list(self):

        localctx = TeradataSQLDMLParser.Pivot_expr_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_pivot_expr_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6642
            self.scalar_expr_list_comma_separated()
            self.state = 6644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6643
                self.match(TeradataSQLDMLParser.AS)


            self.state = 6646
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDMLParser.UNPIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unpivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDMLParser.NULLS, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def INCLUDE(self):
            return self.getToken(TeradataSQLDMLParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDMLParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TeradataSQLDMLParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_unpivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6648
            self.match(TeradataSQLDMLParser.UNPIVOT)
            self.state = 6651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==660 or _la==700:
                self.state = 6649
                _la = self._input.LA(1)
                if not(_la==660 or _la==700):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6650
                self.match(TeradataSQLDMLParser.NULLS)


            self.state = 6653
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6654
            self.unpivot_spec()
            self.state = 6655
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
            self.state = 6657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6656
                self.match(TeradataSQLDMLParser.AS)


            self.state = 6659
            self.alias_name()
            self.state = 6661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
            if la_ == 1:
                self.state = 6660
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def unpivot_column_name_spec_single(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Unpivot_column_name_spec_singleContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Unpivot_column_name_spec_singleContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def unpivot_column_name_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Unpivot_column_name_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Unpivot_column_name_spec_listContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_spec" ):
                listener.enterUnpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_spec" ):
                listener.exitUnpivot_spec(self)




    def unpivot_spec(self):

        localctx = TeradataSQLDMLParser.Unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_unpivot_spec)
        self._la = 0 # Token type
        try:
            self.state = 6693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363, 366, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6663
                self.column_name()
                self.state = 6664
                self.match(TeradataSQLDMLParser.FOR)
                self.state = 6665
                self.column_name()
                self.state = 6666
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6667
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6668
                self.unpivot_column_name_spec_single()
                self.state = 6673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6669
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6670
                    self.unpivot_column_name_spec_single()
                    self.state = 6675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6676
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6678
                self.column_list()
                self.state = 6679
                self.match(TeradataSQLDMLParser.FOR)
                self.state = 6680
                self.column_name()
                self.state = 6681
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6682
                self.match(TeradataSQLDMLParser.OPEN_PAR)
                self.state = 6683
                self.unpivot_column_name_spec_list()
                self.state = 6688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6684
                    self.match(TeradataSQLDMLParser.COMMA)
                    self.state = 6685
                    self.unpivot_column_name_spec_list()
                    self.state = 6690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6691
                self.match(TeradataSQLDMLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unpivot_column_name_spec_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_single" ):
                listener.enterUnpivot_column_name_spec_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_single" ):
                listener.exitUnpivot_column_name_spec_single(self)




    def unpivot_column_name_spec_single(self):

        localctx = TeradataSQLDMLParser.Unpivot_column_name_spec_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_unpivot_column_name_spec_single)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6695
            self.column_name()
            self.state = 6700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 6697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6696
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 6699
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_unpivot_column_name_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_list" ):
                listener.enterUnpivot_column_name_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_list" ):
                listener.exitUnpivot_column_name_spec_list(self)




    def unpivot_column_name_spec_list(self):

        localctx = TeradataSQLDMLParser.Unpivot_column_name_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_unpivot_column_name_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6702
            self.column_list()
            self.state = 6707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 6704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6703
                    self.match(TeradataSQLDMLParser.AS)


                self.state = 6706
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_timezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(TeradataSQLDMLParser.AT, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDMLParser.LOCAL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDMLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDMLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_at_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_timezone" ):
                listener.enterAt_timezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_timezone" ):
                listener.exitAt_timezone(self)




    def at_timezone(self):

        localctx = TeradataSQLDMLParser.At_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_at_timezone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6709
            self.match(TeradataSQLDMLParser.AT)
            self.state = 6716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 6710
                self.match(TeradataSQLDMLParser.LOCAL)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
                if la_ == 1:
                    self.state = 6711
                    self.match(TeradataSQLDMLParser.TIME)
                    self.state = 6712
                    self.match(TeradataSQLDMLParser.ZONE)


                self.state = 6715
                self.scalar_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elements_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_expr_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_elements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements_list" ):
                listener.enterElements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements_list" ):
                listener.exitElements_list(self)




    def elements_list(self):

        localctx = TeradataSQLDMLParser.Elements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_elements_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.state = 6718
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 6719
                self.scalar_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.OR)
            else:
                return self.getToken(TeradataSQLDMLParser.OR, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_scalar_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list" ):
                listener.enterScalar_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list" ):
                listener.exitScalar_expr_list(self)




    def scalar_expr_list(self):

        localctx = TeradataSQLDMLParser.Scalar_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_scalar_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6722
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6723
            self.scalar_expr(0)
            self.state = 6728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==1208:
                self.state = 6724
                _la = self._input.LA(1)
                if not(_la==290 or _la==1208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6725
                self.scalar_expr(0)
                self.state = 6730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6731
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_list_comma_separatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_scalar_expr_list_comma_separated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list_comma_separated" ):
                listener.enterScalar_expr_list_comma_separated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list_comma_separated" ):
                listener.exitScalar_expr_list_comma_separated(self)




    def scalar_expr_list_comma_separated(self):

        localctx = TeradataSQLDMLParser.Scalar_expr_list_comma_separatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_scalar_expr_list_comma_separated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6733
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6734
            self.scalar_expr(0)
            self.state = 6739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6735
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6736
                self.scalar_expr(0)
                self.state = 6741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6742
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = TeradataSQLDMLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6744
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6745
            self.column_name()
            self.state = 6750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6746
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6747
                self.column_name()
                self.state = 6752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6753
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TeradataSQLDMLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6755
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6756
                self.with_request_modifier()


            self.state = 6759
            self.query_expr(0)
            self.state = 6760
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = TeradataSQLDMLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6762
            localctx.name = self.unqualified_name()
            self.state = 6763
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TeradataSQLDMLParser.COLON, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = TeradataSQLDMLParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6765
            self.match(TeradataSQLDMLParser.COLON)
            self.state = 6766
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_reference = None # Variable_referenceContext
            self.name = None # Unqualified_nameContext

        def DOT_(self):
            return self.getToken(TeradataSQLDMLParser.DOT_, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_referenceContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_cursor_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_variable_reference" ):
                listener.enterCursor_variable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_variable_reference" ):
                listener.exitCursor_variable_reference(self)




    def cursor_variable_reference(self):

        localctx = TeradataSQLDMLParser.Cursor_variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_cursor_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6768
            localctx.cursor_reference = self.variable_reference()
            self.state = 6769
            self.match(TeradataSQLDMLParser.DOT_)
            self.state = 6770
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameter_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Parameter_nameContext,0)


        def COLON(self):
            return self.getToken(TeradataSQLDMLParser.COLON, 0)

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_macro_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter_reference" ):
                listener.enterMacro_parameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter_reference" ):
                listener.exitMacro_parameter_reference(self)




    def macro_parameter_reference(self):

        localctx = TeradataSQLDMLParser.Macro_parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_macro_parameter_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6772
            _la = self._input.LA(1)
            if not(_la==1207 or _la==1210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6773
            self.parameter_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_scope_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_lower_bounds = None # Integer_literalContext
            self.array_upper_bounds = None # Integer_literalContext

        def COMMA(self):
            return self.getToken(TeradataSQLDMLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_array_scope_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_scope_reference" ):
                listener.enterArray_scope_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_scope_reference" ):
                listener.exitArray_scope_reference(self)




    def array_scope_reference(self):

        localctx = TeradataSQLDMLParser.Array_scope_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_array_scope_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6775
            localctx.array_lower_bounds = self.integer_literal()
            self.state = 6776
            self.match(TeradataSQLDMLParser.COMMA)
            self.state = 6777
            localctx.array_upper_bounds = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.EQUALS_SIGN, 0)

        def EQ(self):
            return self.getToken(TeradataSQLDMLParser.EQ, 0)

        def NOT_EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.NOT_EQUALS_SIGN, 0)

        def NOT_EQUALS_SIGN_TD(self):
            return self.getToken(TeradataSQLDMLParser.NOT_EQUALS_SIGN_TD, 0)

        def NE(self):
            return self.getToken(TeradataSQLDMLParser.NE, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDMLParser.NOT, 0)

        def LT_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.LT_SIGN, 0)

        def GT_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.GT_SIGN, 0)

        def LT(self):
            return self.getToken(TeradataSQLDMLParser.LT, 0)

        def LE_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.LE_SIGN, 0)

        def LE(self):
            return self.getToken(TeradataSQLDMLParser.LE, 0)

        def GT(self):
            return self.getToken(TeradataSQLDMLParser.GT, 0)

        def GE_SIGN(self):
            return self.getToken(TeradataSQLDMLParser.GE_SIGN, 0)

        def GE(self):
            return self.getToken(TeradataSQLDMLParser.GE, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TeradataSQLDMLParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_comparison_operator)
        try:
            self.state = 6796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6779
                self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6780
                self.match(TeradataSQLDMLParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6781
                self.match(TeradataSQLDMLParser.NOT_EQUALS_SIGN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6782
                self.match(TeradataSQLDMLParser.NOT_EQUALS_SIGN_TD)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6783
                self.match(TeradataSQLDMLParser.NE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6784
                self.match(TeradataSQLDMLParser.NOT)
                self.state = 6785
                self.match(TeradataSQLDMLParser.EQUALS_SIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6786
                self.match(TeradataSQLDMLParser.LT_SIGN)
                self.state = 6787
                self.match(TeradataSQLDMLParser.GT_SIGN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6788
                self.match(TeradataSQLDMLParser.LT_SIGN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6789
                self.match(TeradataSQLDMLParser.LT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6790
                self.match(TeradataSQLDMLParser.LE_SIGN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6791
                self.match(TeradataSQLDMLParser.LE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6792
                self.match(TeradataSQLDMLParser.GT_SIGN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6793
                self.match(TeradataSQLDMLParser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6794
                self.match(TeradataSQLDMLParser.GE_SIGN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6795
                self.match(TeradataSQLDMLParser.GE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDMLParser.ALL, 0)

        def ANY(self):
            return self.getToken(TeradataSQLDMLParser.ANY, 0)

        def SOME(self):
            return self.getToken(TeradataSQLDMLParser.SOME, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = TeradataSQLDMLParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6798
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==382):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.With_request_modifierContext,0)


        def using_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Using_request_modifierContext,0)


        def explain_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Explain_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequest_modifier" ):
                listener.enterRequest_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequest_modifier" ):
                listener.exitRequest_modifier(self)




    def request_modifier(self):

        localctx = TeradataSQLDMLParser.Request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_request_modifier)
        try:
            self.state = 6804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6800
                self.locking_request_modifier()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6801
                self.with_request_modifier()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6802
                self.using_request_modifier()
                pass
            elif token in [128, 150, 938]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6803
                self.explain_request_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Locking_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Locking_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_locking_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_request_modifier" ):
                listener.enterLocking_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_request_modifier" ):
                listener.exitLocking_request_modifier(self)




    def locking_request_modifier(self):

        localctx = TeradataSQLDMLParser.Locking_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_locking_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6807 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6806
                self.locking_spec()
                self.state = 6809 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==226 or _la==227):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def lock_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Lock_typeContext,0)


        def LOCKING(self):
            return self.getToken(TeradataSQLDMLParser.LOCKING, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDMLParser.LOCK, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Database_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Table_nameContext,0)


        def ROW(self):
            return self.getToken(TeradataSQLDMLParser.ROW, 0)

        def MODE(self):
            return self.getToken(TeradataSQLDMLParser.MODE, 0)

        def NOWAIT(self):
            return self.getToken(TeradataSQLDMLParser.NOWAIT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDMLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDMLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDMLParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDMLParser.VIEW, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_locking_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_spec" ):
                listener.enterLocking_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_spec" ):
                listener.exitLocking_spec(self)




    def locking_spec(self):

        localctx = TeradataSQLDMLParser.Locking_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_locking_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6811
            _la = self._input.LA(1)
            if not(_la==226 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,852,self._ctx)
            if la_ == 1:
                self.state = 6813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 6812
                    self.match(TeradataSQLDMLParser.DATABASE)


                self.state = 6815
                self.database_name()
                pass

            elif la_ == 2:
                self.state = 6817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 6816
                    self.match(TeradataSQLDMLParser.TABLE)


                self.state = 6819
                self.table_name()
                pass

            elif la_ == 3:
                self.state = 6821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 6820
                    self.match(TeradataSQLDMLParser.VIEW)


                self.state = 6823
                localctx.view_name = self.table_name()
                pass

            elif la_ == 4:
                self.state = 6824
                self.match(TeradataSQLDMLParser.ROW)
                pass


            self.state = 6828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==190:
                self.state = 6827
                _la = self._input.LA(1)
                if not(_la==159 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6830
            self.lock_type()
            self.state = 6832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 6831
                self.match(TeradataSQLDMLParser.MODE)


            self.state = 6835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 6834
                self.match(TeradataSQLDMLParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(TeradataSQLDMLParser.ACCESS, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDMLParser.EXCL, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDMLParser.EXCLUSIVE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDMLParser.SHARE, 0)

        def READ(self):
            return self.getToken(TeradataSQLDMLParser.READ, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDMLParser.OVERRIDE, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDMLParser.WRITE, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDMLParser.CHECKSUM, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDMLParser.LOAD, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDMLParser.COMMITTED, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = TeradataSQLDMLParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 6848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6837
                self.match(TeradataSQLDMLParser.ACCESS)
                pass
            elif token in [659, 662]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6838
                _la = self._input.LA(1)
                if not(_la==659 or _la==662):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [923]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6839
                self.match(TeradataSQLDMLParser.SHARE)
                pass
            elif token in [877]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6840
                self.match(TeradataSQLDMLParser.READ)
                self.state = 6842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 6841
                    self.match(TeradataSQLDMLParser.OVERRIDE)


                pass
            elif token in [1041]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6844
                self.match(TeradataSQLDMLParser.WRITE)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6845
                self.match(TeradataSQLDMLParser.CHECKSUM)
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6846
                self.match(TeradataSQLDMLParser.LOAD)
                self.state = 6847
                self.match(TeradataSQLDMLParser.COMMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDMLParser.WITH, 0)

        def cte_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Cte_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Cte_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_with_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_request_modifier" ):
                listener.enterWith_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_request_modifier" ):
                listener.exitWith_request_modifier(self)




    def with_request_modifier(self):

        localctx = TeradataSQLDMLParser.With_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_with_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6850
            self.match(TeradataSQLDMLParser.WITH)
            self.state = 6851
            self.cte_spec()
            self.state = 6856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6852
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6853
                self.cte_spec()
                self.state = 6858
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Regular_cte_specContext,0)


        def recursive_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Recursive_cte_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_spec" ):
                listener.enterCte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_spec" ):
                listener.exitCte_spec(self)




    def cte_spec(self):

        localctx = TeradataSQLDMLParser.Cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_cte_spec)
        try:
            self.state = 6861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6859
                self.regular_cte_spec()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6860
                self.recursive_cte_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_regular_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_cte_spec" ):
                listener.enterRegular_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_cte_spec" ):
                listener.exitRegular_cte_spec(self)




    def regular_cte_spec(self):

        localctx = TeradataSQLDMLParser.Regular_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_regular_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6863
            localctx.query_name = self.alias_name()
            self.state = 6865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 6864
                self.column_list()


            self.state = 6867
            self.match(TeradataSQLDMLParser.AS)
            self.state = 6868
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def RECURSIVE(self):
            return self.getToken(TeradataSQLDMLParser.RECURSIVE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Column_listContext,0)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.UNION)
            else:
                return self.getToken(TeradataSQLDMLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.ALL)
            else:
                return self.getToken(TeradataSQLDMLParser.ALL, i)

        def query_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Query_termContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Query_termContext,i)


        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_recursive_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte_spec" ):
                listener.enterRecursive_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte_spec" ):
                listener.exitRecursive_cte_spec(self)




    def recursive_cte_spec(self):

        localctx = TeradataSQLDMLParser.Recursive_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_recursive_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6870
            self.match(TeradataSQLDMLParser.RECURSIVE)
            self.state = 6871
            localctx.query_name = self.alias_name()
            self.state = 6873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 6872
                self.column_list()


            self.state = 6875
            self.match(TeradataSQLDMLParser.AS)
            self.state = 6876
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6877
            self.query_expr(0)
            self.state = 6881 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6878
                self.match(TeradataSQLDMLParser.UNION)
                self.state = 6879
                self.match(TeradataSQLDMLParser.ALL)
                self.state = 6880
                self.query_term()
                self.state = 6883 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==447):
                    break

            self.state = 6885
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDMLParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDMLParser.OPEN_PAR, 0)

        def using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Using_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDMLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDMLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDMLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_using_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_request_modifier" ):
                listener.enterUsing_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_request_modifier" ):
                listener.exitUsing_request_modifier(self)




    def using_request_modifier(self):

        localctx = TeradataSQLDMLParser.Using_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_using_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6887
            self.match(TeradataSQLDMLParser.USING)
            self.state = 6888
            self.match(TeradataSQLDMLParser.OPEN_PAR)
            self.state = 6889
            self.using_spec()
            self.state = 6894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6890
                self.match(TeradataSQLDMLParser.COMMA)
                self.state = 6891
                self.using_spec()
                self.state = 6896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6897
            self.match(TeradataSQLDMLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Variable_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDMLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDMLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDMLParser.Data_type_attributeContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDMLParser.AS, 0)

        def DEFERRED(self):
            return self.getToken(TeradataSQLDMLParser.DEFERRED, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDMLParser.LOCATOR, 0)

        def BY(self):
            return self.getToken(TeradataSQLDMLParser.BY, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDMLParser.NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_spec" ):
                listener.enterUsing_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_spec" ):
                listener.exitUsing_spec(self)




    def using_spec(self):

        localctx = TeradataSQLDMLParser.Using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_using_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6899
            self.variable_name()
            self.state = 6900
            self.data_type()
            self.state = 6904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 6901
                self.data_type_attribute()
                self.state = 6906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6907
                self.match(TeradataSQLDMLParser.AS)
                self.state = 6914
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 6908
                    self.match(TeradataSQLDMLParser.DEFERRED)
                    self.state = 6911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 6909
                        self.match(TeradataSQLDMLParser.BY)
                        self.state = 6910
                        self.match(TeradataSQLDMLParser.NAME)


                    pass
                elif token in [225]:
                    self.state = 6913
                    self.match(TeradataSQLDMLParser.LOCATOR)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDMLParser.EXPLAIN, 0)

        def IN(self):
            return self.getToken(TeradataSQLDMLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDMLParser.XML, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDMLParser.STATIC, 0)

        def DYNAMIC(self):
            return self.getToken(TeradataSQLDMLParser.DYNAMIC, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDMLParser.NODDLTEXT, 0)

        def getRuleIndex(self):
            return TeradataSQLDMLParser.RULE_explain_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_request_modifier" ):
                listener.enterExplain_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_request_modifier" ):
                listener.exitExplain_request_modifier(self)




    def explain_request_modifier(self):

        localctx = TeradataSQLDMLParser.Explain_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_explain_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==938:
                self.state = 6918
                _la = self._input.LA(1)
                if not(_la==128 or _la==938):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6921
            self.match(TeradataSQLDMLParser.EXPLAIN)
            self.state = 6927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 6922
                self.match(TeradataSQLDMLParser.IN)
                self.state = 6923
                self.match(TeradataSQLDMLParser.XML)
                self.state = 6925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 6924
                    self.match(TeradataSQLDMLParser.NODDLTEXT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[120] = self.query_expr_sempred
        self._predicates[200] = self.logical_expr_sempred
        self._predicates[201] = self.scalar_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def query_expr_sempred(self, localctx:Query_exprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

    def scalar_expr_sempred(self, localctx:Scalar_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 69)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 68)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 67)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 66)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 65)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 4)
         




