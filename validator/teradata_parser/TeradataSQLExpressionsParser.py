# Generated from sql/teradata/TeradataSQLExpressionsParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1233,5989,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,1,0,1,0,1,0,1,0,
        1,0,1,0,3,0,541,8,0,1,0,1,0,1,0,3,0,546,8,0,1,0,5,0,549,8,0,10,0,
        12,0,552,9,0,1,1,1,1,3,1,556,8,1,1,1,3,1,559,8,1,1,1,1,1,1,1,5,1,
        564,8,1,10,1,12,1,567,9,1,1,1,1,1,1,1,1,1,1,1,3,1,574,8,1,1,1,1,
        1,5,1,578,8,1,10,1,12,1,581,9,1,1,1,1,1,5,1,585,8,1,10,1,12,1,588,
        9,1,1,1,5,1,591,8,1,10,1,12,1,594,9,1,1,1,3,1,597,8,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,610,8,4,1,4,3,4,613,8,4,1,
        4,1,4,3,4,617,8,4,1,5,1,5,1,5,1,5,3,5,623,8,5,1,5,3,5,626,8,5,1,
        5,1,5,3,5,630,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,641,8,
        6,3,6,643,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,651,8,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,5,8,660,8,8,10,8,12,8,663,9,8,3,8,665,8,8,1,9,1,9,
        3,9,669,8,9,1,9,3,9,672,8,9,1,9,1,9,1,9,1,9,3,9,678,8,9,1,10,1,10,
        1,10,3,10,683,8,10,1,10,1,10,1,10,3,10,688,8,10,5,10,690,8,10,10,
        10,12,10,693,9,10,1,11,1,11,1,11,1,12,1,12,5,12,700,8,12,10,12,12,
        12,703,9,12,1,12,1,12,5,12,707,8,12,10,12,12,12,710,9,12,1,12,1,
        12,5,12,714,8,12,10,12,12,12,717,9,12,1,12,1,12,1,12,1,12,5,12,723,
        8,12,10,12,12,12,726,9,12,3,12,728,8,12,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,736,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,747,8,14,1,15,1,15,3,15,751,8,15,1,15,1,15,1,16,1,16,3,16,757,
        8,16,1,16,1,16,1,17,1,17,1,17,3,17,764,8,17,3,17,766,8,17,1,17,3,
        17,769,8,17,1,17,3,17,772,8,17,1,18,1,18,1,18,3,18,777,8,18,3,18,
        779,8,18,1,18,1,18,1,18,5,18,784,8,18,10,18,12,18,787,9,18,1,18,
        1,18,1,18,3,18,792,8,18,3,18,794,8,18,1,18,1,18,1,18,1,18,1,18,5,
        18,801,8,18,10,18,12,18,804,9,18,1,18,1,18,1,18,1,18,5,18,810,8,
        18,10,18,12,18,813,9,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,821,8,
        18,10,18,12,18,824,9,18,3,18,826,8,18,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,4,20,836,8,20,11,20,12,20,837,3,20,840,8,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,5,20,849,8,20,10,20,12,20,852,9,20,1,
        20,1,20,3,20,856,8,20,1,20,3,20,859,8,20,1,20,1,20,1,21,1,21,1,21,
        1,21,4,21,867,8,21,11,21,12,21,868,1,21,1,21,3,21,873,8,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,5,22,882,8,22,10,22,12,22,885,9,22,
        1,22,1,22,5,22,889,8,22,10,22,12,22,892,9,22,1,22,3,22,895,8,22,
        1,22,3,22,898,8,22,1,22,1,22,1,23,1,23,1,23,3,23,905,8,23,1,23,1,
        23,3,23,909,8,23,1,24,1,24,4,24,913,8,24,11,24,12,24,914,1,25,1,
        25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,5,26,927,8,26,10,26,12,
        26,930,9,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,941,
        8,28,1,28,1,28,3,28,945,8,28,1,28,1,28,3,28,949,8,28,1,29,1,29,1,
        29,1,29,3,29,955,8,29,1,29,3,29,958,8,29,1,29,1,29,5,29,962,8,29,
        10,29,12,29,965,9,29,1,30,3,30,968,8,30,1,30,1,30,1,30,1,30,1,30,
        3,30,975,8,30,1,30,1,30,1,30,1,30,3,30,981,8,30,1,31,1,31,1,31,1,
        31,1,31,1,31,5,31,989,8,31,10,31,12,31,992,9,31,1,31,1,31,3,31,996,
        8,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1004,8,32,10,32,12,32,1007,
        9,32,1,33,1,33,1,33,1,33,1,33,5,33,1014,8,33,10,33,12,33,1017,9,
        33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1029,8,
        34,1,34,3,34,1032,8,34,1,34,1,34,3,34,1036,8,34,1,35,1,35,1,35,3,
        35,1041,8,35,1,35,1,35,3,35,1045,8,35,1,35,3,35,1048,8,35,1,35,1,
        35,1,36,3,36,1053,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1060,8,36,1,
        36,1,36,1,36,1,36,1,36,5,36,1067,8,36,10,36,12,36,1070,9,36,3,36,
        1072,8,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,1080,8,36,10,36,12,
        36,1083,9,36,3,36,1085,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,3,36,1097,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1104,8,
        36,1,36,1,36,1,36,1,36,1,36,3,36,1111,8,36,1,37,1,37,1,37,1,37,1,
        37,3,37,1118,8,37,1,37,1,37,1,37,1,37,5,37,1124,8,37,10,37,12,37,
        1127,9,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,5,38,1141,8,38,10,38,12,38,1144,9,38,3,38,1146,8,38,1,38,3,
        38,1149,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1156,8,38,1,38,1,38,1,
        38,1,38,1,38,3,38,1163,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1170,8,
        38,1,38,1,38,1,38,1,38,1,38,3,38,1177,8,38,1,38,1,38,1,39,3,39,1182,
        8,39,1,39,1,39,1,39,1,39,1,39,3,39,1189,8,39,1,39,1,39,1,39,1,39,
        1,39,1,39,5,39,1197,8,39,10,39,12,39,1200,9,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,1212,8,39,10,39,12,39,1215,
        9,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,1223,8,39,10,39,12,39,1226,
        9,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1234,8,39,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,5,40,1243,8,40,10,40,12,40,1246,9,40,1,40,1,
        40,1,40,1,41,3,41,1252,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,3,42,1270,8,42,1,42,1,
        42,1,42,1,42,1,42,1,42,4,42,1278,8,42,11,42,12,42,1279,3,42,1282,
        8,42,1,42,1,42,1,43,3,43,1287,8,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1303,8,43,10,43,12,
        43,1306,9,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1314,8,43,10,43,
        12,43,1317,9,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1325,8,43,1,43,
        1,43,1,43,1,43,1,43,3,43,1332,8,43,1,43,1,43,1,44,1,44,1,44,5,44,
        1339,8,44,10,44,12,44,1342,9,44,1,44,3,44,1345,8,44,1,44,5,44,1348,
        8,44,10,44,12,44,1351,9,44,1,44,3,44,1354,8,44,1,44,1,44,1,45,1,
        45,1,45,3,45,1361,8,45,1,45,1,45,3,45,1365,8,45,1,45,1,45,3,45,1369,
        8,45,1,45,3,45,1372,8,45,1,45,1,45,1,45,1,45,1,45,5,45,1379,8,45,
        10,45,12,45,1382,9,45,3,45,1384,8,45,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,3,46,1394,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        48,1,48,4,48,1405,8,48,11,48,12,48,1406,1,49,1,49,1,49,3,49,1412,
        8,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,5,51,1424,
        8,51,10,51,12,51,1427,9,51,1,51,1,51,1,51,3,51,1432,8,51,1,52,1,
        52,3,52,1436,8,52,1,52,1,52,3,52,1440,8,52,1,53,1,53,1,53,1,53,1,
        53,1,54,1,54,1,54,1,54,3,54,1451,8,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1495,8,
        54,1,55,1,55,1,55,1,55,3,55,1501,8,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,3,55,1550,8,55,1,56,1,56,1,56,3,56,1555,8,56,1,56,1,
        56,1,56,3,56,1560,8,56,5,56,1562,8,56,10,56,12,56,1565,9,56,1,56,
        3,56,1568,8,56,1,57,1,57,1,57,1,57,5,57,1574,8,57,10,57,12,57,1577,
        9,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,4,60,1595,8,60,11,60,12,60,1596,3,60,1599,8,
        60,1,61,1,61,1,61,1,61,3,61,1605,8,61,1,62,1,62,3,62,1609,8,62,1,
        62,1,62,1,62,3,62,1614,8,62,5,62,1616,8,62,10,62,12,62,1619,9,62,
        1,63,1,63,1,63,1,63,4,63,1625,8,63,11,63,12,63,1626,1,63,1,63,1,
        64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,
        67,1,67,1,67,1,67,1,67,1,67,5,67,1650,8,67,10,67,12,67,1653,9,67,
        1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,1662,8,68,1,69,1,69,1,69,
        1,70,1,70,1,70,1,71,1,71,1,71,3,71,1673,8,71,1,71,1,71,3,71,1677,
        8,71,1,71,1,71,1,71,3,71,1682,8,71,1,72,1,72,1,72,5,72,1687,8,72,
        10,72,12,72,1690,9,72,1,73,1,73,1,73,5,73,1695,8,73,10,73,12,73,
        1698,9,73,1,74,1,74,1,74,1,74,1,74,3,74,1705,8,74,4,74,1707,8,74,
        11,74,12,74,1708,1,74,1,74,1,74,3,74,1714,8,74,3,74,1716,8,74,1,
        74,1,74,1,75,1,75,1,75,1,75,3,75,1724,8,75,1,75,1,75,1,75,1,75,1,
        75,3,75,1731,8,75,1,75,1,75,1,75,3,75,1736,8,75,3,75,1738,8,75,3,
        75,1740,8,75,1,75,1,75,3,75,1744,8,75,1,76,1,76,1,76,1,76,1,76,5,
        76,1751,8,76,10,76,12,76,1754,9,76,1,77,1,77,3,77,1758,8,77,1,77,
        1,77,3,77,1762,8,77,1,78,1,78,3,78,1766,8,78,1,79,1,79,1,79,1,79,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,1782,8,80,
        10,80,12,80,1785,9,80,1,80,1,80,1,80,1,80,1,80,5,80,1792,8,80,10,
        80,12,80,1795,9,80,1,80,1,80,3,80,1799,8,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,3,80,1808,8,80,1,80,3,80,1811,8,80,1,80,1,80,3,80,
        1815,8,80,1,80,1,80,5,80,1819,8,80,10,80,12,80,1822,9,80,1,80,1,
        80,3,80,1826,8,80,1,80,3,80,1829,8,80,1,80,1,80,3,80,1833,8,80,1,
        80,1,80,5,80,1837,8,80,10,80,12,80,1840,9,80,1,80,1,80,3,80,1844,
        8,80,1,80,3,80,1847,8,80,1,80,1,80,3,80,1851,8,80,1,80,1,80,5,80,
        1855,8,80,10,80,12,80,1858,9,80,1,80,1,80,3,80,1862,8,80,1,80,3,
        80,1865,8,80,1,80,1,80,3,80,1869,8,80,1,80,1,80,5,80,1873,8,80,10,
        80,12,80,1876,9,80,1,80,1,80,3,80,1880,8,80,1,80,1,80,1,80,1,80,
        3,80,1886,8,80,1,80,1,80,3,80,1890,8,80,1,80,1,80,1,80,1,80,5,80,
        1896,8,80,10,80,12,80,1899,9,80,1,80,1,80,3,80,1903,8,80,1,80,5,
        80,1906,8,80,10,80,12,80,1909,9,80,1,80,1,80,3,80,1913,8,80,1,80,
        1,80,1,80,1,80,5,80,1919,8,80,10,80,12,80,1922,9,80,1,80,1,80,3,
        80,1926,8,80,1,80,5,80,1929,8,80,10,80,12,80,1932,9,80,1,80,3,80,
        1935,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1944,8,80,1,80,
        1,80,1,80,1,80,3,80,1950,8,80,1,80,1,80,1,80,1,80,1,80,3,80,1957,
        8,80,1,80,1,80,1,80,1,80,1,80,3,80,1964,8,80,1,80,1,80,1,80,1,80,
        1,80,3,80,1971,8,80,1,80,1,80,1,80,1,80,1,80,3,80,1978,8,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2001,8,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,3,80,2012,8,80,1,80,1,80,1,80,1,80,
        3,80,2018,8,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,2026,8,80,10,80,
        12,80,2029,9,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,3,81,2044,8,81,1,81,1,81,1,81,1,81,1,81,5,81,2051,
        8,81,10,81,12,81,2054,9,81,3,81,2056,8,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,3,81,2066,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,3,81,2075,8,81,1,81,3,81,2078,8,81,1,81,1,81,1,81,3,81,2083,8,
        81,1,81,3,81,2086,8,81,5,81,2088,8,81,10,81,12,81,2091,9,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,2107,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,4,81,2139,8,81,11,81,12,81,2140,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,3,81,2160,8,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,2194,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2203,8,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,2218,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,2288,8,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2328,8,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,5,81,2349,8,81,10,81,12,81,2352,9,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,3,81,2361,8,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,3,81,2371,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,3,81,2382,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,3,81,2393,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2402,
        8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2412,8,81,3,81,
        2414,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,2433,8,81,3,81,2435,8,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2447,8,81,3,81,
        2449,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,3,81,2463,8,81,3,81,2465,8,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,3,81,2491,8,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,5,81,2501,8,81,10,81,12,81,2504,9,81,3,81,2506,8,
        81,1,81,1,81,1,81,1,81,5,81,2512,8,81,10,81,12,81,2515,9,81,1,82,
        1,82,1,82,1,82,4,82,2521,8,82,11,82,12,82,2522,1,82,1,82,1,83,1,
        83,3,83,2529,8,83,1,83,3,83,2532,8,83,1,83,1,83,1,83,3,83,2537,8,
        83,1,83,1,83,1,83,3,83,2542,8,83,1,84,1,84,1,84,1,84,3,84,2548,8,
        84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,4,85,2557,8,85,11,85,12,85,
        2558,1,85,1,85,3,85,2563,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,
        1,86,4,86,2573,8,86,11,86,12,86,2574,1,86,1,86,3,86,2579,8,86,1,
        86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2603,8,89,1,90,1,
        90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,3,91,2615,8,91,1,91,1,
        91,3,91,2619,8,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,2627,8,91,3,
        91,2629,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,2653,
        8,92,1,93,1,93,1,93,3,93,2658,8,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,2674,8,93,1,93,3,93,
        2677,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        3,93,2690,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2710,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,4,94,2719,8,94,11,94,12,94,2720,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2733,8,94,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,3,94,2742,8,94,1,94,1,94,1,94,1,94,3,
        94,2748,8,94,3,94,2750,8,94,1,94,1,94,3,94,2754,8,94,1,94,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,1,94,4,94,2765,8,94,11,94,12,94,2766,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,5,94,2797,8,94,10,94,12,94,2800,9,94,1,94,1,94,1,94,1,
        94,1,94,1,94,1,94,4,94,2809,8,94,11,94,12,94,2810,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,2824,8,94,10,94,12,
        94,2827,9,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
        94,1,94,3,94,2841,8,94,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2849,8,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,3,95,2864,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2874,
        8,95,1,95,1,95,1,95,1,95,1,95,3,95,2881,8,95,1,95,1,95,1,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2897,8,95,
        1,96,3,96,2900,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2909,
        8,96,3,96,2911,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        5,96,2922,8,96,10,96,12,96,2925,9,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,1,96,5,96,2936,8,96,10,96,12,96,2939,9,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,2950,8,96,10,96,12,96,2953,
        9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,2964,8,96,
        10,96,12,96,2967,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,2976,
        8,96,10,96,12,96,2979,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,
        96,2988,8,96,10,96,12,96,2991,9,96,1,96,1,96,1,96,1,96,4,96,2997,
        8,96,11,96,12,96,2998,3,96,3001,8,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,4,96,3019,8,
        96,11,96,12,96,3020,1,96,1,96,1,96,3,96,3026,8,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,4,96,3037,8,96,11,96,12,96,3038,1,
        96,1,96,3,96,3043,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,4,96,3056,8,96,11,96,12,96,3057,1,96,1,96,3,96,3062,
        8,96,1,96,1,96,1,96,3,96,3067,8,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,3,96,3077,8,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,3085,
        8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,3094,8,96,3,96,3096,
        8,96,1,96,1,96,1,96,3,96,3101,8,96,1,96,1,96,1,96,1,96,1,96,3,96,
        3108,8,96,1,96,1,96,3,96,3112,8,96,1,97,1,97,1,97,1,97,1,97,3,97,
        3119,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,3,97,3138,8,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,3,97,3150,8,97,1,97,1,97,3,97,3154,
        8,97,1,98,3,98,3157,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,3165,
        8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,3175,8,98,1,98,
        1,98,1,98,1,98,1,98,3,98,3182,8,98,1,98,1,98,1,98,3,98,3187,8,98,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,3196,8,98,1,98,1,98,1,98,
        3,98,3201,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        3,98,3213,8,98,1,98,1,98,1,98,1,98,1,98,3,98,3220,8,98,1,99,1,99,
        1,99,1,99,3,99,3226,8,99,1,99,1,99,1,99,3,99,3231,8,99,1,99,3,99,
        3234,8,99,1,99,1,99,1,99,3,99,3239,8,99,1,99,1,99,1,99,3,99,3244,
        8,99,1,99,3,99,3247,8,99,1,99,1,99,3,99,3251,8,99,1,99,3,99,3254,
        8,99,1,99,1,99,1,99,1,99,3,99,3260,8,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,3,99,3271,8,99,1,99,1,99,3,99,3275,8,99,1,99,
        3,99,3278,8,99,1,100,3,100,3281,8,100,1,100,1,100,1,100,1,100,1,
        100,1,100,3,100,3289,8,100,1,100,1,100,1,100,1,100,3,100,3295,8,
        100,1,100,1,100,3,100,3299,8,100,1,100,1,100,3,100,3303,8,100,1,
        101,3,101,3306,8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,
        101,1,101,1,101,1,101,1,101,3,101,3320,8,101,1,101,1,101,1,101,1,
        101,1,101,4,101,3327,8,101,11,101,12,101,3328,1,101,1,101,3,101,
        3333,8,101,1,102,3,102,3336,8,102,1,102,1,102,1,102,1,102,1,102,
        1,103,1,103,1,103,1,103,1,103,1,103,5,103,3349,8,103,10,103,12,103,
        3352,9,103,1,103,4,103,3355,8,103,11,103,12,103,3356,3,103,3359,
        8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,3371,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,3381,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,3391,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,3401,8,103,3,103,3403,8,103,3,103,3405,8,103,1,103,1,103,1,
        103,3,103,3410,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
        103,3,103,3420,8,103,3,103,3422,8,103,3,103,3424,8,103,1,103,1,103,
        1,103,3,103,3429,8,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,
        3437,8,103,1,103,1,103,1,103,3,103,3442,8,103,1,103,1,103,1,103,
        1,103,1,103,1,103,3,103,3450,8,103,3,103,3452,8,103,1,103,1,103,
        1,103,3,103,3457,8,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,
        3465,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3474,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,3,104,3482,8,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,3490,8,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,3500,8,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,3510,8,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        3,104,3526,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,5,105,3549,8,105,10,105,12,105,3552,9,105,1,105,1,105,
        3,105,3556,8,105,1,106,3,106,3559,8,106,1,106,1,106,1,106,1,106,
        1,107,3,107,3566,8,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,
        3574,8,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,3592,8,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,3601,8,107,1,108,3,108,
        3604,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
        3614,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        3,108,3625,8,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,3643,8,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,3,109,3668,8,109,1,110,3,110,3671,8,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,3685,
        8,110,1,110,1,110,1,110,3,110,3690,8,110,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,
        3706,8,110,1,110,1,110,1,110,3,110,3711,8,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
        3,110,3727,8,110,1,110,1,110,1,110,3,110,3732,8,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,3,110,3741,8,110,1,110,1,110,1,110,
        3,110,3746,8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,3,110,3759,8,110,1,111,3,111,3762,8,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,5,111,3781,8,111,10,111,12,111,3784,
        9,111,1,111,1,111,1,111,3,111,3789,8,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,5,111,3800,8,111,10,111,12,111,3803,
        9,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3813,
        8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        3,111,3825,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,3,111,3841,8,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3853,8,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3864,
        8,111,3,111,3866,8,111,1,111,1,111,1,111,3,111,3871,8,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,3,111,3887,8,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,3,111,3897,8,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,3,111,3906,8,111,1,111,1,111,1,111,3,111,3911,8,111,1,111,
        1,111,1,111,1,111,1,111,3,111,3918,8,111,1,111,1,111,1,111,3,111,
        3923,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        3,111,3934,8,111,1,111,1,111,1,111,3,111,3939,8,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3952,
        8,111,3,111,3954,8,111,3,111,3956,8,111,1,111,1,111,1,111,3,111,
        3961,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3970,
        8,111,1,111,1,111,1,111,3,111,3975,8,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,3,111,3994,8,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,3,111,4003,8,111,3,111,4005,8,111,1,111,1,111,1,111,3,111,
        4010,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,3,111,4036,8,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,3,111,4047,8,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,3,111,4058,8,111,1,111,1,111,
        1,111,1,111,1,111,1,111,3,111,4066,8,111,1,111,3,111,4069,8,111,
        1,111,1,111,1,111,3,111,4074,8,111,1,112,3,112,4077,8,112,1,112,
        1,112,1,112,1,112,1,112,3,112,4084,8,112,1,112,3,112,4087,8,112,
        1,112,1,112,1,112,1,112,1,112,3,112,4094,8,112,1,112,1,112,1,112,
        3,112,4099,8,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,4107,
        8,112,1,112,1,112,1,112,1,112,1,112,3,112,4114,8,112,1,112,1,112,
        3,112,4118,8,112,1,112,3,112,4121,8,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,3,112,4131,8,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,3,112,4153,8,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,3,112,4164,8,112,3,112,4166,
        8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,4175,8,112,
        10,112,12,112,4178,9,112,1,112,1,112,3,112,4182,8,112,1,112,1,112,
        1,112,1,112,1,112,5,112,4189,8,112,10,112,12,112,4192,9,112,1,112,
        1,112,3,112,4196,8,112,3,112,4198,8,112,1,113,1,113,1,113,1,113,
        1,113,1,113,3,113,4206,8,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,3,113,4217,8,113,1,113,3,113,4220,8,113,1,113,
        3,113,4223,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        3,113,4233,8,113,1,113,3,113,4236,8,113,1,113,1,113,3,113,4240,8,
        113,1,113,3,113,4243,8,113,1,113,1,113,3,113,4247,8,113,1,113,1,
        113,3,113,4251,8,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,4259,
        8,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,4267,8,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,4277,8,113,1,113,
        1,113,3,113,4281,8,113,1,113,1,113,3,113,4285,8,113,1,113,3,113,
        4288,8,113,1,113,1,113,1,113,1,113,1,113,3,113,4295,8,113,1,113,
        1,113,1,113,5,113,4300,8,113,10,113,12,113,4303,9,113,3,113,4305,
        8,113,1,113,3,113,4308,8,113,1,113,3,113,4311,8,113,1,113,1,113,
        1,113,1,113,1,113,1,113,5,113,4319,8,113,10,113,12,113,4322,9,113,
        1,113,3,113,4325,8,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,
        4333,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,
        4343,8,113,1,113,3,113,4346,8,113,1,113,1,113,1,113,1,113,1,113,
        1,113,3,113,4354,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,3,113,4379,8,113,1,113,1,113,3,113,
        4383,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,5,113,4395,8,113,10,113,12,113,4398,9,113,3,113,4400,8,113,
        1,113,3,113,4403,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,5,113,4418,8,113,10,113,12,113,
        4421,9,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,3,113,4447,8,113,1,114,1,114,1,114,1,114,
        1,114,5,114,4454,8,114,10,114,12,114,4457,9,114,1,114,1,114,1,114,
        3,114,4462,8,114,1,114,1,114,1,114,1,114,1,114,3,114,4469,8,114,
        3,114,4471,8,114,1,115,1,115,1,115,1,115,1,115,5,115,4478,8,115,
        10,115,12,115,4481,9,115,1,115,1,115,3,115,4485,8,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,4496,8,115,1,115,
        1,115,3,115,4500,8,115,1,116,1,116,1,116,1,117,1,117,1,117,1,118,
        1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,121,
        5,121,4520,8,121,10,121,12,121,4523,9,121,1,121,1,121,1,122,1,122,
        1,122,1,122,1,122,3,122,4532,8,122,1,123,1,123,1,123,1,123,3,123,
        4538,8,123,1,124,1,124,1,124,1,124,5,124,4544,8,124,10,124,12,124,
        4547,9,124,1,124,1,124,1,124,1,124,3,124,4553,8,124,5,124,4555,8,
        124,10,124,12,124,4558,9,124,1,124,1,124,1,125,1,125,1,125,3,125,
        4565,8,125,1,126,1,126,1,126,1,126,3,126,4571,8,126,1,126,3,126,
        4574,8,126,1,127,1,127,1,127,3,127,4579,8,127,1,128,1,128,1,128,
        1,128,3,128,4585,8,128,3,128,4587,8,128,1,128,1,128,5,128,4591,8,
        128,10,128,12,128,4594,9,128,1,128,1,128,1,128,1,129,1,129,1,129,
        1,129,3,129,4603,8,129,1,129,1,129,3,129,4607,8,129,1,130,1,130,
        1,130,1,130,3,130,4613,8,130,1,131,1,131,1,131,1,131,1,131,1,131,
        3,131,4621,8,131,1,132,1,132,1,132,1,132,3,132,4627,8,132,1,132,
        3,132,4630,8,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
        1,133,3,133,4641,8,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
        1,133,3,133,4651,8,133,1,134,1,134,1,134,3,134,4656,8,134,1,134,
        3,134,4659,8,134,1,134,3,134,4662,8,134,1,134,1,134,1,135,1,135,
        1,135,3,135,4669,8,135,1,135,1,135,1,135,1,136,1,136,1,136,3,136,
        4677,8,136,1,136,1,136,3,136,4681,8,136,1,136,1,136,1,137,1,137,
        1,137,1,137,1,137,5,137,4690,8,137,10,137,12,137,4693,9,137,1,138,
        1,138,1,138,1,138,1,138,5,138,4700,8,138,10,138,12,138,4703,9,138,
        1,138,1,138,1,138,3,138,4708,8,138,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,3,139,4793,8,139,3,139,4795,8,139,1,140,1,140,1,140,1,140,
        1,140,3,140,4802,8,140,1,140,1,140,3,140,4806,8,140,1,141,1,141,
        1,141,3,141,4811,8,141,1,141,1,141,1,141,1,141,5,141,4817,8,141,
        10,141,12,141,4820,9,141,3,141,4822,8,141,1,142,1,142,1,142,1,142,
        1,143,1,143,1,143,1,143,1,143,5,143,4833,8,143,10,143,12,143,4836,
        9,143,1,143,1,143,1,144,1,144,1,144,3,144,4843,8,144,1,145,1,145,
        1,145,3,145,4848,8,145,1,146,1,146,3,146,4852,8,146,1,147,1,147,
        1,147,1,147,1,147,5,147,4859,8,147,10,147,12,147,4862,9,147,1,147,
        1,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,4874,
        8,148,1,149,1,149,1,149,1,149,1,149,1,149,3,149,4882,8,149,1,149,
        1,149,1,149,1,149,1,149,1,149,3,149,4890,8,149,5,149,4892,8,149,
        10,149,12,149,4895,9,149,1,150,1,150,1,150,1,150,3,150,4901,8,150,
        1,150,1,150,3,150,4905,8,150,1,151,1,151,1,151,1,152,1,152,1,152,
        1,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,3,154,4925,8,154,1,155,1,155,1,155,1,156,1,156,1,157,1,157,
        1,157,1,157,1,158,1,158,1,158,1,158,1,158,3,158,4941,8,158,1,158,
        3,158,4944,8,158,1,158,1,158,3,158,4948,8,158,1,159,1,159,1,159,
        5,159,4953,8,159,10,159,12,159,4956,9,159,1,159,1,159,1,159,1,160,
        1,160,1,160,1,160,5,160,4965,8,160,10,160,12,160,4968,9,160,1,161,
        1,161,3,161,4972,8,161,1,161,3,161,4975,8,161,1,162,1,162,1,162,
        1,162,1,162,1,162,5,162,4983,8,162,10,162,12,162,4986,9,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,5,162,4996,8,162,10,162,
        12,162,4999,9,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        5,162,5009,8,162,10,162,12,162,5012,9,162,1,162,1,162,1,162,1,162,
        1,162,1,162,3,162,5020,8,162,1,163,1,163,3,163,5024,8,163,1,163,
        1,163,1,164,1,164,3,164,5030,8,164,1,164,3,164,5033,8,164,1,165,
        1,165,3,165,5037,8,165,1,165,1,165,1,166,1,166,1,166,3,166,5044,
        8,166,1,166,1,166,1,166,1,166,3,166,5050,8,166,1,166,1,166,3,166,
        5054,8,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,5,167,
        5064,8,167,10,167,12,167,5067,9,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,5,167,5079,8,167,10,167,12,167,5082,
        9,167,1,167,1,167,3,167,5086,8,167,1,168,1,168,3,168,5090,8,168,
        1,168,3,168,5093,8,168,1,169,1,169,3,169,5097,8,169,1,169,3,169,
        5100,8,169,1,170,1,170,1,170,1,170,3,170,5106,8,170,1,170,3,170,
        5109,8,170,1,171,1,171,3,171,5113,8,171,1,172,1,172,1,172,1,172,
        5,172,5119,8,172,10,172,12,172,5122,9,172,1,172,1,172,1,173,1,173,
        1,173,1,173,5,173,5130,8,173,10,173,12,173,5133,9,173,1,173,1,173,
        1,174,1,174,1,174,1,174,5,174,5141,8,174,10,174,12,174,5144,9,174,
        1,174,1,174,1,175,1,175,3,175,5150,8,175,1,175,1,175,1,175,1,176,
        1,176,1,176,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,179,1,179,
        1,179,1,180,1,180,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        3,181,5189,8,181,1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,5206,8,183,1,184,
        1,184,1,185,3,185,5211,8,185,1,185,4,185,5214,8,185,11,185,12,185,
        5215,1,186,3,186,5219,8,186,1,186,1,186,5,186,5223,8,186,10,186,
        12,186,5226,9,186,1,186,1,186,1,186,1,187,3,187,5232,8,187,1,187,
        1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,191,1,191,1,192,3,192,
        5245,8,192,1,192,1,192,1,193,3,193,5250,8,193,1,193,1,193,1,194,
        3,194,5255,8,194,1,194,1,194,1,195,1,195,3,195,5261,8,195,1,195,
        1,195,1,195,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,
        1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,
        1,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,5293,8,196,1,197,
        1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,3,198,5309,8,198,1,199,1,199,1,199,1,199,3,199,5315,
        8,199,1,200,1,200,3,200,5319,8,200,1,201,1,201,1,201,3,201,5324,
        8,201,1,201,1,201,3,201,5328,8,201,1,202,1,202,1,202,3,202,5333,
        8,202,1,202,1,202,3,202,5337,8,202,1,203,1,203,1,203,3,203,5342,
        8,203,1,203,1,203,3,203,5346,8,203,1,204,1,204,1,204,3,204,5351,
        8,204,1,204,1,204,3,204,5355,8,204,1,205,1,205,1,205,3,205,5360,
        8,205,1,205,1,205,3,205,5364,8,205,1,206,1,206,3,206,5368,8,206,
        1,207,1,207,3,207,5372,8,207,1,208,1,208,1,208,3,208,5377,8,208,
        1,209,1,209,3,209,5381,8,209,1,210,1,210,3,210,5385,8,210,1,211,
        1,211,3,211,5389,8,211,1,212,1,212,3,212,5393,8,212,1,213,1,213,
        3,213,5397,8,213,1,214,1,214,3,214,5401,8,214,1,215,1,215,3,215,
        5405,8,215,1,216,1,216,3,216,5409,8,216,1,217,1,217,3,217,5413,8,
        217,1,218,1,218,3,218,5417,8,218,1,219,1,219,3,219,5421,8,219,1,
        220,1,220,3,220,5425,8,220,1,221,1,221,1,222,1,222,1,223,1,223,1,
        223,1,223,1,223,1,223,3,223,5437,8,223,1,224,1,224,1,224,1,224,1,
        224,1,224,1,224,3,224,5446,8,224,1,225,1,225,1,225,1,225,1,225,1,
        225,1,225,1,225,1,225,1,225,3,225,5458,8,225,1,226,1,226,1,226,1,
        226,1,226,1,226,1,226,1,226,3,226,5468,8,226,1,226,1,226,3,226,5472,
        8,226,1,226,3,226,5475,8,226,1,226,1,226,1,226,1,226,1,226,3,226,
        5482,8,226,1,226,1,226,1,226,3,226,5487,8,226,1,226,1,226,1,226,
        1,226,3,226,5493,8,226,1,226,1,226,3,226,5497,8,226,1,226,3,226,
        5500,8,226,3,226,5502,8,226,1,227,1,227,3,227,5506,8,227,1,227,3,
        227,5509,8,227,1,227,1,227,3,227,5513,8,227,1,227,1,227,1,227,1,
        227,1,227,3,227,5520,8,227,1,227,1,227,3,227,5524,8,227,1,227,1,
        227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5536,8,
        227,1,227,3,227,5539,8,227,1,227,3,227,5542,8,227,3,227,5544,8,227,
        1,228,1,228,3,228,5548,8,228,1,228,1,228,3,228,5552,8,228,3,228,
        5554,8,228,1,229,1,229,1,229,1,229,3,229,5560,8,229,1,229,1,229,
        1,229,1,229,1,229,1,229,3,229,5568,8,229,1,229,1,229,3,229,5572,
        8,229,1,230,1,230,3,230,5576,8,230,1,230,1,230,1,230,1,230,1,230,
        1,230,3,230,5584,8,230,1,230,3,230,5587,8,230,3,230,5589,8,230,1,
        231,1,231,1,231,3,231,5594,8,231,1,231,3,231,5597,8,231,1,231,1,
        231,3,231,5601,8,231,1,231,3,231,5604,8,231,1,231,1,231,3,231,5608,
        8,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,5618,
        8,232,1,232,3,232,5621,8,232,1,232,1,232,1,232,1,232,1,232,3,232,
        5628,8,232,1,232,3,232,5631,8,232,1,232,3,232,5634,8,232,1,233,3,
        233,5637,8,233,1,233,1,233,3,233,5641,8,233,1,233,3,233,5644,8,233,
        1,233,3,233,5647,8,233,1,233,1,233,3,233,5651,8,233,1,233,3,233,
        5654,8,233,1,233,1,233,3,233,5658,8,233,1,233,3,233,5661,8,233,1,
        233,1,233,3,233,5665,8,233,1,233,3,233,5668,8,233,1,233,3,233,5671,
        8,233,1,233,1,233,3,233,5675,8,233,1,233,3,233,5678,8,233,1,233,
        1,233,3,233,5682,8,233,1,233,3,233,5685,8,233,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,3,234,5695,8,234,1,235,3,235,5698,
        8,235,1,235,1,235,1,235,1,235,1,235,3,235,5705,8,235,1,236,1,236,
        1,236,1,236,1,236,1,236,3,236,5713,8,236,1,237,1,237,3,237,5717,
        8,237,1,238,1,238,1,238,1,239,1,239,3,239,5724,8,239,1,239,1,239,
        3,239,5728,8,239,1,239,1,239,3,239,5732,8,239,1,239,1,239,3,239,
        5736,8,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,3,239,5745,
        8,239,3,239,5747,8,239,1,239,1,239,3,239,5751,8,239,1,239,1,239,
        1,239,1,239,1,239,3,239,5758,8,239,3,239,5760,8,239,1,239,1,239,
        3,239,5764,8,239,1,239,1,239,1,239,3,239,5769,8,239,3,239,5771,8,
        239,1,239,1,239,1,239,1,239,1,239,3,239,5778,8,239,1,239,1,239,3,
        239,5782,8,239,3,239,5784,8,239,1,240,1,240,1,240,1,240,1,241,1,
        241,1,241,3,241,5793,8,241,1,241,1,241,1,242,1,242,1,242,3,242,5800,
        8,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,244,1,245,3,245,
        5811,8,245,1,245,1,245,1,246,1,246,1,246,1,246,3,246,5819,8,246,
        1,247,1,247,1,247,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,
        1,250,1,250,1,250,1,251,1,251,1,251,1,251,1,252,1,252,1,252,1,252,
        3,252,5843,8,252,1,253,1,253,1,253,3,253,5848,8,253,3,253,5850,8,
        253,1,254,1,254,1,254,1,254,1,255,1,255,1,255,1,255,1,256,1,256,
        1,256,1,256,3,256,5864,8,256,1,257,4,257,5867,8,257,11,257,12,257,
        5868,1,258,1,258,3,258,5873,8,258,1,258,1,258,3,258,5877,8,258,1,
        258,1,258,3,258,5881,8,258,1,258,1,258,3,258,5885,8,258,1,258,3,
        258,5888,8,258,1,258,1,258,3,258,5892,8,258,1,258,3,258,5895,8,258,
        1,259,1,259,1,259,1,259,1,259,3,259,5902,8,259,1,259,1,259,1,259,
        1,259,3,259,5908,8,259,1,260,1,260,1,260,1,260,5,260,5914,8,260,
        10,260,12,260,5917,9,260,1,261,1,261,3,261,5921,8,261,1,262,1,262,
        3,262,5925,8,262,1,262,1,262,1,262,1,263,1,263,1,263,3,263,5933,
        8,263,1,263,1,263,1,263,1,263,1,263,1,263,4,263,5941,8,263,11,263,
        12,263,5942,1,263,1,263,1,264,1,264,1,264,1,264,1,264,5,264,5952,
        8,264,10,264,12,264,5955,9,264,1,264,1,264,1,265,1,265,1,265,5,265,
        5962,8,265,10,265,12,265,5965,9,265,1,265,1,265,1,265,1,265,3,265,
        5971,8,265,1,265,3,265,5974,8,265,3,265,5976,8,265,1,266,3,266,5979,
        8,266,1,266,1,266,1,266,1,266,3,266,5985,8,266,3,266,5987,8,266,
        1,266,1,837,3,0,160,162,267,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
        336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
        368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
        400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,
        432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
        464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
        496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,
        528,530,532,0,94,4,0,142,142,204,204,247,247,447,447,1,0,369,370,
        3,0,165,165,219,219,355,355,1,0,1185,1186,2,0,178,178,840,840,2,
        0,21,21,116,116,2,0,156,156,731,731,2,0,272,272,1211,1211,1,0,1221,
        1222,4,0,556,556,735,735,1010,1010,1015,1015,1,0,1219,1220,1,0,1217,
        1218,2,0,736,736,876,876,3,0,520,521,523,525,530,530,4,0,513,513,
        519,519,528,529,531,531,3,0,515,515,526,527,532,532,3,0,817,817,
        823,823,825,825,3,0,815,816,819,820,822,822,6,0,106,106,185,185,
        248,248,258,258,368,368,478,478,4,0,185,185,248,248,258,258,368,
        368,9,0,30,32,213,213,238,239,244,244,246,246,380,380,396,397,403,
        403,461,462,2,0,13,13,121,121,3,0,80,80,84,85,327,335,3,0,13,13,
        121,121,448,448,7,0,30,32,238,239,244,244,246,246,396,397,403,403,
        461,462,3,0,301,301,603,603,630,630,2,0,673,673,734,734,2,0,730,
        730,737,737,3,0,237,237,241,241,260,260,1,0,851,852,16,0,3,3,6,7,
        22,23,25,25,27,27,81,82,113,113,147,147,222,222,228,228,276,276,
        318,318,378,379,390,390,407,408,479,479,3,0,565,566,674,674,926,
        926,3,0,26,26,251,251,319,319,2,0,894,894,1006,1006,2,0,815,816,
        819,820,2,0,43,43,45,45,3,0,52,53,55,58,240,240,3,0,161,161,425,
        425,437,437,5,0,547,547,549,550,682,682,892,893,924,925,3,0,957,
        960,966,970,972,976,5,0,612,616,783,785,867,868,1033,1036,1064,1064,
        2,0,689,689,738,738,6,0,561,562,620,621,748,751,964,965,1003,1004,
        1141,1144,1,0,997,998,2,0,995,995,999,999,1,0,808,809,7,0,185,185,
        248,248,258,258,368,368,478,478,1076,1076,1099,1099,2,0,9,9,814,
        814,7,0,106,106,185,185,248,248,258,258,368,368,423,424,478,478,
        1,0,179,180,1,0,650,651,1,0,450,451,5,0,535,535,572,572,708,708,
        739,739,1084,1084,4,0,54,54,383,383,399,399,465,465,2,0,219,219,
        355,355,3,0,233,233,454,454,1011,1011,2,0,746,746,898,898,2,0,747,
        747,899,899,2,0,159,159,1208,1208,1,0,401,402,1,0,433,434,3,0,39,
        39,217,217,429,429,2,0,593,593,636,636,2,0,661,661,701,701,2,0,307,
        307,942,942,3,0,593,593,636,636,914,914,1,0,1104,1107,2,0,290,290,
        1208,1208,2,0,274,274,649,649,2,0,593,593,914,914,4,0,274,274,489,
        489,649,649,794,794,2,0,697,697,885,885,4,0,32,32,629,629,690,690,
        745,745,2,0,660,660,700,700,2,0,1207,1207,1210,1210,3,0,13,13,18,
        18,382,382,1,0,1069,1072,2,0,1198,1200,1203,1203,12,0,106,106,506,
        509,678,678,774,774,778,779,863,864,904,904,949,949,985,985,1009,
        1009,1026,1028,1061,1062,1,0,488,1192,2,0,108,109,278,278,2,0,52,
        52,55,55,2,0,1042,1042,1059,1059,3,0,681,681,723,723,752,752,2,0,
        723,723,752,752,4,0,173,173,725,725,735,735,1015,1015,2,0,438,438,
        455,455,2,0,49,49,88,88,2,0,735,735,1015,1015,2,0,556,556,1010,1010,
        1,0,226,227,2,0,159,159,190,190,2,0,659,659,662,662,2,0,128,128,
        938,938,6866,0,540,1,0,0,0,2,553,1,0,0,0,4,598,1,0,0,0,6,602,1,0,
        0,0,8,616,1,0,0,0,10,618,1,0,0,0,12,631,1,0,0,0,14,650,1,0,0,0,16,
        664,1,0,0,0,18,677,1,0,0,0,20,679,1,0,0,0,22,694,1,0,0,0,24,727,
        1,0,0,0,26,735,1,0,0,0,28,746,1,0,0,0,30,750,1,0,0,0,32,756,1,0,
        0,0,34,760,1,0,0,0,36,825,1,0,0,0,38,827,1,0,0,0,40,830,1,0,0,0,
        42,862,1,0,0,0,44,876,1,0,0,0,46,908,1,0,0,0,48,910,1,0,0,0,50,916,
        1,0,0,0,52,921,1,0,0,0,54,933,1,0,0,0,56,936,1,0,0,0,58,950,1,0,
        0,0,60,967,1,0,0,0,62,982,1,0,0,0,64,997,1,0,0,0,66,1008,1,0,0,0,
        68,1028,1,0,0,0,70,1037,1,0,0,0,72,1052,1,0,0,0,74,1112,1,0,0,0,
        76,1131,1,0,0,0,78,1181,1,0,0,0,80,1235,1,0,0,0,82,1251,1,0,0,0,
        84,1269,1,0,0,0,86,1286,1,0,0,0,88,1335,1,0,0,0,90,1357,1,0,0,0,
        92,1385,1,0,0,0,94,1395,1,0,0,0,96,1402,1,0,0,0,98,1408,1,0,0,0,
        100,1413,1,0,0,0,102,1431,1,0,0,0,104,1433,1,0,0,0,106,1441,1,0,
        0,0,108,1494,1,0,0,0,110,1549,1,0,0,0,112,1551,1,0,0,0,114,1569,
        1,0,0,0,116,1578,1,0,0,0,118,1583,1,0,0,0,120,1598,1,0,0,0,122,1604,
        1,0,0,0,124,1608,1,0,0,0,126,1620,1,0,0,0,128,1630,1,0,0,0,130,1633,
        1,0,0,0,132,1638,1,0,0,0,134,1643,1,0,0,0,136,1661,1,0,0,0,138,1663,
        1,0,0,0,140,1666,1,0,0,0,142,1669,1,0,0,0,144,1683,1,0,0,0,146,1691,
        1,0,0,0,148,1706,1,0,0,0,150,1719,1,0,0,0,152,1745,1,0,0,0,154,1755,
        1,0,0,0,156,1763,1,0,0,0,158,1767,1,0,0,0,160,2017,1,0,0,0,162,2106,
        1,0,0,0,164,2516,1,0,0,0,166,2541,1,0,0,0,168,2547,1,0,0,0,170,2549,
        1,0,0,0,172,2566,1,0,0,0,174,2582,1,0,0,0,176,2585,1,0,0,0,178,2602,
        1,0,0,0,180,2604,1,0,0,0,182,2609,1,0,0,0,184,2652,1,0,0,0,186,2689,
        1,0,0,0,188,2840,1,0,0,0,190,2896,1,0,0,0,192,3111,1,0,0,0,194,3153,
        1,0,0,0,196,3219,1,0,0,0,198,3277,1,0,0,0,200,3302,1,0,0,0,202,3332,
        1,0,0,0,204,3335,1,0,0,0,206,3473,1,0,0,0,208,3525,1,0,0,0,210,3555,
        1,0,0,0,212,3558,1,0,0,0,214,3600,1,0,0,0,216,3624,1,0,0,0,218,3667,
        1,0,0,0,220,3758,1,0,0,0,222,4073,1,0,0,0,224,4197,1,0,0,0,226,4446,
        1,0,0,0,228,4470,1,0,0,0,230,4499,1,0,0,0,232,4501,1,0,0,0,234,4504,
        1,0,0,0,236,4507,1,0,0,0,238,4510,1,0,0,0,240,4513,1,0,0,0,242,4515,
        1,0,0,0,244,4531,1,0,0,0,246,4537,1,0,0,0,248,4539,1,0,0,0,250,4564,
        1,0,0,0,252,4573,1,0,0,0,254,4578,1,0,0,0,256,4586,1,0,0,0,258,4598,
        1,0,0,0,260,4608,1,0,0,0,262,4614,1,0,0,0,264,4629,1,0,0,0,266,4650,
        1,0,0,0,268,4652,1,0,0,0,270,4665,1,0,0,0,272,4673,1,0,0,0,274,4684,
        1,0,0,0,276,4694,1,0,0,0,278,4709,1,0,0,0,280,4796,1,0,0,0,282,4807,
        1,0,0,0,284,4823,1,0,0,0,286,4827,1,0,0,0,288,4839,1,0,0,0,290,4844,
        1,0,0,0,292,4849,1,0,0,0,294,4853,1,0,0,0,296,4873,1,0,0,0,298,4875,
        1,0,0,0,300,4896,1,0,0,0,302,4906,1,0,0,0,304,4909,1,0,0,0,306,4913,
        1,0,0,0,308,4916,1,0,0,0,310,4926,1,0,0,0,312,4929,1,0,0,0,314,4931,
        1,0,0,0,316,4935,1,0,0,0,318,4949,1,0,0,0,320,4960,1,0,0,0,322,4969,
        1,0,0,0,324,5019,1,0,0,0,326,5021,1,0,0,0,328,5027,1,0,0,0,330,5034,
        1,0,0,0,332,5040,1,0,0,0,334,5085,1,0,0,0,336,5087,1,0,0,0,338,5094,
        1,0,0,0,340,5101,1,0,0,0,342,5112,1,0,0,0,344,5114,1,0,0,0,346,5125,
        1,0,0,0,348,5136,1,0,0,0,350,5147,1,0,0,0,352,5154,1,0,0,0,354,5157,
        1,0,0,0,356,5160,1,0,0,0,358,5164,1,0,0,0,360,5167,1,0,0,0,362,5188,
        1,0,0,0,364,5190,1,0,0,0,366,5205,1,0,0,0,368,5207,1,0,0,0,370,5210,
        1,0,0,0,372,5218,1,0,0,0,374,5231,1,0,0,0,376,5235,1,0,0,0,378,5237,
        1,0,0,0,380,5239,1,0,0,0,382,5241,1,0,0,0,384,5244,1,0,0,0,386,5249,
        1,0,0,0,388,5254,1,0,0,0,390,5258,1,0,0,0,392,5292,1,0,0,0,394,5294,
        1,0,0,0,396,5308,1,0,0,0,398,5314,1,0,0,0,400,5318,1,0,0,0,402,5323,
        1,0,0,0,404,5332,1,0,0,0,406,5341,1,0,0,0,408,5350,1,0,0,0,410,5359,
        1,0,0,0,412,5367,1,0,0,0,414,5371,1,0,0,0,416,5376,1,0,0,0,418,5380,
        1,0,0,0,420,5384,1,0,0,0,422,5388,1,0,0,0,424,5392,1,0,0,0,426,5396,
        1,0,0,0,428,5400,1,0,0,0,430,5404,1,0,0,0,432,5408,1,0,0,0,434,5412,
        1,0,0,0,436,5416,1,0,0,0,438,5420,1,0,0,0,440,5424,1,0,0,0,442,5426,
        1,0,0,0,444,5428,1,0,0,0,446,5436,1,0,0,0,448,5445,1,0,0,0,450,5457,
        1,0,0,0,452,5501,1,0,0,0,454,5543,1,0,0,0,456,5553,1,0,0,0,458,5571,
        1,0,0,0,460,5588,1,0,0,0,462,5607,1,0,0,0,464,5633,1,0,0,0,466,5684,
        1,0,0,0,468,5694,1,0,0,0,470,5704,1,0,0,0,472,5712,1,0,0,0,474,5716,
        1,0,0,0,476,5718,1,0,0,0,478,5783,1,0,0,0,480,5785,1,0,0,0,482,5789,
        1,0,0,0,484,5796,1,0,0,0,486,5803,1,0,0,0,488,5807,1,0,0,0,490,5810,
        1,0,0,0,492,5814,1,0,0,0,494,5820,1,0,0,0,496,5823,1,0,0,0,498,5826,
        1,0,0,0,500,5830,1,0,0,0,502,5834,1,0,0,0,504,5838,1,0,0,0,506,5849,
        1,0,0,0,508,5851,1,0,0,0,510,5855,1,0,0,0,512,5863,1,0,0,0,514,5866,
        1,0,0,0,516,5870,1,0,0,0,518,5907,1,0,0,0,520,5909,1,0,0,0,522,5920,
        1,0,0,0,524,5922,1,0,0,0,526,5929,1,0,0,0,528,5946,1,0,0,0,530,5958,
        1,0,0,0,532,5978,1,0,0,0,534,535,6,0,-1,0,535,541,3,2,1,0,536,537,
        5,1213,0,0,537,538,3,0,0,0,538,539,5,1214,0,0,539,541,1,0,0,0,540,
        534,1,0,0,0,540,536,1,0,0,0,541,550,1,0,0,0,542,543,10,2,0,0,543,
        545,7,0,0,0,544,546,5,13,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,
        547,1,0,0,0,547,549,3,0,0,3,548,542,1,0,0,0,549,552,1,0,0,0,550,
        548,1,0,0,0,550,551,1,0,0,0,551,1,1,0,0,0,552,550,1,0,0,0,553,555,
        7,1,0,0,554,556,3,4,2,0,555,554,1,0,0,0,555,556,1,0,0,0,556,558,
        1,0,0,0,557,559,3,6,3,0,558,557,1,0,0,0,558,559,1,0,0,0,559,560,
        1,0,0,0,560,592,3,8,4,0,561,565,3,22,11,0,562,564,3,112,56,0,563,
        562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,
        591,1,0,0,0,567,565,1,0,0,0,568,591,3,20,10,0,569,591,3,118,59,0,
        570,591,3,120,60,0,571,574,3,138,69,0,572,574,3,140,70,0,573,571,
        1,0,0,0,573,572,1,0,0,0,574,591,1,0,0,0,575,591,3,142,71,0,576,578,
        3,112,56,0,577,576,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,
        1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,586,3,152,76,0,583,585,
        3,112,56,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,
        1,0,0,0,587,591,1,0,0,0,588,586,1,0,0,0,589,591,3,158,79,0,590,561,
        1,0,0,0,590,568,1,0,0,0,590,569,1,0,0,0,590,570,1,0,0,0,590,573,
        1,0,0,0,590,575,1,0,0,0,590,579,1,0,0,0,590,589,1,0,0,0,591,594,
        1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,596,1,0,0,0,594,592,
        1,0,0,0,595,597,3,150,75,0,596,595,1,0,0,0,596,597,1,0,0,0,597,3,
        1,0,0,0,598,599,5,474,0,0,599,600,5,1079,0,0,600,601,5,364,0,0,601,
        5,1,0,0,0,602,603,5,20,0,0,603,604,5,720,0,0,604,7,1,0,0,0,605,610,
        5,121,0,0,606,610,5,448,0,0,607,610,5,13,0,0,608,610,3,12,6,0,609,
        605,1,0,0,0,609,606,1,0,0,0,609,607,1,0,0,0,609,608,1,0,0,0,610,
        613,1,0,0,0,611,613,3,10,5,0,612,609,1,0,0,0,612,611,1,0,0,0,612,
        613,1,0,0,0,613,614,1,0,0,0,614,617,3,16,8,0,615,617,3,14,7,0,616,
        612,1,0,0,0,616,615,1,0,0,0,617,9,1,0,0,0,618,622,5,427,0,0,619,
        623,3,376,188,0,620,623,3,380,190,0,621,623,3,358,179,0,622,619,
        1,0,0,0,622,620,1,0,0,0,622,621,1,0,0,0,623,625,1,0,0,0,624,626,
        5,300,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,629,1,0,0,0,627,628,
        5,474,0,0,628,630,5,986,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,
        11,1,0,0,0,631,642,5,271,0,0,632,633,5,286,0,0,633,634,5,765,0,0,
        634,635,5,290,0,0,635,643,5,296,0,0,636,637,5,286,0,0,637,640,5,
        296,0,0,638,639,5,290,0,0,639,641,5,765,0,0,640,638,1,0,0,0,640,
        641,1,0,0,0,641,643,1,0,0,0,642,632,1,0,0,0,642,636,1,0,0,0,642,
        643,1,0,0,0,643,13,1,0,0,0,644,651,5,1219,0,0,645,646,3,404,202,
        0,646,647,5,1209,0,0,647,648,5,1219,0,0,648,651,1,0,0,0,649,651,
        3,396,198,0,650,644,1,0,0,0,650,645,1,0,0,0,650,649,1,0,0,0,651,
        652,1,0,0,0,652,653,5,1209,0,0,653,654,5,13,0,0,654,15,1,0,0,0,655,
        665,5,1219,0,0,656,661,3,18,9,0,657,658,5,1208,0,0,658,660,3,18,
        9,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,
        0,0,662,665,1,0,0,0,663,661,1,0,0,0,664,655,1,0,0,0,664,656,1,0,
        0,0,665,17,1,0,0,0,666,671,3,162,81,0,667,669,5,20,0,0,668,667,1,
        0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,672,3,420,210,0,671,668,
        1,0,0,0,671,672,1,0,0,0,672,678,1,0,0,0,673,674,3,404,202,0,674,
        675,5,1209,0,0,675,676,5,1219,0,0,676,678,1,0,0,0,677,666,1,0,0,
        0,677,673,1,0,0,0,678,19,1,0,0,0,679,682,5,206,0,0,680,683,3,422,
        211,0,681,683,3,354,177,0,682,680,1,0,0,0,682,681,1,0,0,0,683,691,
        1,0,0,0,684,687,5,1208,0,0,685,688,3,422,211,0,686,688,3,354,177,
        0,687,685,1,0,0,0,687,686,1,0,0,0,688,690,1,0,0,0,689,684,1,0,0,
        0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,21,1,0,0,0,
        693,691,1,0,0,0,694,695,5,164,0,0,695,696,3,24,12,0,696,23,1,0,0,
        0,697,701,3,26,13,0,698,700,3,28,14,0,699,698,1,0,0,0,700,703,1,
        0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,728,1,0,0,0,703,701,1,
        0,0,0,704,708,3,30,15,0,705,707,3,28,14,0,706,705,1,0,0,0,707,710,
        1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,728,1,0,0,0,710,708,
        1,0,0,0,711,715,3,32,16,0,712,714,3,28,14,0,713,712,1,0,0,0,714,
        717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,728,1,0,0,0,717,
        715,1,0,0,0,718,719,5,1213,0,0,719,720,3,24,12,0,720,724,5,1214,
        0,0,721,723,3,28,14,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,1,
        0,0,0,724,725,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,727,697,1,
        0,0,0,727,704,1,0,0,0,727,711,1,0,0,0,727,718,1,0,0,0,728,25,1,0,
        0,0,729,736,3,34,17,0,730,736,3,104,52,0,731,736,3,40,20,0,732,736,
        3,56,28,0,733,736,3,42,21,0,734,736,3,68,34,0,735,729,1,0,0,0,735,
        730,1,0,0,0,735,731,1,0,0,0,735,732,1,0,0,0,735,733,1,0,0,0,735,
        734,1,0,0,0,736,27,1,0,0,0,737,738,5,1208,0,0,738,747,3,34,17,0,
        739,740,5,1208,0,0,740,747,3,104,52,0,741,742,5,1208,0,0,742,747,
        3,56,28,0,743,744,5,1208,0,0,744,747,3,68,34,0,745,747,3,36,18,0,
        746,737,1,0,0,0,746,739,1,0,0,0,746,741,1,0,0,0,746,743,1,0,0,0,
        746,745,1,0,0,0,747,29,1,0,0,0,748,751,3,34,17,0,749,751,3,104,52,
        0,750,748,1,0,0,0,750,749,1,0,0,0,751,752,1,0,0,0,752,753,3,316,
        158,0,753,31,1,0,0,0,754,757,3,34,17,0,755,757,3,104,52,0,756,754,
        1,0,0,0,756,755,1,0,0,0,757,758,1,0,0,0,758,759,3,332,166,0,759,
        33,1,0,0,0,760,765,3,404,202,0,761,763,3,54,27,0,762,764,3,52,26,
        0,763,762,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,761,1,0,0,
        0,765,766,1,0,0,0,766,771,1,0,0,0,767,769,5,20,0,0,768,767,1,0,0,
        0,768,769,1,0,0,0,769,770,1,0,0,0,770,772,3,420,210,0,771,768,1,
        0,0,0,771,772,1,0,0,0,772,35,1,0,0,0,773,779,5,194,0,0,774,776,7,
        2,0,0,775,777,5,294,0,0,776,775,1,0,0,0,776,777,1,0,0,0,777,779,
        1,0,0,0,778,773,1,0,0,0,778,774,1,0,0,0,778,779,1,0,0,0,779,780,
        1,0,0,0,780,781,5,210,0,0,781,785,3,26,13,0,782,784,3,38,19,0,783,
        782,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,
        826,1,0,0,0,787,785,1,0,0,0,788,794,5,194,0,0,789,791,7,2,0,0,790,
        792,5,294,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,
        788,1,0,0,0,793,789,1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,
        796,5,210,0,0,796,797,5,1213,0,0,797,798,3,24,12,0,798,802,5,1214,
        0,0,799,801,3,38,19,0,800,799,1,0,0,0,801,804,1,0,0,0,802,800,1,
        0,0,0,802,803,1,0,0,0,803,826,1,0,0,0,804,802,1,0,0,0,805,806,5,
        87,0,0,806,807,5,210,0,0,807,811,3,26,13,0,808,810,3,38,19,0,809,
        808,1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,
        826,1,0,0,0,813,811,1,0,0,0,814,815,5,87,0,0,815,816,5,210,0,0,816,
        817,5,1213,0,0,817,818,3,24,12,0,818,822,5,1214,0,0,819,821,3,38,
        19,0,820,819,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,
        0,0,823,826,1,0,0,0,824,822,1,0,0,0,825,778,1,0,0,0,825,793,1,0,
        0,0,825,805,1,0,0,0,825,814,1,0,0,0,826,37,1,0,0,0,827,828,5,286,
        0,0,828,829,3,160,80,0,829,39,1,0,0,0,830,831,5,160,0,0,831,832,
        5,406,0,0,832,839,5,1213,0,0,833,840,3,2,1,0,834,836,9,0,0,0,835,
        834,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,837,835,1,0,0,0,838,
        840,1,0,0,0,839,833,1,0,0,0,839,835,1,0,0,0,840,841,1,0,0,0,841,
        842,5,1214,0,0,842,855,3,54,27,0,843,844,5,664,0,0,844,845,5,1213,
        0,0,845,850,3,46,23,0,846,847,5,1208,0,0,847,849,3,46,23,0,848,846,
        1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,853,
        1,0,0,0,852,850,1,0,0,0,853,854,5,1214,0,0,854,856,1,0,0,0,855,843,
        1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,859,5,20,0,0,858,857,
        1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,861,3,420,210,0,861,
        41,1,0,0,0,862,863,3,408,204,0,863,864,3,54,27,0,864,866,5,1213,
        0,0,865,867,3,44,22,0,866,865,1,0,0,0,867,868,1,0,0,0,868,866,1,
        0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,872,5,1214,0,0,871,873,
        5,20,0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,875,
        3,420,210,0,875,43,1,0,0,0,876,877,5,286,0,0,877,878,5,1213,0,0,
        878,883,3,162,81,0,879,880,5,1208,0,0,880,882,3,162,81,0,881,879,
        1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,
        1,0,0,0,885,883,1,0,0,0,886,890,5,1214,0,0,887,889,3,102,51,0,888,
        887,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,
        897,1,0,0,0,892,890,1,0,0,0,893,895,5,224,0,0,894,893,1,0,0,0,894,
        895,1,0,0,0,895,896,1,0,0,0,896,898,3,152,76,0,897,894,1,0,0,0,897,
        898,1,0,0,0,898,899,1,0,0,0,899,900,3,48,24,0,900,45,1,0,0,0,901,
        909,3,104,52,0,902,904,3,404,202,0,903,905,5,20,0,0,904,903,1,0,
        0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,907,3,420,210,0,907,909,
        1,0,0,0,908,901,1,0,0,0,908,902,1,0,0,0,909,47,1,0,0,0,910,912,5,
        457,0,0,911,913,3,50,25,0,912,911,1,0,0,0,913,914,1,0,0,0,914,912,
        1,0,0,0,914,915,1,0,0,0,915,49,1,0,0,0,916,917,3,400,200,0,917,918,
        5,1213,0,0,918,919,3,162,81,0,919,920,5,1214,0,0,920,51,1,0,0,0,
        921,922,5,352,0,0,922,923,5,1213,0,0,923,928,3,352,176,0,924,925,
        5,1208,0,0,925,927,3,352,176,0,926,924,1,0,0,0,927,930,1,0,0,0,928,
        926,1,0,0,0,928,929,1,0,0,0,929,931,1,0,0,0,930,928,1,0,0,0,931,
        932,5,1214,0,0,932,53,1,0,0,0,933,934,5,1210,0,0,934,935,3,420,210,
        0,935,55,1,0,0,0,936,937,5,406,0,0,937,940,5,1213,0,0,938,941,3,
        58,29,0,939,941,3,60,30,0,940,938,1,0,0,0,940,939,1,0,0,0,941,942,
        1,0,0,0,942,944,5,1214,0,0,943,945,5,20,0,0,944,943,1,0,0,0,944,
        945,1,0,0,0,945,946,1,0,0,0,946,948,3,420,210,0,947,949,3,348,174,
        0,948,947,1,0,0,0,948,949,1,0,0,0,949,57,1,0,0,0,950,954,3,408,204,
        0,951,952,5,1213,0,0,952,955,5,1214,0,0,953,955,3,346,173,0,954,
        951,1,0,0,0,954,953,1,0,0,0,955,957,1,0,0,0,956,958,3,62,31,0,957,
        956,1,0,0,0,957,958,1,0,0,0,958,963,1,0,0,0,959,962,3,64,32,0,960,
        962,3,66,33,0,961,959,1,0,0,0,961,960,1,0,0,0,962,965,1,0,0,0,963,
        961,1,0,0,0,963,964,1,0,0,0,964,59,1,0,0,0,965,963,1,0,0,0,966,968,
        3,232,116,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,
        970,5,1148,0,0,970,974,5,1213,0,0,971,972,3,162,81,0,972,973,5,1208,
        0,0,973,975,1,0,0,0,974,971,1,0,0,0,974,975,1,0,0,0,975,976,1,0,
        0,0,976,977,3,162,81,0,977,980,5,1214,0,0,978,979,5,474,0,0,979,
        981,5,829,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,61,1,0,0,0,982,
        995,5,352,0,0,983,996,3,404,202,0,984,985,5,1213,0,0,985,990,3,352,
        176,0,986,987,5,1208,0,0,987,989,3,352,176,0,988,986,1,0,0,0,989,
        992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,993,1,0,0,0,992,
        990,1,0,0,0,993,994,5,1214,0,0,994,996,1,0,0,0,995,983,1,0,0,0,995,
        984,1,0,0,0,995,996,1,0,0,0,996,63,1,0,0,0,997,998,5,224,0,0,998,
        999,5,291,0,0,999,1000,5,42,0,0,1000,1005,3,154,77,0,1001,1002,5,
        1208,0,0,1002,1004,3,154,77,0,1003,1001,1,0,0,0,1004,1007,1,0,0,
        0,1005,1003,1,0,0,0,1005,1006,1,0,0,0,1006,65,1,0,0,0,1007,1005,
        1,0,0,0,1008,1009,5,178,0,0,1009,1010,5,42,0,0,1010,1015,3,396,198,
        0,1011,1012,5,1208,0,0,1012,1014,3,396,198,0,1013,1011,1,0,0,0,1014,
        1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,67,1,0,0,0,
        1017,1015,1,0,0,0,1018,1029,3,70,35,0,1019,1029,3,72,36,0,1020,1029,
        3,74,37,0,1021,1029,3,76,38,0,1022,1029,3,78,39,0,1023,1029,3,80,
        40,0,1024,1029,3,84,42,0,1025,1029,3,82,41,0,1026,1029,3,86,43,0,
        1027,1029,3,88,44,0,1028,1018,1,0,0,0,1028,1019,1,0,0,0,1028,1020,
        1,0,0,0,1028,1021,1,0,0,0,1028,1022,1,0,0,0,1028,1023,1,0,0,0,1028,
        1024,1,0,0,0,1028,1025,1,0,0,0,1028,1026,1,0,0,0,1028,1027,1,0,0,
        0,1029,1031,1,0,0,0,1030,1032,5,20,0,0,1031,1030,1,0,0,0,1031,1032,
        1,0,0,0,1032,1033,1,0,0,0,1033,1035,3,420,210,0,1034,1036,3,348,
        174,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,69,1,0,0,0,1037,1038,
        5,1057,0,0,1038,1040,5,1213,0,0,1039,1041,3,294,147,0,1040,1039,
        1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1044,3,162,81,0,
        1043,1045,3,282,141,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,1047,
        1,0,0,0,1046,1048,3,298,149,0,1047,1046,1,0,0,0,1047,1048,1,0,0,
        0,1048,1049,1,0,0,0,1049,1050,5,1214,0,0,1050,71,1,0,0,0,1051,1053,
        3,232,116,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,
        0,1054,1055,5,1149,0,0,1055,1056,5,1213,0,0,1056,1059,5,286,0,0,
        1057,1060,3,404,202,0,1058,1060,3,350,175,0,1059,1057,1,0,0,0,1059,
        1058,1,0,0,0,1060,1071,1,0,0,0,1061,1062,5,178,0,0,1062,1063,5,42,
        0,0,1063,1068,3,162,81,0,1064,1065,5,1208,0,0,1065,1067,3,162,81,
        0,1066,1064,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,0,1068,1069,
        1,0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1071,1061,1,0,0,0,1071,
        1072,1,0,0,0,1072,1084,1,0,0,0,1073,1074,5,224,0,0,1074,1075,5,291,
        0,0,1075,1076,5,42,0,0,1076,1081,3,162,81,0,1077,1078,5,1208,0,0,
        1078,1080,3,162,81,0,1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,
        1,0,0,0,1081,1082,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1084,
        1073,1,0,0,0,1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,1087,5,457,
        0,0,1087,1088,5,1150,0,0,1088,1089,5,1213,0,0,1089,1090,3,370,185,
        0,1090,1096,5,1214,0,0,1091,1092,5,1151,0,0,1092,1093,5,1213,0,0,
        1093,1094,3,370,185,0,1094,1095,5,1214,0,0,1095,1097,1,0,0,0,1096,
        1091,1,0,0,0,1096,1097,1,0,0,0,1097,1103,1,0,0,0,1098,1099,5,1152,
        0,0,1099,1100,5,1213,0,0,1100,1101,3,370,185,0,1101,1102,5,1214,
        0,0,1102,1104,1,0,0,0,1103,1098,1,0,0,0,1103,1104,1,0,0,0,1104,1110,
        1,0,0,0,1105,1106,5,1153,0,0,1106,1107,5,1213,0,0,1107,1108,3,370,
        185,0,1108,1109,5,1214,0,0,1109,1111,1,0,0,0,1110,1105,1,0,0,0,1110,
        1111,1,0,0,0,1111,73,1,0,0,0,1112,1113,5,1154,0,0,1113,1114,5,1213,
        0,0,1114,1117,5,286,0,0,1115,1118,3,404,202,0,1116,1118,3,350,175,
        0,1117,1115,1,0,0,0,1117,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1120,
        5,457,0,0,1120,1121,5,1213,0,0,1121,1125,3,106,53,0,1122,1124,3,
        108,54,0,1123,1122,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,
        1126,1,0,0,0,1126,1128,1,0,0,0,1127,1125,1,0,0,0,1128,1129,5,1214,
        0,0,1129,1130,5,1214,0,0,1130,75,1,0,0,0,1131,1132,5,906,0,0,1132,
        1133,5,1213,0,0,1133,1148,3,90,45,0,1134,1135,5,352,0,0,1135,1145,
        5,1213,0,0,1136,1146,5,1219,0,0,1137,1142,3,370,185,0,1138,1139,
        5,1208,0,0,1139,1141,3,370,185,0,1140,1138,1,0,0,0,1141,1144,1,0,
        0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,1146,1,0,0,0,1144,1142,
        1,0,0,0,1145,1136,1,0,0,0,1145,1137,1,0,0,0,1146,1147,1,0,0,0,1147,
        1149,5,1214,0,0,1148,1134,1,0,0,0,1148,1149,1,0,0,0,1149,1155,1,
        0,0,0,1150,1151,5,625,0,0,1151,1152,5,1213,0,0,1152,1153,3,370,185,
        0,1153,1154,5,1214,0,0,1154,1156,1,0,0,0,1155,1150,1,0,0,0,1155,
        1156,1,0,0,0,1156,1162,1,0,0,0,1157,1158,5,569,0,0,1158,1159,5,1213,
        0,0,1159,1160,3,370,185,0,1160,1161,5,1214,0,0,1161,1163,1,0,0,0,
        1162,1157,1,0,0,0,1162,1163,1,0,0,0,1163,1169,1,0,0,0,1164,1165,
        5,871,0,0,1165,1166,5,1213,0,0,1166,1167,3,370,185,0,1167,1168,5,
        1214,0,0,1168,1170,1,0,0,0,1169,1164,1,0,0,0,1169,1170,1,0,0,0,1170,
        1176,1,0,0,0,1171,1172,5,542,0,0,1172,1173,5,1213,0,0,1173,1174,
        3,402,201,0,1174,1175,5,1214,0,0,1175,1177,1,0,0,0,1176,1171,1,0,
        0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,1179,5,1214,0,0,1179,
        77,1,0,0,0,1180,1182,3,232,116,0,1181,1180,1,0,0,0,1181,1182,1,0,
        0,0,1182,1183,1,0,0,0,1183,1184,5,1159,0,0,1184,1185,5,1213,0,0,
        1185,1188,5,286,0,0,1186,1189,3,404,202,0,1187,1189,3,350,175,0,
        1188,1186,1,0,0,0,1188,1187,1,0,0,0,1189,1190,1,0,0,0,1190,1191,
        5,457,0,0,1191,1192,5,1160,0,0,1192,1193,5,1213,0,0,1193,1198,3,
        370,185,0,1194,1195,5,1208,0,0,1195,1197,3,370,185,0,1196,1194,1,
        0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,
        1201,1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,1214,0,0,1202,1203,5,
        1161,0,0,1203,1204,5,1213,0,0,1204,1205,3,370,185,0,1205,1206,5,
        1214,0,0,1206,1207,5,1162,0,0,1207,1208,5,1213,0,0,1208,1213,3,370,
        185,0,1209,1210,5,1208,0,0,1210,1212,3,370,185,0,1211,1209,1,0,0,
        0,1212,1215,1,0,0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1216,
        1,0,0,0,1215,1213,1,0,0,0,1216,1233,5,1214,0,0,1217,1218,5,1163,
        0,0,1218,1219,5,1213,0,0,1219,1224,3,370,185,0,1220,1221,5,1208,
        0,0,1221,1223,3,370,185,0,1222,1220,1,0,0,0,1223,1226,1,0,0,0,1224,
        1222,1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,1224,1,0,0,
        0,1227,1228,5,1214,0,0,1228,1229,5,1164,0,0,1229,1230,5,1213,0,0,
        1230,1231,3,370,185,0,1231,1232,5,1214,0,0,1232,1234,1,0,0,0,1233,
        1217,1,0,0,0,1233,1234,1,0,0,0,1234,79,1,0,0,0,1235,1236,5,1165,
        0,0,1236,1237,5,1213,0,0,1237,1238,3,90,45,0,1238,1239,5,457,0,0,
        1239,1240,5,1213,0,0,1240,1244,3,106,53,0,1241,1243,3,110,55,0,1242,
        1241,1,0,0,0,1243,1246,1,0,0,0,1244,1242,1,0,0,0,1244,1245,1,0,0,
        0,1245,1247,1,0,0,0,1246,1244,1,0,0,0,1247,1248,5,1214,0,0,1248,
        1249,5,1214,0,0,1249,81,1,0,0,0,1250,1252,3,232,116,0,1251,1250,
        1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1254,5,1184,0,0,
        1254,1255,5,1213,0,0,1255,1256,5,286,0,0,1256,1257,3,350,175,0,1257,
        1258,5,457,0,0,1258,1259,5,1187,0,0,1259,1260,5,1213,0,0,1260,1261,
        3,370,185,0,1261,1262,5,1214,0,0,1262,1263,5,1188,0,0,1263,1264,
        5,1213,0,0,1264,1265,3,370,185,0,1265,1266,5,1214,0,0,1266,1267,
        5,1214,0,0,1267,83,1,0,0,0,1268,1270,3,232,116,0,1269,1268,1,0,0,
        0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1272,5,1183,0,0,1272,
        1273,5,1213,0,0,1273,1274,5,286,0,0,1274,1281,3,350,175,0,1275,1277,
        5,457,0,0,1276,1278,3,100,50,0,1277,1276,1,0,0,0,1278,1279,1,0,0,
        0,1279,1277,1,0,0,0,1279,1280,1,0,0,0,1280,1282,1,0,0,0,1281,1275,
        1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,5,1214,0,0,
        1284,85,1,0,0,0,1285,1287,3,232,116,0,1286,1285,1,0,0,0,1286,1287,
        1,0,0,0,1287,1288,1,0,0,0,1288,1289,5,1182,0,0,1289,1290,5,1213,
        0,0,1290,1291,5,286,0,0,1291,1292,3,350,175,0,1292,1293,5,457,0,
        0,1293,1294,5,1187,0,0,1294,1295,5,1213,0,0,1295,1296,3,370,185,
        0,1296,1297,5,1214,0,0,1297,1298,5,1188,0,0,1298,1299,5,1213,0,0,
        1299,1304,3,370,185,0,1300,1301,5,1208,0,0,1301,1303,3,370,185,0,
        1302,1300,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,
        1,0,0,0,1305,1307,1,0,0,0,1306,1304,1,0,0,0,1307,1308,5,1214,0,0,
        1308,1309,5,1189,0,0,1309,1310,5,1213,0,0,1310,1315,3,370,185,0,
        1311,1312,5,1208,0,0,1312,1314,3,370,185,0,1313,1311,1,0,0,0,1314,
        1317,1,0,0,0,1315,1313,1,0,0,0,1315,1316,1,0,0,0,1316,1318,1,0,0,
        0,1317,1315,1,0,0,0,1318,1324,5,1214,0,0,1319,1320,5,1190,0,0,1320,
        1321,5,1213,0,0,1321,1322,3,376,188,0,1322,1323,5,1214,0,0,1323,
        1325,1,0,0,0,1324,1319,1,0,0,0,1324,1325,1,0,0,0,1325,1331,1,0,0,
        0,1326,1327,5,1191,0,0,1327,1328,5,1213,0,0,1328,1329,3,376,188,
        0,1329,1330,5,1214,0,0,1330,1332,1,0,0,0,1331,1326,1,0,0,0,1331,
        1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,5,1214,0,0,1334,87,1,0,
        0,0,1335,1336,3,404,202,0,1336,1340,5,1213,0,0,1337,1339,3,90,45,
        0,1338,1337,1,0,0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,1340,1341,
        1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,1343,1345,3,92,46,0,
        1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1349,1,0,0,0,1346,1348,
        3,94,47,0,1347,1346,1,0,0,0,1348,1351,1,0,0,0,1349,1347,1,0,0,0,
        1349,1350,1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1352,1354,
        3,96,48,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,1,0,0,0,
        1355,1356,5,1214,0,0,1356,89,1,0,0,0,1357,1360,5,286,0,0,1358,1361,
        3,404,202,0,1359,1361,3,350,175,0,1360,1358,1,0,0,0,1360,1359,1,
        0,0,0,1361,1364,1,0,0,0,1362,1363,5,20,0,0,1363,1365,3,420,210,0,
        1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,1368,1,0,0,0,1366,1369,
        3,102,51,0,1367,1369,5,635,0,0,1368,1366,1,0,0,0,1368,1367,1,0,0,
        0,1368,1369,1,0,0,0,1369,1383,1,0,0,0,1370,1372,5,224,0,0,1371,1370,
        1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,0,0,0,1373,1374,5,291,0,0,
        1374,1375,5,42,0,0,1375,1380,3,154,77,0,1376,1377,5,1208,0,0,1377,
        1379,3,154,77,0,1378,1376,1,0,0,0,1379,1382,1,0,0,0,1380,1378,1,
        0,0,0,1380,1381,1,0,0,0,1381,1384,1,0,0,0,1382,1380,1,0,0,0,1383,
        1371,1,0,0,0,1383,1384,1,0,0,0,1384,91,1,0,0,0,1385,1386,5,144,0,
        0,1386,1387,5,236,0,0,1387,1388,5,1224,0,0,1388,1393,3,370,185,0,
        1389,1390,5,577,0,0,1390,1391,5,457,0,0,1391,1392,5,1224,0,0,1392,
        1394,3,370,185,0,1393,1389,1,0,0,0,1393,1394,1,0,0,0,1394,93,1,0,
        0,0,1395,1396,5,293,0,0,1396,1397,5,406,0,0,1397,1398,3,400,200,
        0,1398,1399,5,1213,0,0,1399,1400,3,404,202,0,1400,1401,5,1214,0,
        0,1401,95,1,0,0,0,1402,1404,5,457,0,0,1403,1405,3,98,49,0,1404,1403,
        1,0,0,0,1405,1406,1,0,0,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,
        97,1,0,0,0,1408,1411,3,400,200,0,1409,1412,3,346,173,0,1410,1412,
        3,350,175,0,1411,1409,1,0,0,0,1411,1410,1,0,0,0,1412,99,1,0,0,0,
        1413,1414,7,3,0,0,1414,1415,5,1213,0,0,1415,1416,3,162,81,0,1416,
        1417,5,1214,0,0,1417,101,1,0,0,0,1418,1419,7,4,0,0,1419,1420,5,42,
        0,0,1420,1425,3,162,81,0,1421,1422,5,1208,0,0,1422,1424,3,162,81,
        0,1423,1421,1,0,0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1425,1426,
        1,0,0,0,1426,1432,1,0,0,0,1427,1425,1,0,0,0,1428,1429,5,840,0,0,
        1429,1430,5,42,0,0,1430,1432,5,18,0,0,1431,1418,1,0,0,0,1431,1428,
        1,0,0,0,1432,103,1,0,0,0,1433,1435,3,350,175,0,1434,1436,5,20,0,
        0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,0,1437,1439,
        3,420,210,0,1438,1440,3,348,174,0,1439,1438,1,0,0,0,1439,1440,1,
        0,0,0,1440,105,1,0,0,0,1441,1442,5,1128,0,0,1442,1443,5,1213,0,0,
        1443,1444,5,1203,0,0,1444,1445,5,1214,0,0,1445,107,1,0,0,0,1446,
        1447,5,29,0,0,1447,1450,5,1213,0,0,1448,1451,3,402,201,0,1449,1451,
        3,370,185,0,1450,1448,1,0,0,0,1450,1449,1,0,0,0,1451,1452,1,0,0,
        0,1452,1453,5,1214,0,0,1453,1495,1,0,0,0,1454,1455,5,1155,0,0,1455,
        1456,5,1213,0,0,1456,1457,3,370,185,0,1457,1458,5,1214,0,0,1458,
        1495,1,0,0,0,1459,1460,5,1156,0,0,1460,1461,5,1213,0,0,1461,1462,
        3,370,185,0,1462,1463,5,1214,0,0,1463,1495,1,0,0,0,1464,1465,5,1157,
        0,0,1465,1466,5,1213,0,0,1466,1467,3,370,185,0,1467,1468,5,1214,
        0,0,1468,1495,1,0,0,0,1469,1470,5,1134,0,0,1470,1471,5,1213,0,0,
        1471,1472,3,370,185,0,1472,1473,5,1214,0,0,1473,1495,1,0,0,0,1474,
        1475,5,1158,0,0,1475,1476,5,1213,0,0,1476,1477,3,370,185,0,1477,
        1478,5,1214,0,0,1478,1495,1,0,0,0,1479,1480,5,1132,0,0,1480,1481,
        5,1213,0,0,1481,1482,3,370,185,0,1482,1483,5,1214,0,0,1483,1495,
        1,0,0,0,1484,1485,5,1133,0,0,1485,1486,5,1213,0,0,1486,1487,3,370,
        185,0,1487,1488,5,1214,0,0,1488,1495,1,0,0,0,1489,1490,5,1135,0,
        0,1490,1491,5,1213,0,0,1491,1492,3,370,185,0,1492,1493,5,1214,0,
        0,1493,1495,1,0,0,0,1494,1446,1,0,0,0,1494,1454,1,0,0,0,1494,1459,
        1,0,0,0,1494,1464,1,0,0,0,1494,1469,1,0,0,0,1494,1474,1,0,0,0,1494,
        1479,1,0,0,0,1494,1484,1,0,0,0,1494,1489,1,0,0,0,1495,109,1,0,0,
        0,1496,1497,5,29,0,0,1497,1500,5,1213,0,0,1498,1501,3,402,201,0,
        1499,1501,3,370,185,0,1500,1498,1,0,0,0,1500,1499,1,0,0,0,1501,1502,
        1,0,0,0,1502,1503,5,1214,0,0,1503,1550,1,0,0,0,1504,1505,5,1134,
        0,0,1505,1506,5,1213,0,0,1506,1507,3,370,185,0,1507,1508,5,1214,
        0,0,1508,1550,1,0,0,0,1509,1510,5,1166,0,0,1510,1511,5,1213,0,0,
        1511,1512,3,370,185,0,1512,1513,5,1214,0,0,1513,1550,1,0,0,0,1514,
        1515,5,1167,0,0,1515,1516,5,1213,0,0,1516,1517,3,370,185,0,1517,
        1518,5,1214,0,0,1518,1550,1,0,0,0,1519,1520,5,1168,0,0,1520,1521,
        5,1213,0,0,1521,1522,3,370,185,0,1522,1523,5,1214,0,0,1523,1550,
        1,0,0,0,1524,1525,5,1169,0,0,1525,1526,5,1213,0,0,1526,1527,3,370,
        185,0,1527,1528,5,1214,0,0,1528,1550,1,0,0,0,1529,1530,5,1170,0,
        0,1530,1531,5,1213,0,0,1531,1532,3,370,185,0,1532,1533,5,1214,0,
        0,1533,1550,1,0,0,0,1534,1535,5,1171,0,0,1535,1536,5,1213,0,0,1536,
        1537,3,370,185,0,1537,1538,5,1214,0,0,1538,1550,1,0,0,0,1539,1540,
        5,1172,0,0,1540,1541,5,1213,0,0,1541,1542,3,370,185,0,1542,1543,
        5,1214,0,0,1543,1550,1,0,0,0,1544,1545,5,1173,0,0,1545,1546,5,1213,
        0,0,1546,1547,3,370,185,0,1547,1548,5,1214,0,0,1548,1550,1,0,0,0,
        1549,1496,1,0,0,0,1549,1504,1,0,0,0,1549,1509,1,0,0,0,1549,1514,
        1,0,0,0,1549,1519,1,0,0,0,1549,1524,1,0,0,0,1549,1529,1,0,0,0,1549,
        1534,1,0,0,0,1549,1539,1,0,0,0,1549,1544,1,0,0,0,1550,111,1,0,0,
        0,1551,1552,5,474,0,0,1552,1554,3,162,81,0,1553,1555,3,116,58,0,
        1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1563,1,0,0,0,1556,1557,
        5,1208,0,0,1557,1559,3,162,81,0,1558,1560,3,116,58,0,1559,1558,1,
        0,0,0,1559,1560,1,0,0,0,1560,1562,1,0,0,0,1561,1556,1,0,0,0,1562,
        1565,1,0,0,0,1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,1567,1,0,0,
        0,1565,1563,1,0,0,0,1566,1568,3,114,57,0,1567,1566,1,0,0,0,1567,
        1568,1,0,0,0,1568,113,1,0,0,0,1569,1570,5,42,0,0,1570,1575,3,156,
        78,0,1571,1572,5,1208,0,0,1572,1574,3,156,78,0,1573,1571,1,0,0,0,
        1574,1577,1,0,0,0,1575,1573,1,0,0,0,1575,1576,1,0,0,0,1576,115,1,
        0,0,0,1577,1575,1,0,0,0,1578,1579,5,1213,0,0,1579,1580,5,425,0,0,
        1580,1581,3,370,185,0,1581,1582,5,1214,0,0,1582,117,1,0,0,0,1583,
        1584,5,471,0,0,1584,1585,3,160,80,0,1585,119,1,0,0,0,1586,1587,5,
        174,0,0,1587,1588,5,42,0,0,1588,1599,3,122,61,0,1589,1590,5,174,
        0,0,1590,1591,5,42,0,0,1591,1594,3,122,61,0,1592,1593,5,1208,0,0,
        1593,1595,3,122,61,0,1594,1592,1,0,0,0,1595,1596,1,0,0,0,1596,1594,
        1,0,0,0,1596,1597,1,0,0,0,1597,1599,1,0,0,0,1598,1586,1,0,0,0,1598,
        1589,1,0,0,0,1599,121,1,0,0,0,1600,1605,3,124,62,0,1601,1605,3,130,
        65,0,1602,1605,3,132,66,0,1603,1605,3,134,67,0,1604,1600,1,0,0,0,
        1604,1601,1,0,0,0,1604,1602,1,0,0,0,1604,1603,1,0,0,0,1605,123,1,
        0,0,0,1606,1609,3,162,81,0,1607,1609,3,126,63,0,1608,1606,1,0,0,
        0,1608,1607,1,0,0,0,1609,1617,1,0,0,0,1610,1613,5,1208,0,0,1611,
        1614,3,162,81,0,1612,1614,3,126,63,0,1613,1611,1,0,0,0,1613,1612,
        1,0,0,0,1614,1616,1,0,0,0,1615,1610,1,0,0,0,1616,1619,1,0,0,0,1617,
        1615,1,0,0,0,1617,1618,1,0,0,0,1618,125,1,0,0,0,1619,1617,1,0,0,
        0,1620,1621,5,1213,0,0,1621,1624,3,162,81,0,1622,1623,5,1208,0,0,
        1623,1625,3,162,81,0,1624,1622,1,0,0,0,1625,1626,1,0,0,0,1626,1624,
        1,0,0,0,1626,1627,1,0,0,0,1627,1628,1,0,0,0,1628,1629,5,1214,0,0,
        1629,127,1,0,0,0,1630,1631,5,1213,0,0,1631,1632,5,1214,0,0,1632,
        129,1,0,0,0,1633,1634,5,360,0,0,1634,1635,5,1213,0,0,1635,1636,3,
        124,62,0,1636,1637,5,1214,0,0,1637,131,1,0,0,0,1638,1639,5,92,0,
        0,1639,1640,5,1213,0,0,1640,1641,3,124,62,0,1641,1642,5,1214,0,0,
        1642,133,1,0,0,0,1643,1644,5,175,0,0,1644,1645,5,374,0,0,1645,1646,
        5,1213,0,0,1646,1651,3,136,68,0,1647,1648,5,1208,0,0,1648,1650,3,
        136,68,0,1649,1647,1,0,0,0,1650,1653,1,0,0,0,1651,1649,1,0,0,0,1651,
        1652,1,0,0,0,1652,1654,1,0,0,0,1653,1651,1,0,0,0,1654,1655,5,1214,
        0,0,1655,135,1,0,0,0,1656,1662,3,124,62,0,1657,1662,3,128,64,0,1658,
        1662,3,130,65,0,1659,1662,3,132,66,0,1660,1662,3,134,67,0,1661,1656,
        1,0,0,0,1661,1657,1,0,0,0,1661,1658,1,0,0,0,1661,1659,1,0,0,0,1661,
        1660,1,0,0,0,1662,137,1,0,0,0,1663,1664,5,183,0,0,1664,1665,3,160,
        80,0,1665,139,1,0,0,0,1666,1667,5,315,0,0,1667,1668,3,160,80,0,1668,
        141,1,0,0,0,1669,1672,5,365,0,0,1670,1671,5,474,0,0,1671,1673,5,
        883,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,0,1673,1676,1,0,0,0,1674,
        1675,5,872,0,0,1675,1677,5,498,0,0,1676,1674,1,0,0,0,1676,1677,1,
        0,0,0,1677,1681,1,0,0,0,1678,1682,3,144,72,0,1679,1682,3,146,73,
        0,1680,1682,3,148,74,0,1681,1678,1,0,0,0,1681,1679,1,0,0,0,1681,
        1680,1,0,0,0,1682,143,1,0,0,0,1683,1688,3,380,190,0,1684,1685,5,
        1208,0,0,1685,1687,3,380,190,0,1686,1684,1,0,0,0,1687,1690,1,0,0,
        0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,145,1,0,0,0,1690,1688,
        1,0,0,0,1691,1696,3,376,188,0,1692,1693,5,1208,0,0,1693,1695,3,376,
        188,0,1694,1692,1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,
        1697,1,0,0,0,1697,147,1,0,0,0,1698,1696,1,0,0,0,1699,1700,5,470,
        0,0,1700,1701,3,160,80,0,1701,1704,5,419,0,0,1702,1705,3,144,72,
        0,1703,1705,3,146,73,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1705,
        1707,1,0,0,0,1706,1699,1,0,0,0,1707,1708,1,0,0,0,1708,1706,1,0,0,
        0,1708,1709,1,0,0,0,1709,1715,1,0,0,0,1710,1713,5,131,0,0,1711,1714,
        3,144,72,0,1712,1714,3,146,73,0,1713,1711,1,0,0,0,1713,1712,1,0,
        0,0,1714,1716,1,0,0,0,1715,1710,1,0,0,0,1715,1716,1,0,0,0,1716,1717,
        1,0,0,0,1717,1718,5,134,0,0,1718,149,1,0,0,0,1719,1720,5,148,0,0,
        1720,1721,5,286,0,0,1721,1723,3,162,81,0,1722,1724,5,20,0,0,1723,
        1722,1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,1739,3,420,
        210,0,1726,1737,5,42,0,0,1727,1738,3,390,195,0,1728,1730,5,505,0,
        0,1729,1731,5,853,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1732,
        1,0,0,0,1732,1735,3,442,221,0,1733,1734,5,24,0,0,1734,1736,3,386,
        193,0,1735,1733,1,0,0,0,1735,1736,1,0,0,0,1736,1738,1,0,0,0,1737,
        1727,1,0,0,0,1737,1728,1,0,0,0,1738,1740,1,0,0,0,1739,1726,1,0,0,
        0,1739,1740,1,0,0,0,1740,1743,1,0,0,0,1741,1742,5,159,0,0,1742,1744,
        3,162,81,0,1743,1741,1,0,0,0,1743,1744,1,0,0,0,1744,151,1,0,0,0,
        1745,1746,5,291,0,0,1746,1747,5,42,0,0,1747,1752,3,154,77,0,1748,
        1749,5,1208,0,0,1749,1751,3,154,77,0,1750,1748,1,0,0,0,1751,1754,
        1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,153,1,0,0,0,1754,
        1752,1,0,0,0,1755,1757,3,162,81,0,1756,1758,7,5,0,0,1757,1756,1,
        0,0,0,1757,1758,1,0,0,0,1758,1761,1,0,0,0,1759,1760,5,806,0,0,1760,
        1762,7,6,0,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,155,1,0,0,
        0,1763,1765,3,162,81,0,1764,1766,7,5,0,0,1765,1764,1,0,0,0,1765,
        1766,1,0,0,0,1766,157,1,0,0,0,1767,1768,5,474,0,0,1768,1769,5,59,
        0,0,1769,1770,5,289,0,0,1770,159,1,0,0,0,1771,1772,6,80,-1,0,1772,
        1773,3,162,81,0,1773,1774,3,362,181,0,1774,1775,3,162,81,0,1775,
        2018,1,0,0,0,1776,1777,3,162,81,0,1777,1778,3,362,181,0,1778,1779,
        3,364,182,0,1779,1783,3,342,171,0,1780,1782,3,242,121,0,1781,1780,
        1,0,0,0,1782,1785,1,0,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,
        2018,1,0,0,0,1785,1783,1,0,0,0,1786,1787,3,164,82,0,1787,1788,3,
        362,181,0,1788,1789,3,364,182,0,1789,1793,3,342,171,0,1790,1792,
        3,242,121,0,1791,1790,1,0,0,0,1792,1795,1,0,0,0,1793,1791,1,0,0,
        0,1793,1794,1,0,0,0,1794,2018,1,0,0,0,1795,1793,1,0,0,0,1796,1798,
        3,162,81,0,1797,1799,7,7,0,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,
        1799,1800,1,0,0,0,1800,1801,5,35,0,0,1801,1802,3,162,81,0,1802,1803,
        5,16,0,0,1803,1804,3,162,81,0,1804,2018,1,0,0,0,1805,1807,3,162,
        81,0,1806,1808,5,207,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,
        1810,1,0,0,0,1809,1811,7,7,0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,
        0,1811,1812,1,0,0,0,1812,1814,5,190,0,0,1813,1815,3,364,182,0,1814,
        1813,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1820,3,344,
        172,0,1817,1819,3,242,121,0,1818,1817,1,0,0,0,1819,1822,1,0,0,0,
        1820,1818,1,0,0,0,1820,1821,1,0,0,0,1821,2018,1,0,0,0,1822,1820,
        1,0,0,0,1823,1825,3,162,81,0,1824,1826,5,207,0,0,1825,1824,1,0,0,
        0,1825,1826,1,0,0,0,1826,1828,1,0,0,0,1827,1829,7,7,0,0,1828,1827,
        1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,1832,5,190,0,0,
        1831,1833,3,364,182,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,1834,
        1,0,0,0,1834,1838,3,350,175,0,1835,1837,3,242,121,0,1836,1835,1,
        0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,
        2018,1,0,0,0,1840,1838,1,0,0,0,1841,1843,3,162,81,0,1842,1844,5,
        207,0,0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,
        1847,7,7,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,
        0,1848,1850,5,190,0,0,1849,1851,3,364,182,0,1850,1849,1,0,0,0,1850,
        1851,1,0,0,0,1851,1852,1,0,0,0,1852,1856,3,162,81,0,1853,1855,3,
        242,121,0,1854,1853,1,0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,
        1856,1857,1,0,0,0,1857,2018,1,0,0,0,1858,1856,1,0,0,0,1859,1861,
        3,164,82,0,1860,1862,5,207,0,0,1861,1860,1,0,0,0,1861,1862,1,0,0,
        0,1862,1864,1,0,0,0,1863,1865,7,7,0,0,1864,1863,1,0,0,0,1864,1865,
        1,0,0,0,1865,1866,1,0,0,0,1866,1868,5,190,0,0,1867,1869,3,364,182,
        0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1874,
        3,350,175,0,1871,1873,3,242,121,0,1872,1871,1,0,0,0,1873,1876,1,
        0,0,0,1874,1872,1,0,0,0,1874,1875,1,0,0,0,1875,2018,1,0,0,0,1876,
        1874,1,0,0,0,1877,1879,3,162,81,0,1878,1880,7,7,0,0,1879,1878,1,
        0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,1882,5,220,0,0,1882,
        1885,3,162,81,0,1883,1884,5,140,0,0,1884,1886,3,162,81,0,1885,1883,
        1,0,0,0,1885,1886,1,0,0,0,1886,2018,1,0,0,0,1887,1889,3,162,81,0,
        1888,1890,7,7,0,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1891,
        1,0,0,0,1891,1892,5,220,0,0,1892,1893,3,364,182,0,1893,1897,3,342,
        171,0,1894,1896,3,242,121,0,1895,1894,1,0,0,0,1896,1899,1,0,0,0,
        1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1902,1,0,0,0,1899,1897,
        1,0,0,0,1900,1901,5,140,0,0,1901,1903,3,162,81,0,1902,1900,1,0,0,
        0,1902,1903,1,0,0,0,1903,1907,1,0,0,0,1904,1906,3,242,121,0,1905,
        1904,1,0,0,0,1906,1909,1,0,0,0,1907,1905,1,0,0,0,1907,1908,1,0,0,
        0,1908,2018,1,0,0,0,1909,1907,1,0,0,0,1910,1912,3,164,82,0,1911,
        1913,7,7,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,
        0,1914,1915,5,220,0,0,1915,1916,3,364,182,0,1916,1920,3,342,171,
        0,1917,1919,3,242,121,0,1918,1917,1,0,0,0,1919,1922,1,0,0,0,1920,
        1918,1,0,0,0,1920,1921,1,0,0,0,1921,1925,1,0,0,0,1922,1920,1,0,0,
        0,1923,1924,5,140,0,0,1924,1926,3,162,81,0,1925,1923,1,0,0,0,1925,
        1926,1,0,0,0,1926,1930,1,0,0,0,1927,1929,3,242,121,0,1928,1927,1,
        0,0,0,1929,1932,1,0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,
        2018,1,0,0,0,1932,1930,1,0,0,0,1933,1935,7,7,0,0,1934,1933,1,0,0,
        0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,5,145,0,0,1937,2018,
        3,350,175,0,1938,1939,7,7,0,0,1939,2018,3,160,80,13,1940,1941,3,
        162,81,0,1941,1943,5,207,0,0,1942,1944,7,7,0,0,1943,1942,1,0,0,0,
        1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1946,5,274,0,0,1946,2018,
        1,0,0,0,1947,1949,3,162,81,0,1948,1950,7,7,0,0,1949,1948,1,0,0,0,
        1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1952,5,77,0,0,1952,1953,
        3,162,81,0,1953,2018,1,0,0,0,1954,1956,3,162,81,0,1955,1957,7,7,
        0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1959,
        5,136,0,0,1959,1960,3,162,81,0,1960,2018,1,0,0,0,1961,1963,3,162,
        81,0,1962,1964,7,7,0,0,1963,1962,1,0,0,0,1963,1964,1,0,0,0,1964,
        1965,1,0,0,0,1965,1966,5,765,0,0,1966,1967,3,162,81,0,1967,2018,
        1,0,0,0,1968,1970,3,162,81,0,1969,1971,7,7,0,0,1970,1969,1,0,0,0,
        1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1973,5,857,0,0,1973,1974,
        3,162,81,0,1974,2018,1,0,0,0,1975,1977,3,162,81,0,1976,1978,7,7,
        0,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,0,0,0,1979,1980,
        5,947,0,0,1980,1981,3,162,81,0,1981,2018,1,0,0,0,1982,1983,3,162,
        81,0,1983,1984,5,698,0,0,1984,1985,5,857,0,0,1985,1986,3,162,81,
        0,1986,2018,1,0,0,0,1987,1988,3,162,81,0,1988,1989,5,698,0,0,1989,
        1990,5,947,0,0,1990,1991,3,162,81,0,1991,2018,1,0,0,0,1992,2001,
        3,162,81,0,1993,1994,5,1213,0,0,1994,1995,3,162,81,0,1995,1996,5,
        1208,0,0,1996,1997,3,162,81,0,1997,1998,5,1214,0,0,1998,2001,1,0,
        0,0,1999,2001,3,350,175,0,2000,1992,1,0,0,0,2000,1993,1,0,0,0,2000,
        1999,1,0,0,0,2001,2002,1,0,0,0,2002,2011,5,296,0,0,2003,2012,3,162,
        81,0,2004,2005,5,1213,0,0,2005,2006,3,162,81,0,2006,2007,5,1208,
        0,0,2007,2008,3,162,81,0,2008,2009,5,1214,0,0,2009,2012,1,0,0,0,
        2010,2012,3,350,175,0,2011,2003,1,0,0,0,2011,2004,1,0,0,0,2011,2010,
        1,0,0,0,2012,2018,1,0,0,0,2013,2014,5,1213,0,0,2014,2015,3,160,80,
        0,2015,2016,5,1214,0,0,2016,2018,1,0,0,0,2017,1771,1,0,0,0,2017,
        1776,1,0,0,0,2017,1786,1,0,0,0,2017,1796,1,0,0,0,2017,1805,1,0,0,
        0,2017,1823,1,0,0,0,2017,1841,1,0,0,0,2017,1859,1,0,0,0,2017,1877,
        1,0,0,0,2017,1887,1,0,0,0,2017,1910,1,0,0,0,2017,1934,1,0,0,0,2017,
        1938,1,0,0,0,2017,1940,1,0,0,0,2017,1947,1,0,0,0,2017,1954,1,0,0,
        0,2017,1961,1,0,0,0,2017,1968,1,0,0,0,2017,1975,1,0,0,0,2017,1982,
        1,0,0,0,2017,1987,1,0,0,0,2017,2000,1,0,0,0,2017,2013,1,0,0,0,2018,
        2027,1,0,0,0,2019,2020,10,12,0,0,2020,2021,5,16,0,0,2021,2026,3,
        160,80,13,2022,2023,10,11,0,0,2023,2024,5,290,0,0,2024,2026,3,160,
        80,12,2025,2019,1,0,0,0,2025,2022,1,0,0,0,2026,2029,1,0,0,0,2027,
        2025,1,0,0,0,2027,2028,1,0,0,0,2028,161,1,0,0,0,2029,2027,1,0,0,
        0,2030,2031,6,81,-1,0,2031,2107,3,366,183,0,2032,2033,7,8,0,0,2033,
        2107,3,162,81,70,2034,2107,3,168,84,0,2035,2107,3,230,115,0,2036,
        2107,3,396,198,0,2037,2107,3,180,90,0,2038,2107,3,354,177,0,2039,
        2107,3,356,178,0,2040,2107,3,358,179,0,2041,2043,5,265,0,0,2042,
        2044,3,476,238,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,
        0,0,0,2045,2046,3,436,218,0,2046,2055,5,1213,0,0,2047,2052,3,162,
        81,0,2048,2049,5,1208,0,0,2049,2051,3,162,81,0,2050,2048,1,0,0,0,
        2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,0,2053,2056,
        1,0,0,0,2054,2052,1,0,0,0,2055,2047,1,0,0,0,2055,2056,1,0,0,0,2056,
        2057,1,0,0,0,2057,2058,5,1214,0,0,2058,2107,1,0,0,0,2059,2060,5,
        265,0,0,2060,2061,5,720,0,0,2061,2062,5,1213,0,0,2062,2065,3,162,
        81,0,2063,2064,5,1208,0,0,2064,2066,7,9,0,0,2065,2063,1,0,0,0,2065,
        2066,1,0,0,0,2066,2067,1,0,0,0,2067,2068,5,1214,0,0,2068,2107,1,
        0,0,0,2069,2070,5,265,0,0,2070,2071,5,466,0,0,2071,2072,5,1213,0,
        0,2072,2077,3,162,81,0,2073,2075,5,20,0,0,2074,2073,1,0,0,0,2074,
        2075,1,0,0,0,2075,2076,1,0,0,0,2076,2078,3,420,210,0,2077,2074,1,
        0,0,0,2077,2078,1,0,0,0,2078,2089,1,0,0,0,2079,2080,5,1208,0,0,2080,
        2085,3,162,81,0,2081,2083,5,20,0,0,2082,2081,1,0,0,0,2082,2083,1,
        0,0,0,2083,2084,1,0,0,0,2084,2086,3,420,210,0,2085,2082,1,0,0,0,
        2085,2086,1,0,0,0,2086,2088,1,0,0,0,2087,2079,1,0,0,0,2088,2091,
        1,0,0,0,2089,2087,1,0,0,0,2089,2090,1,0,0,0,2090,2092,1,0,0,0,2091,
        2089,1,0,0,0,2092,2093,5,1214,0,0,2093,2107,1,0,0,0,2094,2095,5,
        265,0,0,2095,2096,5,1042,0,0,2096,2097,5,1213,0,0,2097,2098,3,162,
        81,0,2098,2099,5,1214,0,0,2099,2107,1,0,0,0,2100,2107,3,184,92,0,
        2101,2102,5,1213,0,0,2102,2103,3,162,81,0,2103,2104,5,1214,0,0,2104,
        2107,1,0,0,0,2105,2107,3,350,175,0,2106,2030,1,0,0,0,2106,2032,1,
        0,0,0,2106,2034,1,0,0,0,2106,2035,1,0,0,0,2106,2036,1,0,0,0,2106,
        2037,1,0,0,0,2106,2038,1,0,0,0,2106,2039,1,0,0,0,2106,2040,1,0,0,
        0,2106,2041,1,0,0,0,2106,2059,1,0,0,0,2106,2069,1,0,0,0,2106,2094,
        1,0,0,0,2106,2100,1,0,0,0,2106,2101,1,0,0,0,2106,2105,1,0,0,0,2107,
        2513,1,0,0,0,2108,2109,10,69,0,0,2109,2110,5,1223,0,0,2110,2512,
        3,162,81,69,2111,2112,10,68,0,0,2112,2113,7,10,0,0,2113,2512,3,162,
        81,69,2114,2115,10,67,0,0,2115,2116,5,251,0,0,2116,2512,3,162,81,
        67,2117,2118,10,66,0,0,2118,2119,7,8,0,0,2119,2512,3,162,81,67,2120,
        2121,10,65,0,0,2121,2122,7,11,0,0,2122,2512,3,162,81,66,2123,2124,
        10,57,0,0,2124,2125,5,835,0,0,2125,2512,3,162,81,58,2126,2127,10,
        56,0,0,2127,2128,7,12,0,0,2128,2512,3,162,81,57,2129,2130,10,61,
        0,0,2130,2512,3,340,170,0,2131,2132,10,60,0,0,2132,2133,5,1222,0,
        0,2133,2134,3,162,81,0,2134,2135,3,182,91,0,2135,2512,1,0,0,0,2136,
        2138,10,58,0,0,2137,2139,3,242,121,0,2138,2137,1,0,0,0,2139,2140,
        1,0,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,2512,1,0,0,0,2142,
        2143,10,52,0,0,2143,2144,5,1209,0,0,2144,2512,3,400,200,0,2145,2146,
        10,51,0,0,2146,2147,5,1209,0,0,2147,2512,5,1219,0,0,2148,2149,10,
        50,0,0,2149,2150,5,1215,0,0,2150,2151,5,1219,0,0,2151,2512,5,1216,
        0,0,2152,2153,10,49,0,0,2153,2154,5,1215,0,0,2154,2155,3,376,188,
        0,2155,2156,5,1207,0,0,2156,2159,3,376,188,0,2157,2158,5,1207,0,
        0,2158,2160,3,376,188,0,2159,2157,1,0,0,0,2159,2160,1,0,0,0,2160,
        2161,1,0,0,0,2161,2162,5,1216,0,0,2162,2512,1,0,0,0,2163,2164,10,
        48,0,0,2164,2165,5,1209,0,0,2165,2166,5,1209,0,0,2166,2512,3,400,
        200,0,2167,2168,10,47,0,0,2168,2169,5,1209,0,0,2169,2170,5,1209,
        0,0,2170,2512,5,1219,0,0,2171,2172,10,46,0,0,2172,2173,5,1209,0,
        0,2173,2174,5,1209,0,0,2174,2175,5,1215,0,0,2175,2176,3,376,188,
        0,2176,2177,5,1216,0,0,2177,2512,1,0,0,0,2178,2179,10,45,0,0,2179,
        2180,5,1209,0,0,2180,2181,5,1209,0,0,2181,2182,5,1215,0,0,2182,2183,
        5,1219,0,0,2183,2512,5,1216,0,0,2184,2185,10,44,0,0,2185,2186,5,
        1209,0,0,2186,2187,5,1209,0,0,2187,2188,5,1215,0,0,2188,2189,3,376,
        188,0,2189,2190,5,1207,0,0,2190,2193,3,376,188,0,2191,2192,5,1207,
        0,0,2192,2194,3,376,188,0,2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,
        2195,1,0,0,0,2195,2196,5,1216,0,0,2196,2512,1,0,0,0,2197,2198,10,
        43,0,0,2198,2199,5,1209,0,0,2199,2200,5,1108,0,0,2200,2202,5,1213,
        0,0,2201,2203,3,370,185,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,
        2204,1,0,0,0,2204,2512,5,1214,0,0,2205,2206,10,42,0,0,2206,2207,
        5,1209,0,0,2207,2208,5,1109,0,0,2208,2209,5,1213,0,0,2209,2512,5,
        1214,0,0,2210,2211,10,41,0,0,2211,2212,5,1209,0,0,2212,2213,5,1110,
        0,0,2213,2214,5,1213,0,0,2214,2217,3,162,81,0,2215,2216,5,1208,0,
        0,2216,2218,3,370,185,0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,
        2219,1,0,0,0,2219,2220,5,1214,0,0,2220,2512,1,0,0,0,2221,2222,10,
        40,0,0,2222,2223,5,1209,0,0,2223,2224,5,1111,0,0,2224,2225,5,1213,
        0,0,2225,2226,3,162,81,0,2226,2227,5,1214,0,0,2227,2512,1,0,0,0,
        2228,2229,10,39,0,0,2229,2230,5,1209,0,0,2230,2231,5,1112,0,0,2231,
        2232,5,1213,0,0,2232,2233,3,162,81,0,2233,2234,5,1214,0,0,2234,2512,
        1,0,0,0,2235,2236,10,38,0,0,2236,2237,5,1209,0,0,2237,2238,5,1113,
        0,0,2238,2239,5,1213,0,0,2239,2240,3,162,81,0,2240,2241,5,1214,0,
        0,2241,2512,1,0,0,0,2242,2243,10,37,0,0,2243,2244,5,1209,0,0,2244,
        2245,5,1114,0,0,2245,2246,5,1213,0,0,2246,2247,3,162,81,0,2247,2248,
        5,1214,0,0,2248,2512,1,0,0,0,2249,2250,10,36,0,0,2250,2251,5,1209,
        0,0,2251,2252,5,1115,0,0,2252,2253,5,1213,0,0,2253,2254,3,376,188,
        0,2254,2255,5,1214,0,0,2255,2512,1,0,0,0,2256,2257,10,35,0,0,2257,
        2258,5,1209,0,0,2258,2259,5,1116,0,0,2259,2260,5,1213,0,0,2260,2512,
        5,1214,0,0,2261,2262,10,34,0,0,2262,2263,5,1209,0,0,2263,2264,5,
        1117,0,0,2264,2265,5,1213,0,0,2265,2266,3,370,185,0,2266,2267,5,
        1214,0,0,2267,2512,1,0,0,0,2268,2269,10,33,0,0,2269,2270,5,1209,
        0,0,2270,2271,5,1118,0,0,2271,2272,5,1213,0,0,2272,2273,3,162,81,
        0,2273,2274,5,1214,0,0,2274,2512,1,0,0,0,2275,2276,10,32,0,0,2276,
        2277,5,1209,0,0,2277,2278,5,1119,0,0,2278,2279,5,1213,0,0,2279,2512,
        5,1214,0,0,2280,2281,10,31,0,0,2281,2282,5,1209,0,0,2282,2283,5,
        1120,0,0,2283,2287,5,1213,0,0,2284,2285,3,162,81,0,2285,2286,5,1208,
        0,0,2286,2288,1,0,0,0,2287,2284,1,0,0,0,2287,2288,1,0,0,0,2288,2289,
        1,0,0,0,2289,2290,3,162,81,0,2290,2291,5,1208,0,0,2291,2292,3,162,
        81,0,2292,2293,5,1214,0,0,2293,2512,1,0,0,0,2294,2295,10,30,0,0,
        2295,2296,5,1209,0,0,2296,2297,5,1121,0,0,2297,2298,5,1213,0,0,2298,
        2512,5,1214,0,0,2299,2300,10,29,0,0,2300,2301,5,1209,0,0,2301,2302,
        5,1122,0,0,2302,2303,5,1213,0,0,2303,2512,5,1214,0,0,2304,2305,10,
        28,0,0,2305,2306,5,1209,0,0,2306,2307,5,1123,0,0,2307,2308,5,1213,
        0,0,2308,2309,3,162,81,0,2309,2310,5,1208,0,0,2310,2311,3,162,81,
        0,2311,2312,5,1208,0,0,2312,2313,3,162,81,0,2313,2314,5,1214,0,0,
        2314,2512,1,0,0,0,2315,2316,10,27,0,0,2316,2317,5,1209,0,0,2317,
        2318,5,1124,0,0,2318,2319,5,1213,0,0,2319,2512,5,1214,0,0,2320,2321,
        10,26,0,0,2321,2322,5,1209,0,0,2322,2323,5,1125,0,0,2323,2327,5,
        1213,0,0,2324,2325,3,162,81,0,2325,2326,5,1208,0,0,2326,2328,1,0,
        0,0,2327,2324,1,0,0,0,2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,2330,
        3,162,81,0,2330,2331,5,1208,0,0,2331,2332,3,162,81,0,2332,2333,5,
        1214,0,0,2333,2512,1,0,0,0,2334,2335,10,25,0,0,2335,2336,5,1209,
        0,0,2336,2337,5,1126,0,0,2337,2338,5,1213,0,0,2338,2339,3,162,81,
        0,2339,2340,5,1208,0,0,2340,2341,3,162,81,0,2341,2342,5,1214,0,0,
        2342,2512,1,0,0,0,2343,2344,10,20,0,0,2344,2345,5,1215,0,0,2345,
        2350,3,376,188,0,2346,2347,5,1208,0,0,2347,2349,3,376,188,0,2348,
        2346,1,0,0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,
        0,2351,2353,1,0,0,0,2352,2350,1,0,0,0,2353,2354,5,1216,0,0,2354,
        2512,1,0,0,0,2355,2356,10,19,0,0,2356,2357,5,1209,0,0,2357,2358,
        5,564,0,0,2358,2360,5,1213,0,0,2359,2361,3,360,180,0,2360,2359,1,
        0,0,0,2360,2361,1,0,0,0,2361,2362,1,0,0,0,2362,2512,5,1214,0,0,2363,
        2364,10,18,0,0,2364,2365,5,1209,0,0,2365,2366,5,517,0,0,2366,2367,
        5,1213,0,0,2367,2370,3,162,81,0,2368,2369,5,1208,0,0,2369,2371,3,
        360,180,0,2370,2368,1,0,0,0,2370,2371,1,0,0,0,2371,2372,1,0,0,0,
        2372,2373,5,1214,0,0,2373,2512,1,0,0,0,2374,2375,10,17,0,0,2375,
        2376,5,1209,0,0,2376,2377,7,13,0,0,2377,2378,5,1213,0,0,2378,2381,
        3,162,81,0,2379,2380,5,1208,0,0,2380,2382,3,360,180,0,2381,2379,
        1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,2384,5,1214,0,0,
        2384,2512,1,0,0,0,2385,2386,10,16,0,0,2386,2387,5,1209,0,0,2387,
        2388,7,14,0,0,2388,2389,5,1213,0,0,2389,2392,3,162,81,0,2390,2391,
        5,1208,0,0,2391,2393,3,360,180,0,2392,2390,1,0,0,0,2392,2393,1,0,
        0,0,2393,2394,1,0,0,0,2394,2395,5,1214,0,0,2395,2512,1,0,0,0,2396,
        2397,10,15,0,0,2397,2398,5,1209,0,0,2398,2399,7,15,0,0,2399,2401,
        5,1213,0,0,2400,2402,3,360,180,0,2401,2400,1,0,0,0,2401,2402,1,0,
        0,0,2402,2403,1,0,0,0,2403,2512,5,1214,0,0,2404,2405,10,14,0,0,2405,
        2406,5,1209,0,0,2406,2407,5,518,0,0,2407,2413,5,1213,0,0,2408,2411,
        3,360,180,0,2409,2410,5,1208,0,0,2410,2412,3,162,81,0,2411,2409,
        1,0,0,0,2411,2412,1,0,0,0,2412,2414,1,0,0,0,2413,2408,1,0,0,0,2413,
        2414,1,0,0,0,2414,2415,1,0,0,0,2415,2512,5,1214,0,0,2416,2417,10,
        13,0,0,2417,2418,5,1209,0,0,2418,2419,5,522,0,0,2419,2420,5,1213,
        0,0,2420,2421,3,162,81,0,2421,2422,5,1214,0,0,2422,2512,1,0,0,0,
        2423,2424,10,12,0,0,2424,2425,5,1209,0,0,2425,2426,5,516,0,0,2426,
        2427,5,1213,0,0,2427,2434,3,162,81,0,2428,2429,5,1208,0,0,2429,2432,
        3,360,180,0,2430,2431,5,1208,0,0,2431,2433,3,376,188,0,2432,2430,
        1,0,0,0,2432,2433,1,0,0,0,2433,2435,1,0,0,0,2434,2428,1,0,0,0,2434,
        2435,1,0,0,0,2435,2436,1,0,0,0,2436,2437,5,1214,0,0,2437,2512,1,
        0,0,0,2438,2439,10,11,0,0,2439,2440,5,1209,0,0,2440,2441,5,533,0,
        0,2441,2442,5,1213,0,0,2442,2448,3,162,81,0,2443,2446,5,1208,0,0,
        2444,2447,3,360,180,0,2445,2447,3,376,188,0,2446,2444,1,0,0,0,2446,
        2445,1,0,0,0,2447,2449,1,0,0,0,2448,2443,1,0,0,0,2448,2449,1,0,0,
        0,2449,2450,1,0,0,0,2450,2451,5,1214,0,0,2451,2512,1,0,0,0,2452,
        2453,10,10,0,0,2453,2454,5,1209,0,0,2454,2455,5,534,0,0,2455,2456,
        5,1213,0,0,2456,2457,3,162,81,0,2457,2458,5,1208,0,0,2458,2464,3,
        376,188,0,2459,2462,5,1208,0,0,2460,2463,3,360,180,0,2461,2463,3,
        376,188,0,2462,2460,1,0,0,0,2462,2461,1,0,0,0,2463,2465,1,0,0,0,
        2464,2459,1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,0,2466,2467,
        5,1214,0,0,2467,2512,1,0,0,0,2468,2469,10,9,0,0,2469,2470,5,1209,
        0,0,2470,2471,7,16,0,0,2471,2472,5,1213,0,0,2472,2473,3,162,81,0,
        2473,2474,5,1214,0,0,2474,2512,1,0,0,0,2475,2476,10,8,0,0,2476,2477,
        5,1209,0,0,2477,2478,7,17,0,0,2478,2479,5,1213,0,0,2479,2512,5,1214,
        0,0,2480,2481,10,7,0,0,2481,2482,5,1209,0,0,2482,2483,5,818,0,0,
        2483,2484,5,1213,0,0,2484,2512,5,1214,0,0,2485,2486,10,6,0,0,2486,
        2487,5,1209,0,0,2487,2488,5,832,0,0,2488,2490,5,1213,0,0,2489,2491,
        3,376,188,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,2492,1,0,0,
        0,2492,2512,5,1214,0,0,2493,2494,10,5,0,0,2494,2495,5,1209,0,0,2495,
        2496,3,440,220,0,2496,2505,5,1213,0,0,2497,2502,3,162,81,0,2498,
        2499,5,1208,0,0,2499,2501,3,162,81,0,2500,2498,1,0,0,0,2501,2504,
        1,0,0,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,2506,1,0,0,0,2504,
        2502,1,0,0,0,2505,2497,1,0,0,0,2505,2506,1,0,0,0,2506,2507,1,0,0,
        0,2507,2508,5,1214,0,0,2508,2512,1,0,0,0,2509,2510,10,4,0,0,2510,
        2512,3,248,124,0,2511,2108,1,0,0,0,2511,2111,1,0,0,0,2511,2114,1,
        0,0,0,2511,2117,1,0,0,0,2511,2120,1,0,0,0,2511,2123,1,0,0,0,2511,
        2126,1,0,0,0,2511,2129,1,0,0,0,2511,2131,1,0,0,0,2511,2136,1,0,0,
        0,2511,2142,1,0,0,0,2511,2145,1,0,0,0,2511,2148,1,0,0,0,2511,2152,
        1,0,0,0,2511,2163,1,0,0,0,2511,2167,1,0,0,0,2511,2171,1,0,0,0,2511,
        2178,1,0,0,0,2511,2184,1,0,0,0,2511,2197,1,0,0,0,2511,2205,1,0,0,
        0,2511,2210,1,0,0,0,2511,2221,1,0,0,0,2511,2228,1,0,0,0,2511,2235,
        1,0,0,0,2511,2242,1,0,0,0,2511,2249,1,0,0,0,2511,2256,1,0,0,0,2511,
        2261,1,0,0,0,2511,2268,1,0,0,0,2511,2275,1,0,0,0,2511,2280,1,0,0,
        0,2511,2294,1,0,0,0,2511,2299,1,0,0,0,2511,2304,1,0,0,0,2511,2315,
        1,0,0,0,2511,2320,1,0,0,0,2511,2334,1,0,0,0,2511,2343,1,0,0,0,2511,
        2355,1,0,0,0,2511,2363,1,0,0,0,2511,2374,1,0,0,0,2511,2385,1,0,0,
        0,2511,2396,1,0,0,0,2511,2404,1,0,0,0,2511,2416,1,0,0,0,2511,2423,
        1,0,0,0,2511,2438,1,0,0,0,2511,2452,1,0,0,0,2511,2468,1,0,0,0,2511,
        2475,1,0,0,0,2511,2480,1,0,0,0,2511,2485,1,0,0,0,2511,2493,1,0,0,
        0,2511,2509,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,2514,
        1,0,0,0,2514,163,1,0,0,0,2515,2513,1,0,0,0,2516,2517,5,1213,0,0,
        2517,2520,3,166,83,0,2518,2519,5,1208,0,0,2519,2521,3,166,83,0,2520,
        2518,1,0,0,0,2521,2522,1,0,0,0,2522,2520,1,0,0,0,2522,2523,1,0,0,
        0,2523,2524,1,0,0,0,2524,2525,5,1214,0,0,2525,165,1,0,0,0,2526,2531,
        3,162,81,0,2527,2529,5,20,0,0,2528,2527,1,0,0,0,2528,2529,1,0,0,
        0,2529,2530,1,0,0,0,2530,2532,3,420,210,0,2531,2528,1,0,0,0,2531,
        2532,1,0,0,0,2532,2542,1,0,0,0,2533,2534,5,1213,0,0,2534,2536,3,
        162,81,0,2535,2537,5,20,0,0,2536,2535,1,0,0,0,2536,2537,1,0,0,0,
        2537,2538,1,0,0,0,2538,2539,3,420,210,0,2539,2540,5,1214,0,0,2540,
        2542,1,0,0,0,2541,2526,1,0,0,0,2541,2533,1,0,0,0,2542,167,1,0,0,
        0,2543,2548,3,170,85,0,2544,2548,3,172,86,0,2545,2548,3,174,87,0,
        2546,2548,3,176,88,0,2547,2543,1,0,0,0,2547,2544,1,0,0,0,2547,2545,
        1,0,0,0,2547,2546,1,0,0,0,2548,169,1,0,0,0,2549,2550,5,47,0,0,2550,
        2556,3,162,81,0,2551,2552,5,470,0,0,2552,2553,3,162,81,0,2553,2554,
        5,419,0,0,2554,2555,3,162,81,0,2555,2557,1,0,0,0,2556,2551,1,0,0,
        0,2557,2558,1,0,0,0,2558,2556,1,0,0,0,2558,2559,1,0,0,0,2559,2562,
        1,0,0,0,2560,2561,5,131,0,0,2561,2563,3,162,81,0,2562,2560,1,0,0,
        0,2562,2563,1,0,0,0,2563,2564,1,0,0,0,2564,2565,5,134,0,0,2565,171,
        1,0,0,0,2566,2572,5,47,0,0,2567,2568,5,470,0,0,2568,2569,3,160,80,
        0,2569,2570,5,419,0,0,2570,2571,3,162,81,0,2571,2573,1,0,0,0,2572,
        2567,1,0,0,0,2573,2574,1,0,0,0,2574,2572,1,0,0,0,2574,2575,1,0,0,
        0,2575,2578,1,0,0,0,2576,2577,5,131,0,0,2577,2579,3,162,81,0,2578,
        2576,1,0,0,0,2578,2579,1,0,0,0,2579,2580,1,0,0,0,2580,2581,5,134,
        0,0,2581,173,1,0,0,0,2582,2583,5,66,0,0,2583,2584,3,346,173,0,2584,
        175,1,0,0,0,2585,2586,5,275,0,0,2586,2587,5,1213,0,0,2587,2588,3,
        162,81,0,2588,2589,5,1208,0,0,2589,2590,3,162,81,0,2590,2591,5,1214,
        0,0,2591,177,1,0,0,0,2592,2593,3,162,81,0,2593,2594,5,1222,0,0,2594,
        2595,3,162,81,0,2595,2603,1,0,0,0,2596,2597,5,1213,0,0,2597,2598,
        3,162,81,0,2598,2599,5,1222,0,0,2599,2600,3,162,81,0,2600,2601,5,
        1214,0,0,2601,2603,1,0,0,0,2602,2592,1,0,0,0,2602,2596,1,0,0,0,2603,
        179,1,0,0,0,2604,2605,5,1213,0,0,2605,2606,3,178,89,0,2606,2607,
        5,1214,0,0,2607,2608,3,182,91,0,2608,181,1,0,0,0,2609,2618,7,18,
        0,0,2610,2611,5,1213,0,0,2611,2614,3,376,188,0,2612,2613,5,1208,
        0,0,2613,2615,3,376,188,0,2614,2612,1,0,0,0,2614,2615,1,0,0,0,2615,
        2616,1,0,0,0,2616,2617,5,1214,0,0,2617,2619,1,0,0,0,2618,2610,1,
        0,0,0,2618,2619,1,0,0,0,2619,2628,1,0,0,0,2620,2621,5,426,0,0,2621,
        2626,7,19,0,0,2622,2623,5,1213,0,0,2623,2624,3,376,188,0,2624,2625,
        5,1214,0,0,2625,2627,1,0,0,0,2626,2622,1,0,0,0,2626,2627,1,0,0,0,
        2627,2629,1,0,0,0,2628,2620,1,0,0,0,2628,2629,1,0,0,0,2629,183,1,
        0,0,0,2630,2653,3,186,93,0,2631,2653,3,188,94,0,2632,2653,3,190,
        95,0,2633,2653,3,192,96,0,2634,2653,3,194,97,0,2635,2653,3,196,98,
        0,2636,2653,3,198,99,0,2637,2653,3,200,100,0,2638,2653,3,202,101,
        0,2639,2653,3,204,102,0,2640,2653,3,206,103,0,2641,2653,3,208,104,
        0,2642,2653,3,210,105,0,2643,2653,3,212,106,0,2644,2653,3,214,107,
        0,2645,2653,3,216,108,0,2646,2653,3,218,109,0,2647,2653,3,220,110,
        0,2648,2653,3,222,111,0,2649,2653,3,224,112,0,2650,2653,3,226,113,
        0,2651,2653,3,228,114,0,2652,2630,1,0,0,0,2652,2631,1,0,0,0,2652,
        2632,1,0,0,0,2652,2633,1,0,0,0,2652,2634,1,0,0,0,2652,2635,1,0,0,
        0,2652,2636,1,0,0,0,2652,2637,1,0,0,0,2652,2638,1,0,0,0,2652,2639,
        1,0,0,0,2652,2640,1,0,0,0,2652,2641,1,0,0,0,2652,2642,1,0,0,0,2652,
        2643,1,0,0,0,2652,2644,1,0,0,0,2652,2645,1,0,0,0,2652,2646,1,0,0,
        0,2652,2647,1,0,0,0,2652,2648,1,0,0,0,2652,2649,1,0,0,0,2652,2650,
        1,0,0,0,2652,2651,1,0,0,0,2653,185,1,0,0,0,2654,2655,7,20,0,0,2655,
        2657,5,1213,0,0,2656,2658,7,21,0,0,2657,2656,1,0,0,0,2657,2658,1,
        0,0,0,2658,2659,1,0,0,0,2659,2660,3,162,81,0,2660,2661,5,1214,0,
        0,2661,2690,1,0,0,0,2662,2663,7,22,0,0,2663,2664,5,1213,0,0,2664,
        2665,3,162,81,0,2665,2666,5,1208,0,0,2666,2667,3,162,81,0,2667,2668,
        5,1214,0,0,2668,2690,1,0,0,0,2669,2670,5,83,0,0,2670,2676,5,1213,
        0,0,2671,2677,5,1219,0,0,2672,2674,7,23,0,0,2673,2672,1,0,0,0,2673,
        2674,1,0,0,0,2674,2675,1,0,0,0,2675,2677,3,162,81,0,2676,2671,1,
        0,0,0,2676,2673,1,0,0,0,2677,2678,1,0,0,0,2678,2690,5,1214,0,0,2679,
        2680,5,175,0,0,2680,2681,5,1213,0,0,2681,2682,3,162,81,0,2682,2683,
        5,1214,0,0,2683,2690,1,0,0,0,2684,2685,5,1081,0,0,2685,2686,5,1213,
        0,0,2686,2687,3,162,81,0,2687,2688,5,1214,0,0,2688,2690,1,0,0,0,
        2689,2654,1,0,0,0,2689,2662,1,0,0,0,2689,2669,1,0,0,0,2689,2679,
        1,0,0,0,2689,2684,1,0,0,0,2690,187,1,0,0,0,2691,2692,7,24,0,0,2692,
        2693,5,1213,0,0,2693,2694,3,162,81,0,2694,2695,5,1214,0,0,2695,2696,
        3,268,134,0,2696,2841,1,0,0,0,2697,2698,7,22,0,0,2698,2699,5,1213,
        0,0,2699,2700,3,162,81,0,2700,2701,5,1208,0,0,2701,2702,3,162,81,
        0,2702,2703,5,1214,0,0,2703,2704,3,268,134,0,2704,2841,1,0,0,0,2705,
        2706,5,83,0,0,2706,2709,5,1213,0,0,2707,2710,5,1219,0,0,2708,2710,
        3,162,81,0,2709,2707,1,0,0,0,2709,2708,1,0,0,0,2710,2711,1,0,0,0,
        2711,2712,5,1214,0,0,2712,2841,3,268,134,0,2713,2714,5,89,0,0,2714,
        2715,5,1213,0,0,2715,2718,3,162,81,0,2716,2717,5,1208,0,0,2717,2719,
        3,156,78,0,2718,2716,1,0,0,0,2719,2720,1,0,0,0,2720,2718,1,0,0,0,
        2720,2721,1,0,0,0,2721,2722,1,0,0,0,2722,2723,5,1214,0,0,2723,2841,
        1,0,0,0,2724,2725,7,25,0,0,2725,2726,5,1213,0,0,2726,2727,5,1214,
        0,0,2727,2841,3,270,135,0,2728,2729,7,26,0,0,2729,2730,5,1213,0,
        0,2730,2732,3,162,81,0,2731,2733,3,310,155,0,2732,2731,1,0,0,0,2732,
        2733,1,0,0,0,2733,2734,1,0,0,0,2734,2735,5,1214,0,0,2735,2736,3,
        268,134,0,2736,2841,1,0,0,0,2737,2738,7,27,0,0,2738,2739,5,1213,
        0,0,2739,2741,3,162,81,0,2740,2742,3,310,155,0,2741,2740,1,0,0,0,
        2741,2742,1,0,0,0,2742,2749,1,0,0,0,2743,2744,5,1208,0,0,2744,2747,
        3,162,81,0,2745,2746,5,1208,0,0,2746,2748,3,162,81,0,2747,2745,1,
        0,0,0,2747,2748,1,0,0,0,2748,2750,1,0,0,0,2749,2743,1,0,0,0,2749,
        2750,1,0,0,0,2750,2751,1,0,0,0,2751,2753,5,1214,0,0,2752,2754,3,
        310,155,0,2753,2752,1,0,0,0,2753,2754,1,0,0,0,2754,2755,1,0,0,0,
        2755,2756,3,270,135,0,2756,2841,1,0,0,0,2757,2758,7,28,0,0,2758,
        2759,5,1213,0,0,2759,2760,3,162,81,0,2760,2761,5,1208,0,0,2761,2764,
        3,376,188,0,2762,2763,5,1208,0,0,2763,2765,3,156,78,0,2764,2762,
        1,0,0,0,2765,2766,1,0,0,0,2766,2764,1,0,0,0,2766,2767,1,0,0,0,2767,
        2768,1,0,0,0,2768,2769,5,1214,0,0,2769,2841,1,0,0,0,2770,2771,5,
        763,0,0,2771,2772,5,1213,0,0,2772,2773,3,162,81,0,2773,2774,5,1214,
        0,0,2774,2841,1,0,0,0,2775,2776,5,249,0,0,2776,2777,5,1213,0,0,2777,
        2778,3,162,81,0,2778,2779,5,1208,0,0,2779,2780,3,376,188,0,2780,
        2781,5,1208,0,0,2781,2782,3,156,78,0,2782,2783,5,1214,0,0,2783,2841,
        1,0,0,0,2784,2785,7,29,0,0,2785,2786,5,1213,0,0,2786,2787,3,162,
        81,0,2787,2788,5,1214,0,0,2788,2789,5,1039,0,0,2789,2790,5,174,0,
        0,2790,2791,5,1213,0,0,2791,2792,5,291,0,0,2792,2793,5,42,0,0,2793,
        2798,3,154,77,0,2794,2795,5,1208,0,0,2795,2797,3,154,77,0,2796,2794,
        1,0,0,0,2797,2800,1,0,0,0,2798,2796,1,0,0,0,2798,2799,1,0,0,0,2799,
        2801,1,0,0,0,2800,2798,1,0,0,0,2801,2802,5,1214,0,0,2802,2841,1,
        0,0,0,2803,2804,5,316,0,0,2804,2805,5,1213,0,0,2805,2808,3,376,188,
        0,2806,2807,5,1208,0,0,2807,2809,3,156,78,0,2808,2806,1,0,0,0,2809,
        2810,1,0,0,0,2810,2808,1,0,0,0,2810,2811,1,0,0,0,2811,2812,1,0,0,
        0,2812,2813,5,1214,0,0,2813,2841,1,0,0,0,2814,2815,5,321,0,0,2815,
        2816,5,1213,0,0,2816,2817,5,1214,0,0,2817,2841,3,272,136,0,2818,
        2819,5,321,0,0,2819,2820,5,1213,0,0,2820,2825,3,156,78,0,2821,2822,
        5,1208,0,0,2822,2824,3,156,78,0,2823,2821,1,0,0,0,2824,2827,1,0,
        0,0,2825,2823,1,0,0,0,2825,2826,1,0,0,0,2826,2828,1,0,0,0,2827,2825,
        1,0,0,0,2828,2829,5,1214,0,0,2829,2841,1,0,0,0,2830,2831,5,362,0,
        0,2831,2832,5,1213,0,0,2832,2833,5,1214,0,0,2833,2841,3,270,135,
        0,2834,2835,5,1081,0,0,2835,2836,5,1213,0,0,2836,2837,3,162,81,0,
        2837,2838,5,1214,0,0,2838,2839,3,268,134,0,2839,2841,1,0,0,0,2840,
        2691,1,0,0,0,2840,2697,1,0,0,0,2840,2705,1,0,0,0,2840,2713,1,0,0,
        0,2840,2724,1,0,0,0,2840,2728,1,0,0,0,2840,2737,1,0,0,0,2840,2757,
        1,0,0,0,2840,2770,1,0,0,0,2840,2775,1,0,0,0,2840,2784,1,0,0,0,2840,
        2803,1,0,0,0,2840,2814,1,0,0,0,2840,2818,1,0,0,0,2840,2830,1,0,0,
        0,2840,2834,1,0,0,0,2841,189,1,0,0,0,2842,2843,7,30,0,0,2843,2844,
        5,1213,0,0,2844,2845,3,162,81,0,2845,2846,5,1214,0,0,2846,2897,1,
        0,0,0,2847,2849,3,232,116,0,2848,2847,1,0,0,0,2848,2849,1,0,0,0,
        2849,2850,1,0,0,0,2850,2851,7,31,0,0,2851,2852,5,1213,0,0,2852,2853,
        3,162,81,0,2853,2854,5,1214,0,0,2854,2897,1,0,0,0,2855,2856,7,32,
        0,0,2856,2857,5,1213,0,0,2857,2858,3,162,81,0,2858,2859,5,1208,0,
        0,2859,2860,3,162,81,0,2860,2861,5,1214,0,0,2861,2897,1,0,0,0,2862,
        2864,3,236,118,0,2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2865,1,
        0,0,0,2865,2866,5,856,0,0,2866,2867,5,1213,0,0,2867,2868,3,162,81,
        0,2868,2869,5,1208,0,0,2869,2870,3,162,81,0,2870,2871,5,1214,0,0,
        2871,2897,1,0,0,0,2872,2874,3,232,116,0,2873,2872,1,0,0,0,2873,2874,
        1,0,0,0,2874,2875,1,0,0,0,2875,2876,7,33,0,0,2876,2877,5,1213,0,
        0,2877,2880,3,162,81,0,2878,2879,5,1208,0,0,2879,2881,3,162,81,0,
        2880,2878,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2883,
        5,1214,0,0,2883,2897,1,0,0,0,2884,2885,5,1100,0,0,2885,2886,5,1066,
        0,0,2886,2887,5,1213,0,0,2887,2888,3,162,81,0,2888,2889,5,1208,0,
        0,2889,2890,3,162,81,0,2890,2891,5,1208,0,0,2891,2892,3,162,81,0,
        2892,2893,5,1208,0,0,2893,2894,3,162,81,0,2894,2895,5,1214,0,0,2895,
        2897,1,0,0,0,2896,2842,1,0,0,0,2896,2848,1,0,0,0,2896,2855,1,0,0,
        0,2896,2863,1,0,0,0,2896,2873,1,0,0,0,2896,2884,1,0,0,0,2897,191,
        1,0,0,0,2898,2900,3,232,116,0,2899,2898,1,0,0,0,2899,2900,1,0,0,
        0,2900,2901,1,0,0,0,2901,2902,5,514,0,0,2902,2903,5,1213,0,0,2903,
        2910,3,162,81,0,2904,2905,5,291,0,0,2905,2906,5,42,0,0,2906,2908,
        3,162,81,0,2907,2909,7,5,0,0,2908,2907,1,0,0,0,2908,2909,1,0,0,0,
        2909,2911,1,0,0,0,2910,2904,1,0,0,0,2910,2911,1,0,0,0,2911,2912,
        1,0,0,0,2912,2913,5,1208,0,0,2913,2914,3,162,81,0,2914,2915,5,1214,
        0,0,2915,3112,1,0,0,0,2916,2917,5,564,0,0,2917,2918,5,1213,0,0,2918,
        2923,3,162,81,0,2919,2920,5,1208,0,0,2920,2922,3,360,180,0,2921,
        2919,1,0,0,0,2922,2925,1,0,0,0,2923,2921,1,0,0,0,2923,2924,1,0,0,
        0,2924,2926,1,0,0,0,2925,2923,1,0,0,0,2926,2927,5,1214,0,0,2927,
        3112,1,0,0,0,2928,2929,5,517,0,0,2929,2930,5,1213,0,0,2930,2931,
        3,162,81,0,2931,2932,5,1208,0,0,2932,2937,3,162,81,0,2933,2934,5,
        1208,0,0,2934,2936,3,360,180,0,2935,2933,1,0,0,0,2936,2939,1,0,0,
        0,2937,2935,1,0,0,0,2937,2938,1,0,0,0,2938,2940,1,0,0,0,2939,2937,
        1,0,0,0,2940,2941,5,1214,0,0,2941,3112,1,0,0,0,2942,2943,7,13,0,
        0,2943,2944,5,1213,0,0,2944,2945,3,162,81,0,2945,2946,5,1208,0,0,
        2946,2951,3,162,81,0,2947,2948,5,1208,0,0,2948,2950,3,360,180,0,
        2949,2947,1,0,0,0,2950,2953,1,0,0,0,2951,2949,1,0,0,0,2951,2952,
        1,0,0,0,2952,2954,1,0,0,0,2953,2951,1,0,0,0,2954,2955,5,1214,0,0,
        2955,3112,1,0,0,0,2956,2957,7,14,0,0,2957,2958,5,1213,0,0,2958,2959,
        3,162,81,0,2959,2960,5,1208,0,0,2960,2965,3,162,81,0,2961,2962,5,
        1208,0,0,2962,2964,3,360,180,0,2963,2961,1,0,0,0,2964,2967,1,0,0,
        0,2965,2963,1,0,0,0,2965,2966,1,0,0,0,2966,2968,1,0,0,0,2967,2965,
        1,0,0,0,2968,2969,5,1214,0,0,2969,3112,1,0,0,0,2970,2971,7,15,0,
        0,2971,2972,5,1213,0,0,2972,2977,3,162,81,0,2973,2974,5,1208,0,0,
        2974,2976,3,360,180,0,2975,2973,1,0,0,0,2976,2979,1,0,0,0,2977,2975,
        1,0,0,0,2977,2978,1,0,0,0,2978,2980,1,0,0,0,2979,2977,1,0,0,0,2980,
        2981,5,1214,0,0,2981,3112,1,0,0,0,2982,2983,5,518,0,0,2983,2984,
        5,1213,0,0,2984,3000,3,162,81,0,2985,2986,5,1208,0,0,2986,2988,3,
        360,180,0,2987,2985,1,0,0,0,2988,2991,1,0,0,0,2989,2987,1,0,0,0,
        2989,2990,1,0,0,0,2990,2992,1,0,0,0,2991,2989,1,0,0,0,2992,2993,
        5,1208,0,0,2993,3001,3,162,81,0,2994,2995,5,1208,0,0,2995,2997,3,
        360,180,0,2996,2994,1,0,0,0,2997,2998,1,0,0,0,2998,2996,1,0,0,0,
        2998,2999,1,0,0,0,2999,3001,1,0,0,0,3000,2989,1,0,0,0,3000,2996,
        1,0,0,0,3000,3001,1,0,0,0,3001,3002,1,0,0,0,3002,3003,5,1214,0,0,
        3003,3112,1,0,0,0,3004,3005,5,522,0,0,3005,3006,5,1213,0,0,3006,
        3007,3,162,81,0,3007,3008,5,1208,0,0,3008,3009,3,162,81,0,3009,3010,
        5,1214,0,0,3010,3112,1,0,0,0,3011,3012,5,516,0,0,3012,3013,5,1213,
        0,0,3013,3014,3,162,81,0,3014,3015,5,1208,0,0,3015,3025,3,162,81,
        0,3016,3017,5,1208,0,0,3017,3019,3,360,180,0,3018,3016,1,0,0,0,3019,
        3020,1,0,0,0,3020,3018,1,0,0,0,3020,3021,1,0,0,0,3021,3022,1,0,0,
        0,3022,3023,5,1208,0,0,3023,3024,3,376,188,0,3024,3026,1,0,0,0,3025,
        3018,1,0,0,0,3025,3026,1,0,0,0,3026,3027,1,0,0,0,3027,3028,5,1214,
        0,0,3028,3112,1,0,0,0,3029,3030,5,533,0,0,3030,3031,5,1213,0,0,3031,
        3032,3,162,81,0,3032,3033,5,1208,0,0,3033,3042,3,162,81,0,3034,3035,
        5,1208,0,0,3035,3037,3,360,180,0,3036,3034,1,0,0,0,3037,3038,1,0,
        0,0,3038,3036,1,0,0,0,3038,3039,1,0,0,0,3039,3043,1,0,0,0,3040,3041,
        5,1208,0,0,3041,3043,3,162,81,0,3042,3036,1,0,0,0,3042,3040,1,0,
        0,0,3042,3043,1,0,0,0,3043,3044,1,0,0,0,3044,3045,5,1214,0,0,3045,
        3112,1,0,0,0,3046,3047,5,534,0,0,3047,3048,5,1213,0,0,3048,3049,
        3,162,81,0,3049,3050,5,1208,0,0,3050,3051,3,162,81,0,3051,3052,5,
        1208,0,0,3052,3061,3,376,188,0,3053,3054,5,1208,0,0,3054,3056,3,
        360,180,0,3055,3053,1,0,0,0,3056,3057,1,0,0,0,3057,3055,1,0,0,0,
        3057,3058,1,0,0,0,3058,3062,1,0,0,0,3059,3060,5,1208,0,0,3060,3062,
        3,162,81,0,3061,3055,1,0,0,0,3061,3059,1,0,0,0,3061,3062,1,0,0,0,
        3062,3063,1,0,0,0,3063,3064,5,1214,0,0,3064,3112,1,0,0,0,3065,3067,
        3,232,116,0,3066,3065,1,0,0,0,3066,3067,1,0,0,0,3067,3068,1,0,0,
        0,3068,3069,7,16,0,0,3069,3070,5,1213,0,0,3070,3071,3,162,81,0,3071,
        3072,5,1208,0,0,3072,3073,3,162,81,0,3073,3074,5,1214,0,0,3074,3112,
        1,0,0,0,3075,3077,3,232,116,0,3076,3075,1,0,0,0,3076,3077,1,0,0,
        0,3077,3078,1,0,0,0,3078,3079,7,34,0,0,3079,3080,5,1213,0,0,3080,
        3081,3,162,81,0,3081,3082,5,1214,0,0,3082,3112,1,0,0,0,3083,3085,
        3,232,116,0,3084,3083,1,0,0,0,3084,3085,1,0,0,0,3085,3086,1,0,0,
        0,3086,3087,5,818,0,0,3087,3088,5,1213,0,0,3088,3095,3,162,81,0,
        3089,3090,5,1208,0,0,3090,3093,3,162,81,0,3091,3092,5,1208,0,0,3092,
        3094,3,162,81,0,3093,3091,1,0,0,0,3093,3094,1,0,0,0,3094,3096,1,
        0,0,0,3095,3089,1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,0,0,3097,
        3098,5,1214,0,0,3098,3112,1,0,0,0,3099,3101,3,232,116,0,3100,3099,
        1,0,0,0,3100,3101,1,0,0,0,3101,3102,1,0,0,0,3102,3103,5,832,0,0,
        3103,3104,5,1213,0,0,3104,3107,3,162,81,0,3105,3106,5,1208,0,0,3106,
        3108,3,162,81,0,3107,3105,1,0,0,0,3107,3108,1,0,0,0,3108,3109,1,
        0,0,0,3109,3110,5,1214,0,0,3110,3112,1,0,0,0,3111,2899,1,0,0,0,3111,
        2916,1,0,0,0,3111,2928,1,0,0,0,3111,2942,1,0,0,0,3111,2956,1,0,0,
        0,3111,2970,1,0,0,0,3111,2982,1,0,0,0,3111,3004,1,0,0,0,3111,3011,
        1,0,0,0,3111,3029,1,0,0,0,3111,3046,1,0,0,0,3111,3066,1,0,0,0,3111,
        3076,1,0,0,0,3111,3084,1,0,0,0,3111,3100,1,0,0,0,3112,193,1,0,0,
        0,3113,3114,5,546,0,0,3114,3115,5,1213,0,0,3115,3118,3,162,81,0,
        3116,3117,5,1208,0,0,3117,3119,3,366,183,0,3118,3116,1,0,0,0,3118,
        3119,1,0,0,0,3119,3120,1,0,0,0,3120,3121,5,1214,0,0,3121,3154,1,
        0,0,0,3122,3123,7,35,0,0,3123,3124,5,1213,0,0,3124,3125,3,162,81,
        0,3125,3126,5,1214,0,0,3126,3154,1,0,0,0,3127,3128,7,36,0,0,3128,
        3129,5,1213,0,0,3129,3130,3,162,81,0,3130,3131,5,1214,0,0,3131,3154,
        1,0,0,0,3132,3137,5,111,0,0,3133,3134,5,1213,0,0,3134,3135,3,396,
        198,0,3135,3136,5,1214,0,0,3136,3138,1,0,0,0,3137,3133,1,0,0,0,3137,
        3138,1,0,0,0,3138,3154,1,0,0,0,3139,3140,7,37,0,0,3140,3141,5,1213,
        0,0,3141,3142,3,162,81,0,3142,3143,5,1214,0,0,3143,3154,1,0,0,0,
        3144,3145,5,281,0,0,3145,3146,5,1213,0,0,3146,3149,3,162,81,0,3147,
        3148,5,1208,0,0,3148,3150,3,366,183,0,3149,3147,1,0,0,0,3149,3150,
        1,0,0,0,3150,3151,1,0,0,0,3151,3152,5,1214,0,0,3152,3154,1,0,0,0,
        3153,3113,1,0,0,0,3153,3122,1,0,0,0,3153,3127,1,0,0,0,3153,3132,
        1,0,0,0,3153,3139,1,0,0,0,3153,3144,1,0,0,0,3154,195,1,0,0,0,3155,
        3157,3,232,116,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,3158,1,
        0,0,0,3158,3159,5,548,0,0,3159,3160,5,1213,0,0,3160,3161,3,162,81,
        0,3161,3162,5,1214,0,0,3162,3220,1,0,0,0,3163,3165,3,232,116,0,3164,
        3163,1,0,0,0,3164,3165,1,0,0,0,3165,3166,1,0,0,0,3166,3167,7,38,
        0,0,3167,3168,5,1213,0,0,3168,3169,3,162,81,0,3169,3170,5,1208,0,
        0,3170,3171,3,162,81,0,3171,3172,5,1214,0,0,3172,3220,1,0,0,0,3173,
        3175,3,232,116,0,3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,3176,1,
        0,0,0,3176,3177,5,597,0,0,3177,3178,5,1213,0,0,3178,3181,3,162,81,
        0,3179,3180,5,1208,0,0,3180,3182,3,162,81,0,3181,3179,1,0,0,0,3181,
        3182,1,0,0,0,3182,3183,1,0,0,0,3183,3184,5,1214,0,0,3184,3220,1,
        0,0,0,3185,3187,3,232,116,0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,
        3187,3188,1,0,0,0,3188,3189,5,919,0,0,3189,3190,5,1213,0,0,3190,
        3191,3,162,81,0,3191,3192,5,1208,0,0,3192,3195,3,162,81,0,3193,3194,
        5,1208,0,0,3194,3196,3,162,81,0,3195,3193,1,0,0,0,3195,3196,1,0,
        0,0,3196,3197,1,0,0,0,3197,3198,5,1214,0,0,3198,3220,1,0,0,0,3199,
        3201,3,232,116,0,3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,3202,1,
        0,0,0,3202,3203,5,945,0,0,3203,3204,5,1213,0,0,3204,3205,3,162,81,
        0,3205,3206,5,1208,0,0,3206,3207,3,162,81,0,3207,3208,5,1208,0,0,
        3208,3209,3,162,81,0,3209,3210,5,1214,0,0,3210,3220,1,0,0,0,3211,
        3213,3,232,116,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3214,1,
        0,0,0,3214,3215,5,991,0,0,3215,3216,5,1213,0,0,3216,3217,3,162,81,
        0,3217,3218,5,1214,0,0,3218,3220,1,0,0,0,3219,3156,1,0,0,0,3219,
        3164,1,0,0,0,3219,3174,1,0,0,0,3219,3186,1,0,0,0,3219,3200,1,0,0,
        0,3219,3212,1,0,0,0,3220,197,1,0,0,0,3221,3278,5,5,0,0,3222,3225,
        5,94,0,0,3223,3224,5,1213,0,0,3224,3226,5,1214,0,0,3225,3223,1,0,
        0,0,3225,3226,1,0,0,0,3226,3231,1,0,0,0,3227,3228,5,604,0,0,3228,
        3229,5,1213,0,0,3229,3231,5,1214,0,0,3230,3222,1,0,0,0,3230,3227,
        1,0,0,0,3231,3233,1,0,0,0,3232,3234,3,340,170,0,3233,3232,1,0,0,
        0,3233,3234,1,0,0,0,3234,3278,1,0,0,0,3235,3278,5,95,0,0,3236,3238,
        5,96,0,0,3237,3239,3,480,240,0,3238,3237,1,0,0,0,3238,3239,1,0,0,
        0,3239,3244,1,0,0,0,3240,3241,5,605,0,0,3241,3242,5,1213,0,0,3242,
        3244,5,1214,0,0,3243,3236,1,0,0,0,3243,3240,1,0,0,0,3244,3246,1,
        0,0,0,3245,3247,3,340,170,0,3246,3245,1,0,0,0,3246,3247,1,0,0,0,
        3247,3278,1,0,0,0,3248,3250,5,97,0,0,3249,3251,3,480,240,0,3250,
        3249,1,0,0,0,3250,3251,1,0,0,0,3251,3253,1,0,0,0,3252,3254,3,340,
        170,0,3253,3252,1,0,0,0,3253,3254,1,0,0,0,3254,3278,1,0,0,0,3255,
        3278,5,98,0,0,3256,3278,5,102,0,0,3257,3259,5,104,0,0,3258,3260,
        3,340,170,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,3278,1,0,0,
        0,3261,3262,5,803,0,0,3262,3263,5,1213,0,0,3263,3278,5,1214,0,0,
        3264,3278,5,311,0,0,3265,3278,5,357,0,0,3266,3278,5,371,0,0,3267,
        3278,5,980,0,0,3268,3270,5,981,0,0,3269,3271,3,480,240,0,3270,3269,
        1,0,0,0,3270,3271,1,0,0,0,3271,3278,1,0,0,0,3272,3274,5,421,0,0,
        3273,3275,3,340,170,0,3274,3273,1,0,0,0,3274,3275,1,0,0,0,3275,3278,
        1,0,0,0,3276,3278,5,456,0,0,3277,3221,1,0,0,0,3277,3230,1,0,0,0,
        3277,3235,1,0,0,0,3277,3243,1,0,0,0,3277,3248,1,0,0,0,3277,3255,
        1,0,0,0,3277,3256,1,0,0,0,3277,3257,1,0,0,0,3277,3261,1,0,0,0,3277,
        3264,1,0,0,0,3277,3265,1,0,0,0,3277,3266,1,0,0,0,3277,3267,1,0,0,
        0,3277,3268,1,0,0,0,3277,3272,1,0,0,0,3277,3276,1,0,0,0,3278,199,
        1,0,0,0,3279,3281,3,236,118,0,3280,3279,1,0,0,0,3280,3281,1,0,0,
        0,3281,3282,1,0,0,0,3282,3283,7,39,0,0,3283,3284,5,1213,0,0,3284,
        3285,3,162,81,0,3285,3286,5,1214,0,0,3286,3303,1,0,0,0,3287,3289,
        3,232,116,0,3288,3287,1,0,0,0,3288,3289,1,0,0,0,3289,3290,1,0,0,
        0,3290,3291,7,40,0,0,3291,3292,5,1213,0,0,3292,3294,3,162,81,0,3293,
        3295,5,1208,0,0,3294,3293,1,0,0,0,3294,3295,1,0,0,0,3295,3298,1,
        0,0,0,3296,3299,5,274,0,0,3297,3299,3,370,185,0,3298,3296,1,0,0,
        0,3298,3297,1,0,0,0,3298,3299,1,0,0,0,3299,3300,1,0,0,0,3300,3301,
        5,1214,0,0,3301,3303,1,0,0,0,3302,3280,1,0,0,0,3302,3288,1,0,0,0,
        3303,201,1,0,0,0,3304,3306,3,232,116,0,3305,3304,1,0,0,0,3305,3306,
        1,0,0,0,3306,3307,1,0,0,0,3307,3308,5,622,0,0,3308,3309,5,1213,0,
        0,3309,3310,3,162,81,0,3310,3311,5,1208,0,0,3311,3312,3,162,81,0,
        3312,3313,5,1208,0,0,3313,3314,3,162,81,0,3314,3315,1,0,0,0,3315,
        3316,3,162,81,0,3316,3317,5,1214,0,0,3317,3333,1,0,0,0,3318,3320,
        3,232,116,0,3319,3318,1,0,0,0,3319,3320,1,0,0,0,3320,3321,1,0,0,
        0,3321,3322,7,41,0,0,3322,3323,5,1213,0,0,3323,3326,3,162,81,0,3324,
        3325,5,1208,0,0,3325,3327,3,162,81,0,3326,3324,1,0,0,0,3327,3328,
        1,0,0,0,3328,3326,1,0,0,0,3328,3329,1,0,0,0,3329,3330,1,0,0,0,3330,
        3331,5,1214,0,0,3331,3333,1,0,0,0,3332,3305,1,0,0,0,3332,3319,1,
        0,0,0,3333,203,1,0,0,0,3334,3336,3,232,116,0,3335,3334,1,0,0,0,3335,
        3336,1,0,0,0,3336,3337,1,0,0,0,3337,3338,7,42,0,0,3338,3339,5,1213,
        0,0,3339,3340,3,162,81,0,3340,3341,5,1214,0,0,3341,205,1,0,0,0,3342,
        3343,5,50,0,0,3343,3344,5,1213,0,0,3344,3345,3,162,81,0,3345,3358,
        5,20,0,0,3346,3350,3,446,223,0,3347,3349,3,468,234,0,3348,3347,1,
        0,0,0,3349,3352,1,0,0,0,3350,3348,1,0,0,0,3350,3351,1,0,0,0,3351,
        3359,1,0,0,0,3352,3350,1,0,0,0,3353,3355,3,468,234,0,3354,3353,1,
        0,0,0,3355,3356,1,0,0,0,3356,3354,1,0,0,0,3356,3357,1,0,0,0,3357,
        3359,1,0,0,0,3358,3346,1,0,0,0,3358,3354,1,0,0,0,3359,3360,1,0,0,
        0,3360,3361,5,1214,0,0,3361,3474,1,0,0,0,3362,3363,5,1095,0,0,3363,
        3364,5,1213,0,0,3364,3365,3,162,81,0,3365,3366,5,20,0,0,3366,3367,
        3,446,223,0,3367,3368,5,1214,0,0,3368,3474,1,0,0,0,3369,3371,3,232,
        116,0,3370,3369,1,0,0,0,3370,3371,1,0,0,0,3371,3372,1,0,0,0,3372,
        3373,5,992,0,0,3373,3374,5,1213,0,0,3374,3375,3,162,81,0,3375,3376,
        5,1208,0,0,3376,3377,3,370,185,0,3377,3378,5,1214,0,0,3378,3474,
        1,0,0,0,3379,3381,3,232,116,0,3380,3379,1,0,0,0,3380,3381,1,0,0,
        0,3381,3382,1,0,0,0,3382,3383,5,679,0,0,3383,3384,5,1213,0,0,3384,
        3385,3,162,81,0,3385,3386,5,1208,0,0,3386,3387,3,370,185,0,3387,
        3388,5,1214,0,0,3388,3474,1,0,0,0,3389,3391,3,232,116,0,3390,3389,
        1,0,0,0,3390,3391,1,0,0,0,3391,3392,1,0,0,0,3392,3393,5,996,0,0,
        3393,3394,5,1213,0,0,3394,3404,3,162,81,0,3395,3396,5,1208,0,0,3396,
        3402,3,370,185,0,3397,3400,5,1208,0,0,3398,3401,3,370,185,0,3399,
        3401,5,274,0,0,3400,3398,1,0,0,0,3400,3399,1,0,0,0,3401,3403,1,0,
        0,0,3402,3397,1,0,0,0,3402,3403,1,0,0,0,3403,3405,1,0,0,0,3404,3395,
        1,0,0,0,3404,3405,1,0,0,0,3405,3406,1,0,0,0,3406,3407,5,1214,0,0,
        3407,3474,1,0,0,0,3408,3410,3,232,116,0,3409,3408,1,0,0,0,3409,3410,
        1,0,0,0,3410,3411,1,0,0,0,3411,3412,5,993,0,0,3412,3413,5,1213,0,
        0,3413,3423,3,162,81,0,3414,3415,5,1208,0,0,3415,3421,3,370,185,
        0,3416,3419,5,1208,0,0,3417,3420,3,370,185,0,3418,3420,5,274,0,0,
        3419,3417,1,0,0,0,3419,3418,1,0,0,0,3420,3422,1,0,0,0,3421,3416,
        1,0,0,0,3421,3422,1,0,0,0,3422,3424,1,0,0,0,3423,3414,1,0,0,0,3423,
        3424,1,0,0,0,3424,3425,1,0,0,0,3425,3426,5,1214,0,0,3426,3474,1,
        0,0,0,3427,3429,3,232,116,0,3428,3427,1,0,0,0,3428,3429,1,0,0,0,
        3429,3430,1,0,0,0,3430,3431,5,994,0,0,3431,3432,5,1213,0,0,3432,
        3433,3,162,81,0,3433,3436,5,1208,0,0,3434,3437,3,370,185,0,3435,
        3437,5,274,0,0,3436,3434,1,0,0,0,3436,3435,1,0,0,0,3437,3438,1,0,
        0,0,3438,3439,5,1214,0,0,3439,3474,1,0,0,0,3440,3442,3,232,116,0,
        3441,3440,1,0,0,0,3441,3442,1,0,0,0,3442,3443,1,0,0,0,3443,3444,
        7,43,0,0,3444,3445,5,1213,0,0,3445,3451,3,162,81,0,3446,3449,5,1208,
        0,0,3447,3450,3,370,185,0,3448,3450,5,274,0,0,3449,3447,1,0,0,0,
        3449,3448,1,0,0,0,3450,3452,1,0,0,0,3451,3446,1,0,0,0,3451,3452,
        1,0,0,0,3452,3453,1,0,0,0,3453,3454,5,1214,0,0,3454,3474,1,0,0,0,
        3455,3457,3,232,116,0,3456,3455,1,0,0,0,3456,3457,1,0,0,0,3457,3458,
        1,0,0,0,3458,3459,7,44,0,0,3459,3460,5,1213,0,0,3460,3461,3,162,
        81,0,3461,3462,5,1214,0,0,3462,3474,1,0,0,0,3463,3465,3,232,116,
        0,3464,3463,1,0,0,0,3464,3465,1,0,0,0,3465,3466,1,0,0,0,3466,3467,
        7,45,0,0,3467,3468,5,1213,0,0,3468,3469,3,162,81,0,3469,3470,5,1208,
        0,0,3470,3471,3,162,81,0,3471,3472,5,1214,0,0,3472,3474,1,0,0,0,
        3473,3342,1,0,0,0,3473,3362,1,0,0,0,3473,3370,1,0,0,0,3473,3380,
        1,0,0,0,3473,3390,1,0,0,0,3473,3409,1,0,0,0,3473,3428,1,0,0,0,3473,
        3441,1,0,0,0,3473,3456,1,0,0,0,3473,3464,1,0,0,0,3474,207,1,0,0,
        0,3475,3476,7,46,0,0,3476,3477,5,1213,0,0,3477,3478,3,162,81,0,3478,
        3479,5,1214,0,0,3479,3526,1,0,0,0,3480,3482,3,232,116,0,3481,3480,
        1,0,0,0,3481,3482,1,0,0,0,3482,3483,1,0,0,0,3483,3484,5,732,0,0,
        3484,3485,5,1213,0,0,3485,3486,3,162,81,0,3486,3487,5,1214,0,0,3487,
        3526,1,0,0,0,3488,3490,3,232,116,0,3489,3488,1,0,0,0,3489,3490,1,
        0,0,0,3490,3491,1,0,0,0,3491,3492,5,792,0,0,3492,3493,5,1213,0,0,
        3493,3494,3,162,81,0,3494,3495,5,1208,0,0,3495,3496,3,370,185,0,
        3496,3497,5,1214,0,0,3497,3526,1,0,0,0,3498,3500,3,232,116,0,3499,
        3498,1,0,0,0,3499,3500,1,0,0,0,3500,3501,1,0,0,0,3501,3502,5,786,
        0,0,3502,3503,5,1213,0,0,3503,3504,3,162,81,0,3504,3505,5,1208,0,
        0,3505,3506,3,162,81,0,3506,3507,5,1214,0,0,3507,3526,1,0,0,0,3508,
        3510,3,232,116,0,3509,3508,1,0,0,0,3509,3510,1,0,0,0,3510,3511,1,
        0,0,0,3511,3512,7,47,0,0,3512,3513,5,1213,0,0,3513,3514,3,162,81,
        0,3514,3515,5,1208,0,0,3515,3516,3,162,81,0,3516,3517,5,1214,0,0,
        3517,3526,1,0,0,0,3518,3519,5,152,0,0,3519,3520,5,1213,0,0,3520,
        3521,7,48,0,0,3521,3522,5,164,0,0,3522,3523,3,162,81,0,3523,3524,
        5,1214,0,0,3524,3526,1,0,0,0,3525,3475,1,0,0,0,3525,3481,1,0,0,0,
        3525,3489,1,0,0,0,3525,3499,1,0,0,0,3525,3509,1,0,0,0,3525,3518,
        1,0,0,0,3526,209,1,0,0,0,3527,3528,7,49,0,0,3528,3529,5,1213,0,0,
        3529,3556,5,1214,0,0,3530,3531,7,49,0,0,3531,3532,5,1213,0,0,3532,
        3533,3,266,133,0,3533,3534,5,1214,0,0,3534,3556,1,0,0,0,3535,3536,
        5,181,0,0,3536,3537,5,1213,0,0,3537,3538,3,162,81,0,3538,3539,5,
        1214,0,0,3539,3556,1,0,0,0,3540,3541,5,182,0,0,3541,3542,5,1213,
        0,0,3542,3556,5,1214,0,0,3543,3544,5,182,0,0,3544,3545,5,1213,0,
        0,3545,3550,3,162,81,0,3546,3547,5,1208,0,0,3547,3549,3,162,81,0,
        3548,3546,1,0,0,0,3549,3552,1,0,0,0,3550,3548,1,0,0,0,3550,3551,
        1,0,0,0,3551,3553,1,0,0,0,3552,3550,1,0,0,0,3553,3554,5,1214,0,0,
        3554,3556,1,0,0,0,3555,3527,1,0,0,0,3555,3530,1,0,0,0,3555,3535,
        1,0,0,0,3555,3540,1,0,0,0,3555,3543,1,0,0,0,3556,211,1,0,0,0,3557,
        3559,3,232,116,0,3558,3557,1,0,0,0,3558,3559,1,0,0,0,3559,3560,1,
        0,0,0,3560,3561,7,50,0,0,3561,3562,5,1213,0,0,3562,3563,5,1214,0,
        0,3563,213,1,0,0,0,3564,3566,3,236,118,0,3565,3564,1,0,0,0,3565,
        3566,1,0,0,0,3566,3567,1,0,0,0,3567,3568,5,1145,0,0,3568,3569,5,
        1213,0,0,3569,3570,3,370,185,0,3570,3571,5,1214,0,0,3571,3601,1,
        0,0,0,3572,3574,3,236,118,0,3573,3572,1,0,0,0,3573,3574,1,0,0,0,
        3574,3575,1,0,0,0,3575,3576,5,1146,0,0,3576,3577,5,1213,0,0,3577,
        3578,3,370,185,0,3578,3579,5,1208,0,0,3579,3580,3,370,185,0,3580,
        3581,5,1208,0,0,3581,3582,3,370,185,0,3582,3583,5,1208,0,0,3583,
        3584,3,370,185,0,3584,3585,5,1208,0,0,3585,3586,3,370,185,0,3586,
        3587,5,1208,0,0,3587,3588,3,370,185,0,3588,3589,5,1214,0,0,3589,
        3601,1,0,0,0,3590,3592,3,236,118,0,3591,3590,1,0,0,0,3591,3592,1,
        0,0,0,3592,3593,1,0,0,0,3593,3594,5,1147,0,0,3594,3595,5,1213,0,
        0,3595,3596,3,370,185,0,3596,3597,5,1208,0,0,3597,3598,3,370,185,
        0,3598,3599,5,1214,0,0,3599,3601,1,0,0,0,3600,3565,1,0,0,0,3600,
        3573,1,0,0,0,3600,3591,1,0,0,0,3601,215,1,0,0,0,3602,3604,3,232,
        116,0,3603,3602,1,0,0,0,3603,3604,1,0,0,0,3604,3605,1,0,0,0,3605,
        3606,5,810,0,0,3606,3607,5,1213,0,0,3607,3608,3,162,81,0,3608,3609,
        5,1208,0,0,3609,3610,3,162,81,0,3610,3611,5,1214,0,0,3611,3625,1,
        0,0,0,3612,3614,3,232,116,0,3613,3612,1,0,0,0,3613,3614,1,0,0,0,
        3614,3615,1,0,0,0,3615,3616,5,811,0,0,3616,3617,5,1213,0,0,3617,
        3618,3,162,81,0,3618,3619,5,1208,0,0,3619,3620,3,162,81,0,3620,3621,
        5,1208,0,0,3621,3622,3,162,81,0,3622,3623,5,1214,0,0,3623,3625,1,
        0,0,0,3624,3603,1,0,0,0,3624,3613,1,0,0,0,3625,217,1,0,0,0,3626,
        3627,5,34,0,0,3627,3628,5,1213,0,0,3628,3629,3,162,81,0,3629,3630,
        5,1214,0,0,3630,3668,1,0,0,0,3631,3632,5,134,0,0,3632,3633,5,1213,
        0,0,3633,3634,3,162,81,0,3634,3635,5,1214,0,0,3635,3668,1,0,0,0,
        3636,3637,5,134,0,0,3637,3638,5,1213,0,0,3638,3639,3,162,81,0,3639,
        3640,5,1214,0,0,3640,3642,5,207,0,0,3641,3643,5,272,0,0,3642,3641,
        1,0,0,0,3642,3643,1,0,0,0,3643,3644,1,0,0,0,3644,3645,7,51,0,0,3645,
        3668,1,0,0,0,3646,3647,5,205,0,0,3647,3648,5,1213,0,0,3648,3649,
        3,162,81,0,3649,3650,5,1214,0,0,3650,3651,3,478,239,0,3651,3668,
        1,0,0,0,3652,3653,5,731,0,0,3653,3654,5,1213,0,0,3654,3655,3,162,
        81,0,3655,3656,5,1214,0,0,3656,3668,1,0,0,0,3657,3658,5,267,0,0,
        3658,3659,5,1213,0,0,3659,3660,3,162,81,0,3660,3661,5,1214,0,0,3661,
        3668,1,0,0,0,3662,3663,5,861,0,0,3663,3664,5,1213,0,0,3664,3665,
        3,162,81,0,3665,3666,5,1214,0,0,3666,3668,1,0,0,0,3667,3626,1,0,
        0,0,3667,3631,1,0,0,0,3667,3636,1,0,0,0,3667,3646,1,0,0,0,3667,3652,
        1,0,0,0,3667,3657,1,0,0,0,3667,3662,1,0,0,0,3668,219,1,0,0,0,3669,
        3671,3,232,116,0,3670,3669,1,0,0,0,3670,3671,1,0,0,0,3671,3672,1,
        0,0,0,3672,3673,5,882,0,0,3673,3674,5,1213,0,0,3674,3675,3,162,81,
        0,3675,3676,5,1208,0,0,3676,3684,3,162,81,0,3677,3678,5,1208,0,0,
        3678,3679,3,162,81,0,3679,3680,5,1208,0,0,3680,3681,3,162,81,0,3681,
        3682,5,1208,0,0,3682,3683,3,162,81,0,3683,3685,1,0,0,0,3684,3677,
        1,0,0,0,3684,3685,1,0,0,0,3685,3686,1,0,0,0,3686,3687,5,1214,0,0,
        3687,3759,1,0,0,0,3688,3690,3,232,116,0,3689,3688,1,0,0,0,3689,3690,
        1,0,0,0,3690,3691,1,0,0,0,3691,3692,5,880,0,0,3692,3693,5,1213,0,
        0,3693,3694,3,162,81,0,3694,3695,5,1208,0,0,3695,3705,3,162,81,0,
        3696,3697,5,1208,0,0,3697,3698,3,162,81,0,3698,3699,5,1208,0,0,3699,
        3700,3,162,81,0,3700,3701,5,1208,0,0,3701,3702,3,162,81,0,3702,3703,
        5,1208,0,0,3703,3704,3,162,81,0,3704,3706,1,0,0,0,3705,3696,1,0,
        0,0,3705,3706,1,0,0,0,3706,3707,1,0,0,0,3707,3708,5,1214,0,0,3708,
        3759,1,0,0,0,3709,3711,3,232,116,0,3710,3709,1,0,0,0,3710,3711,1,
        0,0,0,3711,3712,1,0,0,0,3712,3713,5,879,0,0,3713,3714,5,1213,0,0,
        3714,3715,3,162,81,0,3715,3716,5,1208,0,0,3716,3726,3,162,81,0,3717,
        3718,5,1208,0,0,3718,3719,3,162,81,0,3719,3720,5,1208,0,0,3720,3721,
        3,162,81,0,3721,3722,5,1208,0,0,3722,3723,3,162,81,0,3723,3724,5,
        1208,0,0,3724,3725,3,162,81,0,3725,3727,1,0,0,0,3726,3717,1,0,0,
        0,3726,3727,1,0,0,0,3727,3728,1,0,0,0,3728,3729,5,1214,0,0,3729,
        3759,1,0,0,0,3730,3732,3,232,116,0,3731,3730,1,0,0,0,3731,3732,1,
        0,0,0,3732,3733,1,0,0,0,3733,3734,5,881,0,0,3734,3735,5,1213,0,0,
        3735,3736,3,162,81,0,3736,3737,5,1208,0,0,3737,3740,3,162,81,0,3738,
        3739,5,1208,0,0,3739,3741,3,162,81,0,3740,3738,1,0,0,0,3740,3741,
        1,0,0,0,3741,3742,1,0,0,0,3742,3743,5,1214,0,0,3743,3759,1,0,0,0,
        3744,3746,3,232,116,0,3745,3744,1,0,0,0,3745,3746,1,0,0,0,3746,3747,
        1,0,0,0,3747,3748,5,1083,0,0,3748,3749,5,1213,0,0,3749,3750,3,162,
        81,0,3750,3751,5,1208,0,0,3751,3752,3,162,81,0,3752,3753,5,1208,
        0,0,3753,3754,3,162,81,0,3754,3755,5,1208,0,0,3755,3756,3,162,81,
        0,3756,3757,5,1214,0,0,3757,3759,1,0,0,0,3758,3670,1,0,0,0,3758,
        3689,1,0,0,0,3758,3710,1,0,0,0,3758,3731,1,0,0,0,3758,3745,1,0,0,
        0,3759,221,1,0,0,0,3760,3762,3,232,116,0,3761,3760,1,0,0,0,3761,
        3762,1,0,0,0,3762,3763,1,0,0,0,3763,3764,7,52,0,0,3764,3765,5,1213,
        0,0,3765,3766,3,162,81,0,3766,3767,5,1214,0,0,3767,4074,1,0,0,0,
        3768,3769,7,53,0,0,3769,3770,5,1213,0,0,3770,3771,3,162,81,0,3771,
        3772,5,1214,0,0,3772,4074,1,0,0,0,3773,3774,5,586,0,0,3774,3775,
        5,1213,0,0,3775,3776,3,162,81,0,3776,3777,5,1208,0,0,3777,3782,3,
        162,81,0,3778,3779,5,1208,0,0,3779,3781,3,162,81,0,3780,3778,1,0,
        0,0,3781,3784,1,0,0,0,3782,3780,1,0,0,0,3782,3783,1,0,0,0,3783,3785,
        1,0,0,0,3784,3782,1,0,0,0,3785,3786,5,1214,0,0,3786,4074,1,0,0,0,
        3787,3789,3,232,116,0,3788,3787,1,0,0,0,3788,3789,1,0,0,0,3789,3790,
        1,0,0,0,3790,3791,5,1073,0,0,3791,3792,5,1213,0,0,3792,3793,5,265,
        0,0,3793,3794,5,1098,0,0,3794,3795,5,437,0,0,3795,3796,5,1213,0,
        0,3796,3801,3,162,81,0,3797,3798,5,1208,0,0,3798,3800,3,162,81,0,
        3799,3797,1,0,0,0,3800,3803,1,0,0,0,3801,3799,1,0,0,0,3801,3802,
        1,0,0,0,3802,3804,1,0,0,0,3803,3801,1,0,0,0,3804,3805,5,1214,0,0,
        3805,3806,5,1208,0,0,3806,3807,3,370,185,0,3807,3808,5,1208,0,0,
        3808,3809,3,370,185,0,3809,3810,5,1214,0,0,3810,4074,1,0,0,0,3811,
        3813,3,232,116,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,3814,1,
        0,0,0,3814,3815,5,1074,0,0,3815,3816,5,1213,0,0,3816,3817,3,162,
        81,0,3817,3818,5,1208,0,0,3818,3819,3,370,185,0,3819,3820,5,1208,
        0,0,3820,3821,3,370,185,0,3821,3822,5,1214,0,0,3822,4074,1,0,0,0,
        3823,3825,3,232,116,0,3824,3823,1,0,0,0,3824,3825,1,0,0,0,3825,3826,
        1,0,0,0,3826,3827,5,643,0,0,3827,3828,5,1213,0,0,3828,3829,3,162,
        81,0,3829,3830,5,1208,0,0,3830,3840,3,162,81,0,3831,3832,5,1208,
        0,0,3832,3833,3,376,188,0,3833,3834,5,1208,0,0,3834,3835,3,376,188,
        0,3835,3836,5,1208,0,0,3836,3837,3,376,188,0,3837,3838,5,1208,0,
        0,3838,3839,3,376,188,0,3839,3841,1,0,0,0,3840,3831,1,0,0,0,3840,
        3841,1,0,0,0,3841,3842,1,0,0,0,3842,3843,5,1214,0,0,3843,4074,1,
        0,0,0,3844,3845,5,192,0,0,3845,3846,5,1213,0,0,3846,3847,3,162,81,
        0,3847,3848,5,1208,0,0,3848,3849,3,162,81,0,3849,3850,5,1214,0,0,
        3850,4074,1,0,0,0,3851,3853,3,232,116,0,3852,3851,1,0,0,0,3852,3853,
        1,0,0,0,3853,3854,1,0,0,0,3854,3855,5,711,0,0,3855,3856,5,1213,0,
        0,3856,3857,3,162,81,0,3857,3858,5,1208,0,0,3858,3865,3,162,81,0,
        3859,3860,5,1208,0,0,3860,3863,3,162,81,0,3861,3862,5,1208,0,0,3862,
        3864,3,162,81,0,3863,3861,1,0,0,0,3863,3864,1,0,0,0,3864,3866,1,
        0,0,0,3865,3859,1,0,0,0,3865,3866,1,0,0,0,3866,3867,1,0,0,0,3867,
        3868,5,1214,0,0,3868,4074,1,0,0,0,3869,3871,3,232,116,0,3870,3869,
        1,0,0,0,3870,3871,1,0,0,0,3871,3872,1,0,0,0,3872,3873,7,54,0,0,3873,
        3874,5,1213,0,0,3874,3875,3,162,81,0,3875,3876,5,1208,0,0,3876,3877,
        3,162,81,0,3877,3878,5,1214,0,0,3878,4074,1,0,0,0,3879,3880,5,743,
        0,0,3880,3881,5,1213,0,0,3881,3882,3,162,81,0,3882,3883,5,1208,0,
        0,3883,3886,3,162,81,0,3884,3885,5,1208,0,0,3885,3887,3,162,81,0,
        3886,3884,1,0,0,0,3886,3887,1,0,0,0,3887,3888,1,0,0,0,3888,3889,
        5,1214,0,0,3889,4074,1,0,0,0,3890,3891,7,55,0,0,3891,3892,5,1213,
        0,0,3892,3893,3,162,81,0,3893,3894,5,1214,0,0,3894,4074,1,0,0,0,
        3895,3897,3,232,116,0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,3898,
        1,0,0,0,3898,3899,7,56,0,0,3899,3900,5,1213,0,0,3900,3901,3,162,
        81,0,3901,3902,5,1208,0,0,3902,3905,3,162,81,0,3903,3904,5,1208,
        0,0,3904,3906,3,162,81,0,3905,3903,1,0,0,0,3905,3906,1,0,0,0,3906,
        3907,1,0,0,0,3907,3908,5,1214,0,0,3908,4074,1,0,0,0,3909,3911,3,
        232,116,0,3910,3909,1,0,0,0,3910,3911,1,0,0,0,3911,3912,1,0,0,0,
        3912,3913,7,57,0,0,3913,3914,5,1213,0,0,3914,3917,3,162,81,0,3915,
        3916,5,1208,0,0,3916,3918,3,162,81,0,3917,3915,1,0,0,0,3917,3918,
        1,0,0,0,3918,3919,1,0,0,0,3919,3920,5,1214,0,0,3920,4074,1,0,0,0,
        3921,3923,3,232,116,0,3922,3921,1,0,0,0,3922,3923,1,0,0,0,3923,3924,
        1,0,0,0,3924,3925,5,793,0,0,3925,3926,5,1213,0,0,3926,3927,3,162,
        81,0,3927,3928,5,1208,0,0,3928,3929,3,162,81,0,3929,3930,5,1208,
        0,0,3930,3933,3,162,81,0,3931,3932,5,1208,0,0,3932,3934,3,162,81,
        0,3933,3931,1,0,0,0,3933,3934,1,0,0,0,3934,3935,1,0,0,0,3935,3936,
        5,1214,0,0,3936,4074,1,0,0,0,3937,3939,3,232,116,0,3938,3937,1,0,
        0,0,3938,3939,1,0,0,0,3939,3940,1,0,0,0,3940,3941,5,812,0,0,3941,
        3942,5,1213,0,0,3942,3943,3,162,81,0,3943,3944,5,1208,0,0,3944,3955,
        3,162,81,0,3945,3946,5,1208,0,0,3946,3953,3,162,81,0,3947,3948,5,
        1208,0,0,3948,3951,3,162,81,0,3949,3950,5,1208,0,0,3950,3952,3,162,
        81,0,3951,3949,1,0,0,0,3951,3952,1,0,0,0,3952,3954,1,0,0,0,3953,
        3947,1,0,0,0,3953,3954,1,0,0,0,3954,3956,1,0,0,0,3955,3945,1,0,0,
        0,3955,3956,1,0,0,0,3956,3957,1,0,0,0,3957,3958,5,1214,0,0,3958,
        4074,1,0,0,0,3959,3961,3,232,116,0,3960,3959,1,0,0,0,3960,3961,1,
        0,0,0,3961,3962,1,0,0,0,3962,3963,5,830,0,0,3963,3964,5,1213,0,0,
        3964,3965,3,162,81,0,3965,3966,5,1208,0,0,3966,3969,3,162,81,0,3967,
        3968,5,1208,0,0,3968,3970,3,162,81,0,3969,3967,1,0,0,0,3969,3970,
        1,0,0,0,3970,3971,1,0,0,0,3971,3972,5,1214,0,0,3972,4074,1,0,0,0,
        3973,3975,3,232,116,0,3974,3973,1,0,0,0,3974,3975,1,0,0,0,3975,3976,
        1,0,0,0,3976,3977,5,831,0,0,3977,3978,5,1213,0,0,3978,3979,3,162,
        81,0,3979,3980,5,1208,0,0,3980,3981,3,162,81,0,3981,3982,5,1208,
        0,0,3982,3983,3,162,81,0,3983,3984,5,1214,0,0,3984,4074,1,0,0,0,
        3985,3986,5,304,0,0,3986,3987,5,1213,0,0,3987,3988,3,162,81,0,3988,
        3989,5,190,0,0,3989,3990,3,162,81,0,3990,3991,5,1214,0,0,3991,4074,
        1,0,0,0,3992,3994,3,232,116,0,3993,3992,1,0,0,0,3993,3994,1,0,0,
        0,3994,3995,1,0,0,0,3995,3996,5,943,0,0,3996,3997,5,1213,0,0,3997,
        4004,3,162,81,0,3998,3999,5,1208,0,0,3999,4002,3,162,81,0,4000,4001,
        5,1208,0,0,4001,4003,3,162,81,0,4002,4000,1,0,0,0,4002,4003,1,0,
        0,0,4003,4005,1,0,0,0,4004,3998,1,0,0,0,4004,4005,1,0,0,0,4005,4006,
        1,0,0,0,4006,4007,5,1214,0,0,4007,4074,1,0,0,0,4008,4010,3,232,116,
        0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,4011,1,0,0,0,4011,4012,
        5,1087,0,0,4012,4013,5,1213,0,0,4013,4014,3,162,81,0,4014,4015,5,
        1208,0,0,4015,4016,3,162,81,0,4016,4017,5,1208,0,0,4017,4018,3,162,
        81,0,4018,4019,5,1214,0,0,4019,4020,5,352,0,0,4020,4021,5,1213,0,
        0,4021,4022,3,352,176,0,4022,4023,5,1208,0,0,4023,4024,3,352,176,
        0,4024,4025,5,1208,0,0,4025,4026,3,352,176,0,4026,4027,5,1214,0,
        0,4027,4074,1,0,0,0,4028,4029,5,402,0,0,4029,4030,5,1213,0,0,4030,
        4031,3,162,81,0,4031,4032,5,164,0,0,4032,4035,3,162,81,0,4033,4034,
        7,58,0,0,4034,4036,3,162,81,0,4035,4033,1,0,0,0,4035,4036,1,0,0,
        0,4036,4037,1,0,0,0,4037,4038,5,1214,0,0,4038,4074,1,0,0,0,4039,
        4040,7,59,0,0,4040,4041,5,1213,0,0,4041,4042,3,162,81,0,4042,4043,
        5,1208,0,0,4043,4046,3,162,81,0,4044,4045,7,58,0,0,4045,4047,3,162,
        81,0,4046,4044,1,0,0,0,4046,4047,1,0,0,0,4047,4048,1,0,0,0,4048,
        4049,5,1214,0,0,4049,4074,1,0,0,0,4050,4051,7,60,0,0,4051,4052,5,
        1213,0,0,4052,4053,3,162,81,0,4053,4054,5,457,0,0,4054,4057,3,240,
        120,0,4055,4056,5,474,0,0,4056,4058,5,137,0,0,4057,4055,1,0,0,0,
        4057,4058,1,0,0,0,4058,4059,1,0,0,0,4059,4060,5,1214,0,0,4060,4074,
        1,0,0,0,4061,4062,5,436,0,0,4062,4068,5,1213,0,0,4063,4065,7,61,
        0,0,4064,4066,3,162,81,0,4065,4064,1,0,0,0,4065,4066,1,0,0,0,4066,
        4067,1,0,0,0,4067,4069,5,164,0,0,4068,4063,1,0,0,0,4068,4069,1,0,
        0,0,4069,4070,1,0,0,0,4070,4071,3,162,81,0,4071,4072,5,1214,0,0,
        4072,4074,1,0,0,0,4073,3761,1,0,0,0,4073,3768,1,0,0,0,4073,3773,
        1,0,0,0,4073,3788,1,0,0,0,4073,3812,1,0,0,0,4073,3824,1,0,0,0,4073,
        3844,1,0,0,0,4073,3852,1,0,0,0,4073,3870,1,0,0,0,4073,3879,1,0,0,
        0,4073,3890,1,0,0,0,4073,3896,1,0,0,0,4073,3910,1,0,0,0,4073,3922,
        1,0,0,0,4073,3938,1,0,0,0,4073,3960,1,0,0,0,4073,3974,1,0,0,0,4073,
        3985,1,0,0,0,4073,3993,1,0,0,0,4073,4009,1,0,0,0,4073,4028,1,0,0,
        0,4073,4039,1,0,0,0,4073,4050,1,0,0,0,4073,4061,1,0,0,0,4074,223,
        1,0,0,0,4075,4077,3,232,116,0,4076,4075,1,0,0,0,4076,4077,1,0,0,
        0,4077,4078,1,0,0,0,4078,4079,5,1174,0,0,4079,4080,5,1213,0,0,4080,
        4081,3,162,81,0,4081,4083,5,1214,0,0,4082,4084,3,244,122,0,4083,
        4082,1,0,0,0,4083,4084,1,0,0,0,4084,4198,1,0,0,0,4085,4087,3,232,
        116,0,4086,4085,1,0,0,0,4086,4087,1,0,0,0,4087,4088,1,0,0,0,4088,
        4089,5,1175,0,0,4089,4090,5,1213,0,0,4090,4093,3,162,81,0,4091,4092,
        5,1208,0,0,4092,4094,3,370,185,0,4093,4091,1,0,0,0,4093,4094,1,0,
        0,0,4094,4095,1,0,0,0,4095,4096,5,1214,0,0,4096,4198,1,0,0,0,4097,
        4099,3,232,116,0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,4100,1,
        0,0,0,4100,4101,5,1075,0,0,4101,4102,5,1213,0,0,4102,4103,3,162,
        81,0,4103,4104,5,1214,0,0,4104,4198,1,0,0,0,4105,4107,3,232,116,
        0,4106,4105,1,0,0,0,4106,4107,1,0,0,0,4107,4108,1,0,0,0,4108,4109,
        5,1176,0,0,4109,4110,5,1213,0,0,4110,4113,3,162,81,0,4111,4112,5,
        1208,0,0,4112,4114,3,376,188,0,4113,4111,1,0,0,0,4113,4114,1,0,0,
        0,4114,4115,1,0,0,0,4115,4117,5,1214,0,0,4116,4118,3,244,122,0,4117,
        4116,1,0,0,0,4117,4118,1,0,0,0,4118,4198,1,0,0,0,4119,4121,3,232,
        116,0,4120,4119,1,0,0,0,4120,4121,1,0,0,0,4121,4122,1,0,0,0,4122,
        4123,5,1177,0,0,4123,4124,5,1213,0,0,4124,4125,3,162,81,0,4125,4126,
        5,1208,0,0,4126,4127,3,376,188,0,4127,4128,5,1214,0,0,4128,4198,
        1,0,0,0,4129,4131,3,232,116,0,4130,4129,1,0,0,0,4130,4131,1,0,0,
        0,4131,4132,1,0,0,0,4132,4133,5,1178,0,0,4133,4134,5,1213,0,0,4134,
        4135,3,162,81,0,4135,4136,5,1214,0,0,4136,4198,1,0,0,0,4137,4138,
        5,1179,0,0,4138,4139,5,1213,0,0,4139,4140,3,162,81,0,4140,4141,5,
        1208,0,0,4141,4142,3,162,81,0,4142,4143,5,20,0,0,4143,4144,3,446,
        223,0,4144,4145,5,1214,0,0,4145,4198,1,0,0,0,4146,4147,5,1180,0,
        0,4147,4148,5,1213,0,0,4148,4149,3,162,81,0,4149,4150,5,1214,0,0,
        4150,4198,1,0,0,0,4151,4153,3,232,116,0,4152,4151,1,0,0,0,4152,4153,
        1,0,0,0,4153,4154,1,0,0,0,4154,4155,5,1181,0,0,4155,4156,5,1213,
        0,0,4156,4165,3,162,81,0,4157,4158,5,1208,0,0,4158,4159,3,370,185,
        0,4159,4160,5,1208,0,0,4160,4163,3,370,185,0,4161,4162,5,1208,0,
        0,4162,4164,3,370,185,0,4163,4161,1,0,0,0,4163,4164,1,0,0,0,4164,
        4166,1,0,0,0,4165,4157,1,0,0,0,4165,4166,1,0,0,0,4166,4167,1,0,0,
        0,4167,4168,5,1214,0,0,4168,4198,1,0,0,0,4169,4170,5,721,0,0,4170,
        4171,5,1213,0,0,4171,4176,3,280,140,0,4172,4173,5,1208,0,0,4173,
        4175,3,280,140,0,4174,4172,1,0,0,0,4175,4178,1,0,0,0,4176,4174,1,
        0,0,0,4176,4177,1,0,0,0,4177,4179,1,0,0,0,4178,4176,1,0,0,0,4179,
        4181,5,1214,0,0,4180,4182,3,244,122,0,4181,4180,1,0,0,0,4181,4182,
        1,0,0,0,4182,4198,1,0,0,0,4183,4184,5,722,0,0,4184,4185,5,1213,0,
        0,4185,4190,3,280,140,0,4186,4187,5,1208,0,0,4187,4189,3,280,140,
        0,4188,4186,1,0,0,0,4189,4192,1,0,0,0,4190,4188,1,0,0,0,4190,4191,
        1,0,0,0,4191,4193,1,0,0,0,4192,4190,1,0,0,0,4193,4195,5,1214,0,0,
        4194,4196,3,244,122,0,4195,4194,1,0,0,0,4195,4196,1,0,0,0,4196,4198,
        1,0,0,0,4197,4076,1,0,0,0,4197,4086,1,0,0,0,4197,4098,1,0,0,0,4197,
        4106,1,0,0,0,4197,4120,1,0,0,0,4197,4130,1,0,0,0,4197,4137,1,0,0,
        0,4197,4146,1,0,0,0,4197,4152,1,0,0,0,4197,4169,1,0,0,0,4197,4183,
        1,0,0,0,4198,225,1,0,0,0,4199,4200,5,1068,0,0,4200,4201,5,1213,0,
        0,4201,4202,3,162,81,0,4202,4203,5,1214,0,0,4203,4447,1,0,0,0,4204,
        4206,3,232,116,0,4205,4204,1,0,0,0,4205,4206,1,0,0,0,4206,4207,1,
        0,0,0,4207,4208,5,1075,0,0,4208,4209,5,1213,0,0,4209,4210,3,162,
        81,0,4210,4211,5,1214,0,0,4211,4447,1,0,0,0,4212,4213,5,1054,0,0,
        4213,4214,5,1213,0,0,4214,4216,3,370,185,0,4215,4217,3,282,141,0,
        4216,4215,1,0,0,0,4216,4217,1,0,0,0,4217,4219,1,0,0,0,4218,4220,
        3,306,153,0,4219,4218,1,0,0,0,4219,4220,1,0,0,0,4220,4222,1,0,0,
        0,4221,4223,3,304,152,0,4222,4221,1,0,0,0,4222,4223,1,0,0,0,4223,
        4224,1,0,0,0,4224,4225,5,1214,0,0,4225,4447,1,0,0,0,4226,4227,5,
        1056,0,0,4227,4228,5,1213,0,0,4228,4229,7,62,0,0,4229,4232,3,162,
        81,0,4230,4231,5,20,0,0,4231,4233,3,446,223,0,4232,4230,1,0,0,0,
        4232,4233,1,0,0,0,4233,4235,1,0,0,0,4234,4236,3,302,151,0,4235,4234,
        1,0,0,0,4235,4236,1,0,0,0,4236,4242,1,0,0,0,4237,4239,5,474,0,0,
        4238,4240,5,268,0,0,4239,4238,1,0,0,0,4239,4240,1,0,0,0,4240,4241,
        1,0,0,0,4241,4243,5,554,0,0,4242,4237,1,0,0,0,4242,4243,1,0,0,0,
        4243,4246,1,0,0,0,4244,4245,5,1023,0,0,4245,4247,3,370,185,0,4246,
        4244,1,0,0,0,4246,4247,1,0,0,0,4247,4250,1,0,0,0,4248,4249,7,63,
        0,0,4249,4251,5,1047,0,0,4250,4248,1,0,0,0,4250,4251,1,0,0,0,4251,
        4258,1,0,0,0,4252,4253,5,268,0,0,4253,4259,5,704,0,0,4254,4255,5,
        704,0,0,4255,4256,5,927,0,0,4256,4257,5,1224,0,0,4257,4259,3,376,
        188,0,4258,4252,1,0,0,0,4258,4254,1,0,0,0,4258,4259,1,0,0,0,4259,
        4260,1,0,0,0,4260,4261,5,1214,0,0,4261,4447,1,0,0,0,4262,4263,5,
        1048,0,0,4263,4264,5,1213,0,0,4264,4266,3,162,81,0,4265,4267,3,306,
        153,0,4266,4265,1,0,0,0,4266,4267,1,0,0,0,4267,4268,1,0,0,0,4268,
        4269,5,1214,0,0,4269,4447,1,0,0,0,4270,4271,5,1049,0,0,4271,4272,
        5,1213,0,0,4272,4273,5,789,0,0,4273,4276,3,396,198,0,4274,4275,5,
        1208,0,0,4275,4277,3,294,147,0,4276,4274,1,0,0,0,4276,4277,1,0,0,
        0,4277,4280,1,0,0,0,4278,4279,5,1208,0,0,4279,4281,3,286,143,0,4280,
        4278,1,0,0,0,4280,4281,1,0,0,0,4281,4284,1,0,0,0,4282,4283,5,1208,
        0,0,4283,4285,3,292,146,0,4284,4282,1,0,0,0,4284,4285,1,0,0,0,4285,
        4287,1,0,0,0,4286,4288,3,306,153,0,4287,4286,1,0,0,0,4287,4288,1,
        0,0,0,4288,4289,1,0,0,0,4289,4290,5,1214,0,0,4290,4447,1,0,0,0,4291,
        4292,5,1050,0,0,4292,4294,5,1213,0,0,4293,4295,3,294,147,0,4294,
        4293,1,0,0,0,4294,4295,1,0,0,0,4295,4304,1,0,0,0,4296,4301,3,290,
        145,0,4297,4298,5,1208,0,0,4298,4300,3,290,145,0,4299,4297,1,0,0,
        0,4300,4303,1,0,0,0,4301,4299,1,0,0,0,4301,4302,1,0,0,0,4302,4305,
        1,0,0,0,4303,4301,1,0,0,0,4304,4296,1,0,0,0,4304,4305,1,0,0,0,4305,
        4307,1,0,0,0,4306,4308,3,308,154,0,4307,4306,1,0,0,0,4307,4308,1,
        0,0,0,4308,4310,1,0,0,0,4309,4311,3,306,153,0,4310,4309,1,0,0,0,
        4310,4311,1,0,0,0,4311,4312,1,0,0,0,4312,4447,5,1214,0,0,4313,4314,
        5,1046,0,0,4314,4315,5,1213,0,0,4315,4320,3,162,81,0,4316,4317,5,
        1208,0,0,4317,4319,3,162,81,0,4318,4316,1,0,0,0,4319,4322,1,0,0,
        0,4320,4318,1,0,0,0,4320,4321,1,0,0,0,4321,4324,1,0,0,0,4322,4320,
        1,0,0,0,4323,4325,3,306,153,0,4324,4323,1,0,0,0,4324,4325,1,0,0,
        0,4325,4326,1,0,0,0,4326,4327,5,1214,0,0,4327,4447,1,0,0,0,4328,
        4329,5,1045,0,0,4329,4330,5,1213,0,0,4330,4332,3,162,81,0,4331,4333,
        3,306,153,0,4332,4331,1,0,0,0,4332,4333,1,0,0,0,4333,4334,1,0,0,
        0,4334,4335,5,1214,0,0,4335,4447,1,0,0,0,4336,4337,5,1053,0,0,4337,
        4338,5,1213,0,0,4338,4339,5,789,0,0,4339,4342,3,396,198,0,4340,4341,
        5,1208,0,0,4341,4343,3,162,81,0,4342,4340,1,0,0,0,4342,4343,1,0,
        0,0,4343,4345,1,0,0,0,4344,4346,3,306,153,0,4345,4344,1,0,0,0,4345,
        4346,1,0,0,0,4346,4347,1,0,0,0,4347,4348,5,1214,0,0,4348,4447,1,
        0,0,0,4349,4350,5,1058,0,0,4350,4351,5,1213,0,0,4351,4353,3,162,
        81,0,4352,4354,3,306,153,0,4353,4352,1,0,0,0,4353,4354,1,0,0,0,4354,
        4355,1,0,0,0,4355,4356,5,1214,0,0,4356,4447,1,0,0,0,4357,4358,5,
        1052,0,0,4358,4359,5,1213,0,0,4359,4360,7,62,0,0,4360,4361,3,162,
        81,0,4361,4362,7,64,0,0,4362,4363,5,1037,0,0,4363,4364,5,1214,0,
        0,4364,4447,1,0,0,0,4365,4366,5,1060,0,0,4366,4367,5,1213,0,0,4367,
        4368,7,65,0,0,4368,4369,3,162,81,0,4369,4370,5,491,0,0,4370,4371,
        5,426,0,0,4371,4372,5,1055,0,0,4372,4373,5,459,0,0,4373,4378,3,162,
        81,0,4374,4375,5,790,0,0,4375,4379,3,370,185,0,4376,4377,5,268,0,
        0,4377,4379,5,790,0,0,4378,4374,1,0,0,0,4378,4376,1,0,0,0,4378,4379,
        1,0,0,0,4379,4382,1,0,0,0,4380,4381,5,646,0,0,4381,4383,3,162,81,
        0,4382,4380,1,0,0,0,4382,4383,1,0,0,0,4383,4384,1,0,0,0,4384,4385,
        5,1214,0,0,4385,4447,1,0,0,0,4386,4387,5,1043,0,0,4387,4388,5,1213,
        0,0,4388,4399,3,162,81,0,4389,4390,5,291,0,0,4390,4391,5,42,0,0,
        4391,4396,3,154,77,0,4392,4393,5,1208,0,0,4393,4395,3,154,77,0,4394,
        4392,1,0,0,0,4395,4398,1,0,0,0,4396,4394,1,0,0,0,4396,4397,1,0,0,
        0,4397,4400,1,0,0,0,4398,4396,1,0,0,0,4399,4389,1,0,0,0,4399,4400,
        1,0,0,0,4400,4402,1,0,0,0,4401,4403,3,306,153,0,4402,4401,1,0,0,
        0,4402,4403,1,0,0,0,4403,4404,1,0,0,0,4404,4405,5,1214,0,0,4405,
        4447,1,0,0,0,4406,4407,5,1103,0,0,4407,4408,5,1213,0,0,4408,4409,
        3,162,81,0,4409,4410,5,1208,0,0,4410,4411,3,162,81,0,4411,4412,5,
        1208,0,0,4412,4413,3,162,81,0,4413,4414,5,1208,0,0,4414,4419,3,162,
        81,0,4415,4416,5,1208,0,0,4416,4418,3,162,81,0,4417,4415,1,0,0,0,
        4418,4421,1,0,0,0,4419,4417,1,0,0,0,4419,4420,1,0,0,0,4420,4422,
        1,0,0,0,4421,4419,1,0,0,0,4422,4423,5,1214,0,0,4423,4447,1,0,0,0,
        4424,4425,3,234,117,0,4425,4426,5,1101,0,0,4426,4427,5,1213,0,0,
        4427,4428,3,162,81,0,4428,4429,5,1208,0,0,4429,4430,3,162,81,0,4430,
        4431,5,1208,0,0,4431,4432,3,162,81,0,4432,4433,5,1208,0,0,4433,4434,
        3,162,81,0,4434,4435,5,1214,0,0,4435,4447,1,0,0,0,4436,4437,3,234,
        117,0,4437,4438,5,1102,0,0,4438,4439,5,1213,0,0,4439,4440,3,162,
        81,0,4440,4441,5,1208,0,0,4441,4442,3,162,81,0,4442,4443,5,1208,
        0,0,4443,4444,3,162,81,0,4444,4445,5,1214,0,0,4445,4447,1,0,0,0,
        4446,4199,1,0,0,0,4446,4205,1,0,0,0,4446,4212,1,0,0,0,4446,4226,
        1,0,0,0,4446,4262,1,0,0,0,4446,4270,1,0,0,0,4446,4291,1,0,0,0,4446,
        4313,1,0,0,0,4446,4328,1,0,0,0,4446,4336,1,0,0,0,4446,4349,1,0,0,
        0,4446,4357,1,0,0,0,4446,4365,1,0,0,0,4446,4386,1,0,0,0,4446,4406,
        1,0,0,0,4446,4424,1,0,0,0,4446,4436,1,0,0,0,4447,227,1,0,0,0,4448,
        4449,3,408,204,0,4449,4450,5,1213,0,0,4450,4455,3,162,81,0,4451,
        4452,5,1208,0,0,4452,4454,3,162,81,0,4453,4451,1,0,0,0,4454,4457,
        1,0,0,0,4455,4453,1,0,0,0,4455,4456,1,0,0,0,4456,4458,1,0,0,0,4457,
        4455,1,0,0,0,4458,4461,5,1214,0,0,4459,4462,3,244,122,0,4460,4462,
        3,268,134,0,4461,4459,1,0,0,0,4461,4460,1,0,0,0,4461,4462,1,0,0,
        0,4462,4471,1,0,0,0,4463,4464,3,408,204,0,4464,4465,5,1213,0,0,4465,
        4468,5,1214,0,0,4466,4469,3,244,122,0,4467,4469,3,268,134,0,4468,
        4466,1,0,0,0,4468,4467,1,0,0,0,4468,4469,1,0,0,0,4469,4471,1,0,0,
        0,4470,4448,1,0,0,0,4470,4463,1,0,0,0,4471,229,1,0,0,0,4472,4473,
        5,48,0,0,4473,4474,5,1213,0,0,4474,4479,3,160,80,0,4475,4476,5,1208,
        0,0,4476,4478,3,160,80,0,4477,4475,1,0,0,0,4478,4481,1,0,0,0,4479,
        4477,1,0,0,0,4479,4480,1,0,0,0,4480,4484,1,0,0,0,4481,4479,1,0,0,
        0,4482,4483,5,1208,0,0,4483,4485,3,252,126,0,4484,4482,1,0,0,0,4484,
        4485,1,0,0,0,4485,4486,1,0,0,0,4486,4487,5,1214,0,0,4487,4500,1,
        0,0,0,4488,4489,5,320,0,0,4489,4490,5,1213,0,0,4490,4491,3,162,81,
        0,4491,4492,5,35,0,0,4492,4495,3,254,127,0,4493,4494,5,1208,0,0,
        4494,4496,3,264,132,0,4495,4493,1,0,0,0,4495,4496,1,0,0,0,4496,4497,
        1,0,0,0,4497,4498,5,1214,0,0,4498,4500,1,0,0,0,4499,4472,1,0,0,0,
        4499,4488,1,0,0,0,4500,231,1,0,0,0,4501,4502,5,1091,0,0,4502,4503,
        5,1209,0,0,4503,233,1,0,0,0,4504,4505,5,1092,0,0,4505,4506,5,1209,
        0,0,4506,235,1,0,0,0,4507,4508,5,1088,0,0,4508,4509,5,1209,0,0,4509,
        237,1,0,0,0,4510,4511,5,1090,0,0,4511,4512,5,1209,0,0,4512,239,1,
        0,0,0,4513,4514,7,66,0,0,4514,241,1,0,0,0,4515,4516,5,1213,0,0,4516,
        4521,3,246,123,0,4517,4518,5,1208,0,0,4518,4520,3,246,123,0,4519,
        4517,1,0,0,0,4520,4523,1,0,0,0,4521,4519,1,0,0,0,4521,4522,1,0,0,
        0,4522,4524,1,0,0,0,4523,4521,1,0,0,0,4524,4525,5,1214,0,0,4525,
        243,1,0,0,0,4526,4527,5,352,0,0,4527,4532,3,446,223,0,4528,4529,
        5,352,0,0,4529,4530,5,944,0,0,4530,4532,3,396,198,0,4531,4526,1,
        0,0,0,4531,4528,1,0,0,0,4532,245,1,0,0,0,4533,4538,3,250,125,0,4534,
        4538,3,490,245,0,4535,4538,3,486,243,0,4536,4538,3,488,244,0,4537,
        4533,1,0,0,0,4537,4534,1,0,0,0,4537,4535,1,0,0,0,4537,4536,1,0,0,
        0,4538,247,1,0,0,0,4539,4545,5,1213,0,0,4540,4541,3,250,125,0,4541,
        4542,5,1208,0,0,4542,4544,1,0,0,0,4543,4540,1,0,0,0,4544,4547,1,
        0,0,0,4545,4543,1,0,0,0,4545,4546,1,0,0,0,4546,4548,1,0,0,0,4547,
        4545,1,0,0,0,4548,4556,3,446,223,0,4549,4552,5,1208,0,0,4550,4553,
        3,250,125,0,4551,4553,3,486,243,0,4552,4550,1,0,0,0,4552,4551,1,
        0,0,0,4553,4555,1,0,0,0,4554,4549,1,0,0,0,4555,4558,1,0,0,0,4556,
        4554,1,0,0,0,4556,4557,1,0,0,0,4557,4559,1,0,0,0,4558,4556,1,0,0,
        0,4559,4560,5,1214,0,0,4560,249,1,0,0,0,4561,4565,3,492,246,0,4562,
        4565,3,496,248,0,4563,4565,3,494,247,0,4564,4561,1,0,0,0,4564,4562,
        1,0,0,0,4564,4563,1,0,0,0,4565,251,1,0,0,0,4566,4567,5,268,0,0,4567,
        4570,5,47,0,0,4568,4569,7,67,0,0,4569,4571,5,1016,0,0,4570,4568,
        1,0,0,0,4570,4571,1,0,0,0,4571,4574,1,0,0,0,4572,4574,5,1016,0,0,
        4573,4566,1,0,0,0,4573,4572,1,0,0,0,4574,253,1,0,0,0,4575,4579,3,
        258,129,0,4576,4579,3,260,130,0,4577,4579,3,256,128,0,4578,4575,
        1,0,0,0,4578,4576,1,0,0,0,4578,4577,1,0,0,0,4579,255,1,0,0,0,4580,
        4587,3,262,131,0,4581,4584,5,1219,0,0,4582,4583,5,16,0,0,4583,4585,
        3,162,81,0,4584,4582,1,0,0,0,4584,4585,1,0,0,0,4585,4587,1,0,0,0,
        4586,4580,1,0,0,0,4586,4581,1,0,0,0,4587,4592,1,0,0,0,4588,4589,
        5,1208,0,0,4589,4591,3,262,131,0,4590,4588,1,0,0,0,4591,4594,1,0,
        0,0,4592,4590,1,0,0,0,4592,4593,1,0,0,0,4593,4595,1,0,0,0,4594,4592,
        1,0,0,0,4595,4596,5,1208,0,0,4596,4597,3,258,129,0,4597,257,1,0,
        0,0,4598,4599,3,162,81,0,4599,4602,5,16,0,0,4600,4603,3,162,81,0,
        4601,4603,5,1219,0,0,4602,4600,1,0,0,0,4602,4601,1,0,0,0,4603,4606,
        1,0,0,0,4604,4605,5,129,0,0,4605,4607,3,162,81,0,4606,4604,1,0,0,
        0,4606,4607,1,0,0,0,4607,259,1,0,0,0,4608,4609,5,1219,0,0,4609,4612,
        5,16,0,0,4610,4613,3,162,81,0,4611,4613,5,1219,0,0,4612,4610,1,0,
        0,0,4612,4611,1,0,0,0,4613,261,1,0,0,0,4614,4615,3,162,81,0,4615,
        4616,5,16,0,0,4616,4617,3,162,81,0,4617,4620,1,0,0,0,4618,4619,5,
        129,0,0,4619,4621,3,162,81,0,4620,4618,1,0,0,0,4620,4621,1,0,0,0,
        4621,263,1,0,0,0,4622,4623,5,268,0,0,4623,4626,5,873,0,0,4624,4625,
        7,67,0,0,4625,4627,5,1016,0,0,4626,4624,1,0,0,0,4626,4627,1,0,0,
        0,4627,4630,1,0,0,0,4628,4630,5,1016,0,0,4629,4622,1,0,0,0,4629,
        4628,1,0,0,0,4630,265,1,0,0,0,4631,4640,3,162,81,0,4632,4633,5,236,
        0,0,4633,4634,5,1224,0,0,4634,4635,3,370,185,0,4635,4636,5,577,0,
        0,4636,4637,5,457,0,0,4637,4638,5,1224,0,0,4638,4639,3,370,185,0,
        4639,4641,1,0,0,0,4640,4632,1,0,0,0,4640,4641,1,0,0,0,4641,4651,
        1,0,0,0,4642,4643,3,162,81,0,4643,4644,5,236,0,0,4644,4645,5,1224,
        0,0,4645,4646,3,370,185,0,4646,4651,1,0,0,0,4647,4648,5,236,0,0,
        4648,4649,5,1224,0,0,4649,4651,3,370,185,0,4650,4631,1,0,0,0,4650,
        4642,1,0,0,0,4650,4647,1,0,0,0,4651,267,1,0,0,0,4652,4653,5,295,
        0,0,4653,4655,5,1213,0,0,4654,4656,3,274,137,0,4655,4654,1,0,0,0,
        4655,4656,1,0,0,0,4656,4658,1,0,0,0,4657,4659,3,276,138,0,4658,4657,
        1,0,0,0,4658,4659,1,0,0,0,4659,4661,1,0,0,0,4660,4662,3,278,139,
        0,4661,4660,1,0,0,0,4661,4662,1,0,0,0,4662,4663,1,0,0,0,4663,4664,
        5,1214,0,0,4664,269,1,0,0,0,4665,4666,5,295,0,0,4666,4668,5,1213,
        0,0,4667,4669,3,274,137,0,4668,4667,1,0,0,0,4668,4669,1,0,0,0,4669,
        4670,1,0,0,0,4670,4671,3,276,138,0,4671,4672,5,1214,0,0,4672,271,
        1,0,0,0,4673,4674,5,295,0,0,4674,4676,5,1213,0,0,4675,4677,3,274,
        137,0,4676,4675,1,0,0,0,4676,4677,1,0,0,0,4677,4678,1,0,0,0,4678,
        4680,3,276,138,0,4679,4681,3,314,157,0,4680,4679,1,0,0,0,4680,4681,
        1,0,0,0,4681,4682,1,0,0,0,4682,4683,5,1214,0,0,4683,273,1,0,0,0,
        4684,4685,5,840,0,0,4685,4686,5,42,0,0,4686,4691,3,162,81,0,4687,
        4688,5,1208,0,0,4688,4690,3,162,81,0,4689,4687,1,0,0,0,4690,4693,
        1,0,0,0,4691,4689,1,0,0,0,4691,4692,1,0,0,0,4692,275,1,0,0,0,4693,
        4691,1,0,0,0,4694,4695,5,291,0,0,4695,4696,5,42,0,0,4696,4701,3,
        154,77,0,4697,4698,5,1208,0,0,4698,4700,3,154,77,0,4699,4697,1,0,
        0,0,4700,4703,1,0,0,0,4701,4699,1,0,0,0,4701,4702,1,0,0,0,4702,4707,
        1,0,0,0,4703,4701,1,0,0,0,4704,4705,5,884,0,0,4705,4706,5,470,0,
        0,4706,4708,3,160,80,0,4707,4704,1,0,0,0,4707,4708,1,0,0,0,4708,
        277,1,0,0,0,4709,4794,5,364,0,0,4710,4711,5,1013,0,0,4711,4795,5,
        858,0,0,4712,4713,3,312,156,0,4713,4714,5,858,0,0,4714,4795,1,0,
        0,0,4715,4716,5,93,0,0,4716,4795,5,361,0,0,4717,4792,5,35,0,0,4718,
        4719,5,1013,0,0,4719,4720,5,858,0,0,4720,4721,5,16,0,0,4721,4722,
        5,1013,0,0,4722,4793,5,675,0,0,4723,4724,5,1013,0,0,4724,4725,5,
        858,0,0,4725,4726,5,16,0,0,4726,4727,3,312,156,0,4727,4728,5,858,
        0,0,4728,4793,1,0,0,0,4729,4730,5,1013,0,0,4730,4731,5,858,0,0,4731,
        4732,5,16,0,0,4732,4733,5,93,0,0,4733,4793,5,361,0,0,4734,4735,5,
        1013,0,0,4735,4736,5,858,0,0,4736,4737,5,16,0,0,4737,4738,3,312,
        156,0,4738,4739,5,675,0,0,4739,4793,1,0,0,0,4740,4741,3,312,156,
        0,4741,4742,5,858,0,0,4742,4743,5,16,0,0,4743,4744,5,1013,0,0,4744,
        4745,5,675,0,0,4745,4793,1,0,0,0,4746,4747,3,312,156,0,4747,4748,
        5,858,0,0,4748,4749,5,16,0,0,4749,4750,3,312,156,0,4750,4751,5,858,
        0,0,4751,4793,1,0,0,0,4752,4753,3,312,156,0,4753,4754,5,858,0,0,
        4754,4755,5,16,0,0,4755,4756,5,93,0,0,4756,4757,5,361,0,0,4757,4793,
        1,0,0,0,4758,4759,3,312,156,0,4759,4760,5,858,0,0,4760,4761,5,16,
        0,0,4761,4762,3,312,156,0,4762,4763,5,675,0,0,4763,4793,1,0,0,0,
        4764,4765,5,93,0,0,4765,4766,5,361,0,0,4766,4767,5,16,0,0,4767,4768,
        5,1013,0,0,4768,4793,5,675,0,0,4769,4770,5,93,0,0,4770,4771,5,361,
        0,0,4771,4772,5,16,0,0,4772,4773,5,93,0,0,4773,4793,5,361,0,0,4774,
        4775,5,93,0,0,4775,4776,5,361,0,0,4776,4777,5,16,0,0,4777,4778,3,
        312,156,0,4778,4779,5,675,0,0,4779,4793,1,0,0,0,4780,4781,3,312,
        156,0,4781,4782,5,675,0,0,4782,4783,5,16,0,0,4783,4784,5,1013,0,
        0,4784,4785,5,675,0,0,4785,4793,1,0,0,0,4786,4787,3,312,156,0,4787,
        4788,5,675,0,0,4788,4789,5,16,0,0,4789,4790,3,312,156,0,4790,4791,
        5,675,0,0,4791,4793,1,0,0,0,4792,4718,1,0,0,0,4792,4723,1,0,0,0,
        4792,4729,1,0,0,0,4792,4734,1,0,0,0,4792,4740,1,0,0,0,4792,4746,
        1,0,0,0,4792,4752,1,0,0,0,4792,4758,1,0,0,0,4792,4764,1,0,0,0,4792,
        4769,1,0,0,0,4792,4774,1,0,0,0,4792,4780,1,0,0,0,4792,4786,1,0,0,
        0,4793,4795,1,0,0,0,4794,4710,1,0,0,0,4794,4712,1,0,0,0,4794,4715,
        1,0,0,0,4794,4717,1,0,0,0,4795,279,1,0,0,0,4796,4801,3,162,81,0,
        4797,4798,5,1213,0,0,4798,4799,3,492,246,0,4799,4800,5,1214,0,0,
        4800,4802,1,0,0,0,4801,4797,1,0,0,0,4801,4802,1,0,0,0,4802,4805,
        1,0,0,0,4803,4804,5,20,0,0,4804,4806,3,420,210,0,4805,4803,1,0,0,
        0,4805,4806,1,0,0,0,4806,281,1,0,0,0,4807,4810,5,845,0,0,4808,4809,
        5,42,0,0,4809,4811,5,459,0,0,4810,4808,1,0,0,0,4810,4811,1,0,0,0,
        4811,4821,1,0,0,0,4812,4822,3,396,198,0,4813,4818,3,284,142,0,4814,
        4815,5,1208,0,0,4815,4817,3,284,142,0,4816,4814,1,0,0,0,4817,4820,
        1,0,0,0,4818,4816,1,0,0,0,4818,4819,1,0,0,0,4819,4822,1,0,0,0,4820,
        4818,1,0,0,0,4821,4812,1,0,0,0,4821,4813,1,0,0,0,4822,283,1,0,0,
        0,4823,4824,3,396,198,0,4824,4825,5,20,0,0,4825,4826,3,422,211,0,
        4826,285,1,0,0,0,4827,4828,5,1044,0,0,4828,4829,5,1213,0,0,4829,
        4834,3,288,144,0,4830,4831,5,1208,0,0,4831,4833,3,288,144,0,4832,
        4830,1,0,0,0,4833,4836,1,0,0,0,4834,4832,1,0,0,0,4834,4835,1,0,0,
        0,4835,4837,1,0,0,0,4836,4834,1,0,0,0,4837,4838,5,1214,0,0,4838,
        287,1,0,0,0,4839,4842,3,396,198,0,4840,4841,5,20,0,0,4841,4843,3,
        420,210,0,4842,4840,1,0,0,0,4842,4843,1,0,0,0,4843,289,1,0,0,0,4844,
        4847,3,396,198,0,4845,4846,5,20,0,0,4846,4848,3,420,210,0,4847,4845,
        1,0,0,0,4847,4848,1,0,0,0,4848,291,1,0,0,0,4849,4851,3,162,81,0,
        4850,4852,3,308,154,0,4851,4850,1,0,0,0,4851,4852,1,0,0,0,4852,293,
        1,0,0,0,4853,4854,5,1051,0,0,4854,4855,5,1213,0,0,4855,4860,3,296,
        148,0,4856,4857,5,1208,0,0,4857,4859,3,296,148,0,4858,4856,1,0,0,
        0,4859,4862,1,0,0,0,4860,4858,1,0,0,0,4860,4861,1,0,0,0,4861,4863,
        1,0,0,0,4862,4860,1,0,0,0,4863,4864,5,1214,0,0,4864,295,1,0,0,0,
        4865,4866,3,370,185,0,4866,4867,5,20,0,0,4867,4868,3,420,210,0,4868,
        4874,1,0,0,0,4869,4870,5,111,0,0,4870,4874,3,370,185,0,4871,4872,
        5,268,0,0,4872,4874,5,111,0,0,4873,4865,1,0,0,0,4873,4869,1,0,0,
        0,4873,4871,1,0,0,0,4874,297,1,0,0,0,4875,4881,5,579,0,0,4876,4877,
        3,396,198,0,4877,4878,5,159,0,0,4878,4879,5,829,0,0,4879,4882,1,
        0,0,0,4880,4882,3,300,150,0,4881,4876,1,0,0,0,4881,4880,1,0,0,0,
        4882,4893,1,0,0,0,4883,4889,5,1208,0,0,4884,4885,3,396,198,0,4885,
        4886,5,159,0,0,4886,4887,5,829,0,0,4887,4890,1,0,0,0,4888,4890,3,
        300,150,0,4889,4884,1,0,0,0,4889,4888,1,0,0,0,4890,4892,1,0,0,0,
        4891,4883,1,0,0,0,4892,4895,1,0,0,0,4893,4891,1,0,0,0,4893,4894,
        1,0,0,0,4894,299,1,0,0,0,4895,4893,1,0,0,0,4896,4897,3,400,200,0,
        4897,4900,3,446,223,0,4898,4899,5,1082,0,0,4899,4901,3,370,185,0,
        4900,4898,1,0,0,0,4900,4901,1,0,0,0,4901,4904,1,0,0,0,4902,4903,
        5,111,0,0,4903,4905,3,366,183,0,4904,4902,1,0,0,0,4904,4905,1,0,
        0,0,4905,301,1,0,0,0,4906,4907,5,653,0,0,4907,4908,3,370,185,0,4908,
        303,1,0,0,0,4909,4910,7,68,0,0,4910,4911,5,286,0,0,4911,4912,5,649,
        0,0,4912,305,1,0,0,0,4913,4914,5,889,0,0,4914,4915,7,69,0,0,4915,
        307,1,0,0,0,4916,4924,5,289,0,0,4917,4918,7,70,0,0,4918,4919,5,286,
        0,0,4919,4925,5,274,0,0,4920,4921,5,794,0,0,4921,4922,5,286,0,0,
        4922,4923,5,268,0,0,4923,4925,5,593,0,0,4924,4917,1,0,0,0,4924,4920,
        1,0,0,0,4925,309,1,0,0,0,4926,4927,7,71,0,0,4927,4928,5,806,0,0,
        4928,311,1,0,0,0,4929,4930,3,376,188,0,4930,313,1,0,0,0,4931,4932,
        5,474,0,0,4932,4933,5,986,0,0,4933,4934,7,72,0,0,4934,315,1,0,0,
        0,4935,4936,5,854,0,0,4936,4937,5,1213,0,0,4937,4938,3,318,159,0,
        4938,4940,5,1214,0,0,4939,4941,3,320,160,0,4940,4939,1,0,0,0,4940,
        4941,1,0,0,0,4941,4943,1,0,0,0,4942,4944,5,20,0,0,4943,4942,1,0,
        0,0,4943,4944,1,0,0,0,4944,4945,1,0,0,0,4945,4947,3,420,210,0,4946,
        4948,3,348,174,0,4947,4946,1,0,0,0,4947,4948,1,0,0,0,4948,317,1,
        0,0,0,4949,4954,3,322,161,0,4950,4951,5,1208,0,0,4951,4953,3,322,
        161,0,4952,4950,1,0,0,0,4953,4956,1,0,0,0,4954,4952,1,0,0,0,4954,
        4955,1,0,0,0,4955,4957,1,0,0,0,4956,4954,1,0,0,0,4957,4958,5,159,
        0,0,4958,4959,3,324,162,0,4959,319,1,0,0,0,4960,4961,5,474,0,0,4961,
        4966,3,326,163,0,4962,4963,5,1208,0,0,4963,4965,3,326,163,0,4964,
        4962,1,0,0,0,4965,4968,1,0,0,0,4966,4964,1,0,0,0,4966,4967,1,0,0,
        0,4967,321,1,0,0,0,4968,4966,1,0,0,0,4969,4974,3,186,93,0,4970,4972,
        5,20,0,0,4971,4970,1,0,0,0,4971,4972,1,0,0,0,4972,4973,1,0,0,0,4973,
        4975,3,420,210,0,4974,4971,1,0,0,0,4974,4975,1,0,0,0,4975,323,1,
        0,0,0,4976,4977,3,396,198,0,4977,4978,5,190,0,0,4978,4979,5,1213,
        0,0,4979,4984,3,328,164,0,4980,4981,5,1208,0,0,4981,4983,3,328,164,
        0,4982,4980,1,0,0,0,4983,4986,1,0,0,0,4984,4982,1,0,0,0,4984,4985,
        1,0,0,0,4985,4987,1,0,0,0,4986,4984,1,0,0,0,4987,4988,5,1214,0,0,
        4988,5020,1,0,0,0,4989,4990,3,348,174,0,4990,4991,5,190,0,0,4991,
        4992,5,1213,0,0,4992,4997,3,328,164,0,4993,4994,5,1208,0,0,4994,
        4996,3,328,164,0,4995,4993,1,0,0,0,4996,4999,1,0,0,0,4997,4995,1,
        0,0,0,4997,4998,1,0,0,0,4998,5000,1,0,0,0,4999,4997,1,0,0,0,5000,
        5001,5,1214,0,0,5001,5020,1,0,0,0,5002,5003,3,348,174,0,5003,5004,
        5,190,0,0,5004,5005,5,1213,0,0,5005,5010,3,330,165,0,5006,5007,5,
        1208,0,0,5007,5009,3,330,165,0,5008,5006,1,0,0,0,5009,5012,1,0,0,
        0,5010,5008,1,0,0,0,5010,5011,1,0,0,0,5011,5013,1,0,0,0,5012,5010,
        1,0,0,0,5013,5014,5,1214,0,0,5014,5020,1,0,0,0,5015,5016,3,396,198,
        0,5016,5017,5,190,0,0,5017,5018,3,350,175,0,5018,5020,1,0,0,0,5019,
        4976,1,0,0,0,5019,4989,1,0,0,0,5019,5002,1,0,0,0,5019,5015,1,0,0,
        0,5020,325,1,0,0,0,5021,5023,3,186,93,0,5022,5024,5,20,0,0,5023,
        5022,1,0,0,0,5023,5024,1,0,0,0,5024,5025,1,0,0,0,5025,5026,3,420,
        210,0,5026,327,1,0,0,0,5027,5032,3,162,81,0,5028,5030,5,20,0,0,5029,
        5028,1,0,0,0,5029,5030,1,0,0,0,5030,5031,1,0,0,0,5031,5033,3,420,
        210,0,5032,5029,1,0,0,0,5032,5033,1,0,0,0,5033,329,1,0,0,0,5034,
        5036,3,346,173,0,5035,5037,5,20,0,0,5036,5035,1,0,0,0,5036,5037,
        1,0,0,0,5037,5038,1,0,0,0,5038,5039,3,420,210,0,5039,331,1,0,0,0,
        5040,5043,5,1017,0,0,5041,5042,7,73,0,0,5042,5044,5,806,0,0,5043,
        5041,1,0,0,0,5043,5044,1,0,0,0,5044,5045,1,0,0,0,5045,5046,5,1213,
        0,0,5046,5047,3,334,167,0,5047,5049,5,1214,0,0,5048,5050,5,20,0,
        0,5049,5048,1,0,0,0,5049,5050,1,0,0,0,5050,5051,1,0,0,0,5051,5053,
        3,420,210,0,5052,5054,3,348,174,0,5053,5052,1,0,0,0,5053,5054,1,
        0,0,0,5054,333,1,0,0,0,5055,5056,3,396,198,0,5056,5057,5,159,0,0,
        5057,5058,3,396,198,0,5058,5059,5,190,0,0,5059,5060,5,1213,0,0,5060,
        5065,3,336,168,0,5061,5062,5,1208,0,0,5062,5064,3,336,168,0,5063,
        5061,1,0,0,0,5064,5067,1,0,0,0,5065,5063,1,0,0,0,5065,5066,1,0,0,
        0,5066,5068,1,0,0,0,5067,5065,1,0,0,0,5068,5069,5,1214,0,0,5069,
        5086,1,0,0,0,5070,5071,3,348,174,0,5071,5072,5,159,0,0,5072,5073,
        3,396,198,0,5073,5074,5,190,0,0,5074,5075,5,1213,0,0,5075,5080,3,
        338,169,0,5076,5077,5,1208,0,0,5077,5079,3,338,169,0,5078,5076,1,
        0,0,0,5079,5082,1,0,0,0,5080,5078,1,0,0,0,5080,5081,1,0,0,0,5081,
        5083,1,0,0,0,5082,5080,1,0,0,0,5083,5084,5,1214,0,0,5084,5086,1,
        0,0,0,5085,5055,1,0,0,0,5085,5070,1,0,0,0,5086,335,1,0,0,0,5087,
        5092,3,396,198,0,5088,5090,5,20,0,0,5089,5088,1,0,0,0,5089,5090,
        1,0,0,0,5090,5091,1,0,0,0,5091,5093,3,366,183,0,5092,5089,1,0,0,
        0,5092,5093,1,0,0,0,5093,337,1,0,0,0,5094,5099,3,348,174,0,5095,
        5097,5,20,0,0,5096,5095,1,0,0,0,5096,5097,1,0,0,0,5097,5098,1,0,
        0,0,5098,5100,3,366,183,0,5099,5096,1,0,0,0,5099,5100,1,0,0,0,5100,
        339,1,0,0,0,5101,5108,5,24,0,0,5102,5109,5,224,0,0,5103,5104,5,421,
        0,0,5104,5106,5,480,0,0,5105,5103,1,0,0,0,5105,5106,1,0,0,0,5106,
        5107,1,0,0,0,5107,5109,3,162,81,0,5108,5102,1,0,0,0,5108,5105,1,
        0,0,0,5109,341,1,0,0,0,5110,5113,3,350,175,0,5111,5113,3,344,172,
        0,5112,5110,1,0,0,0,5112,5111,1,0,0,0,5113,343,1,0,0,0,5114,5115,
        5,1213,0,0,5115,5120,3,162,81,0,5116,5117,7,67,0,0,5117,5119,3,162,
        81,0,5118,5116,1,0,0,0,5119,5122,1,0,0,0,5120,5118,1,0,0,0,5120,
        5121,1,0,0,0,5121,5123,1,0,0,0,5122,5120,1,0,0,0,5123,5124,5,1214,
        0,0,5124,345,1,0,0,0,5125,5126,5,1213,0,0,5126,5131,3,162,81,0,5127,
        5128,5,1208,0,0,5128,5130,3,162,81,0,5129,5127,1,0,0,0,5130,5133,
        1,0,0,0,5131,5129,1,0,0,0,5131,5132,1,0,0,0,5132,5134,1,0,0,0,5133,
        5131,1,0,0,0,5134,5135,5,1214,0,0,5135,347,1,0,0,0,5136,5137,5,1213,
        0,0,5137,5142,3,396,198,0,5138,5139,5,1208,0,0,5139,5141,3,396,198,
        0,5140,5138,1,0,0,0,5141,5144,1,0,0,0,5142,5140,1,0,0,0,5142,5143,
        1,0,0,0,5143,5145,1,0,0,0,5144,5142,1,0,0,0,5145,5146,5,1214,0,0,
        5146,349,1,0,0,0,5147,5149,5,1213,0,0,5148,5150,3,520,260,0,5149,
        5148,1,0,0,0,5149,5150,1,0,0,0,5150,5151,1,0,0,0,5151,5152,3,0,0,
        0,5152,5153,5,1214,0,0,5153,351,1,0,0,0,5154,5155,3,400,200,0,5155,
        5156,3,446,223,0,5156,353,1,0,0,0,5157,5158,5,1207,0,0,5158,5159,
        3,422,211,0,5159,355,1,0,0,0,5160,5161,3,354,177,0,5161,5162,5,1209,
        0,0,5162,5163,3,400,200,0,5163,357,1,0,0,0,5164,5165,7,74,0,0,5165,
        5166,3,424,212,0,5166,359,1,0,0,0,5167,5168,3,376,188,0,5168,5169,
        5,1208,0,0,5169,5170,3,376,188,0,5170,361,1,0,0,0,5171,5189,5,1224,
        0,0,5172,5189,5,135,0,0,5173,5189,5,1225,0,0,5174,5189,5,1226,0,
        0,5175,5189,5,264,0,0,5176,5177,5,272,0,0,5177,5189,5,1224,0,0,5178,
        5179,5,1227,0,0,5179,5189,5,1229,0,0,5180,5189,5,1227,0,0,5181,5189,
        5,234,0,0,5182,5189,5,1228,0,0,5183,5189,5,216,0,0,5184,5189,5,1229,
        0,0,5185,5189,5,176,0,0,5186,5189,5,1230,0,0,5187,5189,5,168,0,0,
        5188,5171,1,0,0,0,5188,5172,1,0,0,0,5188,5173,1,0,0,0,5188,5174,
        1,0,0,0,5188,5175,1,0,0,0,5188,5176,1,0,0,0,5188,5178,1,0,0,0,5188,
        5180,1,0,0,0,5188,5181,1,0,0,0,5188,5182,1,0,0,0,5188,5183,1,0,0,
        0,5188,5184,1,0,0,0,5188,5185,1,0,0,0,5188,5186,1,0,0,0,5188,5187,
        1,0,0,0,5189,363,1,0,0,0,5190,5191,7,75,0,0,5191,365,1,0,0,0,5192,
        5206,3,368,184,0,5193,5206,3,370,185,0,5194,5206,3,372,186,0,5195,
        5206,3,374,187,0,5196,5206,3,376,188,0,5197,5206,3,378,189,0,5198,
        5206,3,380,190,0,5199,5206,3,384,192,0,5200,5206,3,386,193,0,5201,
        5206,3,388,194,0,5202,5206,3,390,195,0,5203,5206,3,394,197,0,5204,
        5206,5,274,0,0,5205,5192,1,0,0,0,5205,5193,1,0,0,0,5205,5194,1,0,
        0,0,5205,5195,1,0,0,0,5205,5196,1,0,0,0,5205,5197,1,0,0,0,5205,5198,
        1,0,0,0,5205,5199,1,0,0,0,5205,5200,1,0,0,0,5205,5201,1,0,0,0,5205,
        5202,1,0,0,0,5205,5203,1,0,0,0,5205,5204,1,0,0,0,5206,367,1,0,0,
        0,5207,5208,5,1195,0,0,5208,369,1,0,0,0,5209,5211,3,382,191,0,5210,
        5209,1,0,0,0,5210,5211,1,0,0,0,5211,5213,1,0,0,0,5212,5214,5,1203,
        0,0,5213,5212,1,0,0,0,5214,5215,1,0,0,0,5215,5213,1,0,0,0,5215,5216,
        1,0,0,0,5216,371,1,0,0,0,5217,5219,3,382,191,0,5218,5217,1,0,0,0,
        5218,5219,1,0,0,0,5219,5220,1,0,0,0,5220,5224,5,1202,0,0,5221,5223,
        5,1203,0,0,5222,5221,1,0,0,0,5223,5226,1,0,0,0,5224,5222,1,0,0,0,
        5224,5225,1,0,0,0,5225,5227,1,0,0,0,5226,5224,1,0,0,0,5227,5228,
        5,444,0,0,5228,5229,5,1203,0,0,5229,373,1,0,0,0,5230,5232,3,382,
        191,0,5231,5230,1,0,0,0,5231,5232,1,0,0,0,5232,5233,1,0,0,0,5233,
        5234,5,1204,0,0,5234,375,1,0,0,0,5235,5236,5,1194,0,0,5236,377,1,
        0,0,0,5237,5238,5,1196,0,0,5238,379,1,0,0,0,5239,5240,5,1197,0,0,
        5240,381,1,0,0,0,5241,5242,7,76,0,0,5242,383,1,0,0,0,5243,5245,5,
        104,0,0,5244,5243,1,0,0,0,5244,5245,1,0,0,0,5245,5246,1,0,0,0,5246,
        5247,5,1198,0,0,5247,385,1,0,0,0,5248,5250,5,421,0,0,5249,5248,1,
        0,0,0,5249,5250,1,0,0,0,5250,5251,1,0,0,0,5251,5252,5,1199,0,0,5252,
        387,1,0,0,0,5253,5255,5,422,0,0,5254,5253,1,0,0,0,5254,5255,1,0,
        0,0,5255,5256,1,0,0,0,5256,5257,5,1200,0,0,5257,389,1,0,0,0,5258,
        5260,5,205,0,0,5259,5261,5,1222,0,0,5260,5259,1,0,0,0,5260,5261,
        1,0,0,0,5261,5262,1,0,0,0,5262,5263,7,77,0,0,5263,5264,3,392,196,
        0,5264,391,1,0,0,0,5265,5293,5,478,0,0,5266,5267,5,478,0,0,5267,
        5268,5,426,0,0,5268,5293,5,258,0,0,5269,5293,5,258,0,0,5270,5293,
        5,106,0,0,5271,5272,5,106,0,0,5272,5273,5,426,0,0,5273,5293,5,185,
        0,0,5274,5275,5,106,0,0,5275,5276,5,426,0,0,5276,5293,5,248,0,0,
        5277,5278,5,106,0,0,5278,5279,5,426,0,0,5279,5293,5,368,0,0,5280,
        5293,5,185,0,0,5281,5282,5,185,0,0,5282,5283,5,426,0,0,5283,5293,
        5,248,0,0,5284,5285,5,185,0,0,5285,5286,5,426,0,0,5286,5293,5,368,
        0,0,5287,5293,5,248,0,0,5288,5289,5,248,0,0,5289,5290,5,426,0,0,
        5290,5293,5,368,0,0,5291,5293,5,368,0,0,5292,5265,1,0,0,0,5292,5266,
        1,0,0,0,5292,5269,1,0,0,0,5292,5270,1,0,0,0,5292,5271,1,0,0,0,5292,
        5274,1,0,0,0,5292,5277,1,0,0,0,5292,5280,1,0,0,0,5292,5281,1,0,0,
        0,5292,5284,1,0,0,0,5292,5287,1,0,0,0,5292,5288,1,0,0,0,5292,5291,
        1,0,0,0,5293,393,1,0,0,0,5294,5295,5,853,0,0,5295,5296,5,1201,0,
        0,5296,395,1,0,0,0,5297,5298,3,412,206,0,5298,5299,5,1209,0,0,5299,
        5300,3,400,200,0,5300,5301,5,1209,0,0,5301,5302,3,398,199,0,5302,
        5309,1,0,0,0,5303,5304,3,400,200,0,5304,5305,5,1209,0,0,5305,5306,
        3,398,199,0,5306,5309,1,0,0,0,5307,5309,3,398,199,0,5308,5297,1,
        0,0,0,5308,5303,1,0,0,0,5308,5307,1,0,0,0,5309,397,1,0,0,0,5310,
        5315,5,1193,0,0,5311,5315,3,444,222,0,5312,5315,5,366,0,0,5313,5315,
        5,363,0,0,5314,5310,1,0,0,0,5314,5311,1,0,0,0,5314,5312,1,0,0,0,
        5314,5313,1,0,0,0,5315,399,1,0,0,0,5316,5319,5,1193,0,0,5317,5319,
        3,444,222,0,5318,5316,1,0,0,0,5318,5317,1,0,0,0,5319,401,1,0,0,0,
        5320,5321,3,412,206,0,5321,5322,5,1209,0,0,5322,5324,1,0,0,0,5323,
        5320,1,0,0,0,5323,5324,1,0,0,0,5324,5327,1,0,0,0,5325,5328,5,1193,
        0,0,5326,5328,3,444,222,0,5327,5325,1,0,0,0,5327,5326,1,0,0,0,5328,
        403,1,0,0,0,5329,5330,3,412,206,0,5330,5331,5,1209,0,0,5331,5333,
        1,0,0,0,5332,5329,1,0,0,0,5332,5333,1,0,0,0,5333,5336,1,0,0,0,5334,
        5337,5,1193,0,0,5335,5337,3,444,222,0,5336,5334,1,0,0,0,5336,5335,
        1,0,0,0,5337,405,1,0,0,0,5338,5339,3,412,206,0,5339,5340,5,1209,
        0,0,5340,5342,1,0,0,0,5341,5338,1,0,0,0,5341,5342,1,0,0,0,5342,5345,
        1,0,0,0,5343,5346,5,1193,0,0,5344,5346,3,444,222,0,5345,5343,1,0,
        0,0,5345,5344,1,0,0,0,5346,407,1,0,0,0,5347,5348,3,412,206,0,5348,
        5349,5,1209,0,0,5349,5351,1,0,0,0,5350,5347,1,0,0,0,5350,5351,1,
        0,0,0,5351,5354,1,0,0,0,5352,5355,5,1193,0,0,5353,5355,3,444,222,
        0,5354,5352,1,0,0,0,5354,5353,1,0,0,0,5355,409,1,0,0,0,5356,5357,
        3,412,206,0,5357,5358,5,1209,0,0,5358,5360,1,0,0,0,5359,5356,1,0,
        0,0,5359,5360,1,0,0,0,5360,5363,1,0,0,0,5361,5364,5,1193,0,0,5362,
        5364,3,444,222,0,5363,5361,1,0,0,0,5363,5362,1,0,0,0,5364,411,1,
        0,0,0,5365,5368,5,1193,0,0,5366,5368,3,444,222,0,5367,5365,1,0,0,
        0,5367,5366,1,0,0,0,5368,413,1,0,0,0,5369,5372,5,1193,0,0,5370,5372,
        3,444,222,0,5371,5369,1,0,0,0,5371,5370,1,0,0,0,5372,415,1,0,0,0,
        5373,5377,5,1193,0,0,5374,5377,5,10,0,0,5375,5377,3,444,222,0,5376,
        5373,1,0,0,0,5376,5374,1,0,0,0,5376,5375,1,0,0,0,5377,417,1,0,0,
        0,5378,5381,5,1193,0,0,5379,5381,3,444,222,0,5380,5378,1,0,0,0,5380,
        5379,1,0,0,0,5381,419,1,0,0,0,5382,5385,5,1193,0,0,5383,5385,3,444,
        222,0,5384,5382,1,0,0,0,5384,5383,1,0,0,0,5385,421,1,0,0,0,5386,
        5389,5,1193,0,0,5387,5389,3,444,222,0,5388,5386,1,0,0,0,5388,5387,
        1,0,0,0,5389,423,1,0,0,0,5390,5393,5,1193,0,0,5391,5393,3,444,222,
        0,5392,5390,1,0,0,0,5392,5391,1,0,0,0,5393,425,1,0,0,0,5394,5397,
        5,1193,0,0,5395,5397,3,444,222,0,5396,5394,1,0,0,0,5396,5395,1,0,
        0,0,5397,427,1,0,0,0,5398,5401,5,1193,0,0,5399,5401,3,444,222,0,
        5400,5398,1,0,0,0,5400,5399,1,0,0,0,5401,429,1,0,0,0,5402,5405,5,
        1193,0,0,5403,5405,3,444,222,0,5404,5402,1,0,0,0,5404,5403,1,0,0,
        0,5405,431,1,0,0,0,5406,5409,5,1193,0,0,5407,5409,3,444,222,0,5408,
        5406,1,0,0,0,5408,5407,1,0,0,0,5409,433,1,0,0,0,5410,5413,5,1193,
        0,0,5411,5413,3,444,222,0,5412,5410,1,0,0,0,5412,5411,1,0,0,0,5413,
        435,1,0,0,0,5414,5417,5,1193,0,0,5415,5417,3,444,222,0,5416,5414,
        1,0,0,0,5416,5415,1,0,0,0,5417,437,1,0,0,0,5418,5421,5,1193,0,0,
        5419,5421,3,444,222,0,5420,5418,1,0,0,0,5420,5419,1,0,0,0,5421,439,
        1,0,0,0,5422,5425,5,1193,0,0,5423,5425,3,444,222,0,5424,5422,1,0,
        0,0,5424,5423,1,0,0,0,5425,441,1,0,0,0,5426,5427,7,78,0,0,5427,443,
        1,0,0,0,5428,5429,7,79,0,0,5429,445,1,0,0,0,5430,5437,3,452,226,
        0,5431,5437,3,454,227,0,5432,5437,3,460,230,0,5433,5437,3,462,231,
        0,5434,5437,3,464,232,0,5435,5437,3,466,233,0,5436,5430,1,0,0,0,
        5436,5431,1,0,0,0,5436,5432,1,0,0,0,5436,5433,1,0,0,0,5436,5434,
        1,0,0,0,5436,5435,1,0,0,0,5437,447,1,0,0,0,5438,5446,3,452,226,0,
        5439,5446,3,454,227,0,5440,5446,3,456,228,0,5441,5446,3,460,230,
        0,5442,5446,3,462,231,0,5443,5446,3,464,232,0,5444,5446,3,466,233,
        0,5445,5438,1,0,0,0,5445,5439,1,0,0,0,5445,5440,1,0,0,0,5445,5441,
        1,0,0,0,5445,5442,1,0,0,0,5445,5443,1,0,0,0,5445,5444,1,0,0,0,5446,
        449,1,0,0,0,5447,5458,3,452,226,0,5448,5458,3,454,227,0,5449,5458,
        3,456,228,0,5450,5458,3,458,229,0,5451,5458,3,460,230,0,5452,5458,
        3,462,231,0,5453,5458,3,464,232,0,5454,5458,3,466,233,0,5455,5458,
        5,410,0,0,5456,5458,5,466,0,0,5457,5447,1,0,0,0,5457,5448,1,0,0,
        0,5457,5449,1,0,0,0,5457,5450,1,0,0,0,5457,5451,1,0,0,0,5457,5452,
        1,0,0,0,5457,5453,1,0,0,0,5457,5454,1,0,0,0,5457,5455,1,0,0,0,5457,
        5456,1,0,0,0,5458,451,1,0,0,0,5459,5502,5,44,0,0,5460,5502,5,381,
        0,0,5461,5502,5,202,0,0,5462,5502,5,201,0,0,5463,5502,5,36,0,0,5464,
        5474,7,80,0,0,5465,5467,5,1213,0,0,5466,5468,3,376,188,0,5467,5466,
        1,0,0,0,5467,5468,1,0,0,0,5468,5471,1,0,0,0,5469,5470,5,1208,0,0,
        5470,5472,3,376,188,0,5471,5469,1,0,0,0,5471,5472,1,0,0,0,5472,5473,
        1,0,0,0,5473,5475,5,1214,0,0,5474,5465,1,0,0,0,5474,5475,1,0,0,0,
        5475,5502,1,0,0,0,5476,5481,5,157,0,0,5477,5478,5,1213,0,0,5478,
        5479,3,376,188,0,5479,5480,5,1214,0,0,5480,5482,1,0,0,0,5481,5477,
        1,0,0,0,5481,5482,1,0,0,0,5482,5487,1,0,0,0,5483,5487,5,323,0,0,
        5484,5485,5,124,0,0,5485,5487,5,305,0,0,5486,5476,1,0,0,0,5486,5483,
        1,0,0,0,5486,5484,1,0,0,0,5487,5502,1,0,0,0,5488,5499,5,277,0,0,
        5489,5492,5,1213,0,0,5490,5493,3,376,188,0,5491,5493,5,1219,0,0,
        5492,5490,1,0,0,0,5492,5491,1,0,0,0,5493,5496,1,0,0,0,5494,5495,
        5,1208,0,0,5495,5497,3,376,188,0,5496,5494,1,0,0,0,5496,5497,1,0,
        0,0,5497,5498,1,0,0,0,5498,5500,5,1214,0,0,5499,5489,1,0,0,0,5499,
        5500,1,0,0,0,5500,5502,1,0,0,0,5501,5459,1,0,0,0,5501,5460,1,0,0,
        0,5501,5461,1,0,0,0,5501,5462,1,0,0,0,5501,5463,1,0,0,0,5501,5464,
        1,0,0,0,5501,5486,1,0,0,0,5501,5488,1,0,0,0,5502,453,1,0,0,0,5503,
        5505,7,81,0,0,5504,5506,3,480,240,0,5505,5504,1,0,0,0,5505,5506,
        1,0,0,0,5506,5508,1,0,0,0,5507,5509,3,486,243,0,5508,5507,1,0,0,
        0,5508,5509,1,0,0,0,5509,5544,1,0,0,0,5510,5512,5,173,0,0,5511,5513,
        3,480,240,0,5512,5511,1,0,0,0,5512,5513,1,0,0,0,5513,5544,1,0,0,
        0,5514,5520,5,464,0,0,5515,5516,5,55,0,0,5516,5520,5,467,0,0,5517,
        5518,5,52,0,0,5518,5520,5,467,0,0,5519,5514,1,0,0,0,5519,5515,1,
        0,0,0,5519,5517,1,0,0,0,5520,5521,1,0,0,0,5521,5523,3,480,240,0,
        5522,5524,3,486,243,0,5523,5522,1,0,0,0,5523,5524,1,0,0,0,5524,5544,
        1,0,0,0,5525,5526,5,231,0,0,5526,5544,5,464,0,0,5527,5528,5,465,
        0,0,5528,5544,3,480,240,0,5529,5530,5,231,0,0,5530,5544,5,465,0,
        0,5531,5536,5,62,0,0,5532,5533,5,55,0,0,5533,5534,5,215,0,0,5534,
        5536,5,279,0,0,5535,5531,1,0,0,0,5535,5532,1,0,0,0,5536,5538,1,0,
        0,0,5537,5539,3,482,241,0,5538,5537,1,0,0,0,5538,5539,1,0,0,0,5539,
        5541,1,0,0,0,5540,5542,3,498,249,0,5541,5540,1,0,0,0,5541,5542,1,
        0,0,0,5542,5544,1,0,0,0,5543,5503,1,0,0,0,5543,5510,1,0,0,0,5543,
        5519,1,0,0,0,5543,5525,1,0,0,0,5543,5527,1,0,0,0,5543,5529,1,0,0,
        0,5543,5535,1,0,0,0,5544,455,1,0,0,0,5545,5547,5,464,0,0,5546,5548,
        3,486,243,0,5547,5546,1,0,0,0,5547,5548,1,0,0,0,5548,5554,1,0,0,
        0,5549,5551,5,465,0,0,5550,5552,3,486,243,0,5551,5550,1,0,0,0,5551,
        5552,1,0,0,0,5552,5554,1,0,0,0,5553,5545,1,0,0,0,5553,5549,1,0,0,
        0,5554,457,1,0,0,0,5555,5560,5,62,0,0,5556,5557,5,55,0,0,5557,5558,
        5,215,0,0,5558,5560,5,279,0,0,5559,5555,1,0,0,0,5559,5556,1,0,0,
        0,5560,5561,1,0,0,0,5561,5562,5,20,0,0,5562,5572,5,225,0,0,5563,
        5568,5,38,0,0,5564,5565,5,37,0,0,5565,5566,5,215,0,0,5566,5568,5,
        279,0,0,5567,5563,1,0,0,0,5567,5564,1,0,0,0,5568,5569,1,0,0,0,5569,
        5570,5,20,0,0,5570,5572,5,225,0,0,5571,5559,1,0,0,0,5571,5567,1,
        0,0,0,5572,459,1,0,0,0,5573,5575,5,43,0,0,5574,5576,3,480,240,0,
        5575,5574,1,0,0,0,5575,5576,1,0,0,0,5576,5589,1,0,0,0,5577,5578,
        5,463,0,0,5578,5589,3,480,240,0,5579,5584,5,38,0,0,5580,5581,5,37,
        0,0,5581,5582,5,215,0,0,5582,5584,5,279,0,0,5583,5579,1,0,0,0,5583,
        5580,1,0,0,0,5584,5586,1,0,0,0,5585,5587,3,482,241,0,5586,5585,1,
        0,0,0,5586,5587,1,0,0,0,5587,5589,1,0,0,0,5588,5573,1,0,0,0,5588,
        5577,1,0,0,0,5588,5583,1,0,0,0,5589,461,1,0,0,0,5590,5608,5,104,
        0,0,5591,5593,5,421,0,0,5592,5594,3,480,240,0,5593,5592,1,0,0,0,
        5593,5594,1,0,0,0,5594,5596,1,0,0,0,5595,5597,3,510,255,0,5596,5595,
        1,0,0,0,5596,5597,1,0,0,0,5597,5608,1,0,0,0,5598,5600,5,422,0,0,
        5599,5601,3,480,240,0,5600,5599,1,0,0,0,5600,5601,1,0,0,0,5601,5603,
        1,0,0,0,5602,5604,3,510,255,0,5603,5602,1,0,0,0,5603,5604,1,0,0,
        0,5604,5608,1,0,0,0,5605,5606,5,205,0,0,5606,5608,3,478,239,0,5607,
        5590,1,0,0,0,5607,5591,1,0,0,0,5607,5598,1,0,0,0,5607,5605,1,0,0,
        0,5608,463,1,0,0,0,5609,5610,5,853,0,0,5610,5611,5,1213,0,0,5611,
        5612,5,104,0,0,5612,5634,5,1214,0,0,5613,5614,5,853,0,0,5614,5615,
        5,1213,0,0,5615,5617,5,421,0,0,5616,5618,3,480,240,0,5617,5616,1,
        0,0,0,5617,5618,1,0,0,0,5618,5620,1,0,0,0,5619,5621,3,510,255,0,
        5620,5619,1,0,0,0,5620,5621,1,0,0,0,5621,5622,1,0,0,0,5622,5634,
        5,1214,0,0,5623,5624,5,853,0,0,5624,5625,5,1213,0,0,5625,5627,5,
        422,0,0,5626,5628,3,480,240,0,5627,5626,1,0,0,0,5627,5628,1,0,0,
        0,5628,5630,1,0,0,0,5629,5631,3,510,255,0,5630,5629,1,0,0,0,5630,
        5631,1,0,0,0,5631,5632,1,0,0,0,5632,5634,5,1214,0,0,5633,5609,1,
        0,0,0,5633,5613,1,0,0,0,5633,5623,1,0,0,0,5634,465,1,0,0,0,5635,
        5637,3,476,238,0,5636,5635,1,0,0,0,5636,5637,1,0,0,0,5637,5638,1,
        0,0,0,5638,5640,7,82,0,0,5639,5641,3,482,241,0,5640,5639,1,0,0,0,
        5640,5641,1,0,0,0,5641,5643,1,0,0,0,5642,5644,3,500,250,0,5643,5642,
        1,0,0,0,5643,5644,1,0,0,0,5644,5685,1,0,0,0,5645,5647,3,476,238,
        0,5646,5645,1,0,0,0,5646,5647,1,0,0,0,5647,5648,1,0,0,0,5648,5650,
        5,720,0,0,5649,5651,3,484,242,0,5650,5649,1,0,0,0,5650,5651,1,0,
        0,0,5651,5653,1,0,0,0,5652,5654,3,500,250,0,5653,5652,1,0,0,0,5653,
        5654,1,0,0,0,5654,5657,1,0,0,0,5655,5658,3,498,249,0,5656,5658,3,
        502,251,0,5657,5655,1,0,0,0,5657,5656,1,0,0,0,5657,5658,1,0,0,0,
        5658,5685,1,0,0,0,5659,5661,3,476,238,0,5660,5659,1,0,0,0,5660,5661,
        1,0,0,0,5661,5662,1,0,0,0,5662,5664,5,936,0,0,5663,5665,3,484,242,
        0,5664,5663,1,0,0,0,5664,5665,1,0,0,0,5665,5667,1,0,0,0,5666,5668,
        3,500,250,0,5667,5666,1,0,0,0,5667,5668,1,0,0,0,5668,5685,1,0,0,
        0,5669,5671,3,476,238,0,5670,5669,1,0,0,0,5670,5671,1,0,0,0,5671,
        5672,1,0,0,0,5672,5674,5,607,0,0,5673,5675,3,484,242,0,5674,5673,
        1,0,0,0,5674,5675,1,0,0,0,5675,5677,1,0,0,0,5676,5678,3,500,250,
        0,5677,5676,1,0,0,0,5677,5678,1,0,0,0,5678,5679,1,0,0,0,5679,5685,
        3,504,252,0,5680,5682,3,476,238,0,5681,5680,1,0,0,0,5681,5682,1,
        0,0,0,5682,5683,1,0,0,0,5683,5685,3,400,200,0,5684,5636,1,0,0,0,
        5684,5646,1,0,0,0,5684,5660,1,0,0,0,5684,5670,1,0,0,0,5684,5681,
        1,0,0,0,5685,467,1,0,0,0,5686,5695,3,488,244,0,5687,5695,3,490,245,
        0,5688,5695,3,492,246,0,5689,5695,3,474,237,0,5690,5695,3,510,255,
        0,5691,5695,3,340,170,0,5692,5695,3,486,243,0,5693,5695,3,470,235,
        0,5694,5686,1,0,0,0,5694,5687,1,0,0,0,5694,5688,1,0,0,0,5694,5689,
        1,0,0,0,5694,5690,1,0,0,0,5694,5691,1,0,0,0,5694,5692,1,0,0,0,5694,
        5693,1,0,0,0,5695,469,1,0,0,0,5696,5698,5,272,0,0,5697,5696,1,0,
        0,0,5697,5698,1,0,0,0,5698,5699,1,0,0,0,5699,5705,5,274,0,0,5700,
        5701,5,111,0,0,5701,5705,3,472,236,0,5702,5703,5,474,0,0,5703,5705,
        5,111,0,0,5704,5697,1,0,0,0,5704,5700,1,0,0,0,5704,5702,1,0,0,0,
        5705,471,1,0,0,0,5706,5707,7,8,0,0,5707,5713,3,380,190,0,5708,5709,
        7,8,0,0,5709,5713,3,376,188,0,5710,5713,3,366,183,0,5711,5713,3,
        198,99,0,5712,5706,1,0,0,0,5712,5708,1,0,0,0,5712,5710,1,0,0,0,5712,
        5711,1,0,0,0,5713,473,1,0,0,0,5714,5717,3,496,248,0,5715,5717,3,
        494,247,0,5716,5714,1,0,0,0,5716,5715,1,0,0,0,5717,475,1,0,0,0,5718,
        5719,5,1089,0,0,5719,5720,5,1209,0,0,5720,477,1,0,0,0,5721,5723,
        5,478,0,0,5722,5724,3,480,240,0,5723,5722,1,0,0,0,5723,5724,1,0,
        0,0,5724,5727,1,0,0,0,5725,5726,5,426,0,0,5726,5728,5,258,0,0,5727,
        5725,1,0,0,0,5727,5728,1,0,0,0,5728,5784,1,0,0,0,5729,5731,5,258,
        0,0,5730,5732,3,480,240,0,5731,5730,1,0,0,0,5731,5732,1,0,0,0,5732,
        5784,1,0,0,0,5733,5735,5,106,0,0,5734,5736,3,480,240,0,5735,5734,
        1,0,0,0,5735,5736,1,0,0,0,5736,5746,1,0,0,0,5737,5738,5,426,0,0,
        5738,5747,5,185,0,0,5739,5740,5,426,0,0,5740,5747,5,248,0,0,5741,
        5742,5,426,0,0,5742,5744,5,368,0,0,5743,5745,3,480,240,0,5744,5743,
        1,0,0,0,5744,5745,1,0,0,0,5745,5747,1,0,0,0,5746,5737,1,0,0,0,5746,
        5739,1,0,0,0,5746,5741,1,0,0,0,5746,5747,1,0,0,0,5747,5784,1,0,0,
        0,5748,5750,5,185,0,0,5749,5751,3,480,240,0,5750,5749,1,0,0,0,5750,
        5751,1,0,0,0,5751,5759,1,0,0,0,5752,5753,5,426,0,0,5753,5760,5,248,
        0,0,5754,5755,5,426,0,0,5755,5757,5,368,0,0,5756,5758,3,480,240,
        0,5757,5756,1,0,0,0,5757,5758,1,0,0,0,5758,5760,1,0,0,0,5759,5752,
        1,0,0,0,5759,5754,1,0,0,0,5759,5760,1,0,0,0,5760,5784,1,0,0,0,5761,
        5763,5,248,0,0,5762,5764,3,480,240,0,5763,5762,1,0,0,0,5763,5764,
        1,0,0,0,5764,5770,1,0,0,0,5765,5766,5,426,0,0,5766,5768,5,368,0,
        0,5767,5769,3,480,240,0,5768,5767,1,0,0,0,5768,5769,1,0,0,0,5769,
        5771,1,0,0,0,5770,5765,1,0,0,0,5770,5771,1,0,0,0,5771,5784,1,0,0,
        0,5772,5781,5,368,0,0,5773,5774,5,1213,0,0,5774,5777,3,376,188,0,
        5775,5776,5,1208,0,0,5776,5778,3,376,188,0,5777,5775,1,0,0,0,5777,
        5778,1,0,0,0,5778,5779,1,0,0,0,5779,5780,5,1214,0,0,5780,5782,1,
        0,0,0,5781,5773,1,0,0,0,5781,5782,1,0,0,0,5782,5784,1,0,0,0,5783,
        5721,1,0,0,0,5783,5729,1,0,0,0,5783,5733,1,0,0,0,5783,5748,1,0,0,
        0,5783,5761,1,0,0,0,5783,5772,1,0,0,0,5784,479,1,0,0,0,5785,5786,
        5,1213,0,0,5786,5787,3,376,188,0,5787,5788,5,1214,0,0,5788,481,1,
        0,0,0,5789,5790,5,1213,0,0,5790,5792,3,376,188,0,5791,5793,7,83,
        0,0,5792,5791,1,0,0,0,5792,5793,1,0,0,0,5793,5794,1,0,0,0,5794,5795,
        5,1214,0,0,5795,483,1,0,0,0,5796,5797,5,1213,0,0,5797,5799,3,376,
        188,0,5798,5800,7,84,0,0,5799,5798,1,0,0,0,5799,5800,1,0,0,0,5800,
        5801,1,0,0,0,5801,5802,5,1214,0,0,5802,485,1,0,0,0,5803,5804,7,81,
        0,0,5804,5805,5,372,0,0,5805,5806,7,85,0,0,5806,487,1,0,0,0,5807,
        5808,7,86,0,0,5808,489,1,0,0,0,5809,5811,7,7,0,0,5810,5809,1,0,0,
        0,5810,5811,1,0,0,0,5811,5812,1,0,0,0,5812,5813,7,87,0,0,5813,491,
        1,0,0,0,5814,5818,5,161,0,0,5815,5819,3,370,185,0,5816,5819,5,1198,
        0,0,5817,5819,5,1199,0,0,5818,5815,1,0,0,0,5818,5816,1,0,0,0,5818,
        5817,1,0,0,0,5819,493,1,0,0,0,5820,5821,5,425,0,0,5821,5822,3,370,
        185,0,5822,495,1,0,0,0,5823,5824,5,262,0,0,5824,5825,3,420,210,0,
        5825,497,1,0,0,0,5826,5827,7,81,0,0,5827,5828,5,372,0,0,5828,5829,
        7,88,0,0,5829,499,1,0,0,0,5830,5831,5,709,0,0,5831,5832,5,739,0,
        0,5832,5833,3,376,188,0,5833,501,1,0,0,0,5834,5835,5,941,0,0,5835,
        5836,5,161,0,0,5836,5837,7,89,0,0,5837,503,1,0,0,0,5838,5839,5,941,
        0,0,5839,5840,5,161,0,0,5840,5842,3,506,253,0,5841,5843,3,508,254,
        0,5842,5841,1,0,0,0,5842,5843,1,0,0,0,5843,505,1,0,0,0,5844,5850,
        5,545,0,0,5845,5847,5,1073,0,0,5846,5848,3,498,249,0,5847,5846,1,
        0,0,0,5847,5848,1,0,0,0,5848,5850,1,0,0,0,5849,5844,1,0,0,0,5849,
        5845,1,0,0,0,5850,507,1,0,0,0,5851,5852,5,474,0,0,5852,5853,5,905,
        0,0,5853,5854,3,404,202,0,5854,509,1,0,0,0,5855,5856,5,474,0,0,5856,
        5857,5,421,0,0,5857,5858,5,480,0,0,5858,511,1,0,0,0,5859,5864,3,
        514,257,0,5860,5864,3,520,260,0,5861,5864,3,528,264,0,5862,5864,
        3,532,266,0,5863,5859,1,0,0,0,5863,5860,1,0,0,0,5863,5861,1,0,0,
        0,5863,5862,1,0,0,0,5864,513,1,0,0,0,5865,5867,3,516,258,0,5866,
        5865,1,0,0,0,5867,5868,1,0,0,0,5868,5866,1,0,0,0,5868,5869,1,0,0,
        0,5869,515,1,0,0,0,5870,5884,7,90,0,0,5871,5873,5,102,0,0,5872,5871,
        1,0,0,0,5872,5873,1,0,0,0,5873,5874,1,0,0,0,5874,5885,3,412,206,
        0,5875,5877,5,406,0,0,5876,5875,1,0,0,0,5876,5877,1,0,0,0,5877,5878,
        1,0,0,0,5878,5885,3,404,202,0,5879,5881,5,468,0,0,5880,5879,1,0,
        0,0,5880,5881,1,0,0,0,5881,5882,1,0,0,0,5882,5885,3,404,202,0,5883,
        5885,5,361,0,0,5884,5872,1,0,0,0,5884,5876,1,0,0,0,5884,5880,1,0,
        0,0,5884,5883,1,0,0,0,5885,5887,1,0,0,0,5886,5888,7,91,0,0,5887,
        5886,1,0,0,0,5887,5888,1,0,0,0,5888,5889,1,0,0,0,5889,5891,3,518,
        259,0,5890,5892,5,252,0,0,5891,5890,1,0,0,0,5891,5892,1,0,0,0,5892,
        5894,1,0,0,0,5893,5895,5,273,0,0,5894,5893,1,0,0,0,5894,5895,1,0,
        0,0,5895,517,1,0,0,0,5896,5908,5,490,0,0,5897,5908,7,92,0,0,5898,
        5908,5,923,0,0,5899,5901,5,877,0,0,5900,5902,5,297,0,0,5901,5900,
        1,0,0,0,5901,5902,1,0,0,0,5902,5908,1,0,0,0,5903,5908,5,1041,0,0,
        5904,5908,5,571,0,0,5905,5906,5,742,0,0,5906,5908,5,1067,0,0,5907,
        5896,1,0,0,0,5907,5897,1,0,0,0,5907,5898,1,0,0,0,5907,5899,1,0,0,
        0,5907,5903,1,0,0,0,5907,5904,1,0,0,0,5907,5905,1,0,0,0,5908,519,
        1,0,0,0,5909,5910,5,474,0,0,5910,5915,3,522,261,0,5911,5912,5,1208,
        0,0,5912,5914,3,522,261,0,5913,5911,1,0,0,0,5914,5917,1,0,0,0,5915,
        5913,1,0,0,0,5915,5916,1,0,0,0,5916,521,1,0,0,0,5917,5915,1,0,0,
        0,5918,5921,3,524,262,0,5919,5921,3,526,263,0,5920,5918,1,0,0,0,
        5920,5919,1,0,0,0,5921,523,1,0,0,0,5922,5924,3,420,210,0,5923,5925,
        3,348,174,0,5924,5923,1,0,0,0,5924,5925,1,0,0,0,5925,5926,1,0,0,
        0,5926,5927,5,20,0,0,5927,5928,3,350,175,0,5928,525,1,0,0,0,5929,
        5930,5,324,0,0,5930,5932,3,420,210,0,5931,5933,3,348,174,0,5932,
        5931,1,0,0,0,5932,5933,1,0,0,0,5933,5934,1,0,0,0,5934,5935,5,20,
        0,0,5935,5936,5,1213,0,0,5936,5940,3,0,0,0,5937,5938,5,447,0,0,5938,
        5939,5,13,0,0,5939,5941,3,2,1,0,5940,5937,1,0,0,0,5941,5942,1,0,
        0,0,5942,5940,1,0,0,0,5942,5943,1,0,0,0,5943,5944,1,0,0,0,5944,5945,
        5,1214,0,0,5945,527,1,0,0,0,5946,5947,5,457,0,0,5947,5948,5,1213,
        0,0,5948,5953,3,530,265,0,5949,5950,5,1208,0,0,5950,5952,3,530,265,
        0,5951,5949,1,0,0,0,5952,5955,1,0,0,0,5953,5951,1,0,0,0,5953,5954,
        1,0,0,0,5954,5956,1,0,0,0,5955,5953,1,0,0,0,5956,5957,5,1214,0,0,
        5957,529,1,0,0,0,5958,5959,3,422,211,0,5959,5963,3,446,223,0,5960,
        5962,3,468,234,0,5961,5960,1,0,0,0,5962,5965,1,0,0,0,5963,5961,1,
        0,0,0,5963,5964,1,0,0,0,5964,5975,1,0,0,0,5965,5963,1,0,0,0,5966,
        5973,5,20,0,0,5967,5970,5,112,0,0,5968,5969,5,42,0,0,5969,5971,5,
        789,0,0,5970,5968,1,0,0,0,5970,5971,1,0,0,0,5971,5974,1,0,0,0,5972,
        5974,5,225,0,0,5973,5967,1,0,0,0,5973,5972,1,0,0,0,5974,5976,1,0,
        0,0,5975,5966,1,0,0,0,5975,5976,1,0,0,0,5976,531,1,0,0,0,5977,5979,
        7,93,0,0,5978,5977,1,0,0,0,5978,5979,1,0,0,0,5979,5980,1,0,0,0,5980,
        5986,5,150,0,0,5981,5982,5,190,0,0,5982,5984,5,1042,0,0,5983,5985,
        5,795,0,0,5984,5983,1,0,0,0,5984,5985,1,0,0,0,5985,5987,1,0,0,0,
        5986,5981,1,0,0,0,5986,5987,1,0,0,0,5987,533,1,0,0,0,719,540,545,
        550,555,558,565,573,579,586,590,592,596,609,612,616,622,625,629,
        640,642,650,661,664,668,671,677,682,687,691,701,708,715,724,727,
        735,746,750,756,763,765,768,771,776,778,785,791,793,802,811,822,
        825,837,839,850,855,858,868,872,883,890,894,897,904,908,914,928,
        940,944,948,954,957,961,963,967,974,980,990,995,1005,1015,1028,1031,
        1035,1040,1044,1047,1052,1059,1068,1071,1081,1084,1096,1103,1110,
        1117,1125,1142,1145,1148,1155,1162,1169,1176,1181,1188,1198,1213,
        1224,1233,1244,1251,1269,1279,1281,1286,1304,1315,1324,1331,1340,
        1344,1349,1353,1360,1364,1368,1371,1380,1383,1393,1406,1411,1425,
        1431,1435,1439,1450,1494,1500,1549,1554,1559,1563,1567,1575,1596,
        1598,1604,1608,1613,1617,1626,1651,1661,1672,1676,1681,1688,1696,
        1704,1708,1713,1715,1723,1730,1735,1737,1739,1743,1752,1757,1761,
        1765,1783,1793,1798,1807,1810,1814,1820,1825,1828,1832,1838,1843,
        1846,1850,1856,1861,1864,1868,1874,1879,1885,1889,1897,1902,1907,
        1912,1920,1925,1930,1934,1943,1949,1956,1963,1970,1977,2000,2011,
        2017,2025,2027,2043,2052,2055,2065,2074,2077,2082,2085,2089,2106,
        2140,2159,2193,2202,2217,2287,2327,2350,2360,2370,2381,2392,2401,
        2411,2413,2432,2434,2446,2448,2462,2464,2490,2502,2505,2511,2513,
        2522,2528,2531,2536,2541,2547,2558,2562,2574,2578,2602,2614,2618,
        2626,2628,2652,2657,2673,2676,2689,2709,2720,2732,2741,2747,2749,
        2753,2766,2798,2810,2825,2840,2848,2863,2873,2880,2896,2899,2908,
        2910,2923,2937,2951,2965,2977,2989,2998,3000,3020,3025,3038,3042,
        3057,3061,3066,3076,3084,3093,3095,3100,3107,3111,3118,3137,3149,
        3153,3156,3164,3174,3181,3186,3195,3200,3212,3219,3225,3230,3233,
        3238,3243,3246,3250,3253,3259,3270,3274,3277,3280,3288,3294,3298,
        3302,3305,3319,3328,3332,3335,3350,3356,3358,3370,3380,3390,3400,
        3402,3404,3409,3419,3421,3423,3428,3436,3441,3449,3451,3456,3464,
        3473,3481,3489,3499,3509,3525,3550,3555,3558,3565,3573,3591,3600,
        3603,3613,3624,3642,3667,3670,3684,3689,3705,3710,3726,3731,3740,
        3745,3758,3761,3782,3788,3801,3812,3824,3840,3852,3863,3865,3870,
        3886,3896,3905,3910,3917,3922,3933,3938,3951,3953,3955,3960,3969,
        3974,3993,4002,4004,4009,4035,4046,4057,4065,4068,4073,4076,4083,
        4086,4093,4098,4106,4113,4117,4120,4130,4152,4163,4165,4176,4181,
        4190,4195,4197,4205,4216,4219,4222,4232,4235,4239,4242,4246,4250,
        4258,4266,4276,4280,4284,4287,4294,4301,4304,4307,4310,4320,4324,
        4332,4342,4345,4353,4378,4382,4396,4399,4402,4419,4446,4455,4461,
        4468,4470,4479,4484,4495,4499,4521,4531,4537,4545,4552,4556,4564,
        4570,4573,4578,4584,4586,4592,4602,4606,4612,4620,4626,4629,4640,
        4650,4655,4658,4661,4668,4676,4680,4691,4701,4707,4792,4794,4801,
        4805,4810,4818,4821,4834,4842,4847,4851,4860,4873,4881,4889,4893,
        4900,4904,4924,4940,4943,4947,4954,4966,4971,4974,4984,4997,5010,
        5019,5023,5029,5032,5036,5043,5049,5053,5065,5080,5085,5089,5092,
        5096,5099,5105,5108,5112,5120,5131,5142,5149,5188,5205,5210,5215,
        5218,5224,5231,5244,5249,5254,5260,5292,5308,5314,5318,5323,5327,
        5332,5336,5341,5345,5350,5354,5359,5363,5367,5371,5376,5380,5384,
        5388,5392,5396,5400,5404,5408,5412,5416,5420,5424,5436,5445,5457,
        5467,5471,5474,5481,5486,5492,5496,5499,5501,5505,5508,5512,5519,
        5523,5535,5538,5541,5543,5547,5551,5553,5559,5567,5571,5575,5583,
        5586,5588,5593,5596,5600,5603,5607,5617,5620,5627,5630,5633,5636,
        5640,5643,5646,5650,5653,5657,5660,5664,5667,5670,5674,5677,5681,
        5684,5694,5697,5704,5712,5716,5723,5727,5731,5735,5744,5746,5750,
        5757,5759,5763,5768,5770,5777,5781,5783,5792,5799,5810,5818,5842,
        5847,5849,5863,5868,5872,5876,5880,5884,5887,5891,5894,5901,5907,
        5915,5920,5924,5932,5942,5953,5963,5970,5973,5975,5978,5984,5986
    ]

class TeradataSQLExpressionsParser ( Parser ):

    grammarFileName = "TeradataSQLExpressionsParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORTSESSION'", "'ABS'", 
                     "'ACCESS_LOCK'", "'ACCOUNT'", "'ACOS'", "'ACOSH'", 
                     "'ADD'", "'ADD_MONTHS'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
                     "'ALL'", "'ALTER'", "'AMP'", "'AND'", "'ANSIDATE'", 
                     "'ANY'", "'ARGLPAREN'", "'AS'", "'ASC'", "'ASIN'", 
                     "'ASINH'", "'AT'", "'ATAN'", "'ATAN2'", "'ATANH'", 
                     "'ATOMIC'", "'AUTHORIZATION'", "'AVE'", "'AVERAGE'", 
                     "'AVG'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BLOB'", "'BOTH'", "'BT'", "'BUT'", "'BY'", 
                     "'BYTE'", "'BYTEINT'", "'BYTES'", "'CALL'", "'CASE'", 
                     "'CASE_N'", "'CASESPECIFIC'", "'CAST'", "'CD'", "'CHAR'", 
                     "'CHAR_LENGTH'", "'CHAR2HEXINT'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERS'", "'CHARS'", "'CHECK'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'CM'", 
                     "'COALESCE'", "'COLLATION'", "'COLLECT'", "'COLUMN'", 
                     "'COMMENT'", "'COMMIT'", "'COMPRESS'", "'CONNECT'", 
                     "'CONSTRAINT'", "'CONSTRUCTOR'", "'CONSUME'", "'CONTAINS'", 
                     "'CONTINUE'", "'CONVERT_TABLE_HEADER'", "'CORR'", "'COS'", 
                     "'COSH'", "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", 
                     "'CREATE'", "'CROSS'", "'CS'", "'CSUM'", "'CT'", "'CTCONTROL'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'CV'", "'CYCLE'", "'DATABASE'", "'DATABLOCKSIZE'", 
                     "'DATE'", "'DATEFORM'", "'DAY'", "'DEALLOCATE'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRED'", 
                     "'DEGREES'", "'DEL'", "'DELETE'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIAGNOSTIC'", "'DICTIONARY'", "'DISABLED'", "'DISTINCT'", 
                     "'DO'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'DUAL'", 
                     "'DUMP'", "'DYNAMIC'", "'EACH'", "'ECHO'", "'ELSE'", 
                     "'ELSEIF'", "'ENABLED'", "'END'", "'EQ'", "'EQUALS'", 
                     "'ERROR'", "'ERRORFILES'", "'ERRORTABLES'", "'ESCAPE'", 
                     "'ET'", "'EXCEPT'", "'EXEC'", "'EXECUTE'", "'EXISTS'", 
                     "'EXIT'", "'EXP'", "'EXPAND'", "'EXPANDING'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALLBACK'", "'FASTEXPORT'", 
                     "'FETCH'", "'FIRST'", "'FLOAT'", "'FLUSH'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FOUND'", "'FREESPACE'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONDESCRIPTOR'", 
                     "'GE'", "'GENERATED'", "'GET'", "'GIVE'", "'GRANT'", 
                     "'GRAPHIC'", "'GROUP'", "'GROUPING'", "'GT'", "'HANDLER'", 
                     "'HASH'", "'HASHAMP'", "'HASHBAKAMP'", "'HASHBUCKET'", 
                     "'HASHROW'", "'HAVING'", "'HELP'", "'HOUR'", "'ID2BIGINT'", 
                     "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IN'", "'INCONSISTENT'", 
                     "'INDEX'", "'INITIATE'", "'INNER'", "'INOUT'", "'INPUT'", 
                     "'INS'", "'INSERT'", "'INSTANCE'", "'INSTEAD'", "'INT'", 
                     "'INTEGER'", "'INTEGERDATE'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JAR'", "'JOIN'", "'JOURNAL'", 
                     "'KEY'", "'KURTOSIS'", "'LANGUAGE'", "'LARGE'", "'LE'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LN'", "'LOADING'", "'LOCAL'", "'LOCATOR'", "'LOCK'", 
                     "'LOCKING'", "'LOG'", "'LOGGING'", "'LOGON'", "'LONG'", 
                     "'LOOP'", "'LOWER'", "'LT'", "'MACRO'", "'MAP'", "'MAVG'", 
                     "'MAX'", "'MAXIMUM'", "'MCHARACTERS'", "'MDIFF'", "'MERGE'", 
                     "'METHOD'", "'MIN'", "'MINDEX'", "'MINIMUM'", "'MINUS'", 
                     "'MINUTE'", "'MLINREG'", "'MLOAD'", "'MOD'", "'MODE'", 
                     "'MODIFIES'", "'MODIFY'", "'MONITOR'", "'MONRESOURCE'", 
                     "'MONSESSION'", "'MONTH'", "'MSUBSTR'", "'MSUM'", "'MULTISET'", 
                     "'NAMED'", "'NATURAL'", "'NE'", "'NEW'", "'NEW_TABLE'", 
                     "'NEXT'", "'NO'", "'NONE'", "'NONTEMPORAL'", "'NORMALIZE'", 
                     "'NOT'", "'NOWAIT'", "'NULL'", "'NULLIF'", "'NULLIFZERO'", 
                     "'NUMBER'", "'NUMERIC'", "'OBJECT'", "'OBJECTS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFF'", "'OLD'", "'OLD_TABLE'", "'ON'", "'ONLY'", 
                     "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", "'ORDERING'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERRIDE'", 
                     "'PARAMETER'", "'PASSWORD'", "'PERCENT'", "'PERCENT_RANK'", 
                     "'PERM'", "'PERMANENT'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIVILEGES'", 
                     "'PROCEDURE'", "'PROFILE'", "'PROTECTION'", "'PUBLIC'", 
                     "'QUALIFIED'", "'QUALIFY'", "'QUANTILE'", "'QUEUE'", 
                     "'RADIANS'", "'RANDOM'", "'RANGE_N'", "'RANK'", "'READS'", 
                     "'REAL'", "'RECURSIVE'", "'REFERENCES'", "'REFERENCING'", 
                     "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
                     "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", 
                     "'REGR_SYY'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REPLCONTROL'", "'REPLICATION'", 
                     "'REQUEST'", "'RESIGNAL'", "'RESTART'", "'RESTORE'", 
                     "'RESULT'", "'RESUME'", "'RET'", "'RETRIEVE'", "'RETURN'", 
                     "'RETURNS'", "'REVALIDATE'", "'REVOKE'", "'RIGHT'", 
                     "'RIGHTS'", "'ROLE'", "'ROLLBACK'", "'ROLLFORWARD'", 
                     "'ROLLUP'", "'ROW'", "'ROW_NUMBER'", "'ROWID'", "'ROWS'", 
                     "'SAMPLE'", "'SAMPLEID'", "'SCROLL'", "'SECOND'", "'SEL'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SETRESRATE'", "'SETS'", 
                     "'SETSESSRATE'", "'SHOW'", "'SIGNAL'", "'SIN'", "'SINH'", 
                     "'SKEW'", "'SMALLINT'", "'SOME'", "'SOUNDEX'", "'SPECIFIC'", 
                     "'SPOOL'", "'SQL'", "'SQLEXCEPTION'", "'SQLTEXT'", 
                     "'SQLWARNING'", "'SQRT'", "'SS'", "'START'", "'STARTUP'", 
                     "'STATEMENT'", "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                     "'STEPINFO'", "'STRING_CS'", "'SUBSCRIBER'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUMMARY'", "'SUSPEND'", "'TABLE'", 
                     "'TAN'", "'TANH'", "'TBL_CS'", "'TD_ANYTYPE'", "'TD_AUTHID'", 
                     "'TD_HOST'", "'TD_ROWLOADID'", "'TD_ROWREVISION'", 
                     "'TD_ROWSIZE'", "'TD_VALIST'", "'TEMPORARY'", "'TERMINATE'", 
                     "'THEN'", "'THRESHOLD'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TITLE'", "'TO'", "'TOP'", "'TRACE'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONTIME'", 
                     "'TRANSFORM'", "'TRANSLATE'", "'TRANSLATE_CHK'", "'TRIGGER'", 
                     "'TRIM'", "'TYPE'", "'UC'", "'UDTCASTAS'", "'UDTCASTLPAREN'", 
                     "'UDTMETHOD'", "'UDTTYPE'", "'UDTUSAGE'", "'UESCAPE'", 
                     "'UNDEFINED'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNTIL'", 
                     "'UNTIL_CHANGED'", "'UNTIL_CLOSED'", "'UPD'", "'UPDATE'", 
                     "'UPPER'", "'UPPERCASE'", "'USER'", "'USING'", "'VALIDTIME'", 
                     "'VALUE'", "'VALUES'", "'VAR_POP'", "'VAR_SAMP'", "'VARBYTE'", 
                     "'VARCHAR'", "'VARGRAPHIC'", "'VARIANT_TYPE'", "'VARYING'", 
                     "'VIEW'", "'VOLATILE'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WIDTH_BUCKET'", "'WITH'", "'WITHOUT'", "'WORK'", 
                     "'XMLPLAN'", "'YEAR'", "'ZEROIFNULL'", "'ZONE'", "'ALIAS'", 
                     "'DESCRIPTOR'", "'GO'", "'GOTO'", "'INDICATOR'", "'PRIVATE'", 
                     "'WAIT'", "'AbortSessions'", "'ABSENT'", "'ACCESS'", 
                     "'ACCORDING'", "'ACCUMULATE'", "'AG'", "'AggGeomIntersection'", 
                     "'AggGeomUnion'", "'ALLDBQL'", "'ALLOCATE'", "'ALLOCATION'", 
                     "'ALLOW'", "'ALLPARAMS'", "'ALLTDWM'", "'ALWAYS'", 
                     "'AMPCOUNT'", "'ANALYSIS'", "'ANCHOR'", "'ANCHOR_HOUR'", 
                     "'ANCHOR_MILLISECOND'", "'ANCHOR_MINUTE'", "'ANCHOR_SECOND'", 
                     "'APPLNAME'", "'ARCHIVE'", "'ARRAY'", "'ARRAY_ADD'", 
                     "'ARRAY_AGG'", "'ARRAY_AVG'", "'ARRAY_COMPARE'", "'ARRAY_CONCAT'", 
                     "'ARRAY_COUNT_DISTINCT'", "'ARRAY_DIV'", "'ARRAY_EQ'", 
                     "'ARRAY_GE'", "'ARRAY_GET'", "'ARRAY_GT'", "'ARRAY_LE'", 
                     "'ARRAY_LT'", "'ARRAY_MAX'", "'ARRAY_MIN'", "'ARRAY_MOD'", 
                     "'ARRAY_MUL'", "'ARRAY_NE'", "'ARRAY_SUB'", "'ARRAY_SUM'", 
                     "'ARRAY_UPDATE'", "'ARRAY_UPDATE_STRIDE'", "'ASCII'", 
                     "'ASSIGNMENT'", "'ATTR'", "'ATTRIBUTE'", "'ATTRIBUTES'", 
                     "'ATTRIBUTION'", "'ATTRS'", "'AUTH'", "'AUTO'", "'AUTOTEMP'", 
                     "'AVRO'", "'BIT_LENGTH'", "'BITAND'", "'BITNOT'", "'BITOR'", 
                     "'BITXOR'", "'BLOCKCOMPRESSION'", "'BLOCKCOMPRESSIONALGORITHM'", 
                     "'BLOCKCOMPRESSIONLEVEL'", "'BOM'", "'BOTTOM'", "'BSON'", 
                     "'C'", "'CALENDAR'", "'CALLED'", "'CALLER'", "'camset'", 
                     "'camset_l'", "'CAPTURE'", "'CARDINALITY'", "'CEIL'", 
                     "'CEILING'", "'CHANGERATE'", "'CHARACTERISTICS'", "'CHARSET'", 
                     "'CHARSET_COLL'", "'CHECKSUM'", "'CHR'", "'CLASS_ORIGIN'", 
                     "'CLICKLAG'", "'CLIENT'", "'CNT'", "'COLOCATE'", "'COLUMNMETA'", 
                     "'COLUMNS'", "'COLUMNSPERINDEX'", "'COLUMNSPERJOININDEX'", 
                     "'COMMAND_FUNCTION'", "'COMMAND_FUNCTION_CODE'", "'COMPARISON'", 
                     "'COMPILE'", "'CONCAT'", "'CONCURRENT'", "'CONDITION'", 
                     "'CONDITION_IDENTIFIER'", "'CONDITION_NUMBER'", "'CONTAINED'", 
                     "'CONTAINEDTOKEN'", "'CONTENT'", "'CONTIGUOUS'", "'COST'", 
                     "'COSTS'", "'COUNTSET'", "'CPP'", "'CPUTIME'", "'CPUTIMENORM'", 
                     "'CREATEDATASET'", "'CREATOR'", "'CUME_DIST'", "'CURDATE'", 
                     "'CURTIME'", "'DATA'", "'DATASET'", "'day_of_calendar'", 
                     "'day_of_month'", "'day_of_week'", "'day_of_year'", 
                     "'DayNumber_Of_Calendar'", "'DayNumber_Of_Month'", 
                     "'DayNumber_Of_Week'", "'DayNumber_Of_Year'", "'DayOccurrence_Of_Month'", 
                     "'DBA'", "'DBC'", "'DEBUG'", "'decamset'", "'decamset_l'", 
                     "'DECODE'", "'DECOMPRESS'", "'DEFINER'", "'DELIMITER'", 
                     "'DELTA_T'", "'DEMOGRAPHICS'", "'DENIALS'", "'DENSE'", 
                     "'DENSE_RANK'", "'DESCRIBE'", "'DETAILED'", "'DIAGNOSTICS'", 
                     "'DIGITS'", "'DIMENSION'", "'DOCUMENT'", "'DOT'", "'DOWN'", 
                     "'DR'", "'DUPCOUNT'", "'DUPCOUNTCUM'", "'EBCDIC'", 
                     "'EDITDISTANCE'", "'ELAPSEDSEC'", "'ELAPSEDTIME'", 
                     "'ELEMENT'", "'ELZS_H'", "'EMITNULL'", "'EMPTY'", "'EMPTY_BLOB'", 
                     "'EMPTY_CLOB'", "'ENCODE'", "'ENCODING'", "'ENCRYPT'", 
                     "'ERRORS'", "'ERRORTBL'", "'EVENTCOLUMN'", "'EXCEPTION'", 
                     "'EXCL'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXPORTWIDTH'", "'FALSE'", 
                     "'FEATUREINFO'", "'FILE'", "'FILL'", "'FILTER'", "'FINAL'", 
                     "'FIRST_NOTNULL'", "'FIRST_VALUE'", "'FLOOR'", "'FOLLOWING'", 
                     "'FOREIGNFUNCTION'", "'FORTOKEN'", "'FRIDAY'", "'FROM_BYTES'", 
                     "'FUNCTIONPARAMETER'", "'G'", "'GETBIT'", "'GetPSFVersion'", 
                     "'GetQueryBand'", "'GetQueryBandValue'", "'GetTimeZoneDisplacement'", 
                     "'GLOBAL'", "'GLOP'", "'Greatest'", "'HIGH'", "'HOST'", 
                     "'IdentifyDatabase'", "'IdentifySession'", "'IdentifyTable'", 
                     "'IdentifyUser'", "'IFP'", "'IGNORE'", "'IMMEDIATELY'", 
                     "'IMPORT'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDENT'", "'INDEXESPERTABLE'", "'INDEXMAINTMODE'", 
                     "'INIT'", "'INITCAP'", "'INLINE'", "'INSTANTIABLE'", 
                     "'INSTR'", "'INTERNAL'", "'INVOKER'", "'IOCOUNT'", 
                     "'IPARTITION'", "'ISOLATED'", "'ISOLATION'", "'JAVA'", 
                     "'JIS_COLL'", "'JSON'", "'JSON_AGG'", "'JSON_COMPOSE'", 
                     "'K'", "'KANJI1'", "'KANJISJIS'", "'KBYTE'", "'KBYTES'", 
                     "'KEEP'", "'KILOBYTES'", "'LAG'", "'LAST'", "'Last_Day'", 
                     "'LAST_NOTNULL'", "'LAST_VALUE'", "'LATIN'", "'LDIFF'", 
                     "'LEAD'", "'Least'", "'LENGTH'", "'LEVEL'", "'LIST'", 
                     "'LOAD'", "'LOCATE'", "'LOCKEDUSEREXPIRE'", "'LOW'", 
                     "'LPAD'", "'LTRIM'", "'lzcomp'", "'lzcomp_L'", "'lzdecomp'", 
                     "'lzdecomp_L'", "'M'", "'MAD'", "'MANUAL'", "'MAPPING'", 
                     "'MATCHED'", "'MAX_CHOOSE'", "'MAXCHAR'", "'MAXINTERVALS'", 
                     "'MAXLOGONATTEMPTS'", "'MAXVALUE'", "'MAXVALUELENGTH'", 
                     "'MEDIAN'", "'MEDIUM'", "'MEETS'", "'MEMBER'", "'MERGEBLOCKRATIO'", 
                     "'MESSAGE_LENGTH'", "'MESSAGE_TEXT'", "'MIN_CHOOSE'", 
                     "'MINCHAR'", "'MINVALUE'", "'MODIFIED'", "'MONDAY'", 
                     "'MonitorQueryBand'", "'MonitorSessionRate'", "'MonitorVersion'", 
                     "'MONTH_BEGIN'", "'MONTH_END'", "'month_of_calendar'", 
                     "'month_of_quarter'", "'month_of_year'", "'MonthNumber_Of_Calendar'", 
                     "'MonthNumber_Of_Quarter'", "'MonthNumber_Of_Year'", 
                     "'Months_Between'", "'MORE'", "'MULTINATIONAL'", "'NAME'", 
                     "'NAMESPACE'", "'NEVER'", "'NEXT_DAY'", "'NGRAM'", 
                     "'NIL'", "'NODDLTEXT'", "'NODE'", "'NONOPTCOST'", "'NONOPTINIT'", 
                     "'NONSEQUENCED'", "'NORIGHT'", "'NOSEXTRACTVARFROMPATH'", 
                     "'NOTATION'", "'NOW'", "'NPATH'", "'NTH'", "'NULLS'", 
                     "'NUMFPFNS'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
                     "'nvl'", "'nvl2'", "'NVP'", "'OA'", "'OAdd_Months'", 
                     "'OCOUNT'", "'ODELETE'", "'OEXISTS'", "'OEXTEND'", 
                     "'OFIRST'", "'OLAST'", "'OLD_NEW_TABLE'", "'OLIMIT'", 
                     "'ONEXT'", "'ONLINE'", "'OPRIOR'", "'OPTIONS'", "'ORDERBYVALUES'", 
                     "'ORDERED_ANALYTIC'", "'ORDINALITY'", "'OREPLACE'", 
                     "'OTRANSLATE'", "'OTRIM'", "'OVERLAYS'", "'OWNER'", 
                     "'P_INTERSECT'", "'P_NORMALIZE'", "'PARAMID'", "'PARAMINFO'", 
                     "'PARENT'", "'PARTITION'", "<INVALID>", "'PARTITIONED'", 
                     "'PARTITIONNAMES'", "'PASS'", "'PASSING'", "'PATH_GENERATOR'", 
                     "'PATH_START'", "'PATH_SUMMARIZER'", "'PATTERN'", "'PERCENTILE'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIOD'", 
                     "'PIVOT'", "'PORTION'", "'POWER'", "'PRECEDES'", "'PRECEDING'", 
                     "'PREFIX'", "'PRINT'", "'PRIOR'", "'PROTECTED'", "'QUARTER_BEGIN'", 
                     "'QUARTER_END'", "'quarter_of_calendar'", "'quarter_of_year'", 
                     "'QuarterNumber_Of_Calendar'", "'QuarterNumber_Of_Year'", 
                     "'QUERY'", "'QUERY_BAND'", "'QUOTECHAR'", "'RANDOMIZED'", 
                     "'RANGE'", "<INVALID>", "'RAPIDFIRE'", "'RDIFF'", "'READ'", 
                     "'RECALC'", "'regexp_instr'", "'regexp_replace'", "'regexp_similar'", 
                     "'regexp_substr'", "'REPLACEMENT'", "'RESET'", "'RESPECT'", 
                     "'RESTRICTWORDS'", "'RETAIN'", "'RETURNED_SQLSTATE'", 
                     "'RETURNING'", "'REUSE'", "'ROOT'", "'ROTATELEFT'", 
                     "'ROTATERIGHT'", "'Round'", "'ROW_COUNT'", "'ROWIDGEN'", 
                     "'ROWIDGEN2'", "'RPAD'", "'RTRIM'", "'RU'", "'RULES'", 
                     "'RULESET'", "'SAMPLES'", "'SATURDAY'", "'SCHEMA'", 
                     "'SCRIPT'", "'SCRIPT_COMMAND'", "'SEARCHSPACE'", "'SEARCHUIFDBPATH'", 
                     "'SECURITY'", "'SEED'", "'SELF'", "'SEQ'", "'SEQUENCE'", 
                     "'SEQUENCED'", "'SERIALIZABLE'", "'SERVER'", "'SESSIONIZE'", 
                     "'SETBIT'", "'SetResourceRate'", "'SetSessionAccount'", 
                     "'SetSessionRate'", "'SHARE'", "'SHIFTLEFT'", "'SHIFTRIGHT'", 
                     "'SIGN'", "'SIZE'", "'SNAPPY_COMPRESS'", "'SNAPPY_DECOMPRESS'", 
                     "'SOURCE'", "'SPARSE'", "'SPECCHAR'", "'SPL'", "'SQLSTATE'", 
                     "'SR'", "'ST_GEOMETRY'", "'STAT'", "'STATIC'", "'STATS'", 
                     "'STATSUSAGE'", "'STORAGE'", "'STRIP'", "'STRTOK'", 
                     "'STYLE'", "'SUBBITSTR'", "'SUBCLASS_ORIGIN'", "'SUCCEEDS'", 
                     "'SUMMARYONLY'", "'SUNDAY'", "'SYMBOLS'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SYSTEMTEST'", "'TARGET'", "'TD_ARRAY2P'", 
                     "'TD_DATASET'", "'td_day_of_calendar'", "'td_day_of_month'", 
                     "'td_day_of_week'", "'td_day_of_year'", "'TD_GENERAL'", 
                     "'TD_GETTIMEBUCKET'", "'TD_INTERNAL'", "'TD_LZ_COMPRESS'", 
                     "'TD_LZ_DECOMPRESS'", "'td_month_of_calendar'", "'td_month_of_quarter'", 
                     "'td_month_of_year'", "'td_quarter_of_calendar'", "'td_quarter_of_year'", 
                     "'TD_TIME_BUCKET_NUMBER'", "'td_week_of_calendar'", 
                     "'td_week_of_month'", "'td_week_of_year'", "'td_weekday_of_month'", 
                     "'td_year_of_calendar'", "'TDWMEVENT'", "'TDWMEXCEPTION'", 
                     "'TDWMHISTORY'", "'TEMPORAL_DATE'", "'TEMPORAL_TIMESTAMP'", 
                     "'TEXT'", "'THRESHOLDPERCENT'", "'THROUGH'", "'THURSDAY'", 
                     "'TIES'", "'TIMECODE'", "'TIMECOLUMN'", "'TIMEOUT'", 
                     "'TIMESTAMPCOLUMN'", "'TO_BYTE'", "'TO_BYTES'", "'TO_CHAR'", 
                     "'TO_DATE'", "'TO_DSINTERVAL'", "'TO_NUMBER'", "'TO_TIMESTAMP'", 
                     "'TO_TIMESTAMP_TZ'", "'TO_YMINTERVAL'", "'TOTOKEN'", 
                     "'TPA'", "'TRANSACTION_ACTIVE'", "'TransUnicodeToUTF8'", 
                     "'TransUTF8ToUnicode'", "'TRUE'", "'Trunc'", "'TRUST_ONLY'", 
                     "'TTGRANULARITY'", "'TUESDAY'", "'UBJSON'", "'UCASE'", 
                     "'UDFSEARCHPATH'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNICODE'", "'UNKNOWN'", "'UNPIVOT'", "'USE'", "'USECOUNT'", 
                     "'UTILITYINFO'", "'VARRAY'", "'VERBOSE'", "'VERSION'", 
                     "'VERSIONING'", "'WARNING'", "'WEDNESDAY'", "'WEEK_BEGIN'", 
                     "'WEEK_END'", "'week_of_calendar'", "'week_of_month'", 
                     "'week_of_year'", "'weekday_of_month'", "'WeekNumber_Of_Calendar'", 
                     "'WeekNumber_Of_Month'", "'WeekNumber_Of_Quarter'", 
                     "'WeekNumber_Of_Year'", "'WHITESPACE'", "'WINDOWSIZE'", 
                     "'WITHIN'", "'WORKLOAD'", "'WRITE'", "'XML'", "'XMLAGG'", 
                     "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDECLARATION'", 
                     "'XMLDOCUMENT'", "'XMLELEMENT'", "'XMLFOREST'", "'XMLNAMESPACES'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLSCHEMA'", 
                     "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTEXT'", "'XMLTYPE'", 
                     "'XMLVALIDATE'", "'YEAR_BEGIN'", "'YEAR_END'", "'year_of_calendar'", 
                     "'YearNumber_Of_Calendar'", "'ZLIB'", "'BUCKET'", "'COMMITTED'", 
                     "'CREATEXML'", "'_LATIN'", "'_UNICODE'", "'_KANJISJIS'", 
                     "'_GRAPHIC'", "'CSV'", "'CSVLD'", "'DATASIZE'", "'DAYOFMONTH'", 
                     "'DAYS'", "'DEFINITION'", "'DELETED'", "'FAST'", "'LISTAGG'", 
                     "'PATH'", "'REGEXP_SPLIT_TO_TABLE'", "'REVERSE'", "'SAS'", 
                     "'SQLTABLE'", "'STRTOK_SPLIT_TO_TABLE'", "'SYSLIB'", 
                     "'SYSUDTLIB'", "'TD_SERVER_DB'", "'TD_SYSFNLIB'", "'TD_SYSXML'", 
                     "'TIMEDATEWZCONTROL'", "'TRUST'", "'TRYCAST'", "'UDT'", 
                     "'USAGE'", "'VARIANT'", "'WEEK'", "'WIDTH'", "'XMLPUBLISH'", 
                     "'XMLPUBLISH_STREAM'", "'XMLSPLIT'", "'LATIN_TO_UNICODE'", 
                     "'UNICODE_TO_LATIN'", "'LOCALE_TO_UNICODE'", "'UNICODE_TO_LOCALE'", 
                     "'ASBSON'", "'ASBSONTEXT'", "'COMBINE'", "'EXISTVALUE'", 
                     "'JSONEXTRACT'", "'JSONEXTRACTVALUE'", "'JSONEXTRACTLARGEVALUE'", 
                     "'KEYCOUNT'", "'METADATA'", "'STORAGE_SIZE'", "'CREATESCHEMABASEDXML'", 
                     "'CREATENONSCHEMABASEDXML'", "'EXISTSNODE'", "'ISCONTENT'", 
                     "'ISDOCUMENT'", "'ISSCHEMAVALID'", "'ISSCHEMAVALIDATED'", 
                     "'XMLEXTRACT'", "'XMLTRANSFORM'", "'PROC_ID'", "'LOCATION'", 
                     "'PAYLOAD'", "'TRUSTED'", "'PATHPATTERN'", "'MANIFEST'", 
                     "'ROWFORMAT'", "'STOREDAS'", "'HEADER'", "'STRIP_EXTERIOR_SPACES'", 
                     "'STRIP_ENCLOSING_CHAR'", "'RLS'", "'SINGLE'", "'MULTIPLE'", 
                     "'JSON_COMPRESS'", "'JSON_DECOMPRESS'", "'TS_COMPRESS'", 
                     "'TS_DECOMPRESS'", "'CONTIGUOUSMAPAMPS'", "'SPARSEMAPAMPS'", 
                     "'SPARSETABLEAMPS'", "'UNNEST'", "'CALCMATRIX'", "'PHRASE'", 
                     "'CALCTYPE'", "'OUTPUT'", "'NULL_HANDLING'", "'READ_NOS'", 
                     "'BUFFERSIZE'", "'RETURNTYPE'", "'SAMPLE_PERC'", "'FULLSCAN'", 
                     "'TD_UNPIVOT'", "'VALUE_COLUMNS'", "'UNPIVOT_COLUMN'", 
                     "'COLUMN_LIST'", "'COLUMN_ALIAS_LIST'", "'INCLUDE_NULLS'", 
                     "'WRITE_NOS'", "'NAMING'", "'MANIFESTFILE'", "'MANIFESTONLY'", 
                     "'OVERWRITE'", "'INCLUDE_ORDERING'", "'INCLUDE_HASHBY'", 
                     "'MAXOBJECTSIZE'", "'COMPRESSION'", "'ARRAY_TO_JSON'", 
                     "'BSON_CHECK'", "'GEOJSONFROMGEOM'", "'GEOMFROMGEOJSON'", 
                     "'JSON_CHECK'", "'JSONGETVALUE'", "'JSONMETADATA'", 
                     "'NVP2JSON'", "'TD_JSONSHRED'", "'JSON_KEYS'", "'JSON_TABLE'", 
                     "'DEPTH'", "'QUOTES'", "'ROWEXPR'", "'COLEXPR'", "'RETURNTYPES'", 
                     "'NOCASE'", "'TRUNCATE'", "'LINK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'.'", "'@'", "'^'", "'?'", "'('", "')'", "'['", 
                     "']'", "'||'", "'\\u00A6\\u00A6'", "'*'", "'/'", "'+'", 
                     "'-'", "'**'", "'='", "'<>'", "'^='", "'<'", "'<='", 
                     "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORTSESSION", "ABS", "ACCESS_LOCK", 
                      "ACCOUNT", "ACOS", "ACOSH", "ADD", "ADD_MONTHS", "ADMIN", 
                      "AFTER", "AGGREGATE", "ALL", "ALTER", "AMP", "AND", 
                      "ANSIDATE", "ANY", "ARGLPAREN", "AS", "ASC", "ASIN", 
                      "ASINH", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", 
                      "AUTHORIZATION", "AVE", "AVERAGE", "AVG", "BEFORE", 
                      "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", 
                      "BT", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CALL", 
                      "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CD", "CHAR", 
                      "CHAR_LENGTH", "CHAR2HEXINT", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", 
                      "CLOB", "CLOSE", "CLUSTER", "CM", "COALESCE", "COLLATION", 
                      "COLLECT", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", 
                      "CONNECT", "CONSTRAINT", "CONSTRUCTOR", "CONSUME", 
                      "CONTAINS", "CONTINUE", "CONVERT_TABLE_HEADER", "CORR", 
                      "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", 
                      "CREATE", "CROSS", "CS", "CSUM", "CT", "CTCONTROL", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "CV", "CYCLE", "DATABASE", "DATABLOCKSIZE", 
                      "DATE", "DATEFORM", "DAY", "DEALLOCATE", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRED", "DEGREES", "DEL", 
                      "DELETE", "DESC", "DETERMINISTIC", "DIAGNOSTIC", "DICTIONARY", 
                      "DISABLED", "DISTINCT", "DO", "DOMAIN", "DOUBLE", 
                      "DROP", "DUAL", "DUMP", "DYNAMIC", "EACH", "ECHO", 
                      "ELSE", "ELSEIF", "ENABLED", "END", "EQ", "EQUALS", 
                      "ERROR", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ET", 
                      "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXPAND", "EXPANDING", "EXPLAIN", "EXTERNAL", "EXTRACT", 
                      "FALLBACK", "FASTEXPORT", "FETCH", "FIRST", "FLOAT", 
                      "FLUSH", "FOR", "FOREIGN", "FORMAT", "FOUND", "FREESPACE", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONDESCRIPTOR", 
                      "GE", "GENERATED", "GET", "GIVE", "GRANT", "GRAPHIC", 
                      "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", 
                      "HASHBAKAMP", "HASHBUCKET", "HASHROW", "HAVING", "HELP", 
                      "HOUR", "ID2BIGINT", "IDENTITY", "IF", "IMMEDIATE", 
                      "IN", "INCONSISTENT", "INDEX", "INITIATE", "INNER", 
                      "INOUT", "INPUT", "INS", "INSERT", "INSTANCE", "INSTEAD", 
                      "INT", "INTEGER", "INTEGERDATE", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JAR", "JOIN", "JOURNAL", 
                      "KEY", "KURTOSIS", "LANGUAGE", "LARGE", "LE", "LEADING", 
                      "LEAVE", "LEFT", "LIKE", "LIMIT", "LN", "LOADING", 
                      "LOCAL", "LOCATOR", "LOCK", "LOCKING", "LOG", "LOGGING", 
                      "LOGON", "LONG", "LOOP", "LOWER", "LT", "MACRO", "MAP", 
                      "MAVG", "MAX", "MAXIMUM", "MCHARACTERS", "MDIFF", 
                      "MERGE", "METHOD", "MIN", "MINDEX", "MINIMUM", "MINUS", 
                      "MINUTE", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", 
                      "MODIFY", "MONITOR", "MONRESOURCE", "MONSESSION", 
                      "MONTH", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NATURAL", 
                      "NE", "NEW", "NEW_TABLE", "NEXT", "NO", "NONE", "NONTEMPORAL", 
                      "NORMALIZE", "NOT", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", 
                      "NUMBER", "NUMERIC", "OBJECT", "OBJECTS", "OCTET_LENGTH", 
                      "OF", "OFF", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "ORDERING", "OUT", "OUTER", 
                      "OVER", "OVERLAPS", "OVERRIDE", "PARAMETER", "PASSWORD", 
                      "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "POSITION", 
                      "PRECISION", "PREPARE", "PRESERVE", "PRIMARY", "PRIVILEGES", 
                      "PROCEDURE", "PROFILE", "PROTECTION", "PUBLIC", "QUALIFIED", 
                      "QUALIFY", "QUANTILE", "QUEUE", "RADIANS", "RANDOM", 
                      "RANGE_N", "RANK", "READS", "REAL", "RECURSIVE", "REFERENCES", 
                      "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
                      "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
                      "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REPLCONTROL", "REPLICATION", 
                      "REQUEST", "RESIGNAL", "RESTART", "RESTORE", "RESULT", 
                      "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNS", 
                      "REVALIDATE", "REVOKE", "RIGHT", "RIGHTS", "ROLE", 
                      "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROW", "ROW_NUMBER", 
                      "ROWID", "ROWS", "SAMPLE", "SAMPLEID", "SCROLL", "SECOND", 
                      "SEL", "SELECT", "SESSION", "SET", "SETRESRATE", "SETS", 
                      "SETSESSRATE", "SHOW", "SIGNAL", "SIN", "SINH", "SKEW", 
                      "SMALLINT", "SOME", "SOUNDEX", "SPECIFIC", "SPOOL", 
                      "SQL", "SQLEXCEPTION", "SQLTEXT", "SQLWARNING", "SQRT", 
                      "SS", "START", "STARTUP", "STATEMENT", "STATISTICS", 
                      "STDDEV_POP", "STDDEV_SAMP", "STEPINFO", "STRING_CS", 
                      "SUBSCRIBER", "SUBSTR", "SUBSTRING", "SUM", "SUMMARY", 
                      "SUSPEND", "TABLE", "TAN", "TANH", "TBL_CS", "TD_ANYTYPE", 
                      "TD_AUTHID", "TD_HOST", "TD_ROWLOADID", "TD_ROWREVISION", 
                      "TD_ROWSIZE", "TD_VALIST", "TEMPORARY", "TERMINATE", 
                      "THEN", "THRESHOLD", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TITLE", "TO", "TOP", "TRACE", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONTIME", "TRANSFORM", 
                      "TRANSLATE", "TRANSLATE_CHK", "TRIGGER", "TRIM", "TYPE", 
                      "UC", "UDTCASTAS", "UDTCASTLPAREN", "UDTMETHOD", "UDTTYPE", 
                      "UDTUSAGE", "UESCAPE", "UNDEFINED", "UNDO", "UNION", 
                      "UNIQUE", "UNTIL", "UNTIL_CHANGED", "UNTIL_CLOSED", 
                      "UPD", "UPDATE", "UPPER", "UPPERCASE", "USER", "USING", 
                      "VALIDTIME", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
                      "VARBYTE", "VARCHAR", "VARGRAPHIC", "VARIANT_TYPE", 
                      "VARYING", "VIEW", "VOLATILE", "WHEN", "WHERE", "WHILE", 
                      "WIDTH_BUCKET", "WITH", "WITHOUT", "WORK", "XMLPLAN", 
                      "YEAR", "ZEROIFNULL", "ZONE", "ALIAS", "DESCRIPTOR", 
                      "GO", "GOTO", "INDICATOR", "PRIVATE", "WAIT", "ABORTSESSIONS", 
                      "ABSENT", "ACCESS", "ACCORDING", "ACCUMULATE", "AG", 
                      "AGGGEOMINTERSECTION", "AGGGEOMUNION", "ALLDBQL", 
                      "ALLOCATE", "ALLOCATION", "ALLOW", "ALLPARAMS", "ALLTDWM", 
                      "ALWAYS", "AMPCOUNT", "ANALYSIS", "ANCHOR", "ANCHOR_HOUR", 
                      "ANCHOR_MILLISECOND", "ANCHOR_MINUTE", "ANCHOR_SECOND", 
                      "APPLNAME", "ARCHIVE", "ARRAY", "ARRAY_ADD", "ARRAY_AGG", 
                      "ARRAY_AVG", "ARRAY_COMPARE", "ARRAY_CONCAT", "ARRAY_COUNT_DISTINCT", 
                      "ARRAY_DIV", "ARRAY_EQ", "ARRAY_GE", "ARRAY_GET", 
                      "ARRAY_GT", "ARRAY_LE", "ARRAY_LT", "ARRAY_MAX", "ARRAY_MIN", 
                      "ARRAY_MOD", "ARRAY_MUL", "ARRAY_NE", "ARRAY_SUB", 
                      "ARRAY_SUM", "ARRAY_UPDATE", "ARRAY_UPDATE_STRIDE", 
                      "ASCII", "ASSIGNMENT", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "ATTRIBUTION", "ATTRS", "AUTH", "AUTO", "AUTOTEMP", 
                      "AVRO", "BIT_LENGTH", "BITAND", "BITNOT", "BITOR", 
                      "BITXOR", "BLOCKCOMPRESSION", "BLOCKCOMPRESSIONALGORITHM", 
                      "BLOCKCOMPRESSIONLEVEL", "BOM", "BOTTOM", "BSON", 
                      "C", "CALENDAR", "CALLED", "CALLER", "CAMSET", "CAMSET_L", 
                      "CAPTURE", "CARDINALITY", "CEIL", "CEILING", "CHANGERATE", 
                      "CHARACTERISTICS", "CHARSET", "CHARSET_COLL", "CHECKSUM", 
                      "CHR", "CLASS_ORIGIN", "CLICKLAG", "CLIENT", "CNT", 
                      "COLOCATE", "COLUMNMETA", "COLUMNS", "COLUMNSPERINDEX", 
                      "COLUMNSPERJOININDEX", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
                      "COMPARISON", "COMPILE", "CONCAT", "CONCURRENT", "CONDITION", 
                      "CONDITION_IDENTIFIER", "CONDITION_NUMBER", "CONTAINED", 
                      "CONTAINEDTOKEN", "CONTENT", "CONTIGUOUS", "COST", 
                      "COSTS", "COUNTSET", "CPP", "CPUTIME", "CPUTIMENORM", 
                      "CREATEDATASET", "CREATOR", "CUME_DIST", "CURDATE", 
                      "CURTIME", "DATA", "DATASET", "DAY_OF_CALENDAR", "DAY_OF_MONTH", 
                      "DAY_OF_WEEK", "DAY_OF_YEAR", "DAYNUMBER_OF_CALENDAR", 
                      "DAYNUMBER_OF_MONTH", "DAYNUMBER_OF_WEEK", "DAYNUMBER_OF_YEAR", 
                      "DAYOCCURRENCE_OF_MONTH", "DBA", "DBC", "DEBUG", "DECAMSET", 
                      "DECAMSET_L", "DECODE", "DECOMPRESS", "DEFINER", "DELIMITER", 
                      "DELTA_T", "DEMOGRAPHICS", "DENIALS", "DENSE", "DENSE_RANK", 
                      "DESCRIBE", "DETAILED", "DIAGNOSTICS", "DIGITS", "DIMENSION", 
                      "DOCUMENT", "DOT", "DOWN", "DR", "DUPCOUNT", "DUPCOUNTCUM", 
                      "EBCDIC", "EDITDISTANCE", "ELAPSEDSEC", "ELAPSEDTIME", 
                      "ELEMENT", "ELZS_H", "EMITNULL", "EMPTY", "EMPTY_BLOB", 
                      "EMPTY_CLOB", "ENCODE", "ENCODING", "ENCRYPT", "ERRORS", 
                      "ERRORTBL", "EVENTCOLUMN", "EXCEPTION", "EXCL", "EXCLUDE", 
                      "EXCLUDING", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXPORTWIDTH", 
                      "FALSE", "FEATUREINFO", "FILE", "FILL", "FILTER", 
                      "FINAL", "FIRST_NOTNULL", "FIRST_VALUE", "FLOOR", 
                      "FOLLOWING", "FOREIGNFUNCTION", "FORTOKEN", "FRIDAY", 
                      "FROM_BYTES", "FUNCTIONPARAMETER", "G", "GETBIT", 
                      "GETPSFVERSION", "GETQUERYBAND", "GETQUERYBANDVALUE", 
                      "GETTIMEZONEDISPLACEMENT", "GLOBAL", "GLOP", "GREATEST", 
                      "HIGH", "HOST", "IDENTIFYDATABASE", "IDENTIFYSESSION", 
                      "IDENTIFYTABLE", "IDENTIFYUSER", "IFP", "IGNORE", 
                      "IMMEDIATELY", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INCREMENTAL", "INDENT", "INDEXESPERTABLE", "INDEXMAINTMODE", 
                      "INIT", "INITCAP", "INLINE", "INSTANTIABLE", "INSTR", 
                      "INTERNAL", "INVOKER", "IOCOUNT", "IPARTITION", "ISOLATED", 
                      "ISOLATION", "JAVA", "JIS_COLL", "JSON", "JSON_AGG", 
                      "JSON_COMPOSE", "K", "KANJI1", "KANJISJIS", "KBYTE", 
                      "KBYTES", "KEEP", "KILOBYTES", "LAG", "LAST", "LAST_DAY", 
                      "LAST_NOTNULL", "LAST_VALUE", "LATIN", "LDIFF", "LEAD", 
                      "LEAST", "LENGTH", "LEVEL", "LIST", "LOAD", "LOCATE", 
                      "LOCKEDUSEREXPIRE", "LOW", "LPAD", "LTRIM", "LZCOMP", 
                      "LZCOMP_L", "LZDECOMP", "LZDECOMP_L", "M", "MAD", 
                      "MANUAL", "MAPPING", "MATCHED", "MAX_CHOOSE", "MAXCHAR", 
                      "MAXINTERVALS", "MAXLOGONATTEMPTS", "MAXVALUE", "MAXVALUELENGTH", 
                      "MEDIAN", "MEDIUM", "MEETS", "MEMBER", "MERGEBLOCKRATIO", 
                      "MESSAGE_LENGTH", "MESSAGE_TEXT", "MIN_CHOOSE", "MINCHAR", 
                      "MINVALUE", "MODIFIED", "MONDAY", "MONITORQUERYBAND", 
                      "MONITORSESSIONRATE", "MONITORVERSION", "MONTH_BEGIN", 
                      "MONTH_END", "MONTH_OF_CALENDAR", "MONTH_OF_QUARTER", 
                      "MONTH_OF_YEAR", "MONTHNUMBER_OF_CALENDAR", "MONTHNUMBER_OF_QUARTER", 
                      "MONTHNUMBER_OF_YEAR", "MONTHS_BETWEEN", "MORE_", 
                      "MULTINATIONAL", "NAME", "NAMESPACE", "NEVER", "NEXT_DAY", 
                      "NGRAM", "NIL", "NODDLTEXT", "NODE", "NONOPTCOST", 
                      "NONOPTINIT", "NONSEQUENCED", "NORIGHT", "NOSEXTRACTVARFROMPATH", 
                      "NOTATION", "NOW", "NPATH", "NTH", "NULLS", "NUMFPFNS", 
                      "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", 
                      "NVP", "OA", "OADD_MONTHS", "OCOUNT", "ODELETE", "OEXISTS", 
                      "OEXTEND", "OFIRST", "OLAST", "OLD_NEW_TABLE", "OLIMIT", 
                      "ONEXT", "ONLINE", "OPRIOR", "OPTIONS", "ORDERBYVALUES", 
                      "ORDERED_ANALYTIC", "ORDINALITY", "OREPLACE", "OTRANSLATE", 
                      "OTRIM", "OVERLAYS", "OWNER", "P_INTERSECT", "P_NORMALIZE", 
                      "PARAMID", "PARAMINFO", "PARENT", "PARTITION", "PARTITION_L", 
                      "PARTITIONED", "PARTITIONNAMES", "PASS", "PASSING", 
                      "PATH_GENERATOR", "PATH_START", "PATH_SUMMARIZER", 
                      "PATTERN", "PERCENTILE", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERIOD", "PIVOT", "PORTION", "POWER", "PRECEDES", 
                      "PRECEDING", "PREFIX", "PRINT", "PRIOR", "PROTECTED", 
                      "QUARTER_BEGIN", "QUARTER_END", "QUARTER_OF_CALENDAR", 
                      "QUARTER_OF_YEAR", "QUARTERNUMBER_OF_CALENDAR", "QUARTERNUMBER_OF_YEAR", 
                      "QUERY", "QUERY_BAND", "QUOTECHAR", "RANDOMIZED", 
                      "RANGE", "RANGE_L", "RAPIDFIRE", "RDIFF", "READ", 
                      "RECALC", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SIMILAR", 
                      "REGEXP_SUBSTR", "REPLACEMENT", "RESET", "RESPECT", 
                      "RESTRICTWORDS", "RETAIN", "RETURNED_SQLSTATE", "RETURNING", 
                      "REUSE", "ROOT", "ROTATELEFT", "ROTATERIGHT", "ROUND", 
                      "ROW_COUNT", "ROWIDGEN", "ROWIDGEN2", "RPAD", "RTRIM", 
                      "RU", "RULES", "RULESET", "SAMPLES", "SATURDAY", "SCHEMA", 
                      "SCRIPT", "SCRIPT_COMMAND", "SEARCHSPACE", "SEARCHUIFDBPATH", 
                      "SECURITY", "SEED", "SELF", "SEQ", "SEQUENCE", "SEQUENCED", 
                      "SERIALIZABLE", "SERVER", "SESSIONIZE", "SETBIT", 
                      "SETRESOURCERATE", "SETSESSIONACCOUNT", "SETSESSIONRATE", 
                      "SHARE", "SHIFTLEFT", "SHIFTRIGHT", "SIGN", "SIZE", 
                      "SNAPPY_COMPRESS", "SNAPPY_DECOMPRESS", "SOURCE", 
                      "SPARSE", "SPECCHAR", "SPL", "SQLSTATE", "SR", "ST_GEOMETRY", 
                      "STAT", "STATIC", "STATS", "STATSUSAGE", "STORAGE", 
                      "STRIP", "STRTOK", "STYLE", "SUBBITSTR", "SUBCLASS_ORIGIN", 
                      "SUCCEEDS", "SUMMARYONLY", "SUNDAY", "SYMBOLS", "SYSTEM", 
                      "SYSTEM_TIME", "SYSTEMTEST", "TARGET", "TD_ARRAY2P", 
                      "TD_DATASET", "TD_DAY_OF_CALENDAR", "TD_DAY_OF_MONTH", 
                      "TD_DAY_OF_WEEK", "TD_DAY_OF_YEAR", "TD_GENERAL", 
                      "TD_GETTIMEBUCKET", "TD_INTERNAL", "TD_LZ_COMPRESS", 
                      "TD_LZ_DECOMPRESS", "TD_MONTH_OF_CALENDAR", "TD_MONTH_OF_QUARTER", 
                      "TD_MONTH_OF_YEAR", "TD_QUARTER_OF_CALENDAR", "TD_QUARTER_OF_YEAR", 
                      "TD_TIME_BUCKET_NUMBER", "TD_WEEK_OF_CALENDAR", "TD_WEEK_OF_MONTH", 
                      "TD_WEEK_OF_YEAR", "TD_WEEKDAY_OF_MONTH", "TD_YEAR_OF_CALENDAR", 
                      "TDWMEVENT", "TDWMEXCEPTION", "TDWMHISTORY", "TEMPORAL_DATE", 
                      "TEMPORAL_TIMESTAMP", "TEXT", "THRESHOLDPERCENT", 
                      "THROUGH", "THURSDAY", "TIES", "TIMECODE", "TIMECOLUMN", 
                      "TIMEOUT", "TIMESTAMPCOLUMN", "TO_BYTE", "TO_BYTES", 
                      "TO_CHAR", "TO_DATE", "TO_DSINTERVAL", "TO_NUMBER", 
                      "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", 
                      "TOTOKEN", "TPA", "TRANSACTION_ACTIVE", "TRANSUNICODETOUTF8", 
                      "TRANSUTF8TOUNICODE", "TRUE", "TRUNC", "TRUST_ONLY", 
                      "TTGRANULARITY", "TUESDAY", "UBJSON", "UCASE", "UDFSEARCHPATH", 
                      "UNBOUNDED", "UNCOMMITTED", "UNICODE", "UNKNOWN", 
                      "UNPIVOT", "USE", "USECOUNT", "UTILITYINFO", "VARRAY", 
                      "VERBOSE", "VERSION", "VERSIONING", "WARNING", "WEDNESDAY", 
                      "WEEK_BEGIN", "WEEK_END", "WEEK_OF_CALENDAR", "WEEK_OF_MONTH", 
                      "WEEK_OF_YEAR", "WEEKDAY_OF_MONTH", "WEEKNUMBER_OF_CALENDAR", 
                      "WEEKNUMBER_OF_MONTH", "WEEKNUMBER_OF_QUARTER", "WEEKNUMBER_OF_YEAR", 
                      "WHITESPACE", "WINDOWSIZE", "WITHIN", "WORKLOAD", 
                      "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCOMMENT", 
                      "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT", "XMLELEMENT", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTEXT", "XMLTYPE", "XMLVALIDATE", "YEAR_BEGIN", 
                      "YEAR_END", "YEAR_OF_CALENDAR", "YEARNUMBER_OF_CALENDAR", 
                      "ZLIB", "BUCKET", "COMMITTED", "CREATEXML", "CS_LATIN", 
                      "CS_UNICODE", "CS_KANJISJIS", "CS_GRAPHIC", "CSV", 
                      "CSVLD", "DATASIZE", "DAYOFMONTH", "DAYS", "DEFINITION", 
                      "DELETED", "FAST", "LISTAGG", "PATH", "REGEXP_SPLIT_TO_TABLE", 
                      "REVERSE", "SAS", "SQLTABLE", "STRTOK_SPLIT_TO_TABLE", 
                      "SYSLIB", "SYSUDTLIB", "TD_SERVER_DB", "TD_SYSFNLIB", 
                      "TD_SYSXML", "TIMEDATEWZCONTROL", "TRUST", "TRYCAST", 
                      "UDT", "USAGE", "VARIANT", "WEEK", "WIDTH", "XMLPUBLISH", 
                      "XMLPUBLISH_STREAM", "XMLSPLIT", "LATIN_TO_UNICODE", 
                      "UNICODE_TO_LATIN", "LOCALE_TO_UNICODE", "UNICODE_TO_LOCALE", 
                      "ASBSON", "ASBSONTEXT", "COMBINE", "EXISTVALUE", "JSONEXTRACT", 
                      "JSONEXTRACTVALUE", "JSONEXTRACTLARGEVALUE", "KEYCOUNT", 
                      "METADATA", "STORAGE_SIZE", "CREATESCHEMABASEDXML", 
                      "CREATENONSCHEMABASEDXML", "EXISTSNODE", "ISCONTENT", 
                      "ISDOCUMENT", "ISSCHEMAVALID", "ISSCHEMAVALIDATED", 
                      "XMLEXTRACT", "XMLTRANSFORM", "PROC_ID", "LOCATION", 
                      "PAYLOAD", "TRUSTED", "PATHPATTERN", "MANIFEST", "ROWFORMAT", 
                      "STOREDAS", "HEADER", "STRIP_EXTERIOR_SPACES", "STRIP_ENCLOSING_CHAR", 
                      "RLS", "SINGLE", "MULTIPLE", "JSON_COMPRESS", "JSON_DECOMPRESS", 
                      "TS_COMPRESS", "TS_DECOMPRESS", "CONTIGUOUSMAPAMPS", 
                      "SPARSEMAPAMPS", "SPARSETABLEAMPS", "UNNEST", "CALCMATRIX", 
                      "PHRASE", "CALCTYPE", "OUTPUT", "NULL_HANDLING", "READ_NOS", 
                      "BUFFERSIZE", "RETURNTYPE", "SAMPLE_PERC", "FULLSCAN", 
                      "TD_UNPIVOT", "VALUE_COLUMNS", "UNPIVOT_COLUMN", "COLUMN_LIST", 
                      "COLUMN_ALIAS_LIST", "INCLUDE_NULLS", "WRITE_NOS", 
                      "NAMING", "MANIFESTFILE", "MANIFESTONLY", "OVERWRITE", 
                      "INCLUDE_ORDERING", "INCLUDE_HASHBY", "MAXOBJECTSIZE", 
                      "COMPRESSION", "ARRAY_TO_JSON", "BSON_CHECK", "GEOJSONFROMGEOM", 
                      "GEOMFROMGEOJSON", "JSON_CHECK", "JSONGETVALUE", "JSONMETADATA", 
                      "NVP2JSON", "TD_JSONSHRED", "JSON_KEYS", "JSON_TABLE", 
                      "DEPTH", "QUOTES", "ROWEXPR", "COLEXPR", "RETURNTYPES", 
                      "NOCASE", "TRUNCATE", "LINK", "OBJECT_NAME", "UNSIGNED_INTEGER", 
                      "HEX_BYTE_LITERAL", "HEX_INTEGER_LITERAL", "FLOAT_LITERAL", 
                      "DATE_STRING", "TIME_STRING", "TIMESTAMP_STRING", 
                      "PERIOD_STRING", "UNICODE_STRING_LEADING", "CHAR_STRING", 
                      "HEX_STRING", "PASSWORD_STRING", "SEMICOLON", "COLON", 
                      "COMMA", "DOT_", "AT_SIGN", "CARET", "QUESTION_MARK", 
                      "OPEN_PAR", "CLOSE_PAR", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
                      "CONCATENATE", "BROKEN_CONCATENATE", "MUL_SIGN", "DIV_SIGN", 
                      "PLUS_SIGN", "MINUS_SIGN", "EXPONENTIATION", "EQUALS_SIGN", 
                      "NOT_EQUALS_SIGN", "NOT_EQUALS_SIGN_TD", "LT_SIGN", 
                      "LE_SIGN", "GT_SIGN", "GE_SIGN", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT", "WS" ]

    RULE_query_expr = 0
    RULE_query_term = 1
    RULE_with_deleted_rows = 2
    RULE_as_json = 3
    RULE_select_list = 4
    RULE_top_n = 5
    RULE_normalize = 6
    RULE_all_operator = 7
    RULE_selected_columns = 8
    RULE_selected_column = 9
    RULE_into_clause = 10
    RULE_from_clause = 11
    RULE_from_spec = 12
    RULE_join_source_spec = 13
    RULE_join_joined_spec = 14
    RULE_from_pivot_spec = 15
    RULE_from_unpivot_spec = 16
    RULE_table_reference = 17
    RULE_join_clause = 18
    RULE_join_on_clause = 19
    RULE_foreign_table_reference = 20
    RULE_foreign_function_reference = 21
    RULE_foreign_on_clause = 22
    RULE_exported_data = 23
    RULE_foreign_using_clause = 24
    RULE_foreign_parameter = 25
    RULE_foreign_returns_clause = 26
    RULE_server_name_reference = 27
    RULE_table_function_reference = 28
    RULE_udt_table_function = 29
    RULE_unnest_table_function = 30
    RULE_table_function_returns_clause = 31
    RULE_table_function_local_order_by_clause = 32
    RULE_table_function_hash_by_clause = 33
    RULE_table_operator_reference = 34
    RULE_xmltable_operator = 35
    RULE_calcmatrix_table_operator = 36
    RULE_read_nos_table_operator = 37
    RULE_script_table_operator = 38
    RULE_td_unpivot_table_operator = 39
    RULE_write_nos_table_operator = 40
    RULE_json_table_table_operator = 41
    RULE_json_keys_table_operator = 42
    RULE_json_shred_table_operator = 43
    RULE_generic_table_operator = 44
    RULE_table_operator_on_clause = 45
    RULE_table_operator_execute_clause = 46
    RULE_table_operator_out_table_clause = 47
    RULE_table_operator_using_clause = 48
    RULE_table_operator_using_spec = 49
    RULE_json_keys_using_name_value_pair = 50
    RULE_hash_or_partition_by = 51
    RULE_subquery_reference = 52
    RULE_location = 53
    RULE_read_nos_option = 54
    RULE_write_nos_option = 55
    RULE_with_clause = 56
    RULE_with_clause_by_phrase = 57
    RULE_with_clause_title_phrase = 58
    RULE_where_clause = 59
    RULE_group_by_clause = 60
    RULE_group_by_spec = 61
    RULE_ordinary_grouping_set = 62
    RULE_ordinary_grouping_set_parenthesized = 63
    RULE_empty_grouping_set = 64
    RULE_rollup_option = 65
    RULE_cube_option = 66
    RULE_grouping_sets_option = 67
    RULE_grouping_sets_spec = 68
    RULE_having_clause = 69
    RULE_qualify_clause = 70
    RULE_sample_clause = 71
    RULE_sample_fraction_description = 72
    RULE_sample_count_description = 73
    RULE_sample_when_clause = 74
    RULE_expand_on_clause = 75
    RULE_order_by_clause = 76
    RULE_order_by_spec_full = 77
    RULE_order_by_spec_asc_desc_only = 78
    RULE_with_check_option = 79
    RULE_logical_expr = 80
    RULE_scalar_expr = 81
    RULE_tuple = 82
    RULE_tuple_attribute = 83
    RULE_case_expr = 84
    RULE_valued_case_expr = 85
    RULE_searched_case_expr = 86
    RULE_coalesce_expr = 87
    RULE_nullif_expr = 88
    RULE_interval_expr_base = 89
    RULE_interval_expr_parenthesized = 90
    RULE_interval_expr_start_end_phrase = 91
    RULE_function_invocation = 92
    RULE_aggregate_function = 93
    RULE_analytic_function = 94
    RULE_arithmetic_function = 95
    RULE_array_function = 96
    RULE_attribute_function = 97
    RULE_byte_function = 98
    RULE_builtin_function = 99
    RULE_calendar_function = 100
    RULE_comparison_function = 101
    RULE_compression_function = 102
    RULE_conversion_function = 103
    RULE_date_function = 104
    RULE_hash_function = 105
    RULE_lob_function = 106
    RULE_map_function = 107
    RULE_nvl_funtion = 108
    RULE_period_function = 109
    RULE_regexp_function = 110
    RULE_string_function = 111
    RULE_json_function = 112
    RULE_xml_function = 113
    RULE_other_function = 114
    RULE_partitioning_expr = 115
    RULE_td_sysfnlib = 116
    RULE_td_sysxml = 117
    RULE_syslib = 118
    RULE_td_server_db = 119
    RULE_translation_mapping = 120
    RULE_attribute_modification = 121
    RULE_returns_clause = 122
    RULE_attribute_modification_option = 123
    RULE_teradata_type_conversion = 124
    RULE_teradata_type_conversion_data_attribute = 125
    RULE_case_spec = 126
    RULE_range_expr = 127
    RULE_range_list = 128
    RULE_range_expr_1 = 129
    RULE_range_expr_2 = 130
    RULE_range_expr_3 = 131
    RULE_range_spec = 132
    RULE_hash_bucket_number_expr = 133
    RULE_window_spec = 134
    RULE_window_spec_without_rows = 135
    RULE_window_spec_with_ties = 136
    RULE_window_partition_by = 137
    RULE_window_order_by = 138
    RULE_window_rows = 139
    RULE_json_param_spec = 140
    RULE_xml_query_argument = 141
    RULE_xml_query_variable_spec = 142
    RULE_xml_attribute_declaration = 143
    RULE_xml_attribute_spec = 144
    RULE_xml_forest_element_spec = 145
    RULE_xml_value_declaration = 146
    RULE_xml_namespace_declaration = 147
    RULE_xml_namespace_spec = 148
    RULE_xml_columns_spec = 149
    RULE_xml_regular_column_definition = 150
    RULE_xml_encoding = 151
    RULE_xml_query_on_empty = 152
    RULE_xml_returning_spec = 153
    RULE_xml_content_option_spec = 154
    RULE_ignore_respect_nulls = 155
    RULE_number_of_rows = 156
    RULE_with_ties = 157
    RULE_pivot = 158
    RULE_pivot_spec = 159
    RULE_pivot_with_phrase = 160
    RULE_pivot_agg_func_spec = 161
    RULE_pivot_for_phrase = 162
    RULE_pivot_with_spec = 163
    RULE_pivot_expr_spec_scalar = 164
    RULE_pivot_expr_spec_list = 165
    RULE_unpivot = 166
    RULE_unpivot_spec = 167
    RULE_unpivot_column_name_spec_single = 168
    RULE_unpivot_column_name_spec_list = 169
    RULE_at_timezone = 170
    RULE_elements_list = 171
    RULE_scalar_expr_list = 172
    RULE_scalar_expr_list_comma_separated = 173
    RULE_column_list = 174
    RULE_subquery = 175
    RULE_column_spec = 176
    RULE_variable_reference = 177
    RULE_cursor_variable_reference = 178
    RULE_macro_parameter_reference = 179
    RULE_array_scope_reference = 180
    RULE_comparison_operator = 181
    RULE_quantifier = 182
    RULE_literal = 183
    RULE_hex_byte_literal = 184
    RULE_char_string_literal = 185
    RULE_unicode_char_string_literal = 186
    RULE_hex_char_string_literal = 187
    RULE_integer_literal = 188
    RULE_hex_integer_literal = 189
    RULE_float_literal = 190
    RULE_character_set_prefix = 191
    RULE_date_literal = 192
    RULE_time_literal = 193
    RULE_timestamp_literal = 194
    RULE_interval_literal = 195
    RULE_interval_qualifier = 196
    RULE_period_literal = 197
    RULE_column_name = 198
    RULE_unqualified_column_name = 199
    RULE_unqualified_name = 200
    RULE_object_name = 201
    RULE_table_name = 202
    RULE_procedure_name = 203
    RULE_function_name = 204
    RULE_macro_name = 205
    RULE_database_name = 206
    RULE_user_name = 207
    RULE_role_name = 208
    RULE_profile_name = 209
    RULE_alias_name = 210
    RULE_variable_name = 211
    RULE_parameter_name = 212
    RULE_label_name = 213
    RULE_condition_name = 214
    RULE_cursor_name = 215
    RULE_statement_name = 216
    RULE_statistics_name = 217
    RULE_udt_name = 218
    RULE_attribute_name = 219
    RULE_method_name = 220
    RULE_anchor_name = 221
    RULE_nonreserved_word = 222
    RULE_data_type = 223
    RULE_variable_data_type = 224
    RULE_external_function_data_type = 225
    RULE_numeric_data_type = 226
    RULE_char_data_type = 227
    RULE_precisionless_char_data_type = 228
    RULE_lob_as_locator_data_type = 229
    RULE_binary_data_type = 230
    RULE_datetime_type = 231
    RULE_period_type = 232
    RULE_udt_type = 233
    RULE_data_type_attribute = 234
    RULE_default_value_control_phrase = 235
    RULE_default_value = 236
    RULE_column_naming_phrase = 237
    RULE_sysudtlib = 238
    RULE_interval_period_spec = 239
    RULE_type_precision = 240
    RULE_max_length_k_m_g = 241
    RULE_max_length_k_m = 242
    RULE_character_set_phrase = 243
    RULE_uppercase_phrase = 244
    RULE_casespecific_phrase = 245
    RULE_format_phrase = 246
    RULE_title_phrase = 247
    RULE_named_phrase = 248
    RULE_latin_unicode_character_set_phrase = 249
    RULE_inline_length = 250
    RULE_json_storage_format = 251
    RULE_dataset_storage_format_clause = 252
    RULE_dataset_storage_format = 253
    RULE_with_schema = 254
    RULE_with_time_zone = 255
    RULE_request_modifier = 256
    RULE_locking_request_modifier = 257
    RULE_locking_spec = 258
    RULE_lock_type = 259
    RULE_with_request_modifier = 260
    RULE_cte_spec = 261
    RULE_regular_cte_spec = 262
    RULE_recursive_cte_spec = 263
    RULE_using_request_modifier = 264
    RULE_using_spec = 265
    RULE_explain_request_modifier = 266

    ruleNames =  [ "query_expr", "query_term", "with_deleted_rows", "as_json", 
                   "select_list", "top_n", "normalize", "all_operator", 
                   "selected_columns", "selected_column", "into_clause", 
                   "from_clause", "from_spec", "join_source_spec", "join_joined_spec", 
                   "from_pivot_spec", "from_unpivot_spec", "table_reference", 
                   "join_clause", "join_on_clause", "foreign_table_reference", 
                   "foreign_function_reference", "foreign_on_clause", "exported_data", 
                   "foreign_using_clause", "foreign_parameter", "foreign_returns_clause", 
                   "server_name_reference", "table_function_reference", 
                   "udt_table_function", "unnest_table_function", "table_function_returns_clause", 
                   "table_function_local_order_by_clause", "table_function_hash_by_clause", 
                   "table_operator_reference", "xmltable_operator", "calcmatrix_table_operator", 
                   "read_nos_table_operator", "script_table_operator", "td_unpivot_table_operator", 
                   "write_nos_table_operator", "json_table_table_operator", 
                   "json_keys_table_operator", "json_shred_table_operator", 
                   "generic_table_operator", "table_operator_on_clause", 
                   "table_operator_execute_clause", "table_operator_out_table_clause", 
                   "table_operator_using_clause", "table_operator_using_spec", 
                   "json_keys_using_name_value_pair", "hash_or_partition_by", 
                   "subquery_reference", "location", "read_nos_option", 
                   "write_nos_option", "with_clause", "with_clause_by_phrase", 
                   "with_clause_title_phrase", "where_clause", "group_by_clause", 
                   "group_by_spec", "ordinary_grouping_set", "ordinary_grouping_set_parenthesized", 
                   "empty_grouping_set", "rollup_option", "cube_option", 
                   "grouping_sets_option", "grouping_sets_spec", "having_clause", 
                   "qualify_clause", "sample_clause", "sample_fraction_description", 
                   "sample_count_description", "sample_when_clause", "expand_on_clause", 
                   "order_by_clause", "order_by_spec_full", "order_by_spec_asc_desc_only", 
                   "with_check_option", "logical_expr", "scalar_expr", "tuple", 
                   "tuple_attribute", "case_expr", "valued_case_expr", "searched_case_expr", 
                   "coalesce_expr", "nullif_expr", "interval_expr_base", 
                   "interval_expr_parenthesized", "interval_expr_start_end_phrase", 
                   "function_invocation", "aggregate_function", "analytic_function", 
                   "arithmetic_function", "array_function", "attribute_function", 
                   "byte_function", "builtin_function", "calendar_function", 
                   "comparison_function", "compression_function", "conversion_function", 
                   "date_function", "hash_function", "lob_function", "map_function", 
                   "nvl_funtion", "period_function", "regexp_function", 
                   "string_function", "json_function", "xml_function", "other_function", 
                   "partitioning_expr", "td_sysfnlib", "td_sysxml", "syslib", 
                   "td_server_db", "translation_mapping", "attribute_modification", 
                   "returns_clause", "attribute_modification_option", "teradata_type_conversion", 
                   "teradata_type_conversion_data_attribute", "case_spec", 
                   "range_expr", "range_list", "range_expr_1", "range_expr_2", 
                   "range_expr_3", "range_spec", "hash_bucket_number_expr", 
                   "window_spec", "window_spec_without_rows", "window_spec_with_ties", 
                   "window_partition_by", "window_order_by", "window_rows", 
                   "json_param_spec", "xml_query_argument", "xml_query_variable_spec", 
                   "xml_attribute_declaration", "xml_attribute_spec", "xml_forest_element_spec", 
                   "xml_value_declaration", "xml_namespace_declaration", 
                   "xml_namespace_spec", "xml_columns_spec", "xml_regular_column_definition", 
                   "xml_encoding", "xml_query_on_empty", "xml_returning_spec", 
                   "xml_content_option_spec", "ignore_respect_nulls", "number_of_rows", 
                   "with_ties", "pivot", "pivot_spec", "pivot_with_phrase", 
                   "pivot_agg_func_spec", "pivot_for_phrase", "pivot_with_spec", 
                   "pivot_expr_spec_scalar", "pivot_expr_spec_list", "unpivot", 
                   "unpivot_spec", "unpivot_column_name_spec_single", "unpivot_column_name_spec_list", 
                   "at_timezone", "elements_list", "scalar_expr_list", "scalar_expr_list_comma_separated", 
                   "column_list", "subquery", "column_spec", "variable_reference", 
                   "cursor_variable_reference", "macro_parameter_reference", 
                   "array_scope_reference", "comparison_operator", "quantifier", 
                   "literal", "hex_byte_literal", "char_string_literal", 
                   "unicode_char_string_literal", "hex_char_string_literal", 
                   "integer_literal", "hex_integer_literal", "float_literal", 
                   "character_set_prefix", "date_literal", "time_literal", 
                   "timestamp_literal", "interval_literal", "interval_qualifier", 
                   "period_literal", "column_name", "unqualified_column_name", 
                   "unqualified_name", "object_name", "table_name", "procedure_name", 
                   "function_name", "macro_name", "database_name", "user_name", 
                   "role_name", "profile_name", "alias_name", "variable_name", 
                   "parameter_name", "label_name", "condition_name", "cursor_name", 
                   "statement_name", "statistics_name", "udt_name", "attribute_name", 
                   "method_name", "anchor_name", "nonreserved_word", "data_type", 
                   "variable_data_type", "external_function_data_type", 
                   "numeric_data_type", "char_data_type", "precisionless_char_data_type", 
                   "lob_as_locator_data_type", "binary_data_type", "datetime_type", 
                   "period_type", "udt_type", "data_type_attribute", "default_value_control_phrase", 
                   "default_value", "column_naming_phrase", "sysudtlib", 
                   "interval_period_spec", "type_precision", "max_length_k_m_g", 
                   "max_length_k_m", "character_set_phrase", "uppercase_phrase", 
                   "casespecific_phrase", "format_phrase", "title_phrase", 
                   "named_phrase", "latin_unicode_character_set_phrase", 
                   "inline_length", "json_storage_format", "dataset_storage_format_clause", 
                   "dataset_storage_format", "with_schema", "with_time_zone", 
                   "request_modifier", "locking_request_modifier", "locking_spec", 
                   "lock_type", "with_request_modifier", "cte_spec", "regular_cte_spec", 
                   "recursive_cte_spec", "using_request_modifier", "using_spec", 
                   "explain_request_modifier" ]

    EOF = Token.EOF
    ABORT=1
    ABORTSESSION=2
    ABS=3
    ACCESS_LOCK=4
    ACCOUNT=5
    ACOS=6
    ACOSH=7
    ADD=8
    ADD_MONTHS=9
    ADMIN=10
    AFTER=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    AMP=15
    AND=16
    ANSIDATE=17
    ANY=18
    ARGLPAREN=19
    AS=20
    ASC=21
    ASIN=22
    ASINH=23
    AT=24
    ATAN=25
    ATAN2=26
    ATANH=27
    ATOMIC=28
    AUTHORIZATION=29
    AVE=30
    AVERAGE=31
    AVG=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BIGINT=36
    BINARY=37
    BLOB=38
    BOTH=39
    BT=40
    BUT=41
    BY=42
    BYTE=43
    BYTEINT=44
    BYTES=45
    CALL=46
    CASE=47
    CASE_N=48
    CASESPECIFIC=49
    CAST=50
    CD=51
    CHAR=52
    CHAR_LENGTH=53
    CHAR2HEXINT=54
    CHARACTER=55
    CHARACTER_LENGTH=56
    CHARACTERS=57
    CHARS=58
    CHECK=59
    CHECKPOINT=60
    CLASS=61
    CLOB=62
    CLOSE=63
    CLUSTER=64
    CM=65
    COALESCE=66
    COLLATION=67
    COLLECT=68
    COLUMN=69
    COMMENT=70
    COMMIT=71
    COMPRESS=72
    CONNECT=73
    CONSTRAINT=74
    CONSTRUCTOR=75
    CONSUME=76
    CONTAINS=77
    CONTINUE=78
    CONVERT_TABLE_HEADER=79
    CORR=80
    COS=81
    COSH=82
    COUNT=83
    COVAR_POP=84
    COVAR_SAMP=85
    CREATE=86
    CROSS=87
    CS=88
    CSUM=89
    CT=90
    CTCONTROL=91
    CUBE=92
    CURRENT=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CV=100
    CYCLE=101
    DATABASE=102
    DATABLOCKSIZE=103
    DATE=104
    DATEFORM=105
    DAY=106
    DEALLOCATE=107
    DEC=108
    DECIMAL=109
    DECLARE=110
    DEFAULT=111
    DEFERRED=112
    DEGREES=113
    DEL=114
    DELETE=115
    DESC=116
    DETERMINISTIC=117
    DIAGNOSTIC=118
    DICTIONARY=119
    DISABLED=120
    DISTINCT=121
    DO=122
    DOMAIN=123
    DOUBLE=124
    DROP=125
    DUAL=126
    DUMP=127
    DYNAMIC=128
    EACH=129
    ECHO=130
    ELSE=131
    ELSEIF=132
    ENABLED=133
    END=134
    EQ=135
    EQUALS=136
    ERROR=137
    ERRORFILES=138
    ERRORTABLES=139
    ESCAPE=140
    ET=141
    EXCEPT=142
    EXEC=143
    EXECUTE=144
    EXISTS=145
    EXIT=146
    EXP=147
    EXPAND=148
    EXPANDING=149
    EXPLAIN=150
    EXTERNAL=151
    EXTRACT=152
    FALLBACK=153
    FASTEXPORT=154
    FETCH=155
    FIRST=156
    FLOAT=157
    FLUSH=158
    FOR=159
    FOREIGN=160
    FORMAT=161
    FOUND=162
    FREESPACE=163
    FROM=164
    FULL=165
    FUNCTION=166
    FUNCTIONDESCRIPTOR=167
    GE=168
    GENERATED=169
    GET=170
    GIVE=171
    GRANT=172
    GRAPHIC=173
    GROUP=174
    GROUPING=175
    GT=176
    HANDLER=177
    HASH=178
    HASHAMP=179
    HASHBAKAMP=180
    HASHBUCKET=181
    HASHROW=182
    HAVING=183
    HELP=184
    HOUR=185
    ID2BIGINT=186
    IDENTITY=187
    IF=188
    IMMEDIATE=189
    IN=190
    INCONSISTENT=191
    INDEX=192
    INITIATE=193
    INNER=194
    INOUT=195
    INPUT=196
    INS=197
    INSERT=198
    INSTANCE=199
    INSTEAD=200
    INT=201
    INTEGER=202
    INTEGERDATE=203
    INTERSECT=204
    INTERVAL=205
    INTO=206
    IS=207
    ITERATE=208
    JAR=209
    JOIN=210
    JOURNAL=211
    KEY=212
    KURTOSIS=213
    LANGUAGE=214
    LARGE=215
    LE=216
    LEADING=217
    LEAVE=218
    LEFT=219
    LIKE=220
    LIMIT=221
    LN=222
    LOADING=223
    LOCAL=224
    LOCATOR=225
    LOCK=226
    LOCKING=227
    LOG=228
    LOGGING=229
    LOGON=230
    LONG=231
    LOOP=232
    LOWER=233
    LT=234
    MACRO=235
    MAP=236
    MAVG=237
    MAX=238
    MAXIMUM=239
    MCHARACTERS=240
    MDIFF=241
    MERGE=242
    METHOD=243
    MIN=244
    MINDEX=245
    MINIMUM=246
    MINUS=247
    MINUTE=248
    MLINREG=249
    MLOAD=250
    MOD=251
    MODE=252
    MODIFIES=253
    MODIFY=254
    MONITOR=255
    MONRESOURCE=256
    MONSESSION=257
    MONTH=258
    MSUBSTR=259
    MSUM=260
    MULTISET=261
    NAMED=262
    NATURAL=263
    NE=264
    NEW=265
    NEW_TABLE=266
    NEXT=267
    NO=268
    NONE=269
    NONTEMPORAL=270
    NORMALIZE=271
    NOT=272
    NOWAIT=273
    NULL=274
    NULLIF=275
    NULLIFZERO=276
    NUMBER=277
    NUMERIC=278
    OBJECT=279
    OBJECTS=280
    OCTET_LENGTH=281
    OF=282
    OFF=283
    OLD=284
    OLD_TABLE=285
    ON=286
    ONLY=287
    OPEN=288
    OPTION=289
    OR=290
    ORDER=291
    ORDERING=292
    OUT=293
    OUTER=294
    OVER=295
    OVERLAPS=296
    OVERRIDE=297
    PARAMETER=298
    PASSWORD=299
    PERCENT=300
    PERCENT_RANK=301
    PERM=302
    PERMANENT=303
    POSITION=304
    PRECISION=305
    PREPARE=306
    PRESERVE=307
    PRIMARY=308
    PRIVILEGES=309
    PROCEDURE=310
    PROFILE=311
    PROTECTION=312
    PUBLIC=313
    QUALIFIED=314
    QUALIFY=315
    QUANTILE=316
    QUEUE=317
    RADIANS=318
    RANDOM=319
    RANGE_N=320
    RANK=321
    READS=322
    REAL=323
    RECURSIVE=324
    REFERENCES=325
    REFERENCING=326
    REGR_AVGX=327
    REGR_AVGY=328
    REGR_COUNT=329
    REGR_INTERCEPT=330
    REGR_R2=331
    REGR_SLOPE=332
    REGR_SXX=333
    REGR_SXY=334
    REGR_SYY=335
    RELATIVE=336
    RELEASE=337
    RENAME=338
    REPEAT=339
    REPLACE=340
    REPLCONTROL=341
    REPLICATION=342
    REQUEST=343
    RESIGNAL=344
    RESTART=345
    RESTORE=346
    RESULT=347
    RESUME=348
    RET=349
    RETRIEVE=350
    RETURN=351
    RETURNS=352
    REVALIDATE=353
    REVOKE=354
    RIGHT=355
    RIGHTS=356
    ROLE=357
    ROLLBACK=358
    ROLLFORWARD=359
    ROLLUP=360
    ROW=361
    ROW_NUMBER=362
    ROWID=363
    ROWS=364
    SAMPLE=365
    SAMPLEID=366
    SCROLL=367
    SECOND=368
    SEL=369
    SELECT=370
    SESSION=371
    SET=372
    SETRESRATE=373
    SETS=374
    SETSESSRATE=375
    SHOW=376
    SIGNAL=377
    SIN=378
    SINH=379
    SKEW=380
    SMALLINT=381
    SOME=382
    SOUNDEX=383
    SPECIFIC=384
    SPOOL=385
    SQL=386
    SQLEXCEPTION=387
    SQLTEXT=388
    SQLWARNING=389
    SQRT=390
    SS=391
    START=392
    STARTUP=393
    STATEMENT=394
    STATISTICS=395
    STDDEV_POP=396
    STDDEV_SAMP=397
    STEPINFO=398
    STRING_CS=399
    SUBSCRIBER=400
    SUBSTR=401
    SUBSTRING=402
    SUM=403
    SUMMARY=404
    SUSPEND=405
    TABLE=406
    TAN=407
    TANH=408
    TBL_CS=409
    TD_ANYTYPE=410
    TD_AUTHID=411
    TD_HOST=412
    TD_ROWLOADID=413
    TD_ROWREVISION=414
    TD_ROWSIZE=415
    TD_VALIST=416
    TEMPORARY=417
    TERMINATE=418
    THEN=419
    THRESHOLD=420
    TIME=421
    TIMESTAMP=422
    TIMEZONE_HOUR=423
    TIMEZONE_MINUTE=424
    TITLE=425
    TO=426
    TOP=427
    TRACE=428
    TRAILING=429
    TRANSACTION=430
    TRANSACTIONTIME=431
    TRANSFORM=432
    TRANSLATE=433
    TRANSLATE_CHK=434
    TRIGGER=435
    TRIM=436
    TYPE=437
    UC=438
    UDTCASTAS=439
    UDTCASTLPAREN=440
    UDTMETHOD=441
    UDTTYPE=442
    UDTUSAGE=443
    UESCAPE=444
    UNDEFINED=445
    UNDO=446
    UNION=447
    UNIQUE=448
    UNTIL=449
    UNTIL_CHANGED=450
    UNTIL_CLOSED=451
    UPD=452
    UPDATE=453
    UPPER=454
    UPPERCASE=455
    USER=456
    USING=457
    VALIDTIME=458
    VALUE=459
    VALUES=460
    VAR_POP=461
    VAR_SAMP=462
    VARBYTE=463
    VARCHAR=464
    VARGRAPHIC=465
    VARIANT_TYPE=466
    VARYING=467
    VIEW=468
    VOLATILE=469
    WHEN=470
    WHERE=471
    WHILE=472
    WIDTH_BUCKET=473
    WITH=474
    WITHOUT=475
    WORK=476
    XMLPLAN=477
    YEAR=478
    ZEROIFNULL=479
    ZONE=480
    ALIAS=481
    DESCRIPTOR=482
    GO=483
    GOTO=484
    INDICATOR=485
    PRIVATE=486
    WAIT=487
    ABORTSESSIONS=488
    ABSENT=489
    ACCESS=490
    ACCORDING=491
    ACCUMULATE=492
    AG=493
    AGGGEOMINTERSECTION=494
    AGGGEOMUNION=495
    ALLDBQL=496
    ALLOCATE=497
    ALLOCATION=498
    ALLOW=499
    ALLPARAMS=500
    ALLTDWM=501
    ALWAYS=502
    AMPCOUNT=503
    ANALYSIS=504
    ANCHOR=505
    ANCHOR_HOUR=506
    ANCHOR_MILLISECOND=507
    ANCHOR_MINUTE=508
    ANCHOR_SECOND=509
    APPLNAME=510
    ARCHIVE=511
    ARRAY=512
    ARRAY_ADD=513
    ARRAY_AGG=514
    ARRAY_AVG=515
    ARRAY_COMPARE=516
    ARRAY_CONCAT=517
    ARRAY_COUNT_DISTINCT=518
    ARRAY_DIV=519
    ARRAY_EQ=520
    ARRAY_GE=521
    ARRAY_GET=522
    ARRAY_GT=523
    ARRAY_LE=524
    ARRAY_LT=525
    ARRAY_MAX=526
    ARRAY_MIN=527
    ARRAY_MOD=528
    ARRAY_MUL=529
    ARRAY_NE=530
    ARRAY_SUB=531
    ARRAY_SUM=532
    ARRAY_UPDATE=533
    ARRAY_UPDATE_STRIDE=534
    ASCII=535
    ASSIGNMENT=536
    ATTR=537
    ATTRIBUTE=538
    ATTRIBUTES=539
    ATTRIBUTION=540
    ATTRS=541
    AUTH=542
    AUTO=543
    AUTOTEMP=544
    AVRO=545
    BIT_LENGTH=546
    BITAND=547
    BITNOT=548
    BITOR=549
    BITXOR=550
    BLOCKCOMPRESSION=551
    BLOCKCOMPRESSIONALGORITHM=552
    BLOCKCOMPRESSIONLEVEL=553
    BOM=554
    BOTTOM=555
    BSON=556
    C=557
    CALENDAR=558
    CALLED=559
    CALLER=560
    CAMSET=561
    CAMSET_L=562
    CAPTURE=563
    CARDINALITY=564
    CEIL=565
    CEILING=566
    CHANGERATE=567
    CHARACTERISTICS=568
    CHARSET=569
    CHARSET_COLL=570
    CHECKSUM=571
    CHR=572
    CLASS_ORIGIN=573
    CLICKLAG=574
    CLIENT=575
    CNT=576
    COLOCATE=577
    COLUMNMETA=578
    COLUMNS=579
    COLUMNSPERINDEX=580
    COLUMNSPERJOININDEX=581
    COMMAND_FUNCTION=582
    COMMAND_FUNCTION_CODE=583
    COMPARISON=584
    COMPILE=585
    CONCAT=586
    CONCURRENT=587
    CONDITION=588
    CONDITION_IDENTIFIER=589
    CONDITION_NUMBER=590
    CONTAINED=591
    CONTAINEDTOKEN=592
    CONTENT=593
    CONTIGUOUS=594
    COST=595
    COSTS=596
    COUNTSET=597
    CPP=598
    CPUTIME=599
    CPUTIMENORM=600
    CREATEDATASET=601
    CREATOR=602
    CUME_DIST=603
    CURDATE=604
    CURTIME=605
    DATA=606
    DATASET=607
    DAY_OF_CALENDAR=608
    DAY_OF_MONTH=609
    DAY_OF_WEEK=610
    DAY_OF_YEAR=611
    DAYNUMBER_OF_CALENDAR=612
    DAYNUMBER_OF_MONTH=613
    DAYNUMBER_OF_WEEK=614
    DAYNUMBER_OF_YEAR=615
    DAYOCCURRENCE_OF_MONTH=616
    DBA=617
    DBC=618
    DEBUG=619
    DECAMSET=620
    DECAMSET_L=621
    DECODE=622
    DECOMPRESS=623
    DEFINER=624
    DELIMITER=625
    DELTA_T=626
    DEMOGRAPHICS=627
    DENIALS=628
    DENSE=629
    DENSE_RANK=630
    DESCRIBE=631
    DETAILED=632
    DIAGNOSTICS=633
    DIGITS=634
    DIMENSION=635
    DOCUMENT=636
    DOT=637
    DOWN=638
    DR=639
    DUPCOUNT=640
    DUPCOUNTCUM=641
    EBCDIC=642
    EDITDISTANCE=643
    ELAPSEDSEC=644
    ELAPSEDTIME=645
    ELEMENT=646
    ELZS_H=647
    EMITNULL=648
    EMPTY=649
    EMPTY_BLOB=650
    EMPTY_CLOB=651
    ENCODE=652
    ENCODING=653
    ENCRYPT=654
    ERRORS=655
    ERRORTBL=656
    EVENTCOLUMN=657
    EXCEPTION=658
    EXCL=659
    EXCLUDE=660
    EXCLUDING=661
    EXCLUSIVE=662
    EXPIRE=663
    EXPORT=664
    EXPORTWIDTH=665
    FALSE=666
    FEATUREINFO=667
    FILE=668
    FILL=669
    FILTER=670
    FINAL=671
    FIRST_NOTNULL=672
    FIRST_VALUE=673
    FLOOR=674
    FOLLOWING=675
    FOREIGNFUNCTION=676
    FORTOKEN=677
    FRIDAY=678
    FROM_BYTES=679
    FUNCTIONPARAMETER=680
    G=681
    GETBIT=682
    GETPSFVERSION=683
    GETQUERYBAND=684
    GETQUERYBANDVALUE=685
    GETTIMEZONEDISPLACEMENT=686
    GLOBAL=687
    GLOP=688
    GREATEST=689
    HIGH=690
    HOST=691
    IDENTIFYDATABASE=692
    IDENTIFYSESSION=693
    IDENTIFYTABLE=694
    IDENTIFYUSER=695
    IFP=696
    IGNORE=697
    IMMEDIATELY=698
    IMPORT=699
    INCLUDE=700
    INCLUDING=701
    INCREMENT=702
    INCREMENTAL=703
    INDENT=704
    INDEXESPERTABLE=705
    INDEXMAINTMODE=706
    INIT=707
    INITCAP=708
    INLINE=709
    INSTANTIABLE=710
    INSTR=711
    INTERNAL=712
    INVOKER=713
    IOCOUNT=714
    IPARTITION=715
    ISOLATED=716
    ISOLATION=717
    JAVA=718
    JIS_COLL=719
    JSON=720
    JSON_AGG=721
    JSON_COMPOSE=722
    K=723
    KANJI1=724
    KANJISJIS=725
    KBYTE=726
    KBYTES=727
    KEEP=728
    KILOBYTES=729
    LAG=730
    LAST=731
    LAST_DAY=732
    LAST_NOTNULL=733
    LAST_VALUE=734
    LATIN=735
    LDIFF=736
    LEAD=737
    LEAST=738
    LENGTH=739
    LEVEL=740
    LIST=741
    LOAD=742
    LOCATE=743
    LOCKEDUSEREXPIRE=744
    LOW=745
    LPAD=746
    LTRIM=747
    LZCOMP=748
    LZCOMP_L=749
    LZDECOMP=750
    LZDECOMP_L=751
    M=752
    MAD=753
    MANUAL=754
    MAPPING=755
    MATCHED=756
    MAX_CHOOSE=757
    MAXCHAR=758
    MAXINTERVALS=759
    MAXLOGONATTEMPTS=760
    MAXVALUE=761
    MAXVALUELENGTH=762
    MEDIAN=763
    MEDIUM=764
    MEETS=765
    MEMBER=766
    MERGEBLOCKRATIO=767
    MESSAGE_LENGTH=768
    MESSAGE_TEXT=769
    MIN_CHOOSE=770
    MINCHAR=771
    MINVALUE=772
    MODIFIED=773
    MONDAY=774
    MONITORQUERYBAND=775
    MONITORSESSIONRATE=776
    MONITORVERSION=777
    MONTH_BEGIN=778
    MONTH_END=779
    MONTH_OF_CALENDAR=780
    MONTH_OF_QUARTER=781
    MONTH_OF_YEAR=782
    MONTHNUMBER_OF_CALENDAR=783
    MONTHNUMBER_OF_QUARTER=784
    MONTHNUMBER_OF_YEAR=785
    MONTHS_BETWEEN=786
    MORE_=787
    MULTINATIONAL=788
    NAME=789
    NAMESPACE=790
    NEVER=791
    NEXT_DAY=792
    NGRAM=793
    NIL=794
    NODDLTEXT=795
    NODE=796
    NONOPTCOST=797
    NONOPTINIT=798
    NONSEQUENCED=799
    NORIGHT=800
    NOSEXTRACTVARFROMPATH=801
    NOTATION=802
    NOW=803
    NPATH=804
    NTH=805
    NULLS=806
    NUMFPFNS=807
    NUMTODSINTERVAL=808
    NUMTOYMINTERVAL=809
    NVL=810
    NVL2=811
    NVP=812
    OA=813
    OADD_MONTHS=814
    OCOUNT=815
    ODELETE=816
    OEXISTS=817
    OEXTEND=818
    OFIRST=819
    OLAST=820
    OLD_NEW_TABLE=821
    OLIMIT=822
    ONEXT=823
    ONLINE=824
    OPRIOR=825
    OPTIONS=826
    ORDERBYVALUES=827
    ORDERED_ANALYTIC=828
    ORDINALITY=829
    OREPLACE=830
    OTRANSLATE=831
    OTRIM=832
    OVERLAYS=833
    OWNER=834
    P_INTERSECT=835
    P_NORMALIZE=836
    PARAMID=837
    PARAMINFO=838
    PARENT=839
    PARTITION=840
    PARTITION_L=841
    PARTITIONED=842
    PARTITIONNAMES=843
    PASS=844
    PASSING=845
    PATH_GENERATOR=846
    PATH_START=847
    PATH_SUMMARIZER=848
    PATTERN=849
    PERCENTILE=850
    PERCENTILE_CONT=851
    PERCENTILE_DISC=852
    PERIOD=853
    PIVOT=854
    PORTION=855
    POWER=856
    PRECEDES=857
    PRECEDING=858
    PREFIX=859
    PRINT=860
    PRIOR=861
    PROTECTED=862
    QUARTER_BEGIN=863
    QUARTER_END=864
    QUARTER_OF_CALENDAR=865
    QUARTER_OF_YEAR=866
    QUARTERNUMBER_OF_CALENDAR=867
    QUARTERNUMBER_OF_YEAR=868
    QUERY=869
    QUERY_BAND=870
    QUOTECHAR=871
    RANDOMIZED=872
    RANGE=873
    RANGE_L=874
    RAPIDFIRE=875
    RDIFF=876
    READ=877
    RECALC=878
    REGEXP_INSTR=879
    REGEXP_REPLACE=880
    REGEXP_SIMILAR=881
    REGEXP_SUBSTR=882
    REPLACEMENT=883
    RESET=884
    RESPECT=885
    RESTRICTWORDS=886
    RETAIN=887
    RETURNED_SQLSTATE=888
    RETURNING=889
    REUSE=890
    ROOT=891
    ROTATELEFT=892
    ROTATERIGHT=893
    ROUND=894
    ROW_COUNT=895
    ROWIDGEN=896
    ROWIDGEN2=897
    RPAD=898
    RTRIM=899
    RU=900
    RULES=901
    RULESET=902
    SAMPLES=903
    SATURDAY=904
    SCHEMA=905
    SCRIPT=906
    SCRIPT_COMMAND=907
    SEARCHSPACE=908
    SEARCHUIFDBPATH=909
    SECURITY=910
    SEED=911
    SELF=912
    SEQ=913
    SEQUENCE=914
    SEQUENCED=915
    SERIALIZABLE=916
    SERVER=917
    SESSIONIZE=918
    SETBIT=919
    SETRESOURCERATE=920
    SETSESSIONACCOUNT=921
    SETSESSIONRATE=922
    SHARE=923
    SHIFTLEFT=924
    SHIFTRIGHT=925
    SIGN=926
    SIZE=927
    SNAPPY_COMPRESS=928
    SNAPPY_DECOMPRESS=929
    SOURCE=930
    SPARSE=931
    SPECCHAR=932
    SPL=933
    SQLSTATE=934
    SR=935
    ST_GEOMETRY=936
    STAT=937
    STATIC=938
    STATS=939
    STATSUSAGE=940
    STORAGE=941
    STRIP=942
    STRTOK=943
    STYLE=944
    SUBBITSTR=945
    SUBCLASS_ORIGIN=946
    SUCCEEDS=947
    SUMMARYONLY=948
    SUNDAY=949
    SYMBOLS=950
    SYSTEM=951
    SYSTEM_TIME=952
    SYSTEMTEST=953
    TARGET=954
    TD_ARRAY2P=955
    TD_DATASET=956
    TD_DAY_OF_CALENDAR=957
    TD_DAY_OF_MONTH=958
    TD_DAY_OF_WEEK=959
    TD_DAY_OF_YEAR=960
    TD_GENERAL=961
    TD_GETTIMEBUCKET=962
    TD_INTERNAL=963
    TD_LZ_COMPRESS=964
    TD_LZ_DECOMPRESS=965
    TD_MONTH_OF_CALENDAR=966
    TD_MONTH_OF_QUARTER=967
    TD_MONTH_OF_YEAR=968
    TD_QUARTER_OF_CALENDAR=969
    TD_QUARTER_OF_YEAR=970
    TD_TIME_BUCKET_NUMBER=971
    TD_WEEK_OF_CALENDAR=972
    TD_WEEK_OF_MONTH=973
    TD_WEEK_OF_YEAR=974
    TD_WEEKDAY_OF_MONTH=975
    TD_YEAR_OF_CALENDAR=976
    TDWMEVENT=977
    TDWMEXCEPTION=978
    TDWMHISTORY=979
    TEMPORAL_DATE=980
    TEMPORAL_TIMESTAMP=981
    TEXT=982
    THRESHOLDPERCENT=983
    THROUGH=984
    THURSDAY=985
    TIES=986
    TIMECODE=987
    TIMECOLUMN=988
    TIMEOUT=989
    TIMESTAMPCOLUMN=990
    TO_BYTE=991
    TO_BYTES=992
    TO_CHAR=993
    TO_DATE=994
    TO_DSINTERVAL=995
    TO_NUMBER=996
    TO_TIMESTAMP=997
    TO_TIMESTAMP_TZ=998
    TO_YMINTERVAL=999
    TOTOKEN=1000
    TPA=1001
    TRANSACTION_ACTIVE=1002
    TRANSUNICODETOUTF8=1003
    TRANSUTF8TOUNICODE=1004
    TRUE=1005
    TRUNC=1006
    TRUST_ONLY=1007
    TTGRANULARITY=1008
    TUESDAY=1009
    UBJSON=1010
    UCASE=1011
    UDFSEARCHPATH=1012
    UNBOUNDED=1013
    UNCOMMITTED=1014
    UNICODE=1015
    UNKNOWN=1016
    UNPIVOT=1017
    USE=1018
    USECOUNT=1019
    UTILITYINFO=1020
    VARRAY=1021
    VERBOSE=1022
    VERSION=1023
    VERSIONING=1024
    WARNING=1025
    WEDNESDAY=1026
    WEEK_BEGIN=1027
    WEEK_END=1028
    WEEK_OF_CALENDAR=1029
    WEEK_OF_MONTH=1030
    WEEK_OF_YEAR=1031
    WEEKDAY_OF_MONTH=1032
    WEEKNUMBER_OF_CALENDAR=1033
    WEEKNUMBER_OF_MONTH=1034
    WEEKNUMBER_OF_QUARTER=1035
    WEEKNUMBER_OF_YEAR=1036
    WHITESPACE=1037
    WINDOWSIZE=1038
    WITHIN=1039
    WORKLOAD=1040
    WRITE=1041
    XML=1042
    XMLAGG=1043
    XMLATTRIBUTES=1044
    XMLCOMMENT=1045
    XMLCONCAT=1046
    XMLDECLARATION=1047
    XMLDOCUMENT=1048
    XMLELEMENT=1049
    XMLFOREST=1050
    XMLNAMESPACES=1051
    XMLPARSE=1052
    XMLPI=1053
    XMLQUERY=1054
    XMLSCHEMA=1055
    XMLSERIALIZE=1056
    XMLTABLE=1057
    XMLTEXT=1058
    XMLTYPE=1059
    XMLVALIDATE=1060
    YEAR_BEGIN=1061
    YEAR_END=1062
    YEAR_OF_CALENDAR=1063
    YEARNUMBER_OF_CALENDAR=1064
    ZLIB=1065
    BUCKET=1066
    COMMITTED=1067
    CREATEXML=1068
    CS_LATIN=1069
    CS_UNICODE=1070
    CS_KANJISJIS=1071
    CS_GRAPHIC=1072
    CSV=1073
    CSVLD=1074
    DATASIZE=1075
    DAYOFMONTH=1076
    DAYS=1077
    DEFINITION=1078
    DELETED=1079
    FAST=1080
    LISTAGG=1081
    PATH=1082
    REGEXP_SPLIT_TO_TABLE=1083
    REVERSE=1084
    SAS=1085
    SQLTABLE=1086
    STRTOK_SPLIT_TO_TABLE=1087
    SYSLIB=1088
    SYSUDTLIB=1089
    TD_SERVER_DB=1090
    TD_SYSFNLIB=1091
    TD_SYSXML=1092
    TIMEDATEWZCONTROL=1093
    TRUST=1094
    TRYCAST=1095
    UDT=1096
    USAGE=1097
    VARIANT=1098
    WEEK=1099
    WIDTH=1100
    XMLPUBLISH=1101
    XMLPUBLISH_STREAM=1102
    XMLSPLIT=1103
    LATIN_TO_UNICODE=1104
    UNICODE_TO_LATIN=1105
    LOCALE_TO_UNICODE=1106
    UNICODE_TO_LOCALE=1107
    ASBSON=1108
    ASBSONTEXT=1109
    COMBINE=1110
    EXISTVALUE=1111
    JSONEXTRACT=1112
    JSONEXTRACTVALUE=1113
    JSONEXTRACTLARGEVALUE=1114
    KEYCOUNT=1115
    METADATA=1116
    STORAGE_SIZE=1117
    CREATESCHEMABASEDXML=1118
    CREATENONSCHEMABASEDXML=1119
    EXISTSNODE=1120
    ISCONTENT=1121
    ISDOCUMENT=1122
    ISSCHEMAVALID=1123
    ISSCHEMAVALIDATED=1124
    XMLEXTRACT=1125
    XMLTRANSFORM=1126
    PROC_ID=1127
    LOCATION=1128
    PAYLOAD=1129
    TRUSTED=1130
    PATHPATTERN=1131
    MANIFEST=1132
    ROWFORMAT=1133
    STOREDAS=1134
    HEADER=1135
    STRIP_EXTERIOR_SPACES=1136
    STRIP_ENCLOSING_CHAR=1137
    RLS=1138
    SINGLE=1139
    MULTIPLE=1140
    JSON_COMPRESS=1141
    JSON_DECOMPRESS=1142
    TS_COMPRESS=1143
    TS_DECOMPRESS=1144
    CONTIGUOUSMAPAMPS=1145
    SPARSEMAPAMPS=1146
    SPARSETABLEAMPS=1147
    UNNEST=1148
    CALCMATRIX=1149
    PHRASE=1150
    CALCTYPE=1151
    OUTPUT=1152
    NULL_HANDLING=1153
    READ_NOS=1154
    BUFFERSIZE=1155
    RETURNTYPE=1156
    SAMPLE_PERC=1157
    FULLSCAN=1158
    TD_UNPIVOT=1159
    VALUE_COLUMNS=1160
    UNPIVOT_COLUMN=1161
    COLUMN_LIST=1162
    COLUMN_ALIAS_LIST=1163
    INCLUDE_NULLS=1164
    WRITE_NOS=1165
    NAMING=1166
    MANIFESTFILE=1167
    MANIFESTONLY=1168
    OVERWRITE=1169
    INCLUDE_ORDERING=1170
    INCLUDE_HASHBY=1171
    MAXOBJECTSIZE=1172
    COMPRESSION=1173
    ARRAY_TO_JSON=1174
    BSON_CHECK=1175
    GEOJSONFROMGEOM=1176
    GEOMFROMGEOJSON=1177
    JSON_CHECK=1178
    JSONGETVALUE=1179
    JSONMETADATA=1180
    NVP2JSON=1181
    TD_JSONSHRED=1182
    JSON_KEYS=1183
    JSON_TABLE=1184
    DEPTH=1185
    QUOTES=1186
    ROWEXPR=1187
    COLEXPR=1188
    RETURNTYPES=1189
    NOCASE=1190
    TRUNCATE=1191
    LINK=1192
    OBJECT_NAME=1193
    UNSIGNED_INTEGER=1194
    HEX_BYTE_LITERAL=1195
    HEX_INTEGER_LITERAL=1196
    FLOAT_LITERAL=1197
    DATE_STRING=1198
    TIME_STRING=1199
    TIMESTAMP_STRING=1200
    PERIOD_STRING=1201
    UNICODE_STRING_LEADING=1202
    CHAR_STRING=1203
    HEX_STRING=1204
    PASSWORD_STRING=1205
    SEMICOLON=1206
    COLON=1207
    COMMA=1208
    DOT_=1209
    AT_SIGN=1210
    CARET=1211
    QUESTION_MARK=1212
    OPEN_PAR=1213
    CLOSE_PAR=1214
    OPEN_SQ_BRACKET=1215
    CLOSE_SQ_BRACKET=1216
    CONCATENATE=1217
    BROKEN_CONCATENATE=1218
    MUL_SIGN=1219
    DIV_SIGN=1220
    PLUS_SIGN=1221
    MINUS_SIGN=1222
    EXPONENTIATION=1223
    EQUALS_SIGN=1224
    NOT_EQUALS_SIGN=1225
    NOT_EQUALS_SIGN_TD=1226
    LT_SIGN=1227
    LE_SIGN=1228
    GT_SIGN=1229
    GE_SIGN=1230
    SINGLE_LINE_COMMENT=1231
    MULTI_LINE_COMMENT=1232
    WS=1233

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Query_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Query_termContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def query_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Query_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Query_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def UNION(self):
            return self.getToken(TeradataSQLExpressionsParser.UNION, 0)

        def MINUS(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS, 0)

        def EXCEPT(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TeradataSQLExpressionsParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_query_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expr" ):
                listener.enterQuery_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expr" ):
                listener.exitQuery_expr(self)



    def query_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLExpressionsParser.Query_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 0
        self.enterRecursionRule(localctx, 0, self.RULE_query_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [369, 370]:
                self.state = 535
                self.query_term()
                pass
            elif token in [1213]:
                self.state = 536
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 537
                self.query_expr(0)
                self.state = 538
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLExpressionsParser.Query_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expr)
                    self.state = 542
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 543
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==204 or _la==247 or _la==447):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 544
                        self.match(TeradataSQLExpressionsParser.ALL)


                    self.state = 547
                    self.query_expr(3) 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Select_listContext,0)


        def SELECT(self):
            return self.getToken(TeradataSQLExpressionsParser.SELECT, 0)

        def SEL(self):
            return self.getToken(TeradataSQLExpressionsParser.SEL, 0)

        def with_deleted_rows(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_deleted_rowsContext,0)


        def as_json(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.As_jsonContext,0)


        def from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.From_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.From_clauseContext,i)


        def into_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Into_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Into_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Where_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Group_by_clauseContext,i)


        def sample_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Sample_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Sample_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_clauseContext,i)


        def with_check_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.With_check_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_check_optionContext,i)


        def expand_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Expand_on_clauseContext,0)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Having_clauseContext,i)


        def qualify_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Qualify_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Qualify_clauseContext,i)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)




    def query_term(self):

        localctx = TeradataSQLExpressionsParser.Query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 554
                self.with_deleted_rows()


            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 557
                self.as_json()


            self.state = 560
            self.select_list()
            self.state = 592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 590
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 561
                        self.from_clause()
                        self.state = 565
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 562
                                self.with_clause() 
                            self.state = 567
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 568
                        self.into_clause()
                        pass

                    elif la_ == 3:
                        self.state = 569
                        self.where_clause()
                        pass

                    elif la_ == 4:
                        self.state = 570
                        self.group_by_clause()
                        pass

                    elif la_ == 5:
                        self.state = 573
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [183]:
                            self.state = 571
                            self.having_clause()
                            pass
                        elif token in [315]:
                            self.state = 572
                            self.qualify_clause()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 575
                        self.sample_clause()
                        pass

                    elif la_ == 7:
                        self.state = 579
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==474:
                            self.state = 576
                            self.with_clause()
                            self.state = 581
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 582
                        self.order_by_clause()
                        self.state = 586
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 583
                                self.with_clause() 
                            self.state = 588
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        pass

                    elif la_ == 8:
                        self.state = 589
                        self.with_check_option()
                        pass

             
                self.state = 594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 595
                self.expand_on_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_deleted_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLExpressionsParser.DELETED, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_deleted_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_deleted_rows" ):
                listener.enterWith_deleted_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_deleted_rows" ):
                listener.exitWith_deleted_rows(self)




    def with_deleted_rows(self):

        localctx = TeradataSQLExpressionsParser.With_deleted_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_with_deleted_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 599
            self.match(TeradataSQLExpressionsParser.DELETED)
            self.state = 600
            self.match(TeradataSQLExpressionsParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_as_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_json" ):
                listener.enterAs_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_json" ):
                listener.exitAs_json(self)




    def as_json(self):

        localctx = TeradataSQLExpressionsParser.As_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_as_json)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(TeradataSQLExpressionsParser.AS)
            self.state = 603
            self.match(TeradataSQLExpressionsParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Selected_columnsContext,0)


        def top_n(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Top_nContext,0)


        def DISTINCT(self):
            return self.getToken(TeradataSQLExpressionsParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALL, 0)

        def normalize(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.NormalizeContext,0)


        def all_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.All_operatorContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TeradataSQLExpressionsParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_select_list)
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 121, 271, 448]:
                    self.state = 609
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 605
                        self.match(TeradataSQLExpressionsParser.DISTINCT)
                        pass
                    elif token in [448]:
                        self.state = 606
                        self.match(TeradataSQLExpressionsParser.UNIQUE)
                        pass
                    elif token in [13]:
                        self.state = 607
                        self.match(TeradataSQLExpressionsParser.ALL)
                        pass
                    elif token in [271]:
                        self.state = 608
                        self.normalize()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [427]:
                    self.state = 611
                    self.top_n()
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1219, 1221, 1222]:
                    pass
                else:
                    pass
                self.state = 614
                self.selected_columns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.all_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_nContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TeradataSQLExpressionsParser.TOP, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Float_literalContext,0)


        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Macro_parameter_referenceContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLExpressionsParser.TIES, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_top_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_n" ):
                listener.enterTop_n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_n" ):
                listener.exitTop_n(self)




    def top_n(self):

        localctx = TeradataSQLExpressionsParser.Top_nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_top_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(TeradataSQLExpressionsParser.TOP)
            self.state = 622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 619
                self.integer_literal()
                pass
            elif token in [1197]:
                self.state = 620
                self.float_literal()
                pass
            elif token in [1207, 1210]:
                self.state = 621
                self.macro_parameter_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 624
                self.match(TeradataSQLExpressionsParser.PERCENT)


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 627
                self.match(TeradataSQLExpressionsParser.WITH)
                self.state = 628
                self.match(TeradataSQLExpressionsParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.NORMALIZE, 0)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLExpressionsParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLExpressionsParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLExpressionsParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_normalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)




    def normalize(self):

        localctx = TeradataSQLExpressionsParser.NormalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_normalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(TeradataSQLExpressionsParser.NORMALIZE)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 632
                self.match(TeradataSQLExpressionsParser.ON)
                self.state = 633
                self.match(TeradataSQLExpressionsParser.MEETS)
                self.state = 634
                self.match(TeradataSQLExpressionsParser.OR)
                self.state = 635
                self.match(TeradataSQLExpressionsParser.OVERLAPS)

            elif la_ == 2:
                self.state = 636
                self.match(TeradataSQLExpressionsParser.ON)
                self.state = 637
                self.match(TeradataSQLExpressionsParser.OVERLAPS)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 638
                    self.match(TeradataSQLExpressionsParser.OR)
                    self.state = 639
                    self.match(TeradataSQLExpressionsParser.MEETS)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)

        def ALL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALL, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_all_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_operator" ):
                listener.enterAll_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_operator" ):
                listener.exitAll_operator(self)




    def all_operator(self):

        localctx = TeradataSQLExpressionsParser.All_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_all_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 644
                self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                pass

            elif la_ == 2:
                self.state = 645
                self.table_name()
                self.state = 646
                self.match(TeradataSQLExpressionsParser.DOT_)
                self.state = 647
                self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                pass

            elif la_ == 3:
                self.state = 649
                self.column_name()
                pass


            self.state = 652
            self.match(TeradataSQLExpressionsParser.DOT_)
            self.state = 653
            self.match(TeradataSQLExpressionsParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_rows = None # Token

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def selected_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Selected_columnContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Selected_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_selected_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_columns" ):
                listener.enterSelected_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_columns" ):
                listener.exitSelected_columns(self)




    def selected_columns(self):

        localctx = TeradataSQLExpressionsParser.Selected_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_selected_columns)
        try:
            self.state = 664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                localctx.all_rows = self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.selected_column()
                self.state = 661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 657
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 658
                        self.selected_column() 
                    self.state = 663
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_selected_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_column" ):
                listener.enterSelected_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_column" ):
                listener.exitSelected_column(self)




    def selected_column(self):

        localctx = TeradataSQLExpressionsParser.Selected_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_selected_column)
        self._la = 0 # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.scalar_expr(0)
                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 667
                        self.match(TeradataSQLExpressionsParser.AS)


                    self.state = 670
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.table_name()
                self.state = 674
                self.match(TeradataSQLExpressionsParser.DOT_)
                self.state = 675
                self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(TeradataSQLExpressionsParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_nameContext,i)


        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = TeradataSQLExpressionsParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(TeradataSQLExpressionsParser.INTO)
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 680
                self.variable_name()
                pass
            elif token in [1207]:
                self.state = 681
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 684
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 687
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 685
                        self.variable_name()
                        pass
                    elif token in [1207]:
                        self.state = 686
                        self.variable_reference()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLExpressionsParser.FROM, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.From_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = TeradataSQLExpressionsParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(TeradataSQLExpressionsParser.FROM)
            self.state = 695
            self.from_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Join_source_specContext,0)


        def join_joined_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Join_joined_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Join_joined_specContext,i)


        def from_pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.From_pivot_specContext,0)


        def from_unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.From_unpivot_specContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_from_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_spec" ):
                listener.enterFrom_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_spec" ):
                listener.exitFrom_spec(self)




    def from_spec(self):

        localctx = TeradataSQLExpressionsParser.From_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_from_spec)
        try:
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.join_source_spec()
                self.state = 701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 698
                        self.join_joined_spec() 
                    self.state = 703
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.from_pivot_spec()
                self.state = 708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 705
                        self.join_joined_spec() 
                    self.state = 710
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 711
                self.from_unpivot_spec()
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 712
                        self.join_joined_spec() 
                    self.state = 717
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 718
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 719
                self.from_spec()
                self.state = 720
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 721
                        self.join_joined_spec() 
                    self.state = 726
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_source_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Subquery_referenceContext,0)


        def foreign_table_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Foreign_table_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_function_referenceContext,0)


        def foreign_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Foreign_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_join_source_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source_spec" ):
                listener.enterJoin_source_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source_spec" ):
                listener.exitJoin_source_spec(self)




    def join_source_spec(self):

        localctx = TeradataSQLExpressionsParser.Join_source_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_join_source_spec)
        try:
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 731
                self.foreign_table_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 732
                self.table_function_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 733
                self.foreign_function_reference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 734
                self.table_operator_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_joined_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Subquery_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_referenceContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_join_joined_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_joined_spec" ):
                listener.enterJoin_joined_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_joined_spec" ):
                listener.exitJoin_joined_spec(self)




    def join_joined_spec(self):

        localctx = TeradataSQLExpressionsParser.Join_joined_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_join_joined_spec)
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 738
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 740
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 742
                self.table_function_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 743
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 744
                self.table_operator_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 745
                self.join_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.PivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_from_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_pivot_spec" ):
                listener.enterFrom_pivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_pivot_spec" ):
                listener.exitFrom_pivot_spec(self)




    def from_pivot_spec(self):

        localctx = TeradataSQLExpressionsParser.From_pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_from_pivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 748
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 749
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 752
            self.pivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivot(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.UnpivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_from_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_unpivot_spec" ):
                listener.enterFrom_unpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_unpivot_spec" ):
                listener.exitFrom_unpivot_spec(self)




    def from_unpivot_spec(self):

        localctx = TeradataSQLExpressionsParser.From_unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_from_unpivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 754
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 755
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 758
            self.unpivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_alias = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def foreign_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Foreign_returns_clauseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = TeradataSQLExpressionsParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.table_name()
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 761
                self.server_name_reference()
                self.state = 763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 762
                    self.foreign_returns_clause()




            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 767
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 770
                localctx.table_alias = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(TeradataSQLExpressionsParser.JOIN, 0)

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Join_source_specContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLExpressionsParser.INNER, 0)

        def join_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Join_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Join_on_clauseContext,i)


        def LEFT(self):
            return self.getToken(TeradataSQLExpressionsParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataSQLExpressionsParser.FULL, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLExpressionsParser.OUTER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def CROSS(self):
            return self.getToken(TeradataSQLExpressionsParser.CROSS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = TeradataSQLExpressionsParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 773
                    self.match(TeradataSQLExpressionsParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 774
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 775
                        self.match(TeradataSQLExpressionsParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 780
                self.match(TeradataSQLExpressionsParser.JOIN)
                self.state = 781
                self.join_source_spec()
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 782
                        self.join_on_clause() 
                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 788
                    self.match(TeradataSQLExpressionsParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 789
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 790
                        self.match(TeradataSQLExpressionsParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 795
                self.match(TeradataSQLExpressionsParser.JOIN)
                self.state = 796
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 797
                self.from_spec()
                self.state = 798
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 799
                        self.join_on_clause() 
                    self.state = 804
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.match(TeradataSQLExpressionsParser.CROSS)
                self.state = 806
                self.match(TeradataSQLExpressionsParser.JOIN)
                self.state = 807
                self.join_source_spec()
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 808
                        self.join_on_clause() 
                    self.state = 813
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 814
                self.match(TeradataSQLExpressionsParser.CROSS)
                self.state = 815
                self.match(TeradataSQLExpressionsParser.JOIN)
                self.state = 816
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 817
                self.from_spec()
                self.state = 818
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 819
                        self.join_on_clause() 
                    self.state = 824
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_join_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_clause" ):
                listener.enterJoin_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_clause" ):
                listener.exitJoin_on_clause(self)




    def join_on_clause(self):

        localctx = TeradataSQLExpressionsParser.Join_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_join_on_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 828
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_sql = None # Token
            self.table_alias = None # Alias_nameContext

        def FOREIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Query_termContext,0)


        def EXPORT(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPORT, 0)

        def exported_data(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Exported_dataContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Exported_dataContext,i)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_foreign_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_reference" ):
                listener.enterForeign_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_reference" ):
                listener.exitForeign_table_reference(self)




    def foreign_table_reference(self):

        localctx = TeradataSQLExpressionsParser.Foreign_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_foreign_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(TeradataSQLExpressionsParser.FOREIGN)
            self.state = 831
            self.match(TeradataSQLExpressionsParser.TABLE)
            self.state = 832
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 833
                self.query_term()
                pass

            elif la_ == 2:
                self.state = 835 
                self._errHandler.sync(self)
                _alt = 1+1
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1+1:
                        self.state = 834
                        localctx.foreign_sql = self.matchWildcard()

                    else:
                        raise NoViableAltException(self)
                    self.state = 837 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                pass


            self.state = 841
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 842
            self.server_name_reference()
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 843
                self.match(TeradataSQLExpressionsParser.EXPORT)
                self.state = 844
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 845
                self.exported_data()
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 846
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 847
                    self.exported_data()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 853
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 857
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 860
            localctx.table_alias = self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Function_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Server_name_referenceContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def foreign_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Foreign_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Foreign_on_clauseContext,i)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_foreign_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_function_reference" ):
                listener.enterForeign_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_function_reference" ):
                listener.exitForeign_function_reference(self)




    def foreign_function_reference(self):

        localctx = TeradataSQLExpressionsParser.Foreign_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_foreign_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.function_name()
            self.state = 863
            self.server_name_reference()
            self.state = 864
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 866 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 865
                self.foreign_on_clause()
                self.state = 868 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==286):
                    break

            self.state = 870
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 871
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 874
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def foreign_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Foreign_using_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def hash_or_partition_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Hash_or_partition_byContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hash_or_partition_byContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_clauseContext,0)


        def LOCAL(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCAL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_foreign_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_on_clause" ):
                listener.enterForeign_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_on_clause" ):
                listener.exitForeign_on_clause(self)




    def foreign_on_clause(self):

        localctx = TeradataSQLExpressionsParser.Foreign_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_foreign_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 877
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 878
            self.scalar_expr(0)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 879
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 880
                self.scalar_expr(0)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 886
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==840:
                self.state = 887
                self.hash_or_partition_by()
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 893
                    self.match(TeradataSQLExpressionsParser.LOCAL)


                self.state = 896
                self.order_by_clause()


            self.state = 899
            self.foreign_using_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exported_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exported_subquery = None # Subquery_referenceContext
            self.exported_table = None # Table_nameContext
            self.table_alias = None # Alias_nameContext

        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Subquery_referenceContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_exported_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExported_data" ):
                listener.enterExported_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExported_data" ):
                listener.exitExported_data(self)




    def exported_data(self):

        localctx = TeradataSQLExpressionsParser.Exported_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exported_data)
        self._la = 0 # Token type
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                localctx.exported_subquery = self.subquery_reference()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                localctx.exported_table = self.table_name()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 903
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 906
                localctx.table_alias = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def foreign_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Foreign_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Foreign_parameterContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_foreign_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_using_clause" ):
                listener.enterForeign_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_using_clause" ):
                listener.exitForeign_using_clause(self)




    def foreign_using_clause(self):

        localctx = TeradataSQLExpressionsParser.Foreign_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_foreign_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 912 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 911
                self.foreign_parameter()
                self.state = 914 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_foreign_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_parameter" ):
                listener.enterForeign_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_parameter" ):
                listener.exitForeign_parameter(self)




    def foreign_parameter(self):

        localctx = TeradataSQLExpressionsParser.Foreign_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_foreign_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            localctx.name = self.unqualified_name()
            self.state = 917
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 918
            localctx.value = self.scalar_expr(0)
            self.state = 919
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_foreign_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_returns_clause" ):
                listener.enterForeign_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_returns_clause" ):
                listener.exitForeign_returns_clause(self)




    def foreign_returns_clause(self):

        localctx = TeradataSQLExpressionsParser.Foreign_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_foreign_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(TeradataSQLExpressionsParser.RETURNS)
            self.state = 922
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 923
            self.column_spec()
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 924
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 925
                self.column_spec()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 931
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Server_name_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.AT_SIGN, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_server_name_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServer_name_reference" ):
                listener.enterServer_name_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServer_name_reference" ):
                listener.exitServer_name_reference(self)




    def server_name_reference(self):

        localctx = TeradataSQLExpressionsParser.Server_name_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_server_name_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(TeradataSQLExpressionsParser.AT_SIGN)
            self.state = 934
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def udt_table_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Udt_table_functionContext,0)


        def unnest_table_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unnest_table_functionContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_reference" ):
                listener.enterTable_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_reference" ):
                listener.exitTable_function_reference(self)




    def table_function_reference(self):

        localctx = TeradataSQLExpressionsParser.Table_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_table_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(TeradataSQLExpressionsParser.TABLE)
            self.state = 937
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 938
                self.udt_table_function()
                pass

            elif la_ == 2:
                self.state = 939
                self.unnest_table_function()
                pass


            self.state = 942
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 943
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 946
            self.alias_name()
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 947
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_expr_list_comma_separatedContext,0)


        def table_function_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_function_returns_clauseContext,0)


        def table_function_local_order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Table_function_local_order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_function_local_order_by_clauseContext,i)


        def table_function_hash_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Table_function_hash_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_function_hash_by_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_udt_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_table_function" ):
                listener.enterUdt_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_table_function" ):
                listener.exitUdt_table_function(self)




    def udt_table_function(self):

        localctx = TeradataSQLExpressionsParser.Udt_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_udt_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.function_name()
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 951
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 952
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 953
                self.scalar_expr_list_comma_separated()
                pass


            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 956
                self.table_function_returns_clause()


            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==224:
                self.state = 961
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 959
                    self.table_function_local_order_by_clause()
                    pass
                elif token in [178]:
                    self.state = 960
                    self.table_function_hash_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext

        def UNNEST(self):
            return self.getToken(TeradataSQLExpressionsParser.UNNEST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unnest_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_function" ):
                listener.enterUnnest_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_function" ):
                listener.exitUnnest_table_function(self)




    def unnest_table_function(self):

        localctx = TeradataSQLExpressionsParser.Unnest_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_unnest_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 966
                self.td_sysfnlib()


            self.state = 969
            self.match(TeradataSQLExpressionsParser.UNNEST)
            self.state = 970
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 971
                localctx.key_expr = self.scalar_expr(0)
                self.state = 972
                self.match(TeradataSQLExpressionsParser.COMMA)


            self.state = 976
            localctx.array_expr = self.scalar_expr(0)
            self.state = 977
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 978
                self.match(TeradataSQLExpressionsParser.WITH)
                self.state = 979
                self.match(TeradataSQLExpressionsParser.ORDINALITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returned_table_name = None # Table_nameContext

        def RETURNS(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_function_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_returns_clause" ):
                listener.enterTable_function_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_returns_clause" ):
                listener.exitTable_function_returns_clause(self)




    def table_function_returns_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_function_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_table_function_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(TeradataSQLExpressionsParser.RETURNS)
            self.state = 995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 983
                localctx.returned_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 984
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 985
                self.column_spec()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 986
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 987
                    self.column_spec()
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 993
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [178, 224, 1214]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_local_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_function_local_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_local_order_by_clause" ):
                listener.enterTable_function_local_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_local_order_by_clause" ):
                listener.exitTable_function_local_order_by_clause(self)




    def table_function_local_order_by_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_function_local_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_function_local_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(TeradataSQLExpressionsParser.LOCAL)
            self.state = 998
            self.match(TeradataSQLExpressionsParser.ORDER)
            self.state = 999
            self.match(TeradataSQLExpressionsParser.BY)
            self.state = 1000
            self.order_by_spec_full()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1001
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1002
                self.order_by_spec_full()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_hash_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLExpressionsParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_function_hash_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_hash_by_clause" ):
                listener.enterTable_function_hash_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_hash_by_clause" ):
                listener.exitTable_function_hash_by_clause(self)




    def table_function_hash_by_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_function_hash_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_table_function_hash_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(TeradataSQLExpressionsParser.HASH)
            self.state = 1009
            self.match(TeradataSQLExpressionsParser.BY)
            self.state = 1010
            self.column_name()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1011
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1012
                self.column_name()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def xmltable_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xmltable_operatorContext,0)


        def calcmatrix_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Calcmatrix_table_operatorContext,0)


        def read_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Read_nos_table_operatorContext,0)


        def script_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Script_table_operatorContext,0)


        def td_unpivot_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_unpivot_table_operatorContext,0)


        def write_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Write_nos_table_operatorContext,0)


        def json_keys_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_keys_table_operatorContext,0)


        def json_table_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_table_table_operatorContext,0)


        def json_shred_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_shred_table_operatorContext,0)


        def generic_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Generic_table_operatorContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_operator_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_reference" ):
                listener.enterTable_operator_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_reference" ):
                listener.exitTable_operator_reference(self)




    def table_operator_reference(self):

        localctx = TeradataSQLExpressionsParser.Table_operator_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_table_operator_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 1018
                self.xmltable_operator()
                pass

            elif la_ == 2:
                self.state = 1019
                self.calcmatrix_table_operator()
                pass

            elif la_ == 3:
                self.state = 1020
                self.read_nos_table_operator()
                pass

            elif la_ == 4:
                self.state = 1021
                self.script_table_operator()
                pass

            elif la_ == 5:
                self.state = 1022
                self.td_unpivot_table_operator()
                pass

            elif la_ == 6:
                self.state = 1023
                self.write_nos_table_operator()
                pass

            elif la_ == 7:
                self.state = 1024
                self.json_keys_table_operator()
                pass

            elif la_ == 8:
                self.state = 1025
                self.json_table_table_operator()
                pass

            elif la_ == 9:
                self.state = 1026
                self.json_shred_table_operator()
                pass

            elif la_ == 10:
                self.state = 1027
                self.generic_table_operator()
                pass


            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1030
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 1033
            self.alias_name()
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1034
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_tab_row_pattern = None # Scalar_exprContext

        def XMLTABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_namespace_declarationContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_query_argumentContext,0)


        def xml_columns_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_columns_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xmltable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_operator" ):
                listener.enterXmltable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_operator" ):
                listener.exitXmltable_operator(self)




    def xmltable_operator(self):

        localctx = TeradataSQLExpressionsParser.Xmltable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_xmltable_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(TeradataSQLExpressionsParser.XMLTABLE)
            self.state = 1038
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1039
                self.xml_namespace_declaration()


            self.state = 1042
            localctx.xml_tab_row_pattern = self.scalar_expr(0)
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 1043
                self.xml_query_argument()


            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==579:
                self.state = 1046
                self.xml_columns_spec()


            self.state = 1049
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calcmatrix_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using_phrase = None # Char_string_literalContext
            self.calc_type = None # Char_string_literalContext
            self.output = None # Char_string_literalContext
            self.null_handling = None # Char_string_literalContext

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLExpressionsParser.CALCMATRIX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLExpressionsParser.PHRASE, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def HASH(self):
            return self.getToken(TeradataSQLExpressionsParser.HASH, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.BY)
            else:
                return self.getToken(TeradataSQLExpressionsParser.BY, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLExpressionsParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL_HANDLING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_calcmatrix_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcmatrix_table_operator" ):
                listener.enterCalcmatrix_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcmatrix_table_operator" ):
                listener.exitCalcmatrix_table_operator(self)




    def calcmatrix_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Calcmatrix_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_calcmatrix_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1051
                self.td_sysfnlib()


            self.state = 1054
            self.match(TeradataSQLExpressionsParser.CALCMATRIX)
            self.state = 1055
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1056
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1057
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1058
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1061
                self.match(TeradataSQLExpressionsParser.HASH)
                self.state = 1062
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1063
                self.scalar_expr(0)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1064
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1065
                    self.scalar_expr(0)
                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 1073
                self.match(TeradataSQLExpressionsParser.LOCAL)
                self.state = 1074
                self.match(TeradataSQLExpressionsParser.ORDER)
                self.state = 1075
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1076
                self.scalar_expr(0)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1077
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1078
                    self.scalar_expr(0)
                    self.state = 1083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1086
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1087
            self.match(TeradataSQLExpressionsParser.PHRASE)
            self.state = 1088
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1089
            localctx.using_phrase = self.char_string_literal()
            self.state = 1090
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1091
                self.match(TeradataSQLExpressionsParser.CALCTYPE)
                self.state = 1092
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1093
                localctx.calc_type = self.char_string_literal()
                self.state = 1094
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1098
                self.match(TeradataSQLExpressionsParser.OUTPUT)
                self.state = 1099
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1100
                localctx.output = self.char_string_literal()
                self.state = 1101
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 1105
                self.match(TeradataSQLExpressionsParser.NULL_HANDLING)
                self.state = 1106
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1107
                localctx.null_handling = self.char_string_literal()
                self.state = 1108
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_NOS(self):
            return self.getToken(TeradataSQLExpressionsParser.READ_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def read_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Read_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Read_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_read_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_table_operator" ):
                listener.enterRead_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_table_operator" ):
                listener.exitRead_nos_table_operator(self)




    def read_nos_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Read_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_read_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(TeradataSQLExpressionsParser.READ_NOS)
            self.state = 1113
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1114
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1115
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1116
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1119
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1120
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1121
            self.location()
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1132)) & ~0x3f) == 0 and ((1 << (_la - 1132)) & 125829135) != 0):
                self.state = 1122
                self.read_nos_option()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1128
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1129
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.return_spec = list() # of Char_string_literalContexts
            self.delimiter_char = None # Char_string_literalContext
            self.charset = None # Char_string_literalContext
            self.quote_char = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def SCRIPT(self):
            return self.getToken(TeradataSQLExpressionsParser.SCRIPT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_on_clauseContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def RETURNS(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNS, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLExpressionsParser.DELIMITER, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARSET, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUOTECHAR, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLExpressionsParser.AUTH, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Object_nameContext,0)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_script_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_table_operator" ):
                listener.enterScript_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_table_operator" ):
                listener.exitScript_table_operator(self)




    def script_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Script_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_script_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(TeradataSQLExpressionsParser.SCRIPT)
            self.state = 1132
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1133
            self.table_operator_on_clause()
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 1134
                self.match(TeradataSQLExpressionsParser.RETURNS)
                self.state = 1135
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 1136
                    self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 1137
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.return_spec.append(localctx._char_string_literal)
                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1138
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 1139
                        localctx._char_string_literal = self.char_string_literal()
                        localctx.return_spec.append(localctx._char_string_literal)
                        self.state = 1144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1147
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==625:
                self.state = 1150
                self.match(TeradataSQLExpressionsParser.DELIMITER)
                self.state = 1151
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1152
                localctx.delimiter_char = self.char_string_literal()
                self.state = 1153
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 1157
                self.match(TeradataSQLExpressionsParser.CHARSET)
                self.state = 1158
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1159
                localctx.charset = self.char_string_literal()
                self.state = 1160
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==871:
                self.state = 1164
                self.match(TeradataSQLExpressionsParser.QUOTECHAR)
                self.state = 1165
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1166
                localctx.quote_char = self.char_string_literal()
                self.state = 1167
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==542:
                self.state = 1171
                self.match(TeradataSQLExpressionsParser.AUTH)
                self.state = 1172
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1173
                localctx.authorization_name = self.object_name()
                self.state = 1174
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1178
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_unpivot_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.value_columns_value = list() # of Char_string_literalContexts
            self.unpivot_column_value = None # Char_string_literalContext
            self.column_list_value = list() # of Char_string_literalContexts
            self.column_alias_list_value = list() # of Char_string_literalContexts
            self.include_nulls = None # Char_string_literalContext

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_UNPIVOT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLExpressionsParser.VALUE_COLUMNS, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMN_LIST, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE_NULLS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_td_unpivot_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_unpivot_table_operator" ):
                listener.enterTd_unpivot_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_unpivot_table_operator" ):
                listener.exitTd_unpivot_table_operator(self)




    def td_unpivot_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Td_unpivot_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_td_unpivot_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1180
                self.td_sysfnlib()


            self.state = 1183
            self.match(TeradataSQLExpressionsParser.TD_UNPIVOT)
            self.state = 1184
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1185
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1186
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1187
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1190
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1191
            self.match(TeradataSQLExpressionsParser.VALUE_COLUMNS)
            self.state = 1192
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1193
            localctx._char_string_literal = self.char_string_literal()
            localctx.value_columns_value.append(localctx._char_string_literal)
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1194
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1195
                localctx._char_string_literal = self.char_string_literal()
                localctx.value_columns_value.append(localctx._char_string_literal)
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1201
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1202
            self.match(TeradataSQLExpressionsParser.UNPIVOT_COLUMN)
            self.state = 1203
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1204
            localctx.unpivot_column_value = self.char_string_literal()
            self.state = 1205
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1206
            self.match(TeradataSQLExpressionsParser.COLUMN_LIST)
            self.state = 1207
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1208
            localctx._char_string_literal = self.char_string_literal()
            localctx.column_list_value.append(localctx._char_string_literal)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1209
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1210
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_list_value.append(localctx._char_string_literal)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1216
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1217
                self.match(TeradataSQLExpressionsParser.COLUMN_ALIAS_LIST)
                self.state = 1218
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1219
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_alias_list_value.append(localctx._char_string_literal)
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1220
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1221
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.column_alias_list_value.append(localctx._char_string_literal)
                    self.state = 1226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1227
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 1228
                self.match(TeradataSQLExpressionsParser.INCLUDE_NULLS)
                self.state = 1229
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1230
                localctx.include_nulls = self.char_string_literal()
                self.state = 1231
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLExpressionsParser.WRITE_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_on_clauseContext,0)


        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def write_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Write_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Write_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_write_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_table_operator" ):
                listener.enterWrite_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_table_operator" ):
                listener.exitWrite_nos_table_operator(self)




    def write_nos_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Write_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_write_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(TeradataSQLExpressionsParser.WRITE_NOS)
            self.state = 1236
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1237
            self.table_operator_on_clause()
            self.state = 1238
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1239
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1240
            self.location()
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1134)) & ~0x3f) == 0 and ((1 << (_la - 1134)) & 1095216660481) != 0):
                self.state = 1241
                self.write_nos_option()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1247
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1248
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_table_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self.col_expr_literal = None # Char_string_literalContext

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLExpressionsParser.COLEXPR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_table_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_table_table_operator" ):
                listener.enterJson_table_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_table_table_operator" ):
                listener.exitJson_table_table_operator(self)




    def json_table_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Json_table_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_json_table_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1250
                self.td_sysfnlib()


            self.state = 1253
            self.match(TeradataSQLExpressionsParser.JSON_TABLE)
            self.state = 1254
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1255
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1256
            self.subquery()
            self.state = 1257
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1258
            self.match(TeradataSQLExpressionsParser.ROWEXPR)
            self.state = 1259
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1260
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 1261
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1262
            self.match(TeradataSQLExpressionsParser.COLEXPR)
            self.state = 1263
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1264
            localctx.col_expr_literal = self.char_string_literal()
            self.state = 1265
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1266
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_KEYS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def json_keys_using_name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Json_keys_using_name_value_pairContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_keys_using_name_value_pairContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_keys_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_table_operator" ):
                listener.enterJson_keys_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_table_operator" ):
                listener.exitJson_keys_table_operator(self)




    def json_keys_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Json_keys_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_json_keys_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1268
                self.td_sysfnlib()


            self.state = 1271
            self.match(TeradataSQLExpressionsParser.JSON_KEYS)
            self.state = 1272
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1273
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1274
            self.subquery()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 1275
                self.match(TeradataSQLExpressionsParser.USING)
                self.state = 1277 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1276
                    self.json_keys_using_name_value_pair()
                    self.state = 1279 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1185 or _la==1186):
                        break



            self.state = 1283
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_shred_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.col_expr_literal = list() # of Char_string_literalContexts
            self.return_type = list() # of Char_string_literalContexts
            self.nocase_value = None # Integer_literalContext
            self.truncate_value = None # Integer_literalContext

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_JSONSHRED, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLExpressionsParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNTYPES, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def NOCASE(self):
            return self.getToken(TeradataSQLExpressionsParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUNCATE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_shred_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_shred_table_operator" ):
                listener.enterJson_shred_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_shred_table_operator" ):
                listener.exitJson_shred_table_operator(self)




    def json_shred_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Json_shred_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_json_shred_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1285
                self.td_sysfnlib()


            self.state = 1288
            self.match(TeradataSQLExpressionsParser.TD_JSONSHRED)
            self.state = 1289
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1290
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1291
            self.subquery()
            self.state = 1292
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1293
            self.match(TeradataSQLExpressionsParser.ROWEXPR)
            self.state = 1294
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1295
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 1296
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1297
            self.match(TeradataSQLExpressionsParser.COLEXPR)
            self.state = 1298
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1299
            localctx._char_string_literal = self.char_string_literal()
            localctx.col_expr_literal.append(localctx._char_string_literal)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1300
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1301
                localctx._char_string_literal = self.char_string_literal()
                localctx.col_expr_literal.append(localctx._char_string_literal)
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1308
            self.match(TeradataSQLExpressionsParser.RETURNTYPES)
            self.state = 1309
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1310
            localctx._char_string_literal = self.char_string_literal()
            localctx.return_type.append(localctx._char_string_literal)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1311
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1312
                localctx._char_string_literal = self.char_string_literal()
                localctx.return_type.append(localctx._char_string_literal)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1318
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1190:
                self.state = 1319
                self.match(TeradataSQLExpressionsParser.NOCASE)
                self.state = 1320
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1321
                localctx.nocase_value = self.integer_literal()
                self.state = 1322
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1191:
                self.state = 1326
                self.match(TeradataSQLExpressionsParser.TRUNCATE)
                self.state = 1327
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1328
                localctx.truncate_value = self.integer_literal()
                self.state = 1329
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 1333
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def table_operator_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Table_operator_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_on_clauseContext,i)


        def table_operator_execute_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_execute_clauseContext,0)


        def table_operator_out_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Table_operator_out_table_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_out_table_clauseContext,i)


        def table_operator_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_generic_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_table_operator" ):
                listener.enterGeneric_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_table_operator" ):
                listener.exitGeneric_table_operator(self)




    def generic_table_operator(self):

        localctx = TeradataSQLExpressionsParser.Generic_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_generic_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.table_name()
            self.state = 1336
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==286:
                self.state = 1337
                self.table_operator_on_clause()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 1343
                self.table_operator_execute_clause()


            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1346
                self.table_operator_out_table_clause()
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 1352
                self.table_operator_using_clause()


            self.state = 1355
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def hash_or_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hash_or_partition_byContext,0)


        def DIMENSION(self):
            return self.getToken(TeradataSQLExpressionsParser.DIMENSION, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_fullContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_operator_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_on_clause" ):
                listener.enterTable_operator_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_on_clause" ):
                listener.exitTable_operator_on_clause(self)




    def table_operator_on_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_operator_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_table_operator_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1358
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1359
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1362
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 1363
                self.alias_name()


            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 840]:
                self.state = 1366
                self.hash_or_partition_by()
                pass
            elif token in [635]:
                self.state = 1367
                self.match(TeradataSQLExpressionsParser.DIMENSION)
                pass
            elif token in [144, 224, 286, 291, 293, 352, 457, 542, 569, 625, 871, 1214]:
                pass
            else:
                pass
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 1370
                    self.match(TeradataSQLExpressionsParser.LOCAL)


                self.state = 1373
                self.match(TeradataSQLExpressionsParser.ORDER)
                self.state = 1374
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1375
                self.order_by_spec_full()
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1376
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1377
                    self.order_by_spec_full()
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext

        def EXECUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXECUTE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLExpressionsParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.EQUALS_SIGN, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_operator_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_execute_clause" ):
                listener.enterTable_operator_execute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_execute_clause" ):
                listener.exitTable_operator_execute_clause(self)




    def table_operator_execute_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_operator_execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_table_operator_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(TeradataSQLExpressionsParser.EXECUTE)
            self.state = 1386
            self.match(TeradataSQLExpressionsParser.MAP)
            self.state = 1387
            self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
            self.state = 1388
            localctx.map_name = self.char_string_literal()
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 1389
                self.match(TeradataSQLExpressionsParser.COLOCATE)
                self.state = 1390
                self.match(TeradataSQLExpressionsParser.USING)
                self.state = 1391
                self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                self.state = 1392
                localctx.colocation_name = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_out_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def OUT(self):
            return self.getToken(TeradataSQLExpressionsParser.OUT, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_operator_out_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_out_table_clause" ):
                listener.enterTable_operator_out_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_out_table_clause" ):
                listener.exitTable_operator_out_table_clause(self)




    def table_operator_out_table_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_operator_out_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_table_operator_out_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(TeradataSQLExpressionsParser.OUT)
            self.state = 1396
            self.match(TeradataSQLExpressionsParser.TABLE)
            self.state = 1397
            localctx.name = self.unqualified_name()
            self.state = 1398
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1399
            self.table_name()
            self.state = 1400
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def table_operator_using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Table_operator_using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_operator_using_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_operator_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_clause" ):
                listener.enterTable_operator_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_clause" ):
                listener.exitTable_operator_using_clause(self)




    def table_operator_using_clause(self):

        localctx = TeradataSQLExpressionsParser.Table_operator_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_table_operator_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 1404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1403
                self.table_operator_using_spec()
                self.state = 1406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_operator_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_spec" ):
                listener.enterTable_operator_using_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_spec" ):
                listener.exitTable_operator_using_spec(self)




    def table_operator_using_spec(self):

        localctx = TeradataSQLExpressionsParser.Table_operator_using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_table_operator_using_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            localctx.name = self.unqualified_name()
            self.state = 1411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1409
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 1410
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_using_name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLExpressionsParser.QUOTES, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_keys_using_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_using_name_value_pair" ):
                listener.enterJson_keys_using_name_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_using_name_value_pair" ):
                listener.exitJson_keys_using_name_value_pair(self)




    def json_keys_using_name_value_pair(self):

        localctx = TeradataSQLExpressionsParser.Json_keys_using_name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_json_keys_using_name_value_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            _la = self._input.LA(1)
            if not(_la==1185 or _la==1186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1414
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1415
            localctx.value = self.scalar_expr(0)
            self.state = 1416
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_or_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def HASH(self):
            return self.getToken(TeradataSQLExpressionsParser.HASH, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLExpressionsParser.PARTITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def ANY(self):
            return self.getToken(TeradataSQLExpressionsParser.ANY, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_hash_or_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_or_partition_by" ):
                listener.enterHash_or_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_or_partition_by" ):
                listener.exitHash_or_partition_by(self)




    def hash_or_partition_by(self):

        localctx = TeradataSQLExpressionsParser.Hash_or_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_hash_or_partition_by)
        self._la = 0 # Token type
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1418
                _la = self._input.LA(1)
                if not(_la==178 or _la==840):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1419
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1420
                self.scalar_expr(0)
                self.state = 1425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1421
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1422
                    self.scalar_expr(0)
                    self.state = 1427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1428
                self.match(TeradataSQLExpressionsParser.PARTITION)
                self.state = 1429
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1430
                self.match(TeradataSQLExpressionsParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_subquery_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_reference" ):
                listener.enterSubquery_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_reference" ):
                listener.exitSubquery_reference(self)




    def subquery_reference(self):

        localctx = TeradataSQLExpressionsParser.Subquery_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_subquery_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.subquery()
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1434
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 1437
            self.alias_name()
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1438
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_path = None # Token

        def LOCATION(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)




    def location(self):

        localctx = TeradataSQLExpressionsParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(TeradataSQLExpressionsParser.LOCATION)
            self.state = 1442
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1443
            localctx.external_file_path = self.match(TeradataSQLExpressionsParser.CHAR_STRING)
            self.state = 1444
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.buffer_size = None # Char_string_literalContext
            self.return_type = None # Char_string_literalContext
            self.row_sampling_value = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.fullscan = None # Char_string_literalContext
            self.manifest = None # Char_string_literalContext
            self.row_format = None # Char_string_literalContext
            self.header = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLExpressionsParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLExpressionsParser.SAMPLE_PERC, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLExpressionsParser.STOREDAS, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLExpressionsParser.FULLSCAN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLExpressionsParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWFORMAT, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLExpressionsParser.HEADER, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_read_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_option" ):
                listener.enterRead_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_option" ):
                listener.exitRead_nos_option(self)




    def read_nos_option(self):

        localctx = TeradataSQLExpressionsParser.Read_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_read_nos_option)
        try:
            self.state = 1494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.match(TeradataSQLExpressionsParser.AUTHORIZATION)
                self.state = 1447
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1448
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 1449
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 1452
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1454
                self.match(TeradataSQLExpressionsParser.BUFFERSIZE)
                self.state = 1455
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1456
                localctx.buffer_size = self.char_string_literal()
                self.state = 1457
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1459
                self.match(TeradataSQLExpressionsParser.RETURNTYPE)
                self.state = 1460
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1461
                localctx.return_type = self.char_string_literal()
                self.state = 1462
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1464
                self.match(TeradataSQLExpressionsParser.SAMPLE_PERC)
                self.state = 1465
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1466
                localctx.row_sampling_value = self.char_string_literal()
                self.state = 1467
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1469
                self.match(TeradataSQLExpressionsParser.STOREDAS)
                self.state = 1470
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1471
                localctx.stored_as = self.char_string_literal()
                self.state = 1472
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1474
                self.match(TeradataSQLExpressionsParser.FULLSCAN)
                self.state = 1475
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1476
                localctx.fullscan = self.char_string_literal()
                self.state = 1477
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1479
                self.match(TeradataSQLExpressionsParser.MANIFEST)
                self.state = 1480
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1481
                localctx.manifest = self.char_string_literal()
                self.state = 1482
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1484
                self.match(TeradataSQLExpressionsParser.ROWFORMAT)
                self.state = 1485
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1486
                localctx.row_format = self.char_string_literal()
                self.state = 1487
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1489
                self.match(TeradataSQLExpressionsParser.HEADER)
                self.state = 1490
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1491
                localctx.header = self.char_string_literal()
                self.state = 1492
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.naming = None # Char_string_literalContext
            self.manifest_name = None # Char_string_literalContext
            self.manifest_only = None # Char_string_literalContext
            self.overwrite = None # Char_string_literalContext
            self.include_ordering = None # Char_string_literalContext
            self.include_hashby = None # Char_string_literalContext
            self.max_object_size = None # Char_string_literalContext
            self.compression = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLExpressionsParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def STOREDAS(self):
            return self.getToken(TeradataSQLExpressionsParser.STOREDAS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLExpressionsParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLExpressionsParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLExpressionsParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLExpressionsParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLExpressionsParser.COMPRESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_write_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_option" ):
                listener.enterWrite_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_option" ):
                listener.exitWrite_nos_option(self)




    def write_nos_option(self):

        localctx = TeradataSQLExpressionsParser.Write_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_write_nos_option)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1496
                self.match(TeradataSQLExpressionsParser.AUTHORIZATION)
                self.state = 1497
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1498
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 1499
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 1502
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1504
                self.match(TeradataSQLExpressionsParser.STOREDAS)
                self.state = 1505
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1506
                localctx.stored_as = self.char_string_literal()
                self.state = 1507
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1509
                self.match(TeradataSQLExpressionsParser.NAMING)
                self.state = 1510
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1511
                localctx.naming = self.char_string_literal()
                self.state = 1512
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1514
                self.match(TeradataSQLExpressionsParser.MANIFESTFILE)
                self.state = 1515
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1516
                localctx.manifest_name = self.char_string_literal()
                self.state = 1517
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1519
                self.match(TeradataSQLExpressionsParser.MANIFESTONLY)
                self.state = 1520
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1521
                localctx.manifest_only = self.char_string_literal()
                self.state = 1522
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1524
                self.match(TeradataSQLExpressionsParser.OVERWRITE)
                self.state = 1525
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1526
                localctx.overwrite = self.char_string_literal()
                self.state = 1527
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1529
                self.match(TeradataSQLExpressionsParser.INCLUDE_ORDERING)
                self.state = 1530
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1531
                localctx.include_ordering = self.char_string_literal()
                self.state = 1532
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1534
                self.match(TeradataSQLExpressionsParser.INCLUDE_HASHBY)
                self.state = 1535
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1536
                localctx.include_hashby = self.char_string_literal()
                self.state = 1537
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1539
                self.match(TeradataSQLExpressionsParser.MAXOBJECTSIZE)
                self.state = 1540
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1541
                localctx.max_object_size = self.char_string_literal()
                self.state = 1542
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1173]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1544
                self.match(TeradataSQLExpressionsParser.COMPRESSION)
                self.state = 1545
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 1546
                localctx.compression = self.char_string_literal()
                self.state = 1547
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def with_clause_title_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.With_clause_title_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_clause_title_phraseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def with_clause_by_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_clause_by_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = TeradataSQLExpressionsParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 1552
            self.scalar_expr(0)
            self.state = 1554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1553
                self.with_clause_title_phrase()


            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1556
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1557
                    self.scalar_expr(0)
                    self.state = 1559
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        self.state = 1558
                        self.with_clause_title_phrase()

             
                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1566
                self.with_clause_by_phrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_by_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_asc_desc_onlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_clause_by_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_by_phrase" ):
                listener.enterWith_clause_by_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_by_phrase" ):
                listener.exitWith_clause_by_phrase(self)




    def with_clause_by_phrase(self):

        localctx = TeradataSQLExpressionsParser.With_clause_by_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_with_clause_by_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self.match(TeradataSQLExpressionsParser.BY)
            self.state = 1570
            self.order_by_spec_asc_desc_only()
            self.state = 1575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1571
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1572
                    self.order_by_spec_asc_desc_only() 
                self.state = 1577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TITLE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_clause_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_title_phrase" ):
                listener.enterWith_clause_title_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_title_phrase" ):
                listener.exitWith_clause_title_phrase(self)




    def with_clause_title_phrase(self):

        localctx = TeradataSQLExpressionsParser.With_clause_title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_with_clause_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1579
            self.match(TeradataSQLExpressionsParser.TITLE)
            self.state = 1580
            localctx.title = self.char_string_literal()
            self.state = 1581
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataSQLExpressionsParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = TeradataSQLExpressionsParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(TeradataSQLExpressionsParser.WHERE)
            self.state = 1584
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(TeradataSQLExpressionsParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def group_by_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Group_by_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Group_by_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = TeradataSQLExpressionsParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_group_by_clause)
        try:
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                self.match(TeradataSQLExpressionsParser.GROUP)
                self.state = 1587
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1588
                self.group_by_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.match(TeradataSQLExpressionsParser.GROUP)
                self.state = 1590
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1591
                self.group_by_spec()
                self.state = 1594 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1592
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 1593
                        self.group_by_spec()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1596 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Ordinary_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_group_by_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_spec" ):
                listener.enterGroup_by_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_spec" ):
                listener.exitGroup_by_spec(self)




    def group_by_spec(self):

        localctx = TeradataSQLExpressionsParser.Group_by_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_group_by_spec)
        try:
            self.state = 1604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1601
                self.rollup_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1602
                self.cube_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1603
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def ordinary_grouping_set_parenthesized(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Ordinary_grouping_set_parenthesizedContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Ordinary_grouping_set_parenthesizedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = TeradataSQLExpressionsParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1606
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 1607
                self.ordinary_grouping_set_parenthesized()
                pass


            self.state = 1617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1610
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1613
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                    if la_ == 1:
                        self.state = 1611
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1612
                        self.ordinary_grouping_set_parenthesized()
                        pass

             
                self.state = 1619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_ordinary_grouping_set_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_parenthesized" ):
                listener.enterOrdinary_grouping_set_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_parenthesized" ):
                listener.exitOrdinary_grouping_set_parenthesized(self)




    def ordinary_grouping_set_parenthesized(self):

        localctx = TeradataSQLExpressionsParser.Ordinary_grouping_set_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_ordinary_grouping_set_parenthesized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1621
            self.scalar_expr(0)
            self.state = 1624 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1622
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1623
                self.scalar_expr(0)
                self.state = 1626 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 1628
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = TeradataSQLExpressionsParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1631
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(TeradataSQLExpressionsParser.ROLLUP, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_rollup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_option" ):
                listener.enterRollup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_option" ):
                listener.exitRollup_option(self)




    def rollup_option(self):

        localctx = TeradataSQLExpressionsParser.Rollup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_rollup_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(TeradataSQLExpressionsParser.ROLLUP)
            self.state = 1634
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1635
            self.ordinary_grouping_set()
            self.state = 1636
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(TeradataSQLExpressionsParser.CUBE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_cube_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_option" ):
                listener.enterCube_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_option" ):
                listener.exitCube_option(self)




    def cube_option(self):

        localctx = TeradataSQLExpressionsParser.Cube_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_cube_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(TeradataSQLExpressionsParser.CUBE)
            self.state = 1639
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1640
            self.ordinary_grouping_set()
            self.state = 1641
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(TeradataSQLExpressionsParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TeradataSQLExpressionsParser.SETS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def grouping_sets_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Grouping_sets_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Grouping_sets_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_grouping_sets_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_option" ):
                listener.enterGrouping_sets_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_option" ):
                listener.exitGrouping_sets_option(self)




    def grouping_sets_option(self):

        localctx = TeradataSQLExpressionsParser.Grouping_sets_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_grouping_sets_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.match(TeradataSQLExpressionsParser.GROUPING)
            self.state = 1644
            self.match(TeradataSQLExpressionsParser.SETS)
            self.state = 1645
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 1646
            self.grouping_sets_spec()
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1647
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 1648
                self.grouping_sets_spec()
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1654
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Ordinary_grouping_setContext,0)


        def empty_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Empty_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_grouping_sets_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_spec" ):
                listener.enterGrouping_sets_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_spec" ):
                listener.exitGrouping_sets_spec(self)




    def grouping_sets_spec(self):

        localctx = TeradataSQLExpressionsParser.Grouping_sets_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_grouping_sets_spec)
        try:
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.empty_grouping_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1658
                self.rollup_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1659
                self.cube_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1660
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataSQLExpressionsParser.HAVING, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = TeradataSQLExpressionsParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.match(TeradataSQLExpressionsParser.HAVING)
            self.state = 1664
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataSQLExpressionsParser.QUALIFY, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = TeradataSQLExpressionsParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(TeradataSQLExpressionsParser.QUALIFY)
            self.state = 1667
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(TeradataSQLExpressionsParser.SAMPLE, 0)

        def sample_fraction_description(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Sample_fraction_descriptionContext,0)


        def sample_count_description(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Sample_count_descriptionContext,0)


        def sample_when_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Sample_when_clauseContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.REPLACEMENT, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLExpressionsParser.RANDOMIZED, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLOCATION, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = TeradataSQLExpressionsParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(TeradataSQLExpressionsParser.SAMPLE)
            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1670
                self.match(TeradataSQLExpressionsParser.WITH)
                self.state = 1671
                self.match(TeradataSQLExpressionsParser.REPLACEMENT)


            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==872:
                self.state = 1674
                self.match(TeradataSQLExpressionsParser.RANDOMIZED)
                self.state = 1675
                self.match(TeradataSQLExpressionsParser.ALLOCATION)


            self.state = 1681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1197]:
                self.state = 1678
                self.sample_fraction_description()
                pass
            elif token in [1194]:
                self.state = 1679
                self.sample_count_description()
                pass
            elif token in [470]:
                self.state = 1680
                self.sample_when_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_fraction_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._float_literal = None # Float_literalContext
            self.fraction_description = list() # of Float_literalContexts

        def float_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Float_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Float_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_sample_fraction_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_fraction_description" ):
                listener.enterSample_fraction_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_fraction_description" ):
                listener.exitSample_fraction_description(self)




    def sample_fraction_description(self):

        localctx = TeradataSQLExpressionsParser.Sample_fraction_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_sample_fraction_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            localctx._float_literal = self.float_literal()
            localctx.fraction_description.append(localctx._float_literal)
            self.state = 1688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1684
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1685
                    localctx._float_literal = self.float_literal()
                    localctx.fraction_description.append(localctx._float_literal) 
                self.state = 1690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_count_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.count_description = list() # of Integer_literalContexts

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_sample_count_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_count_description" ):
                listener.enterSample_count_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_count_description" ):
                listener.exitSample_count_description(self)




    def sample_count_description(self):

        localctx = TeradataSQLExpressionsParser.Sample_count_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sample_count_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            localctx._integer_literal = self.integer_literal()
            localctx.count_description.append(localctx._integer_literal)
            self.state = 1696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1692
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1693
                    localctx._integer_literal = self.integer_literal()
                    localctx.count_description.append(localctx._integer_literal) 
                self.state = 1698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_when_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLExpressionsParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.WHEN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.THEN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLExpressionsParser.ELSE, 0)

        def sample_fraction_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Sample_fraction_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Sample_fraction_descriptionContext,i)


        def sample_count_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Sample_count_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Sample_count_descriptionContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_sample_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_when_clause" ):
                listener.enterSample_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_when_clause" ):
                listener.exitSample_when_clause(self)




    def sample_when_clause(self):

        localctx = TeradataSQLExpressionsParser.Sample_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sample_when_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1699
                self.match(TeradataSQLExpressionsParser.WHEN)
                self.state = 1700
                self.logical_expr(0)
                self.state = 1701
                self.match(TeradataSQLExpressionsParser.THEN)
                self.state = 1704
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 1702
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 1703
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1708 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 1710
                self.match(TeradataSQLExpressionsParser.ELSE)
                self.state = 1713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 1711
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 1712
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1717
            self.match(TeradataSQLExpressionsParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expand_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expand_expr = None # Scalar_exprContext
            self.expand_column_alias = None # Alias_nameContext
            self.period_expression = None # Scalar_exprContext

        def EXPAND(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPAND, 0)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def FOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FOR, 0)

        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_literalContext,0)


        def ANCHOR(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR, 0)

        def anchor_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Anchor_nameContext,0)


        def PERIOD(self):
            return self.getToken(TeradataSQLExpressionsParser.PERIOD, 0)

        def AT(self):
            return self.getToken(TeradataSQLExpressionsParser.AT, 0)

        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Time_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_expand_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpand_on_clause" ):
                listener.enterExpand_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpand_on_clause" ):
                listener.exitExpand_on_clause(self)




    def expand_on_clause(self):

        localctx = TeradataSQLExpressionsParser.Expand_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expand_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(TeradataSQLExpressionsParser.EXPAND)
            self.state = 1720
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 1721
            localctx.expand_expr = self.scalar_expr(0)
            self.state = 1723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1722
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 1725
            localctx.expand_column_alias = self.alias_name()
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1726
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 1737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 1727
                    self.interval_literal()
                    pass
                elif token in [505]:
                    self.state = 1728
                    self.match(TeradataSQLExpressionsParser.ANCHOR)
                    self.state = 1730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==853:
                        self.state = 1729
                        self.match(TeradataSQLExpressionsParser.PERIOD)


                    self.state = 1732
                    self.anchor_name()
                    self.state = 1735
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                    if la_ == 1:
                        self.state = 1733
                        self.match(TeradataSQLExpressionsParser.AT)
                        self.state = 1734
                        self.time_literal()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1741
                self.match(TeradataSQLExpressionsParser.FOR)
                self.state = 1742
                localctx.period_expression = self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TeradataSQLExpressionsParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(TeradataSQLExpressionsParser.ORDER)
            self.state = 1746
            self.match(TeradataSQLExpressionsParser.BY)
            self.state = 1747
            self.order_by_spec_full()
            self.state = 1752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1748
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1749
                    self.order_by_spec_full() 
                self.state = 1754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_fullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLExpressionsParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataSQLExpressionsParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLExpressionsParser.DESC, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLExpressionsParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_order_by_spec_full

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_full" ):
                listener.enterOrder_by_spec_full(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_full" ):
                listener.exitOrder_by_spec_full(self)




    def order_by_spec_full(self):

        localctx = TeradataSQLExpressionsParser.Order_by_spec_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_order_by_spec_full)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.scalar_expr(0)
            self.state = 1757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1756
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1759
                self.match(TeradataSQLExpressionsParser.NULLS)
                self.state = 1760
                _la = self._input.LA(1)
                if not(_la==156 or _la==731):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_asc_desc_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def ASC(self):
            return self.getToken(TeradataSQLExpressionsParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLExpressionsParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_order_by_spec_asc_desc_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_asc_desc_only" ):
                listener.enterOrder_by_spec_asc_desc_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_asc_desc_only" ):
                listener.exitOrder_by_spec_asc_desc_only(self)




    def order_by_spec_asc_desc_only(self):

        localctx = TeradataSQLExpressionsParser.Order_by_spec_asc_desc_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_order_by_spec_asc_desc_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.scalar_expr(0)
            self.state = 1765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1764
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_check_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLExpressionsParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLExpressionsParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_check_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_check_option" ):
                listener.enterWith_check_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_check_option" ):
                listener.exitWith_check_option(self)




    def with_check_option(self):

        localctx = TeradataSQLExpressionsParser.With_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_with_check_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 1768
            self.match(TeradataSQLExpressionsParser.CHECK)
            self.state = 1769
            self.match(TeradataSQLExpressionsParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_logical_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PeriodMeetsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def MEETS(self):
            return self.getToken(TeradataSQLExpressionsParser.MEETS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodMeets" ):
                listener.enterPeriodMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodMeets" ):
                listener.exitPeriodMeets(self)


    class PeriodImmediatelySucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLExpressionsParser.IMMEDIATELY, 0)
        def SUCCEEDS(self):
            return self.getToken(TeradataSQLExpressionsParser.SUCCEEDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelySucceeds" ):
                listener.enterPeriodImmediatelySucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelySucceeds" ):
                listener.exitPeriodImmediatelySucceeds(self)


    class PeriodEqualsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def EQUALS(self):
            return self.getToken(TeradataSQLExpressionsParser.EQUALS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodEquals" ):
                listener.enterPeriodEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodEquals" ):
                listener.exitPeriodEquals(self)


    class ScalarComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarComparelist" ):
                listener.enterScalarComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarComparelist" ):
                listener.exitScalarComparelist(self)


    class TupleInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.TupleContext,0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLExpressionsParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)


    class LogicalOrContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,i)

        def OR(self):
            return self.getToken(TeradataSQLExpressionsParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOr" ):
                listener.enterLogicalOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOr" ):
                listener.exitLogicalOr(self)


    class ScalarInScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)
        def IS(self):
            return self.getToken(TeradataSQLExpressionsParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInScalar" ):
                listener.enterScalarInScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInScalar" ):
                listener.exitScalarInScalar(self)


    class ScalarCompareScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarCompareScalar" ):
                listener.enterScalarCompareScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarCompareScalar" ):
                listener.exitScalarCompareScalar(self)


    class LogicalNotContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class TupleComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.TupleContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleComparelist" ):
                listener.enterTupleComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleComparelist" ):
                listener.exitTupleComparelist(self)


    class ScalarInListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)
        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_expr_listContext,0)

        def IS(self):
            return self.getToken(TeradataSQLExpressionsParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInList" ):
                listener.enterScalarInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInList" ):
                listener.exitScalarInList(self)


    class TupleLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.TupleContext,0)

        def LIKE(self):
            return self.getToken(TeradataSQLExpressionsParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLExpressionsParser.ESCAPE, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleLikeList" ):
                listener.enterTupleLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleLikeList" ):
                listener.exitTupleLikeList(self)


    class LogicalAndContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,i)

        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAnd" ):
                listener.enterLogicalAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAnd" ):
                listener.exitLogicalAnd(self)


    class ScalarInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLExpressionsParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInSubquery" ):
                listener.enterScalarInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInSubquery" ):
                listener.exitScalarInSubquery(self)


    class PeriodContainsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def CONTAINS(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTAINS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodContains" ):
                listener.enterPeriodContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodContains" ):
                listener.exitPeriodContains(self)


    class PeriodOverlapsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLExpressionsParser.OVERLAPS, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)
        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodOverlaps" ):
                listener.enterPeriodOverlaps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodOverlaps" ):
                listener.exitPeriodOverlaps(self)


    class BetweenContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLExpressionsParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class ParenthesizedLogicalExprContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLogicalExpr" ):
                listener.enterParenthesizedLogicalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLogicalExpr" ):
                listener.exitParenthesizedLogicalExpr(self)


    class PeriodImmediatelyPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLExpressionsParser.IMMEDIATELY, 0)
        def PRECEDES(self):
            return self.getToken(TeradataSQLExpressionsParser.PRECEDES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelyPrecedes" ):
                listener.enterPeriodImmediatelyPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelyPrecedes" ):
                listener.exitPeriodImmediatelyPrecedes(self)


    class NullCheckContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def IS(self):
            return self.getToken(TeradataSQLExpressionsParser.IS, 0)
        def NULL(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCheck" ):
                listener.enterNullCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCheck" ):
                listener.exitNullCheck(self)


    class PeriodPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def PRECEDES(self):
            return self.getToken(TeradataSQLExpressionsParser.PRECEDES, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodPrecedes" ):
                listener.enterPeriodPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodPrecedes" ):
                listener.exitPeriodPrecedes(self)


    class ExistsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataSQLExpressionsParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PeriodSucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLExpressionsParser.SUCCEEDS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodSucceeds" ):
                listener.enterPeriodSucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodSucceeds" ):
                listener.exitPeriodSucceeds(self)


    class ScalarLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLExpressionsParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLExpressionsParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeList" ):
                listener.enterScalarLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeList" ):
                listener.exitScalarLikeList(self)


    class ScalarLikeScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLExpressionsParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(TeradataSQLExpressionsParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeScalar" ):
                listener.enterScalarLikeScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeScalar" ):
                listener.exitScalarLikeScalar(self)



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLExpressionsParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLExpressionsParser.ScalarCompareScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1772
                self.scalar_expr(0)
                self.state = 1773
                localctx.op = self.comparison_operator()
                self.state = 1774
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                localctx = TeradataSQLExpressionsParser.ScalarComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1776
                self.scalar_expr(0)
                self.state = 1777
                localctx.op = self.comparison_operator()
                self.state = 1778
                self.quantifier()
                self.state = 1779
                self.elements_list()
                self.state = 1783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1780
                        self.attribute_modification() 
                    self.state = 1785
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

                pass

            elif la_ == 3:
                localctx = TeradataSQLExpressionsParser.TupleComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1786
                self.tuple_()
                self.state = 1787
                localctx.op = self.comparison_operator()
                self.state = 1788
                self.quantifier()
                self.state = 1789
                self.elements_list()
                self.state = 1793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1790
                        self.attribute_modification() 
                    self.state = 1795
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                pass

            elif la_ == 4:
                localctx = TeradataSQLExpressionsParser.BetweenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1796
                self.scalar_expr(0)
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1797
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1800
                self.match(TeradataSQLExpressionsParser.BETWEEN)
                self.state = 1801
                self.scalar_expr(0)
                self.state = 1802
                self.match(TeradataSQLExpressionsParser.AND)
                self.state = 1803
                self.scalar_expr(0)
                pass

            elif la_ == 5:
                localctx = TeradataSQLExpressionsParser.ScalarInListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1805
                self.scalar_expr(0)
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1806
                    self.match(TeradataSQLExpressionsParser.IS)


                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1809
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1812
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 1813
                    self.quantifier()


                self.state = 1816
                self.scalar_expr_list()
                self.state = 1820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1817
                        self.attribute_modification() 
                    self.state = 1822
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                pass

            elif la_ == 6:
                localctx = TeradataSQLExpressionsParser.ScalarInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1823
                self.scalar_expr(0)
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1824
                    self.match(TeradataSQLExpressionsParser.IS)


                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1827
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1830
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 1831
                    self.quantifier()


                self.state = 1834
                self.subquery()
                self.state = 1838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1835
                        self.attribute_modification() 
                    self.state = 1840
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                pass

            elif la_ == 7:
                localctx = TeradataSQLExpressionsParser.ScalarInScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1841
                self.scalar_expr(0)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1842
                    self.match(TeradataSQLExpressionsParser.IS)


                self.state = 1846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1845
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1848
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 1849
                    self.quantifier()


                self.state = 1852
                self.scalar_expr(0)
                self.state = 1856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1853
                        self.attribute_modification() 
                    self.state = 1858
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                pass

            elif la_ == 8:
                localctx = TeradataSQLExpressionsParser.TupleInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1859
                self.tuple_()
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1860
                    self.match(TeradataSQLExpressionsParser.IS)


                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1863
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1866
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 1867
                    self.quantifier()


                self.state = 1870
                self.subquery()
                self.state = 1874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1871
                        self.attribute_modification() 
                    self.state = 1876
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                pass

            elif la_ == 9:
                localctx = TeradataSQLExpressionsParser.ScalarLikeScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1877
                self.scalar_expr(0)
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1878
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1881
                self.match(TeradataSQLExpressionsParser.LIKE)
                self.state = 1882
                self.scalar_expr(0)
                self.state = 1885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1883
                    self.match(TeradataSQLExpressionsParser.ESCAPE)
                    self.state = 1884
                    self.scalar_expr(0)


                pass

            elif la_ == 10:
                localctx = TeradataSQLExpressionsParser.ScalarLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1887
                self.scalar_expr(0)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1888
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1891
                self.match(TeradataSQLExpressionsParser.LIKE)
                self.state = 1892
                self.quantifier()
                self.state = 1893
                self.elements_list()
                self.state = 1897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1894
                        self.attribute_modification() 
                    self.state = 1899
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                self.state = 1902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1900
                    self.match(TeradataSQLExpressionsParser.ESCAPE)
                    self.state = 1901
                    self.scalar_expr(0)


                self.state = 1907
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1904
                        self.attribute_modification() 
                    self.state = 1909
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                pass

            elif la_ == 11:
                localctx = TeradataSQLExpressionsParser.TupleLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1910
                self.tuple_()
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1911
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1914
                self.match(TeradataSQLExpressionsParser.LIKE)
                self.state = 1915
                self.quantifier()
                self.state = 1916
                self.elements_list()
                self.state = 1920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1917
                        self.attribute_modification() 
                    self.state = 1922
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

                self.state = 1925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1923
                    self.match(TeradataSQLExpressionsParser.ESCAPE)
                    self.state = 1924
                    self.scalar_expr(0)


                self.state = 1930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1927
                        self.attribute_modification() 
                    self.state = 1932
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

                pass

            elif la_ == 12:
                localctx = TeradataSQLExpressionsParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1933
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1936
                self.match(TeradataSQLExpressionsParser.EXISTS)
                self.state = 1937
                self.subquery()
                pass

            elif la_ == 13:
                localctx = TeradataSQLExpressionsParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1938
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1939
                self.logical_expr(13)
                pass

            elif la_ == 14:
                localctx = TeradataSQLExpressionsParser.NullCheckContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1940
                self.scalar_expr(0)
                self.state = 1941
                self.match(TeradataSQLExpressionsParser.IS)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1942
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1945
                self.match(TeradataSQLExpressionsParser.NULL)
                pass

            elif la_ == 15:
                localctx = TeradataSQLExpressionsParser.PeriodContainsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1947
                self.scalar_expr(0)
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1948
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1951
                self.match(TeradataSQLExpressionsParser.CONTAINS)
                self.state = 1952
                self.scalar_expr(0)
                pass

            elif la_ == 16:
                localctx = TeradataSQLExpressionsParser.PeriodEqualsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1954
                self.scalar_expr(0)
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1955
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1958
                self.match(TeradataSQLExpressionsParser.EQUALS)
                self.state = 1959
                self.scalar_expr(0)
                pass

            elif la_ == 17:
                localctx = TeradataSQLExpressionsParser.PeriodMeetsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1961
                self.scalar_expr(0)
                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1962
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1965
                self.match(TeradataSQLExpressionsParser.MEETS)
                self.state = 1966
                self.scalar_expr(0)
                pass

            elif la_ == 18:
                localctx = TeradataSQLExpressionsParser.PeriodPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1968
                self.scalar_expr(0)
                self.state = 1970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1969
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1972
                self.match(TeradataSQLExpressionsParser.PRECEDES)
                self.state = 1973
                self.scalar_expr(0)
                pass

            elif la_ == 19:
                localctx = TeradataSQLExpressionsParser.PeriodSucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1975
                self.scalar_expr(0)
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 1976
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1979
                self.match(TeradataSQLExpressionsParser.SUCCEEDS)
                self.state = 1980
                self.scalar_expr(0)
                pass

            elif la_ == 20:
                localctx = TeradataSQLExpressionsParser.PeriodImmediatelyPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1982
                self.scalar_expr(0)
                self.state = 1983
                self.match(TeradataSQLExpressionsParser.IMMEDIATELY)
                self.state = 1984
                self.match(TeradataSQLExpressionsParser.PRECEDES)
                self.state = 1985
                self.scalar_expr(0)
                pass

            elif la_ == 21:
                localctx = TeradataSQLExpressionsParser.PeriodImmediatelySucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1987
                self.scalar_expr(0)
                self.state = 1988
                self.match(TeradataSQLExpressionsParser.IMMEDIATELY)
                self.state = 1989
                self.match(TeradataSQLExpressionsParser.SUCCEEDS)
                self.state = 1990
                self.scalar_expr(0)
                pass

            elif la_ == 22:
                localctx = TeradataSQLExpressionsParser.PeriodOverlapsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1992
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1993
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 1994
                    self.scalar_expr(0)
                    self.state = 1995
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 1996
                    self.scalar_expr(0)
                    self.state = 1997
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 1999
                    self.subquery()
                    pass


                self.state = 2002
                self.match(TeradataSQLExpressionsParser.OVERLAPS)
                self.state = 2011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 2003
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2004
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 2005
                    self.scalar_expr(0)
                    self.state = 2006
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2007
                    self.scalar_expr(0)
                    self.state = 2008
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 2010
                    self.subquery()
                    pass


                pass

            elif la_ == 23:
                localctx = TeradataSQLExpressionsParser.ParenthesizedLogicalExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2013
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2014
                self.logical_expr(0)
                self.state = 2015
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2025
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLExpressionsParser.LogicalAndContext(self, TeradataSQLExpressionsParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 2019
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2020
                        self.match(TeradataSQLExpressionsParser.AND)
                        self.state = 2021
                        self.logical_expr(13)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLExpressionsParser.LogicalOrContext(self, TeradataSQLExpressionsParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 2022
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 2023
                        self.match(TeradataSQLExpressionsParser.OR)
                        self.state = 2024
                        self.logical_expr(12)
                        pass

             
                self.state = 2029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Scalar_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_scalar_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JsonMetadataContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.storage_format = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def METADATA(self):
            return self.getToken(TeradataSQLExpressionsParser.METADATA, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.STORAGE_SIZE, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMetadata" ):
                listener.enterJsonMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMetadata" ):
                listener.exitJsonMetadata(self)


    class JsonAsBsonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.validation_specification = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ASBSON(self):
            return self.getToken(TeradataSQLExpressionsParser.ASBSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBson" ):
                listener.enterJsonAsBson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBson" ):
                listener.exitJsonAsBson(self)


    class VariantTypeConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLExpressionsParser.NEW, 0)
        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.VARIANT_TYPE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.AS)
            else:
                return self.getToken(TeradataSQLExpressionsParser.AS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeConstructor" ):
                listener.enterVariantTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeConstructor" ):
                listener.exitVariantTypeConstructor(self)


    class XMLExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExtract" ):
                listener.enterXMLExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExtract" ):
                listener.exitXMLExtract(self)


    class ArrayComparisonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def ARRAY_GT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GT, 0)
        def ARRAY_GE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GE, 0)
        def ARRAY_LT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_LT, 0)
        def ARRAY_LE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_LE, 0)
        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_EQ, 0)
        def ARRAY_NE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_NE, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayComparison" ):
                listener.enterArrayComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayComparison" ):
                listener.exitArrayComparison(self)


    class ArrayGetContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.array_index = None # Scalar_exprContext
            self.other_expr = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ARRAY_GET(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GET, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_COMPARE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayGet" ):
                listener.enterArrayGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayGet" ):
                listener.exitArrayGet(self)


    class XMLConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLExpressionsParser.NEW, 0)
        def XML(self):
            return self.getToken(TeradataSQLExpressionsParser.XML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLConstructor" ):
                listener.enterXMLConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLConstructor" ):
                listener.exitXMLConstructor(self)


    class UDTMethodInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Method_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTMethodInvocation" ):
                listener.enterUDTMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTMethodInvocation" ):
                listener.exitUDTMethodInvocation(self)


    class JsonExtractLargeValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONEXTRACTLARGEVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractLargeValue" ):
                listener.enterJsonExtractLargeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractLargeValue" ):
                listener.exitJsonExtractLargeValue(self)


    class JsonRecursiveDescendSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COLON)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendSlice" ):
                listener.enterJsonRecursiveDescendSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendSlice" ):
                listener.exitJsonRecursiveDescendSlice(self)


    class FunctionInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_invocation(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Function_invocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class ScalarSubqueryContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)


    class JsonExistValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def EXISTVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXISTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistValue" ):
                listener.enterJsonExistValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistValue" ):
                listener.exitJsonExistValue(self)


    class ModuloContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def MOD(self):
            return self.getToken(TeradataSQLExpressionsParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)


    class JsonExtractValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONEXTRACTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractValue" ):
                listener.enterJsonExtractValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractValue" ):
                listener.exitJsonExtractValue(self)


    class XMLCreateSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATESCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateSchemaBasedXML" ):
                listener.enterXMLCreateSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateSchemaBasedXML" ):
                listener.exitXMLCreateSchemaBasedXML(self)


    class ArrayUpdateContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_UPDATE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdate" ):
                listener.enterArrayUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdate" ):
                listener.exitArrayUpdate(self)


    class JsonExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtract" ):
                listener.enterJsonExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtract" ):
                listener.exitJsonExtract(self)


    class MultDivContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)
        def DIV_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.DIV_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)


    class PeriodIntersectContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLExpressionsParser.P_INTERSECT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodIntersect" ):
                listener.enterPeriodIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodIntersect" ):
                listener.exitPeriodIntersect(self)


    class IntervalExprParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval_expr_parenthesized(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_expr_parenthesizedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExprParenthesized" ):
                listener.enterIntervalExprParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExprParenthesized" ):
                listener.exitIntervalExprParenthesized(self)


    class JsonRecursiveDescendAllArrayElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllArrayElements" ):
                listener.enterJsonRecursiveDescendAllArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllArrayElements" ):
                listener.exitJsonRecursiveDescendAllArrayElements(self)


    class UnaryPlusMinusContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusMinus" ):
                listener.enterUnaryPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusMinus" ):
                listener.exitUnaryPlusMinus(self)


    class ConcatenationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def CONCATENATE(self):
            return self.getToken(TeradataSQLExpressionsParser.CONCATENATE, 0)
        def BROKEN_CONCATENATE(self):
            return self.getToken(TeradataSQLExpressionsParser.BROKEN_CONCATENATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class PeriodDiffContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def LDIFF(self):
            return self.getToken(TeradataSQLExpressionsParser.LDIFF, 0)
        def RDIFF(self):
            return self.getToken(TeradataSQLExpressionsParser.RDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodDiff" ):
                listener.enterPeriodDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodDiff" ):
                listener.exitPeriodDiff(self)


    class ArrayOmethodWithoudArgsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def OCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.OCOUNT, 0)
        def OLIMIT(self):
            return self.getToken(TeradataSQLExpressionsParser.OLIMIT, 0)
        def OFIRST(self):
            return self.getToken(TeradataSQLExpressionsParser.OFIRST, 0)
        def OLAST(self):
            return self.getToken(TeradataSQLExpressionsParser.OLAST, 0)
        def ODELETE(self):
            return self.getToken(TeradataSQLExpressionsParser.ODELETE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithoudArgs" ):
                listener.enterArrayOmethodWithoudArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithoudArgs" ):
                listener.exitArrayOmethodWithoudArgs(self)


    class PartitioningExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Partitioning_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningExpr" ):
                listener.enterPartitioningExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningExpr" ):
                listener.exitPartitioningExpr(self)


    class XMLExistNodeContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def EXISTSNODE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXISTSNODE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExistNode" ):
                listener.enterXMLExistNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExistNode" ):
                listener.exitXMLExistNode(self)


    class JsonRecursiveDescendArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendArrayElementReference" ):
                listener.enterJsonRecursiveDescendArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendArrayElementReference" ):
                listener.exitJsonRecursiveDescendArrayElementReference(self)


    class DataTypeConversionContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def teradata_type_conversion(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Teradata_type_conversionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeConversion" ):
                listener.enterDataTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeConversion" ):
                listener.exitDataTypeConversion(self)


    class JsonRecursiveDescendObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendObjectMember" ):
                listener.enterJsonRecursiveDescendObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendObjectMember" ):
                listener.exitJsonRecursiveDescendObjectMember(self)


    class IntervalExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS_SIGN, 0)
        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_expr_start_end_phraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)


    class ExponentiationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def EXPONENTIATION(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPONENTIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)


    class XMLIsSchemaValidatedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLExpressionsParser.ISSCHEMAVALIDATED, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValidated" ):
                listener.enterXMLIsSchemaValidated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValidated" ):
                listener.exitXMLIsSchemaValidated(self)


    class JSONConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.json_data = None # Scalar_exprContext
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLExpressionsParser.NEW, 0)
        def JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.LATIN, 0)
        def UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE, 0)
        def BSON(self):
            return self.getToken(TeradataSQLExpressionsParser.BSON, 0)
        def UBJSON(self):
            return self.getToken(TeradataSQLExpressionsParser.UBJSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSONConstructor" ):
                listener.enterJSONConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSONConstructor" ):
                listener.exitJSONConstructor(self)


    class JsonSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COLON)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonSlice" ):
                listener.enterJsonSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonSlice" ):
                listener.exitJsonSlice(self)


    class XMLIsSchemaValidContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.elem_decl = None # Scalar_exprContext
            self.ns = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLExpressionsParser.ISSCHEMAVALID, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValid" ):
                listener.enterXMLIsSchemaValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValid" ):
                listener.exitXMLIsSchemaValid(self)


    class ArrayAggregationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.matching_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_SUM, 0)
        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_AVG, 0)
        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MAX, 0)
        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MIN, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_COUNT_DISTINCT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAggregation" ):
                listener.enterArrayAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAggregation" ):
                listener.exitArrayAggregation(self)


    class ArrayUpdateStrideContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_UPDATE_STRIDE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)

        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdateStride" ):
                listener.enterArrayUpdateStride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdateStride" ):
                listener.exitArrayUpdateStride(self)


    class LiteralExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)


    class ArrayOmethodWithArgContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def OEXISTS(self):
            return self.getToken(TeradataSQLExpressionsParser.OEXISTS, 0)
        def OPRIOR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPRIOR, 0)
        def ONEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.ONEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithArg" ):
                listener.enterArrayOmethodWithArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithArg" ):
                listener.exitArrayOmethodWithArg(self)


    class JsonRecursiveDescendAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllObjectMembers" ):
                listener.enterJsonRecursiveDescendAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllObjectMembers" ):
                listener.exitJsonRecursiveDescendAllObjectMembers(self)


    class XMLCreateNonSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATENONSCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateNonSchemaBasedXML" ):
                listener.enterXMLCreateNonSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateNonSchemaBasedXML" ):
                listener.exitXMLCreateNonSchemaBasedXML(self)


    class VariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableReference" ):
                listener.enterVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableReference" ):
                listener.exitVariableReference(self)


    class AddSubContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSub" ):
                listener.enterAddSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSub" ):
                listener.exitAddSub(self)


    class JsonObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)


    class JsonAllElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllElements" ):
                listener.enterJsonAllElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllElements" ):
                listener.exitJsonAllElements(self)


    class ArrayOextendContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OEXTEND(self):
            return self.getToken(TeradataSQLExpressionsParser.OEXTEND, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOextend" ):
                listener.enterArrayOextend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOextend" ):
                listener.exitArrayOextend(self)


    class ArrayArithmeticContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_ADD, 0)
        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_SUB, 0)
        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MUL, 0)
        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_DIV, 0)
        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MOD, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayArithmetic" ):
                listener.enterArrayArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayArithmetic" ):
                listener.exitArrayArithmetic(self)


    class UDTConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLExpressionsParser.NEW, 0)
        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Udt_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SysudtlibContext,0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTConstructor" ):
                listener.enterUDTConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTConstructor" ):
                listener.exitUDTConstructor(self)


    class XMLTransformContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.xsl = None # Scalar_exprContext
            self.parammap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTRANSFORM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLTransform" ):
                listener.enterXMLTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLTransform" ):
                listener.exitXMLTransform(self)


    class DateTimeExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.At_timezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeExpr" ):
                listener.enterDateTimeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeExpr" ):
                listener.exitDateTimeExpr(self)


    class ColumnNameContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)


    class ArrayOtrimContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.num_remove = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def OTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.OTRIM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOtrim" ):
                listener.enterArrayOtrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOtrim" ):
                listener.exitArrayOtrim(self)


    class CursorVariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cursor_variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Cursor_variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorVariableReference" ):
                listener.enterCursorVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorVariableReference" ):
                listener.exitCursorVariableReference(self)


    class ParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized" ):
                listener.enterParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized" ):
                listener.exitParenthesized(self)


    class JsonAsBsonTextContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.ASBSONTEXT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBsonText" ):
                listener.enterJsonAsBsonText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBsonText" ):
                listener.exitJsonAsBsonText(self)


    class AttributeModificationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeModification" ):
                listener.enterAttributeModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeModification" ):
                listener.exitAttributeModification(self)


    class JsonCombineContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.array_or_object = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def COMBINE(self):
            return self.getToken(TeradataSQLExpressionsParser.COMBINE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonCombine" ):
                listener.enterJsonCombine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonCombine" ):
                listener.exitJsonCombine(self)


    class XMLIsDocumentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ISDOCUMENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsDocument" ):
                listener.enterXMLIsDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsDocument" ):
                listener.exitXMLIsDocument(self)


    class MacroParameterReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Macro_parameter_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroParameterReference" ):
                listener.enterMacroParameterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroParameterReference" ):
                listener.exitMacroParameterReference(self)


    class XMLIsContentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def ISCONTENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ISCONTENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsContent" ):
                listener.enterXMLIsContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsContent" ):
                listener.exitXMLIsContent(self)


    class ArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElementReference" ):
                listener.enterArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElementReference" ):
                listener.exitArrayElementReference(self)


    class ArrayCardinalityContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def CARDINALITY(self):
            return self.getToken(TeradataSQLExpressionsParser.CARDINALITY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_CONCAT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCardinality" ):
                listener.enterArrayCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCardinality" ):
                listener.exitArrayCardinality(self)


    class CaseExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class JsonKeycountContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.depth = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def KEYCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.KEYCOUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonKeycount" ):
                listener.enterJsonKeycount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonKeycount" ):
                listener.exitJsonKeycount(self)


    class JsonAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllObjectMembers" ):
                listener.enterJsonAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllObjectMembers" ):
                listener.exitJsonAllObjectMembers(self)



    def scalar_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLExpressionsParser.Scalar_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 162
        self.enterRecursionRule(localctx, 162, self.RULE_scalar_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLExpressionsParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2031
                self.literal()
                pass

            elif la_ == 2:
                localctx = TeradataSQLExpressionsParser.UnaryPlusMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2032
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2033
                self.scalar_expr(70)
                pass

            elif la_ == 3:
                localctx = TeradataSQLExpressionsParser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2034
                self.case_expr()
                pass

            elif la_ == 4:
                localctx = TeradataSQLExpressionsParser.PartitioningExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2035
                self.partitioning_expr()
                pass

            elif la_ == 5:
                localctx = TeradataSQLExpressionsParser.ColumnNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2036
                self.column_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLExpressionsParser.IntervalExprParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2037
                self.interval_expr_parenthesized()
                pass

            elif la_ == 7:
                localctx = TeradataSQLExpressionsParser.VariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2038
                self.variable_reference()
                pass

            elif la_ == 8:
                localctx = TeradataSQLExpressionsParser.CursorVariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2039
                self.cursor_variable_reference()
                pass

            elif la_ == 9:
                localctx = TeradataSQLExpressionsParser.MacroParameterReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2040
                self.macro_parameter_reference()
                pass

            elif la_ == 10:
                localctx = TeradataSQLExpressionsParser.UDTConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2041
                self.match(TeradataSQLExpressionsParser.NEW)
                self.state = 2043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 2042
                    self.sysudtlib()


                self.state = 2045
                self.udt_name()
                self.state = 2046
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 2047
                    self.scalar_expr(0)
                    self.state = 2052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2048
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2049
                        self.scalar_expr(0)
                        self.state = 2054
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2057
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                localctx = TeradataSQLExpressionsParser.JSONConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2059
                self.match(TeradataSQLExpressionsParser.NEW)
                self.state = 2060
                self.match(TeradataSQLExpressionsParser.JSON)
                self.state = 2061
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2062
                localctx.json_data = self.scalar_expr(0)
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2063
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2064
                    _la = self._input.LA(1)
                    if not(_la==556 or _la==735 or _la==1010 or _la==1015):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2067
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                localctx = TeradataSQLExpressionsParser.VariantTypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2069
                self.match(TeradataSQLExpressionsParser.NEW)
                self.state = 2070
                self.match(TeradataSQLExpressionsParser.VARIANT_TYPE)
                self.state = 2071
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2072
                self.scalar_expr(0)
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2073
                        self.match(TeradataSQLExpressionsParser.AS)


                    self.state = 2076
                    self.alias_name()


                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2079
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2080
                    self.scalar_expr(0)
                    self.state = 2085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 2082
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==20:
                            self.state = 2081
                            self.match(TeradataSQLExpressionsParser.AS)


                        self.state = 2084
                        self.alias_name()


                    self.state = 2091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2092
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                localctx = TeradataSQLExpressionsParser.XMLConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2094
                self.match(TeradataSQLExpressionsParser.NEW)
                self.state = 2095
                self.match(TeradataSQLExpressionsParser.XML)
                self.state = 2096
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2097
                self.scalar_expr(0)
                self.state = 2098
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                localctx = TeradataSQLExpressionsParser.FunctionInvocationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2100
                self.function_invocation()
                pass

            elif la_ == 15:
                localctx = TeradataSQLExpressionsParser.ParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2101
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2102
                self.scalar_expr(0)
                self.state = 2103
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                localctx = TeradataSQLExpressionsParser.ScalarSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2105
                self.subquery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2511
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLExpressionsParser.ExponentiationContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2108
                        if not self.precpred(self._ctx, 69):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 69)")
                        self.state = 2109
                        self.match(TeradataSQLExpressionsParser.EXPONENTIATION)
                        self.state = 2110
                        self.scalar_expr(69)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLExpressionsParser.MultDivContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2111
                        if not self.precpred(self._ctx, 68):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 68)")
                        self.state = 2112
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1219 or _la==1220):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2113
                        self.scalar_expr(69)
                        pass

                    elif la_ == 3:
                        localctx = TeradataSQLExpressionsParser.ModuloContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2114
                        if not self.precpred(self._ctx, 67):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 67)")
                        self.state = 2115
                        self.match(TeradataSQLExpressionsParser.MOD)
                        self.state = 2116
                        self.scalar_expr(67)
                        pass

                    elif la_ == 4:
                        localctx = TeradataSQLExpressionsParser.AddSubContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2117
                        if not self.precpred(self._ctx, 66):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 66)")
                        self.state = 2118
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2119
                        self.scalar_expr(67)
                        pass

                    elif la_ == 5:
                        localctx = TeradataSQLExpressionsParser.ConcatenationContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2120
                        if not self.precpred(self._ctx, 65):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 65)")
                        self.state = 2121
                        _la = self._input.LA(1)
                        if not(_la==1217 or _la==1218):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2122
                        self.scalar_expr(66)
                        pass

                    elif la_ == 6:
                        localctx = TeradataSQLExpressionsParser.PeriodIntersectContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2123
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 2124
                        self.match(TeradataSQLExpressionsParser.P_INTERSECT)
                        self.state = 2125
                        self.scalar_expr(58)
                        pass

                    elif la_ == 7:
                        localctx = TeradataSQLExpressionsParser.PeriodDiffContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2126
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 2127
                        _la = self._input.LA(1)
                        if not(_la==736 or _la==876):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2128
                        self.scalar_expr(57)
                        pass

                    elif la_ == 8:
                        localctx = TeradataSQLExpressionsParser.DateTimeExprContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2129
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 2130
                        self.at_timezone()
                        pass

                    elif la_ == 9:
                        localctx = TeradataSQLExpressionsParser.IntervalExprContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2131
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 2132
                        self.match(TeradataSQLExpressionsParser.MINUS_SIGN)
                        self.state = 2133
                        self.scalar_expr(0)
                        self.state = 2134
                        self.interval_expr_start_end_phrase()
                        pass

                    elif la_ == 10:
                        localctx = TeradataSQLExpressionsParser.AttributeModificationContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2136
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 2138 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2137
                                self.attribute_modification()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2140 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = TeradataSQLExpressionsParser.JsonObjectMemberContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2142
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 2143
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2144
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 12:
                        localctx = TeradataSQLExpressionsParser.JsonAllObjectMembersContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2145
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 2146
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2147
                        self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                        pass

                    elif la_ == 13:
                        localctx = TeradataSQLExpressionsParser.JsonAllElementsContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2148
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 2149
                        self.match(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET)
                        self.state = 2150
                        self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                        self.state = 2151
                        self.match(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = TeradataSQLExpressionsParser.JsonSliceContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2152
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 2153
                        self.match(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET)
                        self.state = 2154
                        localctx.from_index = self.integer_literal()
                        self.state = 2155
                        self.match(TeradataSQLExpressionsParser.COLON)
                        self.state = 2156
                        localctx.to_index = self.integer_literal()
                        self.state = 2159
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 2157
                            self.match(TeradataSQLExpressionsParser.COLON)
                            self.state = 2158
                            localctx.step_size = self.integer_literal()


                        self.state = 2161
                        self.match(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = TeradataSQLExpressionsParser.JsonRecursiveDescendObjectMemberContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2163
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 2164
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2165
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2166
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 16:
                        localctx = TeradataSQLExpressionsParser.JsonRecursiveDescendAllObjectMembersContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2167
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 2168
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2169
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2170
                        self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                        pass

                    elif la_ == 17:
                        localctx = TeradataSQLExpressionsParser.JsonRecursiveDescendArrayElementReferenceContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2171
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 2172
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2173
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2174
                        self.match(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET)
                        self.state = 2175
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 2176
                        self.match(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 18:
                        localctx = TeradataSQLExpressionsParser.JsonRecursiveDescendAllArrayElementsContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2178
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 2179
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2180
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2181
                        self.match(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET)
                        self.state = 2182
                        self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                        self.state = 2183
                        self.match(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 19:
                        localctx = TeradataSQLExpressionsParser.JsonRecursiveDescendSliceContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2184
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 2185
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2186
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2187
                        self.match(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET)
                        self.state = 2188
                        localctx.from_index = self.integer_literal()
                        self.state = 2189
                        self.match(TeradataSQLExpressionsParser.COLON)
                        self.state = 2190
                        localctx.to_index = self.integer_literal()
                        self.state = 2193
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 2191
                            self.match(TeradataSQLExpressionsParser.COLON)
                            self.state = 2192
                            localctx.step_size = self.integer_literal()


                        self.state = 2195
                        self.match(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 20:
                        localctx = TeradataSQLExpressionsParser.JsonAsBsonContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2197
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 2198
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2199
                        self.match(TeradataSQLExpressionsParser.ASBSON)
                        self.state = 2200
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2202
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                            self.state = 2201
                            localctx.validation_specification = self.char_string_literal()


                        self.state = 2204
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 21:
                        localctx = TeradataSQLExpressionsParser.JsonAsBsonTextContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2205
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 2206
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2207
                        self.match(TeradataSQLExpressionsParser.ASBSONTEXT)
                        self.state = 2208
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2209
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 22:
                        localctx = TeradataSQLExpressionsParser.JsonCombineContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2210
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 2211
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2212
                        self.match(TeradataSQLExpressionsParser.COMBINE)
                        self.state = 2213
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2214
                        self.scalar_expr(0)
                        self.state = 2217
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2215
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2216
                            localctx.array_or_object = self.char_string_literal()


                        self.state = 2219
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 23:
                        localctx = TeradataSQLExpressionsParser.JsonExistValueContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2221
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 2222
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2223
                        self.match(TeradataSQLExpressionsParser.EXISTVALUE)
                        self.state = 2224
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2225
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2226
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 24:
                        localctx = TeradataSQLExpressionsParser.JsonExtractContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2228
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 2229
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2230
                        self.match(TeradataSQLExpressionsParser.JSONEXTRACT)
                        self.state = 2231
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2232
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2233
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 25:
                        localctx = TeradataSQLExpressionsParser.JsonExtractValueContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2235
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 2236
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2237
                        self.match(TeradataSQLExpressionsParser.JSONEXTRACTVALUE)
                        self.state = 2238
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2239
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2240
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 26:
                        localctx = TeradataSQLExpressionsParser.JsonExtractLargeValueContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2242
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 2243
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2244
                        self.match(TeradataSQLExpressionsParser.JSONEXTRACTLARGEVALUE)
                        self.state = 2245
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2246
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2247
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 27:
                        localctx = TeradataSQLExpressionsParser.JsonKeycountContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2249
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 2250
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2251
                        self.match(TeradataSQLExpressionsParser.KEYCOUNT)
                        self.state = 2252
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2253
                        localctx.depth = self.integer_literal()
                        self.state = 2254
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 28:
                        localctx = TeradataSQLExpressionsParser.JsonMetadataContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2256
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 2257
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2258
                        self.match(TeradataSQLExpressionsParser.METADATA)
                        self.state = 2259
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2260
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 29:
                        localctx = TeradataSQLExpressionsParser.JsonMetadataContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2261
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 2262
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2263
                        self.match(TeradataSQLExpressionsParser.STORAGE_SIZE)
                        self.state = 2264
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2265
                        localctx.storage_format = self.char_string_literal()
                        self.state = 2266
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 30:
                        localctx = TeradataSQLExpressionsParser.XMLCreateSchemaBasedXMLContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2268
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 2269
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2270
                        self.match(TeradataSQLExpressionsParser.CREATESCHEMABASEDXML)
                        self.state = 2271
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2272
                        localctx.schema = self.scalar_expr(0)
                        self.state = 2273
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 31:
                        localctx = TeradataSQLExpressionsParser.XMLCreateNonSchemaBasedXMLContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2275
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2276
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2277
                        self.match(TeradataSQLExpressionsParser.CREATENONSCHEMABASEDXML)
                        self.state = 2278
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2279
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 32:
                        localctx = TeradataSQLExpressionsParser.XMLExistNodeContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2280
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 2281
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2282
                        self.match(TeradataSQLExpressionsParser.EXISTSNODE)
                        self.state = 2283
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2287
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                        if la_ == 1:
                            self.state = 2284
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 2285
                            self.match(TeradataSQLExpressionsParser.COMMA)


                        self.state = 2289
                        localctx.query = self.scalar_expr(0)
                        self.state = 2290
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2291
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 2292
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 33:
                        localctx = TeradataSQLExpressionsParser.XMLIsContentContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2294
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 2295
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2296
                        self.match(TeradataSQLExpressionsParser.ISCONTENT)
                        self.state = 2297
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2298
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 34:
                        localctx = TeradataSQLExpressionsParser.XMLIsDocumentContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2299
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 2300
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2301
                        self.match(TeradataSQLExpressionsParser.ISDOCUMENT)
                        self.state = 2302
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2303
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 35:
                        localctx = TeradataSQLExpressionsParser.XMLIsSchemaValidContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2304
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 2305
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2306
                        self.match(TeradataSQLExpressionsParser.ISSCHEMAVALID)
                        self.state = 2307
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2308
                        localctx.schema = self.scalar_expr(0)
                        self.state = 2309
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2310
                        localctx.elem_decl = self.scalar_expr(0)
                        self.state = 2311
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2312
                        localctx.ns = self.scalar_expr(0)
                        self.state = 2313
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 36:
                        localctx = TeradataSQLExpressionsParser.XMLIsSchemaValidatedContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2315
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 2316
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2317
                        self.match(TeradataSQLExpressionsParser.ISSCHEMAVALIDATED)
                        self.state = 2318
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2319
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 37:
                        localctx = TeradataSQLExpressionsParser.XMLExtractContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2320
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 2321
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2322
                        self.match(TeradataSQLExpressionsParser.XMLEXTRACT)
                        self.state = 2323
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2327
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                        if la_ == 1:
                            self.state = 2324
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 2325
                            self.match(TeradataSQLExpressionsParser.COMMA)


                        self.state = 2329
                        localctx.query = self.scalar_expr(0)
                        self.state = 2330
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2331
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 2332
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 38:
                        localctx = TeradataSQLExpressionsParser.XMLTransformContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2334
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 2335
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2336
                        self.match(TeradataSQLExpressionsParser.XMLTRANSFORM)
                        self.state = 2337
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2338
                        localctx.xsl = self.scalar_expr(0)
                        self.state = 2339
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2340
                        localctx.parammap = self.scalar_expr(0)
                        self.state = 2341
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 39:
                        localctx = TeradataSQLExpressionsParser.ArrayElementReferenceContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2343
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 2344
                        self.match(TeradataSQLExpressionsParser.OPEN_SQ_BRACKET)
                        self.state = 2345
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 2350
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 2346
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2347
                            localctx._integer_literal = self.integer_literal()
                            localctx.index_value.append(localctx._integer_literal)
                            self.state = 2352
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2353
                        self.match(TeradataSQLExpressionsParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 40:
                        localctx = TeradataSQLExpressionsParser.ArrayCardinalityContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2355
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 2356
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2357
                        self.match(TeradataSQLExpressionsParser.CARDINALITY)
                        self.state = 2358
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2360
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2359
                            self.array_scope_reference()


                        self.state = 2362
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 41:
                        localctx = TeradataSQLExpressionsParser.ArrayCardinalityContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2363
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 2364
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2365
                        self.match(TeradataSQLExpressionsParser.ARRAY_CONCAT)
                        self.state = 2366
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2367
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 2370
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2368
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2369
                            self.array_scope_reference()


                        self.state = 2372
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 42:
                        localctx = TeradataSQLExpressionsParser.ArrayComparisonContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2374
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 2375
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2376
                        _la = self._input.LA(1)
                        if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2377
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2378
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 2381
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2379
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2380
                            self.array_scope_reference()


                        self.state = 2383
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 43:
                        localctx = TeradataSQLExpressionsParser.ArrayArithmeticContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2385
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 2386
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2387
                        _la = self._input.LA(1)
                        if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2388
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2389
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 2392
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2390
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2391
                            self.array_scope_reference()


                        self.state = 2394
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 44:
                        localctx = TeradataSQLExpressionsParser.ArrayAggregationContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2396
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 2397
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2398
                        _la = self._input.LA(1)
                        if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2399
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2400
                            self.array_scope_reference()


                        self.state = 2403
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 45:
                        localctx = TeradataSQLExpressionsParser.ArrayAggregationContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2404
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2405
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2406
                        self.match(TeradataSQLExpressionsParser.ARRAY_COUNT_DISTINCT)
                        self.state = 2407
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2408
                            self.array_scope_reference()
                            self.state = 2411
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 2409
                                self.match(TeradataSQLExpressionsParser.COMMA)
                                self.state = 2410
                                localctx.matching_expr = self.scalar_expr(0)




                        self.state = 2415
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 46:
                        localctx = TeradataSQLExpressionsParser.ArrayGetContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2416
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 2417
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2418
                        self.match(TeradataSQLExpressionsParser.ARRAY_GET)
                        self.state = 2419
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2420
                        localctx.array_index = self.scalar_expr(0)
                        self.state = 2421
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 47:
                        localctx = TeradataSQLExpressionsParser.ArrayGetContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2423
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2424
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2425
                        self.match(TeradataSQLExpressionsParser.ARRAY_COMPARE)
                        self.state = 2426
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2427
                        localctx.other_expr = self.scalar_expr(0)
                        self.state = 2434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2428
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2429
                            self.array_scope_reference()
                            self.state = 2432
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 2430
                                self.match(TeradataSQLExpressionsParser.COMMA)
                                self.state = 2431
                                localctx.nulls_equal_flag = self.integer_literal()




                        self.state = 2436
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 48:
                        localctx = TeradataSQLExpressionsParser.ArrayUpdateContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2438
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 2439
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2440
                        self.match(TeradataSQLExpressionsParser.ARRAY_UPDATE)
                        self.state = 2441
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2442
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 2448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2443
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2446
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                            if la_ == 1:
                                self.state = 2444
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 2445
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 2450
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 49:
                        localctx = TeradataSQLExpressionsParser.ArrayUpdateStrideContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2452
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 2453
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2454
                        self.match(TeradataSQLExpressionsParser.ARRAY_UPDATE_STRIDE)
                        self.state = 2455
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2456
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 2457
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2458
                        localctx.stride = self.integer_literal()
                        self.state = 2464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2459
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2462
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                            if la_ == 1:
                                self.state = 2460
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 2461
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 2466
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 50:
                        localctx = TeradataSQLExpressionsParser.ArrayOmethodWithArgContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2468
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 2469
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2470
                        _la = self._input.LA(1)
                        if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2471
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2472
                        self.scalar_expr(0)
                        self.state = 2473
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 51:
                        localctx = TeradataSQLExpressionsParser.ArrayOmethodWithoudArgsContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2475
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 2476
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2477
                        _la = self._input.LA(1)
                        if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 179) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2478
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2479
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 52:
                        localctx = TeradataSQLExpressionsParser.ArrayOextendContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2480
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 2481
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2482
                        self.match(TeradataSQLExpressionsParser.OEXTEND)
                        self.state = 2483
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2484
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 53:
                        localctx = TeradataSQLExpressionsParser.ArrayOtrimContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2485
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2486
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2487
                        self.match(TeradataSQLExpressionsParser.OTRIM)
                        self.state = 2488
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2489
                            localctx.num_remove = self.integer_literal()


                        self.state = 2492
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 54:
                        localctx = TeradataSQLExpressionsParser.UDTMethodInvocationContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2493
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2494
                        self.match(TeradataSQLExpressionsParser.DOT_)
                        self.state = 2495
                        self.method_name()
                        self.state = 2496
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 2505
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                            self.state = 2497
                            self.scalar_expr(0)
                            self.state = 2502
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1208:
                                self.state = 2498
                                self.match(TeradataSQLExpressionsParser.COMMA)
                                self.state = 2499
                                self.scalar_expr(0)
                                self.state = 2504
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 2507
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                        pass

                    elif la_ == 55:
                        localctx = TeradataSQLExpressionsParser.DataTypeConversionContext(self, TeradataSQLExpressionsParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2509
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2510
                        self.teradata_type_conversion()
                        pass

             
                self.state = 2515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def tuple_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Tuple_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Tuple_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = TeradataSQLExpressionsParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 2517
            self.tuple_attribute()
            self.state = 2520 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2518
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2519
                self.tuple_attribute()
                self.state = 2522 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 2524
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_tuple_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_attribute" ):
                listener.enterTuple_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_attribute" ):
                listener.exitTuple_attribute(self)




    def tuple_attribute(self):

        localctx = TeradataSQLExpressionsParser.Tuple_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tuple_attribute)
        self._la = 0 # Token type
        try:
            self.state = 2541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.scalar_expr(0)
                self.state = 2531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2527
                        self.match(TeradataSQLExpressionsParser.AS)


                    self.state = 2530
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2533
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2534
                self.scalar_expr(0)
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2535
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 2538
                self.alias_name()
                self.state = 2539
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valued_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Valued_case_exprContext,0)


        def searched_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Searched_case_exprContext,0)


        def coalesce_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Coalesce_exprContext,0)


        def nullif_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nullif_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = TeradataSQLExpressionsParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_case_expr)
        try:
            self.state = 2547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2543
                self.valued_case_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2544
                self.searched_case_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2545
                self.coalesce_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2546
                self.nullif_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valued_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLExpressionsParser.CASE, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def END(self):
            return self.getToken(TeradataSQLExpressionsParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.WHEN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.THEN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLExpressionsParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_valued_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValued_case_expr" ):
                listener.enterValued_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValued_case_expr" ):
                listener.exitValued_case_expr(self)




    def valued_case_expr(self):

        localctx = TeradataSQLExpressionsParser.Valued_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_valued_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2549
            self.match(TeradataSQLExpressionsParser.CASE)
            self.state = 2550
            self.scalar_expr(0)
            self.state = 2556 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2551
                self.match(TeradataSQLExpressionsParser.WHEN)
                self.state = 2552
                self.scalar_expr(0)
                self.state = 2553
                self.match(TeradataSQLExpressionsParser.THEN)
                self.state = 2554
                self.scalar_expr(0)
                self.state = 2558 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 2562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 2560
                self.match(TeradataSQLExpressionsParser.ELSE)
                self.state = 2561
                self.scalar_expr(0)


            self.state = 2564
            self.match(TeradataSQLExpressionsParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLExpressionsParser.CASE, 0)

        def END(self):
            return self.getToken(TeradataSQLExpressionsParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.WHEN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.THEN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.THEN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def ELSE(self):
            return self.getToken(TeradataSQLExpressionsParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_searched_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_expr" ):
                listener.enterSearched_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_expr" ):
                listener.exitSearched_case_expr(self)




    def searched_case_expr(self):

        localctx = TeradataSQLExpressionsParser.Searched_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_searched_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self.match(TeradataSQLExpressionsParser.CASE)
            self.state = 2572 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2567
                self.match(TeradataSQLExpressionsParser.WHEN)
                self.state = 2568
                self.logical_expr(0)
                self.state = 2569
                self.match(TeradataSQLExpressionsParser.THEN)
                self.state = 2570
                self.scalar_expr(0)
                self.state = 2574 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 2578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 2576
                self.match(TeradataSQLExpressionsParser.ELSE)
                self.state = 2577
                self.scalar_expr(0)


            self.state = 2580
            self.match(TeradataSQLExpressionsParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coalesce_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(TeradataSQLExpressionsParser.COALESCE, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_expr_list_comma_separatedContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_coalesce_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce_expr" ):
                listener.enterCoalesce_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce_expr" ):
                listener.exitCoalesce_expr(self)




    def coalesce_expr(self):

        localctx = TeradataSQLExpressionsParser.Coalesce_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_coalesce_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            self.match(TeradataSQLExpressionsParser.COALESCE)
            self.state = 2583
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nullif_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(TeradataSQLExpressionsParser.NULLIF, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_nullif_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullif_expr" ):
                listener.enterNullif_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullif_expr" ):
                listener.exitNullif_expr(self)




    def nullif_expr(self):

        localctx = TeradataSQLExpressionsParser.Nullif_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_nullif_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self.match(TeradataSQLExpressionsParser.NULLIF)
            self.state = 2586
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 2587
            self.scalar_expr(0)
            self.state = 2588
            self.match(TeradataSQLExpressionsParser.COMMA)
            self.state = 2589
            self.scalar_expr(0)
            self.state = 2590
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_interval_expr_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_base" ):
                listener.enterInterval_expr_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_base" ):
                listener.exitInterval_expr_base(self)




    def interval_expr_base(self):

        localctx = TeradataSQLExpressionsParser.Interval_expr_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_interval_expr_base)
        try:
            self.state = 2602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2592
                self.scalar_expr(0)
                self.state = 2593
                self.match(TeradataSQLExpressionsParser.MINUS_SIGN)
                self.state = 2594
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2596
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2597
                self.scalar_expr(0)
                self.state = 2598
                self.match(TeradataSQLExpressionsParser.MINUS_SIGN)
                self.state = 2599
                self.scalar_expr(0)
                self.state = 2600
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def interval_expr_base(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_expr_baseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_expr_start_end_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_interval_expr_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_parenthesized" ):
                listener.enterInterval_expr_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_parenthesized" ):
                listener.exitInterval_expr_parenthesized(self)




    def interval_expr_parenthesized(self):

        localctx = TeradataSQLExpressionsParser.Interval_expr_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_interval_expr_parenthesized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2604
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 2605
            self.interval_expr_base()
            self.state = 2606
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 2607
            self.interval_expr_start_end_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_start_end_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_seconds_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR, 0)

        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.MONTH)
            else:
                return self.getToken(TeradataSQLExpressionsParser.MONTH, i)

        def DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY, 0)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.HOUR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.MINUTE)
            else:
                return self.getToken(TeradataSQLExpressionsParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.SECOND)
            else:
                return self.getToken(TeradataSQLExpressionsParser.SECOND, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def TO(self):
            return self.getToken(TeradataSQLExpressionsParser.TO, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_interval_expr_start_end_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_start_end_phrase" ):
                listener.enterInterval_expr_start_end_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_start_end_phrase" ):
                listener.exitInterval_expr_start_end_phrase(self)




    def interval_expr_start_end_phrase(self):

        localctx = TeradataSQLExpressionsParser.Interval_expr_start_end_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_interval_expr_start_end_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2609
            _la = self._input.LA(1)
            if not(_la==106 or _la==185 or _la==248 or _la==258 or _la==368 or _la==478):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 2610
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2611
                localctx.precision = self.integer_literal()
                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2612
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2613
                    localctx.fractional_seconds_precision = self.integer_literal()


                self.state = 2616
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 2628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 2620
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 2621
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2622
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 2623
                    localctx.fractional_seconds_precision = self.integer_literal()
                    self.state = 2624
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Aggregate_functionContext,0)


        def analytic_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Analytic_functionContext,0)


        def arithmetic_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Arithmetic_functionContext,0)


        def array_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_functionContext,0)


        def attribute_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_functionContext,0)


        def byte_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Byte_functionContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Builtin_functionContext,0)


        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Calendar_functionContext,0)


        def comparison_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Comparison_functionContext,0)


        def compression_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Compression_functionContext,0)


        def conversion_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Conversion_functionContext,0)


        def date_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Date_functionContext,0)


        def hash_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hash_functionContext,0)


        def lob_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Lob_functionContext,0)


        def map_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Map_functionContext,0)


        def nvl_funtion(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nvl_funtionContext,0)


        def period_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Period_functionContext,0)


        def regexp_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Regexp_functionContext,0)


        def string_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.String_functionContext,0)


        def json_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_functionContext,0)


        def xml_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_functionContext,0)


        def other_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Other_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_invocation" ):
                listener.enterFunction_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_invocation" ):
                listener.exitFunction_invocation(self)




    def function_invocation(self):

        localctx = TeradataSQLExpressionsParser.Function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_function_invocation)
        try:
            self.state = 2652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2630
                self.aggregate_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2631
                self.analytic_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2632
                self.arithmetic_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2633
                self.array_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2634
                self.attribute_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2635
                self.byte_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2636
                self.builtin_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2637
                self.calendar_function()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2638
                self.comparison_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2639
                self.compression_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2640
                self.conversion_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2641
                self.date_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2642
                self.hash_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2643
                self.lob_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2644
                self.map_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2645
                self.nvl_funtion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2646
                self.period_function()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2647
                self.regexp_function()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2648
                self.string_function()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2649
                self.json_function()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2650
                self.xml_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2651
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_aggregate_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ListAggContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LISTAGG(self):
            return self.getToken(TeradataSQLExpressionsParser.LISTAGG, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAgg" ):
                listener.enterListAgg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAgg" ):
                listener.exitListAgg(self)


    class AggOneArgContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def AVERAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.AVERAGE, 0)
        def AVG(self):
            return self.getToken(TeradataSQLExpressionsParser.AVG, 0)
        def AVE(self):
            return self.getToken(TeradataSQLExpressionsParser.AVE, 0)
        def KURTOSIS(self):
            return self.getToken(TeradataSQLExpressionsParser.KURTOSIS, 0)
        def MAXIMUM(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXIMUM, 0)
        def MAX(self):
            return self.getToken(TeradataSQLExpressionsParser.MAX, 0)
        def MIN(self):
            return self.getToken(TeradataSQLExpressionsParser.MIN, 0)
        def MINIMUM(self):
            return self.getToken(TeradataSQLExpressionsParser.MINIMUM, 0)
        def SKEW(self):
            return self.getToken(TeradataSQLExpressionsParser.SKEW, 0)
        def STDDEV_POP(self):
            return self.getToken(TeradataSQLExpressionsParser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.STDDEV_SAMP, 0)
        def SUM(self):
            return self.getToken(TeradataSQLExpressionsParser.SUM, 0)
        def VAR_POP(self):
            return self.getToken(TeradataSQLExpressionsParser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.VAR_SAMP, 0)
        def DISTINCT(self):
            return self.getToken(TeradataSQLExpressionsParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggOneArg" ):
                listener.enterAggOneArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggOneArg" ):
                listener.exitAggOneArg(self)


    class AggTwoArgsContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def CORR(self):
            return self.getToken(TeradataSQLExpressionsParser.CORR, 0)
        def COVAR_POP(self):
            return self.getToken(TeradataSQLExpressionsParser.COVAR_POP, 0)
        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.COVAR_SAMP, 0)
        def REGR_AVGX(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_AVGX, 0)
        def REGR_AVGY(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_AVGY, 0)
        def REGR_COUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_COUNT, 0)
        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_INTERCEPT, 0)
        def REGR_R2(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_R2, 0)
        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SLOPE, 0)
        def REGR_SXX(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SXX, 0)
        def REGR_SXY(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SXY, 0)
        def REGR_SYY(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SYY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggTwoArgs" ):
                listener.enterAggTwoArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggTwoArgs" ):
                listener.exitAggTwoArgs(self)


    class GroupingContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(TeradataSQLExpressionsParser.GROUPING, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping" ):
                listener.enterGrouping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping" ):
                listener.exitGrouping(self)


    class AggCountContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLExpressionsParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.COUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)

        def DISTINCT(self):
            return self.getToken(TeradataSQLExpressionsParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNIQUE, 0)
        def ALL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggCount" ):
                listener.enterAggCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggCount" ):
                listener.exitAggCount(self)



    def aggregate_function(self):

        localctx = TeradataSQLExpressionsParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 2689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 213, 238, 239, 244, 246, 380, 396, 397, 403, 461, 462]:
                localctx = TeradataSQLExpressionsParser.AggOneArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2654
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 10838081537) != 0) or ((((_la - 380)) & ~0x3f) == 0 and ((1 << (_la - 380)) & 8585217) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2655
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==121:
                    self.state = 2656
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2659
                self.scalar_expr(0)
                self.state = 2660
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [80, 84, 85, 327, 328, 329, 330, 331, 332, 333, 334, 335]:
                localctx = TeradataSQLExpressionsParser.AggTwoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2662
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2663
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2664
                self.scalar_expr(0)
                self.state = 2665
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2666
                self.scalar_expr(0)
                self.state = 2667
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [83]:
                localctx = TeradataSQLExpressionsParser.AggCountContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2669
                self.match(TeradataSQLExpressionsParser.COUNT)
                self.state = 2670
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 2671
                    self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 121, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 448, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 2673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==121 or _la==448:
                        self.state = 2672
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==121 or _la==448):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2675
                    self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2678
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [175]:
                localctx = TeradataSQLExpressionsParser.GroupingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2679
                self.match(TeradataSQLExpressionsParser.GROUPING)
                self.state = 2680
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2681
                self.scalar_expr(0)
                self.state = 2682
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1081]:
                localctx = TeradataSQLExpressionsParser.ListAggContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2684
                self.match(TeradataSQLExpressionsParser.LISTAGG)
                self.state = 2685
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2686
                self.scalar_expr(0)
                self.state = 2687
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value_expr = None # Scalar_exprContext
            self.offset_value = None # Scalar_exprContext
            self.default_value_expr = None # Scalar_exprContext
            self.width = None # Integer_literalContext
            self.quantile_literal = None # Integer_literalContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_specContext,0)


        def AVERAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.AVERAGE, 0)

        def AVG(self):
            return self.getToken(TeradataSQLExpressionsParser.AVG, 0)

        def AVE(self):
            return self.getToken(TeradataSQLExpressionsParser.AVE, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXIMUM, 0)

        def MAX(self):
            return self.getToken(TeradataSQLExpressionsParser.MAX, 0)

        def MIN(self):
            return self.getToken(TeradataSQLExpressionsParser.MIN, 0)

        def MINIMUM(self):
            return self.getToken(TeradataSQLExpressionsParser.MINIMUM, 0)

        def STDDEV_POP(self):
            return self.getToken(TeradataSQLExpressionsParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.STDDEV_SAMP, 0)

        def SUM(self):
            return self.getToken(TeradataSQLExpressionsParser.SUM, 0)

        def VAR_POP(self):
            return self.getToken(TeradataSQLExpressionsParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.VAR_SAMP, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def CORR(self):
            return self.getToken(TeradataSQLExpressionsParser.CORR, 0)

        def COVAR_POP(self):
            return self.getToken(TeradataSQLExpressionsParser.COVAR_POP, 0)

        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.COVAR_SAMP, 0)

        def REGR_AVGX(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_AVGX, 0)

        def REGR_AVGY(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_AVGY, 0)

        def REGR_COUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_COUNT, 0)

        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_INTERCEPT, 0)

        def REGR_R2(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_R2, 0)

        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SLOPE, 0)

        def REGR_SXX(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SXX, 0)

        def REGR_SXY(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SXY, 0)

        def REGR_SYY(self):
            return self.getToken(TeradataSQLExpressionsParser.REGR_SYY, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.COUNT, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def CSUM(self):
            return self.getToken(TeradataSQLExpressionsParser.CSUM, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_asc_desc_onlyContext,i)


        def window_spec_without_rows(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_spec_without_rowsContext,0)


        def CUME_DIST(self):
            return self.getToken(TeradataSQLExpressionsParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLExpressionsParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENT_RANK, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST_VALUE, 0)

        def ignore_respect_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Ignore_respect_nullsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Ignore_respect_nullsContext,i)


        def LAG(self):
            return self.getToken(TeradataSQLExpressionsParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLExpressionsParser.LEAD, 0)

        def MAVG(self):
            return self.getToken(TeradataSQLExpressionsParser.MAVG, 0)

        def MDIFF(self):
            return self.getToken(TeradataSQLExpressionsParser.MDIFF, 0)

        def MSUM(self):
            return self.getToken(TeradataSQLExpressionsParser.MSUM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def MEDIAN(self):
            return self.getToken(TeradataSQLExpressionsParser.MEDIAN, 0)

        def MLINREG(self):
            return self.getToken(TeradataSQLExpressionsParser.MLINREG, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLExpressionsParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLExpressionsParser.GROUP, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_fullContext,i)


        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENTILE_DISC, 0)

        def QUANTILE(self):
            return self.getToken(TeradataSQLExpressionsParser.QUANTILE, 0)

        def RANK(self):
            return self.getToken(TeradataSQLExpressionsParser.RANK, 0)

        def window_spec_with_ties(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_spec_with_tiesContext,0)


        def ROW_NUMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.ROW_NUMBER, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLExpressionsParser.LISTAGG, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_analytic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_function" ):
                listener.enterAnalytic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_function" ):
                listener.exitAnalytic_function(self)




    def analytic_function(self):

        localctx = TeradataSQLExpressionsParser.Analytic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_analytic_function)
        self._la = 0 # Token type
        try:
            self.state = 2840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2691
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 323) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & 131) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2692
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2693
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2694
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2695
                self.window_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2698
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2699
                self.scalar_expr(0)
                self.state = 2700
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2701
                self.scalar_expr(0)
                self.state = 2702
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2703
                self.window_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2705
                self.match(TeradataSQLExpressionsParser.COUNT)
                self.state = 2706
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2709
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 2707
                    self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 2708
                    localctx.value_expr = self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2711
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2712
                self.window_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2713
                self.match(TeradataSQLExpressionsParser.CSUM)
                self.state = 2714
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2715
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2718 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2716
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2717
                    self.order_by_spec_asc_desc_only()
                    self.state = 2720 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 2722
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2724
                _la = self._input.LA(1)
                if not(_la==301 or _la==603 or _la==630):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2725
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2726
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2727
                self.window_spec_without_rows()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2728
                _la = self._input.LA(1)
                if not(_la==673 or _la==734):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2729
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2730
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 2731
                    self.ignore_respect_nulls()


                self.state = 2734
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2735
                self.window_spec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2737
                _la = self._input.LA(1)
                if not(_la==730 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2738
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2739
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 2740
                    self.ignore_respect_nulls()


                self.state = 2749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2743
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2744
                    localctx.offset_value = self.scalar_expr(0)
                    self.state = 2747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 2745
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2746
                        localctx.default_value_expr = self.scalar_expr(0)




                self.state = 2751
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 2752
                    self.ignore_respect_nulls()


                self.state = 2755
                self.window_spec_without_rows()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2757
                _la = self._input.LA(1)
                if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 8388625) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2758
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2759
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2760
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2761
                localctx.width = self.integer_literal()
                self.state = 2764 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2762
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2763
                    self.order_by_spec_asc_desc_only()
                    self.state = 2766 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 2768
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2770
                self.match(TeradataSQLExpressionsParser.MEDIAN)
                self.state = 2771
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2772
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2773
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2775
                self.match(TeradataSQLExpressionsParser.MLINREG)
                self.state = 2776
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2777
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2778
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2779
                localctx.width = self.integer_literal()
                self.state = 2780
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2781
                self.order_by_spec_asc_desc_only()
                self.state = 2782
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2784
                _la = self._input.LA(1)
                if not(_la==851 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2785
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2786
                localctx.value_expr = self.scalar_expr(0)
                self.state = 2787
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2788
                self.match(TeradataSQLExpressionsParser.WITHIN)
                self.state = 2789
                self.match(TeradataSQLExpressionsParser.GROUP)
                self.state = 2790
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2791
                self.match(TeradataSQLExpressionsParser.ORDER)
                self.state = 2792
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 2793
                self.order_by_spec_full()
                self.state = 2798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2794
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2795
                    self.order_by_spec_full()
                    self.state = 2800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2801
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2803
                self.match(TeradataSQLExpressionsParser.QUANTILE)
                self.state = 2804
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2805
                localctx.quantile_literal = self.integer_literal()
                self.state = 2808 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2806
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2807
                    self.order_by_spec_asc_desc_only()
                    self.state = 2810 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 2812
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2814
                self.match(TeradataSQLExpressionsParser.RANK)
                self.state = 2815
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2816
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2817
                self.window_spec_with_ties()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2818
                self.match(TeradataSQLExpressionsParser.RANK)
                self.state = 2819
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2820
                self.order_by_spec_asc_desc_only()
                self.state = 2825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2821
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2822
                    self.order_by_spec_asc_desc_only()
                    self.state = 2827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2828
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2830
                self.match(TeradataSQLExpressionsParser.ROW_NUMBER)
                self.state = 2831
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2832
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2833
                self.window_spec_without_rows()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2834
                self.match(TeradataSQLExpressionsParser.LISTAGG)
                self.state = 2835
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2836
                self.scalar_expr(0)
                self.state = 2837
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 2838
                self.window_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def ABS(self):
            return self.getToken(TeradataSQLExpressionsParser.ABS, 0)

        def DEGREES(self):
            return self.getToken(TeradataSQLExpressionsParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(TeradataSQLExpressionsParser.RADIANS, 0)

        def EXP(self):
            return self.getToken(TeradataSQLExpressionsParser.EXP, 0)

        def SQRT(self):
            return self.getToken(TeradataSQLExpressionsParser.SQRT, 0)

        def COSH(self):
            return self.getToken(TeradataSQLExpressionsParser.COSH, 0)

        def SINH(self):
            return self.getToken(TeradataSQLExpressionsParser.SINH, 0)

        def TANH(self):
            return self.getToken(TeradataSQLExpressionsParser.TANH, 0)

        def ACOSH(self):
            return self.getToken(TeradataSQLExpressionsParser.ACOSH, 0)

        def ASINH(self):
            return self.getToken(TeradataSQLExpressionsParser.ASINH, 0)

        def ATANH(self):
            return self.getToken(TeradataSQLExpressionsParser.ATANH, 0)

        def LN(self):
            return self.getToken(TeradataSQLExpressionsParser.LN, 0)

        def LOG(self):
            return self.getToken(TeradataSQLExpressionsParser.LOG, 0)

        def NULLIFZERO(self):
            return self.getToken(TeradataSQLExpressionsParser.NULLIFZERO, 0)

        def ZEROIFNULL(self):
            return self.getToken(TeradataSQLExpressionsParser.ZEROIFNULL, 0)

        def COS(self):
            return self.getToken(TeradataSQLExpressionsParser.COS, 0)

        def SIN(self):
            return self.getToken(TeradataSQLExpressionsParser.SIN, 0)

        def TAN(self):
            return self.getToken(TeradataSQLExpressionsParser.TAN, 0)

        def ACOS(self):
            return self.getToken(TeradataSQLExpressionsParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TeradataSQLExpressionsParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TeradataSQLExpressionsParser.ATAN, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLExpressionsParser.CEILING, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLExpressionsParser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FLOOR, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.SIGN, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def MOD(self):
            return self.getToken(TeradataSQLExpressionsParser.MOD, 0)

        def RANDOM(self):
            return self.getToken(TeradataSQLExpressionsParser.RANDOM, 0)

        def ATAN2(self):
            return self.getToken(TeradataSQLExpressionsParser.ATAN2, 0)

        def POWER(self):
            return self.getToken(TeradataSQLExpressionsParser.POWER, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SyslibContext,0)


        def ROUND(self):
            return self.getToken(TeradataSQLExpressionsParser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUNC, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLExpressionsParser.WIDTH, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLExpressionsParser.BUCKET, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_arithmetic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_function" ):
                listener.enterArithmetic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_function" ):
                listener.exitArithmetic_function(self)




    def arithmetic_function(self):

        localctx = TeradataSQLExpressionsParser.Arithmetic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_arithmetic_function)
        self._la = 0 # Token type
        try:
            self.state = 2896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2842
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 180355272) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4294967299) != 0) or _la==147 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482049) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & 3458764513820540929) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 393217) != 0) or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2843
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2844
                self.scalar_expr(0)
                self.state = 2845
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 2847
                    self.td_sysfnlib()


                self.state = 2850
                _la = self._input.LA(1)
                if not(_la==565 or _la==566 or _la==674 or _la==926):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2851
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2852
                self.scalar_expr(0)
                self.state = 2853
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2855
                _la = self._input.LA(1)
                if not(_la==26 or _la==251 or _la==319):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2856
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2857
                self.scalar_expr(0)
                self.state = 2858
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2859
                self.scalar_expr(0)
                self.state = 2860
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 2862
                    self.syslib()


                self.state = 2865
                self.match(TeradataSQLExpressionsParser.POWER)
                self.state = 2866
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2867
                self.scalar_expr(0)
                self.state = 2868
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2869
                self.scalar_expr(0)
                self.state = 2870
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 2872
                    self.td_sysfnlib()


                self.state = 2875
                _la = self._input.LA(1)
                if not(_la==894 or _la==1006):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2876
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2877
                self.scalar_expr(0)
                self.state = 2880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2878
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2879
                    self.scalar_expr(0)


                self.state = 2882
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2884
                self.match(TeradataSQLExpressionsParser.WIDTH)
                self.state = 2885
                self.match(TeradataSQLExpressionsParser.BUCKET)
                self.state = 2886
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2887
                self.scalar_expr(0)
                self.state = 2888
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2889
                self.scalar_expr(0)
                self.state = 2890
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2891
                self.scalar_expr(0)
                self.state = 2892
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2893
                self.scalar_expr(0)
                self.state = 2894
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element_value_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext
            self.array_expr_1 = None # Scalar_exprContext
            self.array_expr_2 = None # Scalar_exprContext
            self.matching_expr = None # Scalar_exprContext
            self.array_index = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.index_value_or_bound = None # Scalar_exprContext
            self.num_spaces = None # Scalar_exprContext
            self.num_elements = None # Scalar_exprContext

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_AGG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def ASC(self):
            return self.getToken(TeradataSQLExpressionsParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLExpressionsParser.DESC, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLExpressionsParser.CARDINALITY, 0)

        def array_scope_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Array_scope_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Array_scope_referenceContext,i)


        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_CONCAT, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GT, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_LT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_LE, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_EQ, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_NE, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_ADD, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_SUB, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MUL, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_DIV, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MOD, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_SUM, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_AVG, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MIN, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GET, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_COMPARE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_UPDATE_STRIDE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLExpressionsParser.OEXISTS, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPRIOR, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.ONEXT, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.OCOUNT, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLExpressionsParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLExpressionsParser.OLAST, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLExpressionsParser.ODELETE, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLExpressionsParser.OEXTEND, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.OTRIM, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_array_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_function" ):
                listener.enterArray_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_function" ):
                listener.exitArray_function(self)




    def array_function(self):

        localctx = TeradataSQLExpressionsParser.Array_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_array_function)
        self._la = 0 # Token type
        try:
            self.state = 3111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 2898
                    self.td_sysfnlib()


                self.state = 2901
                self.match(TeradataSQLExpressionsParser.ARRAY_AGG)
                self.state = 2902
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2903
                localctx.element_value_expr = self.scalar_expr(0)
                self.state = 2910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 2904
                    self.match(TeradataSQLExpressionsParser.ORDER)
                    self.state = 2905
                    self.match(TeradataSQLExpressionsParser.BY)
                    self.state = 2906
                    self.scalar_expr(0)
                    self.state = 2908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21 or _la==116:
                        self.state = 2907
                        _la = self._input.LA(1)
                        if not(_la==21 or _la==116):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 2912
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2913
                localctx.array_expr = self.scalar_expr(0)
                self.state = 2914
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2916
                self.match(TeradataSQLExpressionsParser.CARDINALITY)
                self.state = 2917
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2918
                localctx.array_expr = self.scalar_expr(0)
                self.state = 2923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2919
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2920
                    self.array_scope_reference()
                    self.state = 2925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2926
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2928
                self.match(TeradataSQLExpressionsParser.ARRAY_CONCAT)
                self.state = 2929
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2930
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 2931
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2932
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 2937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2933
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2934
                    self.array_scope_reference()
                    self.state = 2939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2940
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2942
                _la = self._input.LA(1)
                if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2943
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2944
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 2945
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2946
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 2951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2947
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2948
                    self.array_scope_reference()
                    self.state = 2953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2954
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2956
                _la = self._input.LA(1)
                if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2957
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2958
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 2959
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 2960
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 2965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2961
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2962
                    self.array_scope_reference()
                    self.state = 2967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2968
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2970
                _la = self._input.LA(1)
                if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2971
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2972
                localctx.array_expr = self.scalar_expr(0)
                self.state = 2977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2973
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2974
                    self.array_scope_reference()
                    self.state = 2979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2980
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2982
                self.match(TeradataSQLExpressionsParser.ARRAY_COUNT_DISTINCT)
                self.state = 2983
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 2984
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2989
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2985
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 2986
                            self.array_scope_reference() 
                        self.state = 2991
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

                    self.state = 2992
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 2993
                    localctx.matching_expr = self.scalar_expr(0)

                elif la_ == 2:
                    self.state = 2996 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2994
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 2995
                        self.array_scope_reference()
                        self.state = 2998 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break



                self.state = 3002
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3004
                self.match(TeradataSQLExpressionsParser.ARRAY_GET)
                self.state = 3005
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3006
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3007
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3008
                localctx.array_index = self.scalar_expr(0)
                self.state = 3009
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3011
                self.match(TeradataSQLExpressionsParser.ARRAY_COMPARE)
                self.state = 3012
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3013
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 3014
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3015
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 3025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3018 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3016
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 3017
                            self.array_scope_reference()

                        else:
                            raise NoViableAltException(self)
                        self.state = 3020 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

                    self.state = 3022
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3023
                    localctx.nulls_equal_flag = self.integer_literal()


                self.state = 3027
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3029
                self.match(TeradataSQLExpressionsParser.ARRAY_UPDATE)
                self.state = 3030
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3031
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3032
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3033
                localctx.new_value = self.scalar_expr(0)
                self.state = 3042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 3036 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3034
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3035
                        self.array_scope_reference()
                        self.state = 3038 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 3040
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3041
                    localctx.array_index = self.scalar_expr(0)


                self.state = 3044
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3046
                self.match(TeradataSQLExpressionsParser.ARRAY_UPDATE_STRIDE)
                self.state = 3047
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3048
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3049
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3050
                localctx.new_value = self.scalar_expr(0)
                self.state = 3051
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3052
                localctx.stride = self.integer_literal()
                self.state = 3061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 3055 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3053
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3054
                        self.array_scope_reference()
                        self.state = 3057 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 3059
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3060
                    localctx.array_index = self.scalar_expr(0)


                self.state = 3063
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3065
                    self.td_sysfnlib()


                self.state = 3068
                _la = self._input.LA(1)
                if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3069
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3070
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3071
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3072
                localctx.index_value_or_bound = self.scalar_expr(0)
                self.state = 3073
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3075
                    self.td_sysfnlib()


                self.state = 3078
                _la = self._input.LA(1)
                if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 51) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3079
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3080
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3081
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3083
                    self.td_sysfnlib()


                self.state = 3086
                self.match(TeradataSQLExpressionsParser.OEXTEND)
                self.state = 3087
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3088
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3089
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3090
                    localctx.num_spaces = self.scalar_expr(0)
                    self.state = 3093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3091
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3092
                        localctx.index_value_or_bound = self.scalar_expr(0)




                self.state = 3097
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3099
                    self.td_sysfnlib()


                self.state = 3102
                self.match(TeradataSQLExpressionsParser.OTRIM)
                self.state = 3103
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3104
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3105
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3106
                    localctx.num_elements = self.scalar_expr(0)


                self.state = 3109
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.character_set_name = None # LiteralContext

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.BIT_LENGTH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LiteralContext,0)


        def BYTE(self):
            return self.getToken(TeradataSQLExpressionsParser.BYTE, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.BYTES, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTER_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR, 0)

        def CHARS(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARS, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTER, 0)

        def CHARACTERS(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTERS, 0)

        def MCHARACTERS(self):
            return self.getToken(TeradataSQLExpressionsParser.MCHARACTERS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFAULT, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def FORMAT(self):
            return self.getToken(TeradataSQLExpressionsParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TITLE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.TYPE, 0)

        def OCTET_LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_attribute_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_function" ):
                listener.enterAttribute_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_function" ):
                listener.exitAttribute_function(self)




    def attribute_function(self):

        localctx = TeradataSQLExpressionsParser.Attribute_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_attribute_function)
        self._la = 0 # Token type
        try:
            self.state = 3153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [546]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3113
                self.match(TeradataSQLExpressionsParser.BIT_LENGTH)
                self.state = 3114
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3115
                self.scalar_expr(0)
                self.state = 3118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3116
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3117
                    localctx.character_set_name = self.literal()


                self.state = 3120
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [43, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3122
                _la = self._input.LA(1)
                if not(_la==43 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3123
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3124
                self.scalar_expr(0)
                self.state = 3125
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [52, 53, 55, 56, 57, 58, 240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3127
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 553942754166571008) != 0) or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3128
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3129
                self.scalar_expr(0)
                self.state = 3130
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3132
                self.match(TeradataSQLExpressionsParser.DEFAULT)
                self.state = 3137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 3133
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 3134
                    self.column_name()
                    self.state = 3135
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


                pass
            elif token in [161, 425, 437]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3139
                _la = self._input.LA(1)
                if not(_la==161 or _la==425 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3140
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3141
                self.scalar_expr(0)
                self.state = 3142
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3144
                self.match(TeradataSQLExpressionsParser.OCTET_LENGTH)
                self.state = 3145
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3146
                self.scalar_expr(0)
                self.state = 3149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3147
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3148
                    localctx.character_set_name = self.literal()


                self.state = 3151
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Byte_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITNOT(self):
            return self.getToken(TeradataSQLExpressionsParser.BITNOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def BITAND(self):
            return self.getToken(TeradataSQLExpressionsParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLExpressionsParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLExpressionsParser.BITXOR, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLExpressionsParser.GETBIT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROTATERIGHT, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLExpressionsParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.SHIFTRIGHT, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLExpressionsParser.COUNTSET, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLExpressionsParser.SETBIT, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.SUBBITSTR, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_BYTE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_byte_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByte_function" ):
                listener.enterByte_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByte_function" ):
                listener.exitByte_function(self)




    def byte_function(self):

        localctx = TeradataSQLExpressionsParser.Byte_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_byte_function)
        self._la = 0 # Token type
        try:
            self.state = 3219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3155
                    self.td_sysfnlib()


                self.state = 3158
                self.match(TeradataSQLExpressionsParser.BITNOT)
                self.state = 3159
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3160
                self.scalar_expr(0)
                self.state = 3161
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3163
                    self.td_sysfnlib()


                self.state = 3166
                _la = self._input.LA(1)
                if not(((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 13) != 0) or _la==682 or ((((_la - 892)) & ~0x3f) == 0 and ((1 << (_la - 892)) & 12884901891) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3167
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3168
                self.scalar_expr(0)
                self.state = 3169
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3170
                self.scalar_expr(0)
                self.state = 3171
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3173
                    self.td_sysfnlib()


                self.state = 3176
                self.match(TeradataSQLExpressionsParser.COUNTSET)
                self.state = 3177
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3178
                self.scalar_expr(0)
                self.state = 3181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3179
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3180
                    self.scalar_expr(0)


                self.state = 3183
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3185
                    self.td_sysfnlib()


                self.state = 3188
                self.match(TeradataSQLExpressionsParser.SETBIT)
                self.state = 3189
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3190
                self.scalar_expr(0)
                self.state = 3191
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3192
                self.scalar_expr(0)
                self.state = 3195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3193
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3194
                    self.scalar_expr(0)


                self.state = 3197
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3199
                    self.td_sysfnlib()


                self.state = 3202
                self.match(TeradataSQLExpressionsParser.SUBBITSTR)
                self.state = 3203
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3204
                self.scalar_expr(0)
                self.state = 3205
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3206
                self.scalar_expr(0)
                self.state = 3207
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3208
                self.scalar_expr(0)
                self.state = 3209
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3211
                    self.td_sysfnlib()


                self.state = 3214
                self.match(TeradataSQLExpressionsParser.TO_BYTE)
                self.state = 3215
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3216
                self.scalar_expr(0)
                self.state = 3217
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.ACCOUNT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.CURRENT_DATE, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.CURDATE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.At_timezoneContext,0)


        def CURRENT_ROLE(self):
            return self.getToken(TeradataSQLExpressionsParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.CURRENT_TIME, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLExpressionsParser.CURTIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Type_precisionContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(TeradataSQLExpressionsParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE, 0)

        def NOW(self):
            return self.getToken(TeradataSQLExpressionsParser.NOW, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLExpressionsParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLExpressionsParser.ROLE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLExpressionsParser.SESSION, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TEMPORAL_TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME, 0)

        def USER(self):
            return self.getToken(TeradataSQLExpressionsParser.USER, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = TeradataSQLExpressionsParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_builtin_function)
        try:
            self.state = 3277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3221
                self.match(TeradataSQLExpressionsParser.ACCOUNT)
                pass
            elif token in [94, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3230
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 3222
                    self.match(TeradataSQLExpressionsParser.CURRENT_DATE)
                    self.state = 3225
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                    if la_ == 1:
                        self.state = 3223
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 3224
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


                    pass
                elif token in [604]:
                    self.state = 3227
                    self.match(TeradataSQLExpressionsParser.CURDATE)
                    self.state = 3228
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 3229
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 3232
                    self.at_timezone()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3235
                self.match(TeradataSQLExpressionsParser.CURRENT_ROLE)
                pass
            elif token in [96, 605]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 3236
                    self.match(TeradataSQLExpressionsParser.CURRENT_TIME)
                    self.state = 3238
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                    if la_ == 1:
                        self.state = 3237
                        self.type_precision()


                    pass
                elif token in [605]:
                    self.state = 3240
                    self.match(TeradataSQLExpressionsParser.CURTIME)
                    self.state = 3241
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 3242
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 3245
                    self.at_timezone()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3248
                self.match(TeradataSQLExpressionsParser.CURRENT_TIMESTAMP)
                self.state = 3250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 3249
                    self.type_precision()


                self.state = 3253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 3252
                    self.at_timezone()


                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3255
                self.match(TeradataSQLExpressionsParser.CURRENT_USER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3256
                self.match(TeradataSQLExpressionsParser.DATABASE)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3257
                self.match(TeradataSQLExpressionsParser.DATE)
                self.state = 3259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 3258
                    self.at_timezone()


                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3261
                self.match(TeradataSQLExpressionsParser.NOW)
                self.state = 3262
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3263
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3264
                self.match(TeradataSQLExpressionsParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3265
                self.match(TeradataSQLExpressionsParser.ROLE)
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3266
                self.match(TeradataSQLExpressionsParser.SESSION)
                pass
            elif token in [980]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3267
                self.match(TeradataSQLExpressionsParser.TEMPORAL_DATE)
                pass
            elif token in [981]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3268
                self.match(TeradataSQLExpressionsParser.TEMPORAL_TIMESTAMP)
                self.state = 3270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 3269
                    self.type_precision()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3272
                self.match(TeradataSQLExpressionsParser.TIME)
                self.state = 3274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 3273
                    self.at_timezone()


                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3276
                self.match(TeradataSQLExpressionsParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calendar_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.calendar_for_session = None # Token
            self.calendar_name = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_YEAR, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_QUARTER_OF_YEAR, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_YEAR_OF_CALENDAR, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SyslibContext,0)


        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYOCCURRENCE_OF_MONTH, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHNUMBER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTERNUMBER_OF_YEAR, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_YEAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEARNUMBER_OF_CALENDAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def NULL(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_calendar_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalendar_function" ):
                listener.enterCalendar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalendar_function" ):
                listener.exitCalendar_function(self)




    def calendar_function(self):

        localctx = TeradataSQLExpressionsParser.Calendar_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_calendar_function)
        self._la = 0 # Token type
        try:
            self.state = 3302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [957, 958, 959, 960, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 1088]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 3279
                    self.syslib()


                self.state = 3282
                _la = self._input.LA(1)
                if not(((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & 1031695) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3283
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3284
                self.scalar_expr(0)
                self.state = 3285
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [612, 613, 614, 615, 616, 783, 784, 785, 867, 868, 1033, 1034, 1035, 1036, 1064, 1091]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3287
                    self.td_sysfnlib()


                self.state = 3290
                _la = self._input.LA(1)
                if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 31) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0) or _la==867 or _la==868 or ((((_la - 1033)) & ~0x3f) == 0 and ((1 << (_la - 1033)) & 2147483663) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3291
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3292
                self.scalar_expr(0)
                self.state = 3294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3293
                    self.match(TeradataSQLExpressionsParser.COMMA)


                self.state = 3298
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [274]:
                    self.state = 3296
                    localctx.calendar_for_session = self.match(TeradataSQLExpressionsParser.NULL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 3297
                    localctx.calendar_name = self.char_string_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 3300
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.search_result = None # Scalar_exprContext
            self.default_result = None # Scalar_exprContext

        def DECODE(self):
            return self.getToken(TeradataSQLExpressionsParser.DECODE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def GREATEST(self):
            return self.getToken(TeradataSQLExpressionsParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLExpressionsParser.LEAST, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_comparison_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_function" ):
                listener.enterComparison_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_function" ):
                listener.exitComparison_function(self)




    def comparison_function(self):

        localctx = TeradataSQLExpressionsParser.Comparison_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_comparison_function)
        self._la = 0 # Token type
        try:
            self.state = 3332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3304
                    self.td_sysfnlib()


                self.state = 3307
                self.match(TeradataSQLExpressionsParser.DECODE)
                self.state = 3308
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3309
                localctx.expr = self.scalar_expr(0)
                self.state = 3310
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3311
                localctx.search_result = self.scalar_expr(0)

                self.state = 3312
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3313
                localctx.search_result = self.scalar_expr(0)
                self.state = 3315
                localctx.default_result = self.scalar_expr(0)
                self.state = 3316
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3318
                    self.td_sysfnlib()


                self.state = 3321
                _la = self._input.LA(1)
                if not(_la==689 or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3322
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3323
                self.scalar_expr(0)
                self.state = 3326 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3324
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3325
                    self.scalar_expr(0)
                    self.state = 3328 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 3330
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLExpressionsParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLExpressionsParser.CAMSET_L, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLExpressionsParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLExpressionsParser.DECAMSET_L, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_DECOMPRESS, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLExpressionsParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLExpressionsParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLExpressionsParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLExpressionsParser.LZDECOMP_L, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_LZ_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TS_DECOMPRESS, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSUTF8TOUNICODE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_compression_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_function" ):
                listener.enterCompression_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_function" ):
                listener.exitCompression_function(self)




    def compression_function(self):

        localctx = TeradataSQLExpressionsParser.Compression_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_compression_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 3334
                self.td_sysfnlib()


            self.state = 3337
            _la = self._input.LA(1)
            if not(((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & 1729382256910270467) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & 15) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & 1649267441667) != 0) or ((((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3338
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 3339
            self.scalar_expr(0)
            self.state = 3340
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.in_encoding = None # Char_string_literalContext
            self.out_encoding = None # Char_string_literalContext
            self.string_expr = None # Scalar_exprContext
            self.format_arg = None # Char_string_literalContext
            self.nls_param = None # Char_string_literalContext
            self.numeric_value = None # Scalar_exprContext
            self.interval_unit = None # Scalar_exprContext

        def CAST(self):
            return self.getToken(TeradataSQLExpressionsParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_type_attributeContext,i)


        def TRYCAST(self):
            return self.getToken(TeradataSQLExpressionsParser.TRYCAST, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_BYTES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def FROM_BYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.FROM_BYTES, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_NUMBER, 0)

        def NULL(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_DATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_YMINTERVAL, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_DSINTERVAL, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMTOYMINTERVAL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_conversion_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_function" ):
                listener.enterConversion_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_function" ):
                listener.exitConversion_function(self)




    def conversion_function(self):

        localctx = TeradataSQLExpressionsParser.Conversion_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_conversion_function)
        self._la = 0 # Token type
        try:
            self.state = 3473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3342
                self.match(TeradataSQLExpressionsParser.CAST)
                self.state = 3343
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3344
                localctx.expr = self.scalar_expr(0)
                self.state = 3345
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 3358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 3346
                    self.data_type()
                    self.state = 3350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                        self.state = 3347
                        self.data_type_attribute()
                        self.state = 3352
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3354 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3353
                        self.data_type_attribute()
                        self.state = 3356 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211):
                            break

                    pass


                self.state = 3360
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3362
                self.match(TeradataSQLExpressionsParser.TRYCAST)
                self.state = 3363
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3364
                localctx.in_string = self.scalar_expr(0)
                self.state = 3365
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 3366
                self.data_type()
                self.state = 3367
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3369
                    self.td_sysfnlib()


                self.state = 3372
                self.match(TeradataSQLExpressionsParser.TO_BYTES)
                self.state = 3373
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3374
                localctx.in_string = self.scalar_expr(0)
                self.state = 3375
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3376
                localctx.in_encoding = self.char_string_literal()
                self.state = 3377
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3379
                    self.td_sysfnlib()


                self.state = 3382
                self.match(TeradataSQLExpressionsParser.FROM_BYTES)
                self.state = 3383
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3384
                localctx.in_string = self.scalar_expr(0)
                self.state = 3385
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3386
                localctx.out_encoding = self.char_string_literal()
                self.state = 3387
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3389
                    self.td_sysfnlib()


                self.state = 3392
                self.match(TeradataSQLExpressionsParser.TO_NUMBER)
                self.state = 3393
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3394
                localctx.string_expr = self.scalar_expr(0)
                self.state = 3404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3395
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3396
                    localctx.format_arg = self.char_string_literal()
                    self.state = 3402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3397
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3400
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 3398
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 3399
                            self.match(TeradataSQLExpressionsParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 3406
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3408
                    self.td_sysfnlib()


                self.state = 3411
                self.match(TeradataSQLExpressionsParser.TO_CHAR)
                self.state = 3412
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3413
                localctx.expr = self.scalar_expr(0)
                self.state = 3423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3414
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3415
                    localctx.format_arg = self.char_string_literal()
                    self.state = 3421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3416
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3419
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 3417
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 3418
                            self.match(TeradataSQLExpressionsParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 3425
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3427
                    self.td_sysfnlib()


                self.state = 3430
                self.match(TeradataSQLExpressionsParser.TO_DATE)
                self.state = 3431
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3432
                localctx.in_string = self.scalar_expr(0)
                self.state = 3433
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3436
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 3434
                    localctx.format_arg = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 3435
                    self.match(TeradataSQLExpressionsParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3438
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3440
                    self.td_sysfnlib()


                self.state = 3443
                _la = self._input.LA(1)
                if not(_la==997 or _la==998):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3444
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3445
                localctx.expr = self.scalar_expr(0)
                self.state = 3451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3446
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3449
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1069, 1070, 1071, 1072, 1203]:
                        self.state = 3447
                        localctx.format_arg = self.char_string_literal()
                        pass
                    elif token in [274]:
                        self.state = 3448
                        self.match(TeradataSQLExpressionsParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3453
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3455
                    self.td_sysfnlib()


                self.state = 3458
                _la = self._input.LA(1)
                if not(_la==995 or _la==999):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3459
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3460
                self.scalar_expr(0)
                self.state = 3461
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3463
                    self.td_sysfnlib()


                self.state = 3466
                _la = self._input.LA(1)
                if not(_la==808 or _la==809):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3467
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3468
                localctx.numeric_value = self.scalar_expr(0)
                self.state = 3469
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3470
                localctx.interval_unit = self.scalar_expr(0)
                self.state = 3471
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.day_value = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYOFMONTH, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLExpressionsParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.SECOND, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST_DAY, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def NEXT_DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.NEXT_DAY, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHS_BETWEEN, 0)

        def ADD_MONTHS(self):
            return self.getToken(TeradataSQLExpressionsParser.ADD_MONTHS, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLExpressionsParser.OADD_MONTHS, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLExpressionsParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLExpressionsParser.FROM, 0)

        def DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMEZONE_MINUTE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_date_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_function" ):
                listener.enterDate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_function" ):
                listener.exitDate_function(self)




    def date_function(self):

        localctx = TeradataSQLExpressionsParser.Date_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_date_function)
        self._la = 0 # Token type
        try:
            self.state = 3525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3475
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368 or _la==478 or _la==1076 or _la==1099):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3476
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3477
                self.scalar_expr(0)
                self.state = 3478
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3480
                    self.td_sysfnlib()


                self.state = 3483
                self.match(TeradataSQLExpressionsParser.LAST_DAY)
                self.state = 3484
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3485
                self.scalar_expr(0)
                self.state = 3486
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3488
                    self.td_sysfnlib()


                self.state = 3491
                self.match(TeradataSQLExpressionsParser.NEXT_DAY)
                self.state = 3492
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3493
                self.scalar_expr(0)
                self.state = 3494
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3495
                localctx.day_value = self.char_string_literal()
                self.state = 3496
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3498
                    self.td_sysfnlib()


                self.state = 3501
                self.match(TeradataSQLExpressionsParser.MONTHS_BETWEEN)
                self.state = 3502
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3503
                self.scalar_expr(0)
                self.state = 3504
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3505
                self.scalar_expr(0)
                self.state = 3506
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3508
                    self.td_sysfnlib()


                self.state = 3511
                _la = self._input.LA(1)
                if not(_la==9 or _la==814):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3512
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3513
                self.scalar_expr(0)
                self.state = 3514
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3515
                self.scalar_expr(0)
                self.state = 3516
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3518
                self.match(TeradataSQLExpressionsParser.EXTRACT)
                self.state = 3519
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3520
                _la = self._input.LA(1)
                if not(_la==106 or _la==185 or _la==248 or _la==258 or ((((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 108086391056891905) != 0) or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3521
                self.match(TeradataSQLExpressionsParser.FROM)
                self.state = 3522
                self.scalar_expr(0)
                self.state = 3523
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def HASHAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.HASHAMP, 0)

        def HASHBAKAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.HASHBAKAMP, 0)

        def hash_bucket_number_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hash_bucket_number_exprContext,0)


        def HASHBUCKET(self):
            return self.getToken(TeradataSQLExpressionsParser.HASHBUCKET, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def HASHROW(self):
            return self.getToken(TeradataSQLExpressionsParser.HASHROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_hash_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_function" ):
                listener.enterHash_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_function" ):
                listener.exitHash_function(self)




    def hash_function(self):

        localctx = TeradataSQLExpressionsParser.Hash_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_hash_function)
        self._la = 0 # Token type
        try:
            self.state = 3555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3527
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3528
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3529
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3530
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3531
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3532
                self.hash_bucket_number_expr()
                self.state = 3533
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3535
                self.match(TeradataSQLExpressionsParser.HASHBUCKET)
                self.state = 3536
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3537
                self.scalar_expr(0)
                self.state = 3538
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3540
                self.match(TeradataSQLExpressionsParser.HASHROW)
                self.state = 3541
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3542
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3543
                self.match(TeradataSQLExpressionsParser.HASHROW)
                self.state = 3544
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3545
                self.scalar_expr(0)
                self.state = 3550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3546
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3547
                    self.scalar_expr(0)
                    self.state = 3552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3553
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.EMPTY_CLOB, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_lob_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_function" ):
                listener.enterLob_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_function" ):
                listener.exitLob_function(self)




    def lob_function(self):

        localctx = TeradataSQLExpressionsParser.Lob_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_lob_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 3557
                self.td_sysfnlib()


            self.state = 3560
            _la = self._input.LA(1)
            if not(_la==650 or _la==651):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3561
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 3562
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name_string = None # Char_string_literalContext
            self.database_name_string = None # Char_string_literalContext
            self.object_name_string = None # Char_string_literalContext
            self.object_kind_string = None # Char_string_literalContext
            self.map_slot_string = None # Char_string_literalContext
            self.number_of_primary_amps_string = None # Char_string_literalContext
            self.colocation_name_string = None # Char_string_literalContext

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTIGUOUSMAPAMPS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SyslibContext,0)


        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLExpressionsParser.SPARSEMAPAMPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLExpressionsParser.SPARSETABLEAMPS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_map_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_function" ):
                listener.enterMap_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_function" ):
                listener.exitMap_function(self)




    def map_function(self):

        localctx = TeradataSQLExpressionsParser.Map_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_map_function)
        self._la = 0 # Token type
        try:
            self.state = 3600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 3564
                    self.syslib()


                self.state = 3567
                self.match(TeradataSQLExpressionsParser.CONTIGUOUSMAPAMPS)
                self.state = 3568
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3569
                localctx.map_name_string = self.char_string_literal()
                self.state = 3570
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 3572
                    self.syslib()


                self.state = 3575
                self.match(TeradataSQLExpressionsParser.SPARSEMAPAMPS)
                self.state = 3576
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3577
                localctx.database_name_string = self.char_string_literal()
                self.state = 3578
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3579
                localctx.object_name_string = self.char_string_literal()
                self.state = 3580
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3581
                localctx.object_kind_string = self.char_string_literal()
                self.state = 3582
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3583
                localctx.map_slot_string = self.char_string_literal()
                self.state = 3584
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3585
                localctx.number_of_primary_amps_string = self.char_string_literal()
                self.state = 3586
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3587
                localctx.colocation_name_string = self.char_string_literal()
                self.state = 3588
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 3590
                    self.syslib()


                self.state = 3593
                self.match(TeradataSQLExpressionsParser.SPARSETABLEAMPS)
                self.state = 3594
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3595
                localctx.database_name_string = self.char_string_literal()
                self.state = 3596
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3597
                localctx.object_name_string = self.char_string_literal()
                self.state = 3598
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nvl_funtionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NVL(self):
            return self.getToken(TeradataSQLExpressionsParser.NVL, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def NVL2(self):
            return self.getToken(TeradataSQLExpressionsParser.NVL2, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_nvl_funtion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvl_funtion" ):
                listener.enterNvl_funtion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvl_funtion" ):
                listener.exitNvl_funtion(self)




    def nvl_funtion(self):

        localctx = TeradataSQLExpressionsParser.Nvl_funtionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_nvl_funtion)
        self._la = 0 # Token type
        try:
            self.state = 3624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3602
                    self.td_sysfnlib()


                self.state = 3605
                self.match(TeradataSQLExpressionsParser.NVL)
                self.state = 3606
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3607
                self.scalar_expr(0)
                self.state = 3608
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3609
                self.scalar_expr(0)
                self.state = 3610
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3612
                    self.td_sysfnlib()


                self.state = 3615
                self.match(TeradataSQLExpressionsParser.NVL2)
                self.state = 3616
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3617
                self.scalar_expr(0)
                self.state = 3618
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3619
                self.scalar_expr(0)
                self.state = 3620
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3621
                self.scalar_expr(0)
                self.state = 3622
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.BEGIN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def END(self):
            return self.getToken(TeradataSQLExpressionsParser.END, 0)

        def IS(self):
            return self.getToken(TeradataSQLExpressionsParser.IS, 0)

        def UNTIL_CHANGED(self):
            return self.getToken(TeradataSQLExpressionsParser.UNTIL_CHANGED, 0)

        def UNTIL_CLOSED(self):
            return self.getToken(TeradataSQLExpressionsParser.UNTIL_CLOSED, 0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_period_specContext,0)


        def LAST(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST, 0)

        def NEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLExpressionsParser.PRIOR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_period_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_function" ):
                listener.enterPeriod_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_function" ):
                listener.exitPeriod_function(self)




    def period_function(self):

        localctx = TeradataSQLExpressionsParser.Period_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_period_function)
        self._la = 0 # Token type
        try:
            self.state = 3667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3626
                self.match(TeradataSQLExpressionsParser.BEGIN)
                self.state = 3627
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3628
                self.scalar_expr(0)
                self.state = 3629
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3631
                self.match(TeradataSQLExpressionsParser.END)
                self.state = 3632
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3633
                self.scalar_expr(0)
                self.state = 3634
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3636
                self.match(TeradataSQLExpressionsParser.END)
                self.state = 3637
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3638
                self.scalar_expr(0)
                self.state = 3639
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 3640
                self.match(TeradataSQLExpressionsParser.IS)
                self.state = 3642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3641
                    self.match(TeradataSQLExpressionsParser.NOT)


                self.state = 3644
                _la = self._input.LA(1)
                if not(_la==450 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3646
                self.match(TeradataSQLExpressionsParser.INTERVAL)
                self.state = 3647
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3648
                self.scalar_expr(0)
                self.state = 3649
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 3650
                self.interval_period_spec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3652
                self.match(TeradataSQLExpressionsParser.LAST)
                self.state = 3653
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3654
                self.scalar_expr(0)
                self.state = 3655
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3657
                self.match(TeradataSQLExpressionsParser.NEXT)
                self.state = 3658
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3659
                self.scalar_expr(0)
                self.state = 3660
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3662
                self.match(TeradataSQLExpressionsParser.PRIOR)
                self.state = 3663
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3664
                self.scalar_expr(0)
                self.state = 3665
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regexp_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_string = None # Scalar_exprContext
            self.regexp_string = None # Scalar_exprContext
            self.position_arg = None # Scalar_exprContext
            self.occurrence_arg = None # Scalar_exprContext
            self.match_arg = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.return_opt = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_SUBSTR, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_REPLACE, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_INSTR, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_SIMILAR, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_SPLIT_TO_TABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_regexp_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexp_function" ):
                listener.enterRegexp_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexp_function" ):
                listener.exitRegexp_function(self)




    def regexp_function(self):

        localctx = TeradataSQLExpressionsParser.Regexp_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_regexp_function)
        self._la = 0 # Token type
        try:
            self.state = 3758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3669
                    self.td_sysfnlib()


                self.state = 3672
                self.match(TeradataSQLExpressionsParser.REGEXP_SUBSTR)
                self.state = 3673
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3674
                localctx.source_string = self.scalar_expr(0)
                self.state = 3675
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3676
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 3684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3677
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3678
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 3679
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3680
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 3681
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3682
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 3686
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3688
                    self.td_sysfnlib()


                self.state = 3691
                self.match(TeradataSQLExpressionsParser.REGEXP_REPLACE)
                self.state = 3692
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3693
                localctx.source_string = self.scalar_expr(0)
                self.state = 3694
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3695
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 3705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3696
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3697
                    localctx.replace_string = self.scalar_expr(0)
                    self.state = 3698
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3699
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 3700
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3701
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 3702
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3703
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 3707
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3709
                    self.td_sysfnlib()


                self.state = 3712
                self.match(TeradataSQLExpressionsParser.REGEXP_INSTR)
                self.state = 3713
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3714
                localctx.source_string = self.scalar_expr(0)
                self.state = 3715
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3716
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 3726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3717
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3718
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 3719
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3720
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 3721
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3722
                    localctx.return_opt = self.scalar_expr(0)
                    self.state = 3723
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3724
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 3728
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3730
                    self.td_sysfnlib()


                self.state = 3733
                self.match(TeradataSQLExpressionsParser.REGEXP_SIMILAR)
                self.state = 3734
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3735
                localctx.source_string = self.scalar_expr(0)
                self.state = 3736
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3737
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 3740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3738
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3739
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 3742
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3744
                    self.td_sysfnlib()


                self.state = 3747
                self.match(TeradataSQLExpressionsParser.REGEXP_SPLIT_TO_TABLE)
                self.state = 3748
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3749
                localctx.in_k = self.scalar_expr(0)
                self.state = 3750
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3751
                localctx.source_string = self.scalar_expr(0)
                self.state = 3752
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3753
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 3754
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3755
                localctx.match_arg = self.scalar_expr(0)
                self.state = 3756
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delim_string_value = None # Char_string_literalContext
            self.quote_string_value = None # Char_string_literalContext
            self.data_string_value = None # Scalar_exprContext
            self.ci = None # Integer_literalContext
            self.cd = None # Integer_literalContext
            self.cs = None # Integer_literalContext
            self.ct = None # Integer_literalContext
            self.source_string = None # Scalar_exprContext
            self.search_string = None # Scalar_exprContext
            self.position = None # Scalar_exprContext
            self.occurrence = None # Scalar_exprContext
            self.length = None # Scalar_exprContext
            self.fill_string = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.name_to_search = None # Scalar_exprContext
            self.name_delimiters = None # Scalar_exprContext
            self.value_delimiters = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.from_string = None # Scalar_exprContext
            self.to_string = None # Scalar_exprContext
            self.delimiter = None # Scalar_exprContext
            self.token_num = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext
            self.delimiters = None # Scalar_exprContext
            self.out_k = None # Column_specContext
            self.out_token_num = None # Column_specContext
            self.out_token = None # Column_specContext
            self.string_expr = None # Scalar_exprContext
            self.trim_expr = None # Scalar_exprContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, i)

        def ASCII(self):
            return self.getToken(TeradataSQLExpressionsParser.ASCII, 0)

        def CHR(self):
            return self.getToken(TeradataSQLExpressionsParser.CHR, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLExpressionsParser.INITCAP, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.LENGTH, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLExpressionsParser.REVERSE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def CHAR2HEXINT(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR2HEXINT, 0)

        def SOUNDEX(self):
            return self.getToken(TeradataSQLExpressionsParser.SOUNDEX, 0)

        def STRING_CS(self):
            return self.getToken(TeradataSQLExpressionsParser.STRING_CS, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.VARGRAPHIC, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONCAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def CSV(self):
            return self.getToken(TeradataSQLExpressionsParser.CSV, 0)

        def NEW(self):
            return self.getToken(TeradataSQLExpressionsParser.NEW, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLExpressionsParser.VARIANT, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.TYPE, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def CSVLD(self):
            return self.getToken(TeradataSQLExpressionsParser.CSVLD, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLExpressionsParser.EDITDISTANCE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def INDEX(self):
            return self.getToken(TeradataSQLExpressionsParser.INDEX, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLExpressionsParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.RIGHT, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(TeradataSQLExpressionsParser.LOWER, 0)

        def UPPER(self):
            return self.getToken(TeradataSQLExpressionsParser.UPPER, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLExpressionsParser.UCASE, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLExpressionsParser.LPAD, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLExpressionsParser.RPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.RTRIM, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLExpressionsParser.NGRAM, 0)

        def NVP(self):
            return self.getToken(TeradataSQLExpressionsParser.NVP, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLExpressionsParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLExpressionsParser.OTRANSLATE, 0)

        def POSITION(self):
            return self.getToken(TeradataSQLExpressionsParser.POSITION, 0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLExpressionsParser.STRTOK, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.STRTOK_SPLIT_TO_TABLE, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNS, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_specContext,i)


        def SUBSTRING(self):
            return self.getToken(TeradataSQLExpressionsParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(TeradataSQLExpressionsParser.FROM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FOR, 0)

        def SUBSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.SUBSTR, 0)

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def translation_mapping(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Translation_mappingContext,0)


        def TRANSLATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSLATE, 0)

        def TRANSLATE_CHK(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSLATE_CHK, 0)

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLExpressionsParser.ERROR, 0)

        def TRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(TeradataSQLExpressionsParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(TeradataSQLExpressionsParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(TeradataSQLExpressionsParser.LEADING, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = TeradataSQLExpressionsParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 4073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3760
                    self.td_sysfnlib()


                self.state = 3763
                _la = self._input.LA(1)
                if not(_la==535 or _la==572 or _la==708 or _la==739 or _la==1084):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3764
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3765
                self.scalar_expr(0)
                self.state = 3766
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3768
                _la = self._input.LA(1)
                if not(_la==54 or _la==383 or _la==399 or _la==465):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3769
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3770
                self.scalar_expr(0)
                self.state = 3771
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3773
                self.match(TeradataSQLExpressionsParser.CONCAT)
                self.state = 3774
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3775
                self.scalar_expr(0)
                self.state = 3776
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3777
                self.scalar_expr(0)
                self.state = 3782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3778
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3779
                    self.scalar_expr(0)
                    self.state = 3784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3785
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3787
                    self.td_sysfnlib()


                self.state = 3790
                self.match(TeradataSQLExpressionsParser.CSV)
                self.state = 3791
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3792
                self.match(TeradataSQLExpressionsParser.NEW)
                self.state = 3793
                self.match(TeradataSQLExpressionsParser.VARIANT)
                self.state = 3794
                self.match(TeradataSQLExpressionsParser.TYPE)
                self.state = 3795
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3796
                self.scalar_expr(0)
                self.state = 3801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3797
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3798
                    self.scalar_expr(0)
                    self.state = 3803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3804
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 3805
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3806
                localctx.delim_string_value = self.char_string_literal()
                self.state = 3807
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3808
                localctx.quote_string_value = self.char_string_literal()
                self.state = 3809
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3811
                    self.td_sysfnlib()


                self.state = 3814
                self.match(TeradataSQLExpressionsParser.CSVLD)
                self.state = 3815
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3816
                localctx.data_string_value = self.scalar_expr(0)
                self.state = 3817
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3818
                localctx.delim_string_value = self.char_string_literal()
                self.state = 3819
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3820
                localctx.quote_string_value = self.char_string_literal()
                self.state = 3821
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3823
                    self.td_sysfnlib()


                self.state = 3826
                self.match(TeradataSQLExpressionsParser.EDITDISTANCE)
                self.state = 3827
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3828
                self.scalar_expr(0)
                self.state = 3829
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3830
                self.scalar_expr(0)
                self.state = 3840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3831
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3832
                    localctx.ci = self.integer_literal()
                    self.state = 3833
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3834
                    localctx.cd = self.integer_literal()
                    self.state = 3835
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3836
                    localctx.cs = self.integer_literal()
                    self.state = 3837
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3838
                    localctx.ct = self.integer_literal()


                self.state = 3842
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3844
                self.match(TeradataSQLExpressionsParser.INDEX)
                self.state = 3845
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3846
                self.scalar_expr(0)
                self.state = 3847
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3848
                self.scalar_expr(0)
                self.state = 3849
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3851
                    self.td_sysfnlib()


                self.state = 3854
                self.match(TeradataSQLExpressionsParser.INSTR)
                self.state = 3855
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3856
                localctx.source_string = self.scalar_expr(0)
                self.state = 3857
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3858
                localctx.search_string = self.scalar_expr(0)
                self.state = 3865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3859
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3860
                    localctx.position = self.scalar_expr(0)
                    self.state = 3863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3861
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3862
                        localctx.occurrence = self.scalar_expr(0)




                self.state = 3867
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3869
                    self.td_sysfnlib()


                self.state = 3872
                _la = self._input.LA(1)
                if not(_la==219 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3873
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3874
                localctx.source_string = self.scalar_expr(0)
                self.state = 3875
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3876
                localctx.length = self.scalar_expr(0)
                self.state = 3877
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3879
                self.match(TeradataSQLExpressionsParser.LOCATE)
                self.state = 3880
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3881
                self.scalar_expr(0)
                self.state = 3882
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3883
                self.scalar_expr(0)
                self.state = 3886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3884
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3885
                    self.scalar_expr(0)


                self.state = 3888
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3890
                _la = self._input.LA(1)
                if not(_la==233 or _la==454 or _la==1011):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3891
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3892
                self.scalar_expr(0)
                self.state = 3893
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3895
                    self.td_sysfnlib()


                self.state = 3898
                _la = self._input.LA(1)
                if not(_la==746 or _la==898):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3899
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3900
                localctx.source_string = self.scalar_expr(0)
                self.state = 3901
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3902
                localctx.length = self.scalar_expr(0)
                self.state = 3905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3903
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3904
                    localctx.fill_string = self.scalar_expr(0)


                self.state = 3907
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3909
                    self.td_sysfnlib()


                self.state = 3912
                _la = self._input.LA(1)
                if not(_la==747 or _la==899):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3913
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3914
                self.scalar_expr(0)
                self.state = 3917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3915
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3916
                    self.scalar_expr(0)


                self.state = 3919
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3921
                    self.td_sysfnlib()


                self.state = 3924
                self.match(TeradataSQLExpressionsParser.NGRAM)
                self.state = 3925
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3926
                self.scalar_expr(0)
                self.state = 3927
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3928
                self.scalar_expr(0)
                self.state = 3929
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3930
                localctx.length = self.scalar_expr(0)
                self.state = 3933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3931
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3932
                    localctx.position = self.scalar_expr(0)


                self.state = 3935
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3937
                    self.td_sysfnlib()


                self.state = 3940
                self.match(TeradataSQLExpressionsParser.NVP)
                self.state = 3941
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3942
                localctx.in_string = self.scalar_expr(0)
                self.state = 3943
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3944
                localctx.name_to_search = self.scalar_expr(0)
                self.state = 3955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3945
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3946
                    localctx.name_delimiters = self.scalar_expr(0)
                    self.state = 3953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3947
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 3948
                        localctx.value_delimiters = self.scalar_expr(0)
                        self.state = 3951
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3949
                            self.match(TeradataSQLExpressionsParser.COMMA)
                            self.state = 3950
                            localctx.occurrence = self.scalar_expr(0)






                self.state = 3957
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3959
                    self.td_sysfnlib()


                self.state = 3962
                self.match(TeradataSQLExpressionsParser.OREPLACE)
                self.state = 3963
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3964
                localctx.source_string = self.scalar_expr(0)
                self.state = 3965
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3966
                localctx.search_string = self.scalar_expr(0)
                self.state = 3969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3967
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3968
                    localctx.replace_string = self.scalar_expr(0)


                self.state = 3971
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3973
                    self.td_sysfnlib()


                self.state = 3976
                self.match(TeradataSQLExpressionsParser.OTRANSLATE)
                self.state = 3977
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3978
                localctx.source_string = self.scalar_expr(0)
                self.state = 3979
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3980
                localctx.from_string = self.scalar_expr(0)
                self.state = 3981
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 3982
                localctx.to_string = self.scalar_expr(0)
                self.state = 3983
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3985
                self.match(TeradataSQLExpressionsParser.POSITION)
                self.state = 3986
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3987
                self.scalar_expr(0)
                self.state = 3988
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 3989
                self.scalar_expr(0)
                self.state = 3990
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3992
                    self.td_sysfnlib()


                self.state = 3995
                self.match(TeradataSQLExpressionsParser.STRTOK)
                self.state = 3996
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 3997
                localctx.in_string = self.scalar_expr(0)
                self.state = 4004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3998
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 3999
                    localctx.delimiter = self.scalar_expr(0)
                    self.state = 4002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4000
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 4001
                        localctx.token_num = self.scalar_expr(0)




                self.state = 4006
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4008
                    self.td_sysfnlib()


                self.state = 4011
                self.match(TeradataSQLExpressionsParser.STRTOK_SPLIT_TO_TABLE)
                self.state = 4012
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4013
                localctx.in_k = self.scalar_expr(0)
                self.state = 4014
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4015
                localctx.in_string = self.scalar_expr(0)
                self.state = 4016
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4017
                localctx.delimiters = self.scalar_expr(0)
                self.state = 4018
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4019
                self.match(TeradataSQLExpressionsParser.RETURNS)
                self.state = 4020
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4021
                localctx.out_k = self.column_spec()
                self.state = 4022
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4023
                localctx.out_token_num = self.column_spec()
                self.state = 4024
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4025
                localctx.out_token = self.column_spec()
                self.state = 4026
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4028
                self.match(TeradataSQLExpressionsParser.SUBSTRING)
                self.state = 4029
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4030
                self.scalar_expr(0)
                self.state = 4031
                self.match(TeradataSQLExpressionsParser.FROM)
                self.state = 4032
                self.scalar_expr(0)
                self.state = 4035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 4033
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4034
                    self.scalar_expr(0)


                self.state = 4037
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4039
                _la = self._input.LA(1)
                if not(_la==401 or _la==402):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4040
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4041
                self.scalar_expr(0)
                self.state = 4042
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4043
                self.scalar_expr(0)
                self.state = 4046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 4044
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4045
                    self.scalar_expr(0)


                self.state = 4048
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 4050
                _la = self._input.LA(1)
                if not(_la==433 or _la==434):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4051
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4052
                localctx.string_expr = self.scalar_expr(0)
                self.state = 4053
                self.match(TeradataSQLExpressionsParser.USING)
                self.state = 4054
                self.translation_mapping()
                self.state = 4057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4055
                    self.match(TeradataSQLExpressionsParser.WITH)
                    self.state = 4056
                    self.match(TeradataSQLExpressionsParser.ERROR)


                self.state = 4059
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 4061
                self.match(TeradataSQLExpressionsParser.TRIM)
                self.state = 4062
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==217 or _la==429:
                    self.state = 4063
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==217 or _la==429):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 4064
                        localctx.trim_expr = self.scalar_expr(0)


                    self.state = 4067
                    self.match(TeradataSQLExpressionsParser.FROM)


                self.state = 4070
                localctx.string_expr = self.scalar_expr(0)
                self.state = 4071
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_expr = None # Scalar_exprContext
            self.bson_data = None # Scalar_exprContext
            self.check_type = None # Char_string_literalContext
            self.geom_expr = None # Scalar_exprContext
            self.precision = None # Integer_literalContext
            self.geojson_expr = None # Scalar_exprContext
            self.asrid = None # Integer_literalContext
            self.json_string = None # Scalar_exprContext
            self.json_object = None # Scalar_exprContext
            self.json_path = None # Scalar_exprContext
            self.nvp_string = None # Scalar_exprContext
            self.name_delimiters = None # Char_string_literalContext
            self.value_delimiters = None # Char_string_literalContext
            self.ignore_characters = None # Char_string_literalContext

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_TO_JSON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Returns_clauseContext,0)


        def BSON_CHECK(self):
            return self.getToken(TeradataSQLExpressionsParser.BSON_CHECK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATASIZE, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLExpressionsParser.GEOJSONFROMGEOM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLExpressionsParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONGETVALUE, 0)

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def JSONMETADATA(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.NVP2JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_AGG, 0)

        def json_param_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Json_param_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_param_specContext,i)


        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_COMPOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_function" ):
                listener.enterJson_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_function" ):
                listener.exitJson_function(self)




    def json_function(self):

        localctx = TeradataSQLExpressionsParser.Json_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_json_function)
        self._la = 0 # Token type
        try:
            self.state = 4197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4075
                    self.td_sysfnlib()


                self.state = 4078
                self.match(TeradataSQLExpressionsParser.ARRAY_TO_JSON)
                self.state = 4079
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4080
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4081
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 4082
                    self.returns_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4085
                    self.td_sysfnlib()


                self.state = 4088
                self.match(TeradataSQLExpressionsParser.BSON_CHECK)
                self.state = 4089
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4090
                localctx.bson_data = self.scalar_expr(0)
                self.state = 4093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4091
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4092
                    localctx.check_type = self.char_string_literal()


                self.state = 4095
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4097
                    self.td_sysfnlib()


                self.state = 4100
                self.match(TeradataSQLExpressionsParser.DATASIZE)
                self.state = 4101
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4102
                self.scalar_expr(0)
                self.state = 4103
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4105
                    self.td_sysfnlib()


                self.state = 4108
                self.match(TeradataSQLExpressionsParser.GEOJSONFROMGEOM)
                self.state = 4109
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4110
                localctx.geom_expr = self.scalar_expr(0)
                self.state = 4113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4111
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4112
                    localctx.precision = self.integer_literal()


                self.state = 4115
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 4116
                    self.returns_clause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4119
                    self.td_sysfnlib()


                self.state = 4122
                self.match(TeradataSQLExpressionsParser.GEOMFROMGEOJSON)
                self.state = 4123
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4124
                localctx.geojson_expr = self.scalar_expr(0)
                self.state = 4125
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4126
                localctx.asrid = self.integer_literal()
                self.state = 4127
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4129
                    self.td_sysfnlib()


                self.state = 4132
                self.match(TeradataSQLExpressionsParser.JSON_CHECK)
                self.state = 4133
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4134
                localctx.json_string = self.scalar_expr(0)
                self.state = 4135
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4137
                self.match(TeradataSQLExpressionsParser.JSONGETVALUE)
                self.state = 4138
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4139
                localctx.json_object = self.scalar_expr(0)
                self.state = 4140
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4141
                localctx.json_path = self.scalar_expr(0)
                self.state = 4142
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 4143
                self.data_type()
                self.state = 4144
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4146
                self.match(TeradataSQLExpressionsParser.JSONMETADATA)
                self.state = 4147
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4148
                localctx.json_object = self.scalar_expr(0)
                self.state = 4149
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4151
                    self.td_sysfnlib()


                self.state = 4154
                self.match(TeradataSQLExpressionsParser.NVP2JSON)
                self.state = 4155
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4156
                localctx.nvp_string = self.scalar_expr(0)
                self.state = 4165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4157
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4158
                    localctx.name_delimiters = self.char_string_literal()
                    self.state = 4159
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4160
                    localctx.value_delimiters = self.char_string_literal()
                    self.state = 4163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4161
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 4162
                        localctx.ignore_characters = self.char_string_literal()




                self.state = 4167
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4169
                self.match(TeradataSQLExpressionsParser.JSON_AGG)
                self.state = 4170
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4171
                self.json_param_spec()
                self.state = 4176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4172
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4173
                    self.json_param_spec()
                    self.state = 4178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4179
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
                if la_ == 1:
                    self.state = 4180
                    self.returns_clause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4183
                self.match(TeradataSQLExpressionsParser.JSON_COMPOSE)
                self.state = 4184
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4185
                self.json_param_spec()
                self.state = 4190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4186
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4187
                    self.json_param_spec()
                    self.state = 4192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4193
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
                if la_ == 1:
                    self.state = 4194
                    self.returns_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_data = None # Scalar_exprContext
            self.xquery_expr = None # Char_string_literalContext
            self.xml_value_exp = None # Scalar_exprContext
            self.xml_value_expr = None # Scalar_exprContext
            self.xml_comment = None # Scalar_exprContext
            self.xml_text = None # Scalar_exprContext
            self.xml_schema = None # Scalar_exprContext
            self.xml_uri = None # Char_string_literalContext
            self.xml_valid_element_name = None # Scalar_exprContext
            self.doc_id = None # Scalar_exprContext
            self.source_doc = None # Scalar_exprContext
            self.split_size = None # Scalar_exprContext
            self.split_path = None # Scalar_exprContext
            self._scalar_expr = None # Scalar_exprContext
            self.replication_list = list() # of Scalar_exprContexts
            self.query_string = None # Scalar_exprContext
            self.xslt = None # Scalar_exprContext
            self.xml_string = None # Scalar_exprContext
            self.result_code = None # Scalar_exprContext
            self.document_grouping_spec = None # Scalar_exprContext

        def CREATEXML(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATEXML, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATASIZE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysfnlibContext,0)


        def XMLQUERY(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLQUERY, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_query_argumentContext,0)


        def xml_returning_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_returning_specContext,0)


        def xml_query_on_empty(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_query_on_emptyContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLSERIALIZE, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTENT, 0)

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def xml_encoding(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_encodingContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def BOM(self):
            return self.getToken(TeradataSQLExpressionsParser.BOM, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLExpressionsParser.VERSION, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLDECLARATION, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.NO)
            else:
                return self.getToken(TeradataSQLExpressionsParser.NO, i)

        def INDENT(self):
            return self.getToken(TeradataSQLExpressionsParser.INDENT, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCLUDING, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.SIZE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLELEMENT, 0)

        def NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.NAME, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_namespace_declarationContext,0)


        def xml_attribute_declaration(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_attribute_declarationContext,0)


        def xml_value_declaration(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_value_declarationContext,0)


        def XMLFOREST(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLFOREST, 0)

        def xml_forest_element_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Xml_forest_element_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_forest_element_specContext,i)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_content_option_specContext,0)


        def XMLCONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLCONCAT, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLCOMMENT, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPI, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTEXT, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPARSE, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLExpressionsParser.WHITESPACE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLExpressionsParser.PRESERVE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLExpressionsParser.STRIP, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLVALIDATE, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLExpressionsParser.ACCORDING, 0)

        def TO(self):
            return self.getToken(TeradataSQLExpressionsParser.TO, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLSCHEMA, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.VALUE, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLExpressionsParser.SEQUENCE, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLExpressionsParser.NAMESPACE, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ELEMENT, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLAGG, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_fullContext,i)


        def XMLSPLIT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLSPLIT, 0)

        def td_sysxml(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Td_sysxmlContext,0)


        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPUBLISH_STREAM, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_function" ):
                listener.enterXml_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_function" ):
                listener.exitXml_function(self)




    def xml_function(self):

        localctx = TeradataSQLExpressionsParser.Xml_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_xml_function)
        self._la = 0 # Token type
        try:
            self.state = 4446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4199
                self.match(TeradataSQLExpressionsParser.CREATEXML)
                self.state = 4200
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4201
                localctx.xml_data = self.scalar_expr(0)
                self.state = 4202
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4204
                    self.td_sysfnlib()


                self.state = 4207
                self.match(TeradataSQLExpressionsParser.DATASIZE)
                self.state = 4208
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4209
                self.scalar_expr(0)
                self.state = 4210
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4212
                self.match(TeradataSQLExpressionsParser.XMLQUERY)
                self.state = 4213
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4214
                localctx.xquery_expr = self.char_string_literal()
                self.state = 4216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 4215
                    self.xml_query_argument()


                self.state = 4219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4218
                    self.xml_returning_spec()


                self.state = 4222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==649:
                    self.state = 4221
                    self.xml_query_on_empty()


                self.state = 4224
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4226
                self.match(TeradataSQLExpressionsParser.XMLSERIALIZE)
                self.state = 4227
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4228
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4229
                localctx.xml_value_exp = self.scalar_expr(0)
                self.state = 4232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4230
                    self.match(TeradataSQLExpressionsParser.AS)
                    self.state = 4231
                    self.data_type()


                self.state = 4235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==653:
                    self.state = 4234
                    self.xml_encoding()


                self.state = 4242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4237
                    self.match(TeradataSQLExpressionsParser.WITH)
                    self.state = 4239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4238
                        self.match(TeradataSQLExpressionsParser.NO)


                    self.state = 4241
                    self.match(TeradataSQLExpressionsParser.BOM)


                self.state = 4246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1023:
                    self.state = 4244
                    self.match(TeradataSQLExpressionsParser.VERSION)
                    self.state = 4245
                    self.char_string_literal()


                self.state = 4250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==661 or _la==701:
                    self.state = 4248
                    _la = self._input.LA(1)
                    if not(_la==661 or _la==701):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4249
                    self.match(TeradataSQLExpressionsParser.XMLDECLARATION)


                self.state = 4258
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 4252
                    self.match(TeradataSQLExpressionsParser.NO)
                    self.state = 4253
                    self.match(TeradataSQLExpressionsParser.INDENT)
                    pass
                elif token in [704]:
                    self.state = 4254
                    self.match(TeradataSQLExpressionsParser.INDENT)

                    self.state = 4255
                    self.match(TeradataSQLExpressionsParser.SIZE)
                    self.state = 4256
                    self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                    self.state = 4257
                    self.integer_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 4260
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4262
                self.match(TeradataSQLExpressionsParser.XMLDOCUMENT)
                self.state = 4263
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4264
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 4266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4265
                    self.xml_returning_spec()


                self.state = 4268
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4270
                self.match(TeradataSQLExpressionsParser.XMLELEMENT)
                self.state = 4271
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4272
                self.match(TeradataSQLExpressionsParser.NAME)
                self.state = 4273
                self.column_name()
                self.state = 4276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
                if la_ == 1:
                    self.state = 4274
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4275
                    self.xml_namespace_declaration()


                self.state = 4280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
                if la_ == 1:
                    self.state = 4278
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4279
                    self.xml_attribute_declaration()


                self.state = 4284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4282
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4283
                    self.xml_value_declaration()


                self.state = 4287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4286
                    self.xml_returning_spec()


                self.state = 4289
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4291
                self.match(TeradataSQLExpressionsParser.XMLFOREST)
                self.state = 4292
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                if la_ == 1:
                    self.state = 4293
                    self.xml_namespace_declaration()


                self.state = 4304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 4296
                    self.xml_forest_element_spec()
                    self.state = 4301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4297
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 4298
                        self.xml_forest_element_spec()
                        self.state = 4303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 4306
                    self.xml_content_option_spec()


                self.state = 4310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4309
                    self.xml_returning_spec()


                self.state = 4312
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4313
                self.match(TeradataSQLExpressionsParser.XMLCONCAT)
                self.state = 4314
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4315
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 4320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4316
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4317
                    localctx.xml_value_expr = self.scalar_expr(0)
                    self.state = 4322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4323
                    self.xml_returning_spec()


                self.state = 4326
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4328
                self.match(TeradataSQLExpressionsParser.XMLCOMMENT)
                self.state = 4329
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4330
                localctx.xml_comment = self.scalar_expr(0)
                self.state = 4332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4331
                    self.xml_returning_spec()


                self.state = 4334
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4336
                self.match(TeradataSQLExpressionsParser.XMLPI)
                self.state = 4337
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4338
                self.match(TeradataSQLExpressionsParser.NAME)
                self.state = 4339
                self.column_name()
                self.state = 4342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4340
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4341
                    self.scalar_expr(0)


                self.state = 4345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4344
                    self.xml_returning_spec()


                self.state = 4347
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4349
                self.match(TeradataSQLExpressionsParser.XMLTEXT)
                self.state = 4350
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4351
                localctx.xml_text = self.scalar_expr(0)
                self.state = 4353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4352
                    self.xml_returning_spec()


                self.state = 4355
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4357
                self.match(TeradataSQLExpressionsParser.XMLPARSE)
                self.state = 4358
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4359
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4360
                self.scalar_expr(0)
                self.state = 4361
                _la = self._input.LA(1)
                if not(_la==307 or _la==942):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4362
                self.match(TeradataSQLExpressionsParser.WHITESPACE)
                self.state = 4363
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4365
                self.match(TeradataSQLExpressionsParser.XMLVALIDATE)
                self.state = 4366
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4367
                _la = self._input.LA(1)
                if not(_la==593 or _la==636 or _la==914):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4368
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 4369
                self.match(TeradataSQLExpressionsParser.ACCORDING)
                self.state = 4370
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 4371
                self.match(TeradataSQLExpressionsParser.XMLSCHEMA)
                self.state = 4372
                self.match(TeradataSQLExpressionsParser.VALUE)
                self.state = 4373
                localctx.xml_schema = self.scalar_expr(0)
                self.state = 4378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [790]:
                    self.state = 4374
                    self.match(TeradataSQLExpressionsParser.NAMESPACE)
                    self.state = 4375
                    localctx.xml_uri = self.char_string_literal()
                    pass
                elif token in [268]:
                    self.state = 4376
                    self.match(TeradataSQLExpressionsParser.NO)
                    self.state = 4377
                    self.match(TeradataSQLExpressionsParser.NAMESPACE)
                    pass
                elif token in [646, 1214]:
                    pass
                else:
                    pass
                self.state = 4382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 4380
                    self.match(TeradataSQLExpressionsParser.ELEMENT)
                    self.state = 4381
                    localctx.xml_valid_element_name = self.scalar_expr(0)


                self.state = 4384
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4386
                self.match(TeradataSQLExpressionsParser.XMLAGG)
                self.state = 4387
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4388
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 4399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 4389
                    self.match(TeradataSQLExpressionsParser.ORDER)
                    self.state = 4390
                    self.match(TeradataSQLExpressionsParser.BY)
                    self.state = 4391
                    self.order_by_spec_full()
                    self.state = 4396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4392
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 4393
                        self.order_by_spec_full()
                        self.state = 4398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4401
                    self.xml_returning_spec()


                self.state = 4404
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4406
                self.match(TeradataSQLExpressionsParser.XMLSPLIT)
                self.state = 4407
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4408
                localctx.doc_id = self.scalar_expr(0)
                self.state = 4409
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4410
                localctx.source_doc = self.scalar_expr(0)
                self.state = 4411
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4412
                localctx.split_size = self.scalar_expr(0)
                self.state = 4413
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4414
                localctx.split_path = self.scalar_expr(0)
                self.state = 4419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4415
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4416
                    localctx._scalar_expr = self.scalar_expr(0)
                    localctx.replication_list.append(localctx._scalar_expr)
                    self.state = 4421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4422
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4424
                self.td_sysxml()
                self.state = 4425
                self.match(TeradataSQLExpressionsParser.XMLPUBLISH)
                self.state = 4426
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4427
                localctx.query_string = self.scalar_expr(0)
                self.state = 4428
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4429
                localctx.xslt = self.scalar_expr(0)
                self.state = 4430
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4431
                localctx.xml_string = self.scalar_expr(0)
                self.state = 4432
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4433
                localctx.result_code = self.scalar_expr(0)
                self.state = 4434
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4436
                self.td_sysxml()
                self.state = 4437
                self.match(TeradataSQLExpressionsParser.XMLPUBLISH_STREAM)
                self.state = 4438
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4439
                localctx.query_string = self.scalar_expr(0)
                self.state = 4440
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4441
                localctx.xslt = self.scalar_expr(0)
                self.state = 4442
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4443
                localctx.document_grouping_spec = self.scalar_expr(0)
                self.state = 4444
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Returns_clauseContext,0)


        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = TeradataSQLExpressionsParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 4470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4448
                self.function_name()
                self.state = 4449
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4450
                self.scalar_expr(0)
                self.state = 4455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4451
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4452
                    self.scalar_expr(0)
                    self.state = 4457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4458
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
                if la_ == 1:
                    self.state = 4459
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 4460
                    self.window_spec()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4463
                self.function_name()
                self.state = 4464
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4465
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                self.state = 4468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                if la_ == 1:
                    self.state = 4466
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 4467
                    self.window_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_N(self):
            return self.getToken(TeradataSQLExpressionsParser.CASE_N, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def case_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Case_specContext,0)


        def RANGE_N(self):
            return self.getToken(TeradataSQLExpressionsParser.RANGE_N, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def BETWEEN(self):
            return self.getToken(TeradataSQLExpressionsParser.BETWEEN, 0)

        def range_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_exprContext,0)


        def range_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_partitioning_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_expr" ):
                listener.enterPartitioning_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_expr" ):
                listener.exitPartitioning_expr(self)




    def partitioning_expr(self):

        localctx = TeradataSQLExpressionsParser.Partitioning_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_partitioning_expr)
        self._la = 0 # Token type
        try:
            self.state = 4499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4472
                self.match(TeradataSQLExpressionsParser.CASE_N)
                self.state = 4473
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4474
                self.logical_expr(0)
                self.state = 4479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4475
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 4476
                        self.logical_expr(0) 
                    self.state = 4481
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

                self.state = 4484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4482
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4483
                    self.case_spec()


                self.state = 4486
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4488
                self.match(TeradataSQLExpressionsParser.RANGE_N)
                self.state = 4489
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4490
                self.scalar_expr(0)
                self.state = 4491
                self.match(TeradataSQLExpressionsParser.BETWEEN)
                self.state = 4492
                self.range_expr()
                self.state = 4495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4493
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4494
                    self.range_spec()


                self.state = 4497
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysfnlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_SYSFNLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_td_sysfnlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysfnlib" ):
                listener.enterTd_sysfnlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysfnlib" ):
                listener.exitTd_sysfnlib(self)




    def td_sysfnlib(self):

        localctx = TeradataSQLExpressionsParser.Td_sysfnlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_td_sysfnlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4501
            self.match(TeradataSQLExpressionsParser.TD_SYSFNLIB)
            self.state = 4502
            self.match(TeradataSQLExpressionsParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysxmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_SYSXML, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_td_sysxml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysxml" ):
                listener.enterTd_sysxml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysxml" ):
                listener.exitTd_sysxml(self)




    def td_sysxml(self):

        localctx = TeradataSQLExpressionsParser.Td_sysxmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_td_sysxml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4504
            self.match(TeradataSQLExpressionsParser.TD_SYSXML)
            self.state = 4505
            self.match(TeradataSQLExpressionsParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyslibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_syslib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyslib" ):
                listener.enterSyslib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyslib" ):
                listener.exitSyslib(self)




    def syslib(self):

        localctx = TeradataSQLExpressionsParser.SyslibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_syslib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4507
            self.match(TeradataSQLExpressionsParser.SYSLIB)
            self.state = 4508
            self.match(TeradataSQLExpressionsParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_server_dbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_SERVER_DB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_td_server_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_server_db" ):
                listener.enterTd_server_db(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_server_db" ):
                listener.exitTd_server_db(self)




    def td_server_db(self):

        localctx = TeradataSQLExpressionsParser.Td_server_dbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_td_server_db)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4510
            self.match(TeradataSQLExpressionsParser.TD_SERVER_DB)
            self.state = 4511
            self.match(TeradataSQLExpressionsParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Translation_mappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE_TO_LOCALE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_translation_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_mapping" ):
                listener.enterTranslation_mapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_mapping" ):
                listener.exitTranslation_mapping(self)




    def translation_mapping(self):

        localctx = TeradataSQLExpressionsParser.Translation_mappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_translation_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4513
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def attribute_modification_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Attribute_modification_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Attribute_modification_optionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_attribute_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification" ):
                listener.enterAttribute_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification" ):
                listener.exitAttribute_modification(self)




    def attribute_modification(self):

        localctx = TeradataSQLExpressionsParser.Attribute_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_attribute_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4515
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4516
            self.attribute_modification_option()
            self.state = 4521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4517
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4518
                self.attribute_modification_option()
                self.state = 4523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4524
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def STYLE(self):
            return self.getToken(TeradataSQLExpressionsParser.STYLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_clause" ):
                listener.enterReturns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_clause" ):
                listener.exitReturns_clause(self)




    def returns_clause(self):

        localctx = TeradataSQLExpressionsParser.Returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_returns_clause)
        try:
            self.state = 4531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4526
                self.match(TeradataSQLExpressionsParser.RETURNS)
                self.state = 4527
                self.data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4528
                self.match(TeradataSQLExpressionsParser.RETURNS)
                self.state = 4529
                self.match(TeradataSQLExpressionsParser.STYLE)
                self.state = 4530
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modification_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def teradata_type_conversion_data_attribute(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Teradata_type_conversion_data_attributeContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Casespecific_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_phraseContext,0)


        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Uppercase_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_attribute_modification_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification_option" ):
                listener.enterAttribute_modification_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification_option" ):
                listener.exitAttribute_modification_option(self)




    def attribute_modification_option(self):

        localctx = TeradataSQLExpressionsParser.Attribute_modification_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_attribute_modification_option)
        try:
            self.state = 4537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 262, 425]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4533
                self.teradata_type_conversion_data_attribute()
                pass
            elif token in [49, 88, 272, 1211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4534
                self.casespecific_phrase()
                pass
            elif token in [52, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4535
                self.character_set_phrase()
                pass
            elif token in [438, 455]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4536
                self.uppercase_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def teradata_type_conversion_data_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Teradata_type_conversion_data_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Teradata_type_conversion_data_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def character_set_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Character_set_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_phraseContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_teradata_type_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion" ):
                listener.enterTeradata_type_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion" ):
                listener.exitTeradata_type_conversion(self)




    def teradata_type_conversion(self):

        localctx = TeradataSQLExpressionsParser.Teradata_type_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_teradata_type_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4539
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==262 or _la==425:
                self.state = 4540
                self.teradata_type_conversion_data_attribute()
                self.state = 4541
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4548
            self.data_type()
            self.state = 4556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4549
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4552
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 262, 425]:
                    self.state = 4550
                    self.teradata_type_conversion_data_attribute()
                    pass
                elif token in [52, 55]:
                    self.state = 4551
                    self.character_set_phrase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4559
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversion_data_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Format_phraseContext,0)


        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_teradata_type_conversion_data_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion_data_attribute" ):
                listener.enterTeradata_type_conversion_data_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion_data_attribute" ):
                listener.exitTeradata_type_conversion_data_attribute(self)




    def teradata_type_conversion_data_attribute(self):

        localctx = TeradataSQLExpressionsParser.Teradata_type_conversion_data_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_teradata_type_conversion_data_attribute)
        try:
            self.state = 4564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4561
                self.format_phrase()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4562
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4563
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLExpressionsParser.NO, 0)

        def CASE(self):
            return self.getToken(TeradataSQLExpressionsParser.CASE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLExpressionsParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_case_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_spec" ):
                listener.enterCase_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_spec" ):
                listener.exitCase_spec(self)




    def case_spec(self):

        localctx = TeradataSQLExpressionsParser.Case_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_case_spec)
        self._la = 0 # Token type
        try:
            self.state = 4573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4566
                self.match(TeradataSQLExpressionsParser.NO)
                self.state = 4567
                self.match(TeradataSQLExpressionsParser.CASE)
                self.state = 4570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 4568
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4569
                    self.match(TeradataSQLExpressionsParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4572
                self.match(TeradataSQLExpressionsParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_expr_1Context,0)


        def range_expr_2(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_expr_2Context,0)


        def range_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr" ):
                listener.enterRange_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr" ):
                listener.exitRange_expr(self)




    def range_expr(self):

        localctx = TeradataSQLExpressionsParser.Range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_range_expr)
        try:
            self.state = 4578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4575
                self.range_expr_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4576
                self.range_expr_2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4577
                self.range_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_expr_1Context,0)


        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Range_expr_3Context,i)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_range_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_list" ):
                listener.enterRange_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_list" ):
                listener.exitRange_list(self)




    def range_list(self):

        localctx = TeradataSQLExpressionsParser.Range_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_range_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 4580
                self.range_expr_3()
                pass
            elif token in [1219]:
                self.state = 4581
                self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                self.state = 4584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 4582
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4583
                    self.scalar_expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 4592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4588
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4589
                    self.range_expr_3() 
                self.state = 4594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

            self.state = 4595
            self.match(TeradataSQLExpressionsParser.COMMA)
            self.state = 4596
            self.range_expr_1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def EACH(self):
            return self.getToken(TeradataSQLExpressionsParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_range_expr_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_1" ):
                listener.enterRange_expr_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_1" ):
                listener.exitRange_expr_1(self)




    def range_expr_1(self):

        localctx = TeradataSQLExpressionsParser.Range_expr_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_range_expr_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4598
            self.scalar_expr(0)
            self.state = 4599
            self.match(TeradataSQLExpressionsParser.AND)
            self.state = 4602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 4600
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 4601
                self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 4604
                self.match(TeradataSQLExpressionsParser.EACH)
                self.state = 4605
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, i)

        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_range_expr_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_2" ):
                listener.enterRange_expr_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_2" ):
                listener.exitRange_expr_2(self)




    def range_expr_2(self):

        localctx = TeradataSQLExpressionsParser.Range_expr_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_range_expr_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4608
            self.match(TeradataSQLExpressionsParser.MUL_SIGN)
            self.state = 4609
            self.match(TeradataSQLExpressionsParser.AND)
            self.state = 4612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 4610
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 4611
                self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLExpressionsParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_range_expr_3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_3" ):
                listener.enterRange_expr_3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_3" ):
                listener.exitRange_expr_3(self)




    def range_expr_3(self):

        localctx = TeradataSQLExpressionsParser.Range_expr_3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_range_expr_3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4614
            self.scalar_expr(0)

            self.state = 4615
            self.match(TeradataSQLExpressionsParser.AND)
            self.state = 4616
            self.scalar_expr(0)
            self.state = 4620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 4618
                self.match(TeradataSQLExpressionsParser.EACH)
                self.state = 4619
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLExpressionsParser.NO, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLExpressionsParser.RANGE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLExpressionsParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_range_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_spec" ):
                listener.enterRange_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_spec" ):
                listener.exitRange_spec(self)




    def range_spec(self):

        localctx = TeradataSQLExpressionsParser.Range_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_range_spec)
        self._la = 0 # Token type
        try:
            self.state = 4629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4622
                self.match(TeradataSQLExpressionsParser.NO)
                self.state = 4623
                self.match(TeradataSQLExpressionsParser.RANGE)
                self.state = 4626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 4624
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4625
                    self.match(TeradataSQLExpressionsParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4628
                self.match(TeradataSQLExpressionsParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_bucket_number_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sparcemap_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext
            self.contiguousmap_name = None # Char_string_literalContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def MAP(self):
            return self.getToken(TeradataSQLExpressionsParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLExpressionsParser.EQUALS_SIGN, i)

        def COLOCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_hash_bucket_number_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_bucket_number_expr" ):
                listener.enterHash_bucket_number_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_bucket_number_expr" ):
                listener.exitHash_bucket_number_expr(self)




    def hash_bucket_number_expr(self):

        localctx = TeradataSQLExpressionsParser.Hash_bucket_number_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_hash_bucket_number_expr)
        self._la = 0 # Token type
        try:
            self.state = 4650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4631
                self.scalar_expr(0)
                self.state = 4640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 4632
                    self.match(TeradataSQLExpressionsParser.MAP)
                    self.state = 4633
                    self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                    self.state = 4634
                    localctx.sparcemap_name = self.char_string_literal()
                    self.state = 4635
                    self.match(TeradataSQLExpressionsParser.COLOCATE)
                    self.state = 4636
                    self.match(TeradataSQLExpressionsParser.USING)
                    self.state = 4637
                    self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                    self.state = 4638
                    localctx.colocation_name = self.char_string_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4642
                self.scalar_expr(0)
                self.state = 4643
                self.match(TeradataSQLExpressionsParser.MAP)
                self.state = 4644
                self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                self.state = 4645
                localctx.contiguousmap_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4647
                self.match(TeradataSQLExpressionsParser.MAP)
                self.state = 4648
                self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                self.state = 4649
                localctx.contiguousmap_name = self.char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLExpressionsParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_partition_byContext,0)


        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_order_byContext,0)


        def window_rows(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_rowsContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_window_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec" ):
                listener.enterWindow_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec" ):
                listener.exitWindow_spec(self)




    def window_spec(self):

        localctx = TeradataSQLExpressionsParser.Window_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_window_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4652
            self.match(TeradataSQLExpressionsParser.OVER)
            self.state = 4653
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 4654
                self.window_partition_by()


            self.state = 4658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 4657
                self.window_order_by()


            self.state = 4661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==364:
                self.state = 4660
                self.window_rows()


            self.state = 4663
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_without_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLExpressionsParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_partition_byContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_window_spec_without_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_without_rows" ):
                listener.enterWindow_spec_without_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_without_rows" ):
                listener.exitWindow_spec_without_rows(self)




    def window_spec_without_rows(self):

        localctx = TeradataSQLExpressionsParser.Window_spec_without_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_window_spec_without_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4665
            self.match(TeradataSQLExpressionsParser.OVER)
            self.state = 4666
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 4667
                self.window_partition_by()


            self.state = 4670
            self.window_order_by()
            self.state = 4671
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_with_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLExpressionsParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Window_partition_byContext,0)


        def with_ties(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_tiesContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_window_spec_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_with_ties" ):
                listener.enterWindow_spec_with_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_with_ties" ):
                listener.exitWindow_spec_with_ties(self)




    def window_spec_with_ties(self):

        localctx = TeradataSQLExpressionsParser.Window_spec_with_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_window_spec_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4673
            self.match(TeradataSQLExpressionsParser.OVER)
            self.state = 4674
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 4675
                self.window_partition_by()


            self.state = 4678
            self.window_order_by()
            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 4679
                self.with_ties()


            self.state = 4682
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(TeradataSQLExpressionsParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_window_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_by" ):
                listener.enterWindow_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_by" ):
                listener.exitWindow_partition_by(self)




    def window_partition_by(self):

        localctx = TeradataSQLExpressionsParser.Window_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_window_partition_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4684
            self.match(TeradataSQLExpressionsParser.PARTITION)
            self.state = 4685
            self.match(TeradataSQLExpressionsParser.BY)
            self.state = 4686
            self.scalar_expr(0)
            self.state = 4691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4687
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4688
                self.scalar_expr(0)
                self.state = 4693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def RESET(self):
            return self.getToken(TeradataSQLExpressionsParser.RESET, 0)

        def WHEN(self):
            return self.getToken(TeradataSQLExpressionsParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_window_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_by" ):
                listener.enterWindow_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_by" ):
                listener.exitWindow_order_by(self)




    def window_order_by(self):

        localctx = TeradataSQLExpressionsParser.Window_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_window_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4694
            self.match(TeradataSQLExpressionsParser.ORDER)
            self.state = 4695
            self.match(TeradataSQLExpressionsParser.BY)
            self.state = 4696
            self.order_by_spec_full()
            self.state = 4701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4697
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4698
                self.order_by_spec_full()
                self.state = 4703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==884:
                self.state = 4704
                self.match(TeradataSQLExpressionsParser.RESET)
                self.state = 4705
                self.match(TeradataSQLExpressionsParser.WHEN)
                self.state = 4706
                self.logical_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWS, 0)

        def UNBOUNDED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.UNBOUNDED)
            else:
                return self.getToken(TeradataSQLExpressionsParser.UNBOUNDED, i)

        def PRECEDING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.PRECEDING)
            else:
                return self.getToken(TeradataSQLExpressionsParser.PRECEDING, i)

        def number_of_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Number_of_rowsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Number_of_rowsContext,i)


        def CURRENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CURRENT)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CURRENT, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.ROW)
            else:
                return self.getToken(TeradataSQLExpressionsParser.ROW, i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLExpressionsParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataSQLExpressionsParser.AND, 0)

        def FOLLOWING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.FOLLOWING)
            else:
                return self.getToken(TeradataSQLExpressionsParser.FOLLOWING, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_window_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_rows" ):
                listener.enterWindow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_rows" ):
                listener.exitWindow_rows(self)




    def window_rows(self):

        localctx = TeradataSQLExpressionsParser.Window_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_window_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4709
            self.match(TeradataSQLExpressionsParser.ROWS)
            self.state = 4794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1013]:
                self.state = 4710
                self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                self.state = 4711
                self.match(TeradataSQLExpressionsParser.PRECEDING)
                pass
            elif token in [1194]:
                self.state = 4712
                self.number_of_rows()
                self.state = 4713
                self.match(TeradataSQLExpressionsParser.PRECEDING)
                pass
            elif token in [93]:
                self.state = 4715
                self.match(TeradataSQLExpressionsParser.CURRENT)
                self.state = 4716
                self.match(TeradataSQLExpressionsParser.ROW)
                pass
            elif token in [35]:
                self.state = 4717
                self.match(TeradataSQLExpressionsParser.BETWEEN)
                self.state = 4792
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4718
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4719
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4720
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4721
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4722
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 2:
                    self.state = 4723
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4724
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4725
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4726
                    self.number_of_rows()
                    self.state = 4727
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    pass

                elif la_ == 3:
                    self.state = 4729
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4730
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4731
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4732
                    self.match(TeradataSQLExpressionsParser.CURRENT)
                    self.state = 4733
                    self.match(TeradataSQLExpressionsParser.ROW)
                    pass

                elif la_ == 4:
                    self.state = 4734
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4735
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4736
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4737
                    self.number_of_rows()
                    self.state = 4738
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 5:
                    self.state = 4740
                    self.number_of_rows()
                    self.state = 4741
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4742
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4743
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4744
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 6:
                    self.state = 4746
                    self.number_of_rows()
                    self.state = 4747
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4748
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4749
                    self.number_of_rows()
                    self.state = 4750
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    pass

                elif la_ == 7:
                    self.state = 4752
                    self.number_of_rows()
                    self.state = 4753
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4754
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4755
                    self.match(TeradataSQLExpressionsParser.CURRENT)
                    self.state = 4756
                    self.match(TeradataSQLExpressionsParser.ROW)
                    pass

                elif la_ == 8:
                    self.state = 4758
                    self.number_of_rows()
                    self.state = 4759
                    self.match(TeradataSQLExpressionsParser.PRECEDING)
                    self.state = 4760
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4761
                    self.number_of_rows()
                    self.state = 4762
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 9:
                    self.state = 4764
                    self.match(TeradataSQLExpressionsParser.CURRENT)
                    self.state = 4765
                    self.match(TeradataSQLExpressionsParser.ROW)
                    self.state = 4766
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4767
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4768
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 10:
                    self.state = 4769
                    self.match(TeradataSQLExpressionsParser.CURRENT)
                    self.state = 4770
                    self.match(TeradataSQLExpressionsParser.ROW)
                    self.state = 4771
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4772
                    self.match(TeradataSQLExpressionsParser.CURRENT)
                    self.state = 4773
                    self.match(TeradataSQLExpressionsParser.ROW)
                    pass

                elif la_ == 11:
                    self.state = 4774
                    self.match(TeradataSQLExpressionsParser.CURRENT)
                    self.state = 4775
                    self.match(TeradataSQLExpressionsParser.ROW)
                    self.state = 4776
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4777
                    self.number_of_rows()
                    self.state = 4778
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 12:
                    self.state = 4780
                    self.number_of_rows()
                    self.state = 4781
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    self.state = 4782
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4783
                    self.match(TeradataSQLExpressionsParser.UNBOUNDED)
                    self.state = 4784
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass

                elif la_ == 13:
                    self.state = 4786
                    self.number_of_rows()
                    self.state = 4787
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    self.state = 4788
                    self.match(TeradataSQLExpressionsParser.AND)
                    self.state = 4789
                    self.number_of_rows()
                    self.state = 4790
                    self.match(TeradataSQLExpressionsParser.FOLLOWING)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_param_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Format_phraseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_param_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_param_spec" ):
                listener.enterJson_param_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_param_spec" ):
                listener.exitJson_param_spec(self)




    def json_param_spec(self):

        localctx = TeradataSQLExpressionsParser.Json_param_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_json_param_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4796
            localctx.param = self.scalar_expr(0)
            self.state = 4801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4797
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4798
                self.format_phrase()
                self.state = 4799
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


            self.state = 4805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4803
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 4804
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_context_item = None # Column_nameContext

        def PASSING(self):
            return self.getToken(TeradataSQLExpressionsParser.PASSING, 0)

        def xml_query_variable_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Xml_query_variable_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_query_variable_specContext,i)


        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.VALUE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_query_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_argument" ):
                listener.enterXml_query_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_argument" ):
                listener.exitXml_query_argument(self)




    def xml_query_argument(self):

        localctx = TeradataSQLExpressionsParser.Xml_query_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_xml_query_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4807
            self.match(TeradataSQLExpressionsParser.PASSING)
            self.state = 4810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 4808
                self.match(TeradataSQLExpressionsParser.BY)
                self.state = 4809
                self.match(TeradataSQLExpressionsParser.VALUE)


            self.state = 4821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.state = 4812
                localctx.xml_query_context_item = self.column_name()
                pass

            elif la_ == 2:
                self.state = 4813
                self.xml_query_variable_spec()
                self.state = 4818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4814
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4815
                    self.xml_query_variable_spec()
                    self.state = 4820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_variable_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_variable = None # Column_nameContext

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_query_variable_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_variable_spec" ):
                listener.enterXml_query_variable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_variable_spec" ):
                listener.exitXml_query_variable_spec(self)




    def xml_query_variable_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_query_variable_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_xml_query_variable_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4823
            localctx.xml_query_variable = self.column_name()
            self.state = 4824
            self.match(TeradataSQLExpressionsParser.AS)
            self.state = 4825
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLATTRIBUTES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def xml_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Xml_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_declaration" ):
                listener.enterXml_attribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_declaration" ):
                listener.exitXml_attribute_declaration(self)




    def xml_attribute_declaration(self):

        localctx = TeradataSQLExpressionsParser.Xml_attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_xml_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4827
            self.match(TeradataSQLExpressionsParser.XMLATTRIBUTES)
            self.state = 4828
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4829
            self.xml_attribute_spec()
            self.state = 4834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4830
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4831
                self.xml_attribute_spec()
                self.state = 4836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4837
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_attribute_value = None # Column_nameContext
            self.xml_attribute_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_spec" ):
                listener.enterXml_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_spec" ):
                listener.exitXml_attribute_spec(self)




    def xml_attribute_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_xml_attribute_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4839
            localctx.xml_attribute_value = self.column_name()
            self.state = 4842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4840
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 4841
                localctx.xml_attribute_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_forest_element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_forest_element_value = None # Column_nameContext
            self.xml_forest_element_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_forest_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_forest_element_spec" ):
                listener.enterXml_forest_element_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_forest_element_spec" ):
                listener.exitXml_forest_element_spec(self)




    def xml_forest_element_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_forest_element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_xml_forest_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4844
            localctx.xml_forest_element_value = self.column_name()
            self.state = 4847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4845
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 4846
                localctx.xml_forest_element_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_value_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_value_expr = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_content_option_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_value_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_value_declaration" ):
                listener.enterXml_value_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_value_declaration" ):
                listener.exitXml_value_declaration(self)




    def xml_value_declaration(self):

        localctx = TeradataSQLExpressionsParser.Xml_value_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_xml_value_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4849
            localctx.xml_value_expr = self.scalar_expr(0)
            self.state = 4851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 4850
                self.xml_content_option_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLNAMESPACES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def xml_namespace_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Xml_namespace_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_namespace_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_declaration" ):
                listener.enterXml_namespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_declaration" ):
                listener.exitXml_namespace_declaration(self)




    def xml_namespace_declaration(self):

        localctx = TeradataSQLExpressionsParser.Xml_namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_xml_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4853
            self.match(TeradataSQLExpressionsParser.XMLNAMESPACES)
            self.state = 4854
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4855
            self.xml_namespace_spec()
            self.state = 4860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4856
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4857
                self.xml_namespace_spec()
                self.state = 4862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4863
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Char_string_literalContext
            self.xml_namespace_prefix = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFAULT, 0)

        def NO(self):
            return self.getToken(TeradataSQLExpressionsParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_namespace_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_spec" ):
                listener.enterXml_namespace_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_spec" ):
                listener.exitXml_namespace_spec(self)




    def xml_namespace_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_namespace_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_xml_namespace_spec)
        try:
            self.state = 4873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4865
                localctx.xml_namespace_uri = self.char_string_literal()
                self.state = 4866
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 4867
                localctx.xml_namespace_prefix = self.alias_name()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4869
                self.match(TeradataSQLExpressionsParser.DEFAULT)
                self.state = 4870
                localctx.xml_namespace_uri = self.char_string_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4871
                self.match(TeradataSQLExpressionsParser.NO)
                self.state = 4872
                self.match(TeradataSQLExpressionsParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_columns_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,i)


        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.FOR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.FOR, i)

        def ORDINALITY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.ORDINALITY)
            else:
                return self.getToken(TeradataSQLExpressionsParser.ORDINALITY, i)

        def xml_regular_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Xml_regular_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Xml_regular_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_columns_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_columns_spec" ):
                listener.enterXml_columns_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_columns_spec" ):
                listener.exitXml_columns_spec(self)




    def xml_columns_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_columns_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_xml_columns_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4875
            self.match(TeradataSQLExpressionsParser.COLUMNS)
            self.state = 4881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
            if la_ == 1:
                self.state = 4876
                self.column_name()
                self.state = 4877
                self.match(TeradataSQLExpressionsParser.FOR)
                self.state = 4878
                self.match(TeradataSQLExpressionsParser.ORDINALITY)
                pass

            elif la_ == 2:
                self.state = 4880
                self.xml_regular_column_definition()
                pass


            self.state = 4893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4883
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 4884
                    self.column_name()
                    self.state = 4885
                    self.match(TeradataSQLExpressionsParser.FOR)
                    self.state = 4886
                    self.match(TeradataSQLExpressionsParser.ORDINALITY)
                    pass

                elif la_ == 2:
                    self.state = 4888
                    self.xml_regular_column_definition()
                    pass


                self.state = 4895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_regular_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def PATH(self):
            return self.getToken(TeradataSQLExpressionsParser.PATH, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFAULT, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LiteralContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_regular_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_regular_column_definition" ):
                listener.enterXml_regular_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_regular_column_definition" ):
                listener.exitXml_regular_column_definition(self)




    def xml_regular_column_definition(self):

        localctx = TeradataSQLExpressionsParser.Xml_regular_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_xml_regular_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4896
            localctx.name = self.unqualified_name()
            self.state = 4897
            self.data_type()
            self.state = 4900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1082:
                self.state = 4898
                self.match(TeradataSQLExpressionsParser.PATH)
                self.state = 4899
                self.char_string_literal()


            self.state = 4904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 4902
                self.match(TeradataSQLExpressionsParser.DEFAULT)
                self.state = 4903
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_encoding_name = None # Char_string_literalContext

        def ENCODING(self):
            return self.getToken(TeradataSQLExpressionsParser.ENCODING, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_encoding" ):
                listener.enterXml_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_encoding" ):
                listener.exitXml_encoding(self)




    def xml_encoding(self):

        localctx = TeradataSQLExpressionsParser.Xml_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_xml_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4906
            self.match(TeradataSQLExpressionsParser.ENCODING)
            self.state = 4907
            localctx.xml_encoding_name = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_on_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.EMPTY)
            else:
                return self.getToken(TeradataSQLExpressionsParser.EMPTY, i)

        def NULL(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_query_on_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_on_empty" ):
                listener.enterXml_query_on_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_on_empty" ):
                listener.exitXml_query_on_empty(self)




    def xml_query_on_empty(self):

        localctx = TeradataSQLExpressionsParser.Xml_query_on_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_xml_query_on_empty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4909
            _la = self._input.LA(1)
            if not(_la==274 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4910
            self.match(TeradataSQLExpressionsParser.ON)
            self.state = 4911
            self.match(TeradataSQLExpressionsParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_returning_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNING, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTENT, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLExpressionsParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_returning_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_returning_spec" ):
                listener.enterXml_returning_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_returning_spec" ):
                listener.exitXml_returning_spec(self)




    def xml_returning_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_returning_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_xml_returning_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4913
            self.match(TeradataSQLExpressionsParser.RETURNING)
            self.state = 4914
            _la = self._input.LA(1)
            if not(_la==593 or _la==914):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_content_option_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TeradataSQLExpressionsParser.OPTION, 0)

        def ON(self):
            return self.getToken(TeradataSQLExpressionsParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.NULL)
            else:
                return self.getToken(TeradataSQLExpressionsParser.NULL, i)

        def NIL(self):
            return self.getToken(TeradataSQLExpressionsParser.NIL, 0)

        def NO(self):
            return self.getToken(TeradataSQLExpressionsParser.NO, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTENT, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLExpressionsParser.EMPTY, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ABSENT, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_xml_content_option_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content_option_spec" ):
                listener.enterXml_content_option_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content_option_spec" ):
                listener.exitXml_content_option_spec(self)




    def xml_content_option_spec(self):

        localctx = TeradataSQLExpressionsParser.Xml_content_option_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_xml_content_option_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4916
            self.match(TeradataSQLExpressionsParser.OPTION)
            self.state = 4924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
            if la_ == 1:
                self.state = 4917
                _la = self._input.LA(1)
                if not(_la==274 or _la==489 or _la==649 or _la==794):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4918
                self.match(TeradataSQLExpressionsParser.ON)
                self.state = 4919
                self.match(TeradataSQLExpressionsParser.NULL)
                pass

            elif la_ == 2:
                self.state = 4920
                self.match(TeradataSQLExpressionsParser.NIL)
                self.state = 4921
                self.match(TeradataSQLExpressionsParser.ON)
                self.state = 4922
                self.match(TeradataSQLExpressionsParser.NO)
                self.state = 4923
                self.match(TeradataSQLExpressionsParser.CONTENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_respect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(TeradataSQLExpressionsParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLExpressionsParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLExpressionsParser.RESPECT, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_ignore_respect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_respect_nulls" ):
                listener.enterIgnore_respect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_respect_nulls" ):
                listener.exitIgnore_respect_nulls(self)




    def ignore_respect_nulls(self):

        localctx = TeradataSQLExpressionsParser.Ignore_respect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_ignore_respect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4926
            _la = self._input.LA(1)
            if not(_la==697 or _la==885):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4927
            self.match(TeradataSQLExpressionsParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_of_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_number_of_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_of_rows" ):
                listener.enterNumber_of_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_of_rows" ):
                listener.exitNumber_of_rows(self)




    def number_of_rows(self):

        localctx = TeradataSQLExpressionsParser.Number_of_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_number_of_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4929
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLExpressionsParser.TIES, 0)

        def LOW(self):
            return self.getToken(TeradataSQLExpressionsParser.LOW, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLExpressionsParser.HIGH, 0)

        def AVG(self):
            return self.getToken(TeradataSQLExpressionsParser.AVG, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLExpressionsParser.DENSE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_ties" ):
                listener.enterWith_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_ties" ):
                listener.exitWith_ties(self)




    def with_ties(self):

        localctx = TeradataSQLExpressionsParser.With_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4931
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 4932
            self.match(TeradataSQLExpressionsParser.TIES)
            self.state = 4933
            _la = self._input.LA(1)
            if not(_la==32 or _la==629 or _la==690 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TeradataSQLExpressionsParser.PIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def pivot_with_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_with_phraseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TeradataSQLExpressionsParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_pivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4935
            self.match(TeradataSQLExpressionsParser.PIVOT)
            self.state = 4936
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 4937
            self.pivot_spec()
            self.state = 4938
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 4940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 4939
                self.pivot_with_phrase()


            self.state = 4943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4942
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 4945
            self.alias_name()
            self.state = 4947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.state = 4946
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_agg_func_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Pivot_agg_func_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_agg_func_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FOR, 0)

        def pivot_for_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_for_phraseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_spec" ):
                listener.enterPivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_spec" ):
                listener.exitPivot_spec(self)




    def pivot_spec(self):

        localctx = TeradataSQLExpressionsParser.Pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_pivot_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4949
            self.pivot_agg_func_spec()
            self.state = 4954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4950
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4951
                self.pivot_agg_func_spec()
                self.state = 4956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4957
            self.match(TeradataSQLExpressionsParser.FOR)
            self.state = 4958
            self.pivot_for_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def pivot_with_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Pivot_with_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_with_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_with_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_phrase" ):
                listener.enterPivot_with_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_phrase" ):
                listener.exitPivot_with_phrase(self)




    def pivot_with_phrase(self):

        localctx = TeradataSQLExpressionsParser.Pivot_with_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_pivot_with_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4960
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 4961
            self.pivot_with_spec()
            self.state = 4966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4962
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 4963
                self.pivot_with_spec()
                self.state = 4968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_agg_func_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_agg_func_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_agg_func_spec" ):
                listener.enterPivot_agg_func_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_agg_func_spec" ):
                listener.exitPivot_agg_func_spec(self)




    def pivot_agg_func_spec(self):

        localctx = TeradataSQLExpressionsParser.Pivot_agg_func_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_pivot_agg_func_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4969
            self.aggregate_function()
            self.state = 4974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 4971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4970
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 4973
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def pivot_expr_spec_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Pivot_expr_spec_scalarContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_expr_spec_scalarContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def pivot_expr_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Pivot_expr_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Pivot_expr_spec_listContext,i)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_for_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_phrase" ):
                listener.enterPivot_for_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_phrase" ):
                listener.exitPivot_for_phrase(self)




    def pivot_for_phrase(self):

        localctx = TeradataSQLExpressionsParser.Pivot_for_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_pivot_for_phrase)
        self._la = 0 # Token type
        try:
            self.state = 5019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4976
                self.column_name()
                self.state = 4977
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 4978
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4979
                self.pivot_expr_spec_scalar()
                self.state = 4984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4980
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4981
                    self.pivot_expr_spec_scalar()
                    self.state = 4986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4987
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4989
                self.column_list()
                self.state = 4990
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 4991
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 4992
                self.pivot_expr_spec_scalar()
                self.state = 4997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4993
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 4994
                    self.pivot_expr_spec_scalar()
                    self.state = 4999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5000
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5002
                self.column_list()
                self.state = 5003
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 5004
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 5005
                self.pivot_expr_spec_list()
                self.state = 5010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5006
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 5007
                    self.pivot_expr_spec_list()
                    self.state = 5012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5013
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5015
                self.column_name()
                self.state = 5016
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 5017
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_with_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_spec" ):
                listener.enterPivot_with_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_spec" ):
                listener.exitPivot_with_spec(self)




    def pivot_with_spec(self):

        localctx = TeradataSQLExpressionsParser.Pivot_with_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_pivot_with_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5021
            self.aggregate_function()
            self.state = 5023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5022
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 5025
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_expr_spec_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_scalar" ):
                listener.enterPivot_expr_spec_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_scalar" ):
                listener.exitPivot_expr_spec_scalar(self)




    def pivot_expr_spec_scalar(self):

        localctx = TeradataSQLExpressionsParser.Pivot_expr_spec_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_pivot_expr_spec_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5027
            self.scalar_expr(0)
            self.state = 5032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 5029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5028
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 5031
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_expr_list_comma_separatedContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_pivot_expr_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_list" ):
                listener.enterPivot_expr_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_list" ):
                listener.exitPivot_expr_spec_list(self)




    def pivot_expr_spec_list(self):

        localctx = TeradataSQLExpressionsParser.Pivot_expr_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_pivot_expr_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5034
            self.scalar_expr_list_comma_separated()
            self.state = 5036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5035
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 5038
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TeradataSQLExpressionsParser.UNPIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unpivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLExpressionsParser.NULLS, 0)

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def INCLUDE(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TeradataSQLExpressionsParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_unpivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5040
            self.match(TeradataSQLExpressionsParser.UNPIVOT)
            self.state = 5043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==660 or _la==700:
                self.state = 5041
                _la = self._input.LA(1)
                if not(_la==660 or _la==700):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5042
                self.match(TeradataSQLExpressionsParser.NULLS)


            self.state = 5045
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5046
            self.unpivot_spec()
            self.state = 5047
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
            self.state = 5049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5048
                self.match(TeradataSQLExpressionsParser.AS)


            self.state = 5051
            self.alias_name()
            self.state = 5053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
            if la_ == 1:
                self.state = 5052
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def unpivot_column_name_spec_single(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Unpivot_column_name_spec_singleContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unpivot_column_name_spec_singleContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def unpivot_column_name_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Unpivot_column_name_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unpivot_column_name_spec_listContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_spec" ):
                listener.enterUnpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_spec" ):
                listener.exitUnpivot_spec(self)




    def unpivot_spec(self):

        localctx = TeradataSQLExpressionsParser.Unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_unpivot_spec)
        self._la = 0 # Token type
        try:
            self.state = 5085
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363, 366, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5055
                self.column_name()
                self.state = 5056
                self.match(TeradataSQLExpressionsParser.FOR)
                self.state = 5057
                self.column_name()
                self.state = 5058
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 5059
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 5060
                self.unpivot_column_name_spec_single()
                self.state = 5065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5061
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 5062
                    self.unpivot_column_name_spec_single()
                    self.state = 5067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5068
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5070
                self.column_list()
                self.state = 5071
                self.match(TeradataSQLExpressionsParser.FOR)
                self.state = 5072
                self.column_name()
                self.state = 5073
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 5074
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 5075
                self.unpivot_column_name_spec_list()
                self.state = 5080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5076
                    self.match(TeradataSQLExpressionsParser.COMMA)
                    self.state = 5077
                    self.unpivot_column_name_spec_list()
                    self.state = 5082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5083
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unpivot_column_name_spec_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_single" ):
                listener.enterUnpivot_column_name_spec_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_single" ):
                listener.exitUnpivot_column_name_spec_single(self)




    def unpivot_column_name_spec_single(self):

        localctx = TeradataSQLExpressionsParser.Unpivot_column_name_spec_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_unpivot_column_name_spec_single)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5087
            self.column_name()
            self.state = 5092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 5089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5088
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 5091
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unpivot_column_name_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_list" ):
                listener.enterUnpivot_column_name_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_list" ):
                listener.exitUnpivot_column_name_spec_list(self)




    def unpivot_column_name_spec_list(self):

        localctx = TeradataSQLExpressionsParser.Unpivot_column_name_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_unpivot_column_name_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5094
            self.column_list()
            self.state = 5099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 5096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5095
                    self.match(TeradataSQLExpressionsParser.AS)


                self.state = 5098
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_timezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(TeradataSQLExpressionsParser.AT, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCAL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLExpressionsParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_at_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_timezone" ):
                listener.enterAt_timezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_timezone" ):
                listener.exitAt_timezone(self)




    def at_timezone(self):

        localctx = TeradataSQLExpressionsParser.At_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_at_timezone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5101
            self.match(TeradataSQLExpressionsParser.AT)
            self.state = 5108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 5102
                self.match(TeradataSQLExpressionsParser.LOCAL)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 5105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
                if la_ == 1:
                    self.state = 5103
                    self.match(TeradataSQLExpressionsParser.TIME)
                    self.state = 5104
                    self.match(TeradataSQLExpressionsParser.ZONE)


                self.state = 5107
                self.scalar_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elements_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_expr_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_elements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements_list" ):
                listener.enterElements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements_list" ):
                listener.exitElements_list(self)




    def elements_list(self):

        localctx = TeradataSQLExpressionsParser.Elements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_elements_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
            if la_ == 1:
                self.state = 5110
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 5111
                self.scalar_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.OR)
            else:
                return self.getToken(TeradataSQLExpressionsParser.OR, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_scalar_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list" ):
                listener.enterScalar_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list" ):
                listener.exitScalar_expr_list(self)




    def scalar_expr_list(self):

        localctx = TeradataSQLExpressionsParser.Scalar_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_scalar_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5114
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5115
            self.scalar_expr(0)
            self.state = 5120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==1208:
                self.state = 5116
                _la = self._input.LA(1)
                if not(_la==290 or _la==1208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5117
                self.scalar_expr(0)
                self.state = 5122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5123
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_list_comma_separatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_scalar_expr_list_comma_separated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list_comma_separated" ):
                listener.enterScalar_expr_list_comma_separated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list_comma_separated" ):
                listener.exitScalar_expr_list_comma_separated(self)




    def scalar_expr_list_comma_separated(self):

        localctx = TeradataSQLExpressionsParser.Scalar_expr_list_comma_separatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_scalar_expr_list_comma_separated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5125
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5126
            self.scalar_expr(0)
            self.state = 5131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5127
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 5128
                self.scalar_expr(0)
                self.state = 5133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5134
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = TeradataSQLExpressionsParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5136
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5137
            self.column_name()
            self.state = 5142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5138
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 5139
                self.column_name()
                self.state = 5144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5145
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TeradataSQLExpressionsParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5147
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 5148
                self.with_request_modifier()


            self.state = 5151
            self.query_expr(0)
            self.state = 5152
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = TeradataSQLExpressionsParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5154
            localctx.name = self.unqualified_name()
            self.state = 5155
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TeradataSQLExpressionsParser.COLON, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = TeradataSQLExpressionsParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5157
            self.match(TeradataSQLExpressionsParser.COLON)
            self.state = 5158
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_reference = None # Variable_referenceContext
            self.name = None # Unqualified_nameContext

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_referenceContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_cursor_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_variable_reference" ):
                listener.enterCursor_variable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_variable_reference" ):
                listener.exitCursor_variable_reference(self)




    def cursor_variable_reference(self):

        localctx = TeradataSQLExpressionsParser.Cursor_variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_cursor_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5160
            localctx.cursor_reference = self.variable_reference()
            self.state = 5161
            self.match(TeradataSQLExpressionsParser.DOT_)
            self.state = 5162
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameter_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Parameter_nameContext,0)


        def COLON(self):
            return self.getToken(TeradataSQLExpressionsParser.COLON, 0)

        def AT_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_macro_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter_reference" ):
                listener.enterMacro_parameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter_reference" ):
                listener.exitMacro_parameter_reference(self)




    def macro_parameter_reference(self):

        localctx = TeradataSQLExpressionsParser.Macro_parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_macro_parameter_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5164
            _la = self._input.LA(1)
            if not(_la==1207 or _la==1210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5165
            self.parameter_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_scope_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_lower_bounds = None # Integer_literalContext
            self.array_upper_bounds = None # Integer_literalContext

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_array_scope_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_scope_reference" ):
                listener.enterArray_scope_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_scope_reference" ):
                listener.exitArray_scope_reference(self)




    def array_scope_reference(self):

        localctx = TeradataSQLExpressionsParser.Array_scope_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_array_scope_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5167
            localctx.array_lower_bounds = self.integer_literal()
            self.state = 5168
            self.match(TeradataSQLExpressionsParser.COMMA)
            self.state = 5169
            localctx.array_upper_bounds = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.EQUALS_SIGN, 0)

        def EQ(self):
            return self.getToken(TeradataSQLExpressionsParser.EQ, 0)

        def NOT_EQUALS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT_EQUALS_SIGN, 0)

        def NOT_EQUALS_SIGN_TD(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT_EQUALS_SIGN_TD, 0)

        def NE(self):
            return self.getToken(TeradataSQLExpressionsParser.NE, 0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)

        def LT_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.LT_SIGN, 0)

        def GT_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.GT_SIGN, 0)

        def LT(self):
            return self.getToken(TeradataSQLExpressionsParser.LT, 0)

        def LE_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.LE_SIGN, 0)

        def LE(self):
            return self.getToken(TeradataSQLExpressionsParser.LE, 0)

        def GT(self):
            return self.getToken(TeradataSQLExpressionsParser.GT, 0)

        def GE_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.GE_SIGN, 0)

        def GE(self):
            return self.getToken(TeradataSQLExpressionsParser.GE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TeradataSQLExpressionsParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_comparison_operator)
        try:
            self.state = 5188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5171
                self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5172
                self.match(TeradataSQLExpressionsParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5173
                self.match(TeradataSQLExpressionsParser.NOT_EQUALS_SIGN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5174
                self.match(TeradataSQLExpressionsParser.NOT_EQUALS_SIGN_TD)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5175
                self.match(TeradataSQLExpressionsParser.NE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5176
                self.match(TeradataSQLExpressionsParser.NOT)
                self.state = 5177
                self.match(TeradataSQLExpressionsParser.EQUALS_SIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5178
                self.match(TeradataSQLExpressionsParser.LT_SIGN)
                self.state = 5179
                self.match(TeradataSQLExpressionsParser.GT_SIGN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5180
                self.match(TeradataSQLExpressionsParser.LT_SIGN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5181
                self.match(TeradataSQLExpressionsParser.LT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5182
                self.match(TeradataSQLExpressionsParser.LE_SIGN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5183
                self.match(TeradataSQLExpressionsParser.LE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5184
                self.match(TeradataSQLExpressionsParser.GT_SIGN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5185
                self.match(TeradataSQLExpressionsParser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5186
                self.match(TeradataSQLExpressionsParser.GE_SIGN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5187
                self.match(TeradataSQLExpressionsParser.GE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALL, 0)

        def ANY(self):
            return self.getToken(TeradataSQLExpressionsParser.ANY, 0)

        def SOME(self):
            return self.getToken(TeradataSQLExpressionsParser.SOME, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = TeradataSQLExpressionsParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5190
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==382):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hex_byte_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hex_byte_literalContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hex_char_string_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def hex_integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Hex_integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Float_literalContext,0)


        def date_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Date_literalContext,0)


        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Time_literalContext,0)


        def timestamp_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Timestamp_literalContext,0)


        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_literalContext,0)


        def period_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Period_literalContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = TeradataSQLExpressionsParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_literal)
        try:
            self.state = 5205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5192
                self.hex_byte_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5193
                self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5194
                self.unicode_char_string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5195
                self.hex_char_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5196
                self.integer_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5197
                self.hex_integer_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5198
                self.float_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5199
                self.date_literal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5200
                self.time_literal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5201
                self.timestamp_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5202
                self.interval_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5203
                self.period_literal()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5204
                self.match(TeradataSQLExpressionsParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_byte_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_BYTE_LITERAL(self):
            return self.getToken(TeradataSQLExpressionsParser.HEX_BYTE_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_hex_byte_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_byte_literal" ):
                listener.enterHex_byte_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_byte_literal" ):
                listener.exitHex_byte_literal(self)




    def hex_byte_literal(self):

        localctx = TeradataSQLExpressionsParser.Hex_byte_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_hex_byte_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5207
            self.match(TeradataSQLExpressionsParser.HEX_BYTE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_prefixContext,0)


        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CHAR_STRING, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_string_literal" ):
                listener.enterChar_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_string_literal" ):
                listener.exitChar_string_literal(self)




    def char_string_literal(self):

        localctx = TeradataSQLExpressionsParser.Char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 5209
                self.character_set_prefix()


            self.state = 5213 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5212
                    self.match(TeradataSQLExpressionsParser.CHAR_STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 5215 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,575,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_STRING_LEADING(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE_STRING_LEADING, 0)

        def UESCAPE(self):
            return self.getToken(TeradataSQLExpressionsParser.UESCAPE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLExpressionsParser.CHAR_STRING, i)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unicode_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_char_string_literal" ):
                listener.enterUnicode_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_char_string_literal" ):
                listener.exitUnicode_char_string_literal(self)




    def unicode_char_string_literal(self):

        localctx = TeradataSQLExpressionsParser.Unicode_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_unicode_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 5217
                self.character_set_prefix()


            self.state = 5220
            self.match(TeradataSQLExpressionsParser.UNICODE_STRING_LEADING)
            self.state = 5224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1203:
                self.state = 5221
                self.match(TeradataSQLExpressionsParser.CHAR_STRING)
                self.state = 5226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5227
            self.match(TeradataSQLExpressionsParser.UESCAPE)
            self.state = 5228
            self.match(TeradataSQLExpressionsParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.HEX_STRING, 0)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_hex_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_char_string_literal" ):
                listener.enterHex_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_char_string_literal" ):
                listener.exitHex_char_string_literal(self)




    def hex_char_string_literal(self):

        localctx = TeradataSQLExpressionsParser.Hex_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_hex_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 5230
                self.character_set_prefix()


            self.state = 5233
            self.match(TeradataSQLExpressionsParser.HEX_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLExpressionsParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = TeradataSQLExpressionsParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5235
            self.match(TeradataSQLExpressionsParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(TeradataSQLExpressionsParser.HEX_INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_hex_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_integer_literal" ):
                listener.enterHex_integer_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_integer_literal" ):
                listener.exitHex_integer_literal(self)




    def hex_integer_literal(self):

        localctx = TeradataSQLExpressionsParser.Hex_integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_hex_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5237
            self.match(TeradataSQLExpressionsParser.HEX_INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(TeradataSQLExpressionsParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)




    def float_literal(self):

        localctx = TeradataSQLExpressionsParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5239
            self.match(TeradataSQLExpressionsParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CS_LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_GRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_character_set_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_prefix" ):
                listener.enterCharacter_set_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_prefix" ):
                listener.exitCharacter_set_prefix(self)




    def character_set_prefix(self):

        localctx = TeradataSQLExpressionsParser.Character_set_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_character_set_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5241
            _la = self._input.LA(1)
            if not(((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE_STRING, 0)

        def DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_date_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_literal" ):
                listener.enterDate_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_literal" ):
                listener.exitDate_literal(self)




    def date_literal(self):

        localctx = TeradataSQLExpressionsParser.Date_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_date_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 5243
                self.match(TeradataSQLExpressionsParser.DATE)


            self.state = 5246
            self.match(TeradataSQLExpressionsParser.DATE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME_STRING, 0)

        def TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_time_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_literal" ):
                listener.enterTime_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_literal" ):
                listener.exitTime_literal(self)




    def time_literal(self):

        localctx = TeradataSQLExpressionsParser.Time_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_time_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 5248
                self.match(TeradataSQLExpressionsParser.TIME)


            self.state = 5251
            self.match(TeradataSQLExpressionsParser.TIME_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timestamp_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMESTAMP_STRING, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_timestamp_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp_literal" ):
                listener.enterTimestamp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp_literal" ):
                listener.exitTimestamp_literal(self)




    def timestamp_literal(self):

        localctx = TeradataSQLExpressionsParser.Timestamp_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_timestamp_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 5253
                self.match(TeradataSQLExpressionsParser.TIMESTAMP)


            self.state = 5256
            self.match(TeradataSQLExpressionsParser.TIMESTAMP_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.INTERVAL, 0)

        def interval_qualifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_qualifierContext,0)


        def CHAR_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME_STRING, 0)

        def DATE_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE_STRING, 0)

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMESTAMP_STRING, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_interval_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_literal" ):
                listener.enterInterval_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_literal" ):
                listener.exitInterval_literal(self)




    def interval_literal(self):

        localctx = TeradataSQLExpressionsParser.Interval_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_interval_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5258
            self.match(TeradataSQLExpressionsParser.INTERVAL)
            self.state = 5260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 5259
                self.match(TeradataSQLExpressionsParser.MINUS_SIGN)


            self.state = 5262
            _la = self._input.LA(1)
            if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 39) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5263
            self.interval_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR, 0)

        def TO(self):
            return self.getToken(TeradataSQLExpressionsParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLExpressionsParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.SECOND, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_interval_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_qualifier" ):
                listener.enterInterval_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_qualifier" ):
                listener.exitInterval_qualifier(self)




    def interval_qualifier(self):

        localctx = TeradataSQLExpressionsParser.Interval_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_interval_qualifier)
        try:
            self.state = 5292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5265
                self.match(TeradataSQLExpressionsParser.YEAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5266
                self.match(TeradataSQLExpressionsParser.YEAR)
                self.state = 5267
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5268
                self.match(TeradataSQLExpressionsParser.MONTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5269
                self.match(TeradataSQLExpressionsParser.MONTH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5270
                self.match(TeradataSQLExpressionsParser.DAY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5271
                self.match(TeradataSQLExpressionsParser.DAY)
                self.state = 5272
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5273
                self.match(TeradataSQLExpressionsParser.HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5274
                self.match(TeradataSQLExpressionsParser.DAY)
                self.state = 5275
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5276
                self.match(TeradataSQLExpressionsParser.MINUTE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5277
                self.match(TeradataSQLExpressionsParser.DAY)
                self.state = 5278
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5279
                self.match(TeradataSQLExpressionsParser.SECOND)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5280
                self.match(TeradataSQLExpressionsParser.HOUR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5281
                self.match(TeradataSQLExpressionsParser.HOUR)
                self.state = 5282
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5283
                self.match(TeradataSQLExpressionsParser.MINUTE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5284
                self.match(TeradataSQLExpressionsParser.HOUR)
                self.state = 5285
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5286
                self.match(TeradataSQLExpressionsParser.SECOND)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5287
                self.match(TeradataSQLExpressionsParser.MINUTE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5288
                self.match(TeradataSQLExpressionsParser.MINUTE)
                self.state = 5289
                self.match(TeradataSQLExpressionsParser.TO)
                self.state = 5290
                self.match(TeradataSQLExpressionsParser.SECOND)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5291
                self.match(TeradataSQLExpressionsParser.SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLExpressionsParser.PERIOD, 0)

        def PERIOD_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.PERIOD_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_period_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_literal" ):
                listener.enterPeriod_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_literal" ):
                listener.exitPeriod_literal(self)




    def period_literal(self):

        localctx = TeradataSQLExpressionsParser.Period_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_period_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5294
            self.match(TeradataSQLExpressionsParser.PERIOD)
            self.state = 5295
            self.match(TeradataSQLExpressionsParser.PERIOD_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unqualified_table_name = None # Unqualified_nameContext

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.DOT_)
            else:
                return self.getToken(TeradataSQLExpressionsParser.DOT_, i)

        def unqualified_column_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_column_nameContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = TeradataSQLExpressionsParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_column_name)
        try:
            self.state = 5308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5297
                self.database_name()
                self.state = 5298
                self.match(TeradataSQLExpressionsParser.DOT_)
                self.state = 5299
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 5300
                self.match(TeradataSQLExpressionsParser.DOT_)
                self.state = 5301
                self.unqualified_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5303
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 5304
                self.match(TeradataSQLExpressionsParser.DOT_)
                self.state = 5305
                self.unqualified_column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5307
                self.unqualified_column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def SAMPLEID(self):
            return self.getToken(TeradataSQLExpressionsParser.SAMPLEID, 0)

        def ROWID(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWID, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unqualified_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_column_name" ):
                listener.enterUnqualified_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_column_name" ):
                listener.exitUnqualified_column_name(self)




    def unqualified_column_name(self):

        localctx = TeradataSQLExpressionsParser.Unqualified_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_unqualified_column_name)
        try:
            self.state = 5314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5310
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5311
                self.nonreserved_word()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5312
                self.match(TeradataSQLExpressionsParser.SAMPLEID)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5313
                self.match(TeradataSQLExpressionsParser.ROWID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = TeradataSQLExpressionsParser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_unqualified_name)
        try:
            self.state = 5318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5316
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5317
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = TeradataSQLExpressionsParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
            if la_ == 1:
                self.state = 5320
                self.database_name()
                self.state = 5321
                self.match(TeradataSQLExpressionsParser.DOT_)


            self.state = 5327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 5325
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 5326
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TeradataSQLExpressionsParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,589,self._ctx)
            if la_ == 1:
                self.state = 5329
                self.database_name()
                self.state = 5330
                self.match(TeradataSQLExpressionsParser.DOT_)


            self.state = 5336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 5334
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 5335
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = TeradataSQLExpressionsParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_procedure_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
            if la_ == 1:
                self.state = 5338
                self.database_name()
                self.state = 5339
                self.match(TeradataSQLExpressionsParser.DOT_)


            self.state = 5345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 5343
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 5344
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = TeradataSQLExpressionsParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.state = 5347
                self.database_name()
                self.state = 5348
                self.match(TeradataSQLExpressionsParser.DOT_)


            self.state = 5354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 5352
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 5353
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_macro_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_name" ):
                listener.enterMacro_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_name" ):
                listener.exitMacro_name(self)




    def macro_name(self):

        localctx = TeradataSQLExpressionsParser.Macro_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_macro_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.state = 5356
                self.database_name()
                self.state = 5357
                self.match(TeradataSQLExpressionsParser.DOT_)


            self.state = 5363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 5361
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 5362
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = TeradataSQLExpressionsParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_database_name)
        try:
            self.state = 5367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5365
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5366
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_user_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_name" ):
                listener.enterUser_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_name" ):
                listener.exitUser_name(self)




    def user_name(self):

        localctx = TeradataSQLExpressionsParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_user_name)
        try:
            self.state = 5371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5369
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5370
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLExpressionsParser.ADMIN, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = TeradataSQLExpressionsParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_role_name)
        try:
            self.state = 5376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5373
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5374
                self.match(TeradataSQLExpressionsParser.ADMIN)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5375
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_profile_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_name" ):
                listener.enterProfile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_name" ):
                listener.exitProfile_name(self)




    def profile_name(self):

        localctx = TeradataSQLExpressionsParser.Profile_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_profile_name)
        try:
            self.state = 5380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5378
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5379
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_name" ):
                listener.enterAlias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_name" ):
                listener.exitAlias_name(self)




    def alias_name(self):

        localctx = TeradataSQLExpressionsParser.Alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_alias_name)
        try:
            self.state = 5384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5382
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5383
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = TeradataSQLExpressionsParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_variable_name)
        try:
            self.state = 5388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5386
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5387
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = TeradataSQLExpressionsParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_parameter_name)
        try:
            self.state = 5392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5390
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5391
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = TeradataSQLExpressionsParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_label_name)
        try:
            self.state = 5396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5394
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5395
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_condition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_name" ):
                listener.enterCondition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_name" ):
                listener.exitCondition_name(self)




    def condition_name(self):

        localctx = TeradataSQLExpressionsParser.Condition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_condition_name)
        try:
            self.state = 5400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5398
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5399
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TeradataSQLExpressionsParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_cursor_name)
        try:
            self.state = 5404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5402
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5403
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = TeradataSQLExpressionsParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_statement_name)
        try:
            self.state = 5408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5406
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5407
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statistics_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_statistics_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatistics_name" ):
                listener.enterStatistics_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatistics_name" ):
                listener.exitStatistics_name(self)




    def statistics_name(self):

        localctx = TeradataSQLExpressionsParser.Statistics_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_statistics_name)
        try:
            self.state = 5412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5410
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5411
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_udt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_name" ):
                listener.enterUdt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_name" ):
                listener.exitUdt_name(self)




    def udt_name(self):

        localctx = TeradataSQLExpressionsParser.Udt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_udt_name)
        try:
            self.state = 5416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5414
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5415
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = TeradataSQLExpressionsParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_attribute_name)
        try:
            self.state = 5420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5418
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5419
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = TeradataSQLExpressionsParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_method_name)
        try:
            self.state = 5424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5422
                self.match(TeradataSQLExpressionsParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5423
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anchor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_SECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_MINUTE, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_HOUR, 0)

        def DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_END, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_END, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTER_END, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR_END, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.MONDAY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.TUESDAY, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.WEDNESDAY, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.THURSDAY, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.FRIDAY, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.SATURDAY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.SUNDAY, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_anchor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor_name" ):
                listener.enterAnchor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor_name" ):
                listener.exitAnchor_name(self)




    def anchor_name(self):

        localctx = TeradataSQLExpressionsParser.Anchor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_anchor_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5426
            _la = self._input.LA(1)
            if not(_la==106 or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 15) != 0) or _la==678 or ((((_la - 774)) & ~0x3f) == 0 and ((1 << (_la - 774)) & 49) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 2199023255555) != 0) or ((((_la - 949)) & ~0x3f) == 0 and ((1 << (_la - 949)) & 1152921573326323713) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & 103079215111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSIONS(self):
            return self.getToken(TeradataSQLExpressionsParser.ABORTSESSIONS, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ABSENT, 0)

        def ACCESS(self):
            return self.getToken(TeradataSQLExpressionsParser.ACCESS, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLExpressionsParser.ACCORDING, 0)

        def ACCUMULATE(self):
            return self.getToken(TeradataSQLExpressionsParser.ACCUMULATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLExpressionsParser.AG, 0)

        def AGGGEOMINTERSECTION(self):
            return self.getToken(TeradataSQLExpressionsParser.AGGGEOMINTERSECTION, 0)

        def AGGGEOMUNION(self):
            return self.getToken(TeradataSQLExpressionsParser.AGGGEOMUNION, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLDBQL, 0)

        def ALLOCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLOCATE, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLOCATION, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLOW, 0)

        def ALLPARAMS(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLPARAMS, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLExpressionsParser.ALLTDWM, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLExpressionsParser.ALWAYS, 0)

        def AMPCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.AMPCOUNT, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLExpressionsParser.ANALYSIS, 0)

        def ANCHOR(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_HOUR, 0)

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_MINUTE, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.ANCHOR_SECOND, 0)

        def APPLNAME(self):
            return self.getToken(TeradataSQLExpressionsParser.APPLNAME, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_ADD, 0)

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_AGG, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_AVG, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_COMPARE, 0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_CONCAT, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_DIV, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_EQ, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GE, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GET, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_GT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_LE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_LT, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MIN, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MOD, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_MUL, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_NE, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_SUB, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_SUM, 0)

        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_UPDATE_STRIDE, 0)

        def ASCII(self):
            return self.getToken(TeradataSQLExpressionsParser.ASCII, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ASSIGNMENT, 0)

        def ATTR(self):
            return self.getToken(TeradataSQLExpressionsParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLExpressionsParser.ATTRIBUTES, 0)

        def ATTRIBUTION(self):
            return self.getToken(TeradataSQLExpressionsParser.ATTRIBUTION, 0)

        def ATTRS(self):
            return self.getToken(TeradataSQLExpressionsParser.ATTRS, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLExpressionsParser.AUTH, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLExpressionsParser.AUTO, 0)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLExpressionsParser.AUTOTEMP, 0)

        def AVRO(self):
            return self.getToken(TeradataSQLExpressionsParser.AVRO, 0)

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.BIT_LENGTH, 0)

        def BITAND(self):
            return self.getToken(TeradataSQLExpressionsParser.BITAND, 0)

        def BITNOT(self):
            return self.getToken(TeradataSQLExpressionsParser.BITNOT, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLExpressionsParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLExpressionsParser.BITXOR, 0)

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLExpressionsParser.BLOCKCOMPRESSION, 0)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLExpressionsParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLExpressionsParser.BLOCKCOMPRESSIONLEVEL, 0)

        def BOM(self):
            return self.getToken(TeradataSQLExpressionsParser.BOM, 0)

        def BOTTOM(self):
            return self.getToken(TeradataSQLExpressionsParser.BOTTOM, 0)

        def BSON(self):
            return self.getToken(TeradataSQLExpressionsParser.BSON, 0)

        def C(self):
            return self.getToken(TeradataSQLExpressionsParser.C, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CALENDAR, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLExpressionsParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TeradataSQLExpressionsParser.CALLER, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLExpressionsParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLExpressionsParser.CAMSET_L, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLExpressionsParser.CAPTURE, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLExpressionsParser.CARDINALITY, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLExpressionsParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLExpressionsParser.CEILING, 0)

        def CHANGERATE(self):
            return self.getToken(TeradataSQLExpressionsParser.CHANGERATE, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTERISTICS, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARSET, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARSET_COLL, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLExpressionsParser.CHECKSUM, 0)

        def CHR(self):
            return self.getToken(TeradataSQLExpressionsParser.CHR, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.CLASS_ORIGIN, 0)

        def CLICKLAG(self):
            return self.getToken(TeradataSQLExpressionsParser.CLICKLAG, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLExpressionsParser.CLIENT, 0)

        def CNT(self):
            return self.getToken(TeradataSQLExpressionsParser.CNT, 0)

        def COLOCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.COLOCATE, 0)

        def COLUMNMETA(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMNMETA, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMNS, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMNSPERJOININDEX, 0)

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMAND_FUNCTION_CODE, 0)

        def COMPARISON(self):
            return self.getToken(TeradataSQLExpressionsParser.COMPARISON, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLExpressionsParser.COMPILE, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONCAT, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(TeradataSQLExpressionsParser.CONDITION, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLExpressionsParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.CONDITION_NUMBER, 0)

        def CONTAINED(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTAINED, 0)

        def CONTAINEDTOKEN(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTAINEDTOKEN, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTENT, 0)

        def CONTIGUOUS(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTIGUOUS, 0)

        def COST(self):
            return self.getToken(TeradataSQLExpressionsParser.COST, 0)

        def COSTS(self):
            return self.getToken(TeradataSQLExpressionsParser.COSTS, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLExpressionsParser.COUNTSET, 0)

        def CPP(self):
            return self.getToken(TeradataSQLExpressionsParser.CPP, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLExpressionsParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLExpressionsParser.CPUTIMENORM, 0)

        def CREATEDATASET(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATEDATASET, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATOR, 0)

        def CUME_DIST(self):
            return self.getToken(TeradataSQLExpressionsParser.CUME_DIST, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLExpressionsParser.CURTIME, 0)

        def DATA(self):
            return self.getToken(TeradataSQLExpressionsParser.DATA, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLExpressionsParser.DATASET, 0)

        def DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY_OF_CALENDAR, 0)

        def DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY_OF_MONTH, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY_OF_WEEK, 0)

        def DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY_OF_YEAR, 0)

        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYOCCURRENCE_OF_MONTH, 0)

        def DBA(self):
            return self.getToken(TeradataSQLExpressionsParser.DBA, 0)

        def DBC(self):
            return self.getToken(TeradataSQLExpressionsParser.DBC, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLExpressionsParser.DEBUG, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLExpressionsParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLExpressionsParser.DECAMSET_L, 0)

        def DECODE(self):
            return self.getToken(TeradataSQLExpressionsParser.DECODE, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.DECOMPRESS, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFINER, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLExpressionsParser.DELIMITER, 0)

        def DELTA_T(self):
            return self.getToken(TeradataSQLExpressionsParser.DELTA_T, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLExpressionsParser.DEMOGRAPHICS, 0)

        def DENIALS(self):
            return self.getToken(TeradataSQLExpressionsParser.DENIALS, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLExpressionsParser.DENSE, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLExpressionsParser.DENSE_RANK, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataSQLExpressionsParser.DESCRIBE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLExpressionsParser.DETAILED, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLExpressionsParser.DIAGNOSTICS, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLExpressionsParser.DIGITS, 0)

        def DIMENSION(self):
            return self.getToken(TeradataSQLExpressionsParser.DIMENSION, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.DOCUMENT, 0)

        def DOT(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT, 0)

        def DOWN(self):
            return self.getToken(TeradataSQLExpressionsParser.DOWN, 0)

        def DR(self):
            return self.getToken(TeradataSQLExpressionsParser.DR, 0)

        def DUPCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.DUPCOUNT, 0)

        def DUPCOUNTCUM(self):
            return self.getToken(TeradataSQLExpressionsParser.DUPCOUNTCUM, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLExpressionsParser.EBCDIC, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLExpressionsParser.EDITDISTANCE, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLExpressionsParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLExpressionsParser.ELAPSEDTIME, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ELEMENT, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLExpressionsParser.ELZS_H, 0)

        def EMITNULL(self):
            return self.getToken(TeradataSQLExpressionsParser.EMITNULL, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLExpressionsParser.EMPTY, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.EMPTY_CLOB, 0)

        def ENCODE(self):
            return self.getToken(TeradataSQLExpressionsParser.ENCODE, 0)

        def ENCODING(self):
            return self.getToken(TeradataSQLExpressionsParser.ENCODING, 0)

        def ENCRYPT(self):
            return self.getToken(TeradataSQLExpressionsParser.ENCRYPT, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLExpressionsParser.ERRORS, 0)

        def ERRORTBL(self):
            return self.getToken(TeradataSQLExpressionsParser.ERRORTBL, 0)

        def EVENTCOLUMN(self):
            return self.getToken(TeradataSQLExpressionsParser.EVENTCOLUMN, 0)

        def EXCEPTION(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCEPTION, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCL, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPORT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPORTWIDTH, 0)

        def FALSE(self):
            return self.getToken(TeradataSQLExpressionsParser.FALSE, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLExpressionsParser.FEATUREINFO, 0)

        def FILE(self):
            return self.getToken(TeradataSQLExpressionsParser.FILE, 0)

        def FILL(self):
            return self.getToken(TeradataSQLExpressionsParser.FILL, 0)

        def FILTER(self):
            return self.getToken(TeradataSQLExpressionsParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLExpressionsParser.FINAL, 0)

        def FIRST_NOTNULL(self):
            return self.getToken(TeradataSQLExpressionsParser.FIRST_NOTNULL, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataSQLExpressionsParser.FOLLOWING, 0)

        def FOREIGNFUNCTION(self):
            return self.getToken(TeradataSQLExpressionsParser.FOREIGNFUNCTION, 0)

        def FORTOKEN(self):
            return self.getToken(TeradataSQLExpressionsParser.FORTOKEN, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.FRIDAY, 0)

        def FROM_BYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.FROM_BYTES, 0)

        def FUNCTIONPARAMETER(self):
            return self.getToken(TeradataSQLExpressionsParser.FUNCTIONPARAMETER, 0)

        def G(self):
            return self.getToken(TeradataSQLExpressionsParser.G, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLExpressionsParser.GETBIT, 0)

        def GETPSFVERSION(self):
            return self.getToken(TeradataSQLExpressionsParser.GETPSFVERSION, 0)

        def GETQUERYBAND(self):
            return self.getToken(TeradataSQLExpressionsParser.GETQUERYBAND, 0)

        def GETQUERYBANDVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.GETQUERYBANDVALUE, 0)

        def GETTIMEZONEDISPLACEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.GETTIMEZONEDISPLACEMENT, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLExpressionsParser.GLOBAL, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLExpressionsParser.GLOP, 0)

        def GREATEST(self):
            return self.getToken(TeradataSQLExpressionsParser.GREATEST, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLExpressionsParser.HIGH, 0)

        def HOST(self):
            return self.getToken(TeradataSQLExpressionsParser.HOST, 0)

        def IDENTIFYDATABASE(self):
            return self.getToken(TeradataSQLExpressionsParser.IDENTIFYDATABASE, 0)

        def IDENTIFYSESSION(self):
            return self.getToken(TeradataSQLExpressionsParser.IDENTIFYSESSION, 0)

        def IDENTIFYTABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.IDENTIFYTABLE, 0)

        def IDENTIFYUSER(self):
            return self.getToken(TeradataSQLExpressionsParser.IDENTIFYUSER, 0)

        def IFP(self):
            return self.getToken(TeradataSQLExpressionsParser.IFP, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLExpressionsParser.IGNORE, 0)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLExpressionsParser.IMMEDIATELY, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLExpressionsParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLExpressionsParser.INCREMENTAL, 0)

        def INDENT(self):
            return self.getToken(TeradataSQLExpressionsParser.INDENT, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.INDEXESPERTABLE, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLExpressionsParser.INDEXMAINTMODE, 0)

        def INIT(self):
            return self.getToken(TeradataSQLExpressionsParser.INIT, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLExpressionsParser.INITCAP, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLExpressionsParser.INLINE, 0)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.INSTANTIABLE, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.INSTR, 0)

        def INTERNAL(self):
            return self.getToken(TeradataSQLExpressionsParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLExpressionsParser.INVOKER, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.IOCOUNT, 0)

        def IPARTITION(self):
            return self.getToken(TeradataSQLExpressionsParser.IPARTITION, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLExpressionsParser.ISOLATED, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLExpressionsParser.ISOLATION, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLExpressionsParser.JAVA, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLExpressionsParser.JIS_COLL, 0)

        def JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_AGG, 0)

        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_COMPOSE, 0)

        def K(self):
            return self.getToken(TeradataSQLExpressionsParser.K, 0)

        def KANJI1(self):
            return self.getToken(TeradataSQLExpressionsParser.KANJI1, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLExpressionsParser.KANJISJIS, 0)

        def KBYTE(self):
            return self.getToken(TeradataSQLExpressionsParser.KBYTE, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.KBYTES, 0)

        def KEEP(self):
            return self.getToken(TeradataSQLExpressionsParser.KEEP, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.KILOBYTES, 0)

        def LAG(self):
            return self.getToken(TeradataSQLExpressionsParser.LAG, 0)

        def LAST(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST_DAY, 0)

        def LAST_NOTNULL(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST_NOTNULL, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.LAST_VALUE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.LATIN, 0)

        def LDIFF(self):
            return self.getToken(TeradataSQLExpressionsParser.LDIFF, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLExpressionsParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLExpressionsParser.LEAST, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.LENGTH, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLExpressionsParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TeradataSQLExpressionsParser.LIST, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLExpressionsParser.LOAD, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCATE, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCKEDUSEREXPIRE, 0)

        def LOW(self):
            return self.getToken(TeradataSQLExpressionsParser.LOW, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLExpressionsParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.LTRIM, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLExpressionsParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLExpressionsParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLExpressionsParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLExpressionsParser.LZDECOMP_L, 0)

        def M(self):
            return self.getToken(TeradataSQLExpressionsParser.M, 0)

        def MAD(self):
            return self.getToken(TeradataSQLExpressionsParser.MAD, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLExpressionsParser.MANUAL, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLExpressionsParser.MAPPING, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLExpressionsParser.MATCHED, 0)

        def MAX_CHOOSE(self):
            return self.getToken(TeradataSQLExpressionsParser.MAX_CHOOSE, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXCHAR, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXINTERVALS, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXLOGONATTEMPTS, 0)

        def MAXVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXVALUE, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXVALUELENGTH, 0)

        def MEDIAN(self):
            return self.getToken(TeradataSQLExpressionsParser.MEDIAN, 0)

        def MEDIUM(self):
            return self.getToken(TeradataSQLExpressionsParser.MEDIUM, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLExpressionsParser.MEETS, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.MEMBER, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLExpressionsParser.MERGEBLOCKRATIO, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.MESSAGE_TEXT, 0)

        def MIN_CHOOSE(self):
            return self.getToken(TeradataSQLExpressionsParser.MIN_CHOOSE, 0)

        def MINCHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MINCHAR, 0)

        def MINVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.MINVALUE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLExpressionsParser.MODIFIED, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.MONDAY, 0)

        def MONITORQUERYBAND(self):
            return self.getToken(TeradataSQLExpressionsParser.MONITORQUERYBAND, 0)

        def MONITORSESSIONRATE(self):
            return self.getToken(TeradataSQLExpressionsParser.MONITORSESSIONRATE, 0)

        def MONITORVERSION(self):
            return self.getToken(TeradataSQLExpressionsParser.MONITORVERSION, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_END, 0)

        def MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_OF_CALENDAR, 0)

        def MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_OF_QUARTER, 0)

        def MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH_OF_YEAR, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHNUMBER_OF_YEAR, 0)

        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTHS_BETWEEN, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLExpressionsParser.MORE_, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLExpressionsParser.MULTINATIONAL, 0)

        def NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLExpressionsParser.NAMESPACE, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLExpressionsParser.NEVER, 0)

        def NEXT_DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.NEXT_DAY, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLExpressionsParser.NGRAM, 0)

        def NIL(self):
            return self.getToken(TeradataSQLExpressionsParser.NIL, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.NODDLTEXT, 0)

        def NODE(self):
            return self.getToken(TeradataSQLExpressionsParser.NODE, 0)

        def NONOPTCOST(self):
            return self.getToken(TeradataSQLExpressionsParser.NONOPTCOST, 0)

        def NONOPTINIT(self):
            return self.getToken(TeradataSQLExpressionsParser.NONOPTINIT, 0)

        def NONSEQUENCED(self):
            return self.getToken(TeradataSQLExpressionsParser.NONSEQUENCED, 0)

        def NORIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.NORIGHT, 0)

        def NOSEXTRACTVARFROMPATH(self):
            return self.getToken(TeradataSQLExpressionsParser.NOSEXTRACTVARFROMPATH, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLExpressionsParser.NOTATION, 0)

        def NOW(self):
            return self.getToken(TeradataSQLExpressionsParser.NOW, 0)

        def NPATH(self):
            return self.getToken(TeradataSQLExpressionsParser.NPATH, 0)

        def NTH(self):
            return self.getToken(TeradataSQLExpressionsParser.NTH, 0)

        def NULLS(self):
            return self.getToken(TeradataSQLExpressionsParser.NULLS, 0)

        def NUMFPFNS(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMFPFNS, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMTOYMINTERVAL, 0)

        def NVL(self):
            return self.getToken(TeradataSQLExpressionsParser.NVL, 0)

        def NVL2(self):
            return self.getToken(TeradataSQLExpressionsParser.NVL2, 0)

        def NVP(self):
            return self.getToken(TeradataSQLExpressionsParser.NVP, 0)

        def OA(self):
            return self.getToken(TeradataSQLExpressionsParser.OA, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLExpressionsParser.OADD_MONTHS, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.OCOUNT, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLExpressionsParser.ODELETE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLExpressionsParser.OEXISTS, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLExpressionsParser.OEXTEND, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLExpressionsParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLExpressionsParser.OLAST, 0)

        def OLD_NEW_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.OLD_NEW_TABLE, 0)

        def OLIMIT(self):
            return self.getToken(TeradataSQLExpressionsParser.OLIMIT, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.ONEXT, 0)

        def ONLINE(self):
            return self.getToken(TeradataSQLExpressionsParser.ONLINE, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPRIOR, 0)

        def OPTIONS(self):
            return self.getToken(TeradataSQLExpressionsParser.OPTIONS, 0)

        def ORDERBYVALUES(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDERBYVALUES, 0)

        def ORDERED_ANALYTIC(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDERED_ANALYTIC, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLExpressionsParser.ORDINALITY, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLExpressionsParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLExpressionsParser.OTRANSLATE, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.OTRIM, 0)

        def OVERLAYS(self):
            return self.getToken(TeradataSQLExpressionsParser.OVERLAYS, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLExpressionsParser.OWNER, 0)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLExpressionsParser.P_INTERSECT, 0)

        def P_NORMALIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.P_NORMALIZE, 0)

        def PARAMID(self):
            return self.getToken(TeradataSQLExpressionsParser.PARAMID, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLExpressionsParser.PARAMINFO, 0)

        def PARENT(self):
            return self.getToken(TeradataSQLExpressionsParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLExpressionsParser.PARTITION, 0)

        def PARTITION_L(self):
            return self.getToken(TeradataSQLExpressionsParser.PARTITION_L, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLExpressionsParser.PARTITIONED, 0)

        def PARTITIONNAMES(self):
            return self.getToken(TeradataSQLExpressionsParser.PARTITIONNAMES, 0)

        def PASS(self):
            return self.getToken(TeradataSQLExpressionsParser.PASS, 0)

        def PASSING(self):
            return self.getToken(TeradataSQLExpressionsParser.PASSING, 0)

        def PATH_GENERATOR(self):
            return self.getToken(TeradataSQLExpressionsParser.PATH_GENERATOR, 0)

        def PATH_START(self):
            return self.getToken(TeradataSQLExpressionsParser.PATH_START, 0)

        def PATH_SUMMARIZER(self):
            return self.getToken(TeradataSQLExpressionsParser.PATH_SUMMARIZER, 0)

        def PATTERN(self):
            return self.getToken(TeradataSQLExpressionsParser.PATTERN, 0)

        def PERCENTILE(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENTILE, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLExpressionsParser.PERCENTILE_DISC, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLExpressionsParser.PERIOD, 0)

        def PIVOT(self):
            return self.getToken(TeradataSQLExpressionsParser.PIVOT, 0)

        def PORTION(self):
            return self.getToken(TeradataSQLExpressionsParser.PORTION, 0)

        def POWER(self):
            return self.getToken(TeradataSQLExpressionsParser.POWER, 0)

        def PRECEDES(self):
            return self.getToken(TeradataSQLExpressionsParser.PRECEDES, 0)

        def PRECEDING(self):
            return self.getToken(TeradataSQLExpressionsParser.PRECEDING, 0)

        def PREFIX(self):
            return self.getToken(TeradataSQLExpressionsParser.PREFIX, 0)

        def PRINT(self):
            return self.getToken(TeradataSQLExpressionsParser.PRINT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLExpressionsParser.PRIOR, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLExpressionsParser.PROTECTED, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTER_END, 0)

        def QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTER_OF_CALENDAR, 0)

        def QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUARTERNUMBER_OF_YEAR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLExpressionsParser.QUERY, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLExpressionsParser.QUERY_BAND, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.QUOTECHAR, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLExpressionsParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLExpressionsParser.RANGE, 0)

        def RANGE_L(self):
            return self.getToken(TeradataSQLExpressionsParser.RANGE_L, 0)

        def RAPIDFIRE(self):
            return self.getToken(TeradataSQLExpressionsParser.RAPIDFIRE, 0)

        def RDIFF(self):
            return self.getToken(TeradataSQLExpressionsParser.RDIFF, 0)

        def READ(self):
            return self.getToken(TeradataSQLExpressionsParser.READ, 0)

        def RECALC(self):
            return self.getToken(TeradataSQLExpressionsParser.RECALC, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_INSTR, 0)

        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_REPLACE, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_SIMILAR, 0)

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_SUBSTR, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.REPLACEMENT, 0)

        def RESET(self):
            return self.getToken(TeradataSQLExpressionsParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLExpressionsParser.RESPECT, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLExpressionsParser.RESTRICTWORDS, 0)

        def RETAIN(self):
            return self.getToken(TeradataSQLExpressionsParser.RETAIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNED_SQLSTATE, 0)

        def RETURNING(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLExpressionsParser.REUSE, 0)

        def ROOT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROOT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROTATERIGHT, 0)

        def ROUND(self):
            return self.getToken(TeradataSQLExpressionsParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROW_COUNT, 0)

        def ROWIDGEN(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWIDGEN, 0)

        def ROWIDGEN2(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWIDGEN2, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLExpressionsParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLExpressionsParser.RTRIM, 0)

        def RU(self):
            return self.getToken(TeradataSQLExpressionsParser.RU, 0)

        def RULES(self):
            return self.getToken(TeradataSQLExpressionsParser.RULES, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLExpressionsParser.RULESET, 0)

        def SAMPLES(self):
            return self.getToken(TeradataSQLExpressionsParser.SAMPLES, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.SATURDAY, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLExpressionsParser.SCHEMA, 0)

        def SCRIPT(self):
            return self.getToken(TeradataSQLExpressionsParser.SCRIPT, 0)

        def SCRIPT_COMMAND(self):
            return self.getToken(TeradataSQLExpressionsParser.SCRIPT_COMMAND, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLExpressionsParser.SEARCHSPACE, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLExpressionsParser.SEARCHUIFDBPATH, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLExpressionsParser.SECURITY, 0)

        def SEED(self):
            return self.getToken(TeradataSQLExpressionsParser.SEED, 0)

        def SELF(self):
            return self.getToken(TeradataSQLExpressionsParser.SELF, 0)

        def SEQ(self):
            return self.getToken(TeradataSQLExpressionsParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLExpressionsParser.SEQUENCE, 0)

        def SEQUENCED(self):
            return self.getToken(TeradataSQLExpressionsParser.SEQUENCED, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLExpressionsParser.SERVER, 0)

        def SESSIONIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.SESSIONIZE, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLExpressionsParser.SETBIT, 0)

        def SETRESOURCERATE(self):
            return self.getToken(TeradataSQLExpressionsParser.SETRESOURCERATE, 0)

        def SETSESSIONACCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.SETSESSIONACCOUNT, 0)

        def SETSESSIONRATE(self):
            return self.getToken(TeradataSQLExpressionsParser.SETSESSIONRATE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLExpressionsParser.SHARE, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLExpressionsParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLExpressionsParser.SHIFTRIGHT, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.SIGN, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.SIZE, 0)

        def SNAPPY_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.SNAPPY_COMPRESS, 0)

        def SNAPPY_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.SNAPPY_DECOMPRESS, 0)

        def SOURCE(self):
            return self.getToken(TeradataSQLExpressionsParser.SOURCE, 0)

        def SPARSE(self):
            return self.getToken(TeradataSQLExpressionsParser.SPARSE, 0)

        def SPECCHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.SPECCHAR, 0)

        def SPL(self):
            return self.getToken(TeradataSQLExpressionsParser.SPL, 0)

        def SQLSTATE(self):
            return self.getToken(TeradataSQLExpressionsParser.SQLSTATE, 0)

        def SR(self):
            return self.getToken(TeradataSQLExpressionsParser.SR, 0)

        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLExpressionsParser.ST_GEOMETRY, 0)

        def STAT(self):
            return self.getToken(TeradataSQLExpressionsParser.STAT, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLExpressionsParser.STATIC, 0)

        def STATS(self):
            return self.getToken(TeradataSQLExpressionsParser.STATS, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.STATSUSAGE, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.STORAGE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLExpressionsParser.STRIP, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLExpressionsParser.STRTOK, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLExpressionsParser.STYLE, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLExpressionsParser.SUBBITSTR, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.SUBCLASS_ORIGIN, 0)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLExpressionsParser.SUCCEEDS, 0)

        def SUMMARYONLY(self):
            return self.getToken(TeradataSQLExpressionsParser.SUMMARYONLY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.SUNDAY, 0)

        def SYMBOLS(self):
            return self.getToken(TeradataSQLExpressionsParser.SYMBOLS, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSTEM, 0)

        def SYSTEM_TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSTEM_TIME, 0)

        def SYSTEMTEST(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSTEMTEST, 0)

        def TARGET(self):
            return self.getToken(TeradataSQLExpressionsParser.TARGET, 0)

        def TD_ARRAY2P(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_ARRAY2P, 0)

        def TD_DATASET(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DATASET, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_DAY_OF_YEAR, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_GENERAL, 0)

        def TD_GETTIMEBUCKET(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_GETTIMEBUCKET, 0)

        def TD_INTERNAL(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_INTERNAL, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_LZ_DECOMPRESS, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_QUARTER_OF_YEAR, 0)

        def TD_TIME_BUCKET_NUMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_TIME_BUCKET_NUMBER, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_YEAR_OF_CALENDAR, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLExpressionsParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLExpressionsParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLExpressionsParser.TDWMHISTORY, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TEMPORAL_TIMESTAMP, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.TEXT, 0)

        def THRESHOLDPERCENT(self):
            return self.getToken(TeradataSQLExpressionsParser.THRESHOLDPERCENT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLExpressionsParser.THROUGH, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.THURSDAY, 0)

        def TIES(self):
            return self.getToken(TeradataSQLExpressionsParser.TIES, 0)

        def TIMECODE(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMECODE, 0)

        def TIMECOLUMN(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMECOLUMN, 0)

        def TIMEOUT(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMEOUT, 0)

        def TIMESTAMPCOLUMN(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMESTAMPCOLUMN, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_BYTE, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_BYTES, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_DATE, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_DSINTERVAL, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_NUMBER, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.TO_YMINTERVAL, 0)

        def TOTOKEN(self):
            return self.getToken(TeradataSQLExpressionsParser.TOTOKEN, 0)

        def TPA(self):
            return self.getToken(TeradataSQLExpressionsParser.TPA, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSACTION_ACTIVE, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRANSUTF8TOUNICODE, 0)

        def TRUE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUNC, 0)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUST_ONLY, 0)

        def TTGRANULARITY(self):
            return self.getToken(TeradataSQLExpressionsParser.TTGRANULARITY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.TUESDAY, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLExpressionsParser.UBJSON, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLExpressionsParser.UCASE, 0)

        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLExpressionsParser.UDFSEARCHPATH, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataSQLExpressionsParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLExpressionsParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNKNOWN, 0)

        def UNPIVOT(self):
            return self.getToken(TeradataSQLExpressionsParser.UNPIVOT, 0)

        def USE(self):
            return self.getToken(TeradataSQLExpressionsParser.USE, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLExpressionsParser.UTILITYINFO, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLExpressionsParser.VARRAY, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLExpressionsParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLExpressionsParser.VERSION, 0)

        def VERSIONING(self):
            return self.getToken(TeradataSQLExpressionsParser.VERSIONING, 0)

        def WARNING(self):
            return self.getToken(TeradataSQLExpressionsParser.WARNING, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLExpressionsParser.WEDNESDAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_END, 0)

        def WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_OF_CALENDAR, 0)

        def WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_OF_MONTH, 0)

        def WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK_OF_YEAR, 0)

        def WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKDAY_OF_MONTH, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEKNUMBER_OF_YEAR, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLExpressionsParser.WHITESPACE, 0)

        def WINDOWSIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.WINDOWSIZE, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLExpressionsParser.WITHIN, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLExpressionsParser.WORKLOAD, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLExpressionsParser.WRITE, 0)

        def XML(self):
            return self.getToken(TeradataSQLExpressionsParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLATTRIBUTES, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLCOMMENT, 0)

        def XMLCONCAT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLCONCAT, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLDECLARATION, 0)

        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLELEMENT, 0)

        def XMLFOREST(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLQUERY, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLSCHEMA, 0)

        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTABLE, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTEXT, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTYPE, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLVALIDATE, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR_END, 0)

        def YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR_OF_CALENDAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEARNUMBER_OF_CALENDAR, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.ZLIB, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLExpressionsParser.BUCKET, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMITTED, 0)

        def CREATEXML(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATEXML, 0)

        def CS_LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.CS_GRAPHIC, 0)

        def CSV(self):
            return self.getToken(TeradataSQLExpressionsParser.CSV, 0)

        def CSVLD(self):
            return self.getToken(TeradataSQLExpressionsParser.CSVLD, 0)

        def DATASIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATASIZE, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYOFMONTH, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLExpressionsParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFINITION, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLExpressionsParser.DELETED, 0)

        def FAST(self):
            return self.getToken(TeradataSQLExpressionsParser.FAST, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLExpressionsParser.LISTAGG, 0)

        def PATH(self):
            return self.getToken(TeradataSQLExpressionsParser.PATH, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.REGEXP_SPLIT_TO_TABLE, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLExpressionsParser.REVERSE, 0)

        def SAS(self):
            return self.getToken(TeradataSQLExpressionsParser.SAS, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.SQLTABLE, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.STRTOK_SPLIT_TO_TABLE, 0)

        def SYSLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSLIB, 0)

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSUDTLIB, 0)

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_SERVER_DB, 0)

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_SYSFNLIB, 0)

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_SYSXML, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMEDATEWZCONTROL, 0)

        def TRUST(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUST, 0)

        def TRYCAST(self):
            return self.getToken(TeradataSQLExpressionsParser.TRYCAST, 0)

        def UDT(self):
            return self.getToken(TeradataSQLExpressionsParser.UDT, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.USAGE, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLExpressionsParser.VARIANT, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLExpressionsParser.WEEK, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLExpressionsParser.WIDTH, 0)

        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLPUBLISH_STREAM, 0)

        def XMLSPLIT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLSPLIT, 0)

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE_TO_LOCALE, 0)

        def ASBSON(self):
            return self.getToken(TeradataSQLExpressionsParser.ASBSON, 0)

        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.ASBSONTEXT, 0)

        def COMBINE(self):
            return self.getToken(TeradataSQLExpressionsParser.COMBINE, 0)

        def EXISTVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXISTVALUE, 0)

        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONEXTRACT, 0)

        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONEXTRACTVALUE, 0)

        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONEXTRACTLARGEVALUE, 0)

        def KEYCOUNT(self):
            return self.getToken(TeradataSQLExpressionsParser.KEYCOUNT, 0)

        def METADATA(self):
            return self.getToken(TeradataSQLExpressionsParser.METADATA, 0)

        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.STORAGE_SIZE, 0)

        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATESCHEMABASEDXML, 0)

        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLExpressionsParser.CREATENONSCHEMABASEDXML, 0)

        def EXISTSNODE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXISTSNODE, 0)

        def ISCONTENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ISCONTENT, 0)

        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLExpressionsParser.ISDOCUMENT, 0)

        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLExpressionsParser.ISSCHEMAVALID, 0)

        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLExpressionsParser.ISSCHEMAVALIDATED, 0)

        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLEXTRACT, 0)

        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTRANSFORM, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLExpressionsParser.PROC_ID, 0)

        def LOCATION(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCATION, 0)

        def PAYLOAD(self):
            return self.getToken(TeradataSQLExpressionsParser.PAYLOAD, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUSTED, 0)

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLExpressionsParser.PATHPATTERN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLExpressionsParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLExpressionsParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLExpressionsParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLExpressionsParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.STRIP_ENCLOSING_CHAR, 0)

        def RLS(self):
            return self.getToken(TeradataSQLExpressionsParser.RLS, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLExpressionsParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLExpressionsParser.MULTIPLE, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLExpressionsParser.TS_DECOMPRESS, 0)

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLExpressionsParser.CONTIGUOUSMAPAMPS, 0)

        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLExpressionsParser.SPARSEMAPAMPS, 0)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLExpressionsParser.SPARSETABLEAMPS, 0)

        def UNNEST(self):
            return self.getToken(TeradataSQLExpressionsParser.UNNEST, 0)

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLExpressionsParser.CALCMATRIX, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLExpressionsParser.PHRASE, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLExpressionsParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL_HANDLING, 0)

        def READ_NOS(self):
            return self.getToken(TeradataSQLExpressionsParser.READ_NOS, 0)

        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLExpressionsParser.SAMPLE_PERC, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLExpressionsParser.FULLSCAN, 0)

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_UNPIVOT, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLExpressionsParser.VALUE_COLUMNS, 0)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLExpressionsParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMN_LIST, 0)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLExpressionsParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE_NULLS, 0)

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLExpressionsParser.WRITE_NOS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLExpressionsParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLExpressionsParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLExpressionsParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLExpressionsParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLExpressionsParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLExpressionsParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLExpressionsParser.COMPRESSION, 0)

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.ARRAY_TO_JSON, 0)

        def BSON_CHECK(self):
            return self.getToken(TeradataSQLExpressionsParser.BSON_CHECK, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLExpressionsParser.GEOJSONFROMGEOM, 0)

        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLExpressionsParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONGETVALUE, 0)

        def JSONMETADATA(self):
            return self.getToken(TeradataSQLExpressionsParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.NVP2JSON, 0)

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_JSONSHRED, 0)

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_KEYS, 0)

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON_TABLE, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLExpressionsParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLExpressionsParser.QUOTES, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLExpressionsParser.ROWEXPR, 0)

        def COLEXPR(self):
            return self.getToken(TeradataSQLExpressionsParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLExpressionsParser.RETURNTYPES, 0)

        def NOCASE(self):
            return self.getToken(TeradataSQLExpressionsParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLExpressionsParser.TRUNCATE, 0)

        def LINK(self):
            return self.getToken(TeradataSQLExpressionsParser.LINK, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_nonreserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreserved_word" ):
                listener.enterNonreserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreserved_word" ):
                listener.exitNonreserved_word(self)




    def nonreserved_word(self):

        localctx = TeradataSQLExpressionsParser.Nonreserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_nonreserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5428
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TeradataSQLExpressionsParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_data_type)
        try:
            self.state = 5436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,612,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5430
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5431
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5432
                self.binary_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5433
                self.datetime_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5434
                self.period_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5435
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Precisionless_char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_variable_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_data_type" ):
                listener.enterVariable_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_data_type" ):
                listener.exitVariable_data_type(self)




    def variable_data_type(self):

        localctx = TeradataSQLExpressionsParser.Variable_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_variable_data_type)
        try:
            self.state = 5445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5438
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5439
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5440
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5441
                self.binary_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5442
                self.datetime_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5443
                self.period_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5444
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Precisionless_char_data_typeContext,0)


        def lob_as_locator_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Lob_as_locator_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Udt_typeContext,0)


        def TD_ANYTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.TD_ANYTYPE, 0)

        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.VARIANT_TYPE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_external_function_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_data_type" ):
                listener.enterExternal_function_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_data_type" ):
                listener.exitExternal_function_data_type(self)




    def external_function_data_type(self):

        localctx = TeradataSQLExpressionsParser.External_function_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_external_function_data_type)
        try:
            self.state = 5457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5447
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5448
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5449
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5450
                self.lob_as_locator_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5451
                self.binary_data_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5452
                self.datetime_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5453
                self.period_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5454
                self.udt_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5455
                self.match(TeradataSQLExpressionsParser.TD_ANYTYPE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5456
                self.match(TeradataSQLExpressionsParser.VARIANT_TYPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.scale = None # Integer_literalContext

        def BYTEINT(self):
            return self.getToken(TeradataSQLExpressionsParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataSQLExpressionsParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLExpressionsParser.INTEGER, 0)

        def INT(self):
            return self.getToken(TeradataSQLExpressionsParser.INT, 0)

        def BIGINT(self):
            return self.getToken(TeradataSQLExpressionsParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataSQLExpressionsParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataSQLExpressionsParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMERIC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def FLOAT(self):
            return self.getToken(TeradataSQLExpressionsParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataSQLExpressionsParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(TeradataSQLExpressionsParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TeradataSQLExpressionsParser.PRECISION, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLExpressionsParser.NUMBER, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_numeric_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_data_type" ):
                listener.enterNumeric_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_data_type" ):
                listener.exitNumeric_data_type(self)




    def numeric_data_type(self):

        localctx = TeradataSQLExpressionsParser.Numeric_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_numeric_data_type)
        self._la = 0 # Token type
        try:
            self.state = 5501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5459
                self.match(TeradataSQLExpressionsParser.BYTEINT)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5460
                self.match(TeradataSQLExpressionsParser.SMALLINT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5461
                self.match(TeradataSQLExpressionsParser.INTEGER)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5462
                self.match(TeradataSQLExpressionsParser.INT)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5463
                self.match(TeradataSQLExpressionsParser.BIGINT)
                pass
            elif token in [108, 109, 278]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5464
                _la = self._input.LA(1)
                if not(_la==108 or _la==109 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
                if la_ == 1:
                    self.state = 5465
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 5467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 5466
                        localctx.precision = self.integer_literal()


                    self.state = 5471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5469
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 5470
                        localctx.scale = self.integer_literal()


                    self.state = 5473
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


                pass
            elif token in [124, 157, 323]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5486
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157]:
                    self.state = 5476
                    self.match(TeradataSQLExpressionsParser.FLOAT)
                    self.state = 5481
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
                    if la_ == 1:
                        self.state = 5477
                        self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                        self.state = 5478
                        localctx.precision = self.integer_literal()
                        self.state = 5479
                        self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


                    pass
                elif token in [323]:
                    self.state = 5483
                    self.match(TeradataSQLExpressionsParser.REAL)
                    pass
                elif token in [124]:
                    self.state = 5484
                    self.match(TeradataSQLExpressionsParser.DOUBLE)
                    self.state = 5485
                    self.match(TeradataSQLExpressionsParser.PRECISION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5488
                self.match(TeradataSQLExpressionsParser.NUMBER)
                self.state = 5499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
                if la_ == 1:
                    self.state = 5489
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 5492
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1194]:
                        self.state = 5490
                        localctx.precision = self.integer_literal()
                        pass
                    elif token in [1219]:
                        self.state = 5491
                        self.match(TeradataSQLExpressionsParser.MUL_SIGN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5494
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 5495
                        localctx.scale = self.integer_literal()


                    self.state = 5498
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Type_precisionContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_phraseContext,0)


        def GRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.GRAPHIC, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.VARCHAR, 0)

        def VARYING(self):
            return self.getToken(TeradataSQLExpressionsParser.VARYING, 0)

        def LONG(self):
            return self.getToken(TeradataSQLExpressionsParser.LONG, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.VARGRAPHIC, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOB, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLExpressionsParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Max_length_k_m_gContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_data_type" ):
                listener.enterChar_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_data_type" ):
                listener.exitChar_data_type(self)




    def char_data_type(self):

        localctx = TeradataSQLExpressionsParser.Char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 5543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,632,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5503
                _la = self._input.LA(1)
                if not(_la==52 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,624,self._ctx)
                if la_ == 1:
                    self.state = 5504
                    self.type_precision()


                self.state = 5508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,625,self._ctx)
                if la_ == 1:
                    self.state = 5507
                    self.character_set_phrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5510
                self.match(TeradataSQLExpressionsParser.GRAPHIC)
                self.state = 5512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,626,self._ctx)
                if la_ == 1:
                    self.state = 5511
                    self.type_precision()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5519
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [464]:
                    self.state = 5514
                    self.match(TeradataSQLExpressionsParser.VARCHAR)
                    pass
                elif token in [55]:
                    self.state = 5515
                    self.match(TeradataSQLExpressionsParser.CHARACTER)
                    self.state = 5516
                    self.match(TeradataSQLExpressionsParser.VARYING)
                    pass
                elif token in [52]:
                    self.state = 5517
                    self.match(TeradataSQLExpressionsParser.CHAR)
                    self.state = 5518
                    self.match(TeradataSQLExpressionsParser.VARYING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5521
                self.type_precision()
                self.state = 5523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
                if la_ == 1:
                    self.state = 5522
                    self.character_set_phrase()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5525
                self.match(TeradataSQLExpressionsParser.LONG)
                self.state = 5526
                self.match(TeradataSQLExpressionsParser.VARCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5527
                self.match(TeradataSQLExpressionsParser.VARGRAPHIC)
                self.state = 5528
                self.type_precision()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5529
                self.match(TeradataSQLExpressionsParser.LONG)
                self.state = 5530
                self.match(TeradataSQLExpressionsParser.VARGRAPHIC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5535
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 5531
                    self.match(TeradataSQLExpressionsParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 5532
                    self.match(TeradataSQLExpressionsParser.CHARACTER)
                    self.state = 5533
                    self.match(TeradataSQLExpressionsParser.LARGE)
                    self.state = 5534
                    self.match(TeradataSQLExpressionsParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,630,self._ctx)
                if la_ == 1:
                    self.state = 5537
                    self.max_length_k_m_g()


                self.state = 5541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
                if la_ == 1:
                    self.state = 5540
                    self.latin_unicode_character_set_phrase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precisionless_char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.VARCHAR, 0)

        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_phraseContext,0)


        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.VARGRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_precisionless_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecisionless_char_data_type" ):
                listener.enterPrecisionless_char_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecisionless_char_data_type" ):
                listener.exitPrecisionless_char_data_type(self)




    def precisionless_char_data_type(self):

        localctx = TeradataSQLExpressionsParser.Precisionless_char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_precisionless_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 5553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5545
                self.match(TeradataSQLExpressionsParser.VARCHAR)
                self.state = 5547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 5546
                    self.character_set_phrase()


                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5549
                self.match(TeradataSQLExpressionsParser.VARGRAPHIC)
                self.state = 5551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 5550
                    self.character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_as_locator_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCATOR, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOB, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTER, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLExpressionsParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLExpressionsParser.BINARY, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_lob_as_locator_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_as_locator_data_type" ):
                listener.enterLob_as_locator_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_as_locator_data_type" ):
                listener.exitLob_as_locator_data_type(self)




    def lob_as_locator_data_type(self):

        localctx = TeradataSQLExpressionsParser.Lob_as_locator_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_lob_as_locator_data_type)
        try:
            self.state = 5571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5559
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 5555
                    self.match(TeradataSQLExpressionsParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 5556
                    self.match(TeradataSQLExpressionsParser.CHARACTER)
                    self.state = 5557
                    self.match(TeradataSQLExpressionsParser.LARGE)
                    self.state = 5558
                    self.match(TeradataSQLExpressionsParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5561
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 5562
                self.match(TeradataSQLExpressionsParser.LOCATOR)
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 5563
                    self.match(TeradataSQLExpressionsParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 5564
                    self.match(TeradataSQLExpressionsParser.BINARY)
                    self.state = 5565
                    self.match(TeradataSQLExpressionsParser.LARGE)
                    self.state = 5566
                    self.match(TeradataSQLExpressionsParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5569
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 5570
                self.match(TeradataSQLExpressionsParser.LOCATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(TeradataSQLExpressionsParser.BYTE, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Type_precisionContext,0)


        def VARBYTE(self):
            return self.getToken(TeradataSQLExpressionsParser.VARBYTE, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLExpressionsParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLExpressionsParser.BINARY, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLExpressionsParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLExpressionsParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Max_length_k_m_gContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_binary_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_data_type" ):
                listener.enterBinary_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_data_type" ):
                listener.exitBinary_data_type(self)




    def binary_data_type(self):

        localctx = TeradataSQLExpressionsParser.Binary_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_binary_data_type)
        try:
            self.state = 5588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5573
                self.match(TeradataSQLExpressionsParser.BYTE)
                self.state = 5575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
                if la_ == 1:
                    self.state = 5574
                    self.type_precision()


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5577
                self.match(TeradataSQLExpressionsParser.VARBYTE)
                self.state = 5578
                self.type_precision()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 5579
                    self.match(TeradataSQLExpressionsParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 5580
                    self.match(TeradataSQLExpressionsParser.BINARY)
                    self.state = 5581
                    self.match(TeradataSQLExpressionsParser.LARGE)
                    self.state = 5582
                    self.match(TeradataSQLExpressionsParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,641,self._ctx)
                if la_ == 1:
                    self.state = 5585
                    self.max_length_k_m_g()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE, 0)

        def TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLExpressionsParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Interval_period_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_datetime_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_type" ):
                listener.enterDatetime_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_type" ):
                listener.exitDatetime_type(self)




    def datetime_type(self):

        localctx = TeradataSQLExpressionsParser.Datetime_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_datetime_type)
        try:
            self.state = 5607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5590
                self.match(TeradataSQLExpressionsParser.DATE)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5591
                self.match(TeradataSQLExpressionsParser.TIME)
                self.state = 5593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 5592
                    self.type_precision()


                self.state = 5596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
                if la_ == 1:
                    self.state = 5595
                    self.with_time_zone()


                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5598
                self.match(TeradataSQLExpressionsParser.TIMESTAMP)
                self.state = 5600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
                if la_ == 1:
                    self.state = 5599
                    self.type_precision()


                self.state = 5603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                if la_ == 1:
                    self.state = 5602
                    self.with_time_zone()


                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5605
                self.match(TeradataSQLExpressionsParser.INTERVAL)
                self.state = 5606
                self.interval_period_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLExpressionsParser.PERIOD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLExpressionsParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_period_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_type" ):
                listener.enterPeriod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_type" ):
                listener.exitPeriod_type(self)




    def period_type(self):

        localctx = TeradataSQLExpressionsParser.Period_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_period_type)
        self._la = 0 # Token type
        try:
            self.state = 5633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5609
                self.match(TeradataSQLExpressionsParser.PERIOD)
                self.state = 5610
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 5611
                self.match(TeradataSQLExpressionsParser.DATE)
                self.state = 5612
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5613
                self.match(TeradataSQLExpressionsParser.PERIOD)
                self.state = 5614
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 5615
                self.match(TeradataSQLExpressionsParser.TIME)
                self.state = 5617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 5616
                    self.type_precision()


                self.state = 5620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 5619
                    self.with_time_zone()


                self.state = 5622
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5623
                self.match(TeradataSQLExpressionsParser.PERIOD)
                self.state = 5624
                self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                self.state = 5625
                self.match(TeradataSQLExpressionsParser.TIMESTAMP)
                self.state = 5627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 5626
                    self.type_precision()


                self.state = 5630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 5629
                    self.with_time_zone()


                self.state = 5632
                self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TeradataSQLExpressionsParser.XML, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLExpressionsParser.XMLTYPE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SysudtlibContext,0)


        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Max_length_k_m_gContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Inline_lengthContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLExpressionsParser.JSON, 0)

        def max_length_k_m(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Max_length_k_mContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Latin_unicode_character_set_phraseContext,0)


        def json_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Json_storage_formatContext,0)


        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLExpressionsParser.ST_GEOMETRY, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLExpressionsParser.DATASET, 0)

        def dataset_storage_format_clause(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Dataset_storage_format_clauseContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_udt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_type" ):
                listener.enterUdt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_type" ):
                listener.exitUdt_type(self)




    def udt_type(self):

        localctx = TeradataSQLExpressionsParser.Udt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_udt_type)
        self._la = 0 # Token type
        try:
            self.state = 5684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 5635
                    self.sysudtlib()


                self.state = 5638
                _la = self._input.LA(1)
                if not(_la==1042 or _la==1059):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5640
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
                if la_ == 1:
                    self.state = 5639
                    self.max_length_k_m_g()


                self.state = 5643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,655,self._ctx)
                if la_ == 1:
                    self.state = 5642
                    self.inline_length()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 5645
                    self.sysudtlib()


                self.state = 5648
                self.match(TeradataSQLExpressionsParser.JSON)
                self.state = 5650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
                if la_ == 1:
                    self.state = 5649
                    self.max_length_k_m()


                self.state = 5653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
                if la_ == 1:
                    self.state = 5652
                    self.inline_length()


                self.state = 5657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
                if la_ == 1:
                    self.state = 5655
                    self.latin_unicode_character_set_phrase()

                elif la_ == 2:
                    self.state = 5656
                    self.json_storage_format()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 5659
                    self.sysudtlib()


                self.state = 5662
                self.match(TeradataSQLExpressionsParser.ST_GEOMETRY)
                self.state = 5664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 5663
                    self.max_length_k_m()


                self.state = 5667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5666
                    self.inline_length()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 5669
                    self.sysudtlib()


                self.state = 5672
                self.match(TeradataSQLExpressionsParser.DATASET)
                self.state = 5674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 5673
                    self.max_length_k_m()


                self.state = 5677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709:
                    self.state = 5676
                    self.inline_length()


                self.state = 5679
                self.dataset_storage_format_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
                if la_ == 1:
                    self.state = 5680
                    self.sysudtlib()


                self.state = 5683
                self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Format_phraseContext,0)


        def column_naming_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_naming_phraseContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_time_zoneContext,0)


        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.At_timezoneContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Character_set_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Default_value_control_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_data_type_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_attribute" ):
                listener.enterData_type_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_attribute" ):
                listener.exitData_type_attribute(self)




    def data_type_attribute(self):

        localctx = TeradataSQLExpressionsParser.Data_type_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_data_type_attribute)
        try:
            self.state = 5694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5686
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5687
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5688
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5689
                self.column_naming_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5690
                self.with_time_zone()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5691
                self.at_timezone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5692
                self.character_set_phrase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5693
                self.default_value_control_phrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_control_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TeradataSQLExpressionsParser.NULL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFAULT, 0)

        def default_value(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Default_valueContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_default_value_control_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_control_phrase" ):
                listener.enterDefault_value_control_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_control_phrase" ):
                listener.exitDefault_value_control_phrase(self)




    def default_value_control_phrase(self):

        localctx = TeradataSQLExpressionsParser.Default_value_control_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_default_value_control_phrase)
        self._la = 0 # Token type
        try:
            self.state = 5704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 5696
                    self.match(TeradataSQLExpressionsParser.NOT)


                self.state = 5699
                self.match(TeradataSQLExpressionsParser.NULL)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5700
                self.match(TeradataSQLExpressionsParser.DEFAULT)
                self.state = 5701
                self.default_value()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5702
                self.match(TeradataSQLExpressionsParser.WITH)
                self.state = 5703
                self.match(TeradataSQLExpressionsParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Float_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLExpressionsParser.PLUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.LiteralContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Builtin_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TeradataSQLExpressionsParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 5712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5706
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5707
                self.float_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5708
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5709
                self.integer_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5710
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5711
                self.builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_naming_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_column_naming_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_naming_phrase" ):
                listener.enterColumn_naming_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_naming_phrase" ):
                listener.exitColumn_naming_phrase(self)




    def column_naming_phrase(self):

        localctx = TeradataSQLExpressionsParser.Column_naming_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_column_naming_phrase)
        try:
            self.state = 5716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [262]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5714
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5715
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysudtlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLExpressionsParser.SYSUDTLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLExpressionsParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_sysudtlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysudtlib" ):
                listener.enterSysudtlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysudtlib" ):
                listener.exitSysudtlib(self)




    def sysudtlib(self):

        localctx = TeradataSQLExpressionsParser.SysudtlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_sysudtlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5718
            self.match(TeradataSQLExpressionsParser.SYSUDTLIB)
            self.state = 5719
            self.match(TeradataSQLExpressionsParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_period_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLExpressionsParser.YEAR, 0)

        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Type_precisionContext,i)


        def TO(self):
            return self.getToken(TeradataSQLExpressionsParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLExpressionsParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLExpressionsParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLExpressionsParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLExpressionsParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLExpressionsParser.SECOND, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_interval_period_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_period_spec" ):
                listener.enterInterval_period_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_period_spec" ):
                listener.exitInterval_period_spec(self)




    def interval_period_spec(self):

        localctx = TeradataSQLExpressionsParser.Interval_period_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_interval_period_spec)
        self._la = 0 # Token type
        try:
            self.state = 5783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [478]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5721
                self.match(TeradataSQLExpressionsParser.YEAR)
                self.state = 5723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
                if la_ == 1:
                    self.state = 5722
                    self.type_precision()


                self.state = 5727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
                if la_ == 1:
                    self.state = 5725
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5726
                    self.match(TeradataSQLExpressionsParser.MONTH)


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5729
                self.match(TeradataSQLExpressionsParser.MONTH)
                self.state = 5731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,675,self._ctx)
                if la_ == 1:
                    self.state = 5730
                    self.type_precision()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5733
                self.match(TeradataSQLExpressionsParser.DAY)
                self.state = 5735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,676,self._ctx)
                if la_ == 1:
                    self.state = 5734
                    self.type_precision()


                self.state = 5746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,678,self._ctx)
                if la_ == 1:
                    self.state = 5737
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5738
                    self.match(TeradataSQLExpressionsParser.HOUR)

                elif la_ == 2:
                    self.state = 5739
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5740
                    self.match(TeradataSQLExpressionsParser.MINUTE)

                elif la_ == 3:
                    self.state = 5741
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5742
                    self.match(TeradataSQLExpressionsParser.SECOND)
                    self.state = 5744
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,677,self._ctx)
                    if la_ == 1:
                        self.state = 5743
                        self.type_precision()




                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5748
                self.match(TeradataSQLExpressionsParser.HOUR)
                self.state = 5750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,679,self._ctx)
                if la_ == 1:
                    self.state = 5749
                    self.type_precision()


                self.state = 5759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,681,self._ctx)
                if la_ == 1:
                    self.state = 5752
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5753
                    self.match(TeradataSQLExpressionsParser.MINUTE)

                elif la_ == 2:
                    self.state = 5754
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5755
                    self.match(TeradataSQLExpressionsParser.SECOND)
                    self.state = 5757
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,680,self._ctx)
                    if la_ == 1:
                        self.state = 5756
                        self.type_precision()




                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5761
                self.match(TeradataSQLExpressionsParser.MINUTE)
                self.state = 5763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,682,self._ctx)
                if la_ == 1:
                    self.state = 5762
                    self.type_precision()


                self.state = 5770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
                if la_ == 1:
                    self.state = 5765
                    self.match(TeradataSQLExpressionsParser.TO)
                    self.state = 5766
                    self.match(TeradataSQLExpressionsParser.SECOND)
                    self.state = 5768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,683,self._ctx)
                    if la_ == 1:
                        self.state = 5767
                        self.type_precision()




                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5772
                self.match(TeradataSQLExpressionsParser.SECOND)
                self.state = 5781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
                if la_ == 1:
                    self.state = 5773
                    self.match(TeradataSQLExpressionsParser.OPEN_PAR)
                    self.state = 5774
                    localctx.precision = self.integer_literal()
                    self.state = 5777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5775
                        self.match(TeradataSQLExpressionsParser.COMMA)
                        self.state = 5776
                        localctx.fractional_precision = self.integer_literal()


                    self.state = 5779
                    self.match(TeradataSQLExpressionsParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_precisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_type_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_precision" ):
                listener.enterType_precision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_precision" ):
                listener.exitType_precision(self)




    def type_precision(self):

        localctx = TeradataSQLExpressionsParser.Type_precisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_type_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5785
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5786
            localctx.precision = self.integer_literal()
            self.state = 5787
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_m_gContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLExpressionsParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLExpressionsParser.M, 0)

        def G(self):
            return self.getToken(TeradataSQLExpressionsParser.G, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_max_length_k_m_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m_g" ):
                listener.enterMax_length_k_m_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m_g" ):
                listener.exitMax_length_k_m_g(self)




    def max_length_k_m_g(self):

        localctx = TeradataSQLExpressionsParser.Max_length_k_m_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_max_length_k_m_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5789
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5790
            localctx.max_length = self.integer_literal()
            self.state = 5792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==681 or _la==723 or _la==752:
                self.state = 5791
                _la = self._input.LA(1)
                if not(_la==681 or _la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5794
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_mContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLExpressionsParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLExpressionsParser.M, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_max_length_k_m

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m" ):
                listener.enterMax_length_k_m(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m" ):
                listener.exitMax_length_k_m(self)




    def max_length_k_m(self):

        localctx = TeradataSQLExpressionsParser.Max_length_k_mContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_max_length_k_m)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5796
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5797
            localctx.max_length = self.integer_literal()
            self.state = 5799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==723 or _la==752:
                self.state = 5798
                _la = self._input.LA(1)
                if not(_la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5801
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLExpressionsParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE, 0)

        def GRAPHIC(self):
            return self.getToken(TeradataSQLExpressionsParser.GRAPHIC, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLExpressionsParser.KANJISJIS, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_phrase" ):
                listener.enterCharacter_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_phrase" ):
                listener.exitCharacter_set_phrase(self)




    def character_set_phrase(self):

        localctx = TeradataSQLExpressionsParser.Character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5803
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5804
            self.match(TeradataSQLExpressionsParser.SET)
            self.state = 5805
            _la = self._input.LA(1)
            if not(_la==173 or _la==725 or _la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uppercase_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPPERCASE(self):
            return self.getToken(TeradataSQLExpressionsParser.UPPERCASE, 0)

        def UC(self):
            return self.getToken(TeradataSQLExpressionsParser.UC, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_uppercase_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUppercase_phrase" ):
                listener.enterUppercase_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUppercase_phrase" ):
                listener.exitUppercase_phrase(self)




    def uppercase_phrase(self):

        localctx = TeradataSQLExpressionsParser.Uppercase_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_uppercase_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5807
            _la = self._input.LA(1)
            if not(_la==438 or _la==455):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Casespecific_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.not_ = None # Token

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLExpressionsParser.CASESPECIFIC, 0)

        def CS(self):
            return self.getToken(TeradataSQLExpressionsParser.CS, 0)

        def NOT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOT, 0)

        def CARET(self):
            return self.getToken(TeradataSQLExpressionsParser.CARET, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_casespecific_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasespecific_phrase" ):
                listener.enterCasespecific_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasespecific_phrase" ):
                listener.exitCasespecific_phrase(self)




    def casespecific_phrase(self):

        localctx = TeradataSQLExpressionsParser.Casespecific_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_casespecific_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==1211:
                self.state = 5809
                localctx.not_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    localctx.not_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5812
            _la = self._input.LA(1)
            if not(_la==49 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Char_string_literalContext
            self.date_format = None # Token
            self.time_format = None # Token

        def FORMAT(self):
            return self.getToken(TeradataSQLExpressionsParser.FORMAT, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def DATE_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.DATE_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_format_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_phrase" ):
                listener.enterFormat_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_phrase" ):
                listener.exitFormat_phrase(self)




    def format_phrase(self):

        localctx = TeradataSQLExpressionsParser.Format_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_format_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5814
            self.match(TeradataSQLExpressionsParser.FORMAT)
            self.state = 5818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 5815
                localctx.format_ = self.char_string_literal()
                pass
            elif token in [1198]:
                self.state = 5816
                localctx.date_format = self.match(TeradataSQLExpressionsParser.DATE_STRING)
                pass
            elif token in [1199]:
                self.state = 5817
                localctx.time_format = self.match(TeradataSQLExpressionsParser.TIME_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def TITLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TITLE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle_phrase" ):
                listener.enterTitle_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle_phrase" ):
                listener.exitTitle_phrase(self)




    def title_phrase(self):

        localctx = TeradataSQLExpressionsParser.Title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5820
            self.match(TeradataSQLExpressionsParser.TITLE)
            self.state = 5821
            localctx.title = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMED(self):
            return self.getToken(TeradataSQLExpressionsParser.NAMED, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_named_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_phrase" ):
                listener.enterNamed_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_phrase" ):
                listener.exitNamed_phrase(self)




    def named_phrase(self):

        localctx = TeradataSQLExpressionsParser.Named_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_named_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5823
            self.match(TeradataSQLExpressionsParser.NAMED)
            self.state = 5824
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_unicode_character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLExpressionsParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLExpressionsParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLExpressionsParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLExpressionsParser.UNICODE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_latin_unicode_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLatin_unicode_character_set_phrase" ):
                listener.enterLatin_unicode_character_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLatin_unicode_character_set_phrase" ):
                listener.exitLatin_unicode_character_set_phrase(self)




    def latin_unicode_character_set_phrase(self):

        localctx = TeradataSQLExpressionsParser.Latin_unicode_character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_latin_unicode_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5826
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5827
            self.match(TeradataSQLExpressionsParser.SET)
            self.state = 5828
            _la = self._input.LA(1)
            if not(_la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.length = None # Integer_literalContext

        def INLINE(self):
            return self.getToken(TeradataSQLExpressionsParser.INLINE, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLExpressionsParser.LENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_inline_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_length" ):
                listener.enterInline_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_length" ):
                listener.exitInline_length(self)




    def inline_length(self):

        localctx = TeradataSQLExpressionsParser.Inline_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_inline_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5830
            self.match(TeradataSQLExpressionsParser.INLINE)
            self.state = 5831
            self.match(TeradataSQLExpressionsParser.LENGTH)
            self.state = 5832
            localctx.length = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLExpressionsParser.FORMAT, 0)

        def BSON(self):
            return self.getToken(TeradataSQLExpressionsParser.BSON, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLExpressionsParser.UBJSON, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_json_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_storage_format" ):
                listener.enterJson_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_storage_format" ):
                listener.exitJson_storage_format(self)




    def json_storage_format(self):

        localctx = TeradataSQLExpressionsParser.Json_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_json_storage_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5834
            self.match(TeradataSQLExpressionsParser.STORAGE)
            self.state = 5835
            self.match(TeradataSQLExpressionsParser.FORMAT)
            self.state = 5836
            _la = self._input.LA(1)
            if not(_la==556 or _la==1010):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLExpressionsParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLExpressionsParser.FORMAT, 0)

        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Dataset_storage_formatContext,0)


        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_schemaContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_dataset_storage_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format_clause" ):
                listener.enterDataset_storage_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format_clause" ):
                listener.exitDataset_storage_format_clause(self)




    def dataset_storage_format_clause(self):

        localctx = TeradataSQLExpressionsParser.Dataset_storage_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_dataset_storage_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5838
            self.match(TeradataSQLExpressionsParser.STORAGE)
            self.state = 5839
            self.match(TeradataSQLExpressionsParser.FORMAT)
            self.state = 5840
            self.dataset_storage_format()
            self.state = 5842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
            if la_ == 1:
                self.state = 5841
                self.with_schema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVRO(self):
            return self.getToken(TeradataSQLExpressionsParser.AVRO, 0)

        def CSV(self):
            return self.getToken(TeradataSQLExpressionsParser.CSV, 0)

        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_dataset_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format" ):
                listener.enterDataset_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format" ):
                listener.exitDataset_storage_format(self)




    def dataset_storage_format(self):

        localctx = TeradataSQLExpressionsParser.Dataset_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_dataset_storage_format)
        try:
            self.state = 5849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5844
                self.match(TeradataSQLExpressionsParser.AVRO)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5845
                self.match(TeradataSQLExpressionsParser.CSV)
                self.state = 5847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
                if la_ == 1:
                    self.state = 5846
                    self.latin_unicode_character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Table_nameContext

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLExpressionsParser.SCHEMA, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_schema" ):
                listener.enterWith_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_schema" ):
                listener.exitWith_schema(self)




    def with_schema(self):

        localctx = TeradataSQLExpressionsParser.With_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_with_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5851
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 5852
            self.match(TeradataSQLExpressionsParser.SCHEMA)
            self.state = 5853
            localctx.schema_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def TIME(self):
            return self.getToken(TeradataSQLExpressionsParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLExpressionsParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_time_zone" ):
                listener.enterWith_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_time_zone" ):
                listener.exitWith_time_zone(self)




    def with_time_zone(self):

        localctx = TeradataSQLExpressionsParser.With_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_with_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5855
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 5856
            self.match(TeradataSQLExpressionsParser.TIME)
            self.state = 5857
            self.match(TeradataSQLExpressionsParser.ZONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.With_request_modifierContext,0)


        def using_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Using_request_modifierContext,0)


        def explain_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Explain_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequest_modifier" ):
                listener.enterRequest_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequest_modifier" ):
                listener.exitRequest_modifier(self)




    def request_modifier(self):

        localctx = TeradataSQLExpressionsParser.Request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_request_modifier)
        try:
            self.state = 5863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5859
                self.locking_request_modifier()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5860
                self.with_request_modifier()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5861
                self.using_request_modifier()
                pass
            elif token in [128, 150, 938]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5862
                self.explain_request_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Locking_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Locking_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_locking_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_request_modifier" ):
                listener.enterLocking_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_request_modifier" ):
                listener.exitLocking_request_modifier(self)




    def locking_request_modifier(self):

        localctx = TeradataSQLExpressionsParser.Locking_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_locking_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5866 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5865
                self.locking_spec()
                self.state = 5868 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==226 or _la==227):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def lock_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Lock_typeContext,0)


        def LOCKING(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCKING, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCK, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Database_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Table_nameContext,0)


        def ROW(self):
            return self.getToken(TeradataSQLExpressionsParser.ROW, 0)

        def MODE(self):
            return self.getToken(TeradataSQLExpressionsParser.MODE, 0)

        def NOWAIT(self):
            return self.getToken(TeradataSQLExpressionsParser.NOWAIT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLExpressionsParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLExpressionsParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLExpressionsParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLExpressionsParser.VIEW, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_locking_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_spec" ):
                listener.enterLocking_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_spec" ):
                listener.exitLocking_spec(self)




    def locking_spec(self):

        localctx = TeradataSQLExpressionsParser.Locking_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_locking_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5870
            _la = self._input.LA(1)
            if not(_la==226 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
            if la_ == 1:
                self.state = 5872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 5871
                    self.match(TeradataSQLExpressionsParser.DATABASE)


                self.state = 5874
                self.database_name()
                pass

            elif la_ == 2:
                self.state = 5876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 5875
                    self.match(TeradataSQLExpressionsParser.TABLE)


                self.state = 5878
                self.table_name()
                pass

            elif la_ == 3:
                self.state = 5880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 5879
                    self.match(TeradataSQLExpressionsParser.VIEW)


                self.state = 5882
                localctx.view_name = self.table_name()
                pass

            elif la_ == 4:
                self.state = 5883
                self.match(TeradataSQLExpressionsParser.ROW)
                pass


            self.state = 5887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==190:
                self.state = 5886
                _la = self._input.LA(1)
                if not(_la==159 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5889
            self.lock_type()
            self.state = 5891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 5890
                self.match(TeradataSQLExpressionsParser.MODE)


            self.state = 5894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 5893
                self.match(TeradataSQLExpressionsParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(TeradataSQLExpressionsParser.ACCESS, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCL, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLExpressionsParser.EXCLUSIVE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLExpressionsParser.SHARE, 0)

        def READ(self):
            return self.getToken(TeradataSQLExpressionsParser.READ, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLExpressionsParser.OVERRIDE, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLExpressionsParser.WRITE, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLExpressionsParser.CHECKSUM, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLExpressionsParser.LOAD, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLExpressionsParser.COMMITTED, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = TeradataSQLExpressionsParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 5907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5896
                self.match(TeradataSQLExpressionsParser.ACCESS)
                pass
            elif token in [659, 662]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5897
                _la = self._input.LA(1)
                if not(_la==659 or _la==662):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [923]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5898
                self.match(TeradataSQLExpressionsParser.SHARE)
                pass
            elif token in [877]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5899
                self.match(TeradataSQLExpressionsParser.READ)
                self.state = 5901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 5900
                    self.match(TeradataSQLExpressionsParser.OVERRIDE)


                pass
            elif token in [1041]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5903
                self.match(TeradataSQLExpressionsParser.WRITE)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5904
                self.match(TeradataSQLExpressionsParser.CHECKSUM)
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5905
                self.match(TeradataSQLExpressionsParser.LOAD)
                self.state = 5906
                self.match(TeradataSQLExpressionsParser.COMMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLExpressionsParser.WITH, 0)

        def cte_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Cte_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Cte_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_with_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_request_modifier" ):
                listener.enterWith_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_request_modifier" ):
                listener.exitWith_request_modifier(self)




    def with_request_modifier(self):

        localctx = TeradataSQLExpressionsParser.With_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_with_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5909
            self.match(TeradataSQLExpressionsParser.WITH)
            self.state = 5910
            self.cte_spec()
            self.state = 5915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5911
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 5912
                self.cte_spec()
                self.state = 5917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Regular_cte_specContext,0)


        def recursive_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Recursive_cte_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_spec" ):
                listener.enterCte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_spec" ):
                listener.exitCte_spec(self)




    def cte_spec(self):

        localctx = TeradataSQLExpressionsParser.Cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_cte_spec)
        try:
            self.state = 5920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5918
                self.regular_cte_spec()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5919
                self.recursive_cte_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_regular_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_cte_spec" ):
                listener.enterRegular_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_cte_spec" ):
                listener.exitRegular_cte_spec(self)




    def regular_cte_spec(self):

        localctx = TeradataSQLExpressionsParser.Regular_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_regular_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5922
            localctx.query_name = self.alias_name()
            self.state = 5924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 5923
                self.column_list()


            self.state = 5926
            self.match(TeradataSQLExpressionsParser.AS)
            self.state = 5927
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def RECURSIVE(self):
            return self.getToken(TeradataSQLExpressionsParser.RECURSIVE, 0)

        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Column_listContext,0)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.UNION)
            else:
                return self.getToken(TeradataSQLExpressionsParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.ALL)
            else:
                return self.getToken(TeradataSQLExpressionsParser.ALL, i)

        def query_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Query_termContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Query_termContext,i)


        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_recursive_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte_spec" ):
                listener.enterRecursive_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte_spec" ):
                listener.exitRecursive_cte_spec(self)




    def recursive_cte_spec(self):

        localctx = TeradataSQLExpressionsParser.Recursive_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_recursive_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5929
            self.match(TeradataSQLExpressionsParser.RECURSIVE)
            self.state = 5930
            localctx.query_name = self.alias_name()
            self.state = 5932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 5931
                self.column_list()


            self.state = 5934
            self.match(TeradataSQLExpressionsParser.AS)
            self.state = 5935
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5936
            self.query_expr(0)
            self.state = 5940 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5937
                self.match(TeradataSQLExpressionsParser.UNION)
                self.state = 5938
                self.match(TeradataSQLExpressionsParser.ALL)
                self.state = 5939
                self.query_term()
                self.state = 5942 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==447):
                    break

            self.state = 5944
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLExpressionsParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.OPEN_PAR, 0)

        def using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Using_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLExpressionsParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLExpressionsParser.COMMA)
            else:
                return self.getToken(TeradataSQLExpressionsParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_using_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_request_modifier" ):
                listener.enterUsing_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_request_modifier" ):
                listener.exitUsing_request_modifier(self)




    def using_request_modifier(self):

        localctx = TeradataSQLExpressionsParser.Using_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_using_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5946
            self.match(TeradataSQLExpressionsParser.USING)
            self.state = 5947
            self.match(TeradataSQLExpressionsParser.OPEN_PAR)
            self.state = 5948
            self.using_spec()
            self.state = 5953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5949
                self.match(TeradataSQLExpressionsParser.COMMA)
                self.state = 5950
                self.using_spec()
                self.state = 5955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5956
            self.match(TeradataSQLExpressionsParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Variable_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLExpressionsParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLExpressionsParser.Data_type_attributeContext,i)


        def AS(self):
            return self.getToken(TeradataSQLExpressionsParser.AS, 0)

        def DEFERRED(self):
            return self.getToken(TeradataSQLExpressionsParser.DEFERRED, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLExpressionsParser.LOCATOR, 0)

        def BY(self):
            return self.getToken(TeradataSQLExpressionsParser.BY, 0)

        def NAME(self):
            return self.getToken(TeradataSQLExpressionsParser.NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_spec" ):
                listener.enterUsing_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_spec" ):
                listener.exitUsing_spec(self)




    def using_spec(self):

        localctx = TeradataSQLExpressionsParser.Using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_using_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5958
            self.variable_name()
            self.state = 5959
            self.data_type()
            self.state = 5963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 5960
                self.data_type_attribute()
                self.state = 5965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5966
                self.match(TeradataSQLExpressionsParser.AS)
                self.state = 5973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 5967
                    self.match(TeradataSQLExpressionsParser.DEFERRED)
                    self.state = 5970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 5968
                        self.match(TeradataSQLExpressionsParser.BY)
                        self.state = 5969
                        self.match(TeradataSQLExpressionsParser.NAME)


                    pass
                elif token in [225]:
                    self.state = 5972
                    self.match(TeradataSQLExpressionsParser.LOCATOR)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(TeradataSQLExpressionsParser.EXPLAIN, 0)

        def IN(self):
            return self.getToken(TeradataSQLExpressionsParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLExpressionsParser.XML, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLExpressionsParser.STATIC, 0)

        def DYNAMIC(self):
            return self.getToken(TeradataSQLExpressionsParser.DYNAMIC, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLExpressionsParser.NODDLTEXT, 0)

        def getRuleIndex(self):
            return TeradataSQLExpressionsParser.RULE_explain_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_request_modifier" ):
                listener.enterExplain_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_request_modifier" ):
                listener.exitExplain_request_modifier(self)




    def explain_request_modifier(self):

        localctx = TeradataSQLExpressionsParser.Explain_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_explain_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==938:
                self.state = 5977
                _la = self._input.LA(1)
                if not(_la==128 or _la==938):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5980
            self.match(TeradataSQLExpressionsParser.EXPLAIN)
            self.state = 5986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 5981
                self.match(TeradataSQLExpressionsParser.IN)
                self.state = 5982
                self.match(TeradataSQLExpressionsParser.XML)
                self.state = 5984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 5983
                    self.match(TeradataSQLExpressionsParser.NODDLTEXT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[0] = self.query_expr_sempred
        self._predicates[80] = self.logical_expr_sempred
        self._predicates[81] = self.scalar_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def query_expr_sempred(self, localctx:Query_exprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

    def scalar_expr_sempred(self, localctx:Scalar_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 69)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 68)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 67)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 66)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 65)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 4)
         




